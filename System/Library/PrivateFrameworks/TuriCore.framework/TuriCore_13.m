void turi::flexible_type_internals::ft_converter<9>::set<std::map<turi::flexible_type,unsigned long>>(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  atomic_ullong *v11;
  atomic_ullong *v12;
  uint64_t v13;
  atomic_ullong *v14;
  atomic_ullong *v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unsigned int v19;
  atomic_ullong *v20;
  void *v21;
  atomic_ullong *v22;
  atomic_ullong *v23;
  atomic_ullong *v24;
  uint64_t v25;
  atomic_ullong *v26;
  atomic_ullong *v27;
  void *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unsigned int v31;
  atomic_ullong *v32;
  void *v33;
  atomic_ullong *v34;
  void *v35;
  void *v36;
  BOOL v37;
  atomic_ullong *volatile v38;
  atomic_ullong *volatile v39;
  uint64_t v40;
  atomic_ullong *volatile v41;
  atomic_ullong *volatile v42;
  void *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unsigned int v46;
  atomic_ullong *volatile v47;
  void *v48;
  atomic_ullong *volatile v49;
  long long v50;
  unint64_t v51;
  void **v52[2];
  atomic_ullong *v53[2];
  atomic_ullong *v54[2];
  unsigned char v55[13];
  unsigned char v56[13];
  uint64_t v57;

  v57 = *MEMORY[0x263EF8340];
  v50 = 0uLL;
  v51 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v50, a2[2]);
  v6 = (void *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    while (2)
    {
      memset(v54, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v54, v5 + 4);
      memset(v53, 0, 13);
      turi::flexible_type_internals::ft_resolver<3>::set<unsigned long const&>((uint64_t)v53, (atomic_ullong **)v5 + 6);
      *(atomic_ullong **)&v55[5] = *(atomic_ullong **)((char *)v54 + 5);
      *(atomic_ullong **)v55 = v54[0];
      v55[12] = BYTE4(v54[1]);
      BYTE4(v54[1]) = 0;
      *(atomic_ullong **)&v56[5] = *(atomic_ullong **)((char *)v53 + 5);
      *(atomic_ullong **)v56 = v53[0];
      v56[12] = BYTE4(v53[1]);
      BYTE4(v53[1]) = 0;
      v7 = *((void *)&v50 + 1);
      if (*((void *)&v50 + 1) >= v51)
      {
        v10 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v50, (uint64_t *)v55);
      }
      else
      {
        **((void **)&v50 + 1) = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 12) = 0;
        v8 = *(void *)v55;
        *(void *)(v7 + 5) = *(void *)&v55[5];
        *(void *)v7 = v8;
        *(unsigned char *)(v7 + 12) = v55[12];
        v55[12] = 0;
        *(void *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(unsigned char *)(v7 + 28) = 0;
        v9 = *(void *)v56;
        *(void *)(v7 + 21) = *(void *)&v56[5];
        *(void *)(v7 + 16) = v9;
        *(unsigned char *)(v7 + 28) = v56[12];
        v56[12] = 0;
        v10 = v7 + 32;
      }
      *((void *)&v50 + 1) = v10;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v55);
      switch(BYTE4(v53[1]))
      {
        case 2:
          if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          v11 = v53[0];
          if (!v53[0]) {
            goto LABEL_37;
          }
          if (*((char *)v53[0] + 31) < 0) {
            operator delete(*((void **)v53[0] + 1));
          }
          v12 = v11;
          v13 = 0x1012C404EF22A49;
          goto LABEL_36;
        case 3:
          if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          v20 = v53[0];
          if (!v53[0]) {
            goto LABEL_37;
          }
          v21 = (void *)v53[0][1];
          if (v21)
          {
            v53[0][2] = (atomic_ullong)v21;
            operator delete(v21);
          }
          v12 = v20;
          v13 = 0x1080C409938AC02;
          goto LABEL_36;
        case 4:
          if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          v14 = v53[0];
          if (!v53[0]) {
            goto LABEL_37;
          }
          v52[0] = (void **)(v53[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v52);
          goto LABEL_31;
        case 5:
          if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          v14 = v53[0];
          if (!v53[0]) {
            goto LABEL_37;
          }
          v52[0] = (void **)(v53[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v52);
LABEL_31:
          v12 = v14;
          v13 = 0x1020C405E66F15BLL;
          goto LABEL_36;
        case 8:
          if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          v22 = v53[0];
          if (!v53[0]) {
            goto LABEL_37;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v53[0] + 2);
          v12 = v22;
          v19 = -235920773;
          goto LABEL_35;
        case 9:
          if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          v15 = v53[0];
          if (!v53[0]) {
            goto LABEL_37;
          }
          v16 = (void *)v53[0][6];
          if (v16)
          {
            v53[0][7] = (atomic_ullong)v16;
            operator delete(v16);
          }
          v17 = (void *)v15[3];
          if (v17)
          {
            v15[4] = (atomic_ullong)v17;
            operator delete(v17);
          }
          v18 = (std::__shared_weak_count *)v15[2];
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          v12 = v15;
          v19 = 2071181815;
LABEL_35:
          v13 = v19 | 0x1030C4000000000;
LABEL_36:
          MEMORY[0x22A614FA0](v12, v13);
LABEL_37:
          switch(BYTE4(v54[1]))
          {
            case 2:
              if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              v23 = v54[0];
              if (!v54[0]) {
                goto LABEL_69;
              }
              if (*((char *)v54[0] + 31) < 0) {
                operator delete(*((void **)v54[0] + 1));
              }
              v24 = v23;
              v25 = 0x1012C404EF22A49;
              goto LABEL_68;
            case 3:
              if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              v32 = v54[0];
              if (!v54[0]) {
                goto LABEL_69;
              }
              v33 = (void *)v54[0][1];
              if (v33)
              {
                v54[0][2] = (atomic_ullong)v33;
                operator delete(v33);
              }
              v24 = v32;
              v25 = 0x1080C409938AC02;
              goto LABEL_68;
            case 4:
              if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              v26 = v54[0];
              if (!v54[0]) {
                goto LABEL_69;
              }
              v52[0] = (void **)(v54[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v52);
              goto LABEL_63;
            case 5:
              if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              v26 = v54[0];
              if (!v54[0]) {
                goto LABEL_69;
              }
              v52[0] = (void **)(v54[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v52);
LABEL_63:
              v24 = v26;
              v25 = 0x1020C405E66F15BLL;
              goto LABEL_68;
            case 8:
              if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              v34 = v54[0];
              if (!v54[0]) {
                goto LABEL_69;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v54[0] + 2);
              v24 = v34;
              v31 = -235920773;
              goto LABEL_67;
            case 9:
              if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              v27 = v54[0];
              if (!v54[0]) {
                goto LABEL_69;
              }
              v28 = (void *)v54[0][6];
              if (v28)
              {
                v54[0][7] = (atomic_ullong)v28;
                operator delete(v28);
              }
              v29 = (void *)v27[3];
              if (v29)
              {
                v27[4] = (atomic_ullong)v29;
                operator delete(v29);
              }
              v30 = (std::__shared_weak_count *)v27[2];
              if (v30) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v30);
              }
              v24 = v27;
              v31 = 2071181815;
LABEL_67:
              v25 = v31 | 0x1030C4000000000;
LABEL_68:
              MEMORY[0x22A614FA0](v24, v25);
LABEL_69:
              v35 = (void *)v5[1];
              if (v35)
              {
                do
                {
                  v36 = v35;
                  v35 = (void *)*v35;
                }
                while (v35);
              }
              else
              {
                do
                {
                  v36 = (void *)v5[2];
                  v37 = *v36 == (void)v5;
                  v5 = v36;
                }
                while (!v37);
              }
              v5 = v36;
              if (v36 == v4) {
                goto LABEL_75;
              }
              continue;
            default:
              goto LABEL_69;
          }
        default:
          goto LABEL_37;
      }
    }
  }
LABEL_75:
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      v38 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      if (*((char *)v38 + 31) < 0) {
        operator delete((void *)v38[1]);
      }
      v39 = v38;
      v40 = 0x1012C404EF22A49;
      goto LABEL_106;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      v47 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      v48 = (void *)v47[1];
      if (v48)
      {
        v47[2] = (atomic_ullong)v48;
        operator delete(v48);
      }
      v39 = v47;
      v40 = 0x1080C409938AC02;
      goto LABEL_106;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      v41 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      *(void *)v55 = v41 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
      goto LABEL_101;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      v41 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      *(void *)v55 = v41 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
LABEL_101:
      v39 = v41;
      v40 = 0x1020C405E66F15BLL;
      goto LABEL_106;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      v49 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v49 + 2);
      v39 = v49;
      v46 = -235920773;
      goto LABEL_105;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      v42 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      v43 = (void *)v42[6];
      if (v43)
      {
        v42[7] = (atomic_ullong)v43;
        operator delete(v43);
      }
      v44 = (void *)v42[3];
      if (v44)
      {
        v42[4] = (atomic_ullong)v44;
        operator delete(v44);
      }
      v45 = (std::__shared_weak_count *)v42[2];
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      v39 = v42;
      v46 = 2071181815;
LABEL_105:
      v40 = v46 | 0x1030C4000000000;
LABEL_106:
      MEMORY[0x22A614FA0](v39, v40);
LABEL_107:
      *(void *)a1 = 0;
LABEL_108:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 5;
      operator new();
    default:
      goto LABEL_108;
  }
}

void sub_224467504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  MEMORY[0x22A614FA0](v18, 0x1012C404EF22A49);
  a18 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void turi::supervised::get_toolkit_class_registration(void *a1@<X8>)
{
  v6[212] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  memset(v3, 0, 24);
  v4[0] = 0;
  v4[1] = 0;
  v3[3] = v4;
  turi::supervised::xgboost::xgboost_model::xgboost_model((turi::supervised::xgboost::xgboost_model *)v6);
  v6[0] = &unk_26D781040;
  MEMORY[0x22A614700](v3, "boosted_trees_classifier");
  v4[2] = turi::supervised::get_toolkit_class_registration(void)::$_0::__invoke;
  v2 = (void *)turi::model_base::list_functions((turi::model_base *)v6);
  turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(v2, (uint64_t)&v5);
}

void sub_224471828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,char a27,uint64_t a28)
{
}

void turi::supervised::get_toolkit_function_registration(void *a1@<X8>)
{
  v3[17] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "_classifier_model_selector");
  turi::toolkit_function_wrapper_impl::make_spec_indirect<std::string (*)(std::shared_ptr<turi::unity_sframe>),char const*>("_X", (uint64_t)turi::supervised::_classifier_model_selector, (uint64_t)__p, (uint64_t)v3);
}

void sub_224473EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)(v57 - 176));
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v57 - 176) = v56;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 176));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<std::string (*)(std::shared_ptr<turi::unity_sframe>),char const*>(char *__s@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  *(void *)&long long v14 = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v10 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, __s);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  char v12 = 0;
  v7 = (std::string *)operator new(0x18uLL);
  v8 = v7;
  v9 = v7 + 1;
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v13, &v14, v7);
  turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(a2, &v10, (long long **)&v7, a4);
}

void sub_224474160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),char const*,char const*>(char *__s@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v17 = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v12 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, __s);
  std::string::basic_string[abi:ne180100]<0>(v16, a4);
  v9 = 0;
  std::string v10 = 0;
  v11 = 0;
  long long v13 = &v9;
  char v14 = 0;
  v9 = (std::string *)operator new(0x30uLL);
  std::string v10 = v9;
  v11 = (long long *)&v9[2];
  std::string v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, &v15, &v17, v9);
  turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(a2, &v12, (long long **)&v9, a5);
}

void sub_224474318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),char const*>(char *__s@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  *(void *)&long long v14 = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v10 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, __s);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  char v12 = 0;
  v7 = (std::string *)operator new(0x18uLL);
  v8 = v7;
  v9 = v7 + 1;
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v13, &v14, v7);
  turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(a2, &v10, (long long **)&v7, a4);
}

void sub_2244744CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),char const*,char const*,char const*>(char *__s@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)&long long v20 = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v14 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v17, __s);
  std::string::basic_string[abi:ne180100]<0>(v18, a4);
  std::string::basic_string[abi:ne180100]<0>(v19, a5);
  v11 = 0;
  char v12 = 0;
  long long v13 = 0;
  long long v15 = &v11;
  char v16 = 0;
  v11 = (std::string *)operator new(0x48uLL);
  char v12 = v11;
  long long v13 = v11 + 3;
  char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v13, &v17, &v20, v11);
  turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(a2, &v14, (long long **)&v11, a6);
}

void sub_2244746A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void turi::toolkit_function_wrapper_impl::make_spec_indirect<std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),char const*,char const*,char const*,char const*>(char *__s@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)&long long v23 = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v16 = *(std::string *)a3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, __s);
  std::string::basic_string[abi:ne180100]<0>(v20, a4);
  std::string::basic_string[abi:ne180100]<0>(v21, a5);
  std::string::basic_string[abi:ne180100]<0>(v22, a6);
  long long v13 = 0;
  std::string v14 = 0;
  long long v15 = 0;
  long long v17 = &v13;
  char v18 = 0;
  long long v13 = (std::string *)operator new(0x60uLL);
  std::string v14 = v13;
  long long v15 = (long long *)&v13[4];
  std::string v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, &v19, &v23, v13);
  turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(a2, &v16, (long long **)&v13, a7);
}

void sub_2244748D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
}

void turi::supervised::get_toolkit_class_registration(void)::$_0::__invoke()
{
}

void sub_2244749C8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C40D8C574BFLL);
  _Unwind_Resume(a1);
}

void turi::supervised::get_toolkit_class_registration(void)::$_1::__invoke()
{
}

void sub_224474A48(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C40D8C574BFLL);
  _Unwind_Resume(a1);
}

void turi::supervised::get_toolkit_class_registration(void)::$_2::__invoke()
{
}

void sub_224474AC8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C40D8C574BFLL);
  _Unwind_Resume(a1);
}

void turi::supervised::get_toolkit_class_registration(void)::$_3::__invoke()
{
}

void sub_224474B48(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C40D8C574BFLL);
  _Unwind_Resume(a1);
}

void turi::supervised::get_toolkit_class_registration(void)::$_4::__invoke()
{
}

void sub_224474BC8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C40D8C574BFLL);
  _Unwind_Resume(a1);
}

void turi::supervised::get_toolkit_class_registration(void)::$_5::__invoke()
{
}

void sub_224474C48(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C40D8C574BFLL);
  _Unwind_Resume(a1);
}

void turi::supervised::get_toolkit_class_registration(void)::$_6::__invoke()
{
}

void turi::supervised::get_toolkit_class_registration(void)::$_7::__invoke()
{
}

void turi::supervised::get_toolkit_class_registration(void)::$_8::__invoke()
{
}

void turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(uint64_t a1@<X0>, const std::string *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = a4 + 32;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 48) = a4 + 56;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 128) = 0;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(a1, (long long **)&v13, (uint64_t)v18);
  v15[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(a1, v17);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v18);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v9 = a2;
  }
  uint64_t v10 = (uint64_t)&v9[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v11 = *(unsigned __int8 *)(v10 + size--);
  }
  while (v11 != 58);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=((std::string *)a4, a2);
  }
  else
  {
    std::string::basic_string(&v12, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v12;
  }
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((void *)(a4 + 72), (uint64_t)v15);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((void *)(a4 + 104), (uint64_t)v17);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)&v14);
}

void sub_224475758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25)
{
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)&a25);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v26 - 136));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v26 - 104));
  turi::toolkit_function_specification::~toolkit_function_specification(v25);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  v20[4] = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v13 = 0;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v14 = 0;
  long long v15 = v16;
  long long v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  void v19[3] = 0;
  void v20[3] = 0;
  uint64_t v9 = a1;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v4 = v9;
  long long v6 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  std::string::size_type v5 = v10.__r_.__value_.__r.__words[2];
  memset(&v10, 0, sizeof(v10));
  *(void *)(a3 + 24) = 0;
  v7 = operator new(0x28uLL);
  void *v7 = &unk_26D782628;
  v7[1] = v4;
  *((_OWORD *)v7 + 1) = v6;
  v7[4] = v5;
  memset(v8, 0, sizeof(v8));
  *(void *)(a3 + 24) = v7;
  int v11 = (std::string *)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  int v11 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v19);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v15, v16[0]);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

void sub_224475BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  int v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  uint64_t v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  v6[3] = 0;
  v7[3] = 0;
  *a2 = &unk_26D7826A8;
  a2[1] = a1;
  a2[3] = a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v6);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, v5[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

void *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(void *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>((uint64_t)v8, (uint64_t)v6);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v8);
  std::string::size_type v5 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_224475DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D782628;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D782628;
  v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  v3 = *(long long **)(a1 + 16);
  *(void *)v2 = &unk_26D782628;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3));
  return v2;
}

void sub_224475F04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26D782628;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(long long **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, void *a2)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = a2[1];
  uint64_t v4 = (uint64_t *)*a2;
  uint64_t v5 = v3;
  if (a2[2])
  {
    *(void *)(v3 + 16) = &v5;
    *a2 = v2;
    void *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v4 = &v5;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v4);
}

void sub_224476094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x263EF8340];
  char v13 = 1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v16 = 0;
  long long v17 = v18;
  v12[0] = 0;
  v12[1] = 0;
  memset(&v10, 0, sizeof(v10));
  uint64_t v11 = a2;
  if (&v9 == (uint64_t **)a1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *(std::string **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
    begin = (long long *)v10.__begin_;
    end = (long long *)v10.__end_;
  }
  uint64_t v9 = v12;
  long long v6 = v12;
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v8 = v11;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sframe>>>::operator()<0>((uint64_t *)&v6);
  __p[0] = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  memset(__p, 0, sizeof(__p));
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::string>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)__p, (void (**)(long long *__return_ptr, uint64_t *))a1, v12);
  turi::flexible_type_converter<std::string>::set((uint64_t)v19);
}

void sub_224476258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,char a27)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a27);
  _Unwind_Resume(a1);
}

double turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::string>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, void (**a2)(long long *__return_ptr, uint64_t *), uint64_t *a3)
{
  void (*v4)(long long *__return_ptr, uint64_t *);
  std::__shared_weak_count *v5;
  double result;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v9 = *a3;
  std::vector<std::string> v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v4(&v7, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  *(void *)(a1 + 16) = v8;
  return result;
}

void sub_224476330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sframe>>>::operator()<0>(uint64_t *a1)
{
  uint64_t v1 = (const void **)a1[1];
  if ((const void **)a1[2] != v1)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], v1);
    if (a1[4] + 8 == v3)
    {
      *(void *)&long long v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(mpl_::integral_c<int,0>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get((int *)(v3 + 56), &v7);
    uint64_t v4 = *a1;
    long long v5 = v7;
    long long v7 = 0uLL;
    long long v6 = *(std::__shared_weak_count **)(v4 + 8);
    *(_OWORD *)uint64_t v4 = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D7826A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D7826A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1, void *a2)
{
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()((void (**)(long long *__return_ptr, uint64_t *))(a1 + 8), a2);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()(void (**a1)(long long *__return_ptr, uint64_t *), void *a2)
{
  v8[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 == 80)
  {
    v7[0] = 0;
    v7[1] = 0;
    __p = v7;
    long long v5 = a2;
    turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sframe>>>::operator()<0>((uint64_t *)&__p);
    __p = 0;
    long long v5 = 0;
    uint64_t v6 = 0;
    turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::string>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&__p, a1, v7);
    turi::flexible_type_converter<std::string>::set((uint64_t)v8);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
}

void sub_2244765B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sframe>>>::operator()<0>(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (*(void *)(v1 + 8) != *(void *)v1)
  {
    turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get(*(int **)v1, &v6);
    uint64_t v3 = *a1;
    long long v4 = v6;
    long long v6 = 0uLL;
    long long v5 = *(std::__shared_weak_count **)(v3 + 8);
    *(_OWORD *)uint64_t v3 = v4;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

uint64_t std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26D782728;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), a2);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D782728;
  uint64_t v2 = (void *)(a1 + 8);
  long long v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return a1;
}

{
  void *v2;
  void **v4;

  *(void *)a1 = &unk_26D782728;
  uint64_t v2 = (void *)(a1 + 8);
  long long v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return MEMORY[0x22A614FA0](a1, 0x10A1C409BB2071CLL);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_26D782728;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_224476810(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D782728;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::make_spec<1ul,std::string (*)(std::shared_ptr<turi::unity_sframe>)>(std::string (*)(std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  v11[11] = *MEMORY[0x263EF8340];
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)(a3 + 48) = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a2);
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 48))(v11);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
  std::string::basic_string[abi:ne180100]<0>(__p, "return_value");
  std::vector<std::string> v10 = __p;
  long long v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a3 + 32), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v6 + 14, v11);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a3 = 1;
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v11);
}

void sub_224476A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, long long __str,uint64_t __str_16)
{
  if (a2)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__str);
    if (a2 == 4)
    {
      exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
      if (exception_ptr[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)exception_ptr, *((void *)exception_ptr + 1));
      }
      else
      {
        long long v26 = *(_OWORD *)exception_ptr;
        __str_16 = *((void *)exception_ptr + 2);
        __str = v26;
      }
      __cxa_begin_catch(exception_object);
      std::string::operator=(v22, (const std::string *)&__str);
      unsigned char *v21 = 0;
      if (SHIBYTE(__str_16) < 0) {
        operator delete((void *)__str);
      }
      __cxa_end_catch();
    }
    else if (a2 == 3)
    {
      v27 = __cxa_begin_catch(exception_object);
      MEMORY[0x22A614700](v22, v27);
      unsigned char *v21 = 0;
      __cxa_end_catch();
    }
    else
    {
      v28 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        MEMORY[0x22A614700](v22, v29);
      }
      else
      {
        MEMORY[0x22A614700](v22, "Unknown Exception");
      }
      unsigned char *v21 = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x224476A30);
  }
  _Unwind_Resume(exception_object);
}

void sub_224476C18(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x224476C10);
}

void turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(uint64_t a1@<X0>, const std::string *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = a4 + 32;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 48) = a4 + 56;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 128) = 0;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(a1, (long long **)&v13, (uint64_t)v18);
  v15[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(a1, v17);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v18);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    uint64_t v9 = a2;
  }
  uint64_t v10 = (uint64_t)&v9[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v11 = *(unsigned __int8 *)(v10 + size--);
  }
  while (v11 != 58);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=((std::string *)a4, a2);
  }
  else
  {
    std::string::basic_string(&v12, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v12;
  }
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((void *)(a4 + 72), (uint64_t)v15);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((void *)(a4 + 104), (uint64_t)v17);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)&v14);
}

void sub_224477440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25)
{
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)&a25);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v26 - 136));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v26 - 104));
  turi::toolkit_function_specification::~toolkit_function_specification(v25);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  v20[4] = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v13 = 0;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v16;
  long long v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  void v19[3] = 0;
  void v20[3] = 0;
  uint64_t v9 = a1;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v4 = v9;
  long long v6 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  std::string::size_type v5 = v10.__r_.__value_.__r.__words[2];
  memset(&v10, 0, sizeof(v10));
  *(void *)(a3 + 24) = 0;
  long long v7 = operator new(0x28uLL);
  void *v7 = &unk_26D7827A8;
  v7[1] = v4;
  *((_OWORD *)v7 + 1) = v6;
  v7[4] = v5;
  memset(v8, 0, sizeof(v8));
  *(void *)(a3 + 24) = v7;
  int v11 = (std::string *)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  int v11 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v19);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v15, v16[0]);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

void sub_224477898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  int v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  uint64_t v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  v6[3] = 0;
  v7[3] = 0;
  *a2 = &unk_26D782828;
  a2[1] = a1;
  a2[3] = a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v6);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, v5[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

void *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(void *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>((uint64_t)v8, (uint64_t)v6);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v8);
  std::string::size_type v5 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_224477A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D7827A8;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D7827A8;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(long long **)(a1 + 16);
  *(void *)uint64_t v2 = &unk_26D7827A8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3));
  return v2;
}

void sub_224477BEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26D7827A8;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(long long **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, void *a2)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = a2[1];
  uint64_t v4 = (uint64_t *)*a2;
  uint64_t v5 = v3;
  if (a2[2])
  {
    *(void *)(v3 + 16) = &v5;
    *a2 = v2;
    void *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v4 = &v5;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v4);
}

void sub_224477D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x263EF8340];
  char v13 = 1;
  __p = 0;
  uint64_t v15 = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v16 = 0;
  long long v17 = v18;
  memset(v12, 0, sizeof(v12));
  memset(&v10, 0, sizeof(v10));
  uint64_t v11 = a2;
  if (&v9 == (uint64_t **)a1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *(std::string **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
    begin = (long long *)v10.__begin_;
    end = (long long *)v10.__end_;
  }
  uint64_t v9 = v12;
  long long v6 = v12;
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v8 = v11;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<unsigned long,std::shared_ptr<turi::unity_sframe>>>::operator()<0>(&v6);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<unsigned long,std::shared_ptr<turi::unity_sframe>>>::operator()<1>((uint64_t *)&v6);
  v5.__begin_ = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  memset(&v5, 0, sizeof(v5));
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::vector<std::string>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(&v5, (void (**)(long long *__return_ptr, uint64_t, void ***))a1, v12);
  turi::flexible_type_converter<std::vector<std::string>>::set(&v5, (uint64_t)v19);
}

void sub_224477F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a25);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::vector<std::string>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(std::vector<std::string> *a1, void (**a2)(long long *__return_ptr, uint64_t, void ***), uint64_t *a3)
{
  void (*v4)(long long *__return_ptr, uint64_t, void ***);
  uint64_t v5;
  std::__shared_weak_count *v6;
  long long v7;
  std::string *v8;
  void **v9;
  std::__shared_weak_count *v10;

  uint64_t v4 = *a2;
  std::vector<std::string> v5 = *a3;
  long long v6 = (std::__shared_weak_count *)a3[2];
  uint64_t v9 = (void **)a3[1];
  std::vector<std::string> v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v4(&v7, v5, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::vector<std::string>::__vdeallocate(a1);
  *(_OWORD *)&a1->__begin_ = v7;
  a1->__end_cap_.__value_ = v8;
  uint64_t v8 = 0;
  std::string v7 = 0uLL;
  uint64_t v9 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_22447803C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<unsigned long,std::shared_ptr<turi::unity_sframe>>>::operator()<0>(void *result)
{
  uint64_t v1 = (const void **)result[1];
  if ((const void **)result[2] != v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(result[4], v1);
    if (v2[4] + 8 == v3) {
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(mpl_::integral_c<int,0>)const::{lambda(void)#1}::operator()();
    }
    result = (void *)turi::variant_converter<unsigned long,void>::get((uint64_t)&v4, (int *)(v3 + 56));
    *(void *)void *v2 = result;
  }
  return result;
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<unsigned long,std::shared_ptr<turi::unity_sframe>>>::operator()<1>(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      *(void *)&long long v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get((int *)(v3 + 56), &v7);
    uint64_t v4 = *a1;
    long long v5 = v7;
    long long v7 = 0uLL;
    long long v6 = *(std::__shared_weak_count **)(v4 + 16);
    *(_OWORD *)(v4 + 8) = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D782828;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D782828;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1, std::string *a2)
{
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()((void (**)(long long *__return_ptr, uint64_t, void ***))(a1 + 8), a2);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()(void (**a1)(long long *__return_ptr, uint64_t, void ***), std::string *a2)
{
  v6[2] = *MEMORY[0x263EF8340];
  if (a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0] == 160)
  {
    memset(v5, 0, sizeof(v5));
    v4.__begin_ = (std::vector<std::string>::pointer)v5;
    v4.__end_ = a2;
    boost::fusion::detail::for_each_unrolled<2>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<unsigned long,std::shared_ptr<turi::unity_sframe>>>>((uint64_t)v6, (uint64_t *)&v4);
    memset(&v4, 0, sizeof(v4));
    turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::vector<std::string>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(&v4, a1, v5);
    turi::flexible_type_converter<std::vector<std::string>>::set(&v4, (uint64_t)v6);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
}

void sub_224478358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void boost::fusion::detail::for_each_unrolled<2>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<unsigned long,std::shared_ptr<turi::unity_sframe>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if (*(void *)(v3 + 8) != *(void *)v3) {
    *(void *)*a2 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v4, *(int **)v3);
  }
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<unsigned long,std::shared_ptr<turi::unity_sframe>>>::operator()<1>(a2);
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<unsigned long,std::shared_ptr<turi::unity_sframe>>>::operator()<1>(uint64_t *a1)
{
  uint64_t v1 = *(void *)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1[1] + 8) - v1) >> 4) >= 2)
  {
    turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get((int *)(v1 + 80), &v6);
    uint64_t v3 = *a1;
    long long v4 = v6;
    long long v6 = 0uLL;
    long long v5 = *(std::__shared_weak_count **)(v3 + 16);
    *(_OWORD *)(v3 + 8) = v4;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

uint64_t std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26D7828A8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), a2);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D7828A8;
  uint64_t v2 = (void *)(a1 + 8);
  long long v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return a1;
}

{
  void *v2;
  void **v4;

  *(void *)a1 = &unk_26D7828A8;
  uint64_t v2 = (void *)(a1 + 8);
  long long v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return MEMORY[0x22A614FA0](a1, 0x10A1C409BB2071CLL);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_26D7828A8;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_224478618(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7828A8;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<2ul,std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>)>(std::vector<std::string> (*)(unsigned long,std::shared_ptr<turi::unity_sframe>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(uint64_t a1@<X0>, const std::string *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = a4 + 32;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 48) = a4 + 56;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 128) = 0;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(a1, (long long **)&v13, (uint64_t)v18);
  v15[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(a1, v17);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v18);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    uint64_t v9 = a2;
  }
  uint64_t v10 = (uint64_t)&v9[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v11 = *(unsigned __int8 *)(v10 + size--);
  }
  while (v11 != 58);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=((std::string *)a4, a2);
  }
  else
  {
    std::string::basic_string(&v12, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v12;
  }
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((void *)(a4 + 72), (uint64_t)v15);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((void *)(a4 + 104), (uint64_t)v17);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)&v14);
}

void sub_224478F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25)
{
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)&a25);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v26 - 136));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v26 - 104));
  turi::toolkit_function_specification::~toolkit_function_specification(v25);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  v20[4] = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v13 = 0;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v16;
  long long v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  void v19[3] = 0;
  void v20[3] = 0;
  uint64_t v9 = a1;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v4 = v9;
  long long v6 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  std::string::size_type v5 = v10.__r_.__value_.__r.__words[2];
  memset(&v10, 0, sizeof(v10));
  *(void *)(a3 + 24) = 0;
  long long v7 = operator new(0x28uLL);
  void *v7 = &unk_26D782928;
  v7[1] = v4;
  *((_OWORD *)v7 + 1) = v6;
  v7[4] = v5;
  memset(v8, 0, sizeof(v8));
  *(void *)(a3 + 24) = v7;
  int v11 = (std::string *)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  int v11 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v19);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v15, v16[0]);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

void sub_2244793A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  int v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  uint64_t v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  void v6[3] = 0;
  v7[3] = 0;
  *a2 = &unk_26D7829A8;
  a2[1] = a1;
  a2[3] = a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v6);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, v5[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

void *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(void *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>((uint64_t)v8, (uint64_t)v6);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v8);
  std::string::size_type v5 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_224479598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D782928;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D782928;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(long long **)(a1 + 16);
  *(void *)uint64_t v2 = &unk_26D782928;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3));
  return v2;
}

void sub_2244796FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26D782928;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(long long **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, void *a2)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = a2[1];
  uint64_t v4 = (uint64_t *)*a2;
  uint64_t v5 = v3;
  if (a2[2])
  {
    *(void *)(v3 + 16) = &v5;
    *a2 = v2;
    void *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v4 = &v5;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v4);
}

void sub_22447988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x263EF8340];
  char v13 = 1;
  __p = 0;
  uint64_t v15 = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v16 = 0;
  long long v17 = v18;
  v12[0] = 0;
  v12[1] = 0;
  memset(&v10, 0, sizeof(v10));
  uint64_t v11 = a2;
  if (&v9 == (void **)a1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *(std::string **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
    begin = (long long *)v10.__begin_;
    end = (long long *)v10.__end_;
  }
  uint64_t v9 = v12;
  long long v6 = v12;
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v8 = v11;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::supervised::supervised_learning_model_base>>>::operator()<0>((uint64_t *)&v6);
  v5[0] = (uint64_t **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
  memset(v5, 0, sizeof(v5));
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::vector<std::vector<turi::flexible_type>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v5, (void (**)(long long *__return_ptr, void ***))a1, (uint64_t)v12);
  turi::flexible_type_converter<std::vector<std::vector<turi::flexible_type>>>::set(v5, (uint64_t)v19);
}

void sub_224479A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  char v18 = va_arg(va1, std::__shared_weak_count *);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::vector<std::vector<turi::flexible_type>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, void (**a2)(long long *__return_ptr, void ***), uint64_t a3)
{
  void (*v4)(long long *__return_ptr, void ***);
  std::__shared_weak_count *v5;
  long long v6;
  uint64_t v7;
  void **v8;
  std::__shared_weak_count *v9;

  uint64_t v4 = *a2;
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v8 = *(void ***)a3;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v4(&v6, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::vector<std::vector<turi::flexible_type>>::__vdeallocate((void ***)a1);
  *(_OWORD *)a1 = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v7 = 0;
  uint64_t v6 = 0uLL;
  uint64_t v8 = (void **)&v6;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_224479B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::supervised::supervised_learning_model_base>>>::operator()<0>(uint64_t *a1)
{
  uint64_t v1 = (const void **)a1[1];
  if ((const void **)a1[2] != v1)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], v1);
    if (a1[4] + 8 == v3)
    {
      *(void *)&long long v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<std::shared_ptr<turi::unity_sarray>,std::shared_ptr<turi::unity_sarray>,std::string,std::map<std::string,turi::flexible_type>>>::operator()<0>(mpl_::integral_c<int,0>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::shared_ptr<turi::supervised::supervised_learning_model_base>,void>::get((int *)(v3 + 56), &v7);
    uint64_t v4 = *a1;
    long long v5 = v7;
    long long v7 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
    *(_OWORD *)uint64_t v4 = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
}

void turi::flexible_type_converter<std::vector<std::vector<turi::flexible_type>>>::set(uint64_t ***a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<12>::set<std::vector<std::vector<turi::flexible_type>>>(a2, a1);
}

void sub_224479C1C(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<12>::set<std::vector<std::vector<turi::flexible_type>>>(uint64_t a1, uint64_t ***a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  std::vector<turi::flexible_type>::vector(v18, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  if (v18[1] != v18[0])
  {
    uint64_t v4 = *a2;
    memset(v17, 0, sizeof(v17));
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v17, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 4);
    uint64_t v19 = 0;
    int v20 = 0;
    char v21 = 0;
    turi::flexible_type_internals::ft_converter<1>::set<std::vector<turi::flexible_type>>((uint64_t)&v19);
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      if (*((char *)v5 + 31) < 0) {
        operator delete((void *)v5[1]);
      }
      atomic_ullong *volatile v6 = v5;
      uint64_t v7 = 0x1012C404EF22A49;
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      uint64_t v15 = (void *)v14[1];
      if (v15)
      {
        v14[2] = (atomic_ullong)v15;
        operator delete(v15);
      }
      atomic_ullong *volatile v6 = v14;
      uint64_t v7 = 0x1080C409938AC02;
      goto LABEL_34;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      v17[0] = (void **)(v8 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v17);
      goto LABEL_29;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      v17[0] = (void **)(v8 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v17);
LABEL_29:
      atomic_ullong *volatile v6 = v8;
      uint64_t v7 = 0x1020C405E66F15BLL;
      goto LABEL_34;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v16 + 2);
      atomic_ullong *volatile v6 = v16;
      unsigned int v13 = -235920773;
      goto LABEL_33;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      uint64_t v10 = (void *)v9[6];
      if (v10)
      {
        v9[7] = (atomic_ullong)v10;
        operator delete(v10);
      }
      uint64_t v11 = (void *)v9[3];
      if (v11)
      {
        v9[4] = (atomic_ullong)v11;
        operator delete(v11);
      }
      uint64_t v12 = (std::__shared_weak_count *)v9[2];
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      atomic_ullong *volatile v6 = v9;
      unsigned int v13 = 2071181815;
LABEL_33:
      uint64_t v7 = v13 | 0x1030C4000000000;
LABEL_34:
      MEMORY[0x22A614FA0](v6, v7);
LABEL_35:
      *(void *)a1 = 0;
LABEL_36:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 4;
      operator new();
    default:
      goto LABEL_36;
  }
}

void sub_22447A738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  MEMORY[0x22A614FA0](v13, 0x1012C404EF22A49);
  a10 = (void **)&a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<1>::set<std::vector<turi::flexible_type>>(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      if (*((char *)v2 + 31) < 0) {
        operator delete((void *)v2[1]);
      }
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      atomic_ullong *volatile v6 = (void *)v5[1];
      if (v6)
      {
        v5[2] = (atomic_ullong)v6;
        operator delete(v6);
      }
      atomic_ullong *volatile v3 = v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      atomic_ullong *volatile v14 = (void **)(v7 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      atomic_ullong *volatile v14 = (void **)(v7 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
      atomic_ullong *volatile v3 = v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
      atomic_ullong *volatile v3 = v8;
      unsigned int v9 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v11 = (void *)v10[6];
      if (v11)
      {
        v10[7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      uint64_t v12 = (void *)v10[3];
      if (v12)
      {
        v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      uint64_t v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      atomic_ullong *volatile v3 = v10;
      unsigned int v9 = 2071181815;
LABEL_31:
      uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      *(void *)a1 = 0;
LABEL_34:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 4;
      operator new();
    default:
      goto LABEL_34;
  }
}

void sub_22447AED8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D7829A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D7829A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1, void *a2)
{
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()((void (**)(long long *__return_ptr, void ***))(a1 + 8), a2);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()(void (**a1)(long long *__return_ptr, void ***), void *a2)
{
  v8[2] = *MEMORY[0x263EF8340];
  if (a2[1] - *a2 == 80)
  {
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v4 = (uint64_t **)v7;
    atomic_ullong *volatile v5 = a2;
    turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::supervised::supervised_learning_model_base>>>::operator()<0>((uint64_t *)&v4);
    uint64_t v4 = 0;
    atomic_ullong *volatile v5 = 0;
    uint64_t v6 = 0;
    turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::vector<std::vector<turi::flexible_type>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v4, a1, (uint64_t)v7);
    turi::flexible_type_converter<std::vector<std::vector<turi::flexible_type>>>::set(&v4, (uint64_t)v8);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
}

void sub_22447B17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<std::shared_ptr<turi::supervised::supervised_learning_model_base>>>::operator()<0>(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (*(void *)(v1 + 8) != *(void *)v1)
  {
    turi::variant_converter<std::shared_ptr<turi::supervised::supervised_learning_model_base>,void>::get(*(int **)v1, &v6);
    uint64_t v3 = *a1;
    long long v4 = v6;
    long long v6 = 0uLL;
    atomic_ullong *volatile v5 = *(std::__shared_weak_count **)(v3 + 8);
    *(_OWORD *)uint64_t v3 = v4;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

uint64_t std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26D782A28;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), a2);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D782A28;
  uint64_t v2 = (void *)(a1 + 8);
  long long v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return a1;
}

{
  void *v2;
  void **v4;

  *(void *)a1 = &unk_26D782A28;
  uint64_t v2 = (void *)(a1 + 8);
  long long v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return MEMORY[0x22A614FA0](a1, 0x10A1C409BB2071CLL);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_26D782A28;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22447B3D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D782A28;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<1ul,std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>)>(std::vector<std::vector<turi::flexible_type>> (*)(std::shared_ptr<turi::supervised::supervised_learning_model_base>),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(uint64_t a1@<X0>, const std::string *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = a4 + 32;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 48) = a4 + 56;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 128) = 0;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(a1, (long long **)&v13, (uint64_t)v18);
  v15[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(a1, v17);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v18);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    unsigned int v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    unsigned int v9 = a2;
  }
  uint64_t v10 = (uint64_t)&v9[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v11 = *(unsigned __int8 *)(v10 + size--);
  }
  while (v11 != 58);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=((std::string *)a4, a2);
  }
  else
  {
    std::string::basic_string(&v12, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v12;
  }
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((void *)(a4 + 72), (uint64_t)v15);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((void *)(a4 + 104), (uint64_t)v17);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)&v14);
}

void sub_22447BD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25)
{
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)&a25);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v26 - 136));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v26 - 104));
  turi::toolkit_function_specification::~toolkit_function_specification(v25);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  v20[4] = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v13 = 0;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v16;
  uint64_t v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  void v19[3] = 0;
  void v20[3] = 0;
  uint64_t v9 = a1;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v4 = v9;
  long long v6 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  std::string::size_type v5 = v10.__r_.__value_.__r.__words[2];
  memset(&v10, 0, sizeof(v10));
  *(void *)(a3 + 24) = 0;
  atomic_ullong *volatile v7 = operator new(0x28uLL);
  void *v7 = &unk_26D782AA8;
  v7[1] = v4;
  *((_OWORD *)v7 + 1) = v6;
  v7[4] = v5;
  memset(v8, 0, sizeof(v8));
  *(void *)(a3 + 24) = v7;
  int v11 = (std::string *)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  int v11 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v19);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v15, v16[0]);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

void sub_22447C164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  int v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  uint64_t v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  void v6[3] = 0;
  v7[3] = 0;
  *a2 = &unk_26D782B28;
  a2[1] = a1;
  a2[3] = a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v6);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, v5[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

void *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(void *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>((uint64_t)v8, (uint64_t)v6);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v8);
  std::string::size_type v5 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_22447C354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D782AA8;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D782AA8;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(long long **)(a1 + 16);
  *(void *)uint64_t v2 = &unk_26D782AA8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3));
  return v2;
}

void sub_22447C4B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26D782AA8;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(long long **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = a2[1];
  std::string::size_type v5 = (char **)*a2;
  long long v6 = (char *)v4;
  if (a2[2])
  {
    *(void *)(v4 + 16) = &v6;
    *a2 = v3;
    void *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    std::string::size_type v5 = &v6;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v5, a3);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v5, v6);
}

void sub_22447C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v21 = 1;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v24 = 0;
  v25 = v26;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v16);
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  memset(&v14, 0, sizeof(v14));
  uint64_t v15 = a2;
  if (&v13 == (void **)a1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
    begin = (long long *)v14.__begin_;
    end = (long long *)v14.__end_;
  }
  uint64_t v13 = v16;
  std::string v10 = v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<0>((uint64_t *)&v10);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v10);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(&v10);
  v27[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v8);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v8, (void (**)(void *__return_ptr, void *, char *, char *))a1, (turi::gl_sframe *)v16);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v27, (const turi::gl_sframe *)v8);
  turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)v27, a3);
  v27[0] = (void **)&unk_26D759E10;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  v8[0] = &unk_26D759E10;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  v27[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
  if (SHIBYTE(v20) < 0) {
    operator delete(*((void **)&v19 + 1));
  }
  if (SBYTE7(v19) < 0) {
    operator delete((void *)v18);
  }
  v16[0] = &unk_26D759E10;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v25, v26[0]);
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
}

void sub_22447C884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::fusion::vector<turi::gl_sframe,std::string,std::string>::~vector((uint64_t)va1);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v2 - 136));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, void (**a2)(void *__return_ptr, void *, char *, char *), turi::gl_sframe *a3)
{
  void (*v5)(void *__return_ptr, void *, char *, char *);
  void v6[2];
  std::__shared_weak_count *v7;
  void v8[2];
  std::__shared_weak_count *v9;

  std::string::size_type v5 = *a2;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v8, a3);
  v5(v6, v8, (char *)a3 + 24, (char *)a3 + 48);
  v8[0] = &unk_26D759E10;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  turi::gl_sframe::operator=(a1, (uint64_t)v6);
  v6[0] = &unk_26D759E10;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_22447C9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::fusion::vector<turi::gl_sframe,std::string,std::string>::~vector(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  *(void *)a1 = &unk_26D759E10;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D782B28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D782B28;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()((void (**)(void *__return_ptr, void *, char *, char *))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()(void (**a1)(void *__return_ptr, void *, char *, char *)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[1] - *a2 != 240)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v9);
  *(_OWORD *)__p = 0u;
  long long v13 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  v14[0] = v9;
  v14[1] = a2;
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<0>((uint64_t *)v14);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(v14);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(v14);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v7);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v7, a1, (turi::gl_sframe *)v9);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v14, (const turi::gl_sframe *)v7);
  turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)v14, a3);
  v14[0] = &unk_26D759E10;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  v7[0] = &unk_26D759E10;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v11[0]);
  }
  v9[0] = &unk_26D759E10;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_22447CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v4 = &unk_26D782BA8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), a2);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D782BA8;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return a1;
}

{
  void *v2;
  void **v4;

  *(void *)a1 = &unk_26D782BA8;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return MEMORY[0x22A614FA0](a1, 0x10A1C409BB2071CLL);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_26D782BA8;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22447CF4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D782BA8;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<3ul,turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&)>(turi::gl_sframe (*)(turi::gl_sframe,std::string const&,std::string const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(uint64_t a1@<X0>, const std::string *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = a4 + 32;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 48) = a4 + 56;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 128) = 0;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(a1, (long long **)&v13, (uint64_t)v18);
  v15[0] = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(a1, v17);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v18);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    uint64_t v9 = a2;
  }
  uint64_t v10 = (uint64_t)&v9[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v11 = *(unsigned __int8 *)(v10 + size--);
  }
  while (v11 != 58);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=((std::string *)a4, a2);
  }
  else
  {
    std::string::basic_string(&v12, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v12;
  }
  std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>((void *)(a4 + 72), (uint64_t)v15);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=((void *)(a4 + 104), (uint64_t)v17);
  turi::flexible_type_converter<std::vector<std::string>>::set(a3, (uint64_t)&v14);
}

void sub_22447D884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25)
{
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)&a25);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v26 - 136));
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v26 - 104));
  turi::toolkit_function_specification::~toolkit_function_specification(v25);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  v20[4] = *MEMORY[0x263EF8340];
  __p = 0;
  uint64_t v13 = 0;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v16;
  uint64_t v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  void v19[3] = 0;
  void v20[3] = 0;
  uint64_t v9 = a1;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v4 = v9;
  long long v6 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
  std::string::size_type v5 = v10.__r_.__value_.__r.__words[2];
  memset(&v10, 0, sizeof(v10));
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = operator new(0x28uLL);
  void *v7 = &unk_26D782C28;
  v7[1] = v4;
  *((_OWORD *)v7 + 1) = v6;
  v7[4] = v5;
  memset(v8, 0, sizeof(v8));
  *(void *)(a3 + 24) = v7;
  int v11 = (std::string *)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  int v11 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v19);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v15, v16[0]);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
}

void sub_22447DCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  int v11 = va_arg(va1, void **);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  uint64_t v4 = v5;
  v5[0] = 0;
  v5[1] = 0;
  void v6[3] = 0;
  v7[3] = 0;
  *a2 = &unk_26D782CA8;
  a2[1] = a1;
  a2[3] = a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v6);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v4, v5[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v2, v3[0]);
}

void *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} &,void>(void *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>((uint64_t)v8, (uint64_t)v6);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v8);
  std::string::size_type v5 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_22447DECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}::~toolkit_function_invocation((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D782C28;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D782C28;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E0E799);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(long long **)(a1 + 16);
  *(void *)uint64_t v2 = &unk_26D782C28;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 16), v3, *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3));
  return v2;
}

void sub_22447E030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26D782C28;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 16), *(long long **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = a2[1];
  std::string::size_type v5 = (char **)*a2;
  long long v6 = (char *)v4;
  if (a2[2])
  {
    *(void *)(v4 + 16) = &v6;
    *a2 = v3;
    void *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    std::string::size_type v5 = &v6;
  }
  turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, (uint64_t)&v5, a3);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v5, v6);
}

void sub_22447E1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v36[2] = *(void **)MEMORY[0x263EF8340];
  char v19 = 1;
  long long v20 = 0;
  uint64_t v21 = 0;
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v22 = 0;
  uint64_t v23 = v24;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v26);
  uint64_t v32 = 0;
  int v33 = 0;
  char v34 = 0;
  v36[0] = 0;
  v36[1] = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  __p = 0;
  unsigned int v31 = 0;
  v35 = v36;
  memset(&v17, 0, sizeof(v17));
  uint64_t v18 = a2;
  if (&v16 == (void **)a1)
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *(std::string **)(a1 + 8), *(long long **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
    begin = (long long *)v17.__begin_;
    end = (long long *)v17.__end_;
  }
  std::string v16 = v26;
  uint64_t v13 = v26;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v15 = v18;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>((uint64_t)&v25, (uint64_t *)&v13);
  int v11 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  int v11 = 0;
  std::string v12 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::supervised::supervised_learning_model_base>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v11, (void (**)(void *, std::string *, uint64_t, uint64_t))a1, (uint64_t)v26);
  p_data = (void **)&v11->__r_.__value_.__l.__data_;
  uint64_t v9 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string v10 = v12;
    *(void *)(a3 + 8) = p_data;
    *(void *)(a3 + 16) = v9;
    *(_DWORD *)a3 = 3;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    *(void *)(a3 + 8) = v11;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)a3 = 3;
  }
  int v11 = (std::string *)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v35, v36[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v31);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  v26[0] = &unk_26D759E10;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v23, v24[0]);
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
}

void sub_22447E404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::supervised::supervised_learning_model_base>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, void (**a2)(void *, std::string *, uint64_t, uint64_t), uint64_t a3)
{
  long long v6 = *a2;
  boost::fusion::detail::invoke_fn_ptr<std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>,4,true>::call<std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(&v6, a3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 128, *(void **)(a1 + 136));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  *(void *)a1 = &unk_26D759E10;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, uint64_t *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<0>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<3>(a2);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<2>(void *a1)
{
  v8[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      std::string v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    long long v5 = (int *)(v3 + 56);
    uint64_t v4 = (uint64_t *)*(unsigned int *)(v3 + 56);
    long long v6 = (std::string *)v8;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v4 ^ ((int)v4 >> 31), &v6, (uint64_t)(v5 + 2));
    LODWORD(v7) = *v5 ^ (*v5 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(*a1 + 48), (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_22447E670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<3>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      uint64_t v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    uint64_t v4 = *a1 + 136;
    long long v5 = (uint64_t *)(*a1 + 128);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(void **)v4);
    long long v6 = v9;
    *(void *)(v4 - 8) = v8;
    *(void *)uint64_t v4 = v6;
    uint64_t v7 = v10;
    *(void *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      uint64_t v8 = &v9;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long v6 = 0;
    }
    else
    {
      *long long v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void boost::fusion::detail::invoke_fn_ptr<std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>,4,true>::call<std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(void (**a1)(void *, std::string *, uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v3 = *a1;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v5, (const turi::gl_sframe *)a2);
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string __p = *(std::string *)(a2 + 24);
  }
  v3(v5, &__p, a2 + 48, a2 + 128);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v5[0] = &unk_26D759E10;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_22447E824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D782CA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D782CA8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1@<X0>, std::__shared_weak_count *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)> turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_native_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&))::{lambda(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)#1}::operator()(void (**a1)(void *, std::string *, uint64_t, uint64_t)@<X0>, std::__shared_weak_count *a2@<X1>, uint64_t a3@<X8>)
{
  v23[2] = *(void **)MEMORY[0x263EF8340];
  if (a2->__shared_owners_ - (unint64_t)a2->__vftable != 320)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Insufficient arguments");
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v13);
  uint64_t v19 = 0;
  int v20 = 0;
  char v21 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  unsigned int v18 = 0;
  uint64_t v22 = v23;
  uint64_t v10 = v13;
  int v11 = a2;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>((uint64_t)&v12, (uint64_t *)&v10);
  uint64_t v10 = 0;
  int v11 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::supervised::supervised_learning_model_base>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_function_wrapper<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v10, a1, (uint64_t)v13);
  uint64_t v6 = (uint64_t)v10;
  uint64_t v7 = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v11;
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = v7;
    *(_DWORD *)a3 = 3;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)a3 = 3;
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v22, v23[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  v13[0] = &unk_26D759E10;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_22447EACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,0>>>,turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, uint64_t *a2)
{
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<0>(a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>((void **)a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<3>((void **)a2);
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<2>(void *a1)
{
  v8[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[1];
  uint64_t v2 = *v1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v1[1] - *v1) >> 4) >= 3)
  {
    int v5 = *(_DWORD *)(v2 + 160);
    uint64_t v4 = (int *)(v2 + 160);
    uint64_t v6 = (std::string *)v8;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)v5, v5 ^ (v5 >> 31), &v6, (uint64_t)(v4 + 2));
    int v7 = *v4 ^ (*v4 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(*a1 + 48), (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_22447EC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_in_args<boost::fusion::vector<turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<3>(void **a1)
{
  uint64_t v1 = *a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1][1] - v1) >> 4) >= 4)
  {
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v1 + 240), (uint64_t)&v7);
    uint64_t v3 = (uint64_t)(*a1 + 17);
    uint64_t v4 = *a1 + 16;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v4, *(void **)v3);
    int v5 = v8;
    *(void *)(v3 - 8) = v7;
    *(void *)uint64_t v3 = v5;
    uint64_t v6 = v9;
    *(void *)(v3 + 8) = v9;
    if (v6)
    {
      void v5[2] = v3;
      int v7 = &v8;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      int v5 = 0;
    }
    else
    {
      *uint64_t v4 = v3;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v7, v5);
  }
}

uint64_t std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v4 = &unk_26D782D28;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 8), a2);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D782D28;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return a1;
}

{
  void *v2;
  void **v4;

  *(void *)a1 = &unk_26D782D28;
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  return MEMORY[0x22A614FA0](a1, 0x10A1C409BB2071CLL);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_26D782D28;
  std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_22447EE9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D782D28;
  return std::__compressed_pair_elem<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<0ul,void (*)(void)>(void (*)(void),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v2);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator()(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1},std::allocator<turi::toolkit_function_specification turi::toolkit_function_wrapper_impl::make_spec<4ul,std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)>(std::shared_ptr<turi::supervised::supervised_learning_model_base> (*)(turi::gl_sframe,std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&),std::string,std::vector<std::string>)::{lambda(turi::toolkit_function_invocation &)#1}>,turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::target_type()
{
}

void turi::supervised::classifier_report_by_class(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  turi::gl_sframe::operator[](a1, a2, (turi::gl_sarray *)&v7);
  turi::gl_sframe::operator[](a1, a3, (turi::gl_sarray *)v5);
  turi::gl_sarray::append((turi::gl_sarray *)&v7, (const turi::gl_sarray *)v5, (uint64_t)&v6);
  turi::gl_sarray::unique((turi::gl_sarray *)&v6);
}

void sub_22447F81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
  if (*(char *)(v40 - 153) < 0) {
    operator delete(*(void **)(v40 - 176));
  }
  std::unordered_map<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>>>::~unordered_map[abi:ne180100]((uint64_t)&a17);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a40);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>,void *>>>::destroy[abi:ne180100]<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>,void,void>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void turi::supervised::confusion_matrix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v17 + 1) = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v15 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v16 = *(std::string *)a3;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  p_data = 0;
  std::string __p = &v8;
  char v12 = 0;
  uint64_t v8 = (std::string *)operator new(0x30uLL);
  uint64_t v9 = v8;
  p_data = (const void **)&v8[2].__r_.__value_.__l.__data_;
  uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v15, &v17, v8);
  turi::aggregate::COUNT(&v5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "count");
  std::string v13 = v5;
  memset(&v5, 0, sizeof(v5));
  long long v14 = v6;
  long long v6 = 0uLL;
  std::map<std::string,turi::aggregate::groupby_descriptor_type>::map[abi:ne180100]((uint64_t)&v7, (const void **)&__p, 1);
  turi::gl_sframe::groupby(a1, (const void ***)&v8, &v7);
}

void sub_22447FCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char *a36)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  a24 = &unk_26D759E10;
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&a18, a19);
  std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::~pair((uint64_t)&a36);
  turi::aggregate::groupby_descriptor_type::~groupby_descriptor_type((turi::aggregate::groupby_descriptor_type *)&a13);
  a36 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  uint64_t v38 = 0;
  uint64_t v39 = v36 - 128;
  while (1)
  {
    if (*(char *)(v39 + v38 + 47) < 0) {
      operator delete(*(void **)(v39 + v38 + 24));
    }
    v38 -= 24;
    if (v38 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_22447FDEC()
{
}

void sub_22447FDF4()
{
}

void sub_22447FE00()
{
}

uint64_t std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>,void *>>>::destroy[abi:ne180100]<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>,void,void>(uint64_t result)
{
  uint64_t v1 = result;
  switch(*(unsigned char *)(result + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          long long v6 = (void *)v5[1];
          if (v6)
          {
            void v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          long long v14 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          long long v14 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          int v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          char v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          std::string v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          result = MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  atomic_ullong *volatile v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>,void *>>>::destroy[abi:ne180100]<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>,void,void>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

void *std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D782DA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D782DA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(uint64_t a1, uint64_t a2, turi::sframe_rows **a3)
{
  uint64_t v4 = *a3;
  if (!*((unsigned char *)*a3 + 24))
  {
    turi::sframe_rows::ensure_unique(*a3);
    if (!*((unsigned char *)v4 + 24)) {
      turi::sframe_rows::ensure_unique(v4);
    }
  }
  if (*(void *)v4 != *((void *)v4 + 1))
  {
    atomic_ullong *volatile v5 = **(void ***)v4;
    if (v5)
    {
      uint64_t v6 = *(void *)(**(void **)v4 + 8) - *v5;
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = v6 >> 4;
        do
        {
          uint64_t v9 = **(void **)(*(void *)v4 + 16) + 16 * v7;
          atomic_ullong *volatile v10 = (unsigned __int8 *)(***(void ***)v4 + 16 * v7);
          switch(*(unsigned char *)(v9 + 12))
          {
            case 0:
              switch(v10[12])
              {
                case 0u:
                  if (*(void *)v10 == *(void *)v9) {
                    goto LABEL_101;
                  }
                  goto LABEL_52;
                case 1u:
                  double v11 = *(double *)v10;
                  uint64_t v12 = *(void *)v9;
                  goto LABEL_86;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_52;
                case 6u:
                  if (*(void *)v9 == (uint64_t)(*(void *)v10 << 8) >> 8 && !*((_DWORD *)v10 + 2)) {
                    goto LABEL_101;
                  }
                  goto LABEL_52;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 1:
              switch(v10[12])
              {
                case 0u:
                  double v11 = *(double *)v9;
                  uint64_t v12 = *(void *)v10;
LABEL_86:
                  double v64 = (double)v12;
                  goto LABEL_87;
                case 1u:
                  double v11 = *(double *)v10;
                  double v64 = *(double *)v9;
LABEL_87:
                  if (v11 != v64) {
                    goto LABEL_52;
                  }
                  goto LABEL_101;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_52;
                case 6u:
                  double v65 = vabdd_f64((double)*((int *)v10 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v10 << 8) >> 8), *(double *)v9);
                  goto LABEL_95;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 2:
              unsigned int v13 = v10[12];
              if (v13 - 3 < 7 || v13 < 2) {
                goto LABEL_52;
              }
              if (v13 != 2) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              double v15 = *(double *)v10;
              size_t v16 = *(char *)(*(void *)v10 + 31) < 0
                  ? *(void *)(*(void *)&v15 + 16)
                  : *(unsigned __int8 *)(*(void *)v10 + 31);
              double v66 = *(double *)v9;
              uint64_t v67 = *(char *)(*(void *)v9 + 31) < 0
                  ? *(void *)(*(void *)&v66 + 16)
                  : *(unsigned __int8 *)(*(void *)v9 + 31);
              if (v16 != v67) {
                goto LABEL_52;
              }
              v68 = (unsigned __int8 *)(*(void *)&v15 + 8);
              if ((*(unsigned char *)(*(void *)v10 + 31) & 0x80) != 0) {
                v68 = *(unsigned __int8 **)v68;
              }
              v69 = (unsigned __int8 *)(*(void *)&v66 + 8);
              if ((*(unsigned char *)(*(void *)v9 + 31) & 0x80) != 0) {
                v69 = *(unsigned __int8 **)v69;
              }
              if ((*(unsigned char *)(*(void *)v10 + 31) & 0x80) != 0)
              {
                if (memcmp(v68, v69, v16)) {
                  goto LABEL_52;
                }
              }
              else
              {
                if (!v16) {
                  goto LABEL_101;
                }
                do
                {
                  if (*v68 != *v69) {
                    goto LABEL_52;
                  }
                  ++v68;
                  ++v69;
                  --v16;
                }
                while (v16);
              }
              goto LABEL_101;
            case 3:
              unsigned int v17 = v10[12];
              if (v17 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v17 != 3) {
                goto LABEL_52;
              }
              unsigned int v18 = *(double **)(*(void *)v10 + 8);
              uint64_t v19 = *(double **)(*(void *)v10 + 16);
              unint64_t v20 = v19 - v18;
              char v21 = *(double **)(*(void *)v9 + 8);
              if (v20 != (uint64_t)(*(void *)(*(void *)v9 + 16) - (void)v21) >> 3) {
                goto LABEL_52;
              }
              if (v19 == v18) {
                goto LABEL_101;
              }
              if (v20 <= 1) {
                unint64_t v20 = 1;
              }
              while (*v18 == *v21)
              {
                ++v21;
                ++v18;
                if (!--v20) {
                  goto LABEL_101;
                }
              }
              goto LABEL_52;
            case 4:
              unsigned int v22 = v10[12];
              if (v22 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v22 == 4
                && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t *)(*(void *)v10 + 8), (void *)(*(void *)v9 + 8)) & 1) != 0)
              {
                goto LABEL_101;
              }
              goto LABEL_52;
            case 5:
              unsigned int v23 = v10[12];
              if (v23 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v23 == 5
                && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t **)(*(void *)v10 + 8), (uint64_t **)(*(void *)v9 + 8)))
              {
                goto LABEL_101;
              }
              goto LABEL_52;
            case 6:
              switch(v10[12])
              {
                case 0u:
                  if (*(void *)v10 == (uint64_t)(*(void *)v9 << 8) >> 8 && !*(_DWORD *)(v9 + 8)) {
                    goto LABEL_101;
                  }
                  goto LABEL_52;
                case 1u:
                  double v65 = vabdd_f64(*(double *)v10, (double)*(int *)(v9 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v9 << 8) >> 8));
LABEL_95:
                  if (v65 < 0.0000005) {
                    goto LABEL_101;
                  }
                  goto LABEL_52;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  goto LABEL_52;
                case 6u:
                  if (((*(void *)v9 ^ *(void *)v10) & 0xFFFFFFFFFFFFFFLL) == 0
                    && *((_DWORD *)v10 + 2) == *(_DWORD *)(v9 + 8))
                  {
                    goto LABEL_101;
                  }
                  goto LABEL_52;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 7:
              unsigned int v24 = v10[12];
              if (v24 < 7 || v24 - 8 < 2) {
                goto LABEL_52;
              }
              if (v24 != 7) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_101;
            case 8:
              unsigned int v25 = v10[12];
              if (v25 < 8) {
                goto LABEL_52;
              }
              if (v25 != 8)
              {
                if (v25 != 9) {
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
                }
                goto LABEL_52;
              }
              if (!turi::image_type::operator==(*(void *)v10 + 8, *(void *)v9 + 8)) {
                goto LABEL_52;
              }
              goto LABEL_101;
            case 9:
              unsigned int v26 = v10[12];
              if (v26 < 9) {
                goto LABEL_52;
              }
              if (v26 != 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              double v28 = *(double *)v9;
              uint64_t v29 = *(void **)v10;
              if (*(void *)v9 == *(void *)v10) {
                goto LABEL_101;
              }
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v29 + 1), *(void *)&v28 + 8)) {
                goto LABEL_52;
              }
              unsigned int v31 = (char *)v29[3];
              uint64_t v30 = (char *)v29[4];
              uint64_t v32 = v30 - v31;
              if (v30 == v31) {
                goto LABEL_101;
              }
              if (!v29[1]) {
                goto LABEL_101;
              }
              uint64_t v33 = 1;
              do
              {
                uint64_t v34 = *(void *)v31;
                v31 += 8;
                v33 *= v34;
              }
              while (v31 != v30);
              if (!v33) {
                goto LABEL_101;
              }
              uint64_t v72 = 0;
              std::vector<unsigned long>::vector(&v73, v32 >> 3, &v72);
              v35 = v73;
              uint64_t v36 = v74;
              uint64_t v37 = **(void **)(*(void *)&v28 + 8);
              uint64_t v38 = (char *)v74 - (char *)v73;
              unint64_t v39 = v74 - v73;
              unint64_t v40 = v39 - 1;
              if (v39 <= 1) {
                uint64_t v41 = 1;
              }
              else {
                uint64_t v41 = v74 - v73;
              }
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          while (1)
          {
            if (v36 == v35)
            {
              uint64_t v49 = 0;
              double v50 = *(double *)(*(void *)v29[1] + 8 * v29[9]);
            }
            else
            {
              uint64_t v42 = 0;
              v43 = (uint64_t *)v29[6];
              v44 = v35;
              uint64_t v45 = v41;
              do
              {
                uint64_t v47 = *v44++;
                uint64_t v46 = v47;
                uint64_t v48 = *v43++;
                v42 += v48 * v46;
                --v45;
              }
              while (v45);
              uint64_t v49 = 0;
              double v50 = *(double *)(*(void *)v29[1] + 8 * (v29[9] + v42));
              v51 = *(uint64_t **)(*(void *)&v28 + 48);
              v52 = v35;
              uint64_t v53 = v41;
              do
              {
                uint64_t v55 = *v52++;
                uint64_t v54 = v55;
                uint64_t v56 = *v51++;
                v49 += v56 * v54;
                --v53;
              }
              while (v53);
            }
            if (v50 != *(double *)(v37 + 8 * (*(void *)(*(void *)&v28 + 72) + v49))) {
              break;
            }
            uint64_t v57 = v39;
            uint64_t v58 = v39 - 1;
            if (v38 >= 1)
            {
              uint64_t v59 = v29[3];
              unint64_t v60 = v35[v40] + 1;
              v35[v40] = v60;
              unint64_t v61 = (v38 & 0xFFFFFFFFFFFFFFF8) - 16;
              uint64_t v58 = v39 - 1;
              if (v60 >= *(void *)(v59 + 8 * v40))
              {
                while (1)
                {
                  *(uint64_t *)((char *)v35 + v61 + 8) = 0;
                  if (v58 <= 0) {
                    break;
                  }
                  --v58;
                  unint64_t v62 = *(uint64_t *)((char *)v35 + v61) + 1;
                  *(uint64_t *)((char *)v35 + v61) = v62;
                  unint64_t v63 = *(void *)(v59 + v61);
                  v61 -= 8;
                  if (v62 < v63)
                  {
                    uint64_t v57 = 1;
                    goto LABEL_81;
                  }
                }
LABEL_84:
                v74 = v35;
                operator delete(v35);
LABEL_101:
                v27 = std::unordered_map<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>>>::at(*(void **)(a1 + 8), v10);
                goto LABEL_53;
              }
              uint64_t v57 = 1;
              uint64_t v58 = v39 - 1;
            }
LABEL_81:
            if (!v57 || v58 < 0)
            {
              if (v35) {
                goto LABEL_84;
              }
              goto LABEL_101;
            }
          }
          if (v35)
          {
            v74 = v35;
            operator delete(v35);
          }
LABEL_52:
          atomic_fetch_add(std::unordered_map<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>>>::at(*(void **)(a1 + 8), v10)+ 1, 1uLL);
          v27 = std::unordered_map<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>>>::at(*(void **)(a1 + 8), (unsigned __int8 *)v9)+ 2;
LABEL_53:
          atomic_fetch_add(v27, 1uLL);
          ++v7;
        }
        while (v7 != v8);
      }
    }
  }
  return 0;
}

uint64_t std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

uint64_t *std::unordered_map<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>>>::at(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    goto LABEL_18;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  atomic_ullong *volatile v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10 || (double v11 = *v10) == 0) {
LABEL_18:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  uint64_t v12 = (uint64_t)(a1 + 4);
  while (1)
  {
    unint64_t v13 = *((void *)v11 + 1);
    if (v13 == v6) {
      break;
    }
    if (v8 > 1)
    {
      if (v13 >= *(void *)&v5) {
        v13 %= *(void *)&v5;
      }
    }
    else
    {
      v13 &= *(void *)&v5 - 1;
    }
    if (v13 != v9) {
      goto LABEL_18;
    }
LABEL_17:
    double v11 = *(unsigned __int8 **)v11;
    if (!v11) {
      goto LABEL_18;
    }
  }
  if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v12, v11 + 16, (uint64_t)a2) & 1) == 0) {
    goto LABEL_17;
  }
  return (uint64_t *)(v11 + 32);
}

void std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D782E28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D782E28;
  a2[1] = v2;
  return result;
}

void std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  v2[28] = *MEMORY[0x263EF8340];
  std::unordered_map<turi::flexible_type,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::class_info>>>::at(*(void **)(a1 + 8), a2);
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type&,0>((turi::flexible_type *)v2, "class");
}

void sub_224480D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v17 = v15;
  MEMORY[0x22A614FA0](v17, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v19 = *v14;
    if (*v14)
    {
      a14 = (void **)(v19 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a14);
      MEMORY[0x22A614FA0](v19, 0x1020C405E66F15BLL);
    }
    *long long v14 = 0;
  }
  *long long v14 = 0;
  *((_DWORD *)v14 + 2) = 0;
  *((unsigned char *)v14 + 12) = 0;
  a14 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1,std::allocator<turi::supervised::classifier_report_by_class(turi::gl_sframe,std::string const&,std::string const&)::$_1>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void turi::supervised::xgboost::init_decision_tree_common_options(turi::supervised::xgboost *this, turi::option_manager *a2)
{
  v64[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v53, "max_depth");
  std::string::basic_string[abi:ne180100]<0>(&__p, "The maximum depth of individual trees");
  char v63 = 0;
  int v62 = 0;
  uint64_t v61 = 6;
  turi::option_manager::create_integer_option(this, &v53, &__p, (uint64_t)&v61, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
  switch(v63)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v61, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v3 = v61;
      if (!v61) {
        goto LABEL_33;
      }
      if (*(char *)(v61 + 31) < 0) {
        operator delete(*(void **)(v61 + 8));
      }
      unint64_t v4 = (void *)v3;
      uint64_t v5 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v61, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v6 = v61;
      if (!v61) {
        goto LABEL_33;
      }
      uint8x8_t v7 = *(void **)(v61 + 8);
      if (v7)
      {
        *(void *)(v61 + 16) = v7;
        operator delete(v7);
      }
      unint64_t v4 = (void *)v6;
      uint64_t v5 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v61, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v61;
      if (!v61) {
        goto LABEL_33;
      }
      *(void *)&long long v51 = v61 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
      goto LABEL_27;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v61, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v61;
      if (!v61) {
        goto LABEL_33;
      }
      *(void *)&long long v51 = v61 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
LABEL_27:
      unint64_t v4 = (void *)v8;
      uint64_t v5 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v61, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v14 = v61;
      if (!v61) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v61 + 16));
      unint64_t v4 = (void *)v14;
      unsigned int v13 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v61, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v9 = (void *)v61;
      if (!v61) {
        goto LABEL_33;
      }
      atomic_ullong *volatile v10 = *(void **)(v61 + 48);
      if (v10)
      {
        *(void *)(v61 + 56) = v10;
        operator delete(v10);
      }
      double v11 = (void *)v9[3];
      if (v11)
      {
        v9[4] = v11;
        operator delete(v11);
      }
      uint64_t v12 = (std::__shared_weak_count *)v9[2];
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      unint64_t v4 = v9;
      unsigned int v13 = 2071181815;
LABEL_31:
      uint64_t v5 = v13 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v4, v5);
LABEL_33:
      uint64_t v61 = 0;
      int v62 = 0;
      char v63 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v53, "min_child_weight");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Minimum weight required on the leaf nodes");
      int v59 = 0;
      char v60 = 1;
      uint64_t v58 = 0x3FB999999999999ALL;
      turi::option_manager::create_real_option(this, &v53, &__p, (uint64_t)&v58, 0, 0.0, 3.40282347e38);
      switch(v60)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v15 = v58;
          if (!v58) {
            goto LABEL_69;
          }
          if (*(char *)(v58 + 31) < 0) {
            operator delete(*(void **)(v58 + 8));
          }
          size_t v16 = (void *)v15;
          uint64_t v17 = 0x1012C404EF22A49;
          goto LABEL_68;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v24 = v58;
          if (!v58) {
            goto LABEL_69;
          }
          unsigned int v25 = *(void **)(v58 + 8);
          if (v25)
          {
            *(void *)(v58 + 16) = v25;
            operator delete(v25);
          }
          size_t v16 = (void *)v24;
          uint64_t v17 = 0x1080C409938AC02;
          goto LABEL_68;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v18 = v58;
          if (!v58) {
            goto LABEL_69;
          }
          *(void *)&long long v51 = v58 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
          goto LABEL_63;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v18 = v58;
          if (!v58) {
            goto LABEL_69;
          }
          *(void *)&long long v51 = v58 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
LABEL_63:
          size_t v16 = (void *)v18;
          uint64_t v17 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v26 = v58;
          if (!v58) {
            goto LABEL_69;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v58 + 16));
          size_t v16 = (void *)v26;
          unsigned int v23 = -235920773;
          goto LABEL_67;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v19 = (void *)v58;
          if (!v58) {
            goto LABEL_69;
          }
          unint64_t v20 = *(void **)(v58 + 48);
          if (v20)
          {
            *(void *)(v58 + 56) = v20;
            operator delete(v20);
          }
          char v21 = (void *)v19[3];
          if (v21)
          {
            void v19[4] = v21;
            operator delete(v21);
          }
          unsigned int v22 = (std::__shared_weak_count *)v19[2];
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          size_t v16 = v19;
          unsigned int v23 = 2071181815;
LABEL_67:
          uint64_t v17 = v23 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x22A614FA0](v16, v17);
LABEL_69:
          uint64_t v58 = 0;
          int v59 = 0;
          char v60 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v53, "min_loss_reduction");
          std::string::basic_string[abi:ne180100]<0>(&__p, "Minimum loss reduction required for splitting a node");
          int v56 = 0;
          char v57 = 1;
          uint64_t v55 = 0;
          turi::option_manager::create_real_option(this, &v53, &__p, (uint64_t)&v55, 0, 0.0, 3.40282347e38);
          switch(v57)
          {
            case 2:
              if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              v27 = v55;
              if (!v55) {
                goto LABEL_105;
              }
              if (*((char *)v55 + 31) < 0) {
                operator delete((void *)v55[1]);
              }
              double v28 = v27;
              uint64_t v29 = 0x1012C404EF22A49;
              goto LABEL_104;
            case 3:
              if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v36 = v55;
              if (!v55) {
                goto LABEL_105;
              }
              uint64_t v37 = (void *)v55[1];
              if (v37)
              {
                v55[2] = (atomic_ullong)v37;
                operator delete(v37);
              }
              double v28 = v36;
              uint64_t v29 = 0x1080C409938AC02;
              goto LABEL_104;
            case 4:
              if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v30 = v55;
              if (!v55) {
                goto LABEL_105;
              }
              *(void *)&long long v51 = v55 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
              goto LABEL_99;
            case 5:
              if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v30 = v55;
              if (!v55) {
                goto LABEL_105;
              }
              *(void *)&long long v51 = v55 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
LABEL_99:
              double v28 = v30;
              uint64_t v29 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            case 8:
              if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v38 = v55;
              if (!v55) {
                goto LABEL_105;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v55 + 2);
              double v28 = v38;
              unsigned int v35 = -235920773;
              goto LABEL_103;
            case 9:
              if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              unsigned int v31 = v55;
              if (!v55) {
                goto LABEL_105;
              }
              uint64_t v32 = (void *)v55[6];
              if (v32)
              {
                v55[7] = (atomic_ullong)v32;
                operator delete(v32);
              }
              uint64_t v33 = (void *)v31[3];
              if (v33)
              {
                v31[4] = (atomic_ullong)v33;
                operator delete(v33);
              }
              uint64_t v34 = (std::__shared_weak_count *)v31[2];
              if (v34) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              }
              double v28 = v31;
              unsigned int v35 = 2071181815;
LABEL_103:
              uint64_t v29 = v35 | 0x1030C4000000000;
LABEL_104:
              MEMORY[0x22A614FA0](v28, v29);
LABEL_105:
              uint64_t v55 = 0;
              int v56 = 0;
              char v57 = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v53.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&v53, "random_seed");
              std::string::basic_string[abi:ne180100]<0>(&__p, "Seed for row and column subselection");
              *(atomic_ullong **)((char *)v54 + 5) = (atomic_ullong *)0x700000000000000;
              v54[0] = 0;
              turi::option_manager::create_integer_option(this, &v53, &__p, (uint64_t)v54, (atomic_ullong *)0xFFFFFFFF80000001, (atomic_ullong *)0x7FFFFFFF, 0);
              switch(BYTE4(v54[1]))
              {
                case 2:
                  if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  unint64_t v39 = v54[0];
                  if (!v54[0]) {
                    goto LABEL_141;
                  }
                  if (*((char *)v54[0] + 31) < 0) {
                    operator delete(*((void **)v54[0] + 1));
                  }
                  unint64_t v40 = v39;
                  uint64_t v41 = 0x1012C404EF22A49;
                  goto LABEL_140;
                case 3:
                  if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v48 = v54[0];
                  if (!v54[0]) {
                    goto LABEL_141;
                  }
                  uint64_t v49 = (void *)v54[0][1];
                  if (v49)
                  {
                    v54[0][2] = (atomic_ullong)v49;
                    operator delete(v49);
                  }
                  unint64_t v40 = v48;
                  uint64_t v41 = 0x1080C409938AC02;
                  goto LABEL_140;
                case 4:
                  if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v42 = v54[0];
                  if (!v54[0]) {
                    goto LABEL_141;
                  }
                  *(void *)&long long v51 = v54[0] + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
                  goto LABEL_135;
                case 5:
                  if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v42 = v54[0];
                  if (!v54[0]) {
                    goto LABEL_141;
                  }
                  *(void *)&long long v51 = v54[0] + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
LABEL_135:
                  unint64_t v40 = v42;
                  uint64_t v41 = 0x1020C405E66F15BLL;
                  goto LABEL_140;
                case 8:
                  if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  double v50 = v54[0];
                  if (!v54[0]) {
                    goto LABEL_141;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v54[0] + 2);
                  unint64_t v40 = v50;
                  unsigned int v47 = -235920773;
                  goto LABEL_139;
                case 9:
                  if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  v43 = v54[0];
                  if (!v54[0]) {
                    goto LABEL_141;
                  }
                  v44 = (void *)v54[0][6];
                  if (v44)
                  {
                    v54[0][7] = (atomic_ullong)v44;
                    operator delete(v44);
                  }
                  uint64_t v45 = (void *)v43[3];
                  if (v45)
                  {
                    v43[4] = (atomic_ullong)v45;
                    operator delete(v45);
                  }
                  uint64_t v46 = (std::__shared_weak_count *)v43[2];
                  if (v46) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
                  }
                  unint64_t v40 = v43;
                  unsigned int v47 = 2071181815;
LABEL_139:
                  uint64_t v41 = v47 | 0x1030C4000000000;
LABEL_140:
                  MEMORY[0x22A614FA0](v40, v41);
LABEL_141:
                  memset(v54, 0, 13);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v53.__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v53, "metric");
                  std::string::basic_string[abi:ne180100]<0>(&__p, "Performance metric(s) to track during training iterations");
                  turi::flexible_type::flexible_type((turi::flexible_type *)v64, "auto");
                default:
                  goto LABEL_141;
              }
            default:
              goto LABEL_105;
          }
        default:
          goto LABEL_69;
      }
    default:
      goto LABEL_33;
  }
}

void sub_224482090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,int a25,char a26,uint64_t a27,int a28,char a29,uint64_t a30,int a31,char a32)
{
  MEMORY[0x22A614FA0](v32, 0x1012C404EF22A49);
  switch(a26)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a24, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v35 = a24;
        if (a24)
        {
          if (*(char *)(a24 + 31) < 0) {
            operator delete(*(void **)(a24 + 8));
          }
          MEMORY[0x22A614FA0](v35, 0x1012C404EF22A49);
        }
      }
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v36 = a24;
      if (!a24) {
        goto LABEL_27;
      }
      uint64_t v37 = *(void **)(a24 + 8);
      if (v37)
      {
        *(void *)(a24 + 16) = v37;
        operator delete(v37);
      }
      uint64_t v38 = (void *)v36;
      uint64_t v39 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v40 = a24;
      if (!a24) {
        goto LABEL_27;
      }
      *(void *)(v33 - 72) = a24 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 72));
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v40 = a24;
      if (!a24) {
        goto LABEL_27;
      }
      *(void *)(v33 - 72) = a24 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 72));
LABEL_18:
      uint64_t v38 = (void *)v40;
      uint64_t v39 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v41 = a24;
      if (!a24) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a24 + 16));
      uint64_t v38 = (void *)v41;
      unsigned int v42 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!a24) {
        goto LABEL_27;
      }
      uint64_t v38 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a24);
      unsigned int v42 = 2071181815;
LABEL_25:
      uint64_t v39 = v42 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v38, v39);
LABEL_27:
      a24 = 0;
LABEL_28:
      a24 = 0;
      a25 = 0;
      a26 = 0;
      *(void *)(v33 - 72) = &a9;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 72));
      if (a17 < 0) {
        operator delete(__p);
      }
      if (a23 < 0) {
        operator delete(a18);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void *turi::supervised::xgboost::set_xgboost_decision_tree_common_options(turi::option_manager *a1, xgboost_old::learner::BoostLearner *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  xgboost_old::learner::BoostLearner::SetParam(a2, "max_iterations", "1");
  xgboost_old::learner::BoostLearner::SetParam(a2, "eta", "1.0");
  result = (void *)turi::option_manager::current_option_values(a1);
  uint64_t v5 = result + 1;
  uint64_t v6 = (void *)*result;
  if ((void *)*result != result + 1)
  {
    uint64_t v19 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v20 = *MEMORY[0x263F8C2B8];
    uint64_t v18 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100](&v25, (std::string *)(v6 + 4));
      switch(v27)
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_12;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_12:
          v22[0] = v20;
          *(void *)((char *)v22 + *(void *)(v20 - 24)) = v19;
          v22[2] = v18;
          void v22[3] = MEMORY[0x263F8C318] + 16;
          if (v23 < 0) {
            operator delete((void *)v22[11]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](&v24);
          break;
        case 2:
          if (*(char *)(v26 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v26 + 8), *(void *)(v26 + 16));
          }
          else
          {
            long long v7 = *(_OWORD *)(v26 + 8);
            v21.__r_.__value_.__r.__words[2] = *(void *)(v26 + 24);
            *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v7;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v22, (void *)(v26 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v22, (uint64_t *)(v26 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v22, (void *)(v26 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v26, &v21);
          break;
        case 7:
          memset(&v21, 0, sizeof(v21));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v22, (void *)(v26 + 8));
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
      if ((*((unsigned char *)&v25.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        atomic_ullong *volatile v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
        if (v25.__r_.__value_.__l.__size_ != 11)
        {
          if (v25.__r_.__value_.__l.__size_ != 18
            || (*(void *)v25.__r_.__value_.__l.__data_ == 0x73736F6C5F6E696DLL
              ? (BOOL v11 = *(void *)(v25.__r_.__value_.__r.__words[0] + 8) == 0x697463756465725FLL)
              : (BOOL v11 = 0),
                v11 ? (BOOL v12 = *(unsigned __int16 *)(v25.__r_.__value_.__r.__words[0] + 16) == 28271) : (BOOL v12 = 0),
                !v12))
          {
LABEL_52:
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v15 = &v21;
            }
            else {
              uint64_t v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
            }
LABEL_64:
            xgboost_old::learner::BoostLearner::SetParam(a2, (std::string::value_type *)v10, (char *)v15);
            goto LABEL_65;
          }
LABEL_60:
          if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v15 = &v21;
          }
          else {
            uint64_t v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
          }
          atomic_ullong *volatile v10 = (std::string *)"gamma";
          goto LABEL_64;
        }
        if (*(void *)v25.__r_.__value_.__l.__data_ != 0x735F6D6F646E6172
          || *(void *)(v25.__r_.__value_.__r.__words[0] + 3) != 0x646565735F6D6F64)
        {
          goto LABEL_52;
        }
      }
      else
      {
        if (HIBYTE(v25.__r_.__value_.__r.__words[2]) != 11)
        {
          if (HIBYTE(v25.__r_.__value_.__r.__words[2]) != 18
            || (v25.__r_.__value_.__r.__words[0] == 0x73736F6C5F6E696DLL
              ? (BOOL v8 = v25.__r_.__value_.__l.__size_ == 0x697463756465725FLL)
              : (BOOL v8 = 0),
                v8 ? (BOOL v9 = LOWORD(v25.__r_.__value_.__r.__words[2]) == 28271) : (BOOL v9 = 0),
                !v9))
          {
LABEL_51:
            atomic_ullong *volatile v10 = &v25;
            goto LABEL_52;
          }
          goto LABEL_60;
        }
        if (v25.__r_.__value_.__r.__words[0] != 0x735F6D6F646E6172
          || *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 3) != 0x646565735F6D6F64)
        {
          goto LABEL_51;
        }
      }
      if (v27 != 7)
      {
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v15 = &v21;
        }
        else {
          uint64_t v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
        }
        atomic_ullong *volatile v10 = (std::string *)"seed";
        goto LABEL_64;
      }
LABEL_65:
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      result = (void *)std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v25);
      size_t v16 = (void *)v6[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          size_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v6[2];
          BOOL v8 = *v17 == (void)v6;
          uint64_t v6 = v17;
        }
        while (!v8);
      }
      uint64_t v6 = v17;
    }
    while (v17 != v5);
  }
  return result;
}

void sub_224482E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::pair<std::string const,turi::flexible_type>::~pair(v22 - 152);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::decision_tree_regression::configure(turi::supervised::xgboost::decision_tree_regression *this)
{
  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "silent", "1");
  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "objective", "reg:linear");
  std::map<std::string,unsigned long>::map[abi:ne180100](v4, (const void ***)this + 28);
  memset(v5, 0, sizeof(v5));
  std::vector<turi::option_handling::option_info>::__init_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(v5, *((void *)this + 31), *((void *)this + 32), (uint64_t)(*((void *)this + 32) - *((void *)this + 31)) >> 7);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v6, (uint64_t)this + 272);
  turi::supervised::xgboost::set_xgboost_decision_tree_common_options((turi::option_manager *)v4, *((xgboost_old::learner::BoostLearner **)this + 208));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v6, (void *)v6[1]);
  long long v7 = (void **)v5;
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v4, (char *)v4[1]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Decision tree regression");
  turi::supervised::supervised_learning_model_base::display_regression_training_summary(this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_224482FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::decision_tree_regression::init_options(xgboost_old::learner::BoostLearner **a1, uint64_t a2)
{
  turi::supervised::xgboost::xgboost_model::init_options(a1, a2);
  turi::supervised::xgboost::init_decision_tree_common_options((turi::supervised::xgboost *)(a1 + 28), v3);
}

void sub_224483074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::supervised::xgboost::decision_tree_regression::export_to_coreml(turi::supervised::xgboost::decision_tree_regression *this)
{
  v1[20] = *MEMORY[0x263EF8340];
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v1, "model_type", "decision_tree");
}

void sub_224483218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void turi::supervised::xgboost::decision_tree_classifier::model_specific_init(uint64_t **this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  turi::supervised::xgboost::xgboost_model::model_specific_init((turi::supervised::xgboost::xgboost_model *)this, a2, a3);
  uint64_t v19 = *(void **)(this[47][3] + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  p_p = &__p;
  unint64_t v4 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v4 + 14, &v19);
  if (v21 < 0) {
    operator delete(__p);
  }
  long long v7 = this[47];
  uint64_t v6 = this[48];
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  v18[0] = 0;
  v18[1] = 0;
  p_p = (void **)v18;
  BOOL v8 = (void *)v7[3];
  if (!v8[8]) {
LABEL_15:
  }
    turi::flexible_type_converter<std::map<turi::flexible_type,unsigned long>>::set(&p_p, (uint64_t)&v19);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = v8[6];
    if ((*(_DWORD *)(v12 + 24) | 2) == 2)
    {
      unsigned int v13 = (uint64_t *)(v12 + 80);
    }
    else
    {
      uint64_t v15 = v12 + 32;
      uint64_t v14 = *(void *)(v12 + 32);
      if (v11 >= (*(void *)(v15 + 8) - v14) >> 3)
      {
        uint64_t v16 = 0;
        goto LABEL_12;
      }
      unsigned int v13 = (uint64_t *)(v14 + v10);
    }
    uint64_t v16 = *v13;
LABEL_12:
    uint64_t v19 = (void *)(*(void *)(v8[4] + 80) + v9);
    std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)&p_p, (uint64_t)v19, v5, (uint64_t)&std::piecewise_construct, &v19)[6] = v16;
    ++v11;
    BOOL v8 = (void *)v7[3];
    v10 += 8;
    v9 += 16;
    if (v11 >= v8[8]) {
      goto LABEL_15;
    }
  }
}

void sub_2244834B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a21);
  std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::destroy((uint64_t)&a10, a11);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::decision_tree_classifier::configure(turi::supervised::xgboost::decision_tree_classifier *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  uint64_t v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  unint64_t v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v18, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "silent", "1");
  unint64_t v4 = (xgboost_old::learner::BoostLearner *)*((void *)this + 208);
  if (v3 < 3)
  {
    uint64_t v6 = "binary:logistic";
  }
  else
  {
    std::to_string(&__p, v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xgboost_old::learner::BoostLearner::SetParam(v4, "num_class", (char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v4 = (xgboost_old::learner::BoostLearner *)*((void *)this + 208);
    uint64_t v6 = "multi:softprob";
  }
  xgboost_old::learner::BoostLearner::SetParam(v4, "objective", v6);
  std::map<std::string,unsigned long>::map[abi:ne180100](v11, (const void ***)this + 28);
  memset(v12, 0, sizeof(v12));
  std::vector<turi::option_handling::option_info>::__init_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(v12, *((void *)this + 31), *((void *)this + 32), (uint64_t)(*((void *)this + 32) - *((void *)this + 31)) >> 7);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v13, (uint64_t)this + 272);
  turi::supervised::xgboost::set_xgboost_decision_tree_common_options((turi::option_manager *)v11, *((xgboost_old::learner::BoostLearner **)this + 208));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v13, (void *)v13[1]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v11, (char *)v11[1]);
  std::string::basic_string[abi:ne180100]<0>(v9, "Decision tree classifier");
  turi::supervised::supervised_learning_model_base::display_classifier_training_summary(this, (uint64_t)v9, 0);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  v15[0] = *MEMORY[0x263F8C2B8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v15[2] = v7;
  v15[3] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v17);
}

void sub_2244837E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::decision_tree_classifier::init_options(xgboost_old::learner::BoostLearner **a1, uint64_t a2)
{
  v19[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  turi::supervised::xgboost::xgboost_model::init_options(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(&v17, "class_weights");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Weights (during training) assigned to each class.");
  *(atomic_ullong **)((char *)v19 + 5) = (atomic_ullong *)0x700000000000000;
  v19[0] = 0;
  turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 28), &v17, &__p, (uint64_t)v19, 1);
  switch(BYTE4(v19[1]))
  {
    case 2:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v4 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      if (*((char *)v19[0] + 31) < 0) {
        operator delete(*((void **)v19[0] + 1));
      }
      __n128 v5 = v4;
      uint64_t v6 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      BOOL v8 = (void *)v19[0][1];
      if (v8)
      {
        v19[0][2] = (atomic_ullong)v8;
        operator delete(v8);
      }
      __n128 v5 = v7;
      uint64_t v6 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      char v18 = (void **)(v19[0] + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      char v18 = (void **)(v19[0] + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_18:
      __n128 v5 = v9;
      uint64_t v6 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v15 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v19[0] + 2);
      __n128 v5 = v15;
      unsigned int v14 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      char v10 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      unint64_t v11 = (void *)v19[0][6];
      if (v11)
      {
        v19[0][7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      uint64_t v12 = (void *)v10[3];
      if (v12)
      {
        v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      unsigned int v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      __n128 v5 = v10;
      unsigned int v14 = 2071181815;
LABEL_31:
      uint64_t v6 = v14 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v5, v6);
LABEL_33:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      turi::supervised::xgboost::init_decision_tree_common_options((turi::supervised::xgboost *)(a1 + 28), v3);
    default:
      goto LABEL_33;
  }
}

void sub_224483B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, char *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,int a23,int a24,char a25)
{
}

void turi::supervised::xgboost::decision_tree_classifier::export_to_coreml(turi::supervised::xgboost::decision_tree_classifier *this)
{
  v1[20] = *MEMORY[0x263EF8340];
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v1, "model_type", "decision_tree");
}

void sub_224483DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,char a21)
{
}

const char *turi::supervised::xgboost::decision_tree_regression::name(turi::supervised::xgboost::decision_tree_regression *this)
{
  return "decision_tree_regression";
}

void *turi::supervised::xgboost::decision_tree_regression::uid(turi::supervised::xgboost::decision_tree_regression *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised::xgboost::decision_tree_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/decision_tree.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised::xgboost::decision_tree_regression::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised::xgboost::decision_tree_regression::uid(void)::_uid;
}

void sub_224483F00(_Unwind_Exception *a1)
{
}

const char *turi::supervised::xgboost::decision_tree_classifier::name(turi::supervised::xgboost::decision_tree_classifier *this)
{
  return "decision_tree_classifier";
}

void *turi::supervised::xgboost::decision_tree_classifier::uid(turi::supervised::xgboost::decision_tree_classifier *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised::xgboost::decision_tree_classifier::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/decision_tree.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised::xgboost::decision_tree_classifier::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised::xgboost::decision_tree_classifier::uid(void)::_uid;
}

void sub_224483FB0(_Unwind_Exception *a1)
{
}

void turi::supervised::linear_regression::~linear_regression(turi::supervised::linear_regression *this)
{
  *(void *)this = &unk_26D783118;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 50);
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  free(*((void **)this + 53));
  free(*((void **)this + 51));
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  turi::supervised::supervised_learning_model_base::~supervised_learning_model_base(this);
}

{
  uint64_t vars8;

  turi::supervised::linear_regression::~linear_regression(this);
  JUMPOUT(0x22A614FA0);
}

void turi::supervised::linear_regression::model_specific_init(turi::supervised::linear_regression *this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  __n128 v5 = (uint64_t *)*((void *)this + 47);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *v5;
  if (v5[1] == *v5)
  {
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = v6 + v7;
      uint64_t v12 = *(void *)(v6 + v7);
      unint64_t v11 = *(std::__shared_weak_count **)(v10 + 8);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v13 = *(_DWORD *)(v12 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      else
      {
        unsigned int v13 = *(_DWORD *)(v12 + 24);
      }
      if (v13 > 6 || ((1 << v13) & 0x4A) == 0)
      {
        uint64_t v20 = (uint64_t *)(*v5 + v7);
        uint64_t v22 = *v20;
        char v21 = (std::__shared_weak_count *)v20[1];
        if (v21)
        {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v19 = *(void *)(v22 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        else
        {
          uint64_t v19 = *(void *)(v22 + 64);
        }
      }
      else
      {
        uint64_t v15 = (uint64_t *)(*v5 + v7);
        uint64_t v17 = *v15;
        char v16 = (std::__shared_weak_count *)v15[1];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v18 = *(void *)(v17 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        else
        {
          uint64_t v18 = *(void *)(v17 + 64);
        }
        uint64_t v19 = v18 - 1;
      }
      v9 += v19;
      ++v8;
      uint64_t v6 = *v5;
      v7 += 16;
    }
    while (v8 < (v5[1] - *v5) >> 4);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v26 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
  char v27 = __p;
  char v23 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v23 + 14, &v26);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_224484258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  MEMORY[0x22A614FA0](v16, 0x10B1C40760E7B66);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::linear_regression_opt_interface>::reset[abi:ne180100]<turi::supervised::linear_regression_opt_interface,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::supervised::linear_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_regression_opt_interface,void>(&v2, a2);
}

void turi::supervised::linear_regression::init_options(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v52, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  int v64 = 0;
  char v65 = 1;
  uint64_t v63 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), v52, &__p, (uint64_t)&v63, 0, 1.0e-10, 1.0e20);
  switch(v65)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v2 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      if (*(char *)(v63 + 31) < 0) {
        operator delete(*(void **)(v63 + 8));
      }
      unint64_t v3 = (void *)v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v5 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      uint64_t v6 = *(void **)(v63 + 8);
      if (v6)
      {
        *(void *)(v63 + 16) = v6;
        operator delete(v6);
      }
      unint64_t v3 = (void *)v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      v50[0] = (void *)(v63 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
      goto LABEL_27;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      v50[0] = (void *)(v63 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
LABEL_27:
      unint64_t v3 = (void *)v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v13 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v63 + 16));
      unint64_t v3 = (void *)v13;
      unsigned int v12 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v8 = (void *)v63;
      if (!v63) {
        goto LABEL_33;
      }
      uint64_t v9 = *(void **)(v63 + 48);
      if (v9)
      {
        *(void *)(v63 + 56) = v9;
        operator delete(v9);
      }
      uint64_t v10 = (void *)v8[3];
      if (v10)
      {
        v8[4] = v10;
        operator delete(v10);
      }
      unint64_t v11 = (std::__shared_weak_count *)v8[2];
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      unint64_t v3 = v8;
      unsigned int v12 = 2071181815;
LABEL_31:
      uint64_t v4 = v12 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      uint64_t v63 = 0;
      int v64 = 0;
      char v65 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(v52, "step_size");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Guess for the initial step size for the solver");
      int v61 = 0;
      char v62 = 1;
      uint64_t v60 = 0x3FF0000000000000;
      turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), v52, &__p, (uint64_t)&v60, 0, 1.0e-10, 1.0e20);
      switch(v62)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v14 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          if (*(char *)(v60 + 31) < 0) {
            operator delete(*(void **)(v60 + 8));
          }
          uint64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_68;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v17 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          uint64_t v18 = *(void **)(v60 + 8);
          if (v18)
          {
            *(void *)(v60 + 16) = v18;
            operator delete(v18);
          }
          uint64_t v15 = (void *)v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_68;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v19 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          v50[0] = (void *)(v60 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
          goto LABEL_63;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v19 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          v50[0] = (void *)(v60 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
LABEL_63:
          uint64_t v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v25 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v60 + 16));
          uint64_t v15 = (void *)v25;
          unsigned int v24 = -235920773;
          goto LABEL_67;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = (void *)v60;
          if (!v60) {
            goto LABEL_69;
          }
          char v21 = *(void **)(v60 + 48);
          if (v21)
          {
            *(void *)(v60 + 56) = v21;
            operator delete(v21);
          }
          uint64_t v22 = (void *)v20[3];
          if (v22)
          {
            v20[4] = v22;
            operator delete(v22);
          }
          char v23 = (std::__shared_weak_count *)v20[2];
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          uint64_t v15 = v20;
          unsigned int v24 = 2071181815;
LABEL_67:
          uint64_t v16 = v24 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x22A614FA0](v15, v16);
LABEL_69:
          uint64_t v60 = 0;
          int v61 = 0;
          char v62 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52[0].__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(v52, "max_iterations");
          std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform during training");
          char v59 = 0;
          int v58 = 0;
          uint64_t v57 = 10;
          turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), v52, &__p, (uint64_t)&v57, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
          switch(v59)
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v26 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              if (*(char *)(v57 + 31) < 0) {
                operator delete(*(void **)(v57 + 8));
              }
              char v27 = (void *)v26;
              uint64_t v28 = 0x1012C404EF22A49;
              goto LABEL_104;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v29 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              uint64_t v30 = *(void **)(v57 + 8);
              if (v30)
              {
                *(void *)(v57 + 16) = v30;
                operator delete(v30);
              }
              char v27 = (void *)v29;
              uint64_t v28 = 0x1080C409938AC02;
              goto LABEL_104;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v31 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              v50[0] = (void *)(v57 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
              goto LABEL_99;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v31 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              v50[0] = (void *)(v57 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
LABEL_99:
              char v27 = (void *)v31;
              uint64_t v28 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v37 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)(v57 + 16));
              char v27 = (void *)v37;
              unsigned int v36 = -235920773;
              goto LABEL_103;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v32 = (void *)v57;
              if (!v57) {
                goto LABEL_105;
              }
              uint64_t v33 = *(void **)(v57 + 48);
              if (v33)
              {
                *(void *)(v57 + 56) = v33;
                operator delete(v33);
              }
              uint64_t v34 = (void *)v32[3];
              if (v34)
              {
                v32[4] = v34;
                operator delete(v34);
              }
              uint64_t v35 = (std::__shared_weak_count *)v32[2];
              if (v35) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v35);
              }
              char v27 = v32;
              unsigned int v36 = 2071181815;
LABEL_103:
              uint64_t v28 = v36 | 0x1030C4000000000;
LABEL_104:
              MEMORY[0x22A614FA0](v27, v28);
LABEL_105:
              uint64_t v57 = 0;
              int v58 = 0;
              char v59 = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v52[0].__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(v52, "feature_rescaling");
              std::string::basic_string[abi:ne180100]<0>(&__p, "Rescale features to have unit L2-Norm");
              turi::option_manager::create_BOOLean_option((turi::option_manager *)(a1 + 224), v52, &__p, 1u, 0);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v52[0].__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(v52, "lbfgs_memory_level");
              std::string::basic_string[abi:ne180100]<0>(&__p, "Number of previous iterations to cache for LBFGS");
              char v56 = 0;
              int v55 = 0;
              uint64_t v54 = 11;
              turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), v52, &__p, (uint64_t)&v54, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
              switch(v56)
              {
                case 2:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_145;
                  }
                  uint64_t v38 = v54;
                  if (!v54) {
                    goto LABEL_145;
                  }
                  if (*(char *)(v54 + 31) < 0) {
                    operator delete(*(void **)(v54 + 8));
                  }
                  uint64_t v39 = (void *)v38;
                  uint64_t v40 = 0x1012C404EF22A49;
                  goto LABEL_144;
                case 3:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_145;
                  }
                  uint64_t v41 = v54;
                  if (!v54) {
                    goto LABEL_145;
                  }
                  unsigned int v42 = *(void **)(v54 + 8);
                  if (v42)
                  {
                    *(void *)(v54 + 16) = v42;
                    operator delete(v42);
                  }
                  uint64_t v39 = (void *)v41;
                  uint64_t v40 = 0x1080C409938AC02;
                  goto LABEL_144;
                case 4:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_145;
                  }
                  uint64_t v43 = v54;
                  if (!v54) {
                    goto LABEL_145;
                  }
                  v50[0] = (void *)(v54 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
                  goto LABEL_139;
                case 5:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_145;
                  }
                  uint64_t v43 = v54;
                  if (!v54) {
                    goto LABEL_145;
                  }
                  v50[0] = (void *)(v54 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
LABEL_139:
                  uint64_t v39 = (void *)v43;
                  uint64_t v40 = 0x1020C405E66F15BLL;
                  goto LABEL_144;
                case 8:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_145;
                  }
                  uint64_t v49 = v54;
                  if (!v54) {
                    goto LABEL_145;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v54 + 16));
                  uint64_t v39 = (void *)v49;
                  unsigned int v48 = -235920773;
                  goto LABEL_143;
                case 9:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_145;
                  }
                  v44 = (void *)v54;
                  if (!v54) {
                    goto LABEL_145;
                  }
                  uint64_t v45 = *(void **)(v54 + 48);
                  if (v45)
                  {
                    *(void *)(v54 + 56) = v45;
                    operator delete(v45);
                  }
                  uint64_t v46 = (void *)v44[3];
                  if (v46)
                  {
                    v44[4] = v46;
                    operator delete(v46);
                  }
                  unsigned int v47 = (std::__shared_weak_count *)v44[2];
                  if (v47) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                  }
                  uint64_t v39 = v44;
                  unsigned int v48 = 2071181815;
LABEL_143:
                  uint64_t v40 = v48 | 0x1030C4000000000;
LABEL_144:
                  MEMORY[0x22A614FA0](v39, v40);
LABEL_145:
                  uint64_t v54 = 0;
                  int v55 = 0;
                  char v56 = 0;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v52[0].__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
                  std::string::basic_string[abi:ne180100]<0>(v50, "Solver used for training");
                  turi::flexible_type::flexible_type((turi::flexible_type *)&v53, "auto");
                default:
                  goto LABEL_145;
              }
            default:
              goto LABEL_105;
          }
        default:
          goto LABEL_69;
      }
    default:
      goto LABEL_33;
  }
}

void sub_224485CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,int a27,char a28,uint64_t a29,int a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,char a45)
{
  MEMORY[0x22A614FA0](v45, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v46 - 108))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v46 - 120), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v48 = *(void *)(v46 - 120);
        if (v48)
        {
          if (*(char *)(v48 + 31) < 0) {
            operator delete(*(void **)(v48 + 8));
          }
          MEMORY[0x22A614FA0](v48, 0x1012C404EF22A49);
        }
      }
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v46 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v49 = *(void **)(v46 - 120);
      if (!v49) {
        goto LABEL_27;
      }
      double v50 = (void *)v49[1];
      if (v50)
      {
        v49[2] = v50;
        operator delete(v50);
      }
      long long v51 = v49;
      uint64_t v52 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v46 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v53 = *(void *)(v46 - 120);
      if (!v53) {
        goto LABEL_27;
      }
      a10 = (void **)(v53 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v46 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v53 = *(void *)(v46 - 120);
      if (!v53) {
        goto LABEL_27;
      }
      a10 = (void **)(v53 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      long long v51 = (void *)v53;
      uint64_t v52 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v46 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v54 = *(void *)(v46 - 120);
      if (!v54) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v54 + 16));
      long long v51 = (void *)v54;
      unsigned int v55 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v46 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      char v56 = *(void **)(v46 - 120);
      if (!v56) {
        goto LABEL_27;
      }
      long long v51 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v56);
      unsigned int v55 = 2071181815;
LABEL_25:
      uint64_t v52 = v55 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v51, v52);
LABEL_27:
      *(void *)(v46 - 120) = 0;
LABEL_28:
      *(void *)(v46 - 120) = 0;
      *(_DWORD *)(v46 - 112) = 0;
      *(unsigned char *)(v46 - 108) = 0;
      a10 = &a13;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      if (a25 < 0) {
        operator delete(__p);
      }
      if (a37 < 0) {
        operator delete(a32);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

uint64_t turi::supervised::linear_regression::train(turi::supervised::linear_regression_opt_interface **this)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v121, "feature_rescaling");
  option_value = (unsigned char *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)&v121);
  uint64_t v3 = 0;
  switch(option_value[12])
  {
    case 0:
      uint64_t v3 = *(void *)option_value;
      goto LABEL_25;
    case 1:
      uint64_t v3 = (uint64_t)*(double *)option_value;
      goto LABEL_25;
    case 2:
      uint64_t v5 = *(void *)option_value;
      uint64_t v6 = (char **)(*(void *)option_value + 8);
      __idx[0] = 0;
      uint64_t v7 = (char *)v6;
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v7 = *v6;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v7);
      uint64_t v3 = std::stoll((const std::string *)&__p, __idx, 10);
      if (SBYTE7(v125) < 0) {
        operator delete((void *)__p);
      }
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v8 = *(void *)(v5 + 16);
      }
      else {
        uint64_t v8 = *(unsigned __int8 *)(v5 + 31);
      }
      if (__idx[0] != v8)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v49 = std::string::append(&v123, " cannot be interpreted as an integer");
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        *(void *)&long long v125 = *((void *)&v49->__r_.__value_.__l + 2);
        long long __p = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v4 = *(void *)option_value;
      *(void *)&long long v125 = 0;
      long long __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_24;
    case 4:
      uint64_t v9 = *(void *)option_value;
      *(void *)&long long v125 = 0;
      long long __p = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v9 + 8), *(uint64_t **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
      goto LABEL_24;
    case 5:
      uint64_t v10 = *(void *)option_value;
      *(void *)&long long v125 = 0;
      long long __p = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
      goto LABEL_24;
    case 6:
      uint64_t v3 = (uint64_t)(*(void *)option_value << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v11 = *(void *)option_value;
      uint64_t v12 = *(void *)(*(void *)option_value + 16);
      *(void *)&long long __p = *(void *)(*(void *)option_value + 8);
      *((void *)&__p + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
      }
      long long v13 = *(_OWORD *)(v11 + 24);
      long long v14 = *(_OWORD *)(v11 + 56);
      long long v126 = *(_OWORD *)(v11 + 40);
      long long v127 = v14;
      long long v125 = v13;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p + 1);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)option_value + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v126 + 1))
      {
        *(void *)&long long v127 = *((void *)&v126 + 1);
        operator delete(*((void **)&v126 + 1));
      }
      if ((void)v125)
      {
        *((void *)&v125 + 1) = v125;
        operator delete((void *)v125);
      }
      if (*((void *)&__p + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
      }
LABEL_24:
      uint64_t v3 = 0;
LABEL_25:
      if ((v122 & 0x80000000) == 0)
      {
        if (!v3) {
          goto LABEL_30;
        }
LABEL_29:
        turi::supervised::linear_regression_opt_interface::init_feature_rescaling(this[49]);
      }
      operator delete(v121);
      if (v3) {
        goto LABEL_29;
      }
LABEL_30:
      turi::supervised::supervised_learning_model_base::num_examples((turi::supervised::supervised_learning_model_base *)this);
      std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
      uint64_t v15 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(this + 37), (const void **)&__p);
      unint64_t v16 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v123, v15);
      if (SBYTE7(v125) < 0) {
        operator delete((void *)__p);
      }
      unint64_t v120 = 0;
      v119 = 0;
      uint64_t v17 = 8 * v16;
      if (v16)
      {
        if (v16 >> 61 || (uint64_t v18 = (char *)malloc_type_malloc(8 * v16, 0x1E76AA36uLL), (v19 = v18) == 0))
        {
          v95 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v96 = std::bad_alloc::bad_alloc(v95);
          __cxa_throw(v96, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        v119 = v18;
        unint64_t v120 = v16;
        unint64_t v20 = v16 >> 1;
        int64_t v21 = v16 & 0xFFFFFFFFFFFFFFFELL;
        if (v16 < 2)
        {
          int v23 = 0;
        }
        else
        {
          unint64_t v22 = 2;
          if (v21 > 2) {
            unint64_t v22 = v16 & 0xFFFFFFFFFFFFFFFELL;
          }
          bzero(v18, ((8 * v22 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          int v23 = 1;
        }
      }
      else
      {
        int v23 = 0;
        int64_t v21 = 0;
        unint64_t v20 = 0;
        uint64_t v19 = 0;
      }
      if (v21 < v16) {
        bzero(&v19[16 * v20], v17 - 16 * v20);
      }
      std::string::basic_string[abi:ne180100]<0>(v117, "Linear regression");
      turi::supervised::supervised_learning_model_base::display_regression_training_summary((turi::supervised::supervised_learning_model_base *)this, (uint64_t)v117);
      if (v118 < 0) {
        operator delete(v117[0]);
      }
      unsigned int v24 = (int *)global_logger();
      if (v24[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v24)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        uint64_t v25 = (file_logger *)global_logger();
        started = file_logger::start_stream(v25, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/linear_regression.cpp", "train", 179, 1);
        char v27 = pthread_getspecific(*((void *)started + 74));
        if (v27 && *((unsigned char *)v27 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)"Number of coefficients    : ", 28);
        }
        uint64_t v28 = file_logger::operator<<<unsigned long>((uint64_t)started);
        uint64_t v29 = pthread_getspecific(*(void *)(v28 + 592));
        if (v29)
        {
          if (*((unsigned char *)v29 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(v29[2] - 24) + 16));
            uint64_t v30 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v28);
            if (*(_DWORD *)(v28 + 600) == 7)
            {
              __print_back_trace();
              v99 = __cxa_allocate_exception(8uLL);
              void *v99 = "LOG_FATAL encountered";
              __cxa_throw(v99, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
      }
      if (v16)
      {
        uint64_t v31 = malloc_type_malloc(8 * v16, 0x1E76AA36uLL);
        uint64_t v32 = v31;
        if (!v31)
        {
          v97 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v98 = std::bad_alloc::bad_alloc(v97);
          __cxa_throw(v98, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        if (v23)
        {
          uint64_t v33 = 2;
          if (v21 > 2) {
            uint64_t v33 = v21;
          }
          memset_pattern16(v31, &unk_2246FE880, ((8 * v33 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
      if (v21 < v16) {
        memset_pattern16(&v32[v20], &unk_2246FE880, v17 - 16 * v20);
      }
      *((void *)v32 + v16 - 1) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v121, "l1_penalty");
      uint64_t v34 = (int *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)&v121);
      double v35 = 0.0;
      switch(*((unsigned char *)v34 + 12))
      {
        case 0:
          double v35 = (double)*(uint64_t *)v34;
          goto LABEL_91;
        case 1:
          double v35 = *(double *)v34;
          goto LABEL_91;
        case 2:
          uint64_t v37 = *(void *)v34;
          uint64_t v38 = (char **)(*(void *)v34 + 8);
          __idx[0] = 0;
          uint64_t v39 = (char *)v38;
          if (*(char *)(v37 + 31) < 0) {
            uint64_t v39 = *v38;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v39);
          double v40 = std::stod((const std::string *)&__p, __idx);
          if (SBYTE7(v125) < 0) {
            operator delete((void *)__p);
          }
          if (*(char *)(v37 + 31) < 0) {
            uint64_t v41 = *(void *)(v37 + 16);
          }
          else {
            uint64_t v41 = *(unsigned __int8 *)(v37 + 31);
          }
          if (__idx[0] != v41)
          {
            v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v102 = std::string::append(&v123, " cannot be interpreted as a float");
            long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
            *(void *)&long long v125 = *((void *)&v102->__r_.__value_.__l + 2);
            long long __p = v103;
            v102->__r_.__value_.__l.__size_ = 0;
            v102->__r_.__value_.__r.__words[2] = 0;
            v102->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v101, (const std::string *)&__p);
            __cxa_throw(v101, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          float v51 = v40;
          double v35 = v51;
          goto LABEL_91;
        case 3:
          uint64_t v36 = *(void *)v34;
          *(void *)&long long v125 = 0;
          long long __p = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v36 + 8), *(void *)(v36 + 16), (uint64_t)(*(void *)(v36 + 16) - *(void *)(v36 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          goto LABEL_91;
        case 4:
          uint64_t v42 = *(void *)v34;
          *(void *)&long long v125 = 0;
          long long __p = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v42 + 8), *(uint64_t **)(v42 + 16), (uint64_t)(*(void *)(v42 + 16) - *(void *)(v42 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          goto LABEL_91;
        case 5:
          uint64_t v43 = *(void *)v34;
          *(void *)&long long v125 = 0;
          long long __p = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(void *)(v43 + 16) - *(void *)(v43 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          goto LABEL_91;
        case 6:
          double v35 = (double)v34[2] / 1000000.0 + (double)((uint64_t)(*(void *)v34 << 8) >> 8);
          goto LABEL_91;
        case 7:
          goto LABEL_91;
        case 8:
          uint64_t v44 = *(void *)v34;
          uint64_t v45 = *(void *)(*(void *)v34 + 16);
          *(void *)&long long __p = *(void *)(*(void *)v34 + 8);
          *((void *)&__p + 1) = v45;
          if (v45) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v45 + 8), 1u, memory_order_relaxed);
          }
          long long v46 = *(_OWORD *)(v44 + 24);
          long long v47 = *(_OWORD *)(v44 + 56);
          long long v126 = *(_OWORD *)(v44 + 40);
          long long v127 = v47;
          long long v125 = v46;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p + 1);
          goto LABEL_91;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v34 + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v126 + 1))
          {
            *(void *)&long long v127 = *((void *)&v126 + 1);
            operator delete(*((void **)&v126 + 1));
          }
          if ((void)v125)
          {
            *((void *)&v125 + 1) = v125;
            operator delete((void *)v125);
          }
          if (*((void *)&__p + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
          }
LABEL_91:
          if (v122 < 0) {
            operator delete(v121);
          }
          std::string::basic_string[abi:ne180100]<0>(&v121, "l2_penalty");
          uint64_t v52 = (int *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)&v121);
          double v53 = 0.0;
          switch(*((unsigned char *)v52 + 12))
          {
            case 0:
              double v53 = (double)*(uint64_t *)v52;
              goto LABEL_119;
            case 1:
              double v53 = *(double *)v52;
              goto LABEL_119;
            case 2:
              uint64_t v55 = *(void *)v52;
              char v56 = (char **)(*(void *)v52 + 8);
              __idx[0] = 0;
              uint64_t v57 = (char *)v56;
              if (*(char *)(v55 + 31) < 0) {
                uint64_t v57 = *v56;
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, v57);
              double v58 = std::stod((const std::string *)&__p, __idx);
              if (SBYTE7(v125) < 0) {
                operator delete((void *)__p);
              }
              if (*(char *)(v55 + 31) < 0) {
                uint64_t v59 = *(void *)(v55 + 16);
              }
              else {
                uint64_t v59 = *(unsigned __int8 *)(v55 + 31);
              }
              if (__idx[0] != v59)
              {
                v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v105 = std::string::append(&v123, " cannot be interpreted as a float");
                long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                *(void *)&long long v125 = *((void *)&v105->__r_.__value_.__l + 2);
                long long __p = v106;
                v105->__r_.__value_.__l.__size_ = 0;
                v105->__r_.__value_.__r.__words[2] = 0;
                v105->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v104, (const std::string *)&__p);
                __cxa_throw(v104, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              float v66 = v58;
              double v53 = v66;
              goto LABEL_119;
            case 3:
              uint64_t v54 = *(void *)v52;
              *(void *)&long long v125 = 0;
              long long __p = 0uLL;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v54 + 8), *(void *)(v54 + 16), (uint64_t)(*(void *)(v54 + 16) - *(void *)(v54 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              goto LABEL_119;
            case 4:
              uint64_t v60 = *(void *)v52;
              *(void *)&long long v125 = 0;
              long long __p = 0uLL;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v60 + 8), *(uint64_t **)(v60 + 16), (uint64_t)(*(void *)(v60 + 16) - *(void *)(v60 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
              goto LABEL_119;
            case 5:
              uint64_t v61 = *(void *)v52;
              *(void *)&long long v125 = 0;
              long long __p = 0uLL;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v61 + 8), *(uint64_t **)(v61 + 16), (uint64_t)(*(void *)(v61 + 16) - *(void *)(v61 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
              goto LABEL_119;
            case 6:
              double v53 = (double)v52[2] / 1000000.0 + (double)((uint64_t)(*(void *)v52 << 8) >> 8);
              goto LABEL_119;
            case 7:
              goto LABEL_119;
            case 8:
              uint64_t v62 = *(void *)v52;
              uint64_t v63 = *(void *)(*(void *)v52 + 16);
              *(void *)&long long __p = *(void *)(*(void *)v52 + 8);
              *((void *)&__p + 1) = v63;
              if (v63) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v63 + 8), 1u, memory_order_relaxed);
              }
              long long v64 = *(_OWORD *)(v62 + 24);
              long long v65 = *(_OWORD *)(v62 + 56);
              long long v126 = *(_OWORD *)(v62 + 40);
              long long v127 = v65;
              long long v125 = v64;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((atomic_uint **)&__p + 1);
              goto LABEL_119;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v52 + 8);
              turi::flexible_type_fail(0);
              if (*((void *)&v126 + 1))
              {
                *(void *)&long long v127 = *((void *)&v126 + 1);
                operator delete(*((void **)&v126 + 1));
              }
              if ((void)v125)
              {
                *((void *)&v125 + 1) = v125;
                operator delete((void *)v125);
              }
              if (*((void *)&__p + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
              }
LABEL_119:
              if (v122 < 0) {
                operator delete(v121);
              }
              uint64_t v116 = 0;
              v115 = 0;
              Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v115, v16, 1);
              int64_t v67 = v21;
              uint64_t v68 = v16;
              if (v116 != v16)
              {
                Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v115, v16, 1);
                uint64_t v68 = v116;
                if (v116 >= 0) {
                  uint64_t v69 = v116;
                }
                else {
                  uint64_t v69 = v116 + 1;
                }
                int64_t v67 = v69 & 0xFFFFFFFFFFFFFFFELL;
              }
              float v70 = v35;
              double v71 = v70;
              uint64_t v72 = (char *)v115;
              if (v68 >= 2)
              {
                int64_t v73 = 0;
                v74 = (float64x2_t *)v115;
                v75 = (float64x2_t *)v32;
                do
                {
                  float64x2_t v76 = *v75++;
                  *v74++ = vmulq_n_f64(v76, v71);
                  v73 += 2;
                }
                while (v73 < v67);
              }
              BOOL v77 = v68 <= v67;
              uint64_t v78 = v68 - v67;
              if (!v77)
              {
                v79 = (double *)v32 + v67;
                v80 = (double *)&v72[8 * v67];
                do
                {
                  double v81 = *v79++;
                  *v80++ = v81 * v71;
                  --v78;
                }
                while (v78);
              }
              double v107 = v70;
              uint64_t v114 = 0;
              v113 = 0;
              Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v113, v16, 1);
              if (v114 == v16)
              {
                uint64_t v82 = v16;
              }
              else
              {
                Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v113, v16, 1);
                uint64_t v82 = v114;
                if (v114 >= 0) {
                  uint64_t v83 = v114;
                }
                else {
                  uint64_t v83 = v114 + 1;
                }
                int64_t v21 = v83 & 0xFFFFFFFFFFFFFFFELL;
              }
              float v84 = v53;
              double v85 = v84;
              v86 = (char *)v113;
              if (v82 >= 2)
              {
                int64_t v87 = 0;
                v88 = (float64x2_t *)v113;
                v89 = (float64x2_t *)v32;
                do
                {
                  float64x2_t v90 = *v89++;
                  *v88++ = vmulq_n_f64(v90, v85);
                  v87 += 2;
                }
                while (v87 < v21);
              }
              BOOL v77 = v82 <= v21;
              uint64_t v91 = v82 - v21;
              if (!v77)
              {
                v92 = (double *)v32 + v21;
                v93 = (double *)&v86[8 * v21];
                do
                {
                  double v94 = *v92++;
                  *v93++ = v94 * v85;
                  --v91;
                }
                while (v91);
              }
              uint64_t v112 = 0;
              uint64_t v110 = 0;
              uint64_t v111 = 0;
              uint64_t v109 = 0;
              if (v107 < 1.0e-10) {
                operator new();
              }
              operator new();
            default:
              goto LABEL_152;
          }
        default:
          break;
      }
LABEL_152:
      uint64_t result = turi::flexible_type_fail(0);
LABEL_155:
      __break(1u);
      return result;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      goto LABEL_155;
  }
}

void sub_224488940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x390]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a29, (void *)a30);
  turi::optimization::_solver_return::~_solver_return((void **)&STACK[0x520]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a32);
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a73) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a73);
  }
  if (STACK[0x208]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x208]);
  }
  free((void *)STACK[0x210]);
  free((void *)STACK[0x220]);
  free(a10);
  free((void *)STACK[0x248]);
  _Unwind_Resume(a1);
}

void sub_224488ECC()
{
}

void std::shared_ptr<turi::optimization::regularizer_interface>::reset[abi:ne180100]<turi::optimization::elastic_net,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::optimization::regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::elastic_net,void>(&v2, a2);
}

uint64_t turi::optimization::newton_method<Eigen::Matrix<double,-1,1,0,-1,1>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  v293[4] = *MEMORY[0x263EF8340];
  gettimeofday(&v265, 0);
  gettimeofday(&v278, 0);
  __darwin_time_t tv_sec = v278.tv_sec;
  __darwin_time_t v9 = v265.tv_sec;
  __darwin_suseconds_t tv_usec = v278.tv_usec;
  __darwin_suseconds_t v11 = v265.tv_usec;
  *(_DWORD *)a5 = -1;
  *(void *)(a5 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(void *)(a5 + 64) = 0;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 96) = 0;
  turi::sframe::sframe((turi::sframe *)(a5 + 104));
  uint64_t v12 = (int *)global_logger();
  if (v12[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v12)) {
      goto LABEL_296;
    }
    long long v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/newton_method-inl.hpp", "newton_method", 65, 1);
    uint64_t v15 = pthread_getspecific(*((void *)started + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Starting Newton Method ", 23);
    }
    unint64_t v16 = pthread_getspecific(*((void *)started + 74));
    if (v16)
    {
      if (*((unsigned char *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[2] - 24) + 16));
        uint64_t v17 = std::locale::use_facet((const std::locale *)&v278, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale((std::locale *)&v278);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7) {
          goto LABEL_300;
        }
      }
    }
  }
  uint64_t v18 = (int *)global_logger();
  if (v18[169] <= 4)
  {
    if (!cppipc::must_cancel((cppipc *)v18))
    {
      uint64_t v19 = (file_logger *)global_logger();
      unint64_t v20 = file_logger::start_stream(v19, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/newton_method-inl.hpp", "newton_method", 66, 1);
      int64_t v21 = pthread_getspecific(*((void *)v20 + 74));
      if (v21 && *((unsigned char *)v21 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)"--------------------------------------------------------", 56);
      }
      unint64_t v22 = pthread_getspecific(*((void *)v20 + 74));
      if (!v22) {
        goto LABEL_17;
      }
      if (!v22[280]) {
        goto LABEL_17;
      }
      std::ios_base::getloc((const std::ios_base *)&v22[*(void *)(*((void *)v22 + 2) - 24) + 16]);
      int v23 = std::locale::use_facet((const std::locale *)&v278, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale((std::locale *)&v278);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(v20);
      if (*((_DWORD *)v20 + 150) != 7) {
        goto LABEL_17;
      }
LABEL_300:
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      void *exception = "LOG_FATAL encountered";
      __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
    }
LABEL_296:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_17:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v261);
  std::string::basic_string[abi:ne180100]<0>(&v278, "");
  std::string::operator=(&v263, (const std::string *)&v278);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v262);
  if (SBYTE7(v279) < 0) {
    operator delete((void *)v278.tv_sec);
  }
  std::string::basic_string[abi:ne180100]<0>(&v291, "max_iterations");
  v278.__darwin_time_t tv_sec = (__darwin_time_t)&v291;
  unsigned int v24 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v291, (uint64_t)&std::piecewise_construct, &v278);
  unint64_t v245 = 0;
  switch(*((unsigned char *)v24 + 68))
  {
    case 0:
      uint64_t v25 = *((void *)v24 + 7);
      goto LABEL_37;
    case 1:
      uint64_t v25 = (uint64_t)*((double *)v24 + 7);
      goto LABEL_37;
    case 2:
      uint64_t v27 = *((void *)v24 + 7);
      size_t __idx = 0;
      uint64_t v28 = (char *)(v27 + 8);
      if (*(char *)(v27 + 31) < 0) {
        uint64_t v28 = *(char **)(v27 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(&v278, v28);
      unint64_t v245 = std::stoll((const std::string *)&v278, &__idx, 10);
      if (SBYTE7(v279) < 0) {
        operator delete((void *)v278.tv_sec);
      }
      if (*(char *)(v27 + 31) < 0) {
        uint64_t v29 = *(void *)(v27 + 16);
      }
      else {
        uint64_t v29 = *(unsigned __int8 *)(v27 + 31);
      }
      if (__idx != v29)
      {
        uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v50 = std::string::append(&v270, " cannot be interpreted as an integer");
        timeval v51 = *(timeval *)&v50->__r_.__value_.__l.__data_;
        *(void *)&long long v279 = *((void *)&v50->__r_.__value_.__l + 2);
        timeval v278 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v49, (const std::string *)&v278);
        __cxa_throw(v49, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_44;
    case 3:
      uint64_t v26 = *((void *)v24 + 7);
      *(void *)&long long v279 = 0;
      *(void *)&v278.__darwin_suseconds_t tv_usec = 0;
      v278.__darwin_time_t tv_sec = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v278, *(const void **)(v26 + 8), *(void *)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v278.tv_sec)
      {
        *(void *)&v278.__darwin_suseconds_t tv_usec = v278.tv_sec;
        operator delete((void *)v278.tv_sec);
      }
      goto LABEL_43;
    case 4:
      uint64_t v30 = *((void *)v24 + 7);
      *(void *)&long long v279 = 0;
      *(void *)&v278.__darwin_suseconds_t tv_usec = 0;
      v278.__darwin_time_t tv_sec = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v278, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(void *)(v30 + 16) - *(void *)(v30 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v270.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v270);
      goto LABEL_43;
    case 5:
      uint64_t v31 = *((void *)v24 + 7);
      *(void *)&long long v279 = 0;
      *(void *)&v278.__darwin_suseconds_t tv_usec = 0;
      v278.__darwin_time_t tv_sec = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v278, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v270.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v270);
      goto LABEL_43;
    case 6:
      uint64_t v25 = (uint64_t)(*((void *)v24 + 7) << 8) >> 8;
LABEL_37:
      unint64_t v245 = v25;
      goto LABEL_44;
    case 7:
      goto LABEL_44;
    case 8:
      uint64_t v32 = *((void *)v24 + 7);
      uint64_t v33 = *(void *)(v32 + 16);
      v278.__darwin_time_t tv_sec = *(void *)(v32 + 8);
      *(void *)&v278.__darwin_suseconds_t tv_usec = v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 + 8), 1u, memory_order_relaxed);
      }
      long long v34 = *(_OWORD *)(v32 + 24);
      long long v35 = *(_OWORD *)(v32 + 56);
      long long v280 = *(_OWORD *)(v32 + 40);
      long long v281 = v35;
      long long v279 = v34;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&v278.tv_usec);
      goto LABEL_43;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v278, *((void *)v24 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v280 + 1))
      {
        *(void *)&long long v281 = *((void *)&v280 + 1);
        operator delete(*((void **)&v280 + 1));
      }
      if ((void)v279)
      {
        *((void *)&v279 + 1) = v279;
        operator delete((void *)v279);
      }
      if (*(void *)&v278.tv_usec) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v278.tv_usec);
      }
LABEL_43:
      unint64_t v245 = 0;
LABEL_44:
      if (SHIBYTE(v292) < 0) {
        operator delete((void *)v291.tv_sec);
      }
      break;
    default:
LABEL_303:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  std::string::basic_string[abi:ne180100]<0>(&v291, "convergence_threshold");
  v278.__darwin_time_t tv_sec = (__darwin_time_t)&v291;
  uint64_t v36 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v291, (uint64_t)&std::piecewise_construct, &v278);
  double v37 = 0.0;
  switch(*((unsigned char *)v36 + 68))
  {
    case 0:
      double v37 = (double)*((uint64_t *)v36 + 7);
      goto LABEL_75;
    case 1:
      double v37 = *((double *)v36 + 7);
      goto LABEL_75;
    case 2:
      uint64_t v39 = *((void *)v36 + 7);
      size_t __idx = 0;
      double v40 = (char *)(v39 + 8);
      if (*(char *)(v39 + 31) < 0) {
        double v40 = *(char **)(v39 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(&v278, v40);
      double v41 = std::stod((const std::string *)&v278, &__idx);
      if (SBYTE7(v279) < 0) {
        operator delete((void *)v278.tv_sec);
      }
      if (*(char *)(v39 + 31) < 0) {
        uint64_t v42 = *(void *)(v39 + 16);
      }
      else {
        uint64_t v42 = *(unsigned __int8 *)(v39 + 31);
      }
      if (__idx != v42)
      {
        v241 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v242 = std::string::append(&v270, " cannot be interpreted as a float");
        timeval v243 = *(timeval *)&v242->__r_.__value_.__l.__data_;
        *(void *)&long long v279 = *((void *)&v242->__r_.__value_.__l + 2);
        timeval v278 = v243;
        v242->__r_.__value_.__l.__size_ = 0;
        v242->__r_.__value_.__r.__words[2] = 0;
        v242->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v241, (const std::string *)&v278);
        __cxa_throw(v241, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v52 = v41;
      double v37 = v52;
      goto LABEL_75;
    case 3:
      uint64_t v38 = *((void *)v36 + 7);
      *(void *)&long long v279 = 0;
      *(void *)&v278.__darwin_suseconds_t tv_usec = 0;
      v278.__darwin_time_t tv_sec = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v278, *(const void **)(v38 + 8), *(void *)(v38 + 16), (uint64_t)(*(void *)(v38 + 16) - *(void *)(v38 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v278.tv_sec)
      {
        *(void *)&v278.__darwin_suseconds_t tv_usec = v278.tv_sec;
        operator delete((void *)v278.tv_sec);
      }
      goto LABEL_75;
    case 4:
      uint64_t v43 = *((void *)v36 + 7);
      *(void *)&long long v279 = 0;
      *(void *)&v278.__darwin_suseconds_t tv_usec = 0;
      v278.__darwin_time_t tv_sec = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v278, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(void *)(v43 + 16) - *(void *)(v43 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v270.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v270);
      goto LABEL_75;
    case 5:
      uint64_t v44 = *((void *)v36 + 7);
      *(void *)&long long v279 = 0;
      *(void *)&v278.__darwin_suseconds_t tv_usec = 0;
      v278.__darwin_time_t tv_sec = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v278, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(void *)(v44 + 16) - *(void *)(v44 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v270.__r_.__value_.__r.__words[0] = (std::string::size_type)&v278;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v270);
      goto LABEL_75;
    case 6:
      double v37 = (double)*((int *)v36 + 16) / 1000000.0 + (double)((uint64_t)(*((void *)v36 + 7) << 8) >> 8);
      goto LABEL_75;
    case 7:
      goto LABEL_75;
    case 8:
      uint64_t v45 = *((void *)v36 + 7);
      uint64_t v46 = *(void *)(v45 + 16);
      v278.__darwin_time_t tv_sec = *(void *)(v45 + 8);
      *(void *)&v278.__darwin_suseconds_t tv_usec = v46;
      if (v46) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v46 + 8), 1u, memory_order_relaxed);
      }
      long long v47 = *(_OWORD *)(v45 + 24);
      long long v48 = *(_OWORD *)(v45 + 56);
      long long v280 = *(_OWORD *)(v45 + 40);
      long long v281 = v48;
      long long v279 = v47;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&v278.tv_usec);
      goto LABEL_75;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v278, *((void *)v36 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v280 + 1))
      {
        *(void *)&long long v281 = *((void *)&v280 + 1);
        operator delete(*((void **)&v280 + 1));
      }
      if ((void)v279)
      {
        *((void *)&v279 + 1) = v279;
        operator delete((void *)v279);
      }
      if (*(void *)&v278.tv_usec) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v278.tv_usec);
      }
LABEL_75:
      if (SHIBYTE(v292) < 0) {
        operator delete((void *)v291.tv_sec);
      }
      std::string::basic_string[abi:ne180100]<0>(&v270, "Iteration");
      std::string::basic_string[abi:ne180100]<0>(&v271, "Passes");
      std::string::basic_string[abi:ne180100]<0>(&v272, "Elapsed Time");
      v275 = 0;
      size_t __idx = 0;
      v276[0] = 0;
      p_idx = &__idx;
      LOBYTE(v253) = 0;
      size_t __idx = (size_t)operator new(0x48uLL);
      v275 = (__darwin_time_t *)__idx;
      v276[0] = __idx + 72;
      v275 = (__darwin_time_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v276, (long long *)&v270, v273, (std::string *)__idx);
      (*(void (**)(timeval *__return_ptr, uint64_t, size_t *))(*(void *)a1 + 64))(&v291, a1, &__idx);
      turi::table_printer::table_printer(&v278, &v291, 1);
      double v53 = (double)(tv_usec - v11) / 1000000.0 + (double)(tv_sec - v9);
      p_idx = &v291;
      std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_idx);
      p_idx = &__idx;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_idx);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v272.__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(*(void **)((char *)&v272.__r_.__value_.__l.__data_ + i * 8));
        }
      }
      turi::table_printer::print_header((turi::table_printer *)&v278);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v259, a2);
      uint64_t v55 = v260;
      v257 = 0;
      uint64_t v258 = 0;
      if (!v260)
      {
        v255 = 0;
        unint64_t v256 = 0;
        p_idx = 0;
        uint64_t v253 = 0;
        uint64_t v254 = 0;
        goto LABEL_92;
      }
      if (v260 >> 61 || (char v56 = malloc_type_malloc(8 * v260, 0x1E76AA36uLL)) == 0)
      {
        v229 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v230 = std::bad_alloc::bad_alloc(v229);
        __cxa_throw(v230, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      unint64_t v57 = v260;
      v257 = v56;
      uint64_t v258 = v55;
      v255 = 0;
      unint64_t v256 = 0;
      if (!v260)
      {
        p_idx = 0;
        uint64_t v253 = 0;
        uint64_t v254 = 0;
LABEL_91:
        if (0x7FFFFFFFFFFFFFFFLL / v55 < v55)
        {
          v235 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v236 = std::bad_alloc::bad_alloc(v235);
          __cxa_throw(v236, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        goto LABEL_92;
      }
      if (v260 >> 61 || (double v58 = malloc_type_malloc(8 * v260, 0x1E76AA36uLL)) == 0)
      {
        v233 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v234 = std::bad_alloc::bad_alloc(v233);
        __cxa_throw(v234, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      uint64_t v55 = v258;
      v255 = v58;
      unint64_t v256 = v57;
      p_idx = 0;
      uint64_t v253 = 0;
      uint64_t v254 = 0;
      if (v258) {
        goto LABEL_91;
      }
LABEL_92:
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&p_idx, v55 * v55, v55, v55);
      uint64_t v59 = v258;
      v250 = 0;
      uint64_t v251 = 0;
      if (v258)
      {
        if ((unint64_t)v258 >> 61 || (uint64_t v60 = malloc_type_malloc(8 * v258, 0x1E76AA36uLL)) == 0)
        {
          v231 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v232 = std::bad_alloc::bad_alloc(v231);
          __cxa_throw(v232, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        v250 = v60;
      }
      uint64_t v251 = v59;
      double v249 = 0.0;
      (*(void (**)(uint64_t, void **, void **, void **, double *))(*(void *)a1 + 80))(a1, &v259, &p_idx, &v257, &v249);
      ++*(_DWORD *)(a5 + 96);
      if (*a4)
      {
        (*(void (**)(void, void **, void **))(*(void *)*a4 + 24))(*a4, &v259, &v255);
        uint64_t v61 = (char *)v255;
        uint64_t v62 = (char *)v257;
        uint64_t v63 = v258;
        if (v258 >= 0) {
          uint64_t v64 = v258;
        }
        else {
          uint64_t v64 = v258 + 1;
        }
        int64_t v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
        if (v258 >= 2)
        {
          int64_t v66 = 0;
          int64_t v67 = (float64x2_t *)v257;
          uint64_t v68 = (float64x2_t *)v255;
          do
          {
            float64x2_t v69 = *v68++;
            *int64_t v67 = vaddq_f64(v69, *v67);
            ++v67;
            v66 += 2;
          }
          while (v66 < v65);
        }
        BOOL v70 = v63 <= v65;
        uint64_t v71 = v63 - v65;
        if (!v70)
        {
          uint64_t v72 = v64 >> 1;
          int64_t v73 = (double *)&v61[16 * v72];
          v74 = (double *)&v62[16 * v72];
          do
          {
            double v75 = *v73++;
            double *v74 = v75 + *v74;
            ++v74;
            --v71;
          }
          while (v71);
        }
      }
      double v76 = turi::optimization::compute_residual(&v257);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v247, (uint64_t)&v259);
      BOOL v77 = (char *)v247;
      uint64_t v78 = v248;
      if (v248 >= 0) {
        uint64_t v79 = v248;
      }
      else {
        uint64_t v79 = v248 + 1;
      }
      int64_t v80 = v79 & 0xFFFFFFFFFFFFFFFELL;
      if (v248 >= 2)
      {
        unint64_t v81 = 2;
        if (v80 > 2) {
          unint64_t v81 = v79 & 0xFFFFFFFFFFFFFFFELL;
        }
        bzero(v247, ((8 * v81 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if (v80 < v78) {
        bzero(&v77[16 * (v79 >> 1)], 8 * v78 - 16 * (v79 >> 1));
      }
      if (fabs(v76) == INFINITY) {
        *(_DWORD *)(a5 + 100) = 7;
      }
      unint64_t v82 = 0;
      uint64_t v83 = (void *)(a5 + 16);
      if (v76 < v37 || !v245) {
        goto LABEL_226;
      }
      unint64_t v82 = 0;
      while (1)
      {
        if (*a4)
        {
          (*(void (**)(void, void **, void **))(*(void *)*a4 + 40))(*a4, &v259, &v250);
          uint64_t v84 = v254;
          if (v254 >= v253) {
            uint64_t v84 = v253;
          }
          if (v84 >= 1)
          {
            double v85 = (double *)v250;
            v86 = (double *)p_idx;
            uint64_t v87 = 8 * v253 + 8;
            do
            {
              double v88 = *v85++;
              double *v86 = v88 + *v86;
              v86 = (double *)((char *)v86 + v87);
              --v84;
            }
            while (v84);
          }
        }
        Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>>((uint64_t)&v270, (uint64_t)&p_idx);
        v275 = (__darwin_time_t *)v270.__r_.__value_.__r.__words[2];
        v276[1] = 0xBFF0000000000000;
        v277[0] = &v270;
        v277[1] = &v257;
        *(void *)&v291.__darwin_suseconds_t tv_usec = 0xBFF0000000000000;
        Eigen::internal::evaluator<Eigen::Solve<Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>,Eigen::Matrix<double,-1,1,0,-1,1>>>::evaluator(v293, (uint64_t)v277);
        uint64_t v89 = *(void *)(v277[0] + 16);
        if (v248 != v89)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v247, v89, 1);
          uint64_t v89 = v248;
        }
        float64x2_t v90 = (char *)v247;
        if (v89 >= 0) {
          uint64_t v91 = v89;
        }
        else {
          uint64_t v91 = v89 + 1;
        }
        int64_t v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
        if (v89 >= 2)
        {
          uint64_t v93 = 0;
          int64_t v94 = 0;
          do
          {
            *(float64x2_t *)&v90[v93] = vmulq_n_f64(*(float64x2_t *)(v293[0] + v93), *(double *)&v291.tv_usec);
            v94 += 2;
            v93 += 16;
          }
          while (v94 < v92);
        }
        BOOL v95 = __OFSUB__(v89, v92);
        uint64_t v96 = v89 - v92;
        if (!((v96 < 0) ^ v95 | (v96 == 0)))
        {
          uint64_t v97 = v91 >> 1;
          v98 = (double *)(v293[0] + 16 * (v91 >> 1));
          v99 = (double *)&v90[16 * v97];
          do
          {
            double v100 = *v98++;
            *v99++ = *(double *)&v291.tv_usec * v100;
            --v96;
          }
          while (v96);
        }
        free((void *)v293[2]);
        free(v272.__r_.__value_.__l.__data_);
        free((void *)v271.__r_.__value_.__l.__size_);
        free(v270.__r_.__value_.__l.__data_);
        *(void *)&v291.__darwin_suseconds_t tv_usec = &p_idx;
        v292 = &v247;
        v293[0] = &v257;
        if (v258)
        {
          Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,7,Eigen::DenseShape,Eigen::DenseShape,double,double>::product_evaluator(&v270.__r_.__value_.__r.__words[2], (uint64_t **)&v291.tv_usec);
          v272.__r_.__value_.__r.__words[0] = *(void *)v293[0];
          v272.__r_.__value_.__r.__words[2] = (std::string::size_type)&v291;
          double v101 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run((uint64_t)&v270);
          free((void *)v271.__r_.__value_.__l.__size_);
          v291.__darwin_time_t tv_sec = (__darwin_time_t)&v257;
          double v102 = sqrt(v101);
          if (v258)
          {
            v270.__r_.__value_.__l.__size_ = (std::string::size_type)v257;
            v271.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291;
            double v103 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v270);
            goto LABEL_142;
          }
        }
        else
        {
          double v102 = 0.0;
        }
        double v103 = 0.0;
LABEL_142:
        double v104 = sqrt(v103);
        if (v104 < 1.0e-10) {
          double v104 = 1.0e-10;
        }
        if (v102 / v104 > v37) {
          break;
        }
        long long v106 = (float64x2_t *)v247;
        uint64_t v105 = v248;
        double v107 = (float64x2_t *)v259;
        if (v260 == v248)
        {
          v108 = (float64x2_t *)v259;
        }
        else
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v259, v248, 1);
          v108 = (float64x2_t *)v259;
          uint64_t v105 = v260;
        }
        if (v105 >= 0) {
          uint64_t v109 = v105;
        }
        else {
          uint64_t v109 = v105 + 1;
        }
        int64_t v110 = v109 & 0xFFFFFFFFFFFFFFFELL;
        if (v105 >= 2)
        {
          int64_t v111 = 0;
          uint64_t v112 = v108;
          v113 = v107;
          uint64_t v114 = v106;
          do
          {
            float64x2_t v115 = *v113++;
            float64x2_t v116 = v115;
            float64x2_t v117 = *v114++;
            *v112++ = vaddq_f64(v116, v117);
            v111 += 2;
          }
          while (v111 < v110);
        }
        BOOL v95 = __OFSUB__(v105, v110);
        uint64_t v118 = v105 - v110;
        if (!((v118 < 0) ^ v95 | (v118 == 0)))
        {
          uint64_t v119 = v109 >> 1;
          f64 = v106[v109 >> 1].f64;
          v121 = v107[v119].f64;
          char v122 = v108[v119].f64;
          do
          {
            double v123 = *v121++;
            double v124 = v123;
            double v125 = *f64++;
            *v122++ = v124 + v125;
            --v118;
          }
          while (v118);
        }
        uint64_t v126 = v248;
        if (v248 >= 1)
        {
          long long v127 = v247;
          while ((*v127 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            ++v127;
            if (!--v126) {
              goto LABEL_161;
            }
          }
          int v167 = 7;
          goto LABEL_225;
        }
LABEL_161:
        (*(void (**)(uint64_t, void **, void **, void **, double *))(*(void *)a1 + 80))(a1, &v259, &p_idx, &v257, &v249);
        if (*a4)
        {
          (*(void (**)(void, void **, void **))(*(void *)*a4 + 24))(*a4, &v259, &v255);
          uint64_t v128 = (char *)v255;
          v129 = (char *)v257;
          uint64_t v130 = v258;
          if (v258 >= 0) {
            uint64_t v131 = v258;
          }
          else {
            uint64_t v131 = v258 + 1;
          }
          int64_t v132 = v131 & 0xFFFFFFFFFFFFFFFELL;
          if (v258 >= 2)
          {
            int64_t v133 = 0;
            v134 = (float64x2_t *)v257;
            v135 = (float64x2_t *)v255;
            do
            {
              float64x2_t v136 = *v135++;
              float64x2_t *v134 = vaddq_f64(v136, *v134);
              ++v134;
              v133 += 2;
            }
            while (v133 < v132);
          }
          BOOL v70 = v130 <= v132;
          uint64_t v137 = v130 - v132;
          if (!v70)
          {
            uint64_t v138 = v131 >> 1;
            v139 = (double *)&v128[16 * v138];
            v140 = (double *)&v129[16 * v138];
            do
            {
              double v141 = *v139++;
              double *v140 = v141 + *v140;
              ++v140;
              --v137;
            }
            while (v137);
          }
        }
        double v76 = turi::optimization::compute_residual(&v257);
        ++*(_DWORD *)(a5 + 96);
        v142 = (int *)global_logger();
        ++v82;
        if (v142[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v142)) {
            goto LABEL_299;
          }
          v143 = (file_logger *)global_logger();
          v144 = file_logger::start_stream(v143, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/newton_method-inl.hpp", "newton_method", 157, 1);
          v145 = pthread_getspecific(*((void *)v144 + 74));
          if (v145 && *((unsigned char *)v145 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145 + 2, (uint64_t)"Iters  (", 8);
          }
          uint64_t v146 = file_logger::operator<<<unsigned long>((uint64_t)v144);
          v147 = pthread_getspecific(*(void *)(v146 + 592));
          if (v147 && *((unsigned char *)v147 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147 + 2, (uint64_t)") ", 2);
          }
          v148 = pthread_getspecific(*(void *)(v146 + 592));
          if (v148 && *((unsigned char *)v148 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148 + 2, (uint64_t)"Passes (", 8);
          }
          uint64_t v149 = file_logger::operator<<<int>(v146);
          v150 = pthread_getspecific(*(void *)(v149 + 592));
          if (v150 && *((unsigned char *)v150 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150 + 2, (uint64_t)") ", 2);
          }
          v151 = pthread_getspecific(*(void *)(v149 + 592));
          if (v151 && *((unsigned char *)v151 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151 + 2, (uint64_t)"Residual (", 10);
          }
          uint64_t v152 = file_logger::operator<<<double>(v149);
          v153 = pthread_getspecific(*(void *)(v152 + 592));
          if (v153 && *((unsigned char *)v153 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153 + 2, (uint64_t)") ", 2);
          }
          v154 = pthread_getspecific(*(void *)(v152 + 592));
          if (v154 && *((unsigned char *)v154 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154 + 2, (uint64_t)"Loss (", 6);
          }
          uint64_t v155 = file_logger::operator<<<double>(v152);
          v156 = pthread_getspecific(*(void *)(v155 + 592));
          if (v156 && *((unsigned char *)v156 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156 + 2, (uint64_t)") ", 2);
          }
          v157 = pthread_getspecific(*(void *)(v155 + 592));
          if (v157)
          {
            if (*((unsigned char *)v157 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v157 + *(void *)(v157[2] - 24) + 16));
              v158 = std::locale::use_facet((const std::locale *)&v270, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v158->__vftable[2].~facet_0)(v158, 10);
              std::locale::~locale((std::locale *)&v270);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v155);
              if (*(_DWORD *)(v155 + 600) == 7) {
                goto LABEL_302;
              }
            }
          }
        }
        if (fabs(v249) == INFINITY) {
          goto LABEL_292;
        }
        std::to_string(&v270, v82);
        std::to_string(&v271, *(_DWORD *)(a5 + 96));
        gettimeofday(&v291, 0);
        std::to_string(&v272, (double)(v291.tv_usec - v265.tv_usec) / 1000000.0 + (double)(v291.tv_sec - v265.tv_sec));
        v275 = 0;
        size_t __idx = 0;
        v276[0] = 0;
        v268 = &__idx;
        char v269 = 0;
        size_t __idx = (size_t)operator new(0x48uLL);
        v275 = (__darwin_time_t *)__idx;
        v276[0] = __idx + 72;
        v275 = (__darwin_time_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v276, (long long *)&v270, v273, (std::string *)__idx);
        (*(void (**)(timeval *__return_ptr, uint64_t, void **, size_t *))(*(void *)a1 + 72))(&v291, a1, &v259, &__idx);
        v268 = &__idx;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        unint64_t v267 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v291.tv_usec - v291.tv_sec) >> 3);
        __darwin_time_t v266 = (*(void *)&v278.tv_usec - v278.tv_sec) >> 5;
        if (v267 != v266)
        {
          size_t __idx = (size_t)&v267;
          v275 = &v266;
          turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
        }
        unint64_t add = atomic_fetch_add(v282, 1uLL);
        BOOL v160 = turi::table_printer::register_tick((turi::table_printer *)&v278, v82, add + 1);
        BOOL v161 = v160;
        if (v160)
        {
          pthread_mutex_lock(v283);
          turi::table_printer::print_row<std::string>(&v278, &v291);
          pthread_mutex_unlock(v283);
        }
        if (v290 && !(add % v290))
        {
          pthread_mutex_lock(v284);
          __darwin_time_t v162 = v291.tv_sec;
          uint64_t v163 = *(void *)&v291.tv_usec;
          if (!v285)
          {
            std::vector<turi::flexible_type>::resize(v287, 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v291.tv_usec - v291.tv_sec) >> 3));
            __darwin_time_t v162 = v291.tv_sec;
            uint64_t v163 = *(void *)&v291.tv_usec;
            unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v291.tv_usec - v291.tv_sec) >> 3);
            if (v164 <= v289 - v288)
            {
              if (v164 < v289 - v288) {
                uint64_t v289 = v288 - 0x5555555555555555 * ((*(void *)&v291.tv_usec - v291.tv_sec) >> 3);
              }
            }
            else
            {
              std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)&v288, v164 - (v289 - v288));
              __darwin_time_t v162 = v291.tv_sec;
              uint64_t v163 = *(void *)&v291.tv_usec;
            }
          }
          if (v163 != v162) {
            turi::flexible_type::operator=<std::string>(v287[0]);
          }
          turi::table_printer::track_progress_row((uint64_t)&v278, v287);
          uint64_t v83 = (void *)(a5 + 16);
          BOOL v286 = v161;
          pthread_mutex_unlock(v284);
        }
        size_t __idx = (size_t)&v291;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
        for (uint64_t j = 0; j != -9; j -= 3)
        {
          if (SHIBYTE(v272.__r_.__value_.__r.__words[j + 2]) < 0) {
            operator delete(*(void **)((char *)&v272.__r_.__value_.__l.__data_ + j * 8));
          }
        }
        if (v76 < v37 || v82 >= v245) {
          goto LABEL_226;
        }
      }
      v220 = (int *)global_logger();
      if (v220[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v220)) {
LABEL_299:
        }
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v221 = (file_logger *)global_logger();
        v222 = file_logger::start_stream(v221, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/newton_method-inl.hpp", "newton_method", 129, 1);
        v223 = pthread_getspecific(*((void *)v222 + 74));
        if (v223 && *((unsigned char *)v223 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223 + 2, (uint64_t)"WARNING: Matrix is close to being singular or", 45);
        }
        v224 = pthread_getspecific(*((void *)v222 + 74));
        if (v224 && *((unsigned char *)v224 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224 + 2, (uint64_t)" badly scaled. The solution is accurate only up to a tolerance of ", 66);
        }
        uint64_t v225 = file_logger::operator<<<double>((uint64_t)v222);
        v226 = pthread_getspecific(*(void *)(v225 + 592));
        if (v226 && *((unsigned char *)v226 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226 + 2, (uint64_t)". This typically happens when regularization", 44);
        }
        v227 = pthread_getspecific(*(void *)(v225 + 592));
        if (v227 && *((unsigned char *)v227 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227 + 2, (uint64_t)" is not sufficient. Consider increasing regularization.", 55);
        }
        v228 = pthread_getspecific(*(void *)(v225 + 592));
        if (v228)
        {
          if (*((unsigned char *)v228 + 280))
          {
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v228 + 2);
            file_logger::stream_flush((file_logger *)v225);
            if (*(_DWORD *)(v225 + 600) == 7)
            {
LABEL_302:
              __print_back_trace();
              v240 = __cxa_allocate_exception(8uLL);
              void *v240 = "LOG_FATAL encountered";
              __cxa_throw(v240, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
      }
LABEL_292:
      int v167 = 6;
LABEL_225:
      *(_DWORD *)(a5 + 100) = v167;
LABEL_226:
      turi::table_printer::print_footer((turi::table_printer *)&v278);
      if (!*(_DWORD *)(a5 + 100))
      {
        if (v82 < v245) {
          int v168 = 2;
        }
        else {
          int v168 = 3;
        }
        *(_DWORD *)(a5 + 100) = v168;
      }
      *(_DWORD *)a5 = v82;
      double v169 = v249;
      *(double *)(a5 + 72) = v76;
      *(double *)(a5 + 80) = v169;
      gettimeofday((timeval *)&v270, 0);
      *(double *)(a5 + 8) = (double)(LODWORD(v270.__r_.__value_.__r.__words[1]) - v265.tv_usec) / 1000000.0
                          + (double)(uint64_t)(v270.__r_.__value_.__r.__words[0] - v265.tv_sec)
                          - v53;
      v171 = (long long *)v259;
      uint64_t v170 = v260;
      if (*(void *)(a5 + 24) != v260)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v83, v260, 1);
        uint64_t v170 = *(void *)(a5 + 24);
      }
      v172 = (_OWORD *)*v83;
      if (v170 >= 0) {
        uint64_t v173 = v170;
      }
      else {
        uint64_t v173 = v170 + 1;
      }
      int64_t v174 = v173 & 0xFFFFFFFFFFFFFFFELL;
      if (v170 >= 2)
      {
        int64_t v175 = 0;
        v176 = (_OWORD *)*v83;
        v177 = v171;
        do
        {
          long long v178 = *v177++;
          *v176++ = v178;
          v175 += 2;
        }
        while (v175 < v174);
      }
      BOOL v95 = __OFSUB__(v170, v174);
      uint64_t v179 = v170 - v174;
      if (!((v179 < 0) ^ v95 | (v179 == 0)))
      {
        uint64_t v180 = v173 >> 1;
        v181 = (uint64_t *)&v171[v173 >> 1];
        v182 = &v172[v180];
        do
        {
          uint64_t v183 = *v181++;
          *v182++ = v183;
          --v179;
        }
        while (v179);
      }
      v184 = (void *)(a5 + 32);
      v186 = (long long *)v257;
      uint64_t v185 = v258;
      if (*(void *)(a5 + 40) != v258)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a5 + 32), v258, 1);
        uint64_t v185 = *(void *)(a5 + 40);
      }
      v187 = (_OWORD *)*v184;
      if (v185 >= 0) {
        uint64_t v188 = v185;
      }
      else {
        uint64_t v188 = v185 + 1;
      }
      int64_t v189 = v188 & 0xFFFFFFFFFFFFFFFELL;
      if (v185 >= 2)
      {
        int64_t v190 = 0;
        v191 = (_OWORD *)*v184;
        v192 = v186;
        do
        {
          long long v193 = *v192++;
          *v191++ = v193;
          v190 += 2;
        }
        while (v190 < v189);
      }
      BOOL v95 = __OFSUB__(v185, v189);
      uint64_t v194 = v185 - v189;
      if (!((v194 < 0) ^ v95 | (v194 == 0)))
      {
        uint64_t v195 = v188 >> 1;
        v196 = (uint64_t *)&v186[v188 >> 1];
        v197 = &v187[v195];
        do
        {
          uint64_t v198 = *v196++;
          *v197++ = v198;
          --v194;
        }
        while (v194);
      }
      v199 = (void *)(a5 + 48);
      v201 = (long long *)p_idx;
      uint64_t v200 = v253;
      uint64_t v202 = v254;
      if (*(void *)(a5 + 56) != v253 || *(void *)(a5 + 64) != v254)
      {
        if (v253) {
          BOOL v204 = v254 == 0;
        }
        else {
          BOOL v204 = 1;
        }
        if (!v204 && 0x7FFFFFFFFFFFFFFFLL / v254 < v253)
        {
          v238 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v239 = std::bad_alloc::bad_alloc(v238);
          __cxa_throw(v239, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)(a5 + 48), v254 * v253, v253, v254);
        uint64_t v200 = *(void *)(a5 + 56);
        uint64_t v202 = *(void *)(a5 + 64);
      }
      v205 = (_OWORD *)*v199;
      uint64_t v206 = v200 * v202;
      if (v200 * v202 >= 0) {
        uint64_t v207 = v200 * v202;
      }
      else {
        uint64_t v207 = v206 + 1;
      }
      int64_t v208 = v207 & 0xFFFFFFFFFFFFFFFELL;
      if (v206 >= 2)
      {
        int64_t v209 = 0;
        v210 = (_OWORD *)*v199;
        v211 = v201;
        do
        {
          long long v212 = *v211++;
          *v210++ = v212;
          v209 += 2;
        }
        while (v209 < v208);
      }
      BOOL v70 = v206 <= v208;
      uint64_t v213 = v206 - v208;
      if (!v70)
      {
        uint64_t v214 = v207 >> 1;
        v215 = (uint64_t *)&v201[v207 >> 1];
        v216 = &v205[v214];
        do
        {
          uint64_t v217 = *v215++;
          *v216++ = v217;
          --v213;
        }
        while (v213);
      }
      turi::table_printer::get_tracked_table((turi::table_printer *)&v278, (turi::sframe *)&v270);
      turi::sframe::operator=(a5 + 104, (uint64_t)&v270);
      turi::sframe::~sframe((turi::sframe *)&v270);
      turi::optimization::log_solver_summary_stats((turi::optimization *)a5, 0);
      free(v247);
      free(v250);
      free(p_idx);
      free(v255);
      free(v257);
      free(v259);
      turi::table_printer::~table_printer((turi::table_printer *)&v278);
      v261[0] = *MEMORY[0x263F8C2B8];
      uint64_t v218 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v261 + *(void *)(v261[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      v261[2] = v218;
      v262[0] = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v263.__r_.__value_.__l.__data_);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return MEMORY[0x22A614E30](&v264);
    default:
      goto LABEL_303;
  }
}

void sub_22448AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pthread_mutex_t *a11, uint64_t a12, uint64_t a13, pthread_mutex_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *a36,uint64_t a37,void *a38,uint64_t a39,char a40)
{
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (SLOBYTE(STACK[0x257]) < 0)
  {
    operator delete((void *)STACK[0x240]);
    if ((v42 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v43 - 185) < 0) {
        operator delete(*(void **)(v43 - 208));
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a40);
      turi::optimization::_solver_return::~_solver_return(v40);
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v41);
  goto LABEL_8;
}

uint64_t turi::optimization::accelerated_gradient<Eigen::Matrix<double,-1,1,0,-1,1>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v332 = *MEMORY[0x263EF8340];
  gettimeofday(&v313, 0);
  gettimeofday((timeval *)v322, 0);
  std::string::size_type v9 = v322[0].__r_.__value_.__r.__words[0];
  __darwin_time_t tv_sec = v313.tv_sec;
  int v11 = v322[0].__r_.__value_.__r.__words[1];
  __darwin_suseconds_t tv_usec = v313.tv_usec;
  uint64_t v12 = (int *)global_logger();
  if (v12[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v12)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/accelerated_gradient-inl.hpp", "accelerated_gradient", 71, 1);
    uint64_t v15 = pthread_getspecific(*((void *)started + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Starting Accelerated Gradient (FISTA)", 37);
    }
    unint64_t v16 = pthread_getspecific(*((void *)started + 74));
    if (v16)
    {
      if (*((unsigned char *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[2] - 24) + 16));
        uint64_t v17 = std::locale::use_facet((const std::locale *)v322, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale((std::locale *)v322);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7) {
          goto LABEL_329;
        }
      }
    }
  }
  uint64_t v18 = (int *)global_logger();
  if (v18[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v18)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v19 = (file_logger *)global_logger();
    unint64_t v20 = file_logger::start_stream(v19, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/accelerated_gradient-inl.hpp", "accelerated_gradient", 72, 1);
    int64_t v21 = pthread_getspecific(*((void *)v20 + 74));
    if (v21 && *((unsigned char *)v21 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)"--------------------------------------------------------", 56);
    }
    unint64_t v22 = pthread_getspecific(*((void *)v20 + 74));
    if (v22)
    {
      if (*((unsigned char *)v22 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(v22[2] - 24) + 16));
        int v23 = std::locale::use_facet((const std::locale *)v322, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale((std::locale *)v322);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v20);
        if (*((_DWORD *)v20 + 150) == 7)
        {
LABEL_329:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v309);
  std::string::basic_string[abi:ne180100]<0>(v322, "");
  std::string::operator=(&v311, v322);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v310);
  if (SHIBYTE(v322[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v322[0].__r_.__value_.__l.__data_);
  }
  unsigned int v24 = (int *)global_logger();
  if (v24[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v24)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v25 = (file_logger *)global_logger();
    uint64_t v26 = file_logger::start_stream(v25, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/accelerated_gradient-inl.hpp", "accelerated_gradient", 77, 1);
    uint64_t v27 = pthread_getspecific(*((void *)v26 + 74));
    if (v27 && *((unsigned char *)v27 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)"Tuning step size. First iteration could take longer", 51);
    }
    uint64_t v28 = pthread_getspecific(*((void *)v26 + 74));
    if (v28 && *((unsigned char *)v28 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)" than subsequent iterations.", 28);
    }
    uint64_t v29 = pthread_getspecific(*((void *)v26 + 74));
    if (v29)
    {
      if (*((unsigned char *)v29 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(v29[2] - 24) + 16));
        uint64_t v30 = std::locale::use_facet((const std::locale *)v322, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale((std::locale *)v322);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
        {
          __print_back_trace();
          timeval v278 = __cxa_allocate_exception(8uLL);
          *timeval v278 = "LOG_FATAL encountered";
          __cxa_throw(v278, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Iteration");
  std::string::basic_string[abi:ne180100]<0>(&v317[1], "Passes");
  std::string::basic_string[abi:ne180100]<0>(&v319, "Step size");
  std::string::basic_string[abi:ne180100]<0>(v320, "Elapsed Time");
  memset(&v308, 0, sizeof(v308));
  __idx.__begin_ = (std::vector<std::string>::pointer)&v308;
  LOBYTE(__idx.__end_) = 0;
  v308.__begin_ = (std::vector<std::string>::pointer)operator new(0x60uLL);
  v308.__end_ = v308.__begin_;
  v308.__end_cap_.__value_ = v308.__begin_ + 4;
  v308.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v308.__end_cap_, (long long *)__p, v321, v308.__begin_);
  (*(void (**)(std::string *__return_ptr, uint64_t, std::vector<std::string> *))(*(void *)a1 + 64))(&v315, a1, &v308);
  turi::table_printer::table_printer(v322, &v315, 1);
  double v31 = (double)(v11 - tv_usec) / 1000000.0 + (double)(uint64_t)(v9 - tv_sec);
  __idx.__begin_ = &v315;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
  __idx.__begin_ = (std::vector<std::string>::pointer)&v308;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
  for (unint64_t i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 3)
  {
    if (SHIBYTE(v320[0].__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(v320[i / 3].__r_.__value_.__l.__data_);
    }
  }
  turi::table_printer::print_header((turi::table_printer *)v322);
  std::string::basic_string[abi:ne180100]<0>(&v308, "max_iterations");
  __p[0] = &v308;
  uint64_t v33 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v308.__begin_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  unint64_t v290 = 0;
  switch(*((unsigned char *)v33 + 68))
  {
    case 0:
      uint64_t v34 = *((void *)v33 + 7);
      goto LABEL_52;
    case 1:
      uint64_t v34 = (uint64_t)*((double *)v33 + 7);
      goto LABEL_52;
    case 2:
      uint64_t v36 = *((void *)v33 + 7);
      __idx.__begin_ = 0;
      double v37 = (char *)(v36 + 8);
      if (*(char *)(v36 + 31) < 0) {
        double v37 = *(char **)(v36 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v37);
      unint64_t v290 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
      if (SHIBYTE(v317[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v36 + 31) < 0) {
        std::vector<std::string>::pointer v38 = *(std::vector<std::string>::pointer *)(v36 + 16);
      }
      else {
        std::vector<std::string>::pointer v38 = (std::vector<std::string>::pointer)*(unsigned __int8 *)(v36 + 31);
      }
      if (__idx.__begin_ != v38)
      {
        double v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v59 = std::string::append(&v315, " cannot be interpreted as an integer");
        long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v317[0] = (void *)v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long __p = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v58, (const std::string *)__p);
        __cxa_throw(v58, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_59;
    case 3:
      uint64_t v35 = *((void *)v33 + 7);
      v317[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v35 + 8), *(void *)(v35 + 16), (uint64_t)(*(void *)(v35 + 16) - *(void *)(v35 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_58;
    case 4:
      uint64_t v39 = *((void *)v33 + 7);
      v317[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(void *)(v39 + 16) - *(void *)(v39 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v315.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
      goto LABEL_58;
    case 5:
      uint64_t v40 = *((void *)v33 + 7);
      v317[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v40 + 8), *(uint64_t **)(v40 + 16), (uint64_t)(*(void *)(v40 + 16) - *(void *)(v40 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v315.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
      goto LABEL_58;
    case 6:
      uint64_t v34 = (uint64_t)(*((void *)v33 + 7) << 8) >> 8;
LABEL_52:
      unint64_t v290 = v34;
      goto LABEL_59;
    case 7:
      goto LABEL_59;
    case 8:
      uint64_t v41 = *((void *)v33 + 7);
      int v42 = *(atomic_uint **)(v41 + 16);
      __p[0] = *(void **)(v41 + 8);
      __p[1] = v42;
      if (v42) {
        atomic_fetch_add_explicit(v42 + 2, 1u, memory_order_relaxed);
      }
      long long v43 = *(_OWORD *)(v41 + 24);
      long long v44 = *(_OWORD *)(v41 + 56);
      long long v318 = *(_OWORD *)(v41 + 40);
      *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v44;
      *(_OWORD *)v317 = v43;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_58;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v33 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v318 + 1))
      {
        v319.__r_.__value_.__r.__words[0] = *((void *)&v318 + 1);
        operator delete(*((void **)&v318 + 1));
      }
      if (v317[0])
      {
        v317[1] = v317[0];
        operator delete(v317[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_58:
      unint64_t v290 = 0;
LABEL_59:
      if (SHIBYTE(v308.__end_cap_.__value_) < 0) {
        operator delete(v308.__begin_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v308, "convergence_threshold");
      __p[0] = &v308;
      uint64_t v45 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v308.__begin_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      double v46 = 0.0;
      switch(*((unsigned char *)v45 + 68))
      {
        case 0:
          double v46 = (double)*((uint64_t *)v45 + 7);
          break;
        case 1:
          double v46 = *((double *)v45 + 7);
          break;
        case 2:
          uint64_t v48 = *((void *)v45 + 7);
          __idx.__begin_ = 0;
          uint64_t v49 = (char *)(v48 + 8);
          if (*(char *)(v48 + 31) < 0) {
            uint64_t v49 = *(char **)(v48 + 8);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v49);
          double v50 = std::stod((const std::string *)__p, (size_t *)&__idx);
          if (SHIBYTE(v317[0]) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v48 + 31) < 0) {
            std::vector<std::string>::pointer v51 = *(std::vector<std::string>::pointer *)(v48 + 16);
          }
          else {
            std::vector<std::string>::pointer v51 = (std::vector<std::string>::pointer)*(unsigned __int8 *)(v48 + 31);
          }
          if (__idx.__begin_ != v51)
          {
            long long v280 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            long long v281 = std::string::append(&v315, " cannot be interpreted as a float");
            long long v282 = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
            v317[0] = (void *)v281->__r_.__value_.__r.__words[2];
            *(_OWORD *)long long __p = v282;
            v281->__r_.__value_.__l.__size_ = 0;
            v281->__r_.__value_.__r.__words[2] = 0;
            v281->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v280, (const std::string *)__p);
            __cxa_throw(v280, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          float v61 = v50;
          double v46 = v61;
          break;
        case 3:
          uint64_t v47 = *((void *)v45 + 7);
          v317[0] = 0;
          __p[1] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v47 + 8), *(void *)(v47 + 16), (uint64_t)(*(void *)(v47 + 16) - *(void *)(v47 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 4:
          uint64_t v52 = *((void *)v45 + 7);
          v317[0] = 0;
          __p[1] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v52 + 8), *(uint64_t **)(v52 + 16), (uint64_t)(*(void *)(v52 + 16) - *(void *)(v52 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v315.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
          break;
        case 5:
          uint64_t v53 = *((void *)v45 + 7);
          v317[0] = 0;
          __p[1] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(void *)(v53 + 16) - *(void *)(v53 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v315.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
          break;
        case 6:
          double v46 = (double)*((int *)v45 + 16) / 1000000.0 + (double)((uint64_t)(*((void *)v45 + 7) << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          uint64_t v54 = *((void *)v45 + 7);
          uint64_t v55 = *(atomic_uint **)(v54 + 16);
          __p[0] = *(void **)(v54 + 8);
          __p[1] = v55;
          if (v55) {
            atomic_fetch_add_explicit(v55 + 2, 1u, memory_order_relaxed);
          }
          long long v56 = *(_OWORD *)(v54 + 24);
          long long v57 = *(_OWORD *)(v54 + 56);
          long long v318 = *(_OWORD *)(v54 + 40);
          *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v57;
          *(_OWORD *)v317 = v56;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v45 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v318 + 1))
          {
            v319.__r_.__value_.__r.__words[0] = *((void *)&v318 + 1);
            operator delete(*((void **)&v318 + 1));
          }
          if (v317[0])
          {
            v317[1] = v317[0];
            operator delete(v317[0]);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
          break;
        default:
          goto LABEL_332;
      }
      if (SHIBYTE(v308.__end_cap_.__value_) < 0) {
        operator delete(v308.__begin_);
      }
      double __val = 0.0;
      std::string::basic_string[abi:ne180100]<0>(&v308, "step_size");
      __p[0] = &v308;
      uint64_t v62 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)&v308.__begin_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      double v63 = 0.0;
      switch(*((unsigned char *)v62 + 68))
      {
        case 0:
          double v63 = (double)*((uint64_t *)v62 + 7);
          break;
        case 1:
          double v63 = *((double *)v62 + 7);
          break;
        case 2:
          uint64_t v65 = *((void *)v62 + 7);
          __idx.__begin_ = 0;
          int64_t v66 = (char *)(v65 + 8);
          if (*(char *)(v65 + 31) < 0) {
            int64_t v66 = *(char **)(v65 + 8);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v66);
          double v67 = std::stod((const std::string *)__p, (size_t *)&__idx);
          if (SHIBYTE(v317[0]) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v65 + 31) < 0) {
            std::vector<std::string>::pointer v68 = *(std::vector<std::string>::pointer *)(v65 + 16);
          }
          else {
            std::vector<std::string>::pointer v68 = (std::vector<std::string>::pointer)*(unsigned __int8 *)(v65 + 31);
          }
          if (__idx.__begin_ != v68)
          {
            v283 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v284 = std::string::append(&v315, " cannot be interpreted as a float");
            long long v285 = *(_OWORD *)&v284->__r_.__value_.__l.__data_;
            v317[0] = (void *)v284->__r_.__value_.__r.__words[2];
            *(_OWORD *)long long __p = v285;
            v284->__r_.__value_.__l.__size_ = 0;
            v284->__r_.__value_.__r.__words[2] = 0;
            v284->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v283, (const std::string *)__p);
            __cxa_throw(v283, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          float v75 = v67;
          double v63 = v75;
          break;
        case 3:
          uint64_t v64 = *((void *)v62 + 7);
          v317[0] = 0;
          __p[1] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v64 + 8), *(void *)(v64 + 16), (uint64_t)(*(void *)(v64 + 16) - *(void *)(v64 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 4:
          uint64_t v69 = *((void *)v62 + 7);
          v317[0] = 0;
          __p[1] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(void *)(v69 + 16) - *(void *)(v69 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v315.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
          break;
        case 5:
          uint64_t v70 = *((void *)v62 + 7);
          v317[0] = 0;
          __p[1] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v70 + 8), *(uint64_t **)(v70 + 16), (uint64_t)(*(void *)(v70 + 16) - *(void *)(v70 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v315.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
          break;
        case 6:
          double v63 = (double)*((int *)v62 + 16) / 1000000.0 + (double)((uint64_t)(*((void *)v62 + 7) << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          uint64_t v71 = *((void *)v62 + 7);
          uint64_t v72 = *(atomic_uint **)(v71 + 16);
          __p[0] = *(void **)(v71 + 8);
          __p[1] = v72;
          if (v72) {
            atomic_fetch_add_explicit(v72 + 2, 1u, memory_order_relaxed);
          }
          long long v73 = *(_OWORD *)(v71 + 24);
          long long v74 = *(_OWORD *)(v71 + 56);
          long long v318 = *(_OWORD *)(v71 + 40);
          *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v74;
          *(_OWORD *)v317 = v73;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v62 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v318 + 1))
          {
            v319.__r_.__value_.__r.__words[0] = *((void *)&v318 + 1);
            operator delete(*((void **)&v318 + 1));
          }
          if (v317[0])
          {
            v317[1] = v317[0];
            operator delete(v317[0]);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
          break;
        default:
          goto LABEL_332;
      }
      if (SHIBYTE(v308.__end_cap_.__value_) < 0) {
        operator delete(v308.__begin_);
      }
      double __val = v63;
      *(_DWORD *)a5 = -1;
      *(_OWORD *)(a5 + 16) = 0u;
      uint64_t v288 = (void *)(a5 + 16);
      *(void *)(a5 + 88) = 0;
      *(void *)(a5 + 8) = 0xBFF0000000000000;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(void *)(a5 + 64) = 0;
      *(void *)(a5 + 96) = 0;
      turi::sframe::sframe((turi::sframe *)(a5 + 104));
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v305, a2);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v303, (uint64_t)&v305);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v301, (uint64_t)&v305);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v299, (uint64_t)&v305);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v297, (uint64_t)&v305);
      double v76 = (char *)v303;
      int64_t v77 = v304;
      if (v304 >= 0) {
        uint64_t v78 = v304;
      }
      else {
        uint64_t v78 = v304 + 1;
      }
      int64_t v79 = v78 & 0xFFFFFFFFFFFFFFFELL;
      if (v304 >= 2)
      {
        unint64_t v80 = 2;
        if (v79 > 2) {
          unint64_t v80 = v78 & 0xFFFFFFFFFFFFFFFELL;
        }
        bzero(v303, ((8 * v80 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if (v79 < v77) {
        bzero(&v76[16 * (v78 >> 1)], 8 * v77 - 16 * (v78 >> 1));
      }
      unint64_t v81 = v306;
      v295 = 0;
      unint64_t v296 = 0;
      if (v306)
      {
        if (v306 >> 61 || (unint64_t v82 = malloc_type_malloc(8 * v306, 0x1E76AA36uLL)) == 0)
        {
          v275 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v276 = std::bad_alloc::bad_alloc(v275);
          __cxa_throw(v276, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        v295 = v82;
      }
      unint64_t v296 = v81;
      double v294 = 0.0;
      (*(void (**)(uint64_t, void **, void **, double *, void, uint64_t))(*(void *)a1 + 32))(a1, &v301, &v295, &v294, 0, -1);
      double v83 = turi::optimization::compute_residual(&v295);
      ++*(_DWORD *)(a5 + 96);
      std::to_string((std::string *)__p, 0);
      std::to_string((std::string *)&v317[1], *(_DWORD *)(a5 + 96));
      std::to_string(&v319, __val);
      gettimeofday((timeval *)&v315, 0);
      std::to_string(v320, (double)(LODWORD(v315.__r_.__value_.__r.__words[1]) - tv_usec) / 1000000.0+ (double)(v315.__r_.__value_.__r.__words[0] - tv_sec));
      memset(&v308, 0, sizeof(v308));
      v315.__r_.__value_.__r.__words[0] = (std::string::size_type)&v308;
      v315.__r_.__value_.__s.__data_[8] = 0;
      v308.__begin_ = (std::vector<std::string>::pointer)operator new(0x60uLL);
      v308.__end_ = v308.__begin_;
      v308.__end_cap_.__value_ = v308.__begin_ + 4;
      uint64_t v84 = a4;
      unint64_t v85 = 0;
      v308.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v308.__end_cap_, (long long *)__p, v321, v308.__begin_);
      do
      {
        if (SHIBYTE(v320[0].__r_.__value_.__r.__words[v85 + 2]) < 0) {
          operator delete(v320[v85 / 3].__r_.__value_.__l.__data_);
        }
        v85 -= 3;
      }
      while (v85 != 0x1FFFFFFFFFFFFFF4);
      (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, void **, std::vector<std::string> *))(*(void *)a1 + 72))(&__idx, a1, &v305, &v308);
      v315.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * (((char *)__idx.__end_ - (char *)__idx.__begin_) >> 3);
      uint64_t v314 = (uint64_t)(v322[0].__r_.__value_.__l.__size_ - v322[0].__r_.__value_.__r.__words[0]) >> 5;
      if (v315.__r_.__value_.__r.__words[0] != v314)
      {
        __p[0] = &v315;
        __p[1] = &v314;
        turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
      }
      unint64_t add = atomic_fetch_add(v323, 1uLL);
      BOOL v87 = turi::table_printer::register_tick((turi::table_printer *)v322, 0, add + 1);
      BOOL v88 = v87;
      if (v87)
      {
        pthread_mutex_lock(v324);
        turi::table_printer::print_row<std::string>(v322, &__idx);
        pthread_mutex_unlock(v324);
      }
      if (v331 && !(add % v331))
      {
        pthread_mutex_lock(v325);
        std::vector<std::string>::pointer begin = __idx.__begin_;
        std::vector<std::string>::pointer end = __idx.__end_;
        if (!v326)
        {
          std::vector<turi::flexible_type>::resize(v328, 0xAAAAAAAAAAAAAAABLL * (((char *)__idx.__end_ - (char *)__idx.__begin_) >> 3));
          std::vector<std::string>::pointer begin = __idx.__begin_;
          std::vector<std::string>::pointer end = __idx.__end_;
          unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)__idx.__end_ - (char *)__idx.__begin_) >> 3);
          if (v91 <= v330 - v329)
          {
            if (v91 < v330 - v329) {
              uint64_t v330 = v329 - 0x5555555555555555 * (((char *)__idx.__end_ - (char *)__idx.__begin_) >> 3);
            }
          }
          else
          {
            std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)&v329, v91 - (v330 - v329));
            std::vector<std::string>::pointer begin = __idx.__begin_;
            std::vector<std::string>::pointer end = __idx.__end_;
          }
        }
        if (end != begin) {
          turi::flexible_type::operator=<std::string>(v328[0]);
        }
        turi::table_printer::track_progress_row((uint64_t)v322, v328);
        BOOL v327 = v88;
        pthread_mutex_unlock(v325);
      }
      double v287 = v31;
      if (fabs(v83) == INFINITY) {
        *(_DWORD *)(a5 + 100) = 7;
      }
      unint64_t v92 = 0;
      if (v83 < v46 || !v290) {
        goto LABEL_291;
      }
      double v286 = v46;
      unint64_t v92 = 0;
      double v93 = 1.0;
      break;
    default:
LABEL_332:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  while (1)
  {
    double v94 = __val;
    while (1)
    {
      double v292 = v94;
      if (v94 <= 0.000000001) {
        break;
      }
      BOOL v95 = (float64x2_t *)v301;
      uint64_t v97 = (float64x2_t *)v295;
      uint64_t v96 = v296;
      if (v306 != v296)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v305, v296, 1);
        uint64_t v96 = v306;
      }
      v98 = (char *)v305;
      if (v96 >= 0) {
        uint64_t v99 = v96;
      }
      else {
        uint64_t v99 = v96 + 1;
      }
      int64_t v100 = v99 & 0xFFFFFFFFFFFFFFFELL;
      if (v96 >= 2)
      {
        int64_t v101 = 0;
        double v102 = (float64x2_t *)v305;
        double v103 = v95;
        double v104 = v97;
        do
        {
          float64x2_t v105 = *v103++;
          float64x2_t v106 = v105;
          float64x2_t v107 = *v104++;
          *v102++ = vsubq_f64(v106, vmulq_n_f64(v107, v292));
          v101 += 2;
        }
        while (v101 < v100);
      }
      BOOL v108 = __OFSUB__(v96, v100);
      uint64_t v109 = v96 - v100;
      if (!((v109 < 0) ^ v108 | (v109 == 0)))
      {
        uint64_t v110 = v99 >> 1;
        f64 = v97[v99 >> 1].f64;
        uint64_t v112 = v95[v110].f64;
        v113 = (double *)&v98[16 * v110];
        do
        {
          double v114 = *f64++;
          double v115 = v292 * v114;
          double v116 = *v112++;
          *v113++ = v116 - v115;
          --v109;
        }
        while (v109);
      }
      if (*v84) {
        (*(void (**)(void, void **, double *))(*(void *)*v84 + 32))(*v84, &v305, &__val);
      }
      double v117 = (*(double (**)(uint64_t, void **, void, uint64_t))(*(void *)a1 + 40))(a1, &v305, 0, -1);
      ++*(_DWORD *)(a5 + 88);
      uint64_t v118 = (float64x2_t *)v305;
      unint64_t v120 = (float64x2_t *)v301;
      uint64_t v119 = v302;
      if (v304 != v302)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v303, v302, 1);
        uint64_t v119 = v304;
      }
      v121 = (char *)v303;
      if (v119 >= 0) {
        uint64_t v122 = v119;
      }
      else {
        uint64_t v122 = v119 + 1;
      }
      int64_t v123 = v122 & 0xFFFFFFFFFFFFFFFELL;
      if (v119 >= 2)
      {
        int64_t v124 = 0;
        double v125 = (float64x2_t *)v303;
        uint64_t v126 = v118;
        long long v127 = v120;
        do
        {
          float64x2_t v128 = *v126++;
          float64x2_t v129 = v128;
          float64x2_t v130 = *v127++;
          *v125++ = vsubq_f64(v129, v130);
          v124 += 2;
        }
        while (v124 < v123);
      }
      BOOL v108 = __OFSUB__(v119, v123);
      uint64_t v131 = v119 - v123;
      if (!((v131 < 0) ^ v108 | (v131 == 0)))
      {
        uint64_t v132 = v122 >> 1;
        int64_t v133 = v120[v122 >> 1].f64;
        v134 = v118[v132].f64;
        v135 = (double *)&v121[16 * v132];
        do
        {
          double v136 = *v134++;
          double v137 = v136;
          double v138 = *v133++;
          *v135++ = v137 - v138;
          --v131;
        }
        while (v131);
      }
      double v139 = v294;
      v315.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
      v315.__r_.__value_.__l.__size_ = (std::string::size_type)&v295;
      double v140 = 0.0;
      double v141 = 0.0;
      if (v296)
      {
        __p[1] = v303;
        v317[1] = v295;
        *((void *)&v318 + 1) = &v315;
        double v141 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)__p);
      }
      v315.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
      if (v304)
      {
        __p[1] = v303;
        v317[1] = &v315;
        double v140 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)__p);
      }
      if (v117 < v139 + v141 + v140 * 0.5 / __val) {
        break;
      }
      double v94 = __val / 1.5;
      double __val = __val / 1.5;
    }
    v143 = (long long *)v305;
    uint64_t v142 = v306;
    if (v298 != v306)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v297, v306, 1);
      uint64_t v142 = v298;
    }
    v144 = (char *)v297;
    if (v142 >= 0) {
      uint64_t v145 = v142;
    }
    else {
      uint64_t v145 = v142 + 1;
    }
    int64_t v146 = v145 & 0xFFFFFFFFFFFFFFFELL;
    if (v142 >= 2)
    {
      int64_t v147 = 0;
      v148 = v297;
      uint64_t v149 = v143;
      do
      {
        long long v150 = *v149++;
        *v148++ = v150;
        v147 += 2;
      }
      while (v147 < v146);
    }
    BOOL v108 = __OFSUB__(v142, v146);
    uint64_t v151 = v142 - v146;
    if (!((v151 < 0) ^ v108 | (v151 == 0)))
    {
      uint64_t v152 = v145 >> 1;
      v153 = (uint64_t *)&v143[v145 >> 1];
      v154 = &v144[16 * v152];
      do
      {
        uint64_t v155 = *v153++;
        *(void *)v154 = v155;
        v154 += 8;
        --v151;
      }
      while (v151);
    }
    v156 = (float64x2_t *)v297;
    v158 = (float64x2_t *)v299;
    uint64_t v157 = v300;
    if (v302 != v300)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v301, v300, 1);
      uint64_t v157 = v302;
    }
    double v159 = (sqrt(v93 * 4.0 * v93 + 1.0) + 1.0) * 0.5;
    double v160 = (v93 + -1.0) / v159;
    BOOL v161 = (char *)v301;
    if (v157 >= 0) {
      uint64_t v162 = v157;
    }
    else {
      uint64_t v162 = v157 + 1;
    }
    int64_t v163 = v162 & 0xFFFFFFFFFFFFFFFELL;
    if (v157 >= 2)
    {
      int64_t v164 = 0;
      v165 = (float64x2_t *)v301;
      v166 = v156;
      int v167 = v158;
      do
      {
        float64x2_t v168 = *v166++;
        float64x2_t v169 = v168;
        float64x2_t v170 = *v167++;
        *v165++ = vaddq_f64(v169, vmulq_n_f64(vsubq_f64(v169, v170), v160));
        v164 += 2;
      }
      while (v164 < v163);
    }
    BOOL v108 = __OFSUB__(v157, v163);
    uint64_t v171 = v157 - v163;
    if (!((v171 < 0) ^ v108 | (v171 == 0)))
    {
      uint64_t v172 = v162 >> 1;
      uint64_t v173 = v158[v162 >> 1].f64;
      int64_t v174 = v156[v172].f64;
      int64_t v175 = (double *)&v161[16 * v172];
      do
      {
        double v176 = *v174++;
        double v177 = v176;
        double v178 = *v173++;
        *v175++ = v177 + v160 * (v177 - v178);
        --v171;
      }
      while (v171);
    }
    uint64_t v179 = (float64x2_t *)v297;
    v181 = (float64x2_t *)v299;
    uint64_t v180 = v300;
    if (v304 != v300)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v303, v300, 1);
      uint64_t v180 = v304;
    }
    v182 = (char *)v303;
    if (v180 >= 0) {
      uint64_t v183 = v180;
    }
    else {
      uint64_t v183 = v180 + 1;
    }
    int64_t v184 = v183 & 0xFFFFFFFFFFFFFFFELL;
    if (v180 >= 2)
    {
      int64_t v185 = 0;
      v186 = (float64x2_t *)v303;
      v187 = v179;
      uint64_t v188 = v181;
      do
      {
        float64x2_t v189 = *v187++;
        float64x2_t v190 = v189;
        float64x2_t v191 = *v188++;
        *v186++ = vsubq_f64(v190, v191);
        v185 += 2;
      }
      while (v185 < v184);
    }
    BOOL v108 = __OFSUB__(v180, v184);
    uint64_t v192 = v180 - v184;
    if (!((v192 < 0) ^ v108 | (v192 == 0)))
    {
      uint64_t v193 = v183 >> 1;
      uint64_t v194 = v181[v183 >> 1].f64;
      uint64_t v195 = v179[v193].f64;
      v196 = (double *)&v182[16 * v193];
      do
      {
        double v197 = *v195++;
        double v198 = v197;
        double v199 = *v194++;
        *v196++ = v198 - v199;
        --v192;
      }
      while (v192);
    }
    v201 = (long long *)v297;
    uint64_t v200 = v298;
    if (v300 != v298)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v299, v298, 1);
      uint64_t v200 = v300;
    }
    uint64_t v202 = (char *)v299;
    if (v200 >= 0) {
      uint64_t v203 = v200;
    }
    else {
      uint64_t v203 = v200 + 1;
    }
    int64_t v204 = v203 & 0xFFFFFFFFFFFFFFFELL;
    if (v200 >= 2)
    {
      int64_t v205 = 0;
      uint64_t v206 = v299;
      uint64_t v207 = v201;
      do
      {
        long long v208 = *v207++;
        *v206++ = v208;
        v205 += 2;
      }
      while (v205 < v204);
    }
    BOOL v108 = __OFSUB__(v200, v204);
    uint64_t v209 = v200 - v204;
    if (!((v209 < 0) ^ v108 | (v209 == 0)))
    {
      uint64_t v210 = v203 >> 1;
      v211 = (uint64_t *)&v201[v203 >> 1];
      long long v212 = &v202[16 * v210];
      do
      {
        uint64_t v213 = *v211++;
        *(void *)long long v212 = v213;
        v212 += 8;
        --v209;
      }
      while (v209);
    }
    v315.__r_.__value_.__r.__words[0] = (std::string::size_type)&v303;
    if (v304)
    {
      __p[1] = v303;
      v317[1] = &v315;
      double v214 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)__p);
    }
    else
    {
      double v214 = 0.0;
    }
    if (sqrt(v214) <= 1.0e-10)
    {
LABEL_321:
      int v241 = 6;
      goto LABEL_290;
    }
    uint64_t v215 = v304;
    if (v304 >= 1) {
      break;
    }
LABEL_239:
    (*(void (**)(uint64_t, void **, void **, double *, void, uint64_t))(*(void *)a1 + 32))(a1, &v301, &v295, &v294, 0, -1);
    ++*(_DWORD *)(a5 + 96);
    double v83 = turi::optimization::compute_residual(&v303);
    ++v92;
    if (fabs(v294) == INFINITY) {
      goto LABEL_321;
    }
    std::to_string((std::string *)__p, v92);
    std::to_string((std::string *)&v317[1], *(_DWORD *)(a5 + 96));
    std::to_string(&v319, __val);
    gettimeofday((timeval *)&v315, 0);
    std::to_string(v320, (double)(LODWORD(v315.__r_.__value_.__r.__words[1]) - v313.tv_usec) / 1000000.0+ (double)(uint64_t)(v315.__r_.__value_.__r.__words[0] - v313.tv_sec));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v308, (std::string *)__p, v321, 4uLL);
    for (unint64_t j = 0; j != 0x1FFFFFFFFFFFFFF4; j -= 3)
    {
      if (SHIBYTE(v320[0].__r_.__value_.__r.__words[j + 2]) < 0) {
        operator delete(v320[j / 3].__r_.__value_.__l.__data_);
      }
    }
    (*(void (**)(void **__return_ptr, uint64_t, void **, std::vector<std::string> *))(*(void *)a1 + 72))(__p, a1, &v305, &v308);
    std::vector<std::string>::__vdeallocate(&__idx);
    *(_OWORD *)&__idx.__begin_ = *(_OWORD *)__p;
    __idx.__end_cap_.__value_ = (std::string *)v317[0];
    v317[0] = 0;
    __p[1] = 0;
    __p[0] = 0;
    v315.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v315);
    v315.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * (((char *)__idx.__end_ - (char *)__idx.__begin_) >> 3);
    uint64_t v314 = (uint64_t)(v322[0].__r_.__value_.__l.__size_ - v322[0].__r_.__value_.__r.__words[0]) >> 5;
    if (v315.__r_.__value_.__r.__words[0] != v314)
    {
      __p[0] = &v315;
      __p[1] = &v314;
      turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
    }
    unint64_t v218 = atomic_fetch_add(v323, 1uLL);
    BOOL v219 = turi::table_printer::register_tick((turi::table_printer *)v322, v92, v218 + 1);
    BOOL v220 = v219;
    if (v219)
    {
      pthread_mutex_lock(v324);
      turi::table_printer::print_row<std::string>(v322, &__idx);
      pthread_mutex_unlock(v324);
    }
    if (v331 && !(v218 % v331))
    {
      pthread_mutex_lock(v325);
      std::vector<std::string>::pointer v221 = __idx.__begin_;
      std::vector<std::string>::pointer v222 = __idx.__end_;
      if (!v326)
      {
        std::vector<turi::flexible_type>::resize(v328, 0xAAAAAAAAAAAAAAABLL * (((char *)__idx.__end_ - (char *)__idx.__begin_) >> 3));
        std::vector<std::string>::pointer v221 = __idx.__begin_;
        std::vector<std::string>::pointer v222 = __idx.__end_;
        unint64_t v223 = 0xAAAAAAAAAAAAAAABLL * (((char *)__idx.__end_ - (char *)__idx.__begin_) >> 3);
        if (v223 <= v330 - v329)
        {
          if (v223 < v330 - v329) {
            uint64_t v330 = v329 - 0x5555555555555555 * (((char *)__idx.__end_ - (char *)__idx.__begin_) >> 3);
          }
        }
        else
        {
          std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)&v329, v223 - (v330 - v329));
          std::vector<std::string>::pointer v221 = __idx.__begin_;
          std::vector<std::string>::pointer v222 = __idx.__end_;
        }
      }
      if (v222 != v221) {
        turi::flexible_type::operator=<std::string>(v328[0]);
      }
      turi::table_printer::track_progress_row((uint64_t)v322, v328);
      uint64_t v84 = a4;
      BOOL v327 = v220;
      pthread_mutex_unlock(v325);
    }
    v224 = (int *)global_logger();
    if (v224[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v224)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v225 = (file_logger *)global_logger();
      v226 = file_logger::start_stream(v225, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/accelerated_gradient-inl.hpp", "accelerated_gradient", 210, 1);
      v227 = pthread_getspecific(*((void *)v226 + 74));
      if (v227 && *((unsigned char *)v227 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227 + 2, (uint64_t)"Iters  (", 8);
      }
      uint64_t v228 = file_logger::operator<<<unsigned long>((uint64_t)v226);
      v229 = pthread_getspecific(*(void *)(v228 + 592));
      if (v229 && *((unsigned char *)v229 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229 + 2, (uint64_t)") ", 2);
      }
      v230 = pthread_getspecific(*(void *)(v228 + 592));
      if (v230 && *((unsigned char *)v230 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v230 + 2, (uint64_t)"Passes (", 8);
      }
      uint64_t v231 = file_logger::operator<<<int>(v228);
      v232 = pthread_getspecific(*(void *)(v231 + 592));
      if (v232 && *((unsigned char *)v232 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232 + 2, (uint64_t)") ", 2);
      }
      v233 = pthread_getspecific(*(void *)(v231 + 592));
      if (v233 && *((unsigned char *)v233 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233 + 2, (uint64_t)"Residual (", 10);
      }
      uint64_t v234 = file_logger::operator<<<double>(v231);
      v235 = pthread_getspecific(*(void *)(v234 + 592));
      if (v235 && *((unsigned char *)v235 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v235 + 2, (uint64_t)") ", 2);
      }
      v236 = pthread_getspecific(*(void *)(v234 + 592));
      if (v236 && *((unsigned char *)v236 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v236 + 2, (uint64_t)"Loss (", 6);
      }
      uint64_t v237 = file_logger::operator<<<double>(v234);
      v238 = pthread_getspecific(*(void *)(v237 + 592));
      if (v238 && *((unsigned char *)v238 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238 + 2, (uint64_t)") ", 2);
      }
      v239 = pthread_getspecific(*(void *)(v237 + 592));
      if (v239)
      {
        if (*((unsigned char *)v239 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v239 + *(void *)(v239[2] - 24) + 16));
          v240 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v240->__vftable[2].~facet_0)(v240, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          uint64_t v84 = a4;
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v237);
          if (*(_DWORD *)(v237 + 600) == 7)
          {
            __print_back_trace();
            long long v279 = __cxa_allocate_exception(8uLL);
            *long long v279 = "LOG_FATAL encountered";
            __cxa_throw(v279, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    if (v83 >= v286)
    {
      double v93 = v159;
      if (v92 < v290) {
        continue;
      }
    }
    goto LABEL_291;
  }
  v216 = v303;
  while ((*v216 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    ++v216;
    if (!--v215) {
      goto LABEL_239;
    }
  }
  int v241 = 7;
LABEL_290:
  *(_DWORD *)(a5 + 100) = v241;
LABEL_291:
  turi::table_printer::print_footer((turi::table_printer *)v322);
  if (!*(_DWORD *)(a5 + 100))
  {
    if (v92 < v290) {
      int v242 = 2;
    }
    else {
      int v242 = 3;
    }
    *(_DWORD *)(a5 + 100) = v242;
  }
  *(_DWORD *)a5 = v92;
  double v243 = v294;
  *(double *)(a5 + 72) = v83;
  *(double *)(a5 + 80) = v243;
  v244 = (void *)(a5 + 32);
  v246 = (long long *)v295;
  uint64_t v245 = v296;
  if (*(void *)(a5 + 40) != v296)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a5 + 32), v296, 1);
    uint64_t v245 = *(void *)(a5 + 40);
  }
  v247 = (_OWORD *)*v244;
  if (v245 >= 0) {
    uint64_t v248 = v245;
  }
  else {
    uint64_t v248 = v245 + 1;
  }
  int64_t v249 = v248 & 0xFFFFFFFFFFFFFFFELL;
  if (v245 >= 2)
  {
    int64_t v250 = 0;
    uint64_t v251 = (_OWORD *)*v244;
    v252 = v246;
    do
    {
      long long v253 = *v252++;
      *v251++ = v253;
      v250 += 2;
    }
    while (v250 < v249);
  }
  BOOL v108 = __OFSUB__(v245, v249);
  uint64_t v254 = v245 - v249;
  if (!((v254 < 0) ^ v108 | (v254 == 0)))
  {
    uint64_t v255 = v248 >> 1;
    unint64_t v256 = (uint64_t *)&v246[v248 >> 1];
    v257 = &v247[v255];
    do
    {
      uint64_t v258 = *v256++;
      *v257++ = v258;
      --v254;
    }
    while (v254);
  }
  gettimeofday((timeval *)__p, 0);
  *(double *)(a5 + 8) = (double)(LODWORD(__p[1]) - v313.tv_usec) / 1000000.0
                      + (double)((uint64_t)__p[0] - v313.tv_sec)
                      - v287;
  unint64_t v260 = (long long *)v305;
  uint64_t v259 = v306;
  if (*(void *)(a5 + 24) != v306)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v288, v306, 1);
    uint64_t v259 = *(void *)(a5 + 24);
  }
  v261 = (_OWORD *)*v288;
  if (v259 >= 0) {
    uint64_t v262 = v259;
  }
  else {
    uint64_t v262 = v259 + 1;
  }
  int64_t v263 = v262 & 0xFFFFFFFFFFFFFFFELL;
  if (v259 >= 2)
  {
    int64_t v264 = 0;
    timeval v265 = (_OWORD *)*v288;
    __darwin_time_t v266 = v260;
    do
    {
      long long v267 = *v266++;
      *v265++ = v267;
      v264 += 2;
    }
    while (v264 < v263);
  }
  BOOL v108 = __OFSUB__(v259, v263);
  uint64_t v268 = v259 - v263;
  if (!((v268 < 0) ^ v108 | (v268 == 0)))
  {
    uint64_t v269 = v262 >> 1;
    std::string v270 = (uint64_t *)&v260[v262 >> 1];
    std::string v271 = &v261[v269];
    do
    {
      uint64_t v272 = *v270++;
      *v271++ = v272;
      --v268;
    }
    while (v268);
  }
  turi::table_printer::get_tracked_table((turi::table_printer *)v322, (turi::sframe *)__p);
  turi::sframe::operator=(a5 + 104, (uint64_t)__p);
  turi::sframe::~sframe((turi::sframe *)__p);
  turi::optimization::log_solver_summary_stats((turi::optimization *)a5, 0);
  __p[0] = &__idx;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v308;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  free(v295);
  free(v297);
  free(v299);
  free(v301);
  free(v303);
  free(v305);
  turi::table_printer::~table_printer((turi::table_printer *)v322);
  v309[0] = *MEMORY[0x263F8C2B8];
  uint64_t v273 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v309 + *(void *)(v309[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v309[2] = v273;
  v310[0] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v311.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v312);
}

void sub_22448D260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, pthread_mutex_t *a12, uint64_t a13, pthread_mutex_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,void *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x287]) < 0)
  {
    operator delete((void *)STACK[0x270]);
    if ((v53 & 1) == 0)
    {
LABEL_8:
      if (a51 < 0) {
        operator delete(a46);
      }
      turi::table_printer::~table_printer((turi::table_printer *)&STACK[0x3C0]);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a52);
      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v52);
  goto LABEL_8;
}

void turi::supervised::get_coefficients_as_sframe(uint64_t a1@<X1>, uint64_t a2@<X2>, turi::sframe *a3@<X8>)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)(*(void *)(*(void *)a1 + 24) + 24);
  uint64_t v83 = *(void *)(a2 + 8);
  turi::sframe::sframe(a3);
  memset(&v87, 0, sizeof(v87));
  std::string::basic_string[abi:ne180100]<0>(&v89, "name");
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
  uint64_t v5 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v87.__end_cap_, 1uLL);
  __v.__first_ = v5;
  __v.__begin_ = v5;
  __v.__end_cap_.__value_ = &v5[v6];
  long long v7 = v89;
  v5->__r_.__value_.__r.__words[2] = v90;
  *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
  std::string::size_type v90 = 0;
  long long v89 = 0uLL;
  __v.__end_ = v5 + 1;
  std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
  std::vector<std::string>::pointer end = v87.__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  v87.__end_ = end;
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)v89);
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "index");
  std::vector<std::string>::pointer v9 = v87.__end_;
  if (v87.__end_ >= v87.__end_cap_.__value_)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v12) {
      unint64_t v12 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
    if (v13) {
      long long v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v87.__end_cap_, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v15 = v14 + v11;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    long long v16 = v89;
    v15->__r_.__value_.__r.__words[2] = v90;
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    std::string::size_type v90 = 0;
    long long v89 = 0uLL;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
    uint64_t v17 = v87.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v87.__end_ = v17;
    if (SHIBYTE(v90) < 0) {
      operator delete((void *)v89);
    }
  }
  else
  {
    long long v10 = v89;
    v87.__end_->__r_.__value_.__r.__words[2] = v90;
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    v87.__end_ = v9 + 1;
  }
  unsigned int v18 = (v4 < 7) & (0x4Au >> v4);
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "class");
    std::vector<std::string>::pointer v19 = v87.__end_;
    if (v87.__end_ >= v87.__end_cap_.__value_)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v22) {
        unint64_t v22 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v22;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
      if (v23) {
        unsigned int v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v87.__end_cap_, v23);
      }
      else {
        unsigned int v24 = 0;
      }
      uint64_t v25 = v24 + v21;
      __v.__first_ = v24;
      __v.__begin_ = v25;
      __v.__end_cap_.__value_ = &v24[v23];
      long long v26 = v89;
      v25->__r_.__value_.__r.__words[2] = v90;
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
      std::string::size_type v90 = 0;
      long long v89 = 0uLL;
      __v.__end_ = v25 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
      uint64_t v27 = v87.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v87.__end_ = v27;
      if (SHIBYTE(v90) < 0) {
        operator delete((void *)v89);
      }
    }
    else
    {
      long long v20 = v89;
      v87.__end_->__r_.__value_.__r.__words[2] = v90;
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      v87.__end_ = v19 + 1;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "value");
  std::vector<std::string>::pointer v28 = v87.__end_;
  if (v87.__end_ >= v87.__end_cap_.__value_)
  {
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
    unint64_t v31 = v30 + 1;
    if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v31) {
      unint64_t v31 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v32 = v31;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
    if (v32) {
      uint64_t v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v87.__end_cap_, v32);
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = v33 + v30;
    __v.__first_ = v33;
    __v.__begin_ = v34;
    __v.__end_cap_.__value_ = &v33[v32];
    long long v35 = v89;
    v34->__r_.__value_.__r.__words[2] = v90;
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
    std::string::size_type v90 = 0;
    long long v89 = 0uLL;
    __v.__end_ = v34 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
    uint64_t v36 = v87.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v87.__end_ = v36;
    if (SHIBYTE(v90) < 0) {
      operator delete((void *)v89);
    }
  }
  else
  {
    long long v29 = v89;
    v87.__end_->__r_.__value_.__r.__words[2] = v90;
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    v87.__end_ = v28 + 1;
  }
  if (v83 >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "stderr");
    std::vector<std::string>::pointer v37 = v87.__end_;
    if (v87.__end_ >= v87.__end_cap_.__value_)
    {
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v40) {
        unint64_t v40 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v41 = v40;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v87.__end_cap_;
      if (v41) {
        int v42 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v87.__end_cap_, v41);
      }
      else {
        int v42 = 0;
      }
      long long v43 = v42 + v39;
      __v.__first_ = v42;
      __v.__begin_ = v43;
      __v.__end_cap_.__value_ = &v42[v41];
      long long v44 = v89;
      v43->__r_.__value_.__r.__words[2] = v90;
      *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
      std::string::size_type v90 = 0;
      long long v89 = 0uLL;
      __v.__end_ = v43 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v87, &__v);
      uint64_t v45 = v87.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v87.__end_ = v45;
      if (SHIBYTE(v90) < 0) {
        operator delete((void *)v89);
      }
    }
    else
    {
      long long v38 = v89;
      v87.__end_->__r_.__value_.__r.__words[2] = v90;
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
      v87.__end_ = v37 + 1;
    }
  }
  unint64_t v85 = 0;
  double v46 = operator new(1uLL);
  *double v46 = 2;
  uint64_t v84 = v46;
  v86 = v46 + 1;
  uint64_t v47 = operator new(2uLL);
  uint64_t v48 = v47 + 2;
  v47[1] = 2;
  *uint64_t v47 = *v46;
  uint64_t v84 = v47;
  v86 = v47 + 2;
  operator delete(v46);
  uint64_t v49 = v47 + 2;
  unint64_t v85 = v47 + 2;
  if (v18)
  {
    char v50 = *(unsigned char *)(*(void *)(*(void *)a1 + 24) + 28);
    if (v48 >= v86)
    {
      uint64_t v52 = v84;
      uint64_t v53 = v48 - (unsigned char *)v84;
      uint64_t v54 = v48 - (unsigned char *)v84 + 1;
      if (v54 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v55 = v86 - (unsigned char *)v84;
      if (2 * (v86 - (unsigned char *)v84) > (unint64_t)v54) {
        uint64_t v54 = 2 * v55;
      }
      if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v56 = v54;
      }
      if (v56) {
        long long v57 = operator new(v56);
      }
      else {
        long long v57 = 0;
      }
      uint64_t v49 = &v57[v56];
      v57[v53] = v50;
      uint64_t v51 = (uint64_t)&v57[v53 + 1];
      if (v48 == v52)
      {
        v57 += v53;
      }
      else
      {
        uint64_t v58 = v47 - v52 + 1;
        do
        {
          char v59 = *--v48;
          v57[v58--] = v59;
        }
        while (v48 != v52);
      }
      uint64_t v84 = v57;
      unint64_t v85 = (unsigned char *)v51;
      v86 = v49;
      if (v52)
      {
        operator delete(v52);
        uint64_t v49 = v86;
      }
    }
    else
    {
      v47[2] = v50;
      uint64_t v51 = (uint64_t)(v47 + 3);
    }
    unint64_t v85 = (unsigned char *)v51;
    uint64_t v48 = (unsigned char *)v51;
  }
  if (v48 >= v49)
  {
    unint64_t v61 = (unint64_t)v84;
    uint64_t v62 = v48 - (unsigned char *)v84;
    uint64_t v63 = v48 - (unsigned char *)v84 + 1;
    if (v63 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v64 = v49 - (unsigned char *)v84;
    if (2 * v64 > v63) {
      uint64_t v63 = 2 * v64;
    }
    if (v64 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v65 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v65 = v63;
    }
    if (v65) {
      int64_t v66 = operator new(v65);
    }
    else {
      int64_t v66 = 0;
    }
    double v67 = (char *)v66 + v62;
    std::vector<std::string>::pointer v68 = (char *)v66 + v65;
    uint64_t v69 = (char *)v66 + v62;
    unsigned char *v69 = 1;
    long long v60 = v69 + 1;
    if (v48 == (unsigned char *)v61)
    {
      int64_t v66 = v67;
    }
    else
    {
      uint64_t v70 = &v48[~v61];
      do
      {
        char v71 = *--v48;
        (v70--)[(void)v66] = v71;
      }
      while (v48 != (unsigned char *)v61);
    }
    uint64_t v84 = v66;
    unint64_t v85 = v60;
    v86 = v68;
    if (v61) {
      operator delete((void *)v61);
    }
  }
  else
  {
    *uint64_t v48 = 1;
    long long v60 = v48 + 1;
  }
  unint64_t v85 = v60;
  if (v83 >= 1)
  {
    if (v60 >= v86)
    {
      unint64_t v73 = (unint64_t)v84;
      uint64_t v74 = v60 - (unsigned char *)v84;
      uint64_t v75 = v60 - (unsigned char *)v84 + 1;
      if (v75 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v76 = v86 - (unsigned char *)v84;
      if (2 * (v86 - (unsigned char *)v84) > (unint64_t)v75) {
        uint64_t v75 = 2 * v76;
      }
      if (v76 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v77 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v77 = v75;
      }
      if (v77) {
        uint64_t v78 = operator new(v77);
      }
      else {
        uint64_t v78 = 0;
      }
      int64_t v79 = (char *)v78 + v77;
      *((unsigned char *)v78 + v74) = 1;
      uint64_t v72 = (uint64_t)v78 + v74 + 1;
      if (v60 == (unsigned char *)v73)
      {
        uint64_t v78 = (char *)v78 + v74;
      }
      else
      {
        unint64_t v80 = &v60[~v73];
        do
        {
          char v81 = *--v60;
          (v80--)[(void)v78] = v81;
        }
        while (v60 != (unsigned char *)v73);
      }
      uint64_t v84 = v78;
      unint64_t v85 = (unsigned char *)v72;
      v86 = v79;
      if (v73) {
        operator delete((void *)v73);
      }
    }
    else
    {
      *long long v60 = 1;
      uint64_t v72 = (uint64_t)(v60 + 1);
    }
    unint64_t v85 = (unsigned char *)v72;
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "");
  turi::sframe::open_for_write((uint64_t)a3, &v87, &v84, (const std::string *)&__v, 1, 1);
}

void sub_22448FEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, turi::sframe *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,std::__split_buffer<std::string> *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a30);
  if (*(char *)(v30 - 185) < 0) {
    operator delete(*(void **)(v30 - 208));
  }
  *(void *)(v30 - 208) = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 208));
  turi::sframe::~sframe(a9);
  _Unwind_Resume(a1);
}

void sub_224490164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  switch(*(unsigned char *)(v30 - 244))
  {
    case 2:
      turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>((atomic_ullong *volatile *)(v30 - 256));
      goto LABEL_13;
    case 3:
      turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>((atomic_ullong *volatile *)(v30 - 256));
      goto LABEL_13;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v30 - 256), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_13;
      }
      uint64_t v31 = *(void *)(v30 - 256);
      if (!v31) {
        goto LABEL_13;
      }
      a30 = (void **)(v31 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a30);
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v30 - 256), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_13;
      }
      uint64_t v31 = *(void *)(v30 - 256);
      if (!v31) {
        goto LABEL_13;
      }
      a30 = (void **)(v31 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a30);
      break;
    case 8:
      turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,turi::flexible_type>>((atomic_ullong *volatile *)(v30 - 256));
      goto LABEL_13;
    case 9:
      turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>((atomic_ullong *volatile *)(v30 - 256));
      goto LABEL_13;
    default:
      goto LABEL_13;
  }
  MEMORY[0x22A614FA0](v31, 0x1020C405E66F15BLL);
LABEL_13:
  JUMPOUT(0x22449010CLL);
}

void turi::supervised::add_na_std_err_to_coef(turi::supervised *this, const turi::sframe *a2)
{
  __p[35] = *(void **)MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 288)) {
    uint64_t v2 = *((void *)this + 4);
  }
  else {
    uint64_t v2 = 0;
  }
  turi::sarray<turi::flexible_type>::sarray((uint64_t)__p, (uint64_t)&turi::FLEX_UNDEFINED, v2, 1);
}

void sub_22449055C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::linear_regression::predict_single_example(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  v6[0] = a2;
  v6[1] = a1 + 408;
  if (*(void *)(a1 + 416))
  {
    uint64_t v4 = *(void *)(a1 + 408);
    uint64_t v8 = *a2;
    uint64_t v9 = v4;
    long long v10 = v6;
    double v5 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v7);
  }
  else
  {
    double v5 = 0.0;
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v5;
}

uint64_t turi::supervised::linear_regression::predict_single_example@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2[3];
  if (v3 < 1)
  {
    double v6 = 0.0;
  }
  else
  {
    uint64_t v4 = (double *)a2[1];
    double v5 = (int *)a2[2];
    double v6 = 0.0;
    do
    {
      double v7 = *v4++;
      double v8 = v7;
      uint64_t v9 = *v5++;
      double v6 = v6 + v8 * *(double *)(*(void *)(result + 408) + 8 * v9);
      --v3;
    }
    while (v3);
  }
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 1;
  *(double *)a3 = v6;
  return result;
}

double turi::supervised::linear_regression::set_coefs(uint64_t a1, long long **a2)
{
  uint64_t v2 = (void *)(a1 + 408);
  uint64_t v4 = *a2;
  uint64_t v3 = (uint64_t)a2[1];
  if (*(void *)(a1 + 416) != v3)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 408), v3, 1);
    uint64_t v3 = *(void *)(a1 + 416);
  }
  double v7 = (_OWORD *)*v2;
  if (v3 >= 0) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v3 + 1;
  }
  int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    int64_t v10 = 0;
    unint64_t v11 = (_OWORD *)*v2;
    unint64_t v12 = v4;
    do
    {
      long long v13 = *v12++;
      double result = *(double *)&v13;
      *v11++ = v13;
      v10 += 2;
    }
    while (v10 < v9);
  }
  BOOL v14 = __OFSUB__(v3, v9);
  uint64_t v15 = v3 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    uint64_t v16 = v8 >> 1;
    uint64_t v17 = (double *)&v4[v8 >> 1];
    unsigned int v18 = (double *)&v7[v16];
    do
    {
      double v19 = *v17++;
      double result = v19;
      *v18++ = v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

void turi::supervised::linear_regression::save_impl(turi::supervised::linear_regression *this, turi::oarchive *a2)
{
}

turi::iarchive *turi::supervised::linear_regression::load_version(turi::supervised::linear_regression *this, turi::iarchive *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  assert_msg(a3 < 5, (uint64_t)"This model version cannot be loaded. Please re-save your state.", a3, a4, a5, a6, a7, a8, v12);
  if (a3 <= 3) {
    turi::supervised::linear_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  }
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (void *)this + 47);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 51);
  return turi::option_manager::load((turi::supervised::linear_regression *)((char *)this + 224), a2);
}

uint64_t turi::supervised::linear_regression::get_version(turi::supervised::linear_regression *this)
{
  return 4;
}

void turi::supervised::linear_regression::export_to_coreml(turi::supervised::linear_regression *this)
{
  v2[15] = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)(*(uint64_t (**)(turi::supervised::linear_regression *))(*(void *)this + 16))(this);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v2, "class", &v1);
}

void sub_224490988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, void *a18, uint64_t a19, char a20)
{
}

const char *turi::supervised::linear_regression::name(turi::supervised::linear_regression *this)
{
  return "regression_linear_regression";
}

void *turi::supervised::linear_regression::uid(turi::supervised::linear_regression *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised::linear_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/linear_regression.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised::linear_regression::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised::linear_regression::uid(void)::_uid;
}

void sub_224490AAC(_Unwind_Exception *a1)
{
}

turi::supervised::supervised_learning_model_base *turi::supervised::linear_regression::perform_registration(turi::supervised::supervised_learning_model_base *this)
{
  if (!*((unsigned char *)this + 24)) {
    turi::supervised::supervised_learning_model_base::perform_registration(this);
  }
  return this;
}

void *turi::optimization::elastic_net::elastic_net(void *a1, long long **a2, long long **a3)
{
  *a1 = &unk_26D783248;
  *(_OWORD *)(a1 + 1) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  double v6 = a1 + 3;
  uint64_t v7 = (uint64_t)a2[1];
  if (v7)
  {
    uint64_t v8 = *a2;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 1, v7, 1);
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    if (v10 >= 0) {
      uint64_t v11 = a1[2];
    }
    else {
      uint64_t v11 = v10 + 1;
    }
    int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 >= 2)
    {
      int64_t v13 = 0;
      BOOL v14 = (_OWORD *)a1[1];
      uint64_t v15 = v8;
      do
      {
        long long v16 = *v15++;
        *v14++ = v16;
        v13 += 2;
      }
      while (v13 < v12);
    }
    BOOL v17 = v10 <= v12;
    uint64_t v18 = v10 - v12;
    if (!v17)
    {
      uint64_t v19 = v11 >> 1;
      long long v20 = (uint64_t *)&v8[v11 >> 1];
      unint64_t v21 = (void *)(v9 + 16 * v19);
      do
      {
        uint64_t v22 = *v20++;
        *v21++ = v22;
        --v18;
      }
      while (v18);
    }
  }
  unsigned int v24 = *a3;
  uint64_t v23 = (uint64_t)a3[1];
  if (a1[4] != v23)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v6, v23, 1);
    uint64_t v23 = a1[4];
  }
  uint64_t v25 = (_OWORD *)*v6;
  if (v23 >= 0) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = v23 + 1;
  }
  int64_t v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
  if (v23 >= 2)
  {
    int64_t v28 = 0;
    long long v29 = (_OWORD *)*v6;
    uint64_t v30 = v24;
    do
    {
      long long v31 = *v30++;
      *v29++ = v31;
      v28 += 2;
    }
    while (v28 < v27);
  }
  BOOL v32 = __OFSUB__(v23, v27);
  uint64_t v33 = v23 - v27;
  if (!((v33 < 0) ^ v32 | (v33 == 0)))
  {
    uint64_t v34 = v26 >> 1;
    long long v35 = (uint64_t *)&v24[v26 >> 1];
    uint64_t v36 = &v25[v34];
    do
    {
      uint64_t v37 = *v35++;
      *v36++ = v37;
      --v33;
    }
    while (v33);
  }
  a1[5] = a2[1];
  return a1;
}

void sub_224490C5C(_Unwind_Exception *a1)
{
  free(*v1);
  free(*v2);
  _Unwind_Resume(a1);
}

void turi::optimization::elastic_net::~elastic_net(void **this)
{
  *this = &unk_26D783248;
  free(this[3]);
  free(this[1]);
}

{
  uint64_t vars8;

  *this = &unk_26D783248;
  free(this[3]);
  free(this[1]);
  JUMPOUT(0x22A614FA0);
}

double turi::optimization::elastic_net::compute_function_value(uint64_t a1, void *a2)
{
  uint64_t v10 = a1 + 8;
  uint64_t v11 = a2;
  if (!a2[1])
  {
    double v5 = 0.0;
    goto LABEL_5;
  }
  uint64_t v4 = *a2;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = v4;
  uint64_t v15 = &v10;
  double v5 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run((uint64_t)v12);
  uint64_t v6 = a2[1];
  uint64_t v10 = a1 + 24;
  uint64_t v11 = a2;
  if (!v6)
  {
LABEL_5:
    double v8 = 0.0;
    return v5 + v8;
  }
  uint64_t v7 = *a2;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = v7;
  uint64_t v15 = &v10;
  double v8 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run((uint64_t)v12);
  return v5 + v8;
}

void *turi::optimization::elastic_net::compute_gradient(void *result, float64x2_t **a2, float64x2_t **a3)
{
  uint64_t v4 = result;
  double v5 = (float64x2_t *)result[3];
  uint64_t v7 = *a2;
  uint64_t v6 = (uint64_t)a2[1];
  if (a3[1] != (float64x2_t *)v6)
  {
    double result = Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v6, 1);
    uint64_t v6 = (uint64_t)a3[1];
  }
  double v8 = *a3;
  if (v6 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v6 + 1;
  }
  int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 2)
  {
    int64_t v11 = 0;
    int64_t v12 = *a3;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    do
    {
      float64x2_t v15 = *v13++;
      float64x2_t v16 = v15;
      float64x2_t v17 = *v14++;
      float64x2_t v18 = vmulq_f64(v16, v17);
      *v12++ = vaddq_f64(v18, v18);
      v11 += 2;
    }
    while (v11 < v10);
  }
  BOOL v19 = __OFSUB__(v6, v10);
  uint64_t v20 = v6 - v10;
  if (!((v20 < 0) ^ v19 | (v20 == 0)))
  {
    uint64_t v21 = v9 >> 1;
    f64 = v7[v9 >> 1].f64;
    uint64_t v23 = v5[v21].f64;
    unsigned int v24 = v8[v21].f64;
    do
    {
      double v25 = *v23++;
      double v26 = v25;
      double v27 = *f64++;
      *v24++ = v26 * v27 + v26 * v27;
      --v20;
    }
    while (v20);
  }
  uint64_t v28 = v4[5];
  if (v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = *a3;
    while (1)
    {
      double v31 = v30->f64[v29];
      if (v31 > 1.0e-10) {
        break;
      }
      if (v31 < -1.0e-10)
      {
        double v32 = v31 - *(double *)(v4[1] + 8 * v29);
        goto LABEL_18;
      }
LABEL_19:
      if (v28 == ++v29) {
        return result;
      }
    }
    double v32 = v31 + *(double *)(v4[1] + 8 * v29);
LABEL_18:
    v30->f64[v29] = v32;
    goto LABEL_19;
  }
  return result;
}

double turi::optimization::elastic_net::apply_proximal_operator(void *a1, double **a2, double *a3)
{
  uint64_t v3 = a1[5];
  if (v3)
  {
    uint64_t v4 = *a2;
    double v5 = (double *)a1[1];
    double result = 0.0;
    uint64_t v7 = (double *)a1[3];
    do
    {
      double v8 = *v5++;
      double v9 = v8;
      double v10 = *v4 - *a3 * v8;
      if (v10 < 0.0) {
        double v10 = 0.0;
      }
      double v11 = -(*v4 + *a3 * v9);
      if (v11 < 0.0) {
        double v11 = 0.0;
      }
      double v12 = v10 - v11;
      *uint64_t v4 = v12;
      double v13 = *v7++;
      *v4++ = v12 / ((*a3 + *a3) * v13 + 1.0);
      --v3;
    }
    while (v3);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  uint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * fabs(**(double **)(a1 + 32));
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v7 = *(float64x2_t **)(a1 + 32);
  float64x2_t v8 = vmulq_f64(*v4, vabsq_f64(*v7));
  if (v1 >= 4)
  {
    int64_t v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v10 = vmulq_f64(v4[1], vabsq_f64(v7[1]));
    if ((unint64_t)v1 >= 8)
    {
      double v11 = v7 + 3;
      double v12 = v4 + 3;
      uint64_t v13 = 4;
      do
      {
        float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v12[-1], vabsq_f64(v11[-1])));
        float64x2_t v14 = *v12;
        v12 += 2;
        float64x2_t v15 = v14;
        float64x2_t v16 = *v11;
        v11 += 2;
        float64x2_t v10 = vaddq_f64(v10, vmulq_f64(v15, vabsq_f64(v16)));
        v13 += 4;
      }
      while (v13 < v9);
    }
    float64x2_t v8 = vaddq_f64(v10, v8);
    if (v6 > v9) {
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), vabsq_f64(*(float64x2_t *)((char *)v7 + 8 * v9))));
    }
  }
  double result = vaddvq_f64(v8);
  BOOL v17 = v1 <= v6;
  uint64_t v18 = v1 - v6;
  if (!v17)
  {
    uint64_t v19 = v3 >> 1;
    f64 = v4[v19].f64;
    uint64_t v21 = v7[v19].f64;
    do
    {
      double v22 = *v21++;
      double v23 = fabs(v22);
      double v24 = *f64++;
      double result = result + v24 * v23;
      --v18;
    }
    while (v18);
  }
  return result;
}

double **Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>,Eigen::Diagonal<Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>> const,0> const>>(double **a1, uint64_t *a2)
{
  v10[6] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  if (*(void *)(*a2 + 16) >= *(void *)(*a2 + 8)) {
    uint64_t v4 = *(void *)(*a2 + 8);
  }
  else {
    uint64_t v4 = *(void *)(*a2 + 16);
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v4, 1);
  Eigen::internal::unary_evaluator<Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::internal::IndexBased,double>::unary_evaluator(v10, a2);
  if (*(void *)(*a2 + 16) >= *(void *)(*a2 + 8)) {
    uint64_t v5 = *(void *)(*a2 + 8);
  }
  else {
    uint64_t v5 = *(void *)(*a2 + 16);
  }
  if (a1[1] != (double *)v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v5, 1);
    uint64_t v5 = (uint64_t)a1[1];
  }
  if (v5 >= 1)
  {
    int64_t v6 = *a1;
    uint64_t v7 = (double *)v10[0];
    uint64_t v8 = 8 * v10[1] + 8;
    do
    {
      *v6++ = sqrt(*v7);
      uint64_t v7 = (double *)((char *)v7 + v8);
      --v5;
    }
    while (v5);
  }
  free((void *)v10[2]);
  return a1;
}

void sub_22449118C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  free(*v14);
  _Unwind_Resume(a1);
}

void *Eigen::internal::unary_evaluator<Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::internal::IndexBased,double>::unary_evaluator(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = -1;
  uint64_t v4 = *(void *)(*a2 + 8);
  uint64_t v5 = *(void *)(*a2 + 16);
  a1[2] = 0;
  int64_t v6 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1 + 2, v5 * v4, v4, v5);
  uint64_t v8 = a1[3];
  *a1 = a1[2];
  a1[1] = v8;
  Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::internal::assign_op<double,double>,Eigen::internal::Dense2Dense,void>::run(v6, a2);
  return a1;
}

void sub_224491270(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::internal::assign_op<double,double>,Eigen::internal::Dense2Dense,void>::run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 8);
  uint64_t v5 = *(void *)(*a2 + 16);
  if (a1[1] != v4 || a1[2] != v5)
  {
    if (v4) {
      BOOL v8 = v5 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      float64x2_t v10 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v10, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v5 * v4, v4, v5);
    uint64_t v3 = *a2;
  }
  Eigen::internal::compute_inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,-1>::run(v3, a1);
}

void Eigen::internal::compute_inverse<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,-1>::run(uint64_t a1, uint64_t *a2)
{
  Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>((uint64_t)v3, a1);
  Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>>::Inverse((uint64_t)&v4, (uint64_t)v3);
  long long v8 = v5;
  v9[0] = &v4;
  v9[1] = &v8;
  Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>,Eigen::internal::assign_op<double,double>,Eigen::internal::Dense2Dense,void>::run(a2, (uint64_t)v9);
  free(v7);
  free(v6);
  free(v4);
  free(v3[5]);
  free(v3[3]);
  free(v3[0]);
}

void sub_2244913C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void **Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>>::~Inverse(void **a1)
{
  return a1;
}

uint64_t Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)a1, v5 * v4, v4, v5);
  unint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((void *)(a1 + 24), v7);
  unint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((void *)(a1 + 40), v8);
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::compute<Eigen::Matrix<double,-1,-1,0,-1,-1>>((void *)a1, (long long **)a2);
  return a1;
}

void sub_2244914EC(_Unwind_Exception *a1)
{
  free(*v3);
  free(*v2);
  free(*v1);
  _Unwind_Resume(a1);
}

void *Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::compute<Eigen::Matrix<double,-1,-1,0,-1,-1>>(void *a1, long long **a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (uint64_t)a2[1];
  uint64_t v5 = (uint64_t)a2[2];
  if (a1[1] != v3 || a1[2] != v5)
  {
    if (v3) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v5 < v3)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      double v24 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v24, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v5 * v3, v3, v5);
    uint64_t v3 = a1[1];
    uint64_t v5 = a1[2];
  }
  unint64_t v8 = (_OWORD *)*a1;
  uint64_t v9 = v3 * v5;
  if (v3 * v5 >= 0) {
    uint64_t v10 = v3 * v5;
  }
  else {
    uint64_t v10 = v9 + 1;
  }
  int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (v9 >= 2)
  {
    int64_t v12 = 0;
    uint64_t v13 = (_OWORD *)*a1;
    float64x2_t v14 = v4;
    do
    {
      long long v15 = *v14++;
      *v13++ = v15;
      v12 += 2;
    }
    while (v12 < v11);
  }
  BOOL v16 = v9 <= v11;
  uint64_t v17 = v9 - v11;
  if (!v16)
  {
    uint64_t v18 = v10 >> 1;
    uint64_t v19 = (uint64_t *)&v4[v10 >> 1];
    uint64_t v20 = &v8[v18];
    do
    {
      uint64_t v21 = *v19++;
      *v20++ = v21;
      --v17;
    }
    while (v17);
  }
  Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::compute((uint64_t)a1);
  return a1;
}

uint64_t *Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::compute(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v10 = a1;
  v7[0] = (void *)a1;
  unint64_t v8 = &v9;
  double v2 = Eigen::internal::redux_evaluator<Eigen::PartialReduxExpr<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::internal::member_sum<double>,0>>::coeffByOuterInner(v7, 0, 0);
  if (*(uint64_t *)(*((void *)v8 + 1) + 16) >= 2)
  {
    uint64_t v3 = 1;
    do
    {
      double v4 = Eigen::internal::redux_evaluator<Eigen::PartialReduxExpr<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::internal::member_sum<double>,0>>::coeffByOuterInner(v7, 0, v3);
      if (v2 < v4) {
        double v2 = v4;
      }
      ++v3;
    }
    while (v3 < *(void *)(*((void *)v8 + 1) + 16));
  }
  *(double *)(a1 + 56) = v2;
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((void *)(a1 + 40), *(void *)(a1 + 8));
  LODWORD(v7[0]) = 0;
  Eigen::internal::partial_lu_impl<double,0,int>::blocked_lu(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 40), v7, 256);
  if ((uint64_t)v7[0]) {
    char v5 = -1;
  }
  else {
    char v5 = 1;
  }
  *(unsigned char *)(a1 + 64) = v5;
  double result = Eigen::PermutationBase<Eigen::PermutationMatrix<-1,-1,int>>::operator=<Eigen::Transpositions<-1,-1,int>>((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40));
  *(unsigned char *)(a1 + 65) = 1;
  return result;
}

double Eigen::internal::redux_evaluator<Eigen::PartialReduxExpr<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::internal::member_sum<double>,0>>::coeffByOuterInner(void **a1, uint64_t a2, uint64_t a3)
{
  unsigned char v7[8] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  v6[0] = v3;
  v6[2] = 0;
  void v6[3] = a3;
  uint64_t v4 = v3[1];
  void v6[4] = v4;
  if (!v4) {
    return 0.0;
  }
  void v7[2] = *v3;
  v7[3] = v4;
  v7[4] = 0;
  void v7[5] = a3;
  v7[6] = v4 * a3;
  v7[7] = v6;
  return Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Block<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,-1,1,true>>,3,0>::run(v7);
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Block<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,-1,1,true>>,3,0>::run(void *a1)
{
  uint64_t v1 = a1[6];
  uint64_t v2 = *(void *)(a1[7] + 32);
  if (v2 >= 0) {
    uint64_t v3 = *(void *)(a1[7] + 32);
  }
  else {
    uint64_t v3 = v2 + 3;
  }
  if (v2 >= 0) {
    uint64_t v4 = *(void *)(a1[7] + 32);
  }
  else {
    uint64_t v4 = v2 + 1;
  }
  uint64_t v5 = a1[2];
  BOOL v6 = (float64x2_t *)(v5 + 8 * v1);
  if ((unint64_t)(v2 + 1) < 3) {
    return fabs(v6->f64[0]);
  }
  int64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  float64x2_t v9 = vabsq_f64(*v6);
  if (v2 >= 4)
  {
    int64_t v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v11 = (float64x2_t *)(v5 + 8 * v1);
    float64x2_t v12 = vabsq_f64(v11[1]);
    if ((unint64_t)v2 >= 8)
    {
      uint64_t v13 = v11 + 3;
      uint64_t v14 = 4;
      do
      {
        float64x2_t v9 = vaddq_f64(v9, vabsq_f64(v13[-1]));
        float64x2_t v15 = *v13;
        v13 += 2;
        float64x2_t v12 = vaddq_f64(v12, vabsq_f64(v15));
        v14 += 4;
      }
      while (v14 < v10);
    }
    float64x2_t v9 = vaddq_f64(v12, v9);
    if (v8 > v10) {
      float64x2_t v9 = vaddq_f64(v9, vabsq_f64(*(float64x2_t *)(v5 + 8 * (v1 + v10))));
    }
  }
  double result = vaddvq_f64(v9);
  BOOL v16 = v2 <= v8;
  uint64_t v17 = v2 - v8;
  if (!v16)
  {
    uint64_t v18 = (double *)(v5 + 16 * (v4 >> 1) + 8 * v1);
    do
    {
      double v19 = *v18++;
      double result = result + fabs(v19);
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t Eigen::internal::partial_lu_impl<double,0,int>::blocked_lu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  *(void *)&long long v107 = a3;
  *((void *)&v107 + 1) = a1;
  uint64_t v108 = a2;
  *(void *)&long long v109 = a3;
  *((void *)&v109 + 1) = a4;
  uint64_t v110 = a2;
  long long v111 = 0uLL;
  uint64_t v112 = a4;
  if (a2 >= a1) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = a2;
  }
  if (v8 > 16)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = ((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF0;
    if (!v12) {
      uint64_t v12 = 8;
    }
    uint64_t v48 = v12;
    if (v12 >= a7) {
      uint64_t v13 = a7;
    }
    else {
      uint64_t v13 = v12;
    }
    *a6 = 0;
    uint64_t v46 = a7;
    uint64_t v14 = 8 * a4;
    uint64_t v43 = 8 * v13;
    uint64_t v44 = v13;
    uint64_t v15 = v8;
    uint64_t v53 = -1;
    uint64_t v45 = v8;
    while (1)
    {
      uint64_t v55 = v10;
      long long v105 = v107;
      long long v103 = v109;
      long long v114 = v111;
      long long v95 = v107;
      long long v97 = v109;
      long long v99 = v111;
      long long v91 = v107;
      long long v89 = v109;
      long long v113 = v111;
      uint64_t v16 = v48;
      if (v48 >= a7) {
        uint64_t v16 = a7;
      }
      uint64_t v54 = v15;
      if (v16 >= v15) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = v16;
      }
      if (v13 >= v8 - v11) {
        uint64_t v18 = v8 - v11;
      }
      else {
        uint64_t v18 = v13;
      }
      uint64_t v19 = a1 - v11;
      uint64_t v20 = v18 + v11;
      uint64_t v21 = v8 - (v18 + v11);
      uint64_t v22 = (v18 + v11) * a4;
      uint64_t v23 = a3 + 8 * v11;
      uint64_t v106 = v108;
      uint64_t v104 = v110;
      *(void *)&long long v93 = v23 + 8 * v22;
      *((void *)&v93 + 1) = v18;
      uint64_t v96 = v108;
      uint64_t v98 = v110;
      uint64_t v100 = v112;
      uint64_t v94 = v21;
      *(void *)&long long v101 = v11;
      *((void *)&v101 + 1) = v18 + v11;
      uint64_t v102 = v112;
      uint64_t v92 = v108;
      uint64_t v90 = v110;
      uint64_t v50 = a3 + 8 * (v18 + v11);
      v79[0] = v50 + 8 * v22;
      v79[1] = a1 - v11 - v18;
      long long v80 = v107;
      uint64_t v81 = v108;
      long long v82 = v109;
      uint64_t v83 = v110;
      uint64_t v85 = v112;
      long long v84 = v111;
      uint64_t v52 = v11 * a4;
      v79[2] = v21;
      uint64_t v86 = v18 + v11;
      uint64_t v87 = v18 + v11;
      uint64_t v88 = v112;
      int v78 = 0;
      uint64_t v24 = Eigen::internal::partial_lu_impl<double,0,int>::blocked_lu(a1 - v11, v18, a3 + 8 * (v11 * a4 + v11));
      uint64_t v25 = v53;
      if (v53 == -1 && v24 > -1) {
        uint64_t v25 = v24 + v11;
      }
      uint64_t v53 = v25;
      *a6 += v78;
      if (v11 < v20) {
        break;
      }
      uint64_t v27 = v55;
      if (v19 != v18) {
        goto LABEL_38;
      }
LABEL_41:
      uint64_t v13 = v44;
      v11 += v44;
      uint64_t v10 = v27 + v43;
      uint64_t v15 = v54 - v44;
      uint64_t v8 = v45;
      a7 = v46;
      if (v11 >= v45) {
        return v53;
      }
    }
    uint64_t v27 = v55;
    uint64_t v28 = v55;
    uint64_t v29 = v11;
    do
    {
      int v30 = *(_DWORD *)(a5 + 4 * v29);
      *(_DWORD *)(a5 + 4 * v29) = v30 + v11;
      if (v11 >= 1)
      {
        uint64_t v31 = (int)v11 + v30;
        uint64_t v32 = a3;
        uint64_t v33 = v11;
        do
        {
          uint64_t v34 = *(void *)(v32 + v28);
          *(void *)(v32 + v28) = *(void *)(v32 + 8 * v31);
          *(void *)(v32 + 8 * v31) = v34;
          v32 += v14;
          --v33;
        }
        while (v33);
      }
      ++v29;
      v28 += 8;
    }
    while (v29 < v20);
    uint64_t v35 = v55;
    uint64_t v36 = v11;
    if (v19 == v18) {
      goto LABEL_41;
    }
    do
    {
      if (v21 >= 1)
      {
        uint64_t v37 = *(int *)(a5 + 4 * v36);
        uint64_t v38 = a3 + v14 * (v17 + v11);
        uint64_t v39 = v54 - v17;
        do
        {
          uint64_t v40 = *(void *)(v38 + v35);
          *(void *)(v38 + v35) = *(void *)(v38 + 8 * v37);
          *(void *)(v38 + 8 * v37) = v40;
          v38 += v14;
          --v39;
        }
        while (v39);
      }
      ++v36;
      v35 += 8;
    }
    while (v36 < v20);
LABEL_38:
    uint64_t v56 = v23 + 8 * v52;
    uint64_t v57 = v18;
    long long v59 = v105;
    uint64_t v60 = v106;
    long long v61 = v103;
    uint64_t v62 = v104;
    uint64_t v41 = a4;
    long long v63 = v114;
    uint64_t v58 = v18;
    uint64_t v64 = a4;
    uint64_t v65 = v11;
    uint64_t v66 = v11;
    uint64_t v67 = a4;
    if (v18)
    {
      Eigen::internal::triangular_solver_selector<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,1,5,0,-1>::run(&v56, (uint64_t *)&v93);
      uint64_t v41 = a4;
    }
    uint64_t v56 = v50 + 8 * v52;
    uint64_t v57 = a1 - v11 - v18;
    long long v59 = v91;
    uint64_t v60 = v92;
    long long v61 = v89;
    uint64_t v62 = v90;
    long long v63 = v113;
    uint64_t v58 = v18;
    uint64_t v64 = v41;
    uint64_t v65 = v18 + v11;
    uint64_t v66 = v11;
    uint64_t v67 = v41;
    uint64_t v69 = v94;
    long long v68 = v93;
    uint64_t v71 = v96;
    long long v70 = v95;
    uint64_t v73 = v98;
    long long v72 = v97;
    uint64_t v75 = v100;
    long long v74 = v99;
    uint64_t v77 = v102;
    long long v76 = v101;
    Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,8>::subTo<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>(v79, (uint64_t)&v56, (uint64_t)&v68);
    uint64_t v27 = v55;
    goto LABEL_41;
  }
  return Eigen::internal::partial_lu_impl<double,0,int>::unblocked_lu((uint64_t *)&v107, a5, a6);
}

uint64_t Eigen::internal::partial_lu_impl<double,0,int>::unblocked_lu(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = a1[1];
  uint64_t v53 = a1[2];
  if (v53 >= v3) {
    uint64_t v4 = a1[1];
  }
  else {
    uint64_t v4 = a1[2];
  }
  *a3 = 0;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v51 = a1 + 3;
    uint64_t v52 = a1 + 7;
    uint64_t v9 = -v3;
    uint64_t v10 = 1 - v3;
    uint64_t v54 = -1;
    uint64_t v11 = v3;
    while (1)
    {
      uint64_t v12 = v3 + ~v8;
      uint64_t v13 = a1[9];
      uint64_t v14 = v13 * v8;
      uint64_t v15 = *a1;
      uint64_t v16 = a1[1];
      uint64_t v17 = *a1 + 8 * v13 * v8;
      double v18 = *(double *)(v17 + 8 * (v16 - (v3 - v8)));
      uint64_t v19 = v13 * v7;
      if (v3 - v8 < 2)
      {
        *(_DWORD *)(a2 + 4 * v8) = v8;
        if (v18 == 0.0) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v20 = 0;
        double v21 = fabs(v18);
        uint64_t v22 = 1;
        double v23 = v21;
        do
        {
          double v24 = fabs(*(double *)(v15 + v19 + 8 * (v16 + v9) + 8 * v22));
          if (v24 > v23)
          {
            uint64_t v20 = v22;
            double v21 = v24;
            double v23 = v24;
          }
          ++v22;
        }
        while (v11 != v22);
        *(_DWORD *)(a2 + 4 * v8) = v20 + v8;
        if (v21 == 0.0)
        {
LABEL_35:
          uint64_t v41 = v54;
          if (v54 == -1) {
            uint64_t v41 = v8;
          }
          uint64_t v54 = v41;
          goto LABEL_38;
        }
        if (v20)
        {
          uint64_t v25 = a1[2];
          if (v25 >= 1)
          {
            uint64_t v26 = v8 + v20;
            uint64_t v27 = 8 * a1[9];
            uint64_t v28 = v15;
            do
            {
              uint64_t v29 = *(void *)(v28 + v7);
              *(void *)(v28 + v7) = *(void *)(v28 + 8 * v26);
              *(void *)(v28 + 8 * v26) = v29;
              v28 += v27;
              --v25;
            }
            while (v25);
          }
          ++*a3;
        }
      }
      unint64_t v30 = v17 + 8 * (v16 - v12);
      uint64_t v31 = *(uint64_t *)(v15 + 8 * (v14 + v8));
      uint64_t v32 = (v30 >> 3) & 1;
      if (v32 >= v12) {
        uint64_t v32 = v3 + ~v8;
      }
      if ((v30 & 7) != 0) {
        uint64_t v32 = v3 + ~v8;
      }
      uint64_t v33 = v12 - v32;
      if (v12 >= v32) {
        uint64_t v34 = v12 - v32;
      }
      else {
        uint64_t v34 = v33 + 1;
      }
      if (v32 >= 1)
      {
        uint64_t v35 = (double *)(v15 + v19 + 8 * (v16 + v10));
        uint64_t v36 = v32;
        do
        {
          double *v35 = *v35 / *(double *)&v31;
          ++v35;
          --v36;
        }
        while (v36);
      }
      uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFFELL) + v32;
      if (v33 > 1)
      {
        float64x2_t v38 = (float64x2_t)vdupq_lane_s64(v31, 0);
        uint64_t v39 = (float64x2_t *)(v15 + v19 + 8 * v32 + 8 * (v16 + v10));
        do
        {
          *uint64_t v39 = vdivq_f64(*v39, v38);
          ++v39;
          v32 += 2;
        }
        while (v32 < v37);
      }
      if (v37 < v12)
      {
        uint64_t v40 = v15 + v19 + 8 * (v16 + v10);
        do
        {
          *(double *)(v40 + 8 * v37) = *(double *)(v40 + 8 * v37) / *(double *)&v31;
          ++v37;
        }
        while (v11 - 1 != v37);
      }
LABEL_38:
      if (v8 < v3 - 1)
      {
        uint64_t v42 = v53 + ~v8;
        uint64_t v43 = *a1;
        uint64_t v44 = a1[9];
        uint64_t v45 = *a1 + 8 * v44 * v8;
        long long v71 = *(_OWORD *)v51;
        uint64_t v72 = v51[2];
        uint64_t v46 = a1[1];
        uint64_t v47 = a1[2];
        long long v81 = *(_OWORD *)a1;
        uint64_t v82 = v47;
        long long v83 = v71;
        uint64_t v84 = v72;
        uint64_t v48 = (v47 - v42) * v44;
        uint64_t v65 = v45 + 8 * (v46 - v12);
        uint64_t v66 = v3 + ~v8;
        uint64_t v67 = v45;
        uint64_t v68 = v46;
        uint64_t v70 = a1[2];
        long long v69 = *(_OWORD *)a1;
        long long v73 = *(_OWORD *)v52;
        uint64_t v74 = v44;
        uint64_t v75 = 0;
        uint64_t v76 = v8;
        uint64_t v77 = v44;
        uint64_t v78 = v46 - v12;
        uint64_t v79 = v44;
        v80[0] = v43 + 8 * v8 + 8 * v48;
        v80[2] = v42;
        v80[3] = v43 + 8 * v8;
        v80[5] = v47;
        long long v85 = v73;
        uint64_t v86 = v44;
        uint64_t v87 = v8;
        uint64_t v88 = 0;
        uint64_t v89 = 1;
        uint64_t v90 = v47 - v42;
        uint64_t v91 = 1;
        v55[0] = v43 + 8 * (v46 - v12) + 8 * v48;
        v55[1] = v66;
        long long v56 = *(_OWORD *)a1;
        uint64_t v57 = a1[2];
        long long v58 = *(_OWORD *)v51;
        uint64_t v59 = v51[2];
        uint64_t v61 = v52[2];
        long long v60 = *(_OWORD *)v52;
        v55[2] = v42;
        uint64_t v62 = v46 - v12;
        uint64_t v63 = v47 - v42;
        uint64_t v64 = v61;
        Eigen::internal::outer_product_selector_run<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,5>::sub>(v55, &v65, (uint64_t)v80, (uint64_t)v92);
      }
      ++v8;
      --v11;
      v7 += 8;
      ++v9;
      ++v10;
      if (v8 == v4) {
        return v54;
      }
    }
  }
  return -1;
}

void Eigen::internal::outer_product_selector_run<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,5>::sub>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)a3;
  uint64_t v5 = *(void *)(a3 + 120);
  uint64_t v21 = a2[1];
  uint64_t v22 = *a2;
  long long v62 = *(_OWORD *)(a2 + 3);
  long long v60 = *((_OWORD *)a2 + 3);
  uint64_t v61 = a2[8];
  long long v40 = *(_OWORD *)(a2 + 9);
  uint64_t v41 = a2[11];
  long long v6 = *(_OWORD *)(a2 + 13);
  uint64_t v59 = a2[15];
  long long v58 = v6;
  long long v7 = *((_OWORD *)a2 + 8);
  uint64_t v39 = a2[18];
  long long v38 = v7;
  uint64_t v20 = a1[2];
  if (v20 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v19 = a2[19];
    uint64_t v18 = a2[21];
    uint64_t v17 = a1 + 3;
    uint64_t v16 = a1 + 6;
    uint64_t v10 = a1 + 10;
    uint64_t v11 = a1 + 13;
    uint64_t v15 = 8 * v5;
    do
    {
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[2];
      v24[0] = *a1 + 8 * a1[15] * v9;
      v24[1] = v12;
      long long v25 = *(_OWORD *)a1;
      uint64_t v26 = v13;
      long long v27 = *(_OWORD *)v17;
      uint64_t v28 = v17[2];
      uint64_t v30 = v16[2];
      long long v29 = *(_OWORD *)v16;
      long long v14 = *(_OWORD *)v10;
      uint64_t v32 = v10[2];
      long long v31 = v14;
      uint64_t v34 = v11[2];
      long long v33 = *(_OWORD *)v11;
      uint64_t v35 = 0;
      uint64_t v36 = v9;
      uint64_t v37 = v34;
      *(void *)&long long v14 = *v4;
      uint64_t v43 = v21;
      uint64_t v44 = v14;
      uint64_t v45 = v22;
      uint64_t v46 = v21;
      long long v47 = v62;
      long long v48 = v60;
      uint64_t v49 = v61;
      long long v50 = v40;
      uint64_t v51 = v41;
      uint64_t v53 = v59;
      long long v52 = v58;
      uint64_t v55 = v39;
      long long v54 = v38;
      uint64_t v56 = v19;
      uint64_t v57 = v18;
      Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,5>::sub::operator()<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false> const>>(a4, v24, (uint64_t)v42);
      ++v9;
      uint64_t v4 = (void *)((char *)v4 + v15);
    }
    while (v20 != v9);
  }
}

void Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false>,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,1,-1,false>,1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,5>::sub::operator()<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,1,true>,-1,1,false> const>>(uint64_t a1, void *a2, uint64_t a3)
{
  double v3 = *(double *)(a3 + 24);
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v5 = (double *)*a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = (*a2 >> 3) & 1;
  if (v7 >= v6) {
    uint64_t v7 = a2[1];
  }
  if ((v5 & 7) != 0) {
    uint64_t v7 = a2[1];
  }
  uint64_t v8 = v6 - v7;
  if (v6 >= v7) {
    uint64_t v9 = v6 - v7;
  }
  else {
    uint64_t v9 = v8 + 1;
  }
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 1)
  {
    uint64_t v11 = (double *)*a2;
    uint64_t v12 = *(double **)(a3 + 32);
    uint64_t v13 = v7;
    do
    {
      double v14 = *v12++;
      double *v11 = *v11 - v3 * v14;
      ++v11;
      --v13;
    }
    while (v13);
  }
  int64_t v15 = v10 + v7;
  if (v8 > 1)
  {
    uint64_t v16 = (float64x2_t *)(v4 + 8 * v7);
    uint64_t v17 = v7;
    uint64_t v18 = (float64x2_t *)&v5[v7];
    do
    {
      float64x2_t v19 = *v16++;
      *uint64_t v18 = vsubq_f64(*v18, vmulq_n_f64(v19, v3));
      ++v18;
      v17 += 2;
    }
    while (v17 < v15);
  }
  if (v15 < v6)
  {
    unint64_t v20 = v8 - v10;
    uint64_t v21 = 16 * (v9 >> 1) + 8 * v7;
    uint64_t v22 = (double *)(v4 + v21);
    double v23 = (double *)((char *)v5 + v21);
    do
    {
      double v24 = *v22++;
      *double v23 = *v23 - v3 * v24;
      ++v23;
      --v20;
    }
    while (v20);
  }
}

void Eigen::internal::triangular_solver_selector<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,1,5,0,-1>::run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v5;
  uint64_t v10 = v6;
  v11[0] = v4;
  uint64_t v12 = v6;
  Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,4,long>(v11, &v9, &v12, 1);
  v11[1] = v11[0] * v9;
  v11[2] = v10 * v11[0];
  Eigen::internal::triangular_solve_matrix<double,long,1,5,false,0,0>::run(v4, v6, *a1, a1[15], *a2, a2[15], (unint64_t *)&v7);
  free(v7);
  free(v8);
}

void sub_22449267C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
}

void Eigen::internal::triangular_solve_matrix<double,long,1,5,false,0,0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v103 = a4;
  uint64_t v101 = a3;
  uint64_t v120 = *MEMORY[0x263EF8340];
  uint64_t v7 = a7[4];
  if ((uint64_t)a7[2] >= a1) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = a7[2];
  }
  unint64_t v9 = v8 * v7;
  if ((unint64_t)(v8 * v7) >> 61) {
    goto LABEL_81;
  }
  uint64_t v14 = a1;
  unint64_t v15 = *a7;
  unint64_t v16 = v15;
  uint64_t v98 = v8;
  if (v15) {
    goto LABEL_10;
  }
  size_t v17 = 8 * v9;
  if (v9 <= 0x4000)
  {
    uint64_t v18 = (char *)&v78 - ((MEMORY[0x270FA5388](v17, v17 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v18, v19);
    unint64_t v15 = 0;
    unint64_t v20 = (unint64_t)(v18 + 15);
    uint64_t v8 = v98;
    unint64_t v16 = v20 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_10;
  }
  uint64_t v21 = malloc_type_malloc(v17, 0x1E76AA36uLL);
  if (!v21)
  {
LABEL_81:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    long long v73 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v73, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v16 = (unint64_t)v21;
  unint64_t v15 = *a7;
LABEL_10:
  unint64_t v22 = v7 * a2;
  unint64_t v102 = v16;
  if (v15) {
    double v23 = 0;
  }
  else {
    double v23 = (void *)v16;
  }
  long long v80 = v23;
  if (v22 >> 61)
  {
    uint64_t v74 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v75 = std::bad_alloc::bad_alloc(v74);
    __cxa_throw(v75, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v24 = a7[1];
  uint64_t v25 = v24;
  if (!v24)
  {
    size_t v26 = 8 * v22;
    if (v22 > 0x4000)
    {
      uint64_t v25 = (uint64_t)malloc_type_malloc(v26, 0x1E76AA36uLL);
      if (!v25)
      {
        uint64_t v76 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v77 = std::bad_alloc::bad_alloc(v76);
        __cxa_throw(v77, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      uint64_t v24 = a7[1];
    }
    else
    {
      long long v27 = (char *)&v78 - ((MEMORY[0x270FA5388](v26, v26 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
      bzero(v27, v28);
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(v27 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  if (v24) {
    long long v29 = 0;
  }
  else {
    long long v29 = (void *)v25;
  }
  uint64_t v79 = v29;
  {
    Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2246E7700;
    qword_268067410 = 0x80000;
  }
  unint64_t v81 = v7 * a2;
  unint64_t v82 = v9;
  uint64_t v97 = v25;
  if (a2 < 1)
  {
    int64_t v31 = 0;
  }
  else
  {
    if (a6 <= v14) {
      uint64_t v30 = v14;
    }
    else {
      uint64_t v30 = a6;
    }
    int64_t v31 = (*((void *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1)
         / (unint64_t)(32 * v30)
         + (((*((void *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1)
            / (unint64_t)(32 * v30)) & 0x8000000000000000) != 0
          ? 3uLL
          : 0)) & 0xFFFFFFFFFFFFFFFCLL;
  }
  if (v31 <= 4) {
    uint64_t v32 = 4;
  }
  else {
    uint64_t v32 = v31;
  }
  if (v14 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v88 = a5 + 8;
    uint64_t v84 = 8 * v7;
    uint64_t v92 = 8 * a6 * v32;
    uint64_t v91 = v101 + 8;
    uint64_t v83 = 8 * (v7 + v7 * v103);
    uint64_t v105 = 48 * v103 + 48;
    uint64_t v34 = 8 * v103 + 8;
    uint64_t v89 = v14 - v7;
    uint64_t v94 = a5 + 8 * v7;
    uint64_t v96 = 8 * v8;
    uint64_t v95 = v101 + 8 * v7;
    uint64_t v35 = v14;
    uint64_t v93 = v32;
    uint64_t v99 = a2;
    uint64_t v85 = v14;
    uint64_t v87 = v7;
    uint64_t v104 = v34;
    while (1)
    {
      uint64_t v86 = v35;
      if (v7 >= v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = v7;
      }
      uint64_t v90 = v36;
      if (v7 >= v14 - v33) {
        uint64_t v37 = v14 - v33;
      }
      else {
        uint64_t v37 = v7;
      }
      uint64_t v110 = v37;
      if (a2 >= 1)
      {
        uint64_t v38 = 0;
        uint64_t v100 = v88;
        uint64_t v107 = v33;
        do
        {
          uint64_t v39 = a2 - v38;
          if (v32 >= v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = v32;
          }
          uint64_t v111 = v40;
          if (v37 >= 1)
          {
            uint64_t v41 = 0;
            uint64_t v42 = v111 + v38;
            uint64_t v108 = v38 * a6;
            uint64_t v109 = v97 + 8 * v38 * v37;
            uint64_t v43 = v91;
            uint64_t v44 = v100;
            uint64_t v45 = v90;
            do
            {
              uint64_t v112 = v45 - 6;
              if (v45 >= 6) {
                uint64_t v45 = 6;
              }
              if (v45 <= 1) {
                uint64_t v45 = 1;
              }
              if (v37 - v41 >= 6) {
                uint64_t v46 = 6;
              }
              else {
                uint64_t v46 = v37 - v41;
              }
              uint64_t v47 = v41 + v33;
              uint64_t v48 = v37 - v41;
              if (v37 - v41 >= 1)
              {
                uint64_t v49 = 0;
                uint64_t v50 = v43;
                uint64_t v51 = v44;
                do
                {
                  if (v39 >= 1)
                  {
                    uint64_t v52 = v46 + ~v49;
                    uint64_t v53 = v51;
                    uint64_t v54 = v38;
                    do
                    {
                      if (v52 >= 1)
                      {
                        uint64_t v55 = 0;
                        double v56 = -*(double *)(a5 + 8 * (v54 * a6 + v47 + v49));
                        do
                        {
                          *(double *)(v53 + 8 * v55) = *(double *)(v53 + 8 * v55) + v56 * *(double *)(v50 + 8 * v55);
                          ++v55;
                        }
                        while (v55 < v52);
                      }
                      ++v54;
                      v53 += 8 * a6;
                    }
                    while (v54 < v42);
                  }
                  ++v49;
                  v51 += 8;
                  v50 += v34;
                }
                while (v49 != v45);
              }
              uint64_t v113 = v44;
              uint64_t v114 = v43;
              uint64_t v115 = a5 + 8 * (v47 + v108);
              uint64_t v116 = a6;
              uint64_t v57 = v41;
              Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,4,0,false,true>::operator()((uint64_t)&v117, v109, &v115, v46, v111, v37, v41);
              uint64_t v58 = v48 - v46;
              uint64_t v33 = v107;
              if (v48 - v46 >= 1)
              {
                uint64_t v59 = v46 + v47;
                uint64_t v60 = v46 + v47 + v47 * v103;
                uint64_t v61 = v102;
                uint64_t v115 = v101 + 8 * v60;
                uint64_t v116 = v103;
                uint64_t v106 = v58;
                Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v118, v102, &v115, v46, v58);
                uint64_t v115 = a5 + 8 * (v59 + v108);
                uint64_t v116 = a6;
                Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(-1.0, (uint64_t)&v119, &v115, v61, v109, v106, v46, v111, v46, v110, 0, v57);
                uint64_t v33 = v107;
              }
              uint64_t v41 = v57 + 6;
              uint64_t v44 = v113 + 48;
              uint64_t v34 = v104;
              uint64_t v43 = v114 + v105;
              uint64_t v45 = v112;
              uint64_t v37 = v110;
            }
            while (v41 < v110);
          }
          uint64_t v32 = v93;
          v38 += v93;
          a2 = v99;
          v100 += v92;
        }
        while (v38 < v99);
      }
      uint64_t v62 = v33 + v87;
      uint64_t v14 = v85;
      uint64_t v63 = v98;
      if (v62 >= v85) {
        break;
      }
      uint64_t v64 = 0;
      uint64_t v65 = v89;
      uint64_t v107 = v62;
      uint64_t v66 = v62;
      do
      {
        uint64_t v67 = v65 - v63;
        if (v65 >= v63) {
          uint64_t v68 = v63;
        }
        else {
          uint64_t v68 = v65;
        }
        if (v68 >= 1)
        {
          uint64_t v114 = v65 - v63;
          uint64_t v69 = v14;
          uint64_t v115 = v95 + v64;
          uint64_t v70 = v102;
          uint64_t v116 = v103;
          uint64_t v71 = v37;
          Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v118, v102, &v115, v37, v68);
          uint64_t v115 = v94 + v64;
          uint64_t v116 = a6;
          Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(-1.0, (uint64_t)&v119, &v115, v70, v97, v68, v71, v99, -1, -1, 0, 0);
          uint64_t v14 = v69;
          uint64_t v37 = v110;
          uint64_t v67 = v114;
        }
        uint64_t v63 = v98;
        v66 += v98;
        v64 += v96;
        uint64_t v65 = v67;
      }
      while (v66 < v14);
      uint64_t v7 = v87;
      uint64_t v35 = v86 - v87;
      v88 += v84;
      v91 += v83;
      v89 -= v87;
      v94 += v84;
      v95 += v83;
      uint64_t v32 = v93;
      uint64_t v33 = v107;
      a2 = v99;
    }
  }
  if (v81 > 0x4000) {
    free(v79);
  }
  if (v82 > 0x4000) {
    free(v80);
  }
}

void sub_224492E8C(_Unwind_Exception *exception_object)
{
  if (v1 > 0x4000) {
    free(*(void **)(v2 - 400));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,4,long>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  {
    uint64_t v38 = result;
    uint64_t v35 = a3;
    uint64_t v36 = a2;
    uint64_t v37 = a4;
    a2 = v36;
    a4 = v37;
    a3 = v35;
    int v34 = v33;
    double result = v38;
    if (v34)
    {
      Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2246E7700;
      qword_268067410 = 0x80000;
      a2 = v36;
      a4 = v37;
      double result = v38;
      a3 = v35;
    }
  }
  unint64_t v4 = *((void *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1);
  unint64_t v5 = Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes;
  uint64_t v6 = qword_268067410;
  uint64_t v7 = *result;
  if (a4 < 2)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = *a3;
    if (*a2 > *a3) {
      uint64_t v23 = *a2;
    }
    if (v7 > v23) {
      uint64_t v23 = *result;
    }
    if (v23 >= 48)
    {
      if ((uint64_t)((((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes
                     - 192)
                    / 320) & 0xFFFFFFFFFFFFFFF8) <= 1)
        int64_t v24 = 1;
      else {
        int64_t v24 = (((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes - 192)
      }
             / 320) & 0xFFFFFFFFFFFFFFF8;
      if (v7 <= v24)
      {
        int64_t v25 = *result;
      }
      else
      {
        int64_t v25 = v24;
        if (v7 % v24) {
          int64_t v25 = v24 - 8 * ((v24 + ~(v7 % v24)) / (8 * (v7 / v24) + 8));
        }
        uint64_t *result = v25;
        uint64_t v22 = *a2;
      }
      uint64_t v26 = v5 - 192 - 8 * v22 * v25;
      if (v26 >= 32 * v25) {
        int64_t v27 = v26 / (unint64_t)(8 * v25);
      }
      else {
        int64_t v27 = 0x480000uLL / (32 * v24);
      }
      if (v27 >= (uint64_t)(0x180000uLL / (16 * v25))) {
        int64_t v27 = 0x180000uLL / (16 * v25);
      }
      int64_t v28 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v29 = *a3;
      if (*a3 <= v28)
      {
        if (v7 != v25) {
          return result;
        }
        uint64_t v30 = 8 * v7 * v29;
        uint64_t v31 = v22;
        if (v30 >= 1025)
        {
          BOOL v32 = v6 != 0;
          uint64_t v31 = 576;
          if (v22 < 576) {
            uint64_t v31 = v22;
          }
          if (v32 && (unint64_t)v30 <= 0x8000)
          {
            unint64_t v5 = v4;
          }
          else
          {
            uint64_t v31 = v22;
            unint64_t v5 = 1572864;
          }
        }
        int64_t v20 = v5 / (24 * v7);
        if (v31 < v20) {
          int64_t v20 = v31;
        }
        if (v20 < 7)
        {
          if (!v20) {
            return result;
          }
        }
        else
        {
          int64_t v20 = 6 * (v20 / 6uLL);
        }
        if (v22 % v20) {
          v20 -= 6 * ((v20 - v22 % v20) / (6 * (v22 / v20) + 6));
        }
        goto LABEL_64;
      }
      if (v29 % v28) {
        v28 -= 4 * ((v28 - v29 % v28) / (4 * (v29 / v28) + 4));
      }
      *a3 = v28;
    }
  }
  else
  {
    uint64_t v8 = ((uint64_t)Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes - 192) / 320;
    if (v8 >= 320) {
      uint64_t v8 = 320;
    }
    if (v8 < v7)
    {
      if (v8 <= 0) {
        uint64_t v9 = -(-v8 & 7);
      }
      else {
        uint64_t v9 = v8 & 7;
      }
      uint64_t v7 = v8 - v9;
      uint64_t *result = v7;
    }
    int64_t v10 = (v4 - v5) / (32 * v7);
    uint64_t v11 = *a3;
    uint64_t v12 = (a4 - 1 + *a3) / a4;
    if (v12 + 3 <= 0) {
      uint64_t v13 = -(-(v12 + 3) & 3);
    }
    else {
      uint64_t v13 = (v12 + 3) & 3;
    }
    if (v12 + 3 - v13 < v11) {
      uint64_t v11 = v12 + 3 - v13;
    }
    if (v10 <= 0) {
      uint64_t v14 = -(-v10 & 3);
    }
    else {
      uint64_t v14 = v10 & 3;
    }
    int64_t v15 = v10 - v14;
    if (v10 <= v12) {
      int64_t v16 = v15;
    }
    else {
      int64_t v16 = v11;
    }
    *a3 = v16;
    BOOL v17 = __OFSUB__(v6, v4);
    uint64_t v18 = v6 - v4;
    if (!((v18 < 0) ^ v17 | (v18 == 0)))
    {
      int64_t v19 = v18 / (unint64_t)(8 * a4 * *result);
      int64_t v20 = *a2;
      uint64_t v21 = (a4 - 1 + *a2) / a4;
      if (v19 < 6 || v19 >= v21)
      {
        if (6 * ((v21 + 5) / 6) < v20) {
          int64_t v20 = 6 * ((v21 + 5) / 6);
        }
      }
      else
      {
        int64_t v20 = 6 * (v19 / 6uLL);
      }
LABEL_64:
      *a2 = v20;
    }
  }
  return result;
}

uint64_t Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,4,0,false,true>::operator()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5 >= 0) {
    uint64_t v7 = a5;
  }
  else {
    uint64_t v7 = a5 + 3;
  }
  int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (a5 < 4)
  {
    uint64_t v10 = 0;
  }
  else
  {
    int64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = (void *)*a3;
    uint64_t v12 = a3[1];
    uint64_t result = 16 * v12;
    do
    {
      if (a4 < 1)
      {
        uint64_t v14 = v10 + 4 * a7;
      }
      else
      {
        uint64_t v14 = 4 * a7 + 4 * a4 + v10;
        int64_t v15 = v11;
        uint64_t v16 = a4;
        BOOL v17 = (void *)(a2 + 32 * a7 + 16 + 8 * v10);
        do
        {
          *(v17 - 2) = *v15;
          *(v17 - 1) = v15[v12];
          *BOOL v17 = v15[2 * v12];
          v17[1] = v15[3 * v12];
          ++v15;
          v17 += 4;
          --v16;
        }
        while (v16);
      }
      uint64_t v10 = v14 + 4 * (a6 - (a4 + a7));
      v9 += 4;
      v11 += 4 * v12;
    }
    while (v9 < v8);
  }
  if (v8 < a5)
  {
    uint64_t v18 = a3[1];
    uint64_t v19 = *a3 + 32 * v18 * (v7 >> 2);
    uint64_t v20 = 8 * v18;
    do
    {
      uint64_t v21 = v10 + a7;
      uint64_t v22 = (uint64_t *)v19;
      uint64_t v23 = a4;
      if (a4 >= 1)
      {
        do
        {
          uint64_t v24 = *v22++;
          *(void *)(a2 + 8 * v21++) = v24;
          --v23;
        }
        while (v23);
      }
      uint64_t v10 = a6 - (a4 + a7) + v21;
      ++v8;
      v19 += v20;
    }
    while (v8 != a5);
  }
  return result;
}

void Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,8>::subTo<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  if (v3 >= 1 && a1[1] + v3 + a1[2] <= 19)
  {
    long long v14 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    long long v16 = *(_OWORD *)(a2 + 24);
    uint64_t v17 = *(void *)(a2 + 40);
    long long v18 = *(_OWORD *)(a2 + 48);
    uint64_t v19 = *(void *)(a2 + 64);
    long long v22 = *(_OWORD *)(a2 + 104);
    uint64_t v23 = *(void *)(a2 + 120);
    uint64_t v25 = *(void *)(a3 + 16);
    long long v24 = *(_OWORD *)a3;
    uint64_t v27 = *(void *)(a3 + 40);
    long long v26 = *(_OWORD *)(a3 + 24);
    uint64_t v29 = *(void *)(a3 + 64);
    long long v28 = *(_OWORD *)(a3 + 48);
    uint64_t v6 = *(void *)(a3 + 120);
    long long v32 = *(_OWORD *)(a3 + 104);
    uint64_t v15 = v5;
    long long v7 = *(_OWORD *)(a2 + 80);
    uint64_t v21 = *(void *)(a2 + 96);
    long long v20 = v7;
    long long v8 = *(_OWORD *)(a3 + 80);
    uint64_t v31 = *(void *)(a3 + 96);
    long long v30 = v8;
    uint64_t v33 = v6;
    uint64_t v34 = v14;
    uint64_t v35 = v23;
    uint64_t v36 = v24;
    uint64_t v37 = v6;
    uint64_t v38 = v5;
    uint64_t v9 = *a1;
    uint64_t v10 = a1[15];
    void v12[3] = a1;
    v13[0] = v9;
    void v13[2] = v10;
    v12[0] = v13;
    v12[1] = (uint64_t *)&v14;
    void v12[2] = (uint64_t *)&v11;
    Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,1>>,Eigen::internal::sub_assign_op<double,double>,0>,4,0>::run(v12);
  }
  else
  {
    *(void *)&long long v14 = 0xBFF0000000000000;
    Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,8>::scaleAndAddTo<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>((uint64_t)a1, a2, a3, (uint64_t *)&v14);
  }
}

void Eigen::internal::generic_product_impl<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::DenseShape,Eigen::DenseShape,8>::scaleAndAddTo<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 && *(void *)(a2 + 8))
  {
    if (*(void *)(a3 + 16))
    {
      uint64_t v8 = *a4;
      uint64_t v10 = 0;
      char v11 = 0;
      long long v12 = *(_OWORD *)(a1 + 8);
      v13[0] = v4;
      Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,1,long>(v13, (uint64_t *)&v12, (uint64_t *)&v12 + 1, 1);
      v13[1] = v13[0] * v12;
      void v13[2] = *((void *)&v12 + 1) * v13[0];
      v9[0] = a2;
      v9[1] = a3;
      void v9[2] = a1;
      uint64_t v9[3] = v8;
      v9[4] = &v10;
      Eigen::internal::gemm_functor<double,long,Eigen::internal::general_matrix_matrix_product<long,double,0,false,double,0,false,0>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::internal::gemm_blocking_space<0,double,double,-1,-1,-1,1,false>>::operator()((uint64_t)v9, 0, *(void *)(a2 + 8), 0, *(void *)(a3 + 16));
      free(v10);
      free(v11);
    }
  }
}

void sub_2244935A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
}

uint64_t **Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,1>>,Eigen::internal::sub_assign_op<double,double>,0>,4,0>::run(uint64_t **result)
{
  unint64_t v1 = (unint64_t *)result[3];
  unint64_t v2 = *v1;
  if ((*v1 & 7) != 0)
  {
    uint64_t v3 = v1[2];
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = v1[1];
      long long v7 = *result;
      uint64_t v8 = result[1];
      do
      {
        if (v6 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *v7;
          uint64_t v11 = *v8;
          uint64_t v12 = v8[31];
          uint64_t v13 = v12 * v5;
          uint64_t result = (uint64_t **)v8[16];
          uint64_t v14 = v8[17];
          uint64_t v15 = v7[2] * v5;
          uint64_t v16 = (uint64_t)result + v12 * v4 + 8;
          uint64_t v17 = *v8;
          do
          {
            if (v14)
            {
              double v18 = *(double *)(v11 + 8 * v9) * *(double *)&result[v13];
              if (v14 >= 2)
              {
                uint64_t v19 = 8 * v8[15];
                long long v20 = (double *)(v17 + v19);
                uint64_t v21 = (double *)v16;
                uint64_t v22 = v14 - 1;
                do
                {
                  double v23 = *v21++;
                  double v18 = v18 + *v20 * v23;
                  long long v20 = (double *)((char *)v20 + v19);
                  --v22;
                }
                while (v22);
              }
            }
            else
            {
              double v18 = 0.0;
            }
            *(double *)(v10 + 8 * (v9 + v15)) = *(double *)(v10 + 8 * (v9 + v15)) - v18;
            ++v9;
            v17 += 8;
          }
          while (v9 != v6);
        }
        ++v5;
        v4 += 8;
      }
      while (v5 != v3);
    }
  }
  else
  {
    uint64_t v24 = v1[2];
    if (v24 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = v1[1];
      uint64_t v28 = v1[15] & 1;
      uint64_t v29 = (v2 >> 3) & 1;
      if (v29 >= v27) {
        uint64_t v29 = v27;
      }
      do
      {
        if (v29 >= 1)
        {
          long long v30 = (double **)result[1];
          uint64_t v31 = (uint64_t)v30[17];
          if (v31)
          {
            long long v32 = *v30;
            uint64_t v33 = v30[16];
            uint64_t v34 = v30[31];
            double v35 = **v30 * v33[(void)v34 * v26];
            if (v31 >= 2)
            {
              uint64_t v36 = v30[15];
              uint64_t v37 = v31 - 1;
              uint64_t v38 = (double *)((char *)v33 + (void)v34 * v25 + 8);
              uint64_t v39 = &v32[(void)v36];
              do
              {
                double v40 = *v38++;
                double v35 = v35 + *v39 * v40;
                v39 += (uint64_t)v36;
                --v37;
              }
              while (v37);
            }
          }
          else
          {
            double v35 = 0.0;
          }
          *(double *)(**result + 8 * (*result)[2] * v26) = *(double *)(**result + 8 * (*result)[2] * v26) - v35;
        }
        int64_t v41 = (v27 - v29) & 0xFFFFFFFFFFFFFFFELL;
        int64_t v42 = v41 + v29;
        if (v41 >= 1)
        {
          uint64_t v43 = 8 * v29;
          uint64_t v44 = v29;
          do
          {
            uint64_t v45 = result[1];
            uint64_t v46 = v45[38];
            if (v46 < 1)
            {
              float64x2_t v52 = 0uLL;
            }
            else
            {
              uint64_t v47 = v45[32];
              uint64_t v48 = v45[34];
              uint64_t v49 = (double *)(v45[35] + v25 * v45[37]);
              uint64_t v50 = (float64x2_t *)(v47 + v43);
              uint64_t v51 = 8 * v48;
              float64x2_t v52 = 0uLL;
              do
              {
                double v53 = *v49++;
                float64x2_t v52 = vmlaq_n_f64(v52, *v50, v53);
                uint64_t v50 = (float64x2_t *)((char *)v50 + v51);
                --v46;
              }
              while (v46);
            }
            uint64_t v54 = 8 * (v44 + (*result)[2] * v26);
            *(float64x2_t *)(**result + v54) = vsubq_f64(*(float64x2_t *)(**result + v54), v52);
            v44 += 2;
            v43 += 16;
          }
          while (v44 < v42);
        }
        if (v42 < v27)
        {
          uint64_t v55 = result[1];
          uint64_t v56 = **result;
          uint64_t v57 = *v55;
          uint64_t v58 = v55[31];
          uint64_t v59 = v58 * v26;
          uint64_t v60 = v55[16];
          uint64_t v61 = v55[17];
          uint64_t v62 = (*result)[2] * v26;
          uint64_t v63 = v60 + v58 * v25 + 8;
          unint64_t v64 = *v55 + ((8 * (v27 - v29)) & 0xFFFFFFFFFFFFFFF0) + 8 * v29;
          do
          {
            if (v61)
            {
              double v65 = *(double *)(v57 + 8 * v42) * *(double *)(v60 + 8 * v59);
              if (v61 >= 2)
              {
                uint64_t v66 = 8 * v55[15];
                uint64_t v67 = (double *)(v64 + v66);
                uint64_t v68 = (double *)v63;
                uint64_t v69 = v61 - 1;
                do
                {
                  double v70 = *v68++;
                  double v65 = v65 + *v67 * v70;
                  uint64_t v67 = (double *)((char *)v67 + v66);
                  --v69;
                }
                while (v69);
              }
            }
            else
            {
              double v65 = 0.0;
            }
            *(double *)(v56 + 8 * (v62 + v42)) = *(double *)(v56 + 8 * (v62 + v42)) - v65;
            ++v42;
            v64 += 8;
          }
          while (v42 < v27);
        }
        BOOL v71 = __OFADD__(v29, v28);
        uint64_t v73 = v29 + v28;
        char v72 = (v73 < 0) ^ v71;
        uint64_t v29 = v73 & 1;
        if (v72) {
          uint64_t v29 = -v29;
        }
        if (v27 < v29) {
          uint64_t v29 = v27;
        }
        ++v26;
        v25 += 8;
      }
      while (v26 != v24);
    }
  }
  return result;
}

void Eigen::internal::gemm_functor<double,long,Eigen::internal::general_matrix_matrix_product<long,double,0,false,double,0,false,0>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,0,-1,-1>,0,Eigen::Stride<0,0>>,-1,-1,false>,-1,-1,false>,Eigen::internal::gemm_blocking_space<0,double,double,-1,-1,-1,1,false>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v6 = *(void **)(a1 + 8);
  if (a5 == -1) {
    uint64_t v5 = v6[2];
  }
  Eigen::internal::general_matrix_matrix_product<long,double,0,false,double,0,false,0>::run(a3, v5, *(void *)(*(void *)a1 + 16), **(void **)a1 + 8 * a2, *(void *)(*(void *)a1 + 120), *v6 + 8 * v6[15] * a4, v6[15], **(void **)(a1 + 16) + 8 * (a2 + *(void *)(*(void *)(a1 + 16) + 120) * a4), *(double *)(a1 + 24), *(void *)(*(void *)(a1 + 16) + 120), *(unint64_t **)(a1 + 32));
}

void Eigen::internal::general_matrix_matrix_product<long,double,0,false,double,0,false,0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, unint64_t *a11)
{
  uint64_t v72 = a8;
  uint64_t v81 = a7;
  uint64_t v67 = a6;
  uint64_t v75 = a4;
  uint64_t v76 = a5;
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v12 = a11[3];
  unint64_t v11 = a11[4];
  uint64_t v13 = a11[2];
  if (v13 >= a1) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = a11[2];
  }
  if (v12 >= a2) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = a11[3];
  }
  unint64_t v77 = a11[4];
  uint64_t v70 = v14;
  unint64_t v16 = v14 * v11;
  if ((v14 * v11) >> 61) {
    goto LABEL_60;
  }
  uint64_t v20 = a1;
  unint64_t v21 = *a11;
  unint64_t v22 = *a11;
  if (*a11) {
    goto LABEL_13;
  }
  size_t v23 = 8 * v16;
  if (v16 <= 0x4000)
  {
    uint64_t v24 = (char *)&v61 - ((MEMORY[0x270FA5388](v23, v23 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v24, v25);
    unint64_t v21 = 0;
    unint64_t v22 = (unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_13;
  }
  uint64_t v26 = malloc_type_malloc(v23, 0x1E76AA36uLL);
  if (!v26)
  {
LABEL_60:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v56 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v56, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v22 = (unint64_t)v26;
  unint64_t v21 = *a11;
LABEL_13:
  unint64_t v27 = v15 * v77;
  unint64_t v86 = v22;
  if (v21) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = (void *)v22;
  }
  uint64_t v63 = v28;
  if (v27 >> 61)
  {
    uint64_t v57 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v58 = std::bad_alloc::bad_alloc(v57);
    __cxa_throw(v58, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v29 = a11[1];
  unint64_t v30 = v29;
  if (!v29)
  {
    size_t v31 = 8 * v27;
    if (v27 > 0x4000)
    {
      uint64_t v34 = malloc_type_malloc(v31, 0x1E76AA36uLL);
      if (!v34)
      {
        uint64_t v59 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v60 = std::bad_alloc::bad_alloc(v59);
        __cxa_throw(v60, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      unint64_t v30 = (unint64_t)v34;
      unint64_t v29 = a11[1];
    }
    else
    {
      long long v32 = (char *)&v61 - ((MEMORY[0x270FA5388](v31, v31 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
      bzero(v32, v33);
      unint64_t v29 = 0;
      unint64_t v30 = (unint64_t)(v32 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  unint64_t v64 = v27;
  unint64_t v65 = v16;
  if (v29) {
    double v35 = 0;
  }
  else {
    double v35 = (void *)v30;
  }
  uint64_t v62 = v35;
  BOOL v38 = v77 == a3 && v13 < v20 && v12 >= a2;
  BOOL v66 = v38;
  if (v20 >= 1)
  {
    uint64_t v39 = v30;
    uint64_t v40 = 0;
    uint64_t v68 = 8 * v70;
    uint64_t v83 = 8 * a10 * v15;
    uint64_t v84 = a10;
    uint64_t v73 = 8 * v77;
    uint64_t v74 = a3;
    uint64_t v82 = 8 * v81 * v15;
    uint64_t v69 = v20;
    do
    {
      uint64_t v41 = v40 + v70;
      uint64_t v71 = v40 + v70;
      if (v40 + v70 >= v20) {
        uint64_t v41 = v20;
      }
      if (a3 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v87 = v41 - v40;
        BOOL v43 = v66;
        if (!v40) {
          BOOL v43 = 0;
        }
        BOOL v85 = v43;
        uint64_t v80 = v67;
        uint64_t v78 = v40;
        do
        {
          uint64_t v44 = v42;
          uint64_t v45 = v42 + v77;
          if ((uint64_t)(v42 + v77) >= a3) {
            uint64_t v46 = a3;
          }
          else {
            uint64_t v46 = v42 + v77;
          }
          uint64_t v47 = v46 - v44;
          uint64_t v88 = v75 + 8 * (v40 + v44 * v76);
          uint64_t v89 = v76;
          Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v92, v86, &v88, v46 - v44, v87);
          uint64_t v79 = v45;
          if (a2 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = 0;
            uint64_t v50 = v80;
            uint64_t v51 = v72;
            uint64_t v52 = v15;
            do
            {
              if (a2 >= v52) {
                uint64_t v53 = v52;
              }
              else {
                uint64_t v53 = a2;
              }
              uint64_t v54 = v53 + v48;
              if (!v85)
              {
                uint64_t v88 = v50;
                uint64_t v89 = v81;
                Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,4,0,false,false>::operator()((uint64_t)&v91, v39, &v88, v47, v54);
              }
              uint64_t v88 = v51;
              uint64_t v89 = v84;
              Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(a9, (uint64_t)&v90, &v88, v86, v39, v87, v47, v54, -1, -1, 0, 0);
              v49 += v15;
              v52 += v15;
              v48 -= v15;
              v51 += v83;
              v50 += v82;
            }
            while (v49 < a2);
          }
          a3 = v74;
          v80 += v73;
          uint64_t v40 = v78;
          uint64_t v42 = v79;
        }
        while (v79 < v74);
      }
      v72 += v68;
      uint64_t v40 = v71;
      uint64_t v20 = v69;
    }
    while (v71 < v69);
  }
  if (v64 > 0x4000) {
    free(v62);
  }
  if (v65 > 0x4000) {
    free(v63);
  }
}

void sub_224493E58(_Unwind_Exception *exception_object)
{
  if (v1 > 0x4000) {
    free(*(void **)(v2 - 336));
  }
  _Unwind_Resume(exception_object);
}

void Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,4,0,false,false>::operator()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 0) {
    uint64_t v5 = a5;
  }
  else {
    uint64_t v5 = a5 + 3;
  }
  int64_t v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if (a5 < 4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    int64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = (void *)*a3;
    uint64_t v10 = a3[1];
    do
    {
      if (a4 >= 1)
      {
        unint64_t v11 = (void *)(a2 + 16 + 8 * v8);
        v8 += 4 * a4;
        uint64_t v12 = v9;
        uint64_t v13 = a4;
        do
        {
          *(v11 - 2) = *v12;
          *(v11 - 1) = v12[v10];
          void *v11 = v12[2 * v10];
          v11[1] = v12[3 * v10];
          ++v12;
          v11 += 4;
          --v13;
        }
        while (v13);
      }
      v7 += 4;
      v9 += 4 * v10;
    }
    while (v7 < v6);
  }
  if (v6 < a5)
  {
    uint64_t v14 = a3[1];
    uint64_t v15 = *a3 + 32 * v14 * (v5 >> 2);
    uint64_t v16 = 8 * v14;
    do
    {
      uint64_t v17 = (uint64_t *)v15;
      uint64_t v18 = a4;
      if (a4 >= 1)
      {
        do
        {
          uint64_t v19 = *v17++;
          *(void *)(a2 + 8 * v8++) = v19;
          --v18;
        }
        while (v18);
      }
      ++v6;
      v15 += v16;
    }
    while (v6 != a5);
  }
}

uint64_t *Eigen::PermutationBase<Eigen::PermutationMatrix<-1,-1,int>>::operator=<Eigen::Transpositions<-1,-1,int>>(uint64_t *a1, uint64_t *a2)
{
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize(a1, a2[1]);
  uint64_t v4 = a1[1];
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    do
    {
      *(_DWORD *)(v6 + 4 * v5) = v5;
      ++v5;
    }
    while (v4 != v5);
  }
  BOOL v7 = v4 < 1;
  uint64_t v8 = v4 - 1;
  if (!v7)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = *a1;
    do
    {
      uint64_t v11 = *(int *)(v9 + 4 * v8);
      int v12 = *(_DWORD *)(v10 + 4 * v8);
      *(_DWORD *)(v10 + 4 * v8) = *(_DWORD *)(v10 + 4 * v11);
      *(_DWORD *)(v10 + 4 * v11) = v12;
      unint64_t v13 = v8-- + 1;
    }
    while (v13 > 1);
  }
  return a1;
}

uint64_t Eigen::Inverse<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>>::Inverse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = Eigen::DenseStorage<double,-1,-1,-1,0>::DenseStorage((void *)a1, a2);
  Eigen::DenseStorage<int,-1,-1,1,0>::DenseStorage(v4 + 3, a2 + 24);
  Eigen::DenseStorage<int,-1,-1,1,0>::DenseStorage((void *)(a1 + 40), a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  return a1;
}

void sub_22449408C(_Unwind_Exception *a1)
{
  free(*v2);
  free(*v1);
  _Unwind_Resume(a1);
}

void *Eigen::DenseStorage<int,-1,-1,1,0>::DenseStorage(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v4 >> 62 || (uint64_t v5 = malloc_type_malloc(4 * v4, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v9 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v9, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    unint64_t v4 = *(void *)(a2 + 8);
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a1 = v5;
  a1[1] = v4;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    memcpy(v5, *(const void **)a2, 4 * v6);
  }
  return a1;
}

void Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Solve<Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>,Eigen::internal::assign_op<double,double>,Eigen::internal::Dense2Dense,void>::run(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = v4[2];
  uint64_t v7 = *(void *)(v5 + 8);
  if (a1[1] != v6 || a1[2] != v7)
  {
    if (v6) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9 && 0x7FFFFFFFFFFFFFFFLL / v7 < v6)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v7 * v6, v6, v7);
    unint64_t v4 = *(uint64_t **)a2;
    uint64_t v5 = *(void *)(a2 + 8);
  }
  Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::_solve_impl<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,-1,0,-1,-1>>(v4, (_OWORD *)v5, a1);
}

void Eigen::PartialPivLU<Eigen::Matrix<double,-1,-1,0,-1,-1>>::_solve_impl<Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t *a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 3;
  *(_OWORD *)uint64_t v11 = *a2;
  uint64_t v6 = a1[4];
  if (a3[1] != v6 || a3[2] != v11[1])
  {
    if (v6) {
      BOOL v8 = v11[1] == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && 0x7FFFFFFFFFFFFFFFLL / v11[1] < v6)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v10 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v10, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a3, v11[1] * v6, v6, v11[1]);
  }
  Eigen::internal::generic_product_impl<Eigen::PermutationMatrix<-1,-1,int>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::PermutationShape,Eigen::DenseShape,8>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(a3, v5, v11);
  if (a1[2])
  {
    Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,5,0,-1>::run(a1, a3);
    if (a1[2]) {
      Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,2,0,-1>::run(a1, a3);
    }
  }
}

uint64_t *Eigen::internal::generic_product_impl<Eigen::PermutationMatrix<-1,-1,int>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::PermutationShape,Eigen::DenseShape,8>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 >= 1)
  {
    unint64_t v4 = 0;
    uint64_t v5 = *a2;
    uint64_t v7 = result[1];
    uint64_t v6 = result[2];
    uint64_t v8 = *result;
    uint64x2_t v9 = (uint64x2_t)vdupq_n_s64(v6 - 1);
    int64x2_t v10 = vdupq_n_s64(2uLL);
    do
    {
      if (v6 >= 1)
      {
        uint64_t v11 = 0;
        int v12 = (double *)(v8 + 8 * *(int *)(v5 + 4 * (void)v4));
        uint64_t result = (uint64_t *)((char *)v4 - 1);
        int64x2_t v13 = (int64x2_t)xmmword_2246C5F80;
        do
        {
          int32x2_t v14 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v13));
          if (v14.i8[0])
          {
            if (v4 == v11) {
              double v15 = 1.0;
            }
            else {
              double v15 = 0.0;
            }
            *int v12 = v15;
          }
          if (v14.i8[4])
          {
            if (result == v11) {
              double v16 = 1.0;
            }
            else {
              double v16 = 0.0;
            }
            v12[v7] = v16;
          }
          uint64_t v11 = (uint64_t *)((char *)v11 + 2);
          int64x2_t v13 = vaddq_s64(v13, v10);
          v12 += 2 * v7;
        }
        while ((uint64_t *)((v6 + 1) & 0xFFFFFFFFFFFFFFFELL) != v11);
      }
      unint64_t v4 = (uint64_t *)((char *)v4 + 1);
    }
    while (v4 != (uint64_t *)v3);
  }
  return result;
}

void Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,5,0,-1>::run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v5;
  uint64_t v10 = v6;
  v11[0] = v4;
  uint64_t v12 = v6;
  Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,4,long>(v11, &v9, &v12, 1);
  v11[1] = v11[0] * v9;
  v11[2] = v10 * v11[0];
  Eigen::internal::triangular_solve_matrix<double,long,1,5,false,0,0>::run(v4, v6, *a1, a1[1], *a2, a2[1], (unint64_t *)&v7);
  free(v7);
  free(v8);
}

void sub_224494430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
}

void Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,-1,0,-1,-1>,1,2,0,-1>::run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v5;
  uint64_t v10 = v6;
  v11[0] = v4;
  uint64_t v12 = v6;
  Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,4,long>(v11, &v9, &v12, 1);
  v11[1] = v11[0] * v9;
  v11[2] = v10 * v11[0];
  Eigen::internal::triangular_solve_matrix<double,long,1,2,false,0,0>::run(v4, v6, *a1, a1[1], *a2, a2[1], (unint64_t *)&v7);
  free(v7);
  free(v8);
}

void sub_2244944EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
}

void Eigen::internal::triangular_solve_matrix<double,long,1,2,false,0,0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  uint64_t v7 = a7[4];
  if ((uint64_t)a7[2] >= a1) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = a7[2];
  }
  unint64_t v9 = v8 * v7;
  if ((unint64_t)(v8 * v7) >> 61) {
    goto LABEL_80;
  }
  unint64_t v17 = *a7;
  unint64_t v18 = v17;
  uint64_t v88 = a7[4];
  if (v17) {
    goto LABEL_10;
  }
  size_t v19 = 8 * v9;
  if (v9 <= 0x4000)
  {
    uint64_t v20 = (char *)&v80 - ((MEMORY[0x270FA5388](v19, v19 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v20, v21);
    unint64_t v17 = 0;
    unint64_t v22 = (unint64_t)(v20 + 15);
    uint64_t v7 = v88;
    unint64_t v18 = v22 & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_10;
  }
  size_t v23 = malloc_type_malloc(v19, 0x1E76AA36uLL);
  if (!v23)
  {
LABEL_80:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v75 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v75, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v18 = (unint64_t)v23;
  unint64_t v17 = *a7;
LABEL_10:
  uint64_t v93 = v8;
  unint64_t v24 = v7 * a2;
  unint64_t v102 = v18;
  if (v17) {
    size_t v25 = 0;
  }
  else {
    size_t v25 = (void *)v18;
  }
  uint64_t v82 = v25;
  if (v24 >> 61)
  {
    uint64_t v76 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v77 = std::bad_alloc::bad_alloc(v76);
    __cxa_throw(v77, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v26 = a7[1];
  uint64_t v27 = v26;
  if (!v26)
  {
    size_t v28 = 8 * v24;
    if (v24 > 0x4000)
    {
      uint64_t v27 = (uint64_t)malloc_type_malloc(v28, 0x1E76AA36uLL);
      if (!v27)
      {
        uint64_t v78 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v79 = std::bad_alloc::bad_alloc(v78);
        __cxa_throw(v79, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      uint64_t v26 = a7[1];
    }
    else
    {
      unint64_t v29 = (char *)&v80 - ((MEMORY[0x270FA5388](v28, v28 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
      bzero(v29, v30);
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(v29 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  uint64_t v97 = v27;
  if (v26) {
    size_t v31 = 0;
  }
  else {
    size_t v31 = (void *)v27;
  }
  uint64_t v81 = v31;
  {
    Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes = xmmword_2246E7700;
    qword_268067410 = 0x80000;
  }
  unint64_t v83 = v7 * a2;
  unint64_t v84 = v9;
  if (a2 < 1)
  {
    int64_t v34 = 0;
    uint64_t v32 = a1;
  }
  else
  {
    uint64_t v32 = a1;
    if (a6 <= a1) {
      uint64_t v33 = a1;
    }
    else {
      uint64_t v33 = a6;
    }
    int64_t v34 = (*((void *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1)
         / (unint64_t)(32 * v33)
         + (((*((void *)&Eigen::internal::manage_caching_sizes(Eigen::Action,long *,long *,long *)::m_cacheSizes + 1)
            / (unint64_t)(32 * v33)) & 0x8000000000000000) != 0
          ? 3uLL
          : 0)) & 0xFFFFFFFFFFFFFFFCLL;
  }
  if (v34 <= 4) {
    uint64_t v35 = 4;
  }
  else {
    uint64_t v35 = v34;
  }
  if (v32 >= 1)
  {
    uint64_t v89 = a5 + 8 * v32;
    uint64_t v87 = -8 * v7;
    uint64_t v92 = 8 * a6 * v35;
    uint64_t v91 = a3 + 8 * a4 * (v32 - 1) + 8 * v32;
    uint64_t v86 = 8 * v7 * ~a4;
    uint64_t v103 = -48 - 48 * a4;
    uint64_t v36 = -8 * a4;
    uint64_t v96 = 8 * v93;
    uint64_t v90 = v32 - v7;
    uint64_t v95 = a3 + 8 * a4 * (v32 - v7);
    uint64_t v85 = 8 * v7 * a4;
    uint64_t v94 = v35;
    uint64_t v105 = -8 * a4;
    uint64_t v107 = a3;
    uint64_t v108 = a4;
    uint64_t v98 = a2;
    while (1)
    {
      if (v7 >= v32) {
        uint64_t v37 = v32;
      }
      else {
        uint64_t v37 = v7;
      }
      uint64_t v110 = v37;
      if (a2 >= 1)
      {
        uint64_t v38 = 0;
        uint64_t v101 = v32 - v37;
        uint64_t v99 = v89;
        uint64_t v106 = v32;
        do
        {
          uint64_t v39 = a2 - v38;
          if (v35 >= v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = v35;
          }
          uint64_t v111 = v40;
          if (v37 >= 1)
          {
            uint64_t v41 = 0;
            uint64_t v42 = v111 + v38;
            uint64_t v109 = v97 + 8 * v38 * v37;
            uint64_t v104 = v38 * a6;
            uint64_t v100 = a5 + 8 * (v38 * a6 + v101);
            uint64_t v43 = v91;
            uint64_t v44 = v99;
            uint64_t v45 = v37;
            do
            {
              uint64_t v112 = v45 - 6;
              if (v45 >= 6) {
                uint64_t v46 = 6;
              }
              else {
                uint64_t v46 = v45;
              }
              if (v46 <= 1) {
                uint64_t v47 = 1;
              }
              else {
                uint64_t v47 = v46;
              }
              uint64_t v48 = v37 - v41;
              if (v37 - v41 >= 6) {
                uint64_t v49 = 6;
              }
              else {
                uint64_t v49 = v37 - v41;
              }
              if (v48 >= 1)
              {
                uint64_t v50 = 0;
                uint64_t v51 = v44 - 8 * v46;
                uint64_t v52 = v43 - 8 * v46;
                do
                {
                  if (v39 >= 1)
                  {
                    uint64_t v53 = v32 + ~(v50 + v41);
                    uint64_t v54 = v49 + ~v50;
                    double v55 = 1.0 / *(double *)(a3 + 8 * (v53 + v53 * a4));
                    uint64_t v56 = v51;
                    uint64_t v57 = v38;
                    do
                    {
                      uint64_t v58 = v53 + v57 * a6;
                      double v59 = v55 * *(double *)(a5 + 8 * v58);
                      *(double *)(a5 + 8 * v58) = v59;
                      if (v54 >= 1)
                      {
                        uint64_t v60 = 0;
                        double v61 = -v59;
                        do
                        {
                          *(double *)(v56 + 8 * v60) = *(double *)(v56 + 8 * v60) + v61 * *(double *)(v52 + 8 * v60);
                          ++v60;
                        }
                        while (v60 < v54);
                      }
                      ++v57;
                      v56 += 8 * a6;
                    }
                    while (v57 < v42);
                  }
                  ++v50;
                  v52 += v36;
                }
                while (v50 != v47);
              }
              uint64_t v113 = v44;
              uint64_t v114 = v43;
              uint64_t v62 = v48 - v49;
              uint64_t v63 = v32 - v41 - v49;
              uint64_t v115 = a5 + 8 * (v63 + v104);
              uint64_t v116 = a6;
              Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,4,0,false,true>::operator()((uint64_t)&v117, v109, &v115, v49, v111, v37, v48 - v49);
              if (v62 >= 1)
              {
                uint64_t v115 = v107 + 8 * (v101 + v63 * v108);
                uint64_t v116 = v108;
                uint64_t v64 = v102;
                Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v118, v102, &v115, v49, v62);
                uint64_t v115 = v100;
                uint64_t v116 = a6;
                Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(-1.0, (uint64_t)&v119, &v115, v64, v109, v62, v49, v111, v49, v110, 0, v62);
              }
              v41 += 6;
              uint64_t v44 = v113 - 48;
              uint64_t v43 = v114 + v103;
              uint64_t v45 = v112;
              uint64_t v37 = v110;
              a3 = v107;
              a4 = v108;
              uint64_t v36 = v105;
              uint64_t v32 = v106;
            }
            while (v41 < v110);
          }
          uint64_t v35 = v94;
          v38 += v94;
          v99 += v92;
          a2 = v98;
        }
        while (v38 < v98);
      }
      v32 -= v88;
      uint64_t v65 = v93;
      if (v32 < 1) {
        break;
      }
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v68 = v90;
      uint64_t v106 = v32;
      do
      {
        uint64_t v69 = v68 - v65;
        if (v68 >= v65) {
          uint64_t v70 = v65;
        }
        else {
          uint64_t v70 = v68;
        }
        if (v70 >= 1)
        {
          uint64_t v114 = v68 - v65;
          uint64_t v115 = v95 + v66;
          uint64_t v116 = a4;
          uint64_t v71 = v102;
          uint64_t v72 = v37;
          Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,6,2,0,false,false>::operator()((uint64_t)&v118, v102, &v115, v37, v70);
          uint64_t v115 = a5 + v66;
          uint64_t v116 = a6;
          uint64_t v73 = v71;
          a2 = v98;
          Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(-1.0, (uint64_t)&v119, &v115, v73, v97, v70, v72, v98, -1, -1, 0, 0);
          uint64_t v36 = v105;
          uint64_t v32 = v106;
          uint64_t v65 = v93;
          uint64_t v37 = v110;
          uint64_t v69 = v114;
        }
        v67 += v65;
        v66 += v96;
        uint64_t v68 = v69;
      }
      while (v67 < v32);
      v89 += v87;
      v91 += v86;
      uint64_t v7 = v88;
      v90 -= v88;
      v95 -= v85;
      uint64_t v35 = v94;
    }
  }
  if (v83 > 0x4000) {
    free(v81);
  }
  if (v84 > 0x4000) {
    free(v82);
  }
}

void sub_224494D18(_Unwind_Exception *exception_object)
{
  if (v1 > 0x4000) {
    free(*(void **)(v2 - 400));
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<turi::supervised::linear_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_regression_opt_interface,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224494DE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::supervised::linear_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_regression_opt_interface,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::linear_regression_opt_interface *,std::shared_ptr<turi::supervised::linear_regression_opt_interface>::__shared_ptr_default_delete<turi::supervised::linear_regression_opt_interface,turi::supervised::linear_regression_opt_interface>,std::allocator<turi::supervised::linear_regression_opt_interface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::linear_regression_opt_interface *,std::shared_ptr<turi::supervised::linear_regression_opt_interface>::__shared_ptr_default_delete<turi::supervised::linear_regression_opt_interface,turi::supervised::linear_regression_opt_interface>,std::allocator<turi::supervised::linear_regression_opt_interface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<turi::optimization::regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::elastic_net,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224494ED4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::optimization::smooth_regularizer_interface>::shared_ptr[abi:ne180100]<turi::optimization::l2_norm,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::optimization::elastic_net *,std::shared_ptr<turi::optimization::regularizer_interface>::__shared_ptr_default_delete<turi::optimization::regularizer_interface,turi::optimization::elastic_net>,std::allocator<turi::optimization::elastic_net>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::optimization::elastic_net *,std::shared_ptr<turi::optimization::regularizer_interface>::__shared_ptr_default_delete<turi::optimization::regularizer_interface,turi::optimization::elastic_net>,std::allocator<turi::optimization::elastic_net>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 2;
  operator new();
}

void sub_22449536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      double v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      unint64_t v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      double v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      double v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      double v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      double v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void **Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::~LDLT(void **a1)
{
  return a1;
}

uint64_t Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)a1, v5 * v4, v4, v5);
  unint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((void *)(a1 + 32), v7);
  unint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 48), v8);
  *(_DWORD *)(a1 + 64) = 2;
  *(unsigned char *)(a1 + 68) = 0;
  Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::compute<Eigen::Matrix<double,-1,-1,0,-1,-1>>(a1, (long long **)a2);
  return a1;
}

void sub_2244956F0(_Unwind_Exception *a1)
{
  free(*v3);
  free(*v2);
  free(*v1);
  _Unwind_Resume(a1);
}

uint64_t Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::compute<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t a1, long long **a2)
{
  uint64_t v4 = *a2;
  int64_t v3 = (int64_t)a2[1];
  uint64_t v5 = (uint64_t)a2[2];
  if (*(void *)(a1 + 8) == v3 && *(void *)(a1 + 16) == v5)
  {
    unint64_t v8 = a2[1];
  }
  else
  {
    if (v3) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v5 < v3)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v36 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v36, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)a1, v5 * v3, v3, v5);
    unint64_t v8 = *(long long **)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
  }
  unint64_t v9 = *(double **)a1;
  uint64_t v10 = (void)v8 * v5;
  if ((uint64_t)v8 * v5 >= 0) {
    uint64_t v11 = (void)v8 * v5;
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (v10 >= 2)
  {
    int64_t v13 = 0;
    atomic_ullong *volatile v14 = *(double **)a1;
    double v15 = v4;
    do
    {
      long long v16 = *v15++;
      *(_OWORD *)atomic_ullong *volatile v14 = v16;
      v14 += 2;
      v13 += 2;
    }
    while (v13 < v12);
  }
  BOOL v17 = v10 <= v12;
  uint64_t v18 = v10 - v12;
  if (!v17)
  {
    uint64_t v19 = v11 >> 1;
    atomic_ullong *volatile v20 = (uint64_t *)&v4[v11 >> 1];
    unsigned int v21 = &v9[2 * v19];
    do
    {
      uint64_t v22 = *v20++;
      *(void *)v21++ = v22;
      --v18;
    }
    while (v18);
  }
  *(void *)(a1 + 24) = 0;
  if (v3 >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    size_t v25 = *(double **)a1;
    uint64_t v26 = -1;
    do
    {
      uint64_t v27 = *(void *)(a1 + 8);
      uint64_t v38 = &v25[v27 * v24];
      uint64_t v39 = v27;
      uint64_t v40 = a1;
      uint64_t v41 = 0;
      uint64_t v42 = v24;
      uint64_t v43 = v27;
      uint64_t v44 = v27 - (v3 - v24);
      uint64_t v45 = v27;
      double v28 = 0.0;
      double v29 = 0.0;
      v37[0] = &v38[v44];
      v37[1] = v3 - v24;
      if (v3 != v24)
      {
        uint64_t v47 = &v38[v44];
        uint64_t v48 = v27;
        uint64_t v49 = v37;
        double v29 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false> const>>,3,0>::run((uint64_t)v46);
        size_t v25 = *(double **)a1;
      }
      if (v24)
      {
        double v28 = fabs(v25[v24]);
        if (v24 != 1)
        {
          uint64_t v30 = *(void *)(a1 + 8);
          size_t v31 = &v25[v23 + v30];
          uint64_t v32 = v26;
          do
          {
            double v28 = v28 + fabs(*v31);
            size_t v31 = (double *)((char *)v31 + v30 * 8);
            --v32;
          }
          while (v32);
        }
      }
      double v33 = v29 + v28;
      if (v33 > *(double *)(a1 + 24)) {
        *(double *)(a1 + 24) = v33;
      }
      ++v24;
      ++v26;
      ++v23;
    }
    while (v24 != v3);
  }
  Eigen::PlainObjectBase<Eigen::Matrix<int,-1,1,0,-1,1>>::resize((void *)(a1 + 32), v3);
  *(unsigned char *)(a1 + 68) = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 48), v3);
  *(_DWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = Eigen::internal::ldlt_inplace<1>::unblocked<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Transpositions<-1,-1,int>,Eigen::Matrix<double,-1,1,0,-1,1>>(a1, (void *)(a1 + 32), (double **)(a1 + 48), (int *)(a1 + 64)) ^ 1;
  *(unsigned char *)(a1 + 68) = 1;
  return a1;
}

uint64_t Eigen::internal::ldlt_inplace<1>::unblocked<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Transpositions<-1,-1,int>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t a1, void *a2, double **a3, int *a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= 1)
  {
    uint64_t v6 = a2[1];
    if (v6 >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *a2;
      do
      {
        *(_DWORD *)(v8 + 4 * v7) = v7;
        ++v7;
      }
      while (v6 != v7);
    }
    if (v5)
    {
      double v9 = **(double **)a1;
      if (v9 <= 0.0)
      {
        if (v9 < 0.0) {
          int v10 = 1;
        }
        else {
          int v10 = 2;
        }
      }
      else
      {
        int v10 = 0;
      }
    }
    else
    {
      int v10 = 2;
    }
    *a4 = v10;
    LOBYTE(v13) = 1;
    return v13 & 1;
  }
  unint64_t v11 = 0;
  int v12 = 0;
  uint64_t v88 = 1 - v5;
  uint64_t v89 = v5 - 2;
  int v13 = 1;
  uint64_t v92 = a4;
  uint64_t v93 = *(void *)(a1 + 8);
  uint64_t v90 = a3;
  uint64_t v91 = a2;
  while (1)
  {
    unint64_t v14 = v11;
    uint64_t v15 = v5 - v11;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 16);
    if (v17 >= v16) {
      uint64_t v17 = *(void *)(a1 + 8);
    }
    uint64_t v18 = v15 - 1;
    if (v15 <= 1)
    {
      *(_DWORD *)(*a2 + 4 * v11) = v11;
LABEL_25:
      ++v11;
      unint64_t v34 = v16 * v14;
      goto LABEL_26;
    }
    uint64_t v19 = 0;
    uint64_t v20 = v17 - v15;
    unsigned int v21 = *(double **)a1;
    uint64_t v22 = v20 * (v16 + 1);
    double v23 = fabs(*(double *)(*(void *)a1 + 8 * v22));
    uint64_t v24 = (double *)(*(void *)a1 + 8 * v22 + 8 * v16 + 8);
    for (uint64_t i = 1; i != v15; ++i)
    {
      double v26 = fabs(*v24);
      if (v26 > v23)
      {
        uint64_t v19 = i;
        double v23 = v26;
      }
      v24 += v16 + 1;
    }
    int64_t v27 = v19 + v11;
    *(_DWORD *)(*a2 + 4 * v11) = v19 + v11;
    if (!v19) {
      goto LABEL_25;
    }
    if (v11)
    {
      double v28 = v21;
      unint64_t v29 = v11;
      do
      {
        double v30 = v28[v11];
        v28[v11] = v28[v27];
        v28[v27] = v30;
        v28 += v16;
        --v29;
      }
      while (v29);
    }
    uint64_t v31 = v5 + ~v27;
    uint64_t v104 = &v21[v16 * v11 + v16 - v31];
    uint64_t v105 = v31;
    uint64_t v106 = &v21[v16 * v11];
    uint64_t v107 = v16;
    uint64_t v108 = a1;
    uint64_t v109 = 0;
    unint64_t v110 = v11;
    uint64_t v111 = v16;
    uint64_t v112 = v16 - v31;
    uint64_t v113 = v16;
    uint64_t v32 = &v21[v27 * v16];
    uint64_t v94 = &v32[v16 - v31];
    uint64_t v95 = v31;
    uint64_t v96 = v32;
    uint64_t v97 = v16;
    uint64_t v98 = a1;
    uint64_t v99 = 0;
    unint64_t v100 = v19 + v11;
    uint64_t v101 = v16;
    uint64_t v102 = v16 - v31;
    uint64_t v103 = v16;
    Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false>>::swap<Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false>>(&v104, &v94);
    double v33 = *(double **)a1;
    uint64_t v16 = *(void *)(a1 + 8);
    unint64_t v34 = v16 * v11;
    unint64_t v35 = v16 * v11 + v11;
    int64_t v36 = v27 + v27 * v16;
    double v37 = *(double *)(*(void *)a1 + 8 * v35);
    *(void *)(*(void *)a1 + 8 * v35) = *(void *)(*(void *)a1 + 8 * v36);
    v33[v36] = v37;
    ++v11;
    if (v19 < 2)
    {
      a4 = v92;
      uint64_t v5 = v93;
      a3 = v90;
      a2 = v91;
    }
    else
    {
      uint64_t v38 = &v33[v14 + 1 + v14 * v16];
      uint64_t v39 = &v33[v14 + v16 * v11 + v19];
      int64_t v40 = v14 + 1;
      a4 = v92;
      a3 = v90;
      do
      {
        uint64_t v41 = *(void *)v38;
        *v38++ = *v39;
        *(void *)uint64_t v39 = v41;
        ++v40;
        v39 += v16;
      }
      while (v40 < v27);
      uint64_t v5 = v93;
      a2 = v91;
    }
LABEL_26:
    uint64_t v42 = *(double **)a1;
    uint64_t v43 = *(void *)a1 + 8 * v11;
    unint64_t v44 = v43 + 8 * v34;
    if (v14)
    {
      uint64_t v45 = 0;
      uint64_t v46 = *a3;
      uint64_t v47 = 8 * v16;
      uint64_t v48 = *(double **)a1;
      uint64_t v49 = &v42[v14];
      do
      {
        v46[v45++] = *v48 * *v49;
        uint64_t v49 = (double *)((char *)v49 + v47);
        v48 += v16 + 1;
      }
      while (v14 != v45);
      double v50 = v42[v14] * *v46;
      if (v14 >= 2)
      {
        unint64_t v51 = v14 - 1;
        uint64_t v52 = v46 + 1;
        uint64_t v53 = &v42[v14 + (unint64_t)v47 / 8];
        do
        {
          double v54 = *v52++;
          double v50 = v50 + *v53 * v54;
          uint64_t v53 = (double *)((char *)v53 + v47);
          --v51;
        }
        while (v51);
      }
      v42[v34 + v14] = v42[v34 + v14] - v50;
      if (v15 >= 2)
      {
        uint64_t v104 = (double *)v43;
        uint64_t v105 = v16;
        uint64_t v94 = v46;
        uint64_t v95 = 1;
        Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,0>,0,false,double,Eigen::internal::const_blas_data_mapper<double,long,1>,false,0>::run(v15 - 1, v14, (uint64_t *)&v104, &v94, (double *)(v43 + 8 * v34), -1.0);
        a3 = v90;
        a2 = v91;
        a4 = v92;
        uint64_t v5 = v93;
        uint64_t v16 = *(void *)(a1 + 8);
      }
    }
    double v55 = *(double **)a1;
    uint64_t v56 = *(uint64_t *)(*(void *)a1 + 8 * (v14 + v14 * v16));
    if (!v14 && *(double *)&v56 >= 0.0 && *(double *)&v56 <= 0.0) {
      break;
    }
    if (v15 < 2 || *(double *)&v56 == 0.0)
    {
      if (((v15 > 1) & v13) == 1)
      {
        unint64_t v74 = v89 - v14;
        do
        {
          double v75 = *(double *)v44;
          v44 += 8;
          double v76 = v75;
          BOOL v73 = v74-- != 0;
          char v77 = v73;
          int v13 = v76 == 0.0;
        }
        while (v76 == 0.0 && (v77 & 1) != 0);
      }
      else
      {
        int v13 = (v15 < 2) & v13;
      }
    }
    else
    {
      uint64_t v62 = (v44 >> 3) & 1;
      if ((v44 & 7) != 0) {
        uint64_t v62 = v15 - 1;
      }
      uint64_t v63 = v18 - v62;
      if (v18 >= v62) {
        uint64_t v64 = v18 - v62;
      }
      else {
        uint64_t v64 = v63 + 1;
      }
      if (v62)
      {
        uint64_t v65 = v62;
        do
        {
          *(double *)unint64_t v44 = *(double *)v44 / *(double *)&v56;
          v44 += 8;
          --v65;
        }
        while (v65);
      }
      int64_t v66 = (v64 & 0xFFFFFFFFFFFFFFFELL) + v62;
      if (v63 >= 2)
      {
        float64x2_t v67 = (float64x2_t)vdupq_lane_s64(v56, 0);
        uint64_t v68 = (float64x2_t *)&v42[v62 + v34 + v11];
        uint64_t v69 = v62;
        do
        {
          float64x2_t *v68 = vdivq_f64(*v68, v67);
          ++v68;
          v69 += 2;
        }
        while (v69 < v66);
      }
      if (v66 < v18)
      {
        uint64_t v70 = v64 >> 1;
        unint64_t v71 = v88 + v62 + v14 + (v64 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v72 = &v42[2 * v70 + v62 + v34 + v11];
        do
        {
          *uint64_t v72 = *v72 / *(double *)&v56;
          ++v72;
          BOOL v73 = __CFADD__(v71++, 1);
        }
        while (!v73);
      }
    }
    BOOL v78 = *(double *)&v56 < 0.0;
    if (*(double *)&v56 > 0.0) {
      BOOL v78 = 1;
    }
    int v79 = (v12 & v78 ^ 1) & v13;
    if (*(double *)&v56 >= 0.0) {
      int v80 = v13;
    }
    else {
      int v80 = v79;
    }
    if (*(double *)&v56 <= 0.0) {
      int v13 = v80;
    }
    else {
      int v13 = v79;
    }
    int v81 = *a4;
    if (*a4 == 2)
    {
      if (*(double *)&v56 <= 0.0)
      {
        if (*(double *)&v56 >= 0.0) {
          goto LABEL_83;
        }
        int v82 = 1;
      }
      else
      {
        int v82 = 0;
      }
      goto LABEL_82;
    }
    if (v81 != 1)
    {
      if (v81 || *(double *)&v56 >= 0.0) {
        goto LABEL_83;
      }
LABEL_81:
      int v82 = 3;
LABEL_82:
      *a4 = v82;
      goto LABEL_83;
    }
    if (*(double *)&v56 > 0.0) {
      goto LABEL_81;
    }
LABEL_83:
    v12 |= *(double *)&v56 == 0.0;
    if (v11 == v5) {
      return v13 & 1;
    }
  }
  uint64_t v57 = 0;
  *a4 = 2;
  uint64_t v58 = *a2;
  uint64_t v59 = 8 * v16;
  uint64_t v60 = &v55[v16];
  uint64_t v61 = v59 + 8;
  do
  {
    *(_DWORD *)(v58 + 4 * v57) = v57;
    if (v13)
    {
      if (v5 + ~v57 < 1)
      {
        LOBYTE(v13) = 1;
      }
      else
      {
        uint64_t v83 = 1 - v5;
        do
        {
          double v84 = v60[v83];
          LOBYTE(v13) = v84 == 0.0;
          uint64_t v85 = v57 + v83++ + 2;
        }
        while (v84 == 0.0 && v85 != 1);
      }
    }
    else
    {
      LOBYTE(v13) = 0;
    }
    ++v57;
    uint64_t v60 = (double *)((char *)v60 + v61);
  }
  while (v57 != v5);
  return v13 & 1;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  uint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return fabs(v4->f64[0]);
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  float64x2_t v7 = vabsq_f64(*v4);
  if (v1 >= 4)
  {
    int64_t v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v9 = vabsq_f64(v4[1]);
    if ((unint64_t)v1 >= 8)
    {
      int v10 = v4 + 3;
      uint64_t v11 = 4;
      do
      {
        float64x2_t v7 = vaddq_f64(v7, vabsq_f64(v10[-1]));
        float64x2_t v12 = *v10;
        v10 += 2;
        float64x2_t v9 = vaddq_f64(v9, vabsq_f64(v12));
        v11 += 4;
      }
      while (v11 < v8);
    }
    float64x2_t v7 = vaddq_f64(v9, v7);
    if (v6 > v8) {
      float64x2_t v7 = vaddq_f64(v7, vabsq_f64(*(float64x2_t *)((char *)v4 + 8 * v8)));
    }
  }
  double result = vaddvq_f64(v7);
  BOOL v13 = v1 <= v6;
  uint64_t v14 = v1 - v6;
  if (!v13)
  {
    f64 = v4[v3 >> 1].f64;
    do
    {
      double v16 = *f64++;
      double result = result + fabs(v16);
      --v14;
    }
    while (v14);
  }
  return result;
}

double Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false>>::swap<Eigen::Block<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,-1,1,false>>(void *a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = (*a1 >> 3) & 1;
  if (v5 >= v4) {
    uint64_t v5 = a1[1];
  }
  if ((v3 & 7) != 0) {
    uint64_t v5 = a1[1];
  }
  uint64_t v6 = v4 - v5;
  if (v4 >= v5) {
    uint64_t v7 = v4 - v5;
  }
  else {
    uint64_t v7 = v6 + 1;
  }
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 1)
  {
    float64x2_t v9 = (void *)*a1;
    int v10 = (void *)*a2;
    uint64_t v11 = v5;
    do
    {
      *(void *)&long long v12 = *v9;
      *v9++ = *v10;
      *v10++ = v12;
      --v11;
    }
    while (v11);
  }
  int64_t v13 = v8 + v5;
  if (v6 > 1)
  {
    uint64_t v14 = (long long *)&v3[v5];
    uint64_t v15 = v5;
    double v16 = (long long *)&v2[v5];
    do
    {
      long long v12 = *v16;
      *v16++ = *v14;
      *v14++ = v12;
      v15 += 2;
    }
    while (v15 < v13);
  }
  if (v13 < v4)
  {
    unint64_t v17 = v6 - v8;
    uint64_t v18 = 16 * (v7 >> 1) + 8 * v5;
    uint64_t v19 = (void *)((char *)v2 + v18);
    uint64_t v20 = (void *)((char *)v3 + v18);
    do
    {
      *(void *)&long long v12 = *v20;
      *v20++ = *v19;
      *v19++ = v12;
      --v17;
    }
    while (v17);
  }
  return *(double *)&v12;
}

void *Eigen::internal::evaluator<Eigen::Solve<Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>,Eigen::Matrix<double,-1,1,0,-1,1>>>::evaluator(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = *(void *)(*(void *)a2 + 16);
  a1[2] = 0;
  uint64_t v5 = a1 + 2;
  a1[3] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 2, v4, 1);
  *a1 = a1[2];
  Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::_solve_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(*(uint64_t **)a2, *(long long ***)(a2 + 8), v5);
  return a1;
}

void sub_224496110(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void *Eigen::LDLT<Eigen::Matrix<double,-1,-1,0,-1,-1>,1>::_solve_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t *a1, long long **a2, unint64_t *a3)
{
  uint64_t v6 = a1 + 4;
  uint64_t v7 = a1[5];
  if (a3[1] != v7) {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v7, 1);
  }
  Eigen::internal::generic_product_impl<Eigen::Transpositions<-1,-1,int>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::TranspositionsShape,Eigen::DenseShape,7>::evalTo<Eigen::Matrix<double,-1,1,0,-1,1>>(a3, v6, a2);
  if (a1[2])
  {
    Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,1,0,-1,1>,1,5,0,1>::run(a1, a3);
    uint64_t v8 = a1[2];
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = a1[1];
  if (v8 >= v9) {
    uint64_t v8 = a1[1];
  }
  if (v8 >= 1)
  {
    int v10 = (double *)*a1;
    uint64_t v11 = (double *)*a3;
    do
    {
      double v12 = 0.0;
      if (fabs(*v10) > 2.22507386e-308) {
        double v12 = *v11 / *v10;
      }
      *v11++ = v12;
      v10 += v9 + 1;
      --v8;
    }
    while (v8);
  }
  uint64_t v15 = a1;
  if (v9) {
    Eigen::internal::triangular_solver_selector<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,1,0,-1,1>,1,6,0,1>::run(&v15, a3);
  }
  uint64_t v15 = v6;
  uint64_t v13 = a1[5];
  if (a3[1] != v13) {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v13, 1);
  }
  return Eigen::internal::generic_product_impl<Eigen::Transpose<Eigen::TranspositionsBase<Eigen::Transpositions<-1,-1,int>>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::TranspositionsShape,Eigen::DenseShape,7>::evalTo<Eigen::Matrix<double,-1,1,0,-1,1>>(a3, &v15, (long long **)a3);
}

void *Eigen::internal::generic_product_impl<Eigen::Transpositions<-1,-1,int>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::TranspositionsShape,Eigen::DenseShape,7>::evalTo<Eigen::Matrix<double,-1,1,0,-1,1>>(void *result, uint64_t *a2, long long **a3)
{
  uint64_t v4 = result;
  uint64_t v5 = a2[1];
  uint64_t v6 = (_OWORD *)*result;
  uint64_t v7 = result[1];
  uint64_t v9 = *a3;
  uint64_t v8 = (uint64_t)a3[1];
  if ((long long *)*result != *a3 || v7 != v8)
  {
    if (v7 != v8)
    {
      double result = Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(result, v8, 1);
      uint64_t v6 = (_OWORD *)*v4;
      uint64_t v7 = v4[1];
    }
    if (v7 >= 0) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v7 + 1;
    }
    int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= 2)
    {
      int64_t v13 = 0;
      uint64_t v14 = v6;
      uint64_t v15 = v9;
      do
      {
        long long v16 = *v15++;
        *v14++ = v16;
        v13 += 2;
      }
      while (v13 < v12);
    }
    BOOL v17 = v7 <= v12;
    uint64_t v18 = v7 - v12;
    if (!v17)
    {
      uint64_t v19 = v11 >> 1;
      uint64_t v20 = (uint64_t *)&v9[v11 >> 1];
      unsigned int v21 = &v6[v19];
      do
      {
        uint64_t v22 = *v20++;
        *v21++ = v22;
        --v18;
      }
      while (v18);
    }
  }
  if (v5 >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a2;
    size_t v25 = (_OWORD *)*v4;
    do
    {
      uint64_t v26 = *(int *)(v24 + 4 * v23);
      if (v23 != v26)
      {
        uint64_t v27 = *((void *)v25 + v23);
        *((void *)v25 + v23) = *((void *)v25 + v26);
        *((void *)v25 + v26) = v27;
      }
      ++v23;
    }
    while (v5 != v23);
  }
  return result;
}

void Eigen::internal::triangular_solver_selector<Eigen::Matrix<double,-1,-1,0,-1,-1> const,Eigen::Matrix<double,-1,1,0,-1,1>,1,5,0,1>::run(uint64_t *a1, unint64_t *a2)
{
  v14[1] = *MEMORY[0x263EF8340];
  unint64_t v2 = a2[1];
  if (v2 >> 61) {
    goto LABEL_14;
  }
  unint64_t v5 = *a2;
  if (*a2)
  {
    unint64_t v6 = *a2;
    goto LABEL_8;
  }
  size_t v7 = 8 * v2;
  if (v2 <= 0x4000)
  {
    uint64_t v8 = (char *)v14 - ((MEMORY[0x270FA5388](v7, v7 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, v9);
    unint64_t v5 = 0;
    unint64_t v6 = (unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  int v10 = malloc_type_malloc(v7, 0x1E76AA36uLL);
  if (!v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int64_t v13 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v13, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v6 = (unint64_t)v10;
  unint64_t v5 = *a2;
  unint64_t v2 = a2[1];
LABEL_8:
  if (v5) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (void *)v6;
  }
  Eigen::internal::triangular_solve_vector<double,double,long,1,5,false,0>::run(a1[2], *a1, a1[1], v6);
  if (8 * v2 > 0x20000) {
    free(v11);
  }
}

uint64_t Eigen::internal::triangular_solve_vector<double,double,long,1,5,false,0>::run(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = a4 & 7;
    size_t v9 = (double *)(a2 + 8);
    uint64_t v33 = (a3 << 6) + 64;
    uint64_t v10 = 8 * a3 + 8;
    uint64_t v11 = (double *)(a4 + 8);
    uint64_t v12 = result;
    do
    {
      uint64_t v13 = v12 - 8;
      if (v12 >= 8) {
        uint64_t v14 = 8;
      }
      else {
        uint64_t v14 = v12;
      }
      uint64_t v15 = v14 - 1;
      if (v14 <= 1) {
        uint64_t v14 = 1;
      }
      if (v6 - v7 >= 8) {
        uint64_t v16 = 8;
      }
      else {
        uint64_t v16 = v6 - v7;
      }
      if (v6 - v7 >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v11;
        uint64_t v19 = v9;
        do
        {
          uint64_t v20 = v16 + ~v17;
          if (v20 >= 1)
          {
            double v21 = *(double *)(a4 + 8 * (v17 + v7));
            int64_t v22 = ((unint64_t)(a4 + 8 * (v17 + v7) + 8) >> 3) & 1;
            if (v8) {
              int64_t v22 = v16 + ~v17;
            }
            uint64_t v23 = v20 - v22;
            if (v20 >= v22) {
              uint64_t v24 = v20 - v22;
            }
            else {
              uint64_t v24 = v23 + 1;
            }
            if (v22)
            {
              size_t v25 = v18;
              uint64_t v26 = v19;
              int64_t v27 = v22;
              do
              {
                double v28 = *v26++;
                double *v25 = *v25 - v21 * v28;
                ++v25;
                --v27;
              }
              while (v27);
            }
            int64_t v29 = (v24 & 0xFFFFFFFFFFFFFFFELL) + v22;
            if (v23 >= 2)
            {
              uint64_t v30 = v22;
              do
              {
                *(float64x2_t *)&v18[v30] = vsubq_f64(*(float64x2_t *)&v18[v30], vmulq_n_f64(*(float64x2_t *)&v19[v30], v21));
                v22 += 2;
                v30 += 2;
              }
              while (v22 < v29);
            }
            if (v29 < v20)
            {
              do
              {
                v18[v29] = v18[v29] - v21 * v19[v29];
                ++v29;
              }
              while (v15 != v29);
            }
          }
          ++v17;
          uint64_t v19 = (double *)((char *)v19 + v10);
          ++v18;
          --v15;
        }
        while (v17 != v14);
      }
      uint64_t v31 = v16 + v7;
      double result = v6 - (v16 + v7);
      if (v6 > v16 + v7)
      {
        v35[0] = a2 + 8 * (v31 + v7 * a3);
        v35[1] = a3;
        v34[0] = a4 + 8 * v7;
        v34[1] = 1;
        double result = Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,0>,0,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(result, v16, v35, v34, (double *)(a4 + 8 * v31), -1.0);
      }
      v7 += 8;
      size_t v9 = (double *)((char *)v9 + v33);
      v11 += 8;
      uint64_t v12 = v13;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,0>,0,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(uint64_t result, uint64_t a2, uint64_t *a3, void *a4, double *a5, double a6)
{
  uint64_t v7 = 0;
  uint64_t v8 = ((unint64_t)a5 >> 3) & 1;
  if (v8 >= result) {
    uint64_t v8 = result;
  }
  if ((a5 & 7) != 0) {
    uint64_t v8 = result;
  }
  uint64_t v9 = ((unint64_t)*a3 >> 3) & 1;
  if (v9 >= result) {
    uint64_t v9 = result;
  }
  if ((*a3 & 7) != 0) {
    uint64_t v9 = -1;
  }
  uint64_t v10 = 3;
  if ((a5 & 7) != 0 || v9 < 0)
  {
    uint64_t v11 = 0;
    int64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    int64_t v12 = 0;
    if (v9 != result)
    {
      uint64_t v13 = 0;
      uint64_t v10 = a3[1] & 1;
      char v14 = 1;
      while (1)
      {
        char v15 = v14;
        uint64_t v16 = v9 + v13 * v10;
        uint64_t v17 = v16 >= 0 ? v16 & 1 : -(v16 & 1);
        if (v8 == v17) {
          break;
        }
        char v14 = 0;
        uint64_t v13 = 1;
        if ((v15 & 1) == 0)
        {
          uint64_t v7 = 0;
          uint64_t v11 = v8;
          int64_t v12 = ((result - v8) & 0xFFFFFFFFFFFFFFFELL) + v8;
          uint64_t v10 = 3;
          goto LABEL_24;
        }
      }
      if (v13 >= a2) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = v13;
      }
      uint64_t v11 = v8;
      int64_t v12 = ((result - v8) & 0xFFFFFFFFFFFFFFFELL) + v8;
    }
  }
LABEL_24:
  uint64_t v120 = v10;
  uint64_t v18 = a2 - v7 + 3;
  if (a2 >= v7) {
    uint64_t v18 = a2 - v7;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + v7;
  uint64_t v20 = 8 * v11;
  uint64_t v21 = 8 * v12;
  if (a2 - v7 >= 4)
  {
    uint64_t v22 = 8 * v7;
    uint64_t v23 = 8 * v7 + 24;
    uint64_t v24 = 8 * v7 + 16;
    uint64_t v25 = 8 * v7 + 8;
    uint64_t v26 = v7;
    char v119 = (float64x2_t *)&a5[v11];
    int64_t v27 = &a5[v12];
    do
    {
      double v28 = *(double *)(*a4 + 8 * v26) * a6;
      double v29 = *(double *)(*a4 + 8 * (v26 + 1)) * a6;
      double v30 = *(double *)(*a4 + 8 * (v26 + 2)) * a6;
      double v31 = *(double *)(*a4 + 8 * (v26 + 3)) * a6;
      uint64_t v32 = *a3;
      uint64_t v33 = a3[1];
      if (v11 >= 1)
      {
        unint64_t v34 = (double *)(v32 + v33 * v23);
        unint64_t v35 = (double *)(v32 + v33 * v24);
        int64_t v36 = (double *)(v32 + v33 * v25);
        double v37 = a5;
        uint64_t v38 = v11;
        uint64_t v39 = (double *)(v32 + v33 * v22);
        do
        {
          double v40 = *v39++;
          double v41 = v28 * v40 + *v37;
          *double v37 = v41;
          double v42 = *v36++;
          double v43 = v41 + v29 * v42;
          *double v37 = v43;
          double v44 = *v35++;
          double v45 = v43 + v30 * v44;
          *double v37 = v45;
          double v46 = *v34++;
          *v37++ = v45 + v31 * v46;
          --v38;
        }
        while (v38);
      }
      if (v12 > v11)
      {
        if (v120)
        {
          if (v120 == 1)
          {
            uint64_t v47 = (float64x2_t *)(v32 + v20 + v33 * v24);
            uint64_t v48 = (float64x2_t *)(v32 + v20 + v33 * v22);
            uint64_t v49 = (float64x2_t *)(v32 + v20 + v33 * v23);
            double v50 = v119;
            uint64_t v51 = v11;
            uint64_t v52 = (float64x2_t *)(v32 + v20 + v33 * v25);
            do
            {
              float64x2_t v53 = *v48++;
              float64x2_t v54 = vmulq_n_f64(v53, v28);
              float64x2_t v55 = *v52++;
              float64x2_t v56 = vmulq_n_f64(v55, v29);
              float64x2_t v57 = *v47++;
              float64x2_t v58 = vaddq_f64(v54, v56);
              float64x2_t v59 = vmulq_n_f64(v57, v30);
              float64x2_t v60 = *v49++;
              *double v50 = vaddq_f64(*v50, vaddq_f64(v58, vaddq_f64(v59, vmulq_n_f64(v60, v31))));
              ++v50;
              v51 += 2;
            }
            while (v51 < v12);
          }
          else
          {
            double v75 = (float64x2_t *)(v32 + v20 + v33 * v23);
            double v76 = (float64x2_t *)(v32 + v20 + v33 * v24);
            char v77 = (float64x2_t *)(v32 + v20 + v33 * v25);
            BOOL v78 = v119;
            uint64_t v79 = v11;
            int v80 = (float64x2_t *)(v32 + v20 + v33 * v22);
            do
            {
              float64x2_t v81 = *v80++;
              float64x2_t v82 = vmulq_n_f64(v81, v28);
              float64x2_t v83 = *v77++;
              float64x2_t v84 = vmulq_n_f64(v83, v29);
              float64x2_t v85 = *v76++;
              float64x2_t v86 = vaddq_f64(v82, v84);
              float64x2_t v87 = vmulq_n_f64(v85, v30);
              float64x2_t v88 = *v75++;
              *BOOL v78 = vaddq_f64(*v78, vaddq_f64(v86, vaddq_f64(v87, vmulq_n_f64(v88, v31))));
              ++v78;
              v79 += 2;
            }
            while (v79 < v12);
          }
        }
        else
        {
          uint64_t v61 = (float64x2_t *)(v32 + v20 + v33 * v23);
          uint64_t v62 = (float64x2_t *)(v32 + v20 + v33 * v24);
          uint64_t v63 = (float64x2_t *)(v32 + v20 + v33 * v25);
          uint64_t v64 = v119;
          uint64_t v65 = v11;
          int64_t v66 = (float64x2_t *)(v32 + v20 + v33 * v22);
          do
          {
            float64x2_t v67 = *v66++;
            float64x2_t v68 = vmulq_n_f64(v67, v28);
            float64x2_t v69 = *v63++;
            float64x2_t v70 = vmulq_n_f64(v69, v29);
            float64x2_t v71 = *v62++;
            float64x2_t v72 = vaddq_f64(v68, v70);
            float64x2_t v73 = vmulq_n_f64(v71, v30);
            float64x2_t v74 = *v61++;
            *uint64_t v64 = vaddq_f64(*v64, vaddq_f64(v72, vaddq_f64(v73, vmulq_n_f64(v74, v31))));
            ++v64;
            v65 += 2;
          }
          while (v65 < v12);
        }
      }
      if (result > v12)
      {
        uint64_t v89 = 0;
        uint64_t v90 = v32 + v21;
        uint64_t v91 = v32 + v21 + v33 * v23;
        uint64_t v92 = v90 + v33 * v24;
        uint64_t v93 = v90 + v33 * v25;
        uint64_t v94 = v90 + v33 * v22;
        do
        {
          double v95 = v28 * *(double *)(v94 + 8 * v89) + v27[v89];
          v27[v89] = v95;
          double v96 = v95 + v29 * *(double *)(v93 + 8 * v89);
          v27[v89] = v96;
          double v97 = v96 + v30 * *(double *)(v92 + 8 * v89);
          v27[v89] = v97;
          v27[v89] = v97 + v31 * *(double *)(v91 + 8 * v89);
          ++v89;
        }
        while (result - v12 != v89);
      }
      v26 += 4;
      v23 += 32;
      v24 += 32;
      v25 += 32;
      v22 += 32;
    }
    while (v26 < v19);
  }
  do
  {
    uint64_t v98 = v7;
    if (v19 < a2)
    {
      uint64_t v99 = 8 * v19;
      do
      {
        double v100 = *(double *)(*a4 + 8 * v19) * a6;
        uint64_t v101 = *a3;
        uint64_t v102 = a3[1];
        if (v11 >= 1)
        {
          uint64_t v103 = (double *)(v101 + v102 * v99);
          uint64_t v104 = a5;
          uint64_t v105 = v11;
          do
          {
            double v106 = *v103++;
            double *v104 = *v104 + v100 * v106;
            ++v104;
            --v105;
          }
          while (v105);
        }
        if ((((_BYTE)v101 + 8 * (_BYTE)v102 * (_BYTE)v19 + 8 * (_BYTE)v11) & 0xF) != 0)
        {
          if (v11 < v12)
          {
            uint64_t v107 = (float64x2_t *)(v101 + v20 + v102 * v99);
            uint64_t v108 = (float64x2_t *)&a5[v11];
            uint64_t v109 = v11;
            do
            {
              float64x2_t v110 = *v107++;
              float64x2_t *v108 = vmlaq_n_f64(*v108, v110, v100);
              ++v108;
              v109 += 2;
            }
            while (v109 < v12);
          }
        }
        else if (v11 < v12)
        {
          uint64_t v111 = (float64x2_t *)(v101 + v20 + v102 * v99);
          uint64_t v112 = (float64x2_t *)&a5[v11];
          uint64_t v113 = v11;
          do
          {
            float64x2_t v114 = *v111++;
            *uint64_t v112 = vmlaq_n_f64(*v112, v114, v100);
            ++v112;
            v113 += 2;
          }
          while (v113 < v12);
        }
        if (result > v12)
        {
          uint64_t v115 = (double *)(v101 + v21 + v102 * v99);
          uint64_t v116 = &a5[v12];
          uint64_t v117 = result - v12;
          do
          {
            double v118 = *v115++;
            *uint64_t v116 = *v116 + v100 * v118;
            ++v116;
            --v117;
          }
          while (v117);
        }
        ++v19;
        v99 += 8;
      }
      while (v19 != a2);
    }
    uint64_t v7 = 0;
    uint64_t v19 = 0;
    a2 = v98;
  }
  while (v98);
  return result;
}

void Eigen::internal::triangular_solver_selector<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,1,0,-1,1>,1,6,0,1>::run(uint64_t **a1, unint64_t *a2)
{
  v14[1] = *MEMORY[0x263EF8340];
  unint64_t v2 = a2[1];
  if (v2 >> 61) {
    goto LABEL_14;
  }
  uint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (*a2)
  {
    unint64_t v6 = *a2;
    goto LABEL_8;
  }
  size_t v7 = 8 * v2;
  if (v2 <= 0x4000)
  {
    uint64_t v8 = (char *)v14 - ((MEMORY[0x270FA5388](v7, v7 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, v9);
    unint64_t v5 = 0;
    unint64_t v6 = (unint64_t)(v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  uint64_t v10 = malloc_type_malloc(v7, 0x1E76AA36uLL);
  if (!v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v13 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v13, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v6 = (unint64_t)v10;
  unint64_t v5 = *a2;
  unint64_t v2 = a2[1];
LABEL_8:
  if (v5) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (void *)v6;
  }
  Eigen::internal::triangular_solve_vector<double,double,long,1,6,false,1>::run(v4[1], *v4, v4[1], v6);
  if (8 * v2 > 0x20000) {
    free(v11);
  }
}

void Eigen::internal::triangular_solve_vector<double,double,long,1,6,false,1>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v26[9] = *MEMORY[0x263EF8340];
  if (a1 >= 1)
  {
    uint64_t v6 = a3 * (a1 - 1);
    uint64_t v7 = a2 + 8 * v6;
    uint64_t v24 = -8 * a3;
    uint64_t v8 = a2 + 8 * v6 + 8 * a1;
    unint64_t v18 = (a3 << 6) ^ 0xFFFFFFFFFFFFFFC0;
    uint64_t v19 = -64 * a3;
    uint64_t v9 = a4 + 8 * a1;
    unint64_t v23 = (8 * a3) ^ 0xFFFFFFFFFFFFFFF8;
    uint64_t v10 = a1;
    do
    {
      if ((unint64_t)v10 >= 8) {
        uint64_t v11 = 8;
      }
      else {
        uint64_t v11 = v10;
      }
      if (a1 != v10)
      {
        v25[0] = a2 + 8 * (v10 + (v10 - v11) * a3);
        v25[1] = a3;
        v26[0] = a4 + 8 * v10;
        v26[1] = 1;
        Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(v11, a1 - v10, v25, v26, a4 + 8 * (v10 - v11), 1, -1.0);
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = -v11;
      uint64_t v20 = v8;
      uint64_t v21 = v7;
      do
      {
        if (v13)
        {
          v25[0] = v8;
          v25[2] = v14;
          v25[3] = v7;
          v25[5] = a1;
          v25[6] = a2;
          v25[7] = a1;
          v25[8] = a1;
          v25[9] = a3;
          v25[11] = v10 + v13 - 1;
          v25[12] = 0;
          v25[13] = a3;
          v25[15] = v10 + v13;
          v25[16] = a3;
          v25[17] = v9 + v12;
          v25[18] = v14;
          void v26[2] = v8;
          v26[4] = a3;
          v26[5] = v9 + v12;
          v26[7] = v14;
          v26[8] = v25;
          *(double *)(v9 + 8 * v13 - 8) = *(double *)(v9 + 8 * v13 - 8)
                                        - Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::OuterStride<-1>> const,1,-1,true> const,1,-1,false> const> const,Eigen::Map<Eigen::Matrix<double,-1,1,0,-1,1> const,0,Eigen::Stride<0,0>> const>>,3,0>::run(v26);
        }
        ++v14;
        --v13;
        v8 += v23;
        v7 += v24;
        v12 -= 8;
      }
      while (v15 != v13);
      v9 -= 64;
      uint64_t v8 = v20 + v18;
      uint64_t v7 = v21 + v19;
      BOOL v16 = v10 <= 8;
      v10 -= 8;
    }
    while (!v16);
  }
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::OuterStride<-1>> const,1,-1,true> const,1,-1,false> const> const,Eigen::Map<Eigen::Matrix<double,-1,1,0,-1,1> const,0,Eigen::Stride<0,0>> const>>,3,0>::run(void *a1)
{
  uint64_t v1 = *(void *)(a1[8] + 144);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(a1[8] + 144);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(a1[8] + 144);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  uint64_t v4 = (float64x2_t *)a1[2];
  unint64_t v5 = (float64x2_t *)a1[5];
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * v5->f64[0];
  }
  int64_t v7 = v3 & 0xFFFFFFFFFFFFFFFELL;
  float64x2_t v8 = vmulq_f64(*v4, *v5);
  if (v1 >= 4)
  {
    int64_t v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v10 = vmulq_f64(v4[1], v5[1]);
    if ((unint64_t)v1 >= 8)
    {
      uint64_t v11 = v5 + 3;
      uint64_t v12 = v4 + 3;
      uint64_t v13 = 4;
      do
      {
        float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        float64x2_t v14 = *v12;
        v12 += 2;
        float64x2_t v15 = v14;
        float64x2_t v16 = *v11;
        v11 += 2;
        float64x2_t v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    float64x2_t v8 = vaddq_f64(v10, v8);
    if (v7 > v9) {
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v5 + 8 * v9)));
    }
  }
  double result = vaddvq_f64(v8);
  BOOL v17 = v1 <= v7;
  uint64_t v18 = v1 - v7;
  if (!v17)
  {
    uint64_t v19 = v3 >> 1;
    f64 = v4[v19].f64;
    uint64_t v21 = v5[v19].f64;
    do
    {
      double v22 = *f64++;
      double v23 = v22;
      double v24 = *v21++;
      double result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

void *Eigen::internal::generic_product_impl<Eigen::Transpose<Eigen::TranspositionsBase<Eigen::Transpositions<-1,-1,int>>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::TranspositionsShape,Eigen::DenseShape,7>::evalTo<Eigen::Matrix<double,-1,1,0,-1,1>>(void *result, uint64_t **a2, long long **a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  uint64_t v5 = (*a2)[1];
  uint64_t v6 = (_OWORD *)*result;
  uint64_t v7 = result[1];
  int64_t v9 = *a3;
  uint64_t v8 = (uint64_t)a3[1];
  if ((long long *)*result != *a3 || v7 != v8)
  {
    if (v7 != v8)
    {
      double result = Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(result, v8, 1);
      uint64_t v6 = (_OWORD *)*v3;
      uint64_t v7 = v3[1];
    }
    if (v7 >= 0) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v7 + 1;
    }
    int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v7 >= 2)
    {
      int64_t v13 = 0;
      float64x2_t v14 = v6;
      float64x2_t v15 = v9;
      do
      {
        long long v16 = *v15++;
        *v14++ = v16;
        v13 += 2;
      }
      while (v13 < v12);
    }
    BOOL v17 = v7 <= v12;
    uint64_t v18 = v7 - v12;
    if (!v17)
    {
      uint64_t v19 = v11 >> 1;
      uint64_t v20 = (uint64_t *)&v9[v11 >> 1];
      uint64_t v21 = &v6[v19];
      do
      {
        uint64_t v22 = *v20++;
        *v21++ = v22;
        --v18;
      }
      while (v18);
    }
  }
  uint64_t v23 = v5 - 1;
  if (v5 >= 1)
  {
    uint64_t v24 = *v4;
    uint64_t v25 = (_OWORD *)*v3;
    do
    {
      uint64_t v26 = *(int *)(v24 + 4 * v23);
      if (v23 != v26)
      {
        uint64_t v27 = *((void *)v25 + v23);
        *((void *)v25 + v23) = *((void *)v25 + v26);
        *((void *)v25 + v26) = v27;
      }
      unint64_t v28 = v23-- + 1;
    }
    while (v28 > 1);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 64) + 24) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 64) + 24) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 64) + 24) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  uint64_t v4 = *(float64x2_t **)(a1 + 16);
  if ((unint64_t)(v1 + 1) < 3) {
    return (v4->f64[0] + **(double **)(a1 + 48)) * (v4->f64[0] + **(double **)(a1 + 48));
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v7 = *(float64x2_t **)(a1 + 48);
  float64x2_t v8 = vaddq_f64(*v4, *v7);
  float64x2_t v9 = vmulq_f64(v8, v8);
  if (v1 >= 4)
  {
    int64_t v10 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v11 = vaddq_f64(v4[1], v7[1]);
    float64x2_t v12 = vmulq_f64(v11, v11);
    if ((unint64_t)v1 >= 8)
    {
      int64_t v13 = v7 + 3;
      float64x2_t v14 = v4 + 3;
      uint64_t v15 = 4;
      do
      {
        float64x2_t v16 = vaddq_f64(v14[-1], v13[-1]);
        float64x2_t v9 = vaddq_f64(v9, vmulq_f64(v16, v16));
        float64x2_t v17 = *v14;
        v14 += 2;
        float64x2_t v18 = v17;
        float64x2_t v19 = *v13;
        v13 += 2;
        float64x2_t v20 = vaddq_f64(v18, v19);
        float64x2_t v12 = vaddq_f64(v12, vmulq_f64(v20, v20));
        v15 += 4;
      }
      while (v15 < v10);
    }
    float64x2_t v9 = vaddq_f64(v12, v9);
    if (v6 > v10)
    {
      float64x2_t v21 = vaddq_f64(*(float64x2_t *)((char *)v4 + 8 * v10), *(float64x2_t *)((char *)v7 + 8 * v10));
      float64x2_t v9 = vaddq_f64(v9, vmulq_f64(v21, v21));
    }
  }
  double result = vaddvq_f64(v9);
  BOOL v22 = v1 <= v6;
  uint64_t v23 = v1 - v6;
  if (!v22)
  {
    uint64_t v24 = v3 >> 1;
    f64 = v4[v24].f64;
    uint64_t v26 = v7[v24].f64;
    do
    {
      double v27 = *f64++;
      double v28 = v27;
      double v29 = *v26++;
      double result = result + (v28 + v29) * (v28 + v29);
      --v23;
    }
    while (v23);
  }
  return result;
}

uint64_t boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<std::string>(int *a1, uint64_t a2)
{
  v4[2] = *MEMORY[0x263EF8340];
  v3[0] = a2;
  v3[1] = v3;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<std::string>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31));
  if ((result & 1) == 0) {
    turi::flexible_type::flexible_type<std::string>((uint64_t)v4);
  }
  return result;
}

void sub_224497424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<std::string>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9) {
    boost::detail::variant::forced_return<void>(a1);
  }
  return 0;
}

turi::supervised::linear_regression_opt_interface *turi::supervised::linear_regression_opt_interface::linear_regression_opt_interface(turi::supervised::linear_regression_opt_interface *this, const turi::ml_data *a2, const turi::ml_data *a3, turi::supervised::linear_regression *a4)
{
  *(void *)this = &unk_26D783388;
  float64x2_t v8 = (char *)this + 8;
  turi::ml_data::ml_data((turi::supervised::linear_regression_opt_interface *)((char *)this + 8));
  turi::ml_data::ml_data((turi::supervised::linear_regression_opt_interface *)((char *)this + 200));
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((unsigned char *)this + 416) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((void *)this + 53) = (char *)this + 432;
  *((void *)this + 56) = (char *)this + 456;
  *((_OWORD *)this + 30) = 0u;
  *((void *)this + 59) = (char *)this + 480;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((void *)this + 62) = (char *)this + 504;
  *((void *)this + 67) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((void *)this + 68) = (char *)this + 552;
  *((void *)this + 73) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((void *)this + 74) = (char *)this + 600;
  *((void *)this + 77) = (char *)this + 624;
  *((void *)this + 82) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((void *)this + 83) = (char *)this + 672;
  *((void *)this + 86) = (char *)this + 696;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((unsigned char *)this + 760) = 1;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((void *)this + 49) = &unk_26D783118;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((void *)this + 106) = 0;
  *((_WORD *)this + 440) = 0;
  *((_OWORD *)this + 54) = 0u;
  turi::ml_data::operator=((uint64_t)v8, (uint64_t *)a2);
  if (*((void *)a3 + 3) != *((void *)a3 + 2)) {
    turi::ml_data::operator=((uint64_t)this + 200, (uint64_t *)a3);
  }
  float64x2_t v9 = (turi::thread_pool *)turi::supervised::linear_regression::operator=((void *)this + 49, a4);
  *((void *)this + 104) = *((void *)this + 4) - *((void *)this + 3);
  *((void *)this + 105) = (uint64_t)(*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1)) >> 4;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v9);
  *((void *)this + 107) = turi::thread_pool::size(instance);
  float64x2_t v11 = (uint64_t *)*((void *)this + 96);
  float64x2_t v12 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *v11;
  if (v11[1] == *v11)
  {
    unint64_t v16 = 1;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = 1;
    do
    {
      uint64_t v17 = v13 + v14;
      uint64_t v19 = *(void *)(v13 + v14);
      float64x2_t v18 = *(std::__shared_weak_count **)(v17 + 8);
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v20 = *(_DWORD *)(v19 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      else
      {
        unsigned int v20 = *(_DWORD *)(v19 + 24);
      }
      if (v20 > 6 || ((1 << v20) & 0x4A) == 0)
      {
        double v27 = (uint64_t *)(*v11 + v14);
        uint64_t v29 = *v27;
        double v28 = (std::__shared_weak_count *)v27[1];
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v26 = *(void *)(v29 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        else
        {
          uint64_t v26 = *(void *)(v29 + 64);
        }
      }
      else
      {
        BOOL v22 = (uint64_t *)(*v11 + v14);
        uint64_t v24 = *v22;
        uint64_t v23 = (std::__shared_weak_count *)v22[1];
        if (v23)
        {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v25 = *(void *)(v24 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        else
        {
          uint64_t v25 = *(void *)(v24 + 64);
        }
        uint64_t v26 = v25 - 1;
      }
      v16 += v26;
      ++v15;
      uint64_t v13 = *v11;
      v14 += 16;
    }
    while (v15 < (v11[1] - *v11) >> 4);
  }
  *((void *)this + 106) = v16;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    unint64_t v16 = *((void *)this + 106);
  }
  *((unsigned char *)this + 881) = v16 <= 3 * *((void *)this + 6);
  return this;
}

{
  return turi::supervised::linear_regression_opt_interface::linear_regression_opt_interface(this, a2, a3, a4);
}

void sub_22449779C(_Unwind_Exception *a1)
{
  turi::ml_data::~ml_data(v2);
  turi::neural_net::float_scalar::~float_scalar(v1);
  _Unwind_Resume(a1);
}

void *turi::supervised::linear_regression::operator=(void *a1, void *a2)
{
  turi::supervised::supervised_learning_model_base::operator=((uint64_t)a1, (uint64_t)a2);
  uint64_t v5 = a2[49];
  uint64_t v4 = a2[50];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v6 = (std::__shared_weak_count *)a1[50];
  a1[49] = v5;
  a1[50] = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = a1 + 51;
  float64x2_t v9 = (long long *)a2[51];
  uint64_t v8 = a2[52];
  if (a1[52] != v8)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 51, v8, 1);
    uint64_t v8 = a1[52];
  }
  int64_t v10 = (_OWORD *)*v7;
  if (v8 >= 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = v8 + 1;
  }
  int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (v8 >= 2)
  {
    int64_t v13 = 0;
    uint64_t v14 = (_OWORD *)*v7;
    unint64_t v15 = v9;
    do
    {
      long long v16 = *v15++;
      *v14++ = v16;
      v13 += 2;
    }
    while (v13 < v12);
  }
  BOOL v17 = __OFSUB__(v8, v12);
  uint64_t v18 = v8 - v12;
  if (!((v18 < 0) ^ v17 | (v18 == 0)))
  {
    uint64_t v19 = v11 >> 1;
    unsigned int v20 = (uint64_t *)&v9[v11 >> 1];
    float64x2_t v21 = &v10[v19];
    do
    {
      uint64_t v22 = *v20++;
      *v21++ = v22;
      --v18;
    }
    while (v18);
  }
  uint64_t v23 = a1 + 53;
  uint64_t v25 = (long long *)a2[53];
  uint64_t v24 = a2[54];
  if (a1[54] != v24)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1 + 53, v24, 1);
    uint64_t v24 = a1[54];
  }
  uint64_t v26 = (_OWORD *)*v23;
  if (v24 >= 0) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v24 + 1;
  }
  int64_t v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if (v24 >= 2)
  {
    int64_t v29 = 0;
    double v30 = (_OWORD *)*v23;
    double v31 = v25;
    do
    {
      long long v32 = *v31++;
      *v30++ = v32;
      v29 += 2;
    }
    while (v29 < v28);
  }
  BOOL v17 = __OFSUB__(v24, v28);
  uint64_t v33 = v24 - v28;
  if (!((v33 < 0) ^ v17 | (v33 == 0)))
  {
    uint64_t v34 = v27 >> 1;
    unint64_t v35 = (uint64_t *)&v25[v27 >> 1];
    int64_t v36 = &v26[v34];
    do
    {
      uint64_t v37 = *v35++;
      *v36++ = v37;
      --v33;
    }
    while (v33);
  }
  return a1;
}

void turi::supervised::linear_regression_opt_interface::~linear_regression_opt_interface(turi::supervised::linear_regression_opt_interface *this)
{
  *(void *)this = &unk_26D783388;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 109);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  turi::supervised::linear_regression::~linear_regression((turi::supervised::linear_regression_opt_interface *)((char *)this + 392));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v11 = (void **)((char *)this + 352);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v11 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v5 = (void *)*((void *)this + 33);
  if (v5)
  {
    *((void *)this + 34) = v5;
    operator delete(v5);
  }
  int64_t v6 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v11 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v11 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  float64x2_t v9 = (void *)*((void *)this + 9);
  if (v9)
  {
    *((void *)this + 10) = v9;
    operator delete(v9);
  }
  int64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  uint64_t vars8;

  turi::supervised::linear_regression_opt_interface::~linear_regression_opt_interface(this);
  JUMPOUT(0x22A614FA0);
}

void turi::supervised::linear_regression_opt_interface::init_feature_rescaling(turi::supervised::linear_regression_opt_interface *this)
{
  *((unsigned char *)this + 880) = 1;
  operator new();
}

void sub_224497B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    MEMORY[0x22A614FA0](v10, 0x1081C40F38A5E8DLL);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<turi::supervised::l2_rescaling>::reset[abi:ne180100]<turi::supervised::l2_rescaling,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::supervised::l2_rescaling>::shared_ptr[abi:ne180100]<turi::supervised::l2_rescaling,void>(&v2, a2);
}

uint64_t turi::supervised::linear_regression_opt_interface::rescale_solution(uint64_t result)
{
  if (*(unsigned char *)(result + 880)) {
    return (*(uint64_t (**)(void))(**(void **)(result + 864) + 16))();
  }
  return result;
}

uint64_t turi::supervised::linear_regression_opt_interface::num_variables(turi::supervised::linear_regression_opt_interface *this)
{
  return *((void *)this + 106);
}

uint64_t turi::supervised::linear_regression_opt_interface::num_examples(turi::supervised::linear_regression_opt_interface *this)
{
  return *((void *)this + 104);
}

uint64_t turi::supervised::linear_regression_opt_interface::num_validation_examples(turi::supervised::linear_regression_opt_interface *this)
{
  return *((void *)this + 28) - *((void *)this + 27);
}

void turi::supervised::linear_regression_opt_interface::get_status_header(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  turi::supervised::make_progress_header((long long **)(a1 + 392), a2, *(void *)(a1 + 224) != *(void *)(a1 + 216), a3);
}

void turi::supervised::make_progress_header(long long **a1@<X0>, long long **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  v71[2] = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *a2;
  int64_t v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        v65.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v66 = 8;
      unint64_t v8 = a4[1];
      unint64_t v9 = a4[2];
      if (v8 >= v9)
      {
        uint64_t v11 = (uint64_t)(v8 - *a4) >> 5;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v9 - *a4;
        if (v13 >> 4 > v12) {
          unint64_t v12 = v13 >> 4;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        float64x2_t v69 = a4 + 2;
        unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a4 + 2), v14);
        std::string::size_type v16 = (std::string::size_type)&v15[32 * v11];
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        v67.__r_.__value_.__l.__size_ = v16;
        float64x2_t v68 = &v15[32 * v17];
        long long v18 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
        *(void *)(v16 + 16) = *((void *)&v65.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v16 = v18;
        memset(&v65, 0, sizeof(v65));
        *(void *)(v16 + 24) = v66;
        v67.__r_.__value_.__r.__words[2] = v16 + 32;
        std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(a4, &v67);
        uint64_t v19 = a4[1];
        std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v67);
        int v20 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
        a4[1] = v19;
        if (v20 < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
        *(void *)(v8 + 16) = *((void *)&v65.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v8 = v10;
        memset(&v65, 0, sizeof(v65));
        *(void *)(v8 + 24) = v66;
        a4[1] = v8 + 32;
      }
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != v6);
  }
  memset(&v65, 0, sizeof(v65));
  turi::supervised::supervised_learning_model_base::get_tracking_metrics(a1, &v67);
  std::string::size_type size = v67.__r_.__value_.__l.__size_;
  std::string::size_type v22 = v67.__r_.__value_.__r.__words[0];
  if (v67.__r_.__value_.__r.__words[0] != v67.__r_.__value_.__l.__size_)
  {
    uint64_t v23 = (std::string *)v65.__r_.__value_.__l.__size_;
    do
    {
      if ((unint64_t)v23 >= v65.__r_.__value_.__r.__words[2])
      {
        uint64_t v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, (long long *)v22);
      }
      else
      {
        if (*(char *)(v22 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
        }
        else
        {
          long long v24 = *(_OWORD *)v22;
          v23->__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        }
        ++v23;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
      v22 += 24;
    }
    while (v22 != size);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string::size_type v26 = v65.__r_.__value_.__l.__size_;
  for (uint64_t i = v65.__r_.__value_.__r.__words[0]; i != v26; i += 24)
  {
    turi::supervised::supervised_learning_model_base::get_metric_display_name(i, &__p);
    std::string::basic_string[abi:ne180100]<0>(&v63, "Training ");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
    }
    int64_t v29 = std::string::append(&v63, (const std::string::value_type *)p_p, v28);
    std::string::size_type v30 = v29->__r_.__value_.__r.__words[0];
    v70[0] = v29->__r_.__value_.__l.__size_;
    *(void *)((char *)v70 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
    char v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v71[0] = v70[0];
    *(void *)((char *)v71 + 7) = *(void *)((char *)v70 + 7);
    unint64_t v32 = a4[1];
    unint64_t v33 = a4[2];
    if (v32 >= v33)
    {
      uint64_t v36 = (uint64_t)(v32 - *a4) >> 5;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 59) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = v33 - *a4;
      if (v38 >> 4 > v37) {
        unint64_t v37 = v38 >> 4;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      float64x2_t v69 = a4 + 2;
      double v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a4 + 2), v39);
      std::string::size_type v41 = (std::string::size_type)&v40[32 * v36];
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v67.__r_.__value_.__l.__size_ = v41;
      float64x2_t v68 = &v40[32 * v42];
      uint64_t v43 = v71[0];
      *(void *)std::string::size_type v41 = v30;
      *(void *)(v41 + 8) = v43;
      *(void *)(v41 + 15) = *(void *)((char *)v71 + 7);
      *(unsigned char *)(v41 + 23) = v31;
      *(void *)(v41 + 24) = 6;
      v67.__r_.__value_.__r.__words[2] = v41 + 32;
      std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(a4, &v67);
      uint64_t v35 = a4[1];
      std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v67);
    }
    else
    {
      uint64_t v34 = v71[0];
      *(void *)unint64_t v32 = v30;
      *(void *)(v32 + 8) = v34;
      *(void *)(v32 + 15) = *(void *)((char *)v71 + 7);
      *(unsigned char *)(v32 + 23) = v31;
      *(void *)(v32 + 24) = 6;
      uint64_t v35 = v32 + 32;
      a4[1] = v32 + 32;
    }
    a4[1] = v35;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v63, "Validation ");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v44 = &__p;
      }
      else {
        double v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
      }
      double v46 = std::string::append(&v63, (const std::string::value_type *)v44, v45);
      std::string::size_type v47 = v46->__r_.__value_.__r.__words[0];
      v70[0] = v46->__r_.__value_.__l.__size_;
      *(void *)((char *)v70 + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
      char v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      v71[0] = v70[0];
      *(void *)((char *)v71 + 7) = *(void *)((char *)v70 + 7);
      unint64_t v49 = a4[1];
      unint64_t v50 = a4[2];
      if (v49 >= v50)
      {
        uint64_t v53 = (uint64_t)(v49 - *a4) >> 5;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 59) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v55 = v50 - *a4;
        if (v55 >> 4 > v54) {
          unint64_t v54 = v55 >> 4;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v56 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        float64x2_t v69 = a4 + 2;
        float64x2_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a4 + 2), v56);
        std::string::size_type v58 = (std::string::size_type)&v57[32 * v53];
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
        v67.__r_.__value_.__l.__size_ = v58;
        float64x2_t v68 = &v57[32 * v59];
        uint64_t v60 = v71[0];
        *(void *)std::string::size_type v58 = v47;
        *(void *)(v58 + 8) = v60;
        *(void *)(v58 + 15) = *(void *)((char *)v71 + 7);
        *(unsigned char *)(v58 + 23) = v48;
        *(void *)(v58 + 24) = 6;
        v67.__r_.__value_.__r.__words[2] = v58 + 32;
        std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(a4, &v67);
        uint64_t v52 = a4[1];
        std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v67);
      }
      else
      {
        uint64_t v51 = v71[0];
        *(void *)unint64_t v49 = v47;
        *(void *)(v49 + 8) = v51;
        *(void *)(v49 + 15) = *(void *)((char *)v71 + 7);
        *(unsigned char *)(v49 + 23) = v48;
        *(void *)(v49 + 24) = 6;
        uint64_t v52 = v49 + 32;
        a4[1] = v49 + 32;
      }
      a4[1] = v52;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
}

void sub_224498124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void **a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  a17 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression_opt_interface::get_status(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v7, a2);
  if (*(unsigned char *)(a1 + 880)) {
    (*(void (**)(void, void **))(**(void **)(a1 + 864) + 16))(*(void *)(a1 + 864), v7);
  }
  turi::supervised::linear_regression::set_coefs(a1 + 392, (long long **)v7);
  turi::supervised::make_progress_row_string(a1 + 392, a1 + 8, a1 + 200, a3, a4);
  free(v7[0]);
}

void sub_2244982B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void turi::supervised::make_progress_row_string(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long **a4@<X3>, uint64_t a5@<X8>)
{
  memset(&v65, 0, sizeof(v65));
  std::string::basic_string[abi:ne180100]<0>(&__p, "train");
  (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, uint64_t, std::__split_buffer<std::string> *, void))(*(void *)a1 + 104))(&v64, a1, a2, &__p, 0);
  if (SHIBYTE(__p.__end_) < 0) {
    operator delete(__p.__first_);
  }
  std::vector<std::string>::pointer begin = v64.__begin_;
  if ((std::vector<std::string>::pointer *)v64.__begin_ != &v64.__end_)
  {
    do
    {
      double v11 = turi::variant_converter<double,void>::get((uint64_t)&__p, (int *)&begin[2].__r_.__value_.__r.__words[1]);
      std::to_string(&v63, v11);
      std::vector<std::string>::pointer end = v65.__end_;
      if (v65.__end_ >= v65.__end_cap_.__value_)
      {
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_ - (char *)v65.__begin_) >> 3);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3) > v15) {
          unint64_t v15 = 0x5555555555555556 * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v15;
        }
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v65.__end_cap_;
        if (v16) {
          uint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v65.__end_cap_, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        long long v18 = v17 + v14;
        __p.__first_ = v17;
        __p.__begin_ = v18;
        __p.__end_cap_.__value_ = &v17[v16];
        long long v19 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        v18->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        memset(&v63, 0, sizeof(v63));
        __p.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v65, &__p);
        int v20 = v65.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__p);
        v65.__end_ = v20;
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v13 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        v65.__end_->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v13;
        v65.__end_ = end + 1;
      }
      std::string::size_type size = (std::vector<std::string> *)begin->__r_.__value_.__l.__size_;
      if (size)
      {
        do
        {
          std::string::size_type v22 = size;
          std::string::size_type size = (std::vector<std::string> *)size->__begin_;
        }
        while (size);
      }
      else
      {
        do
        {
          std::string::size_type v22 = (std::vector<std::string> *)begin->__r_.__value_.__r.__words[2];
          BOOL v23 = v22->__begin_ == begin;
          std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)v22;
        }
        while (!v23);
      }
      std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)v22;
    }
    while (v22 != (std::vector<std::string> *)&v64.__end_);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v64, (char *)v64.__end_);
  memset(&v64, 0, sizeof(v64));
  uint64_t v25 = *(void *)(a3 + 16);
  uint64_t v24 = *(void *)(a3 + 24);
  if (v24 != v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "train");
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::__split_buffer<std::string> *, void))(*(void *)a1 + 104))(&v63, a1, a3, &__p, 0);
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    std::string::size_type v26 = v63.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v63.__r_.__value_.__l.__data_ != &v63.__r_.__value_.__r.__words[1])
    {
      do
      {
        double v27 = turi::variant_converter<double,void>::get((uint64_t)&__p, (int *)(v26 + 56));
        std::to_string(&v62, v27);
        std::vector<std::string>::pointer v28 = v64.__end_;
        if (v64.__end_ >= v64.__end_cap_.__value_)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v31) {
            unint64_t v31 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v32 = v31;
          }
          __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v64.__end_cap_;
          if (v32) {
            unint64_t v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v64.__end_cap_, v32);
          }
          else {
            unint64_t v33 = 0;
          }
          uint64_t v34 = v33 + v30;
          __p.__first_ = v33;
          __p.__begin_ = v34;
          __p.__end_cap_.__value_ = &v33[v32];
          long long v35 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
          v34->__r_.__value_.__r.__words[2] = v62.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
          memset(&v62, 0, sizeof(v62));
          __p.__end_ = v34 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v64, &__p);
          uint64_t v36 = v64.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__p);
          v64.__end_ = v36;
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v29 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
          v64.__end_->__r_.__value_.__r.__words[2] = v62.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          v64.__end_ = v28 + 1;
        }
        unint64_t v37 = *(std::string **)(v26 + 8);
        if (v37)
        {
          do
          {
            uint64_t v38 = v37;
            unint64_t v37 = (std::string *)v37->__r_.__value_.__r.__words[0];
          }
          while (v37);
        }
        else
        {
          do
          {
            uint64_t v38 = *(std::string **)(v26 + 16);
            BOOL v23 = v38->__r_.__value_.__r.__words[0] == v26;
            std::string::size_type v26 = (std::string::size_type)v38;
          }
          while (!v23);
        }
        std::string::size_type v26 = (std::string::size_type)v38;
      }
      while (v38 != (std::string *)&v63.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v63, (char *)v63.__r_.__value_.__l.__size_);
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  unint64_t v39 = *a4;
  double v40 = a4[1];
  if (*a4 != v40)
  {
    unint64_t v41 = 0;
    do
    {
      if (v41 >= *(void *)(a5 + 16))
      {
        unint64_t v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a5, v39);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v39);
        v41 += 24;
      }
      *(void *)(a5 + 8) = v41;
      unint64_t v39 = (long long *)((char *)v39 + 24);
    }
    while (v39 != v40);
  }
  std::vector<std::string>::pointer v42 = v65.__begin_;
  if (v65.__end_ != v65.__begin_)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    do
    {
      std::string::size_type v45 = (long long *)&v42[v43];
      unint64_t v46 = *(void *)(a5 + 8);
      if (v46 >= *(void *)(a5 + 16))
      {
        unint64_t v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a5, v45);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v45);
        unint64_t v47 = v46 + 24;
      }
      *(void *)(a5 + 8) = v47;
      if (v64.__begin_ == v64.__end_)
      {
        if (v24 != v25)
        {
          std::string::basic_string[abi:ne180100]<0>(&v63, "");
          unint64_t v51 = *(void *)(a5 + 8);
          unint64_t v50 = *(void *)(a5 + 16);
          if (v51 >= v50)
          {
            unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(void *)a5) >> 3);
            unint64_t v54 = v53 + 1;
            if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *(void *)a5) >> 3);
            if (2 * v55 > v54) {
              unint64_t v54 = 2 * v55;
            }
            if (v55 >= 0x555555555555555) {
              unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v56 = v54;
            }
            __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a5 + 16);
            if (v56) {
              float64x2_t v57 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a5 + 16, v56);
            }
            else {
              float64x2_t v57 = 0;
            }
            std::string::size_type v58 = v57 + v53;
            __p.__first_ = v57;
            __p.__begin_ = v58;
            __p.__end_cap_.__value_ = &v57[v56];
            long long v59 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
            v58->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
            memset(&v63, 0, sizeof(v63));
            __p.__end_ = v58 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a5, &__p);
            uint64_t v60 = *(void *)(a5 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__p);
            int v61 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
            *(void *)(a5 + 8) = v60;
            if (v61 < 0) {
              operator delete(v63.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v52 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
            *(void *)(v51 + 16) = *((void *)&v63.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v51 = v52;
            *(void *)(a5 + 8) = v51 + 24;
          }
        }
      }
      else
      {
        char v48 = (long long *)&v64.__begin_[v43];
        if (v47 >= *(void *)(a5 + 16))
        {
          uint64_t v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a5, v48);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a5, v48);
          uint64_t v49 = v47 + 24;
        }
        *(void *)(a5 + 8) = v49;
      }
      ++v44;
      std::vector<std::string>::pointer v42 = v65.__begin_;
      ++v43;
    }
    while (v44 < 0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_ - (char *)v65.__begin_) >> 3));
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2244988FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  a10 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(uint64_t a1, void *a2, void *a3, float64x2_t **a4, double *a5)
{
  v47[4] = *(void ***)MEMORY[0x263EF8340];
  unint64_t v10 = *(void *)(a1 + 856);
  v47[0] = *(void ***)(a1 + 848);
  v47[1] = (void **)1;
  v47[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)__p, (uint64_t *)v47);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v46, v10, (uint64_t)__p);
  free(__p[0]);
  unint64_t v11 = *(void *)(a1 + 856);
  v47[0] = 0;
  std::vector<double>::vector(__p, v11, v47);
  if (*(unsigned char *)(a1 + 881))
  {
    unint64_t v12 = (void **)operator new(0x30uLL);
    *unint64_t v12 = &unk_26D783500;
  }
  else
  {
    unint64_t v12 = (void **)operator new(0x30uLL);
    *unint64_t v12 = &unk_26D783580;
  }
  v12[1] = (void *)a1;
  void v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v46;
  v12[5] = __p;
  v47[3] = v12;
  turi::in_parallel((turi::thread_pool *)v47);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v47);
  *a5 = *(double *)__p[0];
  unint64_t v14 = *(float64x2_t **)v46[0];
  uint64_t v13 = *(void *)(v46[0] + 8);
  if (a4[1] != (float64x2_t *)v13)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v13, 1);
    uint64_t v13 = (uint64_t)a4[1];
  }
  unint64_t v15 = *a4;
  if (v13 >= 0) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v13 + 1;
  }
  int64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (v13 >= 2)
  {
    int64_t v18 = 0;
    long long v19 = *a4;
    int v20 = v14;
    do
    {
      float64x2_t v21 = *v20++;
      *v19++ = v21;
      v18 += 2;
    }
    while (v18 < v17);
  }
  BOOL v22 = __OFSUB__(v13, v17);
  uint64_t v23 = v13 - v17;
  if (!((v23 < 0) ^ v22 | (v23 == 0)))
  {
    uint64_t v24 = v16 >> 1;
    uint64_t v25 = (uint64_t *)&v14[v16 >> 1];
    f64 = (void *)v15[v24].f64;
    do
    {
      uint64_t v27 = *v25++;
      *f64++ = v27;
      --v23;
    }
    while (v23);
  }
  if (*(void *)(a1 + 856) >= 2uLL)
  {
    unint64_t v28 = 1;
    do
    {
      uint64_t v29 = *(void *)(v46[0] + 16 * v28);
      unint64_t v30 = *a4;
      uint64_t v31 = (uint64_t)a4[1];
      if (v31 >= 0) {
        uint64_t v32 = (uint64_t)a4[1];
      }
      else {
        uint64_t v32 = v31 + 1;
      }
      int64_t v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      if (v31 >= 2)
      {
        int64_t v34 = 0;
        long long v35 = *a4;
        uint64_t v36 = *(float64x2_t **)(v46[0] + 16 * v28);
        do
        {
          float64x2_t v37 = *v36++;
          float64x2_t *v35 = vaddq_f64(v37, *v35);
          ++v35;
          v34 += 2;
        }
        while (v34 < v33);
      }
      BOOL v38 = v31 <= v33;
      uint64_t v39 = v31 - v33;
      if (!v38)
      {
        uint64_t v40 = v32 >> 1;
        unint64_t v41 = (double *)(v29 + 16 * v40);
        std::vector<std::string>::pointer v42 = v30[v40].f64;
        do
        {
          double v43 = *v41++;
          *std::vector<std::string>::pointer v42 = v43 + *v42;
          ++v42;
          --v39;
        }
        while (v39);
      }
      unint64_t v44 = __p[0];
      *a5 = *((double *)__p[0] + v28++) + *a5;
    }
    while (v28 < *(void *)(a1 + 856));
    goto LABEL_29;
  }
  unint64_t v44 = __p[0];
  if (__p[0])
  {
LABEL_29:
    __p[1] = v44;
    operator delete(v44);
  }
  v47[0] = (void **)v46;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100](v47);
}

void sub_224498CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  a16 = &a13;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(uint64_t a1, uint64_t a2, float64x2_t **a3, float64x2_t **a4, double *a5)
{
  v82[4] = *(void **)MEMORY[0x263EF8340];
  unint64_t v10 = *(void *)(a1 + 856);
  v80[0] = *(void *)(a1 + 848);
  v80[1] = v80[0];
  v80[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)v82, v80);
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::vector(v81, v10, (uint64_t)v82);
  free(v82[0]);
  unint64_t v11 = *(void *)(a1 + 856);
  v82[0] = *(void **)(a1 + 848);
  v82[1] = (void *)1;
  v82[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)__p, (uint64_t *)v82);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v80, v11, (uint64_t)__p);
  free(__p[0]);
  unint64_t v12 = *(void *)(a1 + 856);
  v82[0] = 0;
  std::vector<double>::vector(__p, v12, v82);
  if (*(unsigned char *)(a1 + 881))
  {
    uint64_t v13 = operator new(0x30uLL);
    *uint64_t v13 = &unk_26D783600;
  }
  else
  {
    uint64_t v13 = operator new(0x30uLL);
    *uint64_t v13 = &unk_26D783680;
  }
  v13[1] = a1;
  void v13[2] = a2;
  uint64_t v13[3] = v80;
  v13[4] = __p;
  v13[5] = v81;
  v82[3] = v13;
  turi::in_parallel((turi::thread_pool *)v82);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v82);
  *a5 = *(double *)__p[0];
  unint64_t v15 = *(float64x2_t **)v81[0];
  uint64_t v14 = *(void *)(v81[0] + 8);
  uint64_t v16 = *(void *)(v81[0] + 16);
  if (a3[1] != (float64x2_t *)v14 || a3[2] != (float64x2_t *)v16)
  {
    if (v14 && v16 && 0x7FFFFFFFFFFFFFFFLL / v16 < v14)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      BOOL v78 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v78, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a3, v16 * v14, v14, v16);
    uint64_t v14 = (uint64_t)a3[1];
    uint64_t v16 = (uint64_t)a3[2];
  }
  int64_t v17 = *a3;
  uint64_t v18 = v14 * v16;
  if (v14 * v16 >= 0) {
    uint64_t v19 = v14 * v16;
  }
  else {
    uint64_t v19 = v18 + 1;
  }
  int64_t v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
  if (v18 >= 2)
  {
    int64_t v21 = 0;
    BOOL v22 = *a3;
    uint64_t v23 = v15;
    do
    {
      float64x2_t v24 = *v23++;
      *v22++ = v24;
      v21 += 2;
    }
    while (v21 < v20);
  }
  BOOL v25 = v18 <= v20;
  uint64_t v26 = v18 - v20;
  if (!v25)
  {
    uint64_t v27 = v19 >> 1;
    unint64_t v28 = (uint64_t *)&v15[v19 >> 1];
    f64 = (void *)v17[v27].f64;
    do
    {
      uint64_t v30 = *v28++;
      *f64++ = v30;
      --v26;
    }
    while (v26);
  }
  uint64_t v32 = *(float64x2_t **)v80[0];
  uint64_t v31 = *(void *)(v80[0] + 8);
  if (a4[1] != (float64x2_t *)v31)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v31, 1);
    uint64_t v31 = (uint64_t)a4[1];
  }
  int64_t v33 = *a4;
  if (v31 >= 0) {
    uint64_t v34 = v31;
  }
  else {
    uint64_t v34 = v31 + 1;
  }
  int64_t v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
  if (v31 >= 2)
  {
    int64_t v36 = 0;
    float64x2_t v37 = *a4;
    BOOL v38 = v32;
    do
    {
      float64x2_t v39 = *v38++;
      *v37++ = v39;
      v36 += 2;
    }
    while (v36 < v35);
  }
  BOOL v40 = __OFSUB__(v31, v35);
  uint64_t v41 = v31 - v35;
  if (!((v41 < 0) ^ v40 | (v41 == 0)))
  {
    uint64_t v42 = v34 >> 1;
    double v43 = (uint64_t *)&v32[v34 >> 1];
    unint64_t v44 = (void *)v33[v42].f64;
    do
    {
      uint64_t v45 = *v43++;
      *v44++ = v45;
      --v41;
    }
    while (v41);
  }
  if (*(void *)(a1 + 856) >= 2uLL)
  {
    unint64_t v46 = 1;
    do
    {
      uint64_t v47 = *(void *)(v81[0] + 24 * v46);
      char v48 = *a3;
      uint64_t v49 = a3[1];
      uint64_t v50 = (void)a3[2] * (void)v49;
      if (v50 >= 0) {
        uint64_t v51 = (void)a3[2] * (void)v49;
      }
      else {
        uint64_t v51 = v50 + 1;
      }
      int64_t v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
      if (v50 >= 2)
      {
        int64_t v53 = 0;
        unint64_t v54 = *a3;
        unint64_t v55 = *(float64x2_t **)(v81[0] + 24 * v46);
        do
        {
          float64x2_t v56 = *v55++;
          *unint64_t v54 = vaddq_f64(v56, *v54);
          ++v54;
          v53 += 2;
        }
        while (v53 < v52);
      }
      BOOL v25 = v50 <= v52;
      uint64_t v57 = v50 - v52;
      if (!v25)
      {
        uint64_t v58 = v51 >> 1;
        long long v59 = (double *)(v47 + 16 * v58);
        uint64_t v60 = v48[v58].f64;
        do
        {
          double v61 = *v59++;
          *uint64_t v60 = v61 + *v60;
          ++v60;
          --v57;
        }
        while (v57);
      }
      uint64_t v62 = *(void *)(v80[0] + 16 * v46);
      std::string v63 = *a4;
      uint64_t v64 = (uint64_t)a4[1];
      if (v64 >= 0) {
        uint64_t v65 = (uint64_t)a4[1];
      }
      else {
        uint64_t v65 = v64 + 1;
      }
      int64_t v66 = v65 & 0xFFFFFFFFFFFFFFFELL;
      if (v64 >= 2)
      {
        int64_t v67 = 0;
        float64x2_t v68 = *a4;
        float64x2_t v69 = *(float64x2_t **)(v80[0] + 16 * v46);
        do
        {
          float64x2_t v70 = *v69++;
          float64x2_t *v68 = vaddq_f64(v70, *v68);
          ++v68;
          v67 += 2;
        }
        while (v67 < v66);
      }
      BOOL v25 = v64 <= v66;
      uint64_t v71 = v64 - v66;
      if (!v25)
      {
        uint64_t v72 = v65 >> 1;
        float64x2_t v73 = (double *)(v62 + 16 * v72);
        float64x2_t v74 = v63[v72].f64;
        do
        {
          double v75 = *v73++;
          double *v74 = v75 + *v74;
          ++v74;
          --v71;
        }
        while (v71);
      }
      double v76 = __p[0];
      *a5 = *((double *)__p[0] + v46++) + *a5;
    }
    while (v46 < *(void *)(a1 + 856));
    goto LABEL_53;
  }
  double v76 = __p[0];
  if (__p[0])
  {
LABEL_53:
    __p[1] = v76;
    operator delete(v76);
  }
  v82[0] = v80;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
  v82[0] = v81;
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100]((void ***)v82);
}

void sub_224499198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  if (__p) {
    operator delete(__p);
  }
  a18 = &a12;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = &a15;
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(uint64_t a1, void *a2, float64x2_t **a3, double *a4)
{
}

void turi::supervised::linear_regression_opt_interface::compute_validation_first_order_statistics(uint64_t a1, void *a2, float64x2_t **a3, double *a4)
{
}

uint64_t turi::supervised::supervised_learning_model_base::operator=(uint64_t a1, uint64_t a2)
{
  turi::model_base::operator=(a1, a2);
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>((uint64_t **)(a1 + 224), *(void **)(a2 + 224), (void *)(a2 + 232));
    std::vector<turi::option_handling::option_info>::__assign_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>((void **)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), (uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 7);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>((uint64_t **)(a1 + 272), *(void **)(a2 + 272), (void *)(a2 + 280));
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>((uint64_t **)(a1 + 296), *(long long **)(a2 + 296), (long long *)(a2 + 304));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 320), *(std::string **)(a2 + 320), *(long long **)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 344), *(std::string **)(a2 + 344), *(long long **)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 3));
  }
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  uint64_t v5 = *(void *)(a2 + 376);
  uint64_t v4 = *(void *)(a2 + 384);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v6 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v5;
  *(void *)(a1 + 384) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

uint64_t turi::supervised::l2_rescaling::l2_rescaling(uint64_t a1, uint64_t **a2, char a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = (void *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = a3;
  unint64_t v6 = 1;
  *(void *)a1 = &unk_26D783410;
  *(void *)(a1 + 8) = 1;
  uint64_t v7 = **a2;
  if ((*a2)[1] != v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = v7 + v8;
      uint64_t v12 = *(void *)(v7 + v8);
      unint64_t v11 = *(std::__shared_weak_count **)(v10 + 8);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v13 = *(_DWORD *)(v12 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      else
      {
        unsigned int v13 = *(_DWORD *)(v12 + 24);
      }
      if (v13 > 6 || ((1 << v13) & 0x4A) == 0)
      {
        int64_t v21 = (uint64_t *)(**a2 + v8);
        uint64_t v23 = *v21;
        BOOL v22 = (std::__shared_weak_count *)v21[1];
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v20 = *(void *)(v23 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        else
        {
          uint64_t v20 = *(void *)(v23 + 64);
        }
        uint64_t v19 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v15 = (uint64_t *)(**a2 + v8);
        uint64_t v17 = *v15;
        uint64_t v16 = (std::__shared_weak_count *)v15[1];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v18 = *(void *)(v17 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        else
        {
          uint64_t v18 = *(void *)(v17 + 64);
        }
        uint64_t v19 = v18 - *(unsigned __int8 *)(a1 + 32);
        uint64_t v20 = *(void *)(a1 + 8);
      }
      unint64_t v24 = v19 + v20;
      *(void *)(a1 + 8) = v19 + v20;
      ++v9;
      uint64_t v7 = **a2;
      v8 += 16;
    }
    while (v9 < ((*a2)[1] - v7) >> 4);
    unint64_t v6 = v24;
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v5, v6);
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 24);
  if (v26 >= 0) {
    uint64_t v27 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v27 = v26 + 1;
  }
  int64_t v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if (v26 >= 2)
  {
    unint64_t v29 = 2;
    if (v28 > 2) {
      unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*(void **)(a1 + 16), ((8 * v29 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v28 < v26) {
    bzero((void *)(v25 + 16 * (v27 >> 1)), 8 * v26 - 16 * (v27 >> 1));
  }
  uint64_t v30 = **a2;
  if ((*a2)[1] != v30)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    do
    {
      int64_t v33 = (uint64_t *)(v30 + 16 * v31);
      uint64_t v35 = *v33;
      uint64_t v34 = (std::__shared_weak_count *)v33[1];
      if (v34)
      {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (!*(unsigned char *)(a1 + 32)) {
        goto LABEL_39;
      }
      int64_t v36 = (uint64_t *)(**a2 + 16 * v31);
      uint64_t v38 = *v36;
      float64x2_t v37 = (std::__shared_weak_count *)v36[1];
      if (v37)
      {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        int v39 = *(_DWORD *)(v38 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      else
      {
        int v39 = *(_DWORD *)(v38 + 24);
      }
      if ((v39 - 1) <= 5) {
        unint64_t v40 = qword_2247086E0[v39 - 1];
      }
      else {
LABEL_39:
      }
        unint64_t v40 = 0;
      while (1)
      {
        unint64_t v44 = (uint64_t *)(**a2 + 16 * v31);
        uint64_t v46 = *v44;
        uint64_t v45 = (std::__shared_weak_count *)v44[1];
        if (v45)
        {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v47 = *(void *)(v46 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        else
        {
          unint64_t v47 = *(void *)(v46 + 64);
        }
        if (v40 >= v47) {
          break;
        }
        double v41 = turi::ml_data_internal::column_statistics::mean(*(turi::ml_data_internal::column_statistics **)(v35 + 48), v40);
        double v42 = turi::ml_data_internal::column_statistics::stdev(*(turi::ml_data_internal::column_statistics **)(v35 + 48), v40);
        double v43 = v41 * v41 + v42 * v42;
        if (v43 < 1.0e-10) {
          double v43 = 1.0e-10;
        }
        *(double *)(*v5 + 8 * v32++) = sqrt(v43);
        ++v40;
      }
      ++v31;
      uint64_t v30 = **a2;
    }
    while (v31 < ((*a2)[1] - v30) >> 4);
  }
  *(void *)(*(void *)(a1 + 16) + 8 * *(void *)(a1 + 8) - 8) = 0x3FF0000000000000;
  return a1;
}

void sub_224499634(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void turi::supervised::l2_rescaling::~l2_rescaling(void **this)
{
  *this = &unk_26D783410;
  free(this[2]);
}

{
  uint64_t vars8;

  *this = &unk_26D783410;
  free(this[2]);
  JUMPOUT(0x22A614FA0);
}

float64_t turi::supervised::l2_rescaling::transform(uint64_t a1, float64x2_t **a2)
{
  uint64_t v4 = *(float64x2_t **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *a2;
  if (a2[1] == (float64x2_t *)v3)
  {
    unint64_t v6 = *a2;
  }
  else
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a2, v3, 1);
    unint64_t v6 = *a2;
    uint64_t v3 = (uint64_t)a2[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v3 + 1;
  }
  int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    int64_t v10 = 0;
    unint64_t v11 = v6;
    uint64_t v12 = v5;
    unsigned int v13 = v4;
    do
    {
      float64x2_t v14 = *v12++;
      float64x2_t v15 = v14;
      float64x2_t v16 = *v13++;
      float64x2_t v7 = vdivq_f64(v15, v16);
      *v11++ = v7;
      v10 += 2;
    }
    while (v10 < v9);
  }
  BOOL v17 = __OFSUB__(v3, v9);
  uint64_t v18 = v3 - v9;
  if (!((v18 < 0) ^ v17 | (v18 == 0)))
  {
    uint64_t v19 = v8 >> 1;
    f64 = v4[v8 >> 1].f64;
    int64_t v21 = v5[v19].f64;
    BOOL v22 = (void *)v6[v19].f64;
    do
    {
      double v23 = *v21++;
      double v24 = v23;
      double v25 = *f64++;
      v7.f64[0] = v24 / v25;
      *v22++ = *(void *)&v7.f64[0];
      --v18;
    }
    while (v18);
  }
  return v7.f64[0];
}

float64_t turi::supervised::l2_rescaling::inverse_transform(uint64_t a1, float64x2_t **a2)
{
  uint64_t v4 = *(float64x2_t **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *a2;
  if (a2[1] == (float64x2_t *)v3)
  {
    unint64_t v6 = *a2;
  }
  else
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a2, v3, 1);
    unint64_t v6 = *a2;
    uint64_t v3 = (uint64_t)a2[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v3 + 1;
  }
  int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    int64_t v10 = 0;
    unint64_t v11 = v6;
    uint64_t v12 = v5;
    unsigned int v13 = v4;
    do
    {
      float64x2_t v14 = *v12++;
      float64x2_t v15 = v14;
      float64x2_t v16 = *v13++;
      float64x2_t v7 = vmulq_f64(v15, v16);
      *v11++ = v7;
      v10 += 2;
    }
    while (v10 < v9);
  }
  BOOL v17 = __OFSUB__(v3, v9);
  uint64_t v18 = v3 - v9;
  if (!((v18 < 0) ^ v17 | (v18 == 0)))
  {
    uint64_t v19 = v8 >> 1;
    f64 = v4[v8 >> 1].f64;
    int64_t v21 = v5[v19].f64;
    BOOL v22 = (void *)v6[v19].f64;
    do
    {
      double v23 = *v21++;
      double v24 = v23;
      double v25 = *f64++;
      v7.f64[0] = v24 * v25;
      *v22++ = *(void *)&v7.f64[0];
      --v18;
    }
    while (v18);
  }
  return v7.f64[0];
}

double turi::supervised::l2_rescaling::inverse_transform(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[3];
  if (v2 >= 1)
  {
    uint64_t v3 = (double *)a2[1];
    uint64_t v4 = (int *)a2[2];
    uint64_t v5 = *(void *)(a1 + 16);
    do
    {
      uint64_t v6 = *v4++;
      double result = *v3 * *(double *)(v5 + 8 * v6);
      *v3++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

double turi::supervised::l2_rescaling::transform(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[3];
  if (v2 >= 1)
  {
    uint64_t v3 = (double *)a2[1];
    uint64_t v4 = (int *)a2[2];
    uint64_t v5 = *(void *)(a1 + 16);
    do
    {
      uint64_t v6 = *v4++;
      double result = *v3 / *(double *)(v5 + 8 * v6);
      *v3++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

unsigned char *turi::supervised::l2_rescaling::save(turi::supervised::l2_rescaling *this, turi::oarchive *a2)
{
  uint64_t v4 = (void *)((char *)this + 8);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v5)
    {
      size_t v10 = 2 * v5 + 16;
      *((void *)a2 + 5) = v10;
      unint64_t v11 = (char **)*((void *)a2 + 2);
      if (v11)
      {
        uint64_t v6 = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v14);
          uint64_t v6 = (char *)**((void **)a2 + 2);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v10, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v6;
    }
    else
    {
      uint64_t v6 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v6[*((void *)a2 + 4)] = *v4;
    *((void *)a2 + 4) += 8;
  }
  turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (uint64_t)this + 16);
  float64x2_t v7 = (char *)this + 32;
  if (*(void *)a2)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v9 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v9)
    {
      size_t v15 = 2 * v9 + 2;
      *((void *)a2 + 5) = v15;
      float64x2_t v16 = (uint64_t *)*((void *)a2 + 2);
      if (v16)
      {
        double result = (unsigned char *)*v16;
        size_t v17 = v16[1] - *v16;
        BOOL v18 = v15 >= v17;
        std::vector<char>::size_type v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v19);
          double result = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v18)
        {
          v16[1] = (uint64_t)&result[v15];
        }
      }
      else
      {
        double result = malloc_type_realloc(*((void **)a2 + 3), v15, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = result;
    }
    else
    {
      double result = (unsigned char *)*((void *)a2 + 3);
    }
    result[(*((void *)a2 + 4))++] = *v7;
  }
  return result;
}

void *turi::supervised::l2_rescaling::load(turi::supervised::l2_rescaling *this, turi::iarchive *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    *((void *)this + 1) = *(void *)(v4 + *((void *)a2 + 3));
    *((void *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  double result = turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 2);
  uint64_t v6 = *((void *)a2 + 2);
  if (v6)
  {
    *((unsigned char *)this + 32) = *(unsigned char *)(v6 + (*((void *)a2 + 3))++);
  }
  else
  {
    return (void *)std::istream::read();
  }
  return result;
}

void std::shared_ptr<turi::supervised::l2_rescaling>::shared_ptr[abi:ne180100]<turi::supervised::l2_rescaling,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224499BA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::supervised::l2_rescaling>::shared_ptr[abi:ne180100]<turi::supervised::l2_rescaling,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::l2_rescaling *,std::shared_ptr<turi::supervised::l2_rescaling>::__shared_ptr_default_delete<turi::supervised::l2_rescaling,turi::supervised::l2_rescaling>,std::allocator<turi::supervised::l2_rescaling>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::l2_rescaling *,std::shared_ptr<turi::supervised::l2_rescaling>::__shared_ptr_default_delete<turi::supervised::l2_rescaling,turi::supervised::l2_rescaling>,std::allocator<turi::supervised::l2_rescaling>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

int64x2_t **Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>(int64x2_t **a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int64_t v21 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v21, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v5 * v4, 1);
  uint64_t v22 = a2[2];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (a1[1] != (int64x2_t *)*a2 || v8 != 1)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v7, v8);
    uint64_t v7 = (uint64_t)a1[1];
  }
  size_t v10 = *a1;
  if (v7 >= 0) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v7 + 1;
  }
  int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 2)
  {
    int64_t v13 = 0;
    int64x2_t v14 = vdupq_lane_s64(v22, 0);
    size_t v15 = *a1;
    do
    {
      *v15++ = v14;
      v13 += 2;
    }
    while (v13 < v12);
  }
  BOOL v16 = __OFSUB__(v7, v12);
  uint64_t v17 = v7 - v12;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    i64 = v10[v11 >> 1].i64;
    do
    {
      *i64++ = v22;
      --v17;
    }
    while (v17);
  }
  return a1;
}

void sub_224499D3C(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void *std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    BOOL v6 = (void *)a1[1];
    uint64_t v7 = &v6[2 * a2];
    uint64_t v8 = 16 * a2;
    do
    {
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v6, a3);
      v6 += 2;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_224499DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D783500;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783500;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  float64x2_t v85 = 0;
  int8x16_t v86 = 0uLL;
  uint64_t v7 = *(void *)(v6 + 848);
  if (v7 && 0x7FFFFFFFFFFFFFFFLL / v7 <= 999)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float64x2_t v68 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v68, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v85, 1000 * v7, 1000, v7);
  float64x2_t v83 = 0;
  unint64_t v84 = 0;
  uint64_t v8 = malloc_type_malloc(0x1F40uLL, 0x1E76AA36uLL);
  if (!v8)
  {
    uint64_t v65 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int64_t v66 = std::bad_alloc::bad_alloc(v65);
    __cxa_throw(v66, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  float64x2_t v83 = v8;
  unint64_t v84 = 1000;
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 16), v4, v5, (uint64_t)v70);
  if (v76 != v75)
  {
    unint64_t v9 = 0;
    do
    {
      do
      {
        if (v76 == v75) {
          break;
        }
        uint64_t v11 = v78;
        size_t v10 = v79;
        if (v79) {
          atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = v80;
        int v13 = v82;
        size_t v15 = v85;
        uint64_t v14 = v86.i64[0];
        BOOL v16 = (char *)&v85[v9];
        uint64_t v17 = v86.i64[1];
        uint64_t v18 = 8 * v86.i64[0];
        if (v86.i64[1] >= 1)
        {
          std::vector<char>::size_type v19 = &v85[v9];
          do
          {
            *std::vector<char>::size_type v19 = 0;
            std::vector<char>::size_type v19 = (void *)((char *)v19 + v18);
            --v17;
          }
          while (v17);
        }
        if (v13)
        {
          uint64_t v20 = *(void *)(v11 + 56);
          if (v20)
          {
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            double v23 = (uint64_t *)(*(void *)(v11 + 96) + 8 * v12 + 8 * (*(unsigned char *)(v11 + 18) == 0));
            uint64_t v24 = *(void *)(v11 + 72);
            double v25 = &v15[v9];
            do
            {
              uint64_t v26 = *(void *)(v24 + 16 * v21);
              unint64_t v27 = *(void *)(v26 + 64);
              switch(*(_DWORD *)(v26 + 24))
              {
                case 0:
                  if (v27) {
                    *(void *)&v16[8 * v22 * v14] = *v23;
                  }
                  ++v23;
                  goto LABEL_49;
                case 1:
                  unint64_t v36 = *v23++;
                  unint64_t v35 = v36;
                  uint64_t v37 = v22 - 1;
                  if (v36 < v27 && v35 != 0) {
                    *(void *)&v16[8 * (v35 + v37) * v14] = 0x3FF0000000000000;
                  }
                  uint64_t v22 = v27 + v37;
                  goto LABEL_50;
                case 2:
                  uint64_t v28 = *(void *)(v26 + 72);
                  if (!v28) {
                    goto LABEL_49;
                  }
                  uint64_t v29 = 0;
                  unint64_t v30 = 0;
                  unint64_t v31 = (void *)((char *)v25 + v18 * v22);
                  do
                  {
                    if (v30 < v27) {
                      *unint64_t v31 = v23[v30];
                    }
                    ++v30;
                    unint64_t v31 = (void *)((char *)v31 + v18);
                    v29 -= 8;
                  }
                  while (v28 != v30);
                  break;
                case 3:
                  uint64_t v40 = *v23++;
                  uint64_t v39 = v40;
                  for (uint64_t i = v22 - 1; v39; --v39)
                  {
                    uint64_t v42 = *v23;
                    if (*v23 < v27 && v42 != 0) {
                      *(void *)&v16[8 * (v42 + i) * v14] = 0x3FF0000000000000;
                    }
                    ++v23;
                  }
                  uint64_t v22 = v27 + i;
                  goto LABEL_50;
                case 4:
                  uint64_t v45 = *v23++;
                  for (uint64_t j = v45; j; --j)
                  {
                    if (*v23 < v27) {
                      *(void *)&v16[8 * (*v23 + v22) * v14] = v23[1];
                    }
                    v23 += 2;
                  }
                  goto LABEL_49;
                case 7:
                  uint64_t v32 = *(void *)(v26 + 72);
                  if (!v32) {
                    goto LABEL_49;
                  }
                  uint64_t v29 = 0;
                  unint64_t v33 = 0;
                  uint64_t v34 = (void *)((char *)v25 + v18 * v22);
                  do
                  {
                    if (v33 < v27) {
                      *uint64_t v34 = v23[v33];
                    }
                    ++v33;
                    uint64_t v34 = (void *)((char *)v34 + v18);
                    v29 -= 8;
                  }
                  while (v32 != v33);
                  break;
                default:
                  goto LABEL_50;
              }
              double v23 = (uint64_t *)((char *)v23 - v29);
LABEL_49:
              v22 += v27;
LABEL_50:
              ++v21;
            }
            while (v21 != v20);
          }
        }
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v14 = v86.i64[0];
        }
        v85[v9 + (*(void *)(v6 + 848) - 1) * v14] = 0x3FF0000000000000;
        uint64_t v46 = *(void *)(v78 + 96);
        double v47 = 1.0;
        if (*(unsigned char *)(v78 + 16)) {
          BOOL v48 = *(unsigned char *)(v78 + 17) == 0;
        }
        else {
          BOOL v48 = 0;
        }
        if (v48)
        {
          uint64_t v49 = (void *)(v78 + 24);
          if (!*(unsigned char *)(v78 + 18)) {
            uint64_t v49 = (void *)(v46 + 8 * v80);
          }
          double v47 = *(double *)(v46 + 8 * v80 + 8 * *v49 - 8);
        }
        *(double *)&v83[v9] = v47;
        if (v82 | v72)
        {
          uint64_t v50 = (uint64_t *)(v46 + 8 * v80);
          if (v73) {
            uint64_t v50 = &v74;
          }
          v80 += *v50;
        }
        uint64_t v51 = v76 + 1;
        uint64_t v52 = ++v76 - v71 * v77;
        uint64_t v81 = v52;
        if (v52 == v71 && v51 != v75) {
          turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v70);
        }
        ++v9;
      }
      while (v9 != 1000);
      Eigen::internal::conservative_resize_like_impl<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,false>::run((uint64_t)&v85, v9, *(void *)(v6 + 848));
      float64x2_t v83 = Eigen::internal::conditional_aligned_realloc_new_auto<double,true>(v83, v9, v84);
      unint64_t v84 = v9;
      if (*(unsigned char *)(v6 + 880))
      {
        uint64_t v54 = v86.i64[0];
        if (v86.i64[0])
        {
          uint64_t v55 = 0;
          float64x2_t v56 = (double *)v85;
          uint64_t v57 = v86.i64[1];
          uint64_t v58 = *(double **)(*(void *)(v6 + 864) + 16);
          do
          {
            if (v57 >= 1)
            {
              long long v59 = v56;
              uint64_t v60 = v58;
              uint64_t v61 = v57;
              do
              {
                double v62 = *v60++;
                *long long v59 = *v59 / v62;
                v59 += v54;
                --v61;
              }
              while (v61);
            }
            ++v55;
            ++v56;
          }
          while (v55 != v54);
        }
      }
      uint64_t v63 = *(void *)(a1 + 24);
      float64x2_t v88 = (uint64_t *)&v85;
      v89.i64[0] = v63;
      v89.i64[1] = (uint64_t)&v83;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>((uint64_t *)v69, &v88);
      int8x16_t v89 = vextq_s8(v86, v86, 8uLL);
      uint64_t v90 = 0x4000000000000000;
      uint64_t v91 = &v85;
      uint64_t v93 = v69;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::add_assign_op<double,double>>((float64x2_t **)(**(void **)(a1 + 32) + 16 * v4), (uint64_t)&v88);
      v87[0] = v69;
      v87[1] = v69;
      if (v69[1])
      {
        v89.i64[0] = (uint64_t)v69[0];
        uint64_t v90 = (uint64_t)v69[0];
        uint64_t v92 = v87;
        double v64 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v88);
      }
      else
      {
        double v64 = 0.0;
      }
      *(double *)(**(void **)(a1 + 40) + 8 * v4) = v64 + *(double *)(**(void **)(a1 + 40) + 8 * v4);
      free(v69[0]);
      unint64_t v9 = 0;
    }
    while (v76 != v75);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v70);
  free(v83);
  free(v85);
}

void sub_22449A440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
  free(*(void **)(v12 - 224));
  free(*(void **)(v12 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::conservative_resize_like_impl<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,false>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 8) == a2)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6 != a3)
    {
      if (a2 && a3 && 0x7FFFFFFFFFFFFFFFLL / a3 < a2)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        size_t v15 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v15, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      *(void *)a1 = Eigen::internal::conditional_aligned_realloc_new_auto<double,true>(*(void **)a1, a3 * a2, v6 * a2);
      *(void *)(a1 + 8) = a2;
      *(void *)(a1 + 16) = a3;
    }
  }
  else
  {
    uint64_t v22 = 0;
    long long v23 = 0uLL;
    if (a2 && a3 && 0x7FFFFFFFFFFFFFFFLL / a3 < a2)
    {
      uint64_t v12 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v13 = std::bad_alloc::bad_alloc(v12);
      __cxa_throw(v13, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v22, a3 * a2, a2, a3);
    uint64_t v7 = *(void **)a1;
    BOOL v16 = v22;
    int64x2_t v8 = *(int64x2_t *)(a1 + 8);
    v9.i64[0] = a2;
    v9.i64[1] = a3;
    int8x16_t v17 = vbslq_s8((int8x16_t)vcgtq_s64(v9, v8), (int8x16_t)v8, (int8x16_t)v9);
    uint64_t v18 = &v22;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = v23;
    void v26[2] = v23;
    v27[0] = v7;
    v27[2] = v8.i64[0];
    v26[0] = v22;
    v25[0] = v26;
    v25[1] = v27;
    v25[2] = &v24;
    v25[3] = &v16;
    Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::assign_op<double,double>,0>,4,0>::run(v25);
    size_t v10 = *(void **)a1;
    *(void *)a1 = v22;
    uint64_t v22 = v10;
    long long v11 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    long long v23 = v11;
    free(v10);
  }
}

void sub_22449A68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

void *Eigen::internal::conditional_aligned_realloc_new_auto<double,true>(void *a1, unint64_t a2, unint64_t a3)
{
  if (a2 >> 61 || a3 >> 61 || (__n128 result = malloc_type_realloc(a1, 8 * a2, 0x37728CFDuLL), a2) && !result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v6, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  return result;
}

void *Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::assign_op<double,double>,0>,4,0>::run(void *result)
{
  uint64_t v1 = (unint64_t *)result[3];
  unint64_t v2 = *v1;
  if ((*v1 & 7) != 0)
  {
    uint64_t v3 = v1[2];
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = v1[1];
      uint64_t v7 = (void *)*result;
      int64x2_t v8 = (void *)result[1];
      do
      {
        if (v6 >= 1)
        {
          int64x2_t v9 = (uint64_t *)(*v8 + v8[2] * v4);
          size_t v10 = (void *)(*v7 + v7[2] * v4);
          uint64_t v11 = v6;
          do
          {
            uint64_t v12 = *v9++;
            *v10++ = v12;
            --v11;
          }
          while (v11);
        }
        ++v5;
        v4 += 8;
      }
      while (v5 != v3);
    }
  }
  else
  {
    uint64_t v13 = v1[2];
    if (v13 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = v1[1];
      uint64_t v17 = v1[6] & 1;
      uint64_t v18 = (v2 >> 3) & 1;
      if (v18 >= v16) {
        uint64_t v18 = v16;
      }
      do
      {
        if (v18 >= 1) {
          *(void *)(*(void *)*result + 8 * *(void *)(*result + 16) * v15) = *(void *)(*(void *)result[1]
        }
                                                                                              + 8
                                                                                              * *(void *)(result[1] + 16)
                                                                                              * v15);
        int64_t v19 = (v16 - v18) & 0xFFFFFFFFFFFFFFFELL;
        int64_t v20 = v19 + v18;
        if (v19 >= 1)
        {
          uint64_t v21 = 8 * v18;
          uint64_t v22 = v18;
          do
          {
            *(_OWORD *)(*(void *)*result + 8 * (v22 + v15 * *(void *)(*result + 16))) = *(_OWORD *)(*(void *)result[1] + v14 * *(void *)(result[1] + 16) + v21);
            v22 += 2;
            v21 += 16;
          }
          while (v22 < v20);
        }
        if (v20 < v16)
        {
          uint64_t v23 = *(void *)*result + *(void *)(*result + 16) * v14;
          uint64_t v24 = *(void *)result[1] + *(void *)(result[1] + 16) * v14;
          do
          {
            *(void *)(v23 + 8 * v20) = *(void *)(v24 + 8 * v20);
            ++v20;
          }
          while (v20 < v16);
        }
        BOOL v25 = __OFADD__(v18, v17);
        uint64_t v27 = v18 + v17;
        char v26 = (v27 < 0) ^ v25;
        uint64_t v18 = v27 & 1;
        if (v26) {
          uint64_t v18 = -v18;
        }
        if (v16 < v18) {
          uint64_t v18 = v16;
        }
        ++v15;
        v14 += 8;
      }
      while (v15 != v13);
    }
  }
  return result;
}

uint64_t *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(uint64_t *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, a2[2][1], 1);
  Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,7,Eigen::DenseShape,Eigen::DenseShape,double,double>::product_evaluator(v21, a2);
  uint64_t v4 = a2[2];
  uint64_t v22 = *v4;
  uint64_t v5 = v4[1];
  if (a1[1] != v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v5, 1);
    uint64_t v5 = a1[1];
  }
  uint64_t v6 = *a1;
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 >= 2)
  {
    uint64_t v9 = 0;
    int64_t v10 = 0;
    do
    {
      *(float64x2_t *)(v6 + v9) = vsubq_f64(*(float64x2_t *)(v21[0] + v9), *(float64x2_t *)(v22 + v9));
      v10 += 2;
      v9 += 16;
    }
    while (v10 < v8);
  }
  BOOL v11 = __OFSUB__(v5, v8);
  uint64_t v12 = v5 - v8;
  if (!((v12 < 0) ^ v11 | (v12 == 0)))
  {
    uint64_t v13 = v7 >> 1;
    uint64_t v14 = (double *)(v22 + 16 * (v7 >> 1));
    uint64_t v15 = (double *)(v21[0] + 16 * v13);
    uint64_t v16 = (double *)(v6 + 16 * v13);
    do
    {
      double v17 = *v15++;
      double v18 = v17;
      double v19 = *v14++;
      *v16++ = v18 - v19;
      --v12;
    }
    while (v12);
  }
  free((void *)v21[2]);
  return a1;
}

void sub_22449A99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  free(*v13);
  _Unwind_Resume(a1);
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::add_assign_op<double,double>>(float64x2_t **a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v4 = *(void *)(*(void *)(a2 + 32) + 16);
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v26, v4, 1);
    uint64_t v5 = (char *)v26;
    int64_t v6 = v27;
    uint64_t v7 = *(unint64_t **)(a2 + 48);
    if (v27 >= 0) {
      uint64_t v8 = v27;
    }
    else {
      uint64_t v8 = v27 + 1;
    }
    int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v27 >= 2)
    {
      unint64_t v10 = 2;
      if (v9 > 2) {
        unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v26, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6) {
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
    }
  }
  else
  {
    uint64_t v7 = *(unint64_t **)(a2 + 48);
  }
  uint64_t v28 = 0x3FF0000000000000;
  long long v30 = *(_OWORD *)(a2 + 8);
  uint64_t v31 = *(void *)(a2 + 24);
  uint64_t v32 = *(void *)(a2 + 32);
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>((uint64_t)v29, v7, (uint64_t *)&v26, (double *)&v28);
  BOOL v11 = (char *)v26;
  uint64_t v12 = *a1;
  uint64_t v13 = (uint64_t)a1[1];
  if (v13 >= 0) {
    uint64_t v14 = (uint64_t)a1[1];
  }
  else {
    uint64_t v14 = v13 + 1;
  }
  int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v13 >= 2)
  {
    int64_t v16 = 0;
    double v17 = *a1;
    double v18 = (float64x2_t *)v26;
    do
    {
      float64x2_t v19 = *v18++;
      *double v17 = vaddq_f64(v19, *v17);
      ++v17;
      v16 += 2;
    }
    while (v16 < v15);
  }
  BOOL v20 = v13 <= v15;
  uint64_t v21 = v13 - v15;
  if (!v20)
  {
    uint64_t v22 = v14 >> 1;
    uint64_t v23 = (double *)&v11[16 * v22];
    f64 = v12[v22].f64;
    do
    {
      double v25 = *v23++;
      double *f64 = v25 + *f64;
      ++f64;
      --v21;
    }
    while (v21);
  }
  free(v26);
}

void sub_22449AB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t a1, unint64_t *a2, uint64_t *a3, double *a4)
{
  v22[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = a2[1];
  if (v4 >> 61) {
    goto LABEL_14;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  double v8 = *a4;
  double v9 = *(double *)(a1 + 24);
  unint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *a2;
    goto LABEL_8;
  }
  size_t v12 = 8 * v4;
  if (v4 <= 0x4000)
  {
    uint64_t v13 = (char *)&v21[-1] - ((MEMORY[0x270FA5388](v12, v12 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v13, v14);
    unint64_t v10 = 0;
    unint64_t v11 = (unint64_t)(v13 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  unint64_t v11 = (unint64_t)malloc_type_malloc(v12, 0x1E76AA36uLL);
  if (!v11)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float64x2_t v19 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v19, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v10 = *a2;
  unint64_t v4 = a2[1];
LABEL_8:
  if (v10) {
    int64_t v15 = 0;
  }
  else {
    int64_t v15 = (void *)v11;
  }
  uint64_t v16 = v7[1];
  uint64_t v17 = v7[2];
  v22[0] = *v7;
  v22[1] = v16;
  v21[0] = v11;
  v21[1] = 1;
  Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(v17, v16, v22, v21, *a3, 1, v8 * v9);
  if (8 * v4 > 0x20000) {
    free(v15);
  }
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = &unk_26D783580;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783580;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v7 = *(void *)(a1 + 8);
  int64_t v6 = *(turi::ml_data **)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 848);
  v86[0] = 0;
  uint64_t v89 = v8;
  long long v87 = 0u;
  long long v88 = 0u;
  turi::ml_data::get_iterator(v6, v4, v5, (uint64_t)v73);
  if (v79 != v78)
  {
    uint64_t v61 = v4;
    double v62 = (void **)a1;
    uint64_t v60 = v7;
    do
    {
      uint64_t v10 = v81;
      double v9 = v82;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v63 = v9;
      *(void *)&long long v88 = 0;
      if (v85)
      {
        uint64_t v11 = *(void *)(v10 + 56);
        if (v11)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          size_t v14 = (uint64_t *)(*(void *)(v10 + 96) + 8 * v83 + 8 * (*(unsigned char *)(v10 + 18) == 0));
          uint64_t v64 = *(void *)(v10 + 56);
          do
          {
            uint64_t v15 = *(void *)(*(void *)(v10 + 72) + 16 * v12);
            unint64_t v16 = *(void *)(v15 + 64);
            switch(*(_DWORD *)(v15 + 24))
            {
              case 0:
                uint64_t v17 = *v14++;
                uint64_t v18 = v17;
                if (v16)
                {
                  uint64_t v90 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v87, (int)v13, &v90) = v18;
                }
                goto LABEL_40;
              case 1:
                unint64_t v30 = *v14++;
                unint64_t v29 = v30;
                if (v30 < v16 && v29 != 0)
                {
                  uint64_t v90 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v87, (int)v29 + (int)v13 - 1, &v90) = 0x3FF0000000000000;
                }
                goto LABEL_35;
              case 2:
                uint64_t v19 = *(void *)(v15 + 72);
                if (v19)
                {
                  unint64_t v20 = 0;
                  uint64_t v21 = v13 << 32;
                  do
                  {
                    uint64_t v22 = *v14++;
                    uint64_t v23 = v22;
                    if (v20 < v16)
                    {
                      uint64_t v90 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v87, v21 >> 32, &v90) = v23;
                    }
                    ++v20;
                    v21 += 0x100000000;
                  }
                  while (v19 != v20);
                }
                goto LABEL_22;
              case 3:
                uint64_t v33 = *v14++;
                for (uint64_t i = v33; i; --i)
                {
                  uint64_t v34 = *v14;
                  if (*v14 < v16 && v34 != 0)
                  {
                    uint64_t v90 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v87, (int)v34 + (int)v13 - 1, &v90) = 0x3FF0000000000000;
                  }
                  ++v14;
                }
LABEL_35:
                uint64_t v13 = v16 + v13 - 1;
                break;
              case 4:
                uint64_t v37 = *v14++;
                for (uint64_t j = v37; j; --j)
                {
                  uint64_t v38 = *v14;
                  if (*v14 < v16)
                  {
                    uint64_t v39 = v14[1];
                    uint64_t v90 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v87, (int)v38 + (int)v13, &v90) = v39;
                  }
                  v14 += 2;
                }
LABEL_40:
                v13 += v16;
                break;
              case 7:
                uint64_t v24 = *(void *)(v15 + 72);
                if (v24)
                {
                  unint64_t v25 = 0;
                  uint64_t v26 = v13 << 32;
                  do
                  {
                    uint64_t v27 = *v14++;
                    uint64_t v28 = v27;
                    if (v25 < v16)
                    {
                      uint64_t v90 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v87, v26 >> 32, &v90) = v28;
                    }
                    ++v25;
                    v26 += 0x100000000;
                  }
                  while (v24 != v25);
                }
LABEL_22:
                v13 += v16;
                uint64_t v11 = v64;
                break;
              default:
                break;
            }
            ++v12;
          }
          while (v12 != v11);
        }
      }
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
      uint64_t v40 = *(_DWORD *)(v60 + 848) - 1;
      uint64_t v90 = 0;
      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v87, v40, &v90) = 0x3FF0000000000000;
      if (*(unsigned char *)(v60 + 880)) {
        (*(void (**)(void, char *))(**(void **)(v60 + 864) + 40))(*(void *)(v60 + 864), v86);
      }
      uint64_t v41 = v88;
      if ((uint64_t)v88 < 1)
      {
        double v44 = 0.0;
      }
      else
      {
        double v43 = (int *)*((void *)&v87 + 1);
        uint64_t v42 = (double *)v87;
        double v44 = 0.0;
        do
        {
          double v45 = *v42++;
          double v46 = v45;
          uint64_t v47 = *v43++;
          double v44 = v44 + v46 * *(double *)(*v62[3] + 8 * v47);
          --v41;
        }
        while (v41);
      }
      double v48 = 1.0;
      if (*(unsigned char *)(v81 + 16)) {
        BOOL v49 = *(unsigned char *)(v81 + 17) == 0;
      }
      else {
        BOOL v49 = 0;
      }
      if (v49)
      {
        uint64_t v50 = (void *)(v81 + 24);
        if (!*(unsigned char *)(v81 + 18)) {
          uint64_t v50 = (void *)(*(void *)(v81 + 96) + 8 * v83);
        }
        double v48 = *(double *)(*(void *)(v81 + 96) + 8 * v83 + 8 * *v50 - 8);
      }
      double v51 = v44 - v48;
      v65[0] = 0;
      uint64_t v66 = v89;
      double v67 = v51 + v51;
      float64x2_t v68 = v86;
      LOBYTE(v69) = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      uint64_t v72 = 0;
      LOBYTE(v90) = 0;
      long long v91 = 0u;
      long long v92 = 0u;
      uint64_t v93 = v89;
      Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const>,1>::run((double *)&v90, (uint64_t)v65);
      uint64_t v52 = v72;
      uint64_t v72 = v93;
      uint64_t v93 = v52;
      long long v53 = v70;
      long long v70 = v91;
      long long v91 = v53;
      long long v54 = v71;
      long long v71 = v92;
      long long v92 = v54;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v91);
      turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(*v62[4] + 16 * v61), &v69);
      *(double *)(*v62[5] + 8 * v61) = *(double *)(*v62[5] + 8 * v61) + v51 * v51;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v70);
      if (v85 | v75)
      {
        uint64_t v55 = (uint64_t *)(*(void *)(v81 + 96) + 8 * v83);
        if (v76) {
          uint64_t v55 = &v77;
        }
        v83 += *v55;
      }
      uint64_t v56 = v79 + 1;
      uint64_t v57 = v78;
      uint64_t v58 = ++v79 - v74 * v80;
      uint64_t v84 = v58;
      if (v58 == v74 && v56 != v78)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v73);
        uint64_t v57 = v78;
        uint64_t v56 = v79;
      }
    }
    while (v56 != v57);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v73);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v87);
}

void sub_22449B2B8(_Unwind_Exception *a1)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

double *Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const>,1>::run(double *result, uint64_t a2)
{
  unint64_t v2 = *(void **)(a2 + 32);
  uint64_t v3 = v2[3];
  if (v3 >= 1)
  {
    uint64_t v4 = result;
    double v5 = *(double *)(a2 + 24);
    int64_t v6 = (double *)v2[1];
    uint64_t v7 = (int *)v2[2];
    do
    {
      double v8 = *v6++;
      double v9 = v5 * v8;
      uint64_t v10 = *v7++;
      __n128 result = (double *)Eigen::SparseVector<double,0,int>::insert(v4, v10);
      void *result = v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

int64x2_t **Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>(int64x2_t **a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4) {
    goto LABEL_24;
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v5 * v4, v4, v5);
  uint64_t v7 = a2[2];
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (a1[1] != (int64x2_t *)*a2 || a1[2] != (int64x2_t *)v9)
  {
    uint64_t v24 = a2[2];
    if (!v8 || !v9 || 0x7FFFFFFFFFFFFFFFLL / v9 >= v8)
    {
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v9 * v8, v8, v9);
      uint64_t v8 = (uint64_t)a1[1];
      uint64_t v9 = (uint64_t)a1[2];
      uint64_t v7 = v24;
      goto LABEL_14;
    }
LABEL_24:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v23 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v23, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
LABEL_14:
  uint64_t v11 = *a1;
  uint64_t v12 = v8 * v9;
  if (v8 * v9 >= 0) {
    uint64_t v13 = v8 * v9;
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v15 = 0;
    int64x2_t v16 = vdupq_lane_s64(v7, 0);
    uint64_t v17 = *a1;
    do
    {
      *v17++ = v16;
      v15 += 2;
    }
    while (v15 < v14);
  }
  BOOL v18 = v12 <= v14;
  uint64_t v19 = v12 - v14;
  if (!v18)
  {
    i64 = v11[v13 >> 1].i64;
    do
    {
      *i64++ = v7;
      --v19;
    }
    while (v19);
  }
  return a1;
}

void sub_22449B520(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void *std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    BOOL v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      Eigen::DenseStorage<double,-1,-1,-1,0>::DenseStorage(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_22449B5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = (void *)*((void *)v4 - 3);
        v4 -= 24;
        free(v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = &unk_26D783600;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783600;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned __int8 v85 = 0;
  int8x16_t v86 = 0uLL;
  uint64_t v7 = *(void *)(v6 + 848);
  if (v7 && 0x7FFFFFFFFFFFFFFFLL / v7 <= 999)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float64x2_t v68 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v68, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v85, 1000 * v7, 1000, v7);
  uint64_t v83 = 0;
  unint64_t v84 = 0;
  uint64_t v8 = malloc_type_malloc(0x1F40uLL, 0x1E76AA36uLL);
  if (!v8)
  {
    uint64_t v65 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v66 = std::bad_alloc::bad_alloc(v65);
    __cxa_throw(v66, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v83 = v8;
  unint64_t v84 = 1000;
  turi::ml_data::get_iterator((turi::ml_data *)(v6 + 8), v4, v5, (uint64_t)v70);
  if (v76 != v75)
  {
    unint64_t v9 = 0;
    do
    {
      do
      {
        if (v76 == v75) {
          break;
        }
        uint64_t v11 = v78;
        uint64_t v10 = v79;
        if (v79) {
          atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = v80;
        int v13 = v82;
        int64_t v15 = v85;
        uint64_t v14 = v86.i64[0];
        int64x2_t v16 = (char *)&v85[v9];
        uint64_t v17 = v86.i64[1];
        uint64_t v18 = 8 * v86.i64[0];
        if (v86.i64[1] >= 1)
        {
          uint64_t v19 = &v85[v9];
          do
          {
            *uint64_t v19 = 0;
            uint64_t v19 = (void *)((char *)v19 + v18);
            --v17;
          }
          while (v17);
        }
        if (v13)
        {
          uint64_t v20 = *(void *)(v11 + 56);
          if (v20)
          {
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            uint64_t v23 = (uint64_t *)(*(void *)(v11 + 96) + 8 * v12 + 8 * (*(unsigned char *)(v11 + 18) == 0));
            uint64_t v24 = *(void *)(v11 + 72);
            unint64_t v25 = &v15[v9];
            do
            {
              uint64_t v26 = *(void *)(v24 + 16 * v21);
              unint64_t v27 = *(void *)(v26 + 64);
              switch(*(_DWORD *)(v26 + 24))
              {
                case 0:
                  if (v27) {
                    *(void *)&v16[8 * v22 * v14] = *v23;
                  }
                  ++v23;
                  goto LABEL_49;
                case 1:
                  unint64_t v36 = *v23++;
                  unint64_t v35 = v36;
                  uint64_t v37 = v22 - 1;
                  if (v36 < v27 && v35 != 0) {
                    *(void *)&v16[8 * (v35 + v37) * v14] = 0x3FF0000000000000;
                  }
                  uint64_t v22 = v27 + v37;
                  goto LABEL_50;
                case 2:
                  uint64_t v28 = *(void *)(v26 + 72);
                  if (!v28) {
                    goto LABEL_49;
                  }
                  uint64_t v29 = 0;
                  unint64_t v30 = 0;
                  uint64_t v31 = (void *)((char *)v25 + v18 * v22);
                  do
                  {
                    if (v30 < v27) {
                      *uint64_t v31 = v23[v30];
                    }
                    ++v30;
                    uint64_t v31 = (void *)((char *)v31 + v18);
                    v29 -= 8;
                  }
                  while (v28 != v30);
                  break;
                case 3:
                  uint64_t v40 = *v23++;
                  uint64_t v39 = v40;
                  for (uint64_t i = v22 - 1; v39; --v39)
                  {
                    uint64_t v42 = *v23;
                    if (*v23 < v27 && v42 != 0) {
                      *(void *)&v16[8 * (v42 + i) * v14] = 0x3FF0000000000000;
                    }
                    ++v23;
                  }
                  uint64_t v22 = v27 + i;
                  goto LABEL_50;
                case 4:
                  uint64_t v45 = *v23++;
                  for (uint64_t j = v45; j; --j)
                  {
                    if (*v23 < v27) {
                      *(void *)&v16[8 * (*v23 + v22) * v14] = v23[1];
                    }
                    v23 += 2;
                  }
                  goto LABEL_49;
                case 7:
                  uint64_t v32 = *(void *)(v26 + 72);
                  if (!v32) {
                    goto LABEL_49;
                  }
                  uint64_t v29 = 0;
                  unint64_t v33 = 0;
                  uint64_t v34 = (void *)((char *)v25 + v18 * v22);
                  do
                  {
                    if (v33 < v27) {
                      *uint64_t v34 = v23[v33];
                    }
                    ++v33;
                    uint64_t v34 = (void *)((char *)v34 + v18);
                    v29 -= 8;
                  }
                  while (v32 != v33);
                  break;
                default:
                  goto LABEL_50;
              }
              uint64_t v23 = (uint64_t *)((char *)v23 - v29);
LABEL_49:
              v22 += v27;
LABEL_50:
              ++v21;
            }
            while (v21 != v20);
          }
        }
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v14 = v86.i64[0];
        }
        v85[v9 + (*(void *)(v6 + 848) - 1) * v14] = 0x3FF0000000000000;
        uint64_t v46 = *(void *)(v78 + 96);
        double v47 = 1.0;
        if (*(unsigned char *)(v78 + 16)) {
          BOOL v48 = *(unsigned char *)(v78 + 17) == 0;
        }
        else {
          BOOL v48 = 0;
        }
        if (v48)
        {
          BOOL v49 = (void *)(v78 + 24);
          if (!*(unsigned char *)(v78 + 18)) {
            BOOL v49 = (void *)(v46 + 8 * v80);
          }
          double v47 = *(double *)(v46 + 8 * v80 + 8 * *v49 - 8);
        }
        *(double *)&v83[v9] = v47;
        if (v82 | v72)
        {
          uint64_t v50 = (uint64_t *)(v46 + 8 * v80);
          if (v73) {
            uint64_t v50 = &v74;
          }
          v80 += *v50;
        }
        uint64_t v51 = v76 + 1;
        uint64_t v52 = ++v76 - v71 * v77;
        uint64_t v81 = v52;
        if (v52 == v71 && v51 != v75) {
          turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v70);
        }
        ++v9;
      }
      while (v9 != 1000);
      Eigen::internal::conservative_resize_like_impl<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,false>::run((uint64_t)&v85, v9, *(void *)(v6 + 848));
      uint64_t v83 = Eigen::internal::conditional_aligned_realloc_new_auto<double,true>(v83, v9, v84);
      unint64_t v84 = v9;
      if (*(unsigned char *)(v6 + 880))
      {
        uint64_t v54 = v86.i64[0];
        if (v86.i64[0])
        {
          uint64_t v55 = 0;
          uint64_t v56 = (double *)v85;
          uint64_t v57 = v86.i64[1];
          uint64_t v58 = *(double **)(*(void *)(v6 + 864) + 16);
          do
          {
            if (v57 >= 1)
            {
              long long v59 = v56;
              uint64_t v60 = v58;
              uint64_t v61 = v57;
              do
              {
                double v62 = *v60++;
                *long long v59 = *v59 / v62;
                v59 += v54;
                --v61;
              }
              while (v61);
            }
            ++v55;
            ++v56;
          }
          while (v55 != v54);
        }
      }
      uint64_t v63 = *(void *)(a1 + 16);
      long long v88 = (uint64_t *)&v85;
      v89.i64[0] = v63;
      v89.i64[1] = (uint64_t)&v83;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double,double>,Eigen::Product<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>((uint64_t *)v69, &v88);
      int8x16_t v89 = vextq_s8(v86, v86, 8uLL);
      uint64_t v90 = 0x4000000000000000;
      long long v91 = &v85;
      uint64_t v93 = v69;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::add_assign_op<double,double>>((float64x2_t **)(**(void **)(a1 + 24) + 16 * v4), (uint64_t)&v88);
      v87[0] = v69;
      v87[1] = v69;
      if (v69[1])
      {
        v89.i64[0] = (uint64_t)v69[0];
        uint64_t v90 = (uint64_t)v69[0];
        long long v92 = v87;
        double v64 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v88);
      }
      else
      {
        double v64 = 0.0;
      }
      *(double *)(**(void **)(a1 + 32) + 8 * v4) = v64 + *(double *)(**(void **)(a1 + 32) + 8 * v4);
      int8x16_t v89 = vextq_s8(v86, v86, 8uLL);
      uint64_t v90 = 0x4000000000000000;
      long long v91 = &v85;
      uint64_t v93 = (void **)&v85;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,0>,Eigen::internal::add_assign_op<double,double>>((float64x2_t **)(**(void **)(a1 + 40) + 24 * v4), (uint64_t)&v88);
      free(v69[0]);
      unint64_t v9 = 0;
    }
    while (v76 != v75);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v70);
  free(v83);
  free(v85);
}

void sub_22449BCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
  free(*(void **)(v12 - 224));
  free(*(void **)(v12 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,0>,Eigen::internal::add_assign_op<double,double>>(float64x2_t **a1, uint64_t a2)
{
  memset(v26, 0, sizeof(v26));
  uint64_t v4 = *(void *)(*(void *)(a2 + 32) + 16);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v4 | v6)
  {
    if (v4) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      unint64_t v25 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v25, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v26, v6 * v4, v4, v6);
    uint64_t v5 = *(void *)(a2 + 48);
  }
  Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::DenseShape,Eigen::DenseShape,8>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>((uint64_t *)v26, a2, v5);
  uint64_t v8 = (char *)v26[0];
  unint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = (void)a1[2] * (void)v10;
  if (v11 >= 0) {
    uint64_t v12 = (void)a1[2] * (void)v10;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    int64_t v14 = 0;
    int64_t v15 = *a1;
    int64x2_t v16 = (float64x2_t *)v26[0];
    do
    {
      float64x2_t v17 = *v16++;
      *int64_t v15 = vaddq_f64(v17, *v15);
      ++v15;
      v14 += 2;
    }
    while (v14 < v13);
  }
  BOOL v18 = v11 <= v13;
  uint64_t v19 = v11 - v13;
  if (!v18)
  {
    uint64_t v20 = v12 >> 1;
    uint64_t v21 = (double *)&v8[16 * v20];
    f64 = v9[v20].f64;
    do
    {
      double v23 = *v21++;
      double *f64 = v23 + *f64;
      ++f64;
      --v19;
    }
    while (v19);
  }
  free(v26[0]);
}

void sub_22449BED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::DenseShape,Eigen::DenseShape,8>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  if (v6 >= 1 && v7 + v6 + v8 <= 19)
  {
    long long v16 = *(_OWORD *)(a2 + 8);
    uint64_t v17 = *(void *)(a2 + 24);
    uint64_t v18 = *(void *)(a2 + 32);
    uint64_t v19 = a3;
    Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,1>,Eigen::internal::assign_op<double,double>>(a1, (uint64_t)&v15);
  }
  else
  {
    uint64_t v10 = *a1;
    uint64_t v11 = v8 * v7;
    if (v8 * v7 >= 0) {
      uint64_t v12 = v8 * v7;
    }
    else {
      uint64_t v12 = v11 + 1;
    }
    int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 > 1)
    {
      unint64_t v14 = 2;
      if (v13 > 2) {
        unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero((void *)*a1, ((8 * v14 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v13 < v11) {
      bzero((void *)(v10 + 16 * (v12 >> 1)), 8 * v11 - 16 * (v12 >> 1));
    }
    uint64_t v15 = 0x3FF0000000000000;
    Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::DenseShape,Eigen::DenseShape,8>::scaleAndAddTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>((uint64_t)a1, a2, a3, (double *)&v15);
  }
}

void Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::DenseShape,Eigen::DenseShape,8>::scaleAndAddTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5 && *(void *)(v4 + 16))
  {
    if (*(void *)(a3 + 16))
    {
      uint64_t v15 = *(void *)(a2 + 32);
      double v9 = *a4 * *(double *)(a2 + 24);
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v13 = *(_OWORD *)(a1 + 8);
      v14[0] = v5;
      Eigen::internal::evaluateProductBlockingSizesHeuristic<double,double,1,long>(v14, (uint64_t *)&v13, (uint64_t *)&v13 + 1, 1);
      v14[1] = v14[0] * v13;
      void v14[2] = *((void *)&v13 + 1) * v14[0];
      v10[0] = &v15;
      v10[1] = a3;
      v10[2] = a1;
      *(double *)&v10[3] = v9;
      v10[4] = &v11;
      Eigen::internal::gemm_functor<double,long,Eigen::internal::general_matrix_matrix_product<long,double,1,false,double,0,false,0>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::internal::gemm_blocking_space<0,double,double,-1,-1,-1,1,false>>::operator()((uint64_t)v10, 0, *(void *)(*(void *)(a2 + 32) + 16), 0, *(void *)(a3 + 16));
      free(v11);
      free(v12);
    }
  }
}

void sub_22449C110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
}

void Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,1>,Eigen::internal::assign_op<double,double>>(uint64_t *a1, uint64_t a2)
{
  v25[9] = *MEMORY[0x263EF8340];
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::internal::assign_op<double,double>>((float64x2_t **)v16, a2);
  uint64_t v18 = *(uint64_t **)(a2 + 48);
  uint64_t v19 = v16[0];
  uint64_t v20 = v17;
  uint64_t v21 = *v18;
  uint64_t v22 = v18[1];
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v23 = *(void *)(v4 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = v18[2];
  if (a1[1] != v5 || a1[2] != v6)
  {
    if (v5 && v6 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v6 * v5, v5, v6);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a1;
    uint64_t v9 = 8 * v5;
    do
    {
      if (v5 >= 1)
      {
        for (uint64_t i = 0; i < v5; ++i)
        {
          uint64_t v11 = v18[1];
          uint64_t v12 = *v18 + 8 * v11 * v7;
          v24[0] = (char *)v16[0] + 8 * v17 * i;
          v24[2] = v17;
          void v24[3] = v16;
          v24[4] = i;
          v24[5] = 0;
          v24[6] = v17;
          v24[7] = v12;
          v24[8] = v11;
          v24[10] = v18;
          v24[11] = 0;
          v24[12] = v7;
          v24[13] = v11;
          if (v11)
          {
            v25[2] = (char *)v16[0] + 8 * v17 * i;
            void v25[4] = v17;
            v25[5] = v12;
            v25[7] = v11;
            v25[8] = v24;
            double v13 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::Block<Eigen::Matrix<double,-1,-1,1,-1,-1> const,1,-1,true> const> const,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1> const,-1,1,true> const>>,3,0>::run(v25);
            uint64_t v5 = a1[1];
          }
          else
          {
            double v13 = 0.0;
          }
          *(double *)(v8 + 8 * i) = v13;
        }
        uint64_t v6 = a1[2];
      }
      ++v7;
      v8 += v9;
    }
    while (v7 < v6);
  }
  free(v16[0]);
}

void sub_22449C308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

float64_t Eigen::internal::call_dense_assignment_loop<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,1,-1,-1> const> const,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::internal::assign_op<double,double>>(float64x2_t **a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 24);
  uint64_t v4 = *(float64x2_t ***)(a2 + 32);
  uint64_t v6 = (uint64_t)v4[1];
  uint64_t v5 = (uint64_t)v4[2];
  uint64_t v7 = *v4;
  if (a1[1] != (float64x2_t *)v5 || a1[2] != (float64x2_t *)v6)
  {
    double v28 = *(double *)(a2 + 24);
    if (v5) {
      BOOL v9 = v6 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v6 * v5, v5, v6);
    uint64_t v5 = (uint64_t)a1[1];
    uint64_t v6 = (uint64_t)a1[2];
    double v3 = v28;
  }
  uint64_t v11 = *a1;
  uint64_t v12 = v6 * v5;
  if (v6 * v5 >= 0) {
    uint64_t v13 = v6 * v5;
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v15 = 0;
    long long v16 = *a1;
    uint64_t v17 = v7;
    do
    {
      float64x2_t v18 = *v17++;
      float64x2_t v10 = vmulq_n_f64(v18, v3);
      *v16++ = v10;
      v15 += 2;
    }
    while (v15 < v14);
  }
  BOOL v19 = v12 <= v14;
  uint64_t v20 = v12 - v14;
  if (!v19)
  {
    uint64_t v21 = v13 >> 1;
    f64 = v7[v13 >> 1].f64;
    uint64_t v23 = v11[v21].f64;
    do
    {
      double v24 = *f64++;
      v10.f64[0] = v3 * v24;
      *v23++ = v3 * v24;
      --v20;
    }
    while (v20);
  }
  return v10.f64[0];
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::Transpose<Eigen::Block<Eigen::Matrix<double,-1,-1,1,-1,-1> const,1,-1,true> const> const,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1> const,-1,1,true> const>>,3,0>::run(void *a1)
{
  uint64_t v1 = *(void *)(a1[8] + 64);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(a1[8] + 64);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(a1[8] + 64);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  uint64_t v4 = (float64x2_t *)a1[2];
  uint64_t v5 = (float64x2_t *)a1[5];
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * v5->f64[0];
  }
  int64_t v7 = v3 & 0xFFFFFFFFFFFFFFFELL;
  float64x2_t v8 = vmulq_f64(*v4, *v5);
  if (v1 >= 4)
  {
    int64_t v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v10 = vmulq_f64(v4[1], v5[1]);
    if ((unint64_t)v1 >= 8)
    {
      uint64_t v11 = v5 + 3;
      uint64_t v12 = v4 + 3;
      uint64_t v13 = 4;
      do
      {
        float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        float64x2_t v14 = *v12;
        v12 += 2;
        float64x2_t v15 = v14;
        float64x2_t v16 = *v11;
        v11 += 2;
        float64x2_t v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    float64x2_t v8 = vaddq_f64(v10, v8);
    if (v7 > v9) {
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v5 + 8 * v9)));
    }
  }
  double result = vaddvq_f64(v8);
  BOOL v17 = v1 <= v7;
  uint64_t v18 = v1 - v7;
  if (!v17)
  {
    uint64_t v19 = v3 >> 1;
    f64 = v4[v19].f64;
    uint64_t v21 = v5[v19].f64;
    do
    {
      double v22 = *f64++;
      double v23 = v22;
      double v24 = *v21++;
      double result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

void Eigen::internal::gemm_functor<double,long,Eigen::internal::general_matrix_matrix_product<long,double,1,false,double,0,false,0>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1> const>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::internal::gemm_blocking_space<0,double,double,-1,-1,-1,1,false>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void **)(a1 + 8);
  if (a5 == -1) {
    a5 = v6[2];
  }
  uint64_t v7 = *(void *)(**(void **)a1 + 8);
  Eigen::internal::general_matrix_matrix_product<long,double,1,false,double,0,false,0>::run(a3, a5, v7, ***(void ***)a1 + 8 * v7 * a2, v7, *v6 + 8 * v6[1] * a4, v6[1], **(void **)(a1 + 16) + 8 * (a2 + *(void *)(*(void *)(a1 + 16) + 8) * a4), *(double *)(a1 + 24), *(void *)(*(void *)(a1 + 16) + 8), *(unint64_t **)(a1 + 32));
}

void Eigen::internal::general_matrix_matrix_product<long,double,1,false,double,0,false,0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, unint64_t *a11)
{
  uint64_t v72 = a8;
  uint64_t v81 = a7;
  uint64_t v67 = a6;
  uint64_t v78 = a5;
  uint64_t v75 = a4;
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v12 = a11[3];
  unint64_t v11 = a11[4];
  uint64_t v13 = a11[2];
  if (v13 >= a1) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = a11[2];
  }
  if (v12 >= a2) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = a11[3];
  }
  unint64_t v76 = a11[4];
  uint64_t v70 = v14;
  unint64_t v16 = v14 * v11;
  if ((v14 * v11) >> 61) {
    goto LABEL_60;
  }
  uint64_t v20 = a1;
  unint64_t v21 = *a11;
  unint64_t v22 = *a11;
  if (*a11) {
    goto LABEL_13;
  }
  size_t v23 = 8 * v16;
  if (v16 <= 0x4000)
  {
    double v24 = (char *)&v61 - ((MEMORY[0x270FA5388](v23, v23 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v24, v25);
    unint64_t v21 = 0;
    unint64_t v22 = (unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_13;
  }
  uint64_t v26 = malloc_type_malloc(v23, 0x1E76AA36uLL);
  if (!v26)
  {
LABEL_60:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v56 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v56, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v22 = (unint64_t)v26;
  unint64_t v21 = *a11;
LABEL_13:
  unint64_t v27 = v15 * v76;
  unint64_t v86 = v22;
  if (v21) {
    double v28 = 0;
  }
  else {
    double v28 = (void *)v22;
  }
  uint64_t v63 = v28;
  if (v27 >> 61)
  {
    uint64_t v57 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v58 = std::bad_alloc::bad_alloc(v57);
    __cxa_throw(v58, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v29 = a11[1];
  unint64_t v30 = v29;
  if (!v29)
  {
    size_t v31 = 8 * v27;
    if (v27 > 0x4000)
    {
      uint64_t v34 = malloc_type_malloc(v31, 0x1E76AA36uLL);
      if (!v34)
      {
        long long v59 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v60 = std::bad_alloc::bad_alloc(v59);
        __cxa_throw(v60, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      unint64_t v30 = (unint64_t)v34;
      unint64_t v29 = a11[1];
    }
    else
    {
      uint64_t v32 = (char *)&v61 - ((MEMORY[0x270FA5388](v31, v31 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
      bzero(v32, v33);
      unint64_t v29 = 0;
      unint64_t v30 = (unint64_t)(v32 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
  }
  unint64_t v64 = v27;
  unint64_t v65 = v16;
  if (v29) {
    unint64_t v35 = 0;
  }
  else {
    unint64_t v35 = (void *)v30;
  }
  double v62 = v35;
  BOOL v38 = v76 == a3 && v13 < v20 && v12 >= a2;
  BOOL v66 = v38;
  if (v20 >= 1)
  {
    uint64_t v39 = v30;
    uint64_t v40 = 0;
    uint64_t v73 = 8 * v76;
    uint64_t v83 = 8 * v81 * v15;
    uint64_t v68 = 8 * v70;
    uint64_t v84 = a10;
    uint64_t v82 = 8 * a10 * v15;
    uint64_t v74 = a3;
    uint64_t v69 = v20;
    do
    {
      uint64_t v41 = v40 + v70;
      uint64_t v71 = v40 + v70;
      if (v40 + v70 >= v20) {
        uint64_t v41 = v20;
      }
      if (a3 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v87 = v41 - v40;
        uint64_t v77 = v40 * v78;
        BOOL v43 = v40 == 0;
        BOOL v44 = v66;
        if (v43) {
          BOOL v44 = 0;
        }
        BOOL v85 = v44;
        uint64_t v80 = v67;
        do
        {
          uint64_t v45 = v42 + v76;
          if ((uint64_t)(v42 + v76) >= a3) {
            uint64_t v46 = a3;
          }
          else {
            uint64_t v46 = v42 + v76;
          }
          uint64_t v47 = v46 - v42;
          uint64_t v88 = v75 + 8 * (v42 + v77);
          uint64_t v89 = v78;
          Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,1>,6,2,1,false,false>::operator()((uint64_t)&v92, v86, &v88, v46 - v42, v87);
          uint64_t v79 = v45;
          if (a2 >= 1)
          {
            uint64_t v48 = 0;
            uint64_t v49 = 0;
            uint64_t v50 = v72;
            uint64_t v51 = v80;
            uint64_t v52 = v15;
            do
            {
              if (a2 >= v52) {
                uint64_t v53 = v52;
              }
              else {
                uint64_t v53 = a2;
              }
              uint64_t v54 = v53 + v48;
              if (!v85)
              {
                uint64_t v88 = v51;
                uint64_t v89 = v81;
                Eigen::internal::gemm_pack_rhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,0>,4,0,false,false>::operator()((uint64_t)&v91, v39, &v88, v47, v54);
              }
              uint64_t v88 = v50;
              uint64_t v89 = v84;
              Eigen::internal::gebp_kernel<double,double,long,Eigen::internal::blas_data_mapper<double,long,0,0>,6,4,false,false>::operator()(a9, (uint64_t)&v90, &v88, v86, v39, v87, v47, v54, -1, -1, 0, 0);
              v49 += v15;
              v52 += v15;
              v48 -= v15;
              v51 += v83;
              v50 += v82;
            }
            while (v49 < a2);
          }
          a3 = v74;
          uint64_t v42 = v79;
          v80 += v73;
        }
        while (v79 < v74);
      }
      v72 += v68;
      uint64_t v40 = v71;
      uint64_t v20 = v69;
    }
    while (v71 < v69);
  }
  if (v64 > 0x4000) {
    free(v62);
  }
  if (v65 > 0x4000) {
    free(v63);
  }
}

void sub_22449CAA0(_Unwind_Exception *exception_object)
{
  if (v1 > 0x4000) {
    free(*(void **)(v2 - 336));
  }
  _Unwind_Resume(exception_object);
}

uint64_t Eigen::internal::gemm_pack_lhs<double,long,Eigen::internal::const_blas_data_mapper<double,long,1>,6,2,1,false,false>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int64_t a5)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  if (a4 >= 0) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = a4 + 1;
  }
  int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  unsigned int v9 = 6;
  do
  {
    uint64_t v10 = (a5 - v6) / v9;
    if (v6 < v6 + v10 * v9)
    {
      BOOL v12 = v9 < 2 || a4 < 2;
      BOOL v47 = v12;
      uint64_t result = 8 * v9;
      int64_t v14 = v6 + 1;
      int64_t v15 = v6 + 2;
      int64_t v16 = v6 + 3;
      uint64_t v17 = v5;
      int64_t v48 = v6 + v10 * v9;
      while (1)
      {
        if (v47)
        {
          int64_t v18 = 0;
        }
        else
        {
          int64_t v18 = 0;
          uint64_t v19 = (int64x2_t *)(a2 + 8 * v17);
          do
          {
            unint64_t v20 = 0;
            unint64_t v21 = v19;
            do
            {
              uint64_t v22 = a3[1];
              unint64_t v23 = v18 + v22 * (v6 + v20);
              int64x2_t v24 = *(int64x2_t *)(*a3 + 8 * v23);
              int64x2_t v25 = *(int64x2_t *)(*a3 + 8 * (v23 + v22));
              int64x2_t *v21 = vzip1q_s64(v24, v25);
              v21[v9 / 2] = vzip2q_s64(v24, v25);
              v20 += 2;
              ++v21;
            }
            while (v20 < v9);
            v17 += 2 * v9;
            v18 += 2;
            v19 += v9;
          }
          while (v18 < v8);
        }
        if (v18 < a4) {
          break;
        }
        uint64_t v5 = v17;
LABEL_35:
        v6 += v9;
        v14 += v9;
        v15 += v9;
        v16 += v9;
        uint64_t v17 = v5;
        if (v6 >= v48) {
          goto LABEL_36;
        }
      }
      uint64_t v26 = *a3;
      uint64_t v27 = a3[1];
      int64_t v28 = v18 + v27 * v14;
      int64_t v29 = v18 + v27 * v15;
      int64_t v30 = v18 + v27 * v16;
      int64_t v31 = v18 + v27 * v6;
      uint64_t v32 = *a3;
      while (1)
      {
        if (v9 < 4)
        {
          unint64_t v33 = 0;
          if ((v9 & 3) == 0) {
            goto LABEL_31;
          }
        }
        else
        {
          unint64_t v33 = 0;
          uint64_t v34 = (void *)(a2 + 16 + 8 * v17);
          uint64_t v35 = v32;
          do
          {
            uint64_t v36 = *(void *)(v35 + 8 * v28);
            uint64_t v37 = *(void *)(v35 + 8 * v29);
            uint64_t v38 = *(void *)(v35 + 8 * v30);
            *(v34 - 2) = *(void *)(v35 + 8 * v31);
            *(v34 - 1) = v36;
            *uint64_t v34 = v37;
            v34[1] = v38;
            v34 += 4;
            v33 += 4;
            v35 += 32 * v27;
          }
          while ((uint64_t)v33 < (int)(v9 - 3));
          v17 += v33;
          if ((v9 & 3) == 0) {
            goto LABEL_31;
          }
        }
        unint64_t v39 = v9 - v33;
        if (v9 > v33)
        {
          uint64_t v40 = (void *)(v26 + 8 * (v18 + v27 * (v6 + v33)));
          do
          {
            uint64_t v5 = v17 + 1;
            *(void *)(a2 + 8 * v17) = *v40;
            v40 += v27;
            ++v17;
            --v39;
          }
          while (v39);
          goto LABEL_32;
        }
LABEL_31:
        uint64_t v5 = v17;
LABEL_32:
        ++v18;
        v32 += 8;
        uint64_t v17 = v5;
        if (v18 == a4) {
          goto LABEL_35;
        }
      }
    }
LABEL_36:
    v9 -= 2;
    if ((int)v9 < 2) {
      unsigned int v9 = 2 * (v9 != 0);
    }
  }
  while ((int)v9 > 0);
  if (v6 < a5)
  {
    uint64_t v41 = 8 * a3[1];
    uint64_t v42 = (uint64_t *)(*a3 + v41 * v6);
    do
    {
      BOOL v43 = v42;
      uint64_t v44 = a4;
      if (a4 >= 1)
      {
        do
        {
          uint64_t v45 = *v43++;
          *(void *)(a2 + 8 * v5++) = v45;
          --v44;
        }
        while (v44);
      }
      ++v6;
      uint64_t v42 = (uint64_t *)((char *)v42 + v41);
    }
    while (v6 != a5);
  }
  return result;
}

void std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D783680;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783680;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 848);
  v95[0] = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  uint64_t v98 = v7;
  turi::ml_data::get_iterator((turi::ml_data *)(v6 + 8), v4, v5, (uint64_t)v82);
  if (v88 != v87)
  {
    uint64_t v70 = v4;
    uint64_t v71 = (void **)a1;
    uint64_t v69 = v6;
    do
    {
      uint64_t v9 = v90;
      int64_t v8 = v91;
      if (v91) {
        atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v72 = v8;
      *(void *)&long long v97 = 0;
      if (v94)
      {
        uint64_t v10 = *(void *)(v9 + 56);
        if (v10)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = (uint64_t *)(*(void *)(v9 + 96) + 8 * v92 + 8 * (*(unsigned char *)(v9 + 18) == 0));
          uint64_t v73 = *(void *)(v9 + 56);
          do
          {
            uint64_t v14 = *(void *)(*(void *)(v9 + 72) + 16 * v11);
            unint64_t v15 = *(void *)(v14 + 64);
            switch(*(_DWORD *)(v14 + 24))
            {
              case 0:
                uint64_t v16 = *v13++;
                uint64_t v17 = v16;
                if (v15)
                {
                  uint64_t v99 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v96, (int)v12, &v99) = v17;
                }
                goto LABEL_40;
              case 1:
                unint64_t v29 = *v13++;
                unint64_t v28 = v29;
                if (v29 < v15 && v28 != 0)
                {
                  uint64_t v99 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v96, (int)v28 + (int)v12 - 1, &v99) = 0x3FF0000000000000;
                }
                goto LABEL_35;
              case 2:
                uint64_t v18 = *(void *)(v14 + 72);
                if (v18)
                {
                  unint64_t v19 = 0;
                  uint64_t v20 = v12 << 32;
                  do
                  {
                    uint64_t v21 = *v13++;
                    uint64_t v22 = v21;
                    if (v19 < v15)
                    {
                      uint64_t v99 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v96, v20 >> 32, &v99) = v22;
                    }
                    ++v19;
                    v20 += 0x100000000;
                  }
                  while (v18 != v19);
                }
                goto LABEL_22;
              case 3:
                uint64_t v32 = *v13++;
                for (uint64_t i = v32; i; --i)
                {
                  uint64_t v33 = *v13;
                  if (*v13 < v15 && v33 != 0)
                  {
                    uint64_t v99 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v96, (int)v33 + (int)v12 - 1, &v99) = 0x3FF0000000000000;
                  }
                  ++v13;
                }
LABEL_35:
                uint64_t v12 = v15 + v12 - 1;
                break;
              case 4:
                uint64_t v36 = *v13++;
                for (uint64_t j = v36; j; --j)
                {
                  uint64_t v37 = *v13;
                  if (*v13 < v15)
                  {
                    uint64_t v38 = v13[1];
                    uint64_t v99 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v96, (int)v37 + (int)v12, &v99) = v38;
                  }
                  v13 += 2;
                }
LABEL_40:
                v12 += v15;
                break;
              case 7:
                uint64_t v23 = *(void *)(v14 + 72);
                if (v23)
                {
                  unint64_t v24 = 0;
                  uint64_t v25 = v12 << 32;
                  do
                  {
                    uint64_t v26 = *v13++;
                    uint64_t v27 = v26;
                    if (v24 < v15)
                    {
                      uint64_t v99 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v96, v25 >> 32, &v99) = v27;
                    }
                    ++v24;
                    v25 += 0x100000000;
                  }
                  while (v23 != v24);
                }
LABEL_22:
                v12 += v15;
                uint64_t v10 = v73;
                break;
              default:
                break;
            }
            ++v11;
          }
          while (v11 != v10);
        }
      }
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
      double v39 = 1.0;
      if (*(unsigned char *)(v90 + 16)) {
        BOOL v40 = *(unsigned char *)(v90 + 17) == 0;
      }
      else {
        BOOL v40 = 0;
      }
      if (v40)
      {
        uint64_t v41 = (void *)(v90 + 24);
        if (!*(unsigned char *)(v90 + 18)) {
          uint64_t v41 = (void *)(*(void *)(v90 + 96) + 8 * v92);
        }
        double v39 = *(double *)(*(void *)(v90 + 96) + 8 * v92 + 8 * *v41 - 8);
      }
      uint64_t v42 = *(_DWORD *)(v69 + 848) - 1;
      uint64_t v99 = 0;
      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v96, v42, &v99) = 0x3FF0000000000000;
      if (*(unsigned char *)(v69 + 880)) {
        (*(void (**)(void, char *))(**(void **)(v69 + 864) + 40))(*(void *)(v69 + 864), v95);
      }
      uint64_t v43 = v97;
      if ((uint64_t)v97 < 1)
      {
        double v46 = 0.0;
      }
      else
      {
        uint64_t v45 = (int *)*((void *)&v96 + 1);
        uint64_t v44 = (double *)v96;
        double v46 = 0.0;
        do
        {
          double v47 = *v44++;
          double v48 = v47;
          uint64_t v49 = *v45++;
          double v46 = v46 + v48 * *(double *)(*v71[2] + 8 * v49);
          --v43;
        }
        while (v43);
      }
      double v50 = v46 - v39;
      v74[0] = 0;
      uint64_t v75 = v98;
      double v76 = v50 + v50;
      uint64_t v77 = v95;
      LOBYTE(v78) = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      uint64_t v81 = 0;
      LOBYTE(v99) = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      uint64_t v102 = v98;
      Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const>,1>::run((double *)&v99, (uint64_t)v74);
      uint64_t v51 = v81;
      uint64_t v81 = v102;
      uint64_t v102 = v51;
      long long v52 = v79;
      long long v79 = v100;
      long long v100 = v52;
      long long v53 = v80;
      long long v80 = v101;
      long long v101 = v53;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v100);
      turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(*v71[3] + 16 * v70), &v78);
      *(double *)(*v71[4] + 8 * v70) = *(double *)(*v71[4] + 8 * v70) + v50 * v50;
      uint64_t v54 = v97;
      if ((uint64_t)v97 >= 1)
      {
        uint64_t v55 = 0;
        long long v56 = v96;
        uint64_t v57 = (uint64_t *)(*v71[5] + 24 * v70);
        uint64_t v58 = *v57;
        uint64_t v59 = v57[1];
        do
        {
          uint64_t v60 = 0;
          uint64_t v61 = *(int *)(*((void *)&v56 + 1) + 4 * v55);
          do
          {
            uint64_t v62 = v61 + v59 * *(int *)(*((void *)&v56 + 1) + 4 * v60);
            *(double *)(v58 + 8 * v62) = *(double *)(v58 + 8 * v62)
                                       + (*(double *)(v56 + 8 * v55) + *(double *)(v56 + 8 * v55))
                                       * *(double *)(v56 + 8 * v60++);
          }
          while (v54 != v60);
          ++v55;
        }
        while (v55 != v54);
      }
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v79);
      if (v94 | v84)
      {
        uint64_t v63 = (uint64_t *)(*(void *)(v90 + 96) + 8 * v92);
        if (v85) {
          uint64_t v63 = &v86;
        }
        v92 += *v63;
      }
      uint64_t v64 = v88 + 1;
      uint64_t v65 = v87;
      uint64_t v66 = ++v88 - v83 * v89;
      uint64_t v93 = v66;
      if (v66 == v83 && v64 != v87)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v82);
        uint64_t v65 = v87;
        uint64_t v64 = v88;
      }
    }
    while (v64 != v65);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v82);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v96);
}

void sub_22449D3B8(_Unwind_Exception *a1)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::linear_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised::linear_svm::~linear_svm(turi::supervised::linear_svm *this)
{
  *(void *)this = &unk_26D783700;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  free(*((void **)this + 49));
  turi::supervised::supervised_learning_model_base::~supervised_learning_model_base(this);
}

{
  uint64_t vars8;

  turi::supervised::linear_svm::~linear_svm(this);
  JUMPOUT(0x22A614FA0);
}

void turi::supervised::linear_svm::model_specific_init(turi::supervised::linear_svm *this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  long long v3 = (uint64_t *)*((void *)this + 47);
  if (*(void *)(v3[3] + 64) != 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((uint64_t *)((char *)&v42 + 3), (uint64_t)"Linear SVM currently only supports binary classification. ", 58);
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Use the boosted_trees_classifier for multi-class classification.", 64);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v37);
    p_p = &__p;
    turi::supervised::linear_svm::model_specific_init(turi::ml_data const&,turi::ml_data const&)::$_0::operator()();
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *v3;
  if (v3[1] == *v3)
  {
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = v6 + v7;
      uint64_t v12 = *(void *)(v6 + v7);
      uint64_t v11 = *(std::__shared_weak_count **)(v10 + 8);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v13 = *(_DWORD *)(v12 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      else
      {
        unsigned int v13 = *(_DWORD *)(v12 + 24);
      }
      if (v13 > 6 || ((1 << v13) & 0x4A) == 0)
      {
        uint64_t v20 = (uint64_t *)(*v3 + v7);
        uint64_t v22 = *v20;
        uint64_t v21 = (std::__shared_weak_count *)v20[1];
        if (v21)
        {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v19 = *(void *)(v22 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        else
        {
          uint64_t v19 = *(void *)(v22 + 64);
        }
      }
      else
      {
        unint64_t v15 = (uint64_t *)(*v3 + v7);
        uint64_t v17 = *v15;
        uint64_t v16 = (std::__shared_weak_count *)v15[1];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v18 = *(void *)(v17 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        else
        {
          uint64_t v18 = *(void *)(v17 + 64);
        }
        uint64_t v19 = v18 - 1;
      }
      v9 += v19;
      ++v8;
      uint64_t v6 = *v3;
      v7 += 16;
    }
    while (v8 < (v3[1] - *v3) >> 4);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  v39[2] = v9;
  LODWORD(v40) = 2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  p_p = &__p;
  uint64_t v23 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<int>(v23 + 14, (int *)&v40);
  if (v43 < 0) {
    operator delete(__p);
  }
  uint64_t v26 = *((void *)this + 47);
  uint64_t v25 = *((void *)this + 48);
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  v39[0] = 0;
  v39[1] = 0;
  p_p = (void **)v39;
  uint64_t v27 = *(void **)(v26 + 24);
  if (!v27[8]) {
LABEL_39:
  }
    turi::flexible_type_converter<std::map<turi::flexible_type,unsigned long>>::set(&p_p, (uint64_t)&v40);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  while (1)
  {
    uint64_t v31 = v27[6];
    if ((*(_DWORD *)(v31 + 24) | 2) == 2)
    {
      uint64_t v32 = (uint64_t *)(v31 + 80);
    }
    else
    {
      uint64_t v35 = v31 + 32;
      uint64_t v34 = *(void *)(v31 + 32);
      if (v30 >= (*(void *)(v35 + 8) - v34) >> 3)
      {
        uint64_t v33 = 0;
        goto LABEL_34;
      }
      uint64_t v32 = (uint64_t *)(v34 + v29);
    }
    uint64_t v33 = *v32;
LABEL_34:
    BOOL v40 = (void *)(*(void *)(v27[4] + 80) + v28);
    std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)&p_p, (uint64_t)v40, v24, (uint64_t)&std::piecewise_construct, &v40)[6] = v33;
    ++v30;
    uint64_t v27 = *(void **)(v26 + 24);
    v29 += 8;
    v28 += 16;
    if (v30 >= v27[8]) {
      goto LABEL_39;
    }
  }
}

void sub_22449D9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::reset[abi:ne180100]<turi::supervised::linear_svm_scaled_logistic_opt_interface,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_svm_scaled_logistic_opt_interface,void>(&v2, a2);
}

void turi::supervised::linear_svm::init_options(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v27, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  int v34 = 0;
  char v35 = 1;
  uint64_t v33 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), &v27, &__p, (uint64_t)&v33, 0, 1.0e-10, 1.0e20);
  switch(v35)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v2 = v33;
      if (!v33) {
        goto LABEL_33;
      }
      if (*(char *)(v33 + 31) < 0) {
        operator delete(*(void **)(v33 + 8));
      }
      long long v3 = (void *)v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v5 = v33;
      if (!v33) {
        goto LABEL_33;
      }
      uint64_t v6 = *(void **)(v33 + 8);
      if (v6)
      {
        *(void *)(v33 + 16) = v6;
        operator delete(v6);
      }
      long long v3 = (void *)v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v33;
      if (!v33) {
        goto LABEL_33;
      }
      v29[0] = (void *)(v33 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v33;
      if (!v33) {
        goto LABEL_33;
      }
      v29[0] = (void *)(v33 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
LABEL_18:
      long long v3 = (void *)v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v33;
      if (!v33) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v33 + 16));
      long long v3 = (void *)v8;
      unsigned int v9 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v10 = (void *)v33;
      if (!v33) {
        goto LABEL_33;
      }
      uint64_t v11 = *(void **)(v33 + 48);
      if (v11)
      {
        *(void *)(v33 + 56) = v11;
        operator delete(v11);
      }
      uint64_t v12 = (void *)v10[3];
      if (v12)
      {
        v10[4] = v12;
        operator delete(v12);
      }
      unsigned int v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      long long v3 = v10;
      unsigned int v9 = 2071181815;
LABEL_31:
      uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      uint64_t v33 = 0;
      int v34 = 0;
      char v35 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v27, "max_iterations");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform during training");
      char v32 = 0;
      int v31 = 0;
      uint64_t v30 = 10;
      turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), &v27, &__p, (uint64_t)&v30, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
      switch(v32)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v30, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v14 = v30;
          if (!v30) {
            goto LABEL_69;
          }
          if (*(char *)(v30 + 31) < 0) {
            operator delete(*(void **)(v30 + 8));
          }
          unint64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_68;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v30, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v17 = v30;
          if (!v30) {
            goto LABEL_69;
          }
          uint64_t v18 = *(void **)(v30 + 8);
          if (v18)
          {
            *(void *)(v30 + 16) = v18;
            operator delete(v18);
          }
          unint64_t v15 = (void *)v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_68;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v30, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v19 = v30;
          if (!v30) {
            goto LABEL_69;
          }
          v29[0] = (void *)(v30 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
          goto LABEL_54;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v30, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v19 = v30;
          if (!v30) {
            goto LABEL_69;
          }
          v29[0] = (void *)(v30 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
LABEL_54:
          unint64_t v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v30, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = v30;
          if (!v30) {
            goto LABEL_69;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v30 + 16));
          unint64_t v15 = (void *)v20;
          unsigned int v21 = -235920773;
          goto LABEL_67;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v30, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v22 = (void *)v30;
          if (!v30) {
            goto LABEL_69;
          }
          uint64_t v23 = *(void **)(v30 + 48);
          if (v23)
          {
            *(void *)(v30 + 56) = v23;
            operator delete(v23);
          }
          __n128 v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = v24;
            operator delete(v24);
          }
          uint64_t v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          unint64_t v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_67:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x22A614FA0](v15, v16);
LABEL_69:
          uint64_t v30 = 0;
          int v31 = 0;
          char v32 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
          std::string::basic_string[abi:ne180100]<0>(v29, "Solver used for training");
          turi::flexible_type::flexible_type((turi::flexible_type *)&v28, "auto");
        default:
          goto LABEL_69;
      }
    default:
      goto LABEL_33;
  }
}

void sub_22449F1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, char a20,uint64_t a21,int a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,char a33,void *a34,int a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,int a42,char a43)
{
  MEMORY[0x22A614FA0](v43, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v44 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 - 136), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v46 = *(void *)(v44 - 136);
        if (v46)
        {
          if (*(char *)(v46 + 31) < 0) {
            operator delete(*(void **)(v46 + 8));
          }
          MEMORY[0x22A614FA0](v46, 0x1012C404EF22A49);
        }
      }
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      double v47 = *(void **)(v44 - 136);
      if (!v47) {
        goto LABEL_27;
      }
      double v48 = (void *)v47[1];
      if (v48)
      {
        v47[2] = v48;
        operator delete(v48);
      }
      uint64_t v49 = v47;
      uint64_t v50 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v51 = *(void *)(v44 - 136);
      if (!v51) {
        goto LABEL_27;
      }
      a9 = (void **)(v51 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v51 = *(void *)(v44 - 136);
      if (!v51) {
        goto LABEL_27;
      }
      a9 = (void **)(v51 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
LABEL_18:
      uint64_t v49 = (void *)v51;
      uint64_t v50 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v52 = *(void *)(v44 - 136);
      if (!v52) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v52 + 16));
      uint64_t v49 = (void *)v52;
      unsigned int v53 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v54 = *(void **)(v44 - 136);
      if (!v54) {
        goto LABEL_27;
      }
      uint64_t v49 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v54);
      unsigned int v53 = 2071181815;
LABEL_25:
      uint64_t v50 = v53 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v49, v50);
LABEL_27:
      *(void *)(v44 - 136) = 0;
LABEL_28:
      *(void *)(v44 - 136) = 0;
      *(_DWORD *)(v44 - 128) = 0;
      *(unsigned char *)(v44 - 124) = 0;
      a9 = &a34;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      if (a17 < 0) {
        operator delete(__p);
      }
      if (a29 < 0) {
        operator delete(a24);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

uint64_t turi::supervised::linear_svm::train(turi::supervised::linear_svm_scaled_logistic_opt_interface **this)
{
  v27[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v20, "feature_rescaling");
  option_value = (unsigned char *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)&v20);
  uint64_t v3 = 0;
  switch(option_value[12])
  {
    case 0:
      uint64_t v3 = *(void *)option_value;
      goto LABEL_25;
    case 1:
      uint64_t v3 = (uint64_t)*(double *)option_value;
      goto LABEL_25;
    case 2:
      uint64_t v5 = *(void *)option_value;
      uint64_t v6 = (char **)(*(void *)option_value + 8);
      size_t __idx = 0;
      uint64_t v7 = (char *)v6;
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v7 = *v6;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      uint64_t v3 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v24[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v8 = *(void *)(v5 + 16);
      }
      else {
        uint64_t v8 = *(unsigned __int8 *)(v5 + 31);
      }
      if (__idx != v8)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v16 = std::string::append(&v22, " cannot be interpreted as an integer");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v24[0] = (void *)v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v4 = *(void *)option_value;
      v24[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v9 = *(void *)option_value;
      v24[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v9 + 8), *(uint64_t **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      goto LABEL_24;
    case 5:
      uint64_t v10 = *(void *)option_value;
      v24[0] = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      goto LABEL_24;
    case 6:
      uint64_t v3 = (uint64_t)(*(void *)option_value << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v11 = *(void *)option_value;
      uint64_t v12 = *(atomic_uint **)(*(void *)option_value + 16);
      __p[0] = *(void **)(*(void *)option_value + 8);
      __p[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(v12 + 2, 1u, memory_order_relaxed);
      }
      long long v13 = *(_OWORD *)(v11 + 24);
      long long v14 = *(_OWORD *)(v11 + 56);
      long long v25 = *(_OWORD *)(v11 + 40);
      *(_OWORD *)uint64_t v26 = v14;
      *(_OWORD *)__n128 v24 = v13;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)option_value + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v25 + 1))
      {
        v26[0] = *((void **)&v25 + 1);
        operator delete(*((void **)&v25 + 1));
      }
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v3 = 0;
LABEL_25:
      if (v21 < 0)
      {
        operator delete(v20);
        if (!v3) {
          goto LABEL_30;
        }
      }
      else if (!v3)
      {
LABEL_30:
        turi::supervised::get_class_weights_from_options((uint64_t)(this + 28), (uint64_t)(this + 47), (uint64_t)v27);
      }
      turi::supervised::linear_svm_scaled_logistic_opt_interface::init_feature_rescaling(this[51]);
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
}

void sub_2244A1C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void **a54)
{
  std::ostringstream::~ostringstream((uint64_t)&a54);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a20, (void *)a21);
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a24);
  }
  free(a25);
  free(v54);
  turi::optimization::_solver_return::~_solver_return((void **)&STACK[0x2E0]);
  if (a32 < 0) {
    operator delete(__p);
  }
  free(a34);
  a54 = (void **)&a39;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a54);
  switch(*(unsigned char *)(v55 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v55 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_31;
      }
      uint64_t v57 = *(void *)(v55 - 136);
      if (!v57) {
        goto LABEL_31;
      }
      if (*(char *)(v57 + 31) < 0) {
        operator delete(*(void **)(v57 + 8));
      }
      uint64_t v58 = (void *)v57;
      uint64_t v59 = 0x1012C404EF22A49;
      goto LABEL_30;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v55 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_31;
      }
      uint64_t v63 = *(void **)(v55 - 136);
      if (!v63) {
        goto LABEL_31;
      }
      uint64_t v64 = (void *)v63[1];
      if (v64)
      {
        v63[2] = v64;
        operator delete(v64);
      }
      uint64_t v58 = v63;
      uint64_t v59 = 0x1080C409938AC02;
      goto LABEL_30;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v55 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_31;
      }
      uint64_t v60 = *(void **)(v55 - 136);
      if (!v60) {
        goto LABEL_31;
      }
      a54 = (void **)(v60 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a54);
      goto LABEL_25;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v55 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_31;
      }
      uint64_t v60 = *(void **)(v55 - 136);
      if (!v60) {
        goto LABEL_31;
      }
      a54 = (void **)(v60 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a54);
LABEL_25:
      uint64_t v58 = v60;
      uint64_t v59 = 0x1020C405E66F15BLL;
      goto LABEL_30;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v55 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_31;
      }
      uint64_t v65 = *(void *)(v55 - 136);
      if (!v65) {
        goto LABEL_31;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v65 + 16));
      uint64_t v58 = (void *)v65;
      unsigned int v62 = -235920773;
      goto LABEL_29;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v55 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_31;
      }
      uint64_t v61 = *(void **)(v55 - 136);
      if (!v61) {
        goto LABEL_31;
      }
      uint64_t v58 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v61);
      unsigned int v62 = 2071181815;
LABEL_29:
      uint64_t v59 = v62 | 0x1030C4000000000;
LABEL_30:
      MEMORY[0x22A614FA0](v58, v59);
LABEL_31:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_31;
  }
}

void turi::supervised::get_class_weights_from_options(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(*(void *)a2 + 24);
  unint64_t v6 = v5[8];
  uint64_t v8 = v5[4];
  uint64_t v7 = v5[5];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void **)(*(void *)a2 + 24);
  }
  uint64_t v9 = v5[7];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(&v20, v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "class_weights");
  uint64_t v10 = turi::option_manager::value(a1, (const void **)__p);
  memset(v24, 0, 13);
  if ((atomic_ullong **)v10 != v24)
  {
    uint64_t v11 = *(atomic_ullong **)v10;
    *(atomic_ullong **)((char *)v24 + 5) = *(atomic_ullong **)(v10 + 5);
    v24[0] = v11;
    BYTE4(v24[1]) = *(unsigned char *)(v10 + 12);
    if (BYTE4(v24[1]) <= 9u && ((1 << SBYTE4(v24[1])) & 0x33C) != 0) {
      atomic_fetch_add(v24[0], 1uLL);
    }
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (BYTE4(v24[1]) == 7)
  {
    if (v6)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = *(void *)(v8 + 80) + v13;
        memset(__p, 0, 13);
        if ((void **)v14 != __p)
        {
          unint64_t v15 = *(void **)v14;
          *(void **)((char *)__p + 5) = *(void **)(v14 + 5);
          __p[0] = v15;
          unsigned int v16 = *(unsigned __int8 *)(v14 + 12);
          BYTE4(__p[1]) = v16;
          BOOL v17 = v16 > 9;
          int v18 = (1 << v16) & 0x33C;
          if (!v17 && v18 != 0) {
            atomic_fetch_add((atomic_ullong *volatile)__p[0], 1uLL);
          }
        }
        int v27 = 0;
        char v28 = 1;
        uint64_t v26 = 0x3FF0000000000000;
        std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v20 + v12, (uint64_t *)__p);
        std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)__p);
        v13 += 16;
        v12 += 32;
        --v6;
      }
      while (v6);
    }
    *(void *)(a3 + 5) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 12) = 5;
    operator new();
  }
  uint64_t v21 = 0;
  int v22 = 0;
  char v23 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "auto");
  turi::flexible_type::operator=<std::string>((uint64_t)&v21);
}

void sub_2244A3AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  switch(a67)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a65, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      uint64_t v69 = a65;
      if (!a65) {
        break;
      }
      if (*(char *)(a65 + 31) < 0) {
        operator delete(*(void **)(a65 + 8));
      }
      uint64_t v70 = (void *)v69;
      uint64_t v71 = 0x1012C404EF22A49;
      goto LABEL_18;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a65, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      uint64_t v73 = a65;
      if (!a65) {
        break;
      }
      uint64_t v74 = *(void **)(a65 + 8);
      if (v74)
      {
        *(void *)(a65 + 16) = v74;
        operator delete(v74);
      }
      uint64_t v70 = (void *)v73;
      uint64_t v71 = 0x1080C409938AC02;
      goto LABEL_18;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a65, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      uint64_t v72 = a65;
      if (!a65) {
        goto LABEL_27;
      }
      a14 = a65 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
      goto LABEL_22;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a65, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      uint64_t v72 = a65;
      if (!a65) {
        goto LABEL_27;
      }
      a14 = a65 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
LABEL_22:
      uint64_t v75 = v72;
      uint64_t v76 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a65, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      uint64_t v77 = a65;
      if (!a65) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a65 + 16));
      uint64_t v75 = v77;
      uint64_t v76 = 0x1030C40F1F0227BLL;
LABEL_26:
      MEMORY[0x22A614FA0](v75, v76);
LABEL_27:
      a65 = 0;
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a65, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a65) {
        break;
      }
      uint64_t v70 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a65);
      uint64_t v71 = 0x1030C407B73B9F7;
LABEL_18:
      MEMORY[0x22A614FA0](v70, v71);
      break;
    default:
      break;
  }
  a14 = (uint64_t)&a21;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm::classify(uint64_t a1@<X0>, uint64_t a2@<X1>, turi::sframe *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  turi::sframe::sframe(a3);
  std::string::basic_string[abi:ne180100]<0>(v8, "class");
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void **))(*(void *)a1 + 120))(&v10, a1, a2, v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "class");
  turi::sframe::add_column((uint64_t)a3, &v10, (uint64_t)__p, (uint64_t)v11);
  turi::sframe::operator=((uint64_t)a3, (uint64_t)v11);
  turi::sframe::~sframe((turi::sframe *)v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_2244A4724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,char a23)
{
  turi::sframe::~sframe((turi::sframe *)&a23);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  turi::sframe::~sframe(v23);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm::fast_classify(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, turi::gl_sframe *a4@<X8>)
{
  turi::gl_sframe::gl_sframe(a4);
  std::string::basic_string[abi:ne180100]<0>(v10, "class");
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, void **))(*(void *)a1 + 176))(v12, a1, a2, a3, v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "class");
  turi::gl_sframe::add_column((uint64_t)a4, (uint64_t)v12, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_2244A4860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  void *v22 = &unk_26D759E10;
  __n128 v24 = (std::__shared_weak_count *)v22[2];
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm::save_impl(turi::supervised::linear_svm *this, turi::oarchive *a2)
{
}

double turi::supervised::linear_svm::set_coefs(uint64_t a1, long long **a2)
{
  uint64_t v2 = (void *)(a1 + 392);
  uint64_t v4 = *a2;
  uint64_t v3 = (uint64_t)a2[1];
  if (*(void *)(a1 + 400) != v3)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 392), v3, 1);
    uint64_t v3 = *(void *)(a1 + 400);
  }
  char v7 = (_OWORD *)*v2;
  if (v3 >= 0) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v3 + 1;
  }
  int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    int64_t v10 = 0;
    char v11 = (_OWORD *)*v2;
    uint64_t v12 = v4;
    do
    {
      long long v13 = *v12++;
      double result = *(double *)&v13;
      *v11++ = v13;
      v10 += 2;
    }
    while (v10 < v9);
  }
  BOOL v14 = __OFSUB__(v3, v9);
  uint64_t v15 = v3 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    uint64_t v16 = v8 >> 1;
    BOOL v17 = (double *)&v4[v8 >> 1];
    int v18 = (double *)&v7[v16];
    do
    {
      double v19 = *v17++;
      double result = v19;
      *v18++ = v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

turi::iarchive *turi::supervised::linear_svm::load_version(turi::supervised::linear_svm *this, turi::iarchive *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  assert_msg(a3 < 6, (uint64_t)"This model version cannot be loaded. Please re-save your model.", a3, a4, a5, a6, a7, a8, v12);
  if (a3 <= 4) {
    turi::supervised::linear_svm::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  }
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (void *)this + 47);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 49);
  return turi::option_manager::load((turi::supervised::linear_svm *)((char *)this + 224), a2);
}

uint64_t turi::supervised::linear_svm::get_version(turi::supervised::linear_svm *this)
{
  return 5;
}

void turi::supervised::linear_svm::export_to_coreml(turi::supervised::linear_svm *this)
{
  v1[20] = *MEMORY[0x263EF8340];
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v1, "model_type", "linear_svm");
}

void sub_2244A4C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,char a21)
{
}

const char *turi::supervised::linear_svm::name(turi::supervised::linear_svm *this)
{
  return "classifier_svm";
}

void *turi::supervised::linear_svm::uid(turi::supervised::linear_svm *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised::linear_svm::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/linear_svm.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised::linear_svm::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised::linear_svm::uid(void)::_uid;
}

void sub_2244A4D4C(_Unwind_Exception *a1)
{
}

void turi::supervised::linear_svm::set_default_evaluation_metric(turi::supervised::linear_svm *this)
{
  *(void *)&long long v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v9, "accuracy");
  std::string::basic_string[abi:ne180100]<0>(v10, "confusion_matrix");
  std::string::basic_string[abi:ne180100]<0>(v11, "f1_score");
  std::string::basic_string[abi:ne180100]<0>(v12, "precision");
  std::string::basic_string[abi:ne180100]<0>(v13, "recall");
  __str = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  p_str = &__str;
  char v8 = 0;
  __str = (std::string *)operator new(0x78uLL);
  uint64_t v5 = __str;
  unint64_t v6 = __str + 5;
  uint64_t v2 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, &v9, &v14, __str);
  uint64_t v5 = (std::string *)v2;
  if ((std::string **)((char *)this + 320) != &__str) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 320), __str, v2, 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - (char *)__str) >> 3));
  }
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v13[i + 2]) < 0) {
      operator delete((void *)v13[i]);
    }
  }
}

void sub_2244A4ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  a13 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  uint64_t v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 119) < 0) {
      operator delete(*(void **)(&a15 + v16 + 96));
    }
    v16 -= 24;
    if (v16 == -120) {
      _Unwind_Resume(a1);
    }
  }
}

void turi::supervised::linear_svm::set_default_tracking_metric(turi::supervised::linear_svm *this)
{
  *(void *)&long long v10 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "accuracy");
  __str = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  p_str = &__str;
  char v7 = 0;
  __str = (std::string *)operator new(0x18uLL);
  uint64_t v4 = __str;
  uint64_t v5 = __str + 1;
  uint64_t v2 = (long long *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v5, (long long *)__p, &v10, __str);
  uint64_t v4 = (std::string *)v2;
  if ((std::string **)((char *)this + 344) != &__str) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 344), __str, v2, 0xAAAAAAAAAAAAAAABLL * (((char *)v2 - (char *)__str) >> 3));
  }
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2244A5058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  a13 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_svm_scaled_logistic_opt_interface,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2244A5108(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::supervised::linear_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_regression_opt_interface,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::linear_svm_scaled_logistic_opt_interface *,std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::__shared_ptr_default_delete<turi::supervised::linear_svm_scaled_logistic_opt_interface,turi::supervised::linear_svm_scaled_logistic_opt_interface>,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::linear_svm_scaled_logistic_opt_interface *,std::shared_ptr<turi::supervised::linear_svm_scaled_logistic_opt_interface>::__shared_ptr_default_delete<turi::supervised::linear_svm_scaled_logistic_opt_interface,turi::supervised::linear_svm_scaled_logistic_opt_interface>,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<unsigned long,double const&,0>(void *a1, void *a2, void *a3)
{
  *(void *)((char *)a1 + 5) = 0;
  *a1 = 0;
  *a1 = *a2;
  turi::flexible_type::flexible_type<double>((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_2244A51D4(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

turi::supervised::linear_svm_scaled_logistic_opt_interface *turi::supervised::linear_svm_scaled_logistic_opt_interface::linear_svm_scaled_logistic_opt_interface(turi::supervised::linear_svm_scaled_logistic_opt_interface *this, const turi::ml_data *a2, const turi::ml_data *a3, turi::supervised::linear_svm *a4)
{
  v49[2] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D7838A8;
  char v8 = (char *)this + 8;
  turi::ml_data::ml_data((turi::supervised::linear_svm_scaled_logistic_opt_interface *)((char *)this + 8));
  turi::ml_data::ml_data((turi::supervised::linear_svm_scaled_logistic_opt_interface *)((char *)this + 200));
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((unsigned char *)this + 416) = 0;
  *((void *)this + 53) = (char *)this + 432;
  *((void *)this + 54) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = (char *)this + 456;
  *((void *)this + 59) = (char *)this + 480;
  *((void *)this + 60) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = (char *)this + 504;
  *((void *)this + 66) = 0;
  *((void *)this + 65) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 70) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 68) = (char *)this + 552;
  *((void *)this + 73) = 0;
  *((void *)this + 71) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 75) = 0;
  *((void *)this + 76) = 0;
  *((void *)this + 74) = (char *)this + 600;
  *((void *)this + 78) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 77) = (char *)this + 624;
  *((void *)this + 82) = 0;
  *((void *)this + 80) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 84) = 0;
  *((void *)this + 85) = 0;
  *((void *)this + 83) = (char *)this + 672;
  *((void *)this + 87) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 86) = (char *)this + 696;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((unsigned char *)this + 760) = 1;
  *((void *)this + 97) = 0;
  *((void *)this + 96) = 0;
  *((void *)this + 49) = &unk_26D783700;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((void *)this + 105) = 2;
  v49[0] = 0x3F80000000000000;
  v49[1] = 0x3F80000000000001;
  std::map<int,float>::map[abi:ne180100]((uint64_t)this + 848, (int *)v49, 2);
  *((unsigned char *)this + 896) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((void *)this + 113) = 0x403E000000000000;
  *((unsigned char *)this + 912) = 0;
  turi::ml_data::operator=((uint64_t)v8, (uint64_t *)a2);
  if (*((void *)a3 + 3) != *((void *)a3 + 2)) {
    turi::ml_data::operator=((uint64_t)this + 200, (uint64_t *)a3);
  }
  turi::supervised::supervised_learning_model_base::operator=((uint64_t)this + 392, (uint64_t)a4);
  char v9 = (void *)((char *)this + 784);
  char v11 = (long long *)*((void *)a4 + 49);
  uint64_t v10 = *((void *)a4 + 50);
  if (*((void *)this + 99) != v10)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)this + 98, v10, 1);
    uint64_t v10 = *((void *)this + 99);
  }
  uint64_t v12 = (_OWORD *)*v9;
  if (v10 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = v10 + 1;
  }
  int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v10 >= 2)
  {
    int64_t v15 = 0;
    uint64_t v16 = (_OWORD *)*v9;
    BOOL v17 = v11;
    do
    {
      long long v18 = *v17++;
      *v16++ = v18;
      v15 += 2;
    }
    while (v15 < v14);
  }
  BOOL v19 = __OFSUB__(v10, v14);
  uint64_t v20 = v10 - v14;
  if (!((v20 < 0) ^ v19 | (v20 == 0)))
  {
    uint64_t v21 = v13 >> 1;
    int v22 = (uint64_t *)&v11[v13 >> 1];
    char v23 = &v12[v21];
    do
    {
      uint64_t v24 = *v22++;
      *v23++ = v24;
      --v20;
    }
    while (v20);
  }
  uint64_t v26 = *((void *)a4 + 51);
  uint64_t v25 = *((void *)a4 + 52);
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 100) = v26;
  int v27 = (std::__shared_weak_count *)*((void *)this + 101);
  *((void *)this + 101) = v25;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  *((void *)this + 103) = *((void *)this + 4) - *((void *)this + 3);
  *((void *)this + 102) = (uint64_t)(*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1)) >> 4;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v27);
  *((void *)this + 109) = turi::thread_pool::size(instance);
  uint64_t v29 = (uint64_t *)*((void *)this + 96);
  uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = *v29;
  if (v29[1] == *v29)
  {
    unint64_t v34 = 1;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    unint64_t v34 = 1;
    do
    {
      uint64_t v35 = v31 + v32;
      uint64_t v37 = *(void *)(v31 + v32);
      uint64_t v36 = *(std::__shared_weak_count **)(v35 + 8);
      if (v36)
      {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v38 = *(_DWORD *)(v37 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      else
      {
        unsigned int v38 = *(_DWORD *)(v37 + 24);
      }
      if (v38 > 6 || ((1 << v38) & 0x4A) == 0)
      {
        uint64_t v45 = (uint64_t *)(*v29 + v32);
        uint64_t v47 = *v45;
        uint64_t v46 = (std::__shared_weak_count *)v45[1];
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v44 = *(void *)(v47 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
        else
        {
          uint64_t v44 = *(void *)(v47 + 64);
        }
      }
      else
      {
        BOOL v40 = (uint64_t *)(*v29 + v32);
        uint64_t v42 = *v40;
        uint64_t v41 = (std::__shared_weak_count *)v40[1];
        if (v41)
        {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v43 = *(void *)(v42 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
        else
        {
          uint64_t v43 = *(void *)(v42 + 64);
        }
        uint64_t v44 = v43 - 1;
      }
      v34 += v44;
      ++v33;
      uint64_t v31 = *v29;
      v32 += 16;
    }
    while (v33 < (v29[1] - *v29) >> 4);
  }
  *((void *)this + 104) = v34;
  if (v30)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    unint64_t v34 = *((void *)this + 104);
  }
  *((unsigned char *)this + 912) = v34 <= 3 * *((void *)this + 102);
  return this;
}

void sub_2244A5698(_Unwind_Exception *a1)
{
  turi::supervised::linear_svm::~linear_svm(v4);
  turi::ml_data::~ml_data(v3);
  turi::ml_data::~ml_data(v2);
  turi::neural_net::float_scalar::~float_scalar(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::~linear_svm_scaled_logistic_opt_interface(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  *(void *)this = &unk_26D7838A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 111);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 848, *((void **)this + 107));
  turi::supervised::linear_svm::~linear_svm((turi::supervised::linear_svm_scaled_logistic_opt_interface *)((char *)this + 392));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v11 = (void **)((char *)this + 352);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v11 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v5 = (void *)*((void *)this + 33);
  if (v5)
  {
    *((void *)this + 34) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  char v11 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  char v8 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  char v11 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  char v9 = (void *)*((void *)this + 9);
  if (v9)
  {
    *((void *)this + 10) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  uint64_t vars8;

  turi::supervised::linear_svm_scaled_logistic_opt_interface::~linear_svm_scaled_logistic_opt_interface(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *turi::supervised::linear_svm_scaled_logistic_opt_interface::set_class_weights(uint64_t *this, const turi::flexible_type *a2)
{
  uint64_t v2 = *(double **)(*(void *)a2 + 8);
  uint64_t v3 = *(uint64_t **)(*(void *)a2 + 16);
  if (v2 != (double *)v3)
  {
    uint64_t v4 = (uint64_t **)(this + 106);
    do
    {
      float v5 = v2[2];
      double v6 = *v2;
      v2 += 4;
      int v7 = LODWORD(v6);
      char v8 = (unsigned int *)&v7;
      this = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v4, &v7, (uint64_t)&std::piecewise_construct, &v8);
      *((float *)this + 8) = v5;
    }
    while (v2 != (double *)v3);
  }
  return this;
}

uint64_t turi::supervised::linear_svm_scaled_logistic_opt_interface::num_examples(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  return *((void *)this + 103);
}

uint64_t turi::supervised::linear_svm_scaled_logistic_opt_interface::num_variables(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  return *((void *)this + 104);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::get_status_header(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  turi::supervised::make_progress_header((long long **)(a1 + 392), a2, *(void *)(a1 + 224) != *(void *)(a1 + 216), a3);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::get_status(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v7, a2);
  if (*(unsigned char *)(a1 + 896)) {
    (*(void (**)(void, void **))(**(void **)(a1 + 880) + 16))(*(void *)(a1 + 880), v7);
  }
  turi::supervised::linear_svm::set_coefs(a1 + 392, (long long **)v7);
  turi::supervised::make_progress_row_string(a1 + 392, a1 + 8, a1 + 200, a3, a4);
  free(v7[0]);
}

void sub_2244A59A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

uint64_t turi::supervised::linear_svm_scaled_logistic_opt_interface::rescale_solution(uint64_t result)
{
  if (*(unsigned char *)(result + 896)) {
    return (*(uint64_t (**)(void))(**(void **)(result + 880) + 16))();
  }
  return result;
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::init_feature_rescaling(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  *((unsigned char *)this + 896) = 1;
  operator new();
}

void sub_2244A5A54(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40F38A5E8DLL);
  _Unwind_Resume(a1);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::get_validation_accuracy(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v48, "train");
  turi::supervised::supervised_learning_model_base::evaluate((uint64_t)this + 392, (uint64_t)this + 200, (unsigned __int8 *)&v48, 0, (uint64_t)&v26);
  if (v50 < 0) {
    operator delete(v48);
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "accuracy");
  uint64_t v2 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v26, (const void **)&v48);
  if (v50 < 0) {
    operator delete(v48);
  }
  if (v27 == (char **)v2) {
    turi::supervised::linear_svm_scaled_logistic_opt_interface::get_validation_accuracy(void)::$_0::operator()();
  }
  unint64_t v34 = (void **)&v49;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*(unsigned int *)(v2 + 56), *(_DWORD *)(v2 + 56) ^ (*(int *)(v2 + 56) >> 31), (std::string **)&v34, v2 + 64);
  LODWORD(v48) = *(_DWORD *)(v2 + 56) ^ (*(int *)(v2 + 56) >> 31);
  turi::variant_converter<turi::flexible_type,void>::get((int *)&v48, (uint64_t)&v46);
  switch(v47)
  {
    case 0:
    case 1:
    case 7:
      goto LABEL_61;
    case 2:
      uint64_t v3 = v46;
      size_t __idx = 0;
      uint64_t v4 = (char *)(v46 + 1);
      if (*((char *)v46 + 31) < 0) {
        uint64_t v4 = (char *)v46[1];
      }
      float v5 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v44, v4);
      std::stod(v5, &__idx);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (*((char *)v3 + 31) < 0) {
        atomic_ullong v6 = v3[2];
      }
      else {
        atomic_ullong v6 = *((unsigned __int8 *)v3 + 31);
      }
      if (__idx != v6)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v24 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v44);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_28;
    case 3:
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      std::string __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, (const void *)v46[1], v46[2], (v46[2] - v46[1]) >> 3);
      turi::flexible_type_fail(0);
      if (__p)
      {
        uint64_t v41 = __p;
        operator delete(__p);
      }
      goto LABEL_28;
    case 4:
      memset(v33, 0, sizeof(v33));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v33, (uint64_t *)v46[1], (uint64_t *)v46[2], (v46[2] - v46[1]) >> 4);
      turi::flexible_type_fail(0);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      goto LABEL_28;
    case 5:
      memset(v32, 0, sizeof(v32));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v32, (uint64_t *)v46[1], (uint64_t *)v46[2], (v46[2] - v46[1]) >> 5);
      turi::flexible_type_fail(0);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      goto LABEL_28;
    case 6:
      goto LABEL_28;
    case 8:
      int v7 = v46;
      char v8 = (atomic_uint *)v46[2];
      v27[2] = (char *)v46[1];
      char v28 = v8;
      if (v8) {
        atomic_fetch_add_explicit(v8 + 2, 1u, memory_order_relaxed);
      }
      long long v9 = *(_OWORD *)(v7 + 3);
      long long v10 = *(_OWORD *)(v7 + 5);
      long long v31 = *(_OWORD *)(v7 + 7);
      long long v30 = v10;
      long long v29 = v9;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v28);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v34, (uint64_t)(v46 + 1));
      turi::flexible_type_fail(0);
      if (v38)
      {
        double v39 = v38;
        operator delete(v38);
      }
      if (v36)
      {
        uint64_t v37 = v36;
        operator delete(v36);
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
LABEL_28:
      switch(v47)
      {
        case 2:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            char v11 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            if (*((char *)v46 + 31) < 0) {
              operator delete((void *)v46[1]);
            }
            uint64_t v12 = v11;
            uint64_t v13 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
          break;
        case 3:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v20 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            uint64_t v21 = (void *)v46[1];
            if (v21)
            {
              v46[2] = (atomic_ullong)v21;
              operator delete(v21);
            }
            uint64_t v12 = v20;
            uint64_t v13 = 0x1080C409938AC02;
            goto LABEL_59;
          }
          break;
        case 4:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v14 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            unint64_t v34 = (void **)(v46 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
            goto LABEL_54;
          }
          break;
        case 5:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v14 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            unint64_t v34 = (void **)(v46 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_54:
            uint64_t v12 = v14;
            uint64_t v13 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
          break;
        case 8:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v22 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v46 + 2);
            uint64_t v12 = v22;
            unsigned int v19 = -235920773;
            goto LABEL_58;
          }
          break;
        case 9:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v15 = v46;
            if (v46)
            {
              uint64_t v16 = (void *)v46[6];
              if (v16)
              {
                v46[7] = (atomic_ullong)v16;
                operator delete(v16);
              }
              BOOL v17 = (void *)v15[3];
              if (v17)
              {
                v15[4] = (atomic_ullong)v17;
                operator delete(v17);
              }
              long long v18 = (std::__shared_weak_count *)v15[2];
              if (v18) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v18);
              }
              uint64_t v12 = v15;
              unsigned int v19 = 2071181815;
LABEL_58:
              uint64_t v13 = v19 | 0x1030C4000000000;
LABEL_59:
              MEMORY[0x22A614FA0](v12, v13);
            }
LABEL_60:
            uint64_t v46 = 0;
          }
          break;
        default:
          break;
      }
LABEL_61:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v48);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v26, v27[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2244A6028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  if (*(char *)(v12 - 169) < 0) {
    operator delete(*(void **)(v12 - 192));
  }
  if (*(char *)(v12 - 193) < 0)
  {
    operator delete(*(void **)(v12 - 216));
    if ((v11 & 1) == 0)
    {
LABEL_8:
      switch(*(unsigned char *)(v12 - 140))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          uint64_t v14 = *(void *)(v12 - 152);
          if (!v14) {
            goto LABEL_34;
          }
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          int64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          unsigned int v19 = *(void **)(v12 - 152);
          if (!v19) {
            goto LABEL_34;
          }
          uint64_t v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = v20;
            operator delete(v20);
          }
          int64_t v15 = v19;
          uint64_t v16 = 0x1080C409938AC02;
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          BOOL v17 = *(void **)(v12 - 152);
          if (!v17) {
            goto LABEL_34;
          }
          *(void *)(v12 - 216) = v17 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
          goto LABEL_28;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          BOOL v17 = *(void **)(v12 - 152);
          if (!v17) {
            goto LABEL_34;
          }
          *(void *)(v12 - 216) = v17 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
LABEL_28:
          int64_t v15 = v17;
          uint64_t v16 = 0x1020C405E66F15BLL;
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v21 = *(void *)(v12 - 152);
            if (v21)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v21 + 16));
              MEMORY[0x22A614FA0](v21, 0x1030C40F1F0227BLL);
            }
            *(void *)(v12 - 152) = 0;
          }
          goto LABEL_34;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          long long v18 = *(void **)(v12 - 152);
          if (!v18) {
            goto LABEL_34;
          }
          int64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v18);
          uint64_t v16 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_34;
      }
      MEMORY[0x22A614FA0](v15, v16);
LABEL_34:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v12 - 136));
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a9, a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v10);
  goto LABEL_8;
}

void sub_2244A62F4()
{
  if (*(char *)(v0 - 113) < 0) {
    operator delete(*(void **)(v0 - 136));
  }
  JUMPOUT(0x2244A62ECLL);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::get_training_accuracy(turi::supervised::linear_svm_scaled_logistic_opt_interface *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v48, "train");
  turi::supervised::supervised_learning_model_base::evaluate((uint64_t)this + 392, (uint64_t)this + 8, (unsigned __int8 *)&v48, 0, (uint64_t)&v26);
  if (v50 < 0) {
    operator delete(v48);
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "accuracy");
  uint64_t v2 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v26, (const void **)&v48);
  if (v50 < 0) {
    operator delete(v48);
  }
  if (v27 == (char **)v2) {
    turi::supervised::linear_svm_scaled_logistic_opt_interface::get_training_accuracy(void)::$_0::operator()();
  }
  unint64_t v34 = (void **)&v49;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*(unsigned int *)(v2 + 56), *(_DWORD *)(v2 + 56) ^ (*(int *)(v2 + 56) >> 31), (std::string **)&v34, v2 + 64);
  LODWORD(v48) = *(_DWORD *)(v2 + 56) ^ (*(int *)(v2 + 56) >> 31);
  turi::variant_converter<turi::flexible_type,void>::get((int *)&v48, (uint64_t)&v46);
  switch(v47)
  {
    case 0:
    case 1:
    case 7:
      goto LABEL_61;
    case 2:
      uint64_t v3 = v46;
      size_t __idx = 0;
      uint64_t v4 = (char *)(v46 + 1);
      if (*((char *)v46 + 31) < 0) {
        uint64_t v4 = (char *)v46[1];
      }
      float v5 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v44, v4);
      std::stod(v5, &__idx);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (*((char *)v3 + 31) < 0) {
        atomic_ullong v6 = v3[2];
      }
      else {
        atomic_ullong v6 = *((unsigned __int8 *)v3 + 31);
      }
      if (__idx != v6)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v24 = std::string::append(&v43, " cannot be interpreted as a float");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v44);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_28;
    case 3:
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      std::string __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, (const void *)v46[1], v46[2], (v46[2] - v46[1]) >> 3);
      turi::flexible_type_fail(0);
      if (__p)
      {
        uint64_t v41 = __p;
        operator delete(__p);
      }
      goto LABEL_28;
    case 4:
      memset(v33, 0, sizeof(v33));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v33, (uint64_t *)v46[1], (uint64_t *)v46[2], (v46[2] - v46[1]) >> 4);
      turi::flexible_type_fail(0);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      goto LABEL_28;
    case 5:
      memset(v32, 0, sizeof(v32));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v32, (uint64_t *)v46[1], (uint64_t *)v46[2], (v46[2] - v46[1]) >> 5);
      turi::flexible_type_fail(0);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      goto LABEL_28;
    case 6:
      goto LABEL_28;
    case 8:
      int v7 = v46;
      char v8 = (atomic_uint *)v46[2];
      v27[2] = (char *)v46[1];
      char v28 = v8;
      if (v8) {
        atomic_fetch_add_explicit(v8 + 2, 1u, memory_order_relaxed);
      }
      long long v9 = *(_OWORD *)(v7 + 3);
      long long v10 = *(_OWORD *)(v7 + 5);
      long long v31 = *(_OWORD *)(v7 + 7);
      long long v30 = v10;
      long long v29 = v9;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v28);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v34, (uint64_t)(v46 + 1));
      turi::flexible_type_fail(0);
      if (v38)
      {
        double v39 = v38;
        operator delete(v38);
      }
      if (v36)
      {
        uint64_t v37 = v36;
        operator delete(v36);
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
LABEL_28:
      switch(v47)
      {
        case 2:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v11 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            if (*((char *)v46 + 31) < 0) {
              operator delete((void *)v46[1]);
            }
            uint64_t v12 = v11;
            uint64_t v13 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
          break;
        case 3:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v20 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            uint64_t v21 = (void *)v46[1];
            if (v21)
            {
              v46[2] = (atomic_ullong)v21;
              operator delete(v21);
            }
            uint64_t v12 = v20;
            uint64_t v13 = 0x1080C409938AC02;
            goto LABEL_59;
          }
          break;
        case 4:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v14 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            unint64_t v34 = (void **)(v46 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
            goto LABEL_54;
          }
          break;
        case 5:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v14 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            unint64_t v34 = (void **)(v46 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_54:
            uint64_t v12 = v14;
            uint64_t v13 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
          break;
        case 8:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v22 = v46;
            if (!v46) {
              goto LABEL_60;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v46 + 2);
            uint64_t v12 = v22;
            unsigned int v19 = -235920773;
            goto LABEL_58;
          }
          break;
        case 9:
          if (atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v15 = v46;
            if (v46)
            {
              uint64_t v16 = (void *)v46[6];
              if (v16)
              {
                v46[7] = (atomic_ullong)v16;
                operator delete(v16);
              }
              BOOL v17 = (void *)v15[3];
              if (v17)
              {
                v15[4] = (atomic_ullong)v17;
                operator delete(v17);
              }
              long long v18 = (std::__shared_weak_count *)v15[2];
              if (v18) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v18);
              }
              uint64_t v12 = v15;
              unsigned int v19 = 2071181815;
LABEL_58:
              uint64_t v13 = v19 | 0x1030C4000000000;
LABEL_59:
              MEMORY[0x22A614FA0](v12, v13);
            }
LABEL_60:
            uint64_t v46 = 0;
          }
          break;
        default:
          break;
      }
LABEL_61:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v48);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v26, v27[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2244A692C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  if (*(char *)(v12 - 169) < 0) {
    operator delete(*(void **)(v12 - 192));
  }
  if (*(char *)(v12 - 193) < 0)
  {
    operator delete(*(void **)(v12 - 216));
    if ((v11 & 1) == 0)
    {
LABEL_8:
      switch(*(unsigned char *)(v12 - 140))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          uint64_t v14 = *(void *)(v12 - 152);
          if (!v14) {
            goto LABEL_34;
          }
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          int64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          unsigned int v19 = *(void **)(v12 - 152);
          if (!v19) {
            goto LABEL_34;
          }
          uint64_t v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = v20;
            operator delete(v20);
          }
          int64_t v15 = v19;
          uint64_t v16 = 0x1080C409938AC02;
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          BOOL v17 = *(void **)(v12 - 152);
          if (!v17) {
            goto LABEL_34;
          }
          *(void *)(v12 - 216) = v17 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
          goto LABEL_28;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          BOOL v17 = *(void **)(v12 - 152);
          if (!v17) {
            goto LABEL_34;
          }
          *(void *)(v12 - 216) = v17 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
LABEL_28:
          int64_t v15 = v17;
          uint64_t v16 = 0x1020C405E66F15BLL;
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v21 = *(void *)(v12 - 152);
            if (v21)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v21 + 16));
              MEMORY[0x22A614FA0](v21, 0x1030C40F1F0227BLL);
            }
            *(void *)(v12 - 152) = 0;
          }
          goto LABEL_34;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          long long v18 = *(void **)(v12 - 152);
          if (!v18) {
            goto LABEL_34;
          }
          int64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v18);
          uint64_t v16 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_34;
      }
      MEMORY[0x22A614FA0](v15, v16);
LABEL_34:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v12 - 136));
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a9, a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v10);
  goto LABEL_8;
}

void sub_2244A6BF8()
{
  if (*(char *)(v0 - 113) < 0) {
    operator delete(*(void **)(v0 - 136));
  }
  JUMPOUT(0x2244A6BF0);
}

void turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(uint64_t a1, void *a2, float64x2_t **a3, double *a4)
{
  v45[4] = *(void ***)MEMORY[0x263EF8340];
  unint64_t v8 = *(void *)(a1 + 872);
  v45[0] = 0;
  std::vector<double>::vector(__p, v8, v45);
  unint64_t v9 = *(void *)(a1 + 872);
  v45[0] = *(void ***)(a1 + 832);
  v45[1] = (void **)1;
  v45[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)v42, (uint64_t *)v45);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v43, v9, (uint64_t)v42);
  free(v42[0]);
  if (*(unsigned char *)(a1 + 912))
  {
    long long v10 = (void **)operator new(0x28uLL);
    *long long v10 = &unk_26D783920;
  }
  else
  {
    long long v10 = (void **)operator new(0x28uLL);
    *long long v10 = &unk_26D7839A0;
  }
  v10[1] = (void *)a1;
  v10[2] = a2;
  void v10[3] = __p;
  v10[4] = v43;
  v45[3] = v10;
  turi::in_parallel((turi::thread_pool *)v45);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v45);
  *a4 = *(double *)__p[0];
  uint64_t v12 = *(float64x2_t **)v43[0];
  uint64_t v11 = *(void *)(v43[0] + 8);
  if (a3[1] != (float64x2_t *)v11)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a3, v11, 1);
    uint64_t v11 = (uint64_t)a3[1];
  }
  uint64_t v13 = *a3;
  if (v11 >= 0) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v11 + 1;
  }
  int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    int64_t v16 = 0;
    BOOL v17 = *a3;
    long long v18 = v12;
    do
    {
      float64x2_t v19 = *v18++;
      *v17++ = v19;
      v16 += 2;
    }
    while (v16 < v15);
  }
  BOOL v20 = __OFSUB__(v11, v15);
  uint64_t v21 = v11 - v15;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    uint64_t v22 = v14 >> 1;
    char v23 = (uint64_t *)&v12[v14 >> 1];
    f64 = (void *)v13[v22].f64;
    do
    {
      uint64_t v25 = *v23++;
      *f64++ = v25;
      --v21;
    }
    while (v21);
  }
  if (*(void *)(a1 + 872) >= 2uLL)
  {
    unint64_t v26 = 1;
    do
    {
      *a4 = *((double *)__p[0] + v26) + *a4;
      uint64_t v27 = *(void *)(v43[0] + 16 * v26);
      char v28 = *a3;
      uint64_t v29 = (uint64_t)a3[1];
      if (v29 >= 0) {
        uint64_t v30 = (uint64_t)a3[1];
      }
      else {
        uint64_t v30 = v29 + 1;
      }
      int64_t v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
      if (v29 >= 2)
      {
        int64_t v32 = 0;
        unint64_t v33 = *a3;
        unint64_t v34 = *(float64x2_t **)(v43[0] + 16 * v26);
        do
        {
          float64x2_t v35 = *v34++;
          *unint64_t v33 = vaddq_f64(v35, *v33);
          ++v33;
          v32 += 2;
        }
        while (v32 < v31);
      }
      BOOL v36 = v29 <= v31;
      uint64_t v37 = v29 - v31;
      if (!v36)
      {
        uint64_t v38 = v30 >> 1;
        double v39 = (double *)(v27 + 16 * v38);
        BOOL v40 = v28[v38].f64;
        do
        {
          double v41 = *v39++;
          *BOOL v40 = v41 + *v40;
          ++v40;
          --v37;
        }
        while (v37);
      }
      ++v26;
    }
    while (v26 < *(void *)(a1 + 872));
  }
  v45[0] = (void **)v43;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100](v45);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2244A6F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char *a18)
{
  a18 = &a12;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::map<int,float>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_hint_unique_key_args<int,std::pair<int const,float> const&>((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_2244A6FFC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_hint_unique_key_args<int,std::pair<int const,float> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D783920;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783920;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  unint64_t v7 = *(void *)(v6 + 832);
  if (v7)
  {
    if (v7 >> 61 || (int v8 = (float64x2_t *)malloc_type_malloc(8 * v7, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v86 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v86, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    uint64_t v103 = v8;
  }
  uint64_t v104 = v7;
  int v102 = 0;
  turi::ml_data::get_iterator((turi::ml_data *)(v6 + 8), v4, v5, (uint64_t)v89);
  if (v95 != v94)
  {
    do
    {
      uint64_t v9 = v4;
      uint64_t v10 = v3;
      uint64_t v12 = v97;
      uint64_t v11 = v98;
      if (v98) {
        atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v87 = v99;
      uint64_t v88 = v11;
      int v13 = v101;
      int64_t v15 = v103;
      int64_t v14 = v104;
      if (v104 >= 0) {
        uint64_t v16 = v104;
      }
      else {
        uint64_t v16 = v104 + 1;
      }
      int64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if (v104 >= 2)
      {
        unint64_t v18 = 2;
        if (v17 > 2) {
          unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
        }
        bzero(v103, ((8 * v18 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if (v17 < v14) {
        bzero(&v15[v16 >> 1], 8 * v14 - 16 * (v16 >> 1));
      }
      uint64_t v3 = v10;
      uint64_t v4 = v9;
      if (v13)
      {
        uint64_t v19 = *(void *)(v12 + 56);
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v22 = (unint64_t *)(*(void *)(v12 + 96) + 8 * v87 + 8 * (*(unsigned char *)(v12 + 18) == 0));
          uint64_t v23 = *(void *)(v12 + 72);
          uint64_t v24 = v103;
          do
          {
            uint64_t v25 = *(void *)(v23 + 16 * v20);
            unint64_t v26 = *(void *)(v25 + 64);
            switch(*(_DWORD *)(v25 + 24))
            {
              case 0:
                if (v26) {
                  *(void *)&v24->f64[v21] = *v22;
                }
                ++v22;
                goto LABEL_49;
              case 1:
                unint64_t v35 = *v22++;
                unint64_t v34 = v35;
                --v21;
                if (v35 < v26 && v34 != 0) {
                  v24->f64[v34 + v21] = 1.0;
                }
                goto LABEL_49;
              case 2:
                uint64_t v27 = *(void *)(v25 + 72);
                if (!v27) {
                  goto LABEL_49;
                }
                uint64_t v28 = 0;
                unint64_t v29 = 0;
                uint64_t v30 = (char *)&v103->f64[v21];
                do
                {
                  if (v29 < v26) {
                    *(void *)&v30[8 * v29] = v22[v29];
                  }
                  ++v29;
                  v28 -= 8;
                }
                while (v27 != v29);
                break;
              case 3:
                uint64_t v38 = *v22++;
                uint64_t v37 = v38;
                --v21;
                if (v38)
                {
                  double v39 = v103;
                  do
                  {
                    float64_t v40 = *(double *)v22;
                    if (*v22 < v26 && *(void *)&v40 != 0) {
                      v39->f64[*(void *)&v40 + v21] = 1.0;
                    }
                    ++v22;
                    --v37;
                  }
                  while (v37);
                }
                goto LABEL_49;
              case 4:
                float64_t v44 = *(double *)v22;
                uint64_t v42 = v22 + 1;
                float64_t v43 = v44;
                if (v44 == 0.0)
                {
                  uint64_t v46 = v42;
                }
                else
                {
                  uint64_t v45 = v103;
                  uint64_t v46 = v42;
                  do
                  {
                    unint64_t v48 = *v46;
                    v46 += 2;
                    unint64_t v47 = v48;
                    if (v48 < v26) {
                      *(void *)&v45->f64[v47 + v21] = v42[1];
                    }
                    uint64_t v42 = v46;
                    --*(void *)&v43;
                  }
                  while (v43 != 0.0);
                }
                v21 += v26;
                uint64_t v22 = v46;
                goto LABEL_50;
              case 7:
                uint64_t v31 = *(void *)(v25 + 72);
                if (!v31) {
                  goto LABEL_49;
                }
                uint64_t v28 = 0;
                unint64_t v32 = 0;
                unint64_t v33 = (char *)&v103->f64[v21];
                do
                {
                  if (v32 < v26) {
                    *(void *)&v33[8 * v32] = v22[v32];
                  }
                  ++v32;
                  v28 -= 8;
                }
                while (v31 != v32);
                break;
              default:
                goto LABEL_50;
            }
            uint64_t v22 = (unint64_t *)((char *)v22 - v28);
LABEL_49:
            v21 += v26;
LABEL_50:
            ++v20;
          }
          while (v20 != v19);
        }
      }
      if (v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }
      v103->f64[*(void *)(v6 + 832) - 1] = 1.0;
      if (*(unsigned char *)(v6 + 896)) {
        (*(void (**)(void, float64x2_t **))(**(void **)(v6 + 880) + 16))(*(void *)(v6 + 880), &v103);
      }
      if (*(unsigned char *)(v97 + 16)) {
        BOOL v49 = *(unsigned char *)(v97 + 17) == 0;
      }
      else {
        BOOL v49 = 1;
      }
      if (v49)
      {
        LODWORD(v50) = 0;
      }
      else
      {
        uint64_t v51 = (void *)(v97 + 24);
        if (!*(unsigned char *)(v97 + 18)) {
          uint64_t v51 = (void *)(*(void *)(v97 + 96) + 8 * v99);
        }
        uint64_t v50 = *(void *)(*(void *)(v97 + 96) + 8 * v99 + 8 * *v51 - 8);
      }
      int v102 = v50;
      double v52 = *(double *)(v6 + 904);
      uint64_t v53 = *(void *)(v10 + 16);
      v105[0] = &v103;
      v105[1] = v53;
      double v54 = 0.0;
      double v55 = 0.0;
      if (*(void *)(v53 + 8))
      {
        v106[1] = (unsigned int *)v103;
        v106[3] = *(unsigned int **)v53;
        v106[5] = (unsigned int *)v105;
        double v55 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v106);
      }
      double v56 = (double)(2 * (int)v50) + -1.0;
      double v57 = v56 * v55 + -1.0;
      double v58 = -(v52 * v57);
      double v59 = exp(-(v57 * -v52));
      if (v58 >= -100.0)
      {
        if (v58 <= 50.0)
        {
          long double v60 = exp(v58);
          double v54 = log1p(v60);
        }
        else
        {
          double v54 = v58;
        }
      }
      v106[0] = (unsigned int *)&v102;
      *(double *)(**(void **)(v10 + 24) + 8 * v4) = v54
                                                    * *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(v6 + 848), &v102, (uint64_t)&std::piecewise_construct, v106)+ 8)/ *(double *)(v6 + 904)+ *(double *)(**(void **)(v10 + 24) + 8 * v4);
      v106[0] = (unsigned int *)&v102;
      uint64_t v61 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(v6 + 848), &v102, (uint64_t)&std::piecewise_construct, v106);
      double v62 = -1.0 / (v59 + 1.0);
      double v63 = v56 * *((float *)v61 + 8);
      uint64_t v64 = (float64x2_t **)(**(void **)(v10 + 32) + 16 * v4);
      uint64_t v65 = v103;
      uint64_t v66 = *v64;
      uint64_t v67 = (uint64_t)v64[1];
      if (v67 >= 0) {
        uint64_t v68 = (uint64_t)v64[1];
      }
      else {
        uint64_t v68 = v67 + 1;
      }
      int64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
      if (v67 >= 2)
      {
        int64_t v70 = 0;
        uint64_t v71 = v66;
        uint64_t v72 = v103;
        do
        {
          float64x2_t v73 = *v72++;
          *uint64_t v71 = vaddq_f64(*v71, vmulq_n_f64(vmulq_n_f64(v73, v63), v62));
          ++v71;
          v70 += 2;
        }
        while (v70 < v69);
      }
      BOOL v74 = v67 <= v69;
      uint64_t v75 = v67 - v69;
      if (!v74)
      {
        uint64_t v76 = v68 >> 1;
        f64 = v65[v76].f64;
        uint64_t v78 = v66[v76].f64;
        do
        {
          double v79 = *f64++;
          *uint64_t v78 = *v78 + v62 * (v63 * v79);
          ++v78;
          --v75;
        }
        while (v75);
      }
      if (v101 | v91)
      {
        long long v80 = (uint64_t *)(*(void *)(v97 + 96) + 8 * v99);
        if (v92) {
          long long v80 = &v93;
        }
        v99 += *v80;
      }
      uint64_t v81 = v95 + 1;
      uint64_t v82 = v94;
      uint64_t v83 = ++v95 - v90 * v96;
      uint64_t v100 = v83;
      if (v83 == v90 && v81 != v94)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v89);
        uint64_t v82 = v94;
        uint64_t v81 = v95;
      }
    }
    while (v81 != v82);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v89);
  free(v103);
}

void sub_2244A7810(_Unwind_Exception *a1)
{
  free(*(void **)(v1 - 232));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D7839A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7839A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 832);
  v97[0] = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  uint64_t v100 = v7;
  int v96 = 0;
  turi::ml_data::get_iterator((turi::ml_data *)(v6 + 8), v4, v5, (uint64_t)v83);
  if (v89 != v88)
  {
    uint64_t v68 = v4;
    int64_t v69 = (void **)a1;
    uint64_t v67 = v6;
    uint64_t v66 = (uint64_t **)(v6 + 848);
    do
    {
      uint64_t v8 = v91;
      uint64_t v9 = v92;
      if (v92) {
        atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int64_t v70 = v9;
      *(void *)&long long v99 = 0;
      if (v95)
      {
        uint64_t v10 = *(void *)(v8 + 56);
        if (v10)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          int v13 = (uint64_t *)(*(void *)(v8 + 96) + 8 * v93 + 8 * (*(unsigned char *)(v8 + 18) == 0));
          uint64_t v71 = *(void *)(v8 + 56);
          do
          {
            uint64_t v14 = *(void *)(*(void *)(v8 + 72) + 16 * v11);
            unint64_t v15 = *(void *)(v14 + 64);
            switch(*(_DWORD *)(v14 + 24))
            {
              case 0:
                uint64_t v16 = *v13++;
                uint64_t v17 = v16;
                if (v15)
                {
                  uint64_t v72 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v98, (int)v12, &v72) = v17;
                }
                goto LABEL_40;
              case 1:
                unint64_t v29 = *v13++;
                unint64_t v28 = v29;
                if (v29 < v15 && v28 != 0)
                {
                  uint64_t v72 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v98, (int)v28 + (int)v12 - 1, &v72) = 0x3FF0000000000000;
                }
                goto LABEL_35;
              case 2:
                uint64_t v18 = *(void *)(v14 + 72);
                if (v18)
                {
                  unint64_t v19 = 0;
                  uint64_t v20 = v12 << 32;
                  do
                  {
                    uint64_t v21 = *v13++;
                    uint64_t v22 = v21;
                    if (v19 < v15)
                    {
                      uint64_t v72 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v98, v20 >> 32, &v72) = v22;
                    }
                    ++v19;
                    v20 += 0x100000000;
                  }
                  while (v18 != v19);
                }
                goto LABEL_22;
              case 3:
                uint64_t v32 = *v13++;
                for (uint64_t i = v32; i; --i)
                {
                  uint64_t v33 = *v13;
                  if (*v13 < v15 && v33 != 0)
                  {
                    uint64_t v72 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v98, (int)v33 + (int)v12 - 1, &v72) = 0x3FF0000000000000;
                  }
                  ++v13;
                }
LABEL_35:
                uint64_t v12 = v15 + v12 - 1;
                break;
              case 4:
                uint64_t v36 = *v13++;
                for (uint64_t j = v36; j; --j)
                {
                  uint64_t v37 = *v13;
                  if (*v13 < v15)
                  {
                    uint64_t v38 = v13[1];
                    uint64_t v72 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v98, (int)v37 + (int)v12, &v72) = v38;
                  }
                  v13 += 2;
                }
LABEL_40:
                v12 += v15;
                break;
              case 7:
                uint64_t v23 = *(void *)(v14 + 72);
                if (v23)
                {
                  unint64_t v24 = 0;
                  uint64_t v25 = v12 << 32;
                  do
                  {
                    uint64_t v26 = *v13++;
                    uint64_t v27 = v26;
                    if (v24 < v15)
                    {
                      uint64_t v72 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v98, v25 >> 32, &v72) = v27;
                    }
                    ++v24;
                    v25 += 0x100000000;
                  }
                  while (v23 != v24);
                }
LABEL_22:
                v12 += v15;
                uint64_t v10 = v71;
                break;
              default:
                break;
            }
            ++v11;
          }
          while (v11 != v10);
        }
      }
      if (v70) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
      uint64_t v39 = *(_DWORD *)(v67 + 832) - 1;
      uint64_t v72 = 0;
      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v98, v39, &v72) = 0x3FF0000000000000;
      if (*(unsigned char *)(v67 + 896)) {
        (*(void (**)(void, char *))(**(void **)(v67 + 880) + 40))(*(void *)(v67 + 880), v97);
      }
      if (*(unsigned char *)(v91 + 16)) {
        BOOL v40 = *(unsigned char *)(v91 + 17) == 0;
      }
      else {
        BOOL v40 = 1;
      }
      if (v40)
      {
        LODWORD(v41) = 0;
      }
      else
      {
        uint64_t v42 = (void *)(v91 + 24);
        if (!*(unsigned char *)(v91 + 18)) {
          uint64_t v42 = (void *)(*(void *)(v91 + 96) + 8 * v93);
        }
        uint64_t v41 = *(void *)(*(void *)(v91 + 96) + 8 * v93 + 8 * *v42 - 8);
      }
      int v96 = v41;
      uint64_t v43 = v99;
      double v44 = 0.0;
      double v45 = 0.0;
      if ((uint64_t)v99 >= 1)
      {
        unint64_t v47 = (int *)*((void *)&v98 + 1);
        uint64_t v46 = (double *)v98;
        do
        {
          double v48 = *v46++;
          double v49 = v48;
          uint64_t v50 = *v47++;
          double v45 = v45 + v49 * *(double *)(*v69[2] + 8 * v50);
          --v43;
        }
        while (v43);
      }
      double v51 = (double)(2 * (int)v41) + -1.0;
      double v52 = *(double *)(v67 + 904);
      double v53 = v51 * v45 + -1.0;
      double v54 = -(v52 * v53);
      double v55 = exp(-(v53 * -v52));
      if (v54 >= -100.0)
      {
        if (v54 <= 50.0)
        {
          long double v56 = exp(v54);
          double v44 = log1p(v56);
        }
        else
        {
          double v44 = v54;
        }
      }
      uint64_t v72 = (unsigned int *)&v96;
      *(double *)(*v69[3] + 8 * v68) = v44
                                     * *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v66, &v96, (uint64_t)&std::piecewise_construct, &v72)+ 8)/ *(double *)(v67 + 904)+ *(double *)(*v69[3] + 8 * v68);
      unsigned __int8 v101 = (unsigned int *)&v96;
      double v57 = v51
          * *((float *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v66, &v96, (uint64_t)&std::piecewise_construct, &v101)+ 8);
      LOBYTE(v72) = 0;
      char v73 = 0;
      uint64_t v74 = v100;
      double v75 = v57;
      uint64_t v76 = v97;
      uint64_t v77 = v100;
      double v78 = -1.0 / (v55 + 1.0);
      LOBYTE(v79) = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      uint64_t v82 = 0;
      LOBYTE(v101) = 0;
      long long v102 = 0u;
      long long v103 = 0u;
      uint64_t v104 = v100;
      Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const> const,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>,1>::run((double *)&v101, (uint64_t)&v72);
      uint64_t v58 = v82;
      uint64_t v82 = v104;
      uint64_t v104 = v58;
      long long v59 = v80;
      long long v80 = v102;
      long long v60 = v81;
      long long v81 = v103;
      long long v102 = v59;
      long long v103 = v60;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v102);
      turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(*v69[4] + 16 * v68), &v79);
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v80);
      if (v95 | v85)
      {
        uint64_t v61 = (uint64_t *)(*(void *)(v91 + 96) + 8 * v93);
        if (v86) {
          uint64_t v61 = &v87;
        }
        v93 += *v61;
      }
      uint64_t v62 = v89 + 1;
      uint64_t v63 = v88;
      uint64_t v64 = ++v89 - v84 * v90;
      uint64_t v94 = v64;
      if (v64 == v84 && v62 != v88)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v83);
        uint64_t v63 = v88;
        uint64_t v62 = v89;
      }
    }
    while (v62 != v63);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v83);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v98);
}

void sub_2244A7F58(_Unwind_Exception *a1)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::linear_svm_scaled_logistic_opt_interface::compute_first_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

double *Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::SparseVector<double,0,int> const> const,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>,1>::run(double *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 40);
  uint64_t v3 = v2[3];
  if (v3 >= 1)
  {
    uint64_t v4 = result;
    double v5 = *(double *)(a2 + 32);
    double v6 = *(double *)(a2 + 72);
    uint64_t v7 = (double *)v2[1];
    uint64_t v8 = (int *)v2[2];
    do
    {
      double v9 = *v7++;
      double v10 = v6 * (v5 * v9);
      uint64_t v11 = *v8++;
      __n128 result = (double *)Eigen::SparseVector<double,0,int>::insert(v4, v11);
      void *result = v10;
      --v3;
    }
    while (v3);
  }
  return result;
}

void turi::supervised::logistic_regression::~logistic_regression(turi::supervised::logistic_regression *this)
{
  *(void *)this = &unk_26D783A20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  free(*((void **)this + 54));
  free(*((void **)this + 52));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  turi::supervised::supervised_learning_model_base::~supervised_learning_model_base(this);
}

{
  uint64_t vars8;

  turi::supervised::logistic_regression::~logistic_regression(this);
  JUMPOUT(0x22A614FA0);
}

void turi::supervised::logistic_regression::model_specific_init(turi::supervised::logistic_regression *this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  double v5 = (uint64_t *)*((void *)this + 47);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 48);
  *((void *)this + 56) = *(void *)(v5[3] + 64);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *v5;
  if (v5[1] == *v5)
  {
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = v6 + v7;
      uint64_t v12 = *(void *)(v6 + v7);
      uint64_t v11 = *(std::__shared_weak_count **)(v10 + 8);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v13 = *(_DWORD *)(v12 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      else
      {
        unsigned int v13 = *(_DWORD *)(v12 + 24);
      }
      if (v13 > 6 || ((1 << v13) & 0x4A) == 0)
      {
        uint64_t v20 = (uint64_t *)(*v5 + v7);
        uint64_t v22 = *v20;
        uint64_t v21 = (std::__shared_weak_count *)v20[1];
        if (v21)
        {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v19 = *(void *)(v22 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        else
        {
          uint64_t v19 = *(void *)(v22 + 64);
        }
      }
      else
      {
        unint64_t v15 = (uint64_t *)(*v5 + v7);
        uint64_t v17 = *v15;
        uint64_t v16 = (std::__shared_weak_count *)v15[1];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v18 = *(void *)(v17 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        else
        {
          uint64_t v18 = *(void *)(v17 + 64);
        }
        uint64_t v19 = v18 - 1;
      }
      v9 += v19;
      ++v8;
      uint64_t v6 = *v5;
      v7 += 16;
    }
    while (v8 < (v5[1] - *v5) >> 4);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *((void *)this + 57) = (*((void *)this + 56) - 1) * v9;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  p_p = &__p;
  uint64_t v23 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v23 + 14, (void *)this + 57);
  if (v41 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  p_p = &__p;
  unint64_t v24 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v24 + 14, (void *)this + 56);
  if (v41 < 0) {
    operator delete(__p);
  }
  uint64_t v27 = *((void *)this + 47);
  uint64_t v26 = *((void *)this + 48);
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  v38[0] = 0;
  v38[1] = 0;
  p_p = (void **)v38;
  unint64_t v28 = *(void **)(v27 + 24);
  if (!v28[8]) {
LABEL_40:
  }
    turi::flexible_type_converter<std::map<turi::flexible_type,unsigned long>>::set(&p_p, (uint64_t)&v39);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  while (1)
  {
    uint64_t v32 = v28[6];
    if ((*(_DWORD *)(v32 + 24) | 2) == 2)
    {
      uint64_t v33 = (uint64_t *)(v32 + 80);
    }
    else
    {
      uint64_t v35 = v32 + 32;
      uint64_t v34 = *(void *)(v32 + 32);
      if (v31 >= (*(void *)(v35 + 8) - v34) >> 3)
      {
        uint64_t v36 = 0;
        goto LABEL_37;
      }
      uint64_t v33 = (uint64_t *)(v34 + v30);
    }
    uint64_t v36 = *v33;
LABEL_37:
    uint64_t v39 = (void *)(*(void *)(v28[4] + 80) + v29);
    std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)&p_p, (uint64_t)v39, v25, (uint64_t)&std::piecewise_construct, &v39)[6] = v36;
    ++v31;
    unint64_t v28 = *(void **)(v27 + 24);
    v30 += 8;
    v29 += 16;
    if (v31 >= v28[8]) {
      goto LABEL_40;
    }
  }
}

void sub_2244A85A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  MEMORY[0x22A614FA0](v27, 0x10B1C40B6E18916);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::reset[abi:ne180100]<turi::supervised::logistic_regression_opt_interface,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::logistic_regression_opt_interface,void>(&v2, a2);
}

double turi::supervised::logistic_regression::set_coefs(uint64_t a1, long long **a2)
{
  long long v2 = (void *)(a1 + 416);
  uint64_t v4 = *a2;
  uint64_t v3 = (uint64_t)a2[1];
  if (*(void *)(a1 + 424) != v3)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 416), v3, 1);
    uint64_t v3 = *(void *)(a1 + 424);
  }
  uint64_t v7 = (_OWORD *)*v2;
  if (v3 >= 0) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v3 + 1;
  }
  int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v3 >= 2)
  {
    int64_t v10 = 0;
    uint64_t v11 = (_OWORD *)*v2;
    uint64_t v12 = v4;
    do
    {
      long long v13 = *v12++;
      double result = *(double *)&v13;
      *v11++ = v13;
      v10 += 2;
    }
    while (v10 < v9);
  }
  BOOL v14 = __OFSUB__(v3, v9);
  uint64_t v15 = v3 - v9;
  if (!((v15 < 0) ^ v14 | (v15 == 0)))
  {
    uint64_t v16 = v8 >> 1;
    uint64_t v17 = (double *)&v4[v8 >> 1];
    uint64_t v18 = (double *)&v7[v16];
    do
    {
      double v19 = *v17++;
      double result = v19;
      *v18++ = v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

void turi::supervised::logistic_regression::init_options(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v51, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  int v64 = 0;
  char v65 = 1;
  uint64_t v63 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), v51, &__p, (uint64_t)&v63, 0, 1.0e-10, 1.0e20);
  switch(v65)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v2 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      if (*(char *)(v63 + 31) < 0) {
        operator delete(*(void **)(v63 + 8));
      }
      uint64_t v3 = (void *)v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v5 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      uint64_t v6 = *(void **)(v63 + 8);
      if (v6)
      {
        *(void *)(v63 + 16) = v6;
        operator delete(v6);
      }
      uint64_t v3 = (void *)v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      v53[0] = (void *)(v63 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      v53[0] = (void *)(v63 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
LABEL_18:
      uint64_t v3 = (void *)v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v63;
      if (!v63) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v63 + 16));
      uint64_t v3 = (void *)v8;
      unsigned int v9 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      int64_t v10 = (void *)v63;
      if (!v63) {
        goto LABEL_33;
      }
      uint64_t v11 = *(void **)(v63 + 48);
      if (v11)
      {
        *(void *)(v63 + 56) = v11;
        operator delete(v11);
      }
      uint64_t v12 = (void *)v10[3];
      if (v12)
      {
        v10[4] = v12;
        operator delete(v12);
      }
      long long v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v3 = v10;
      unsigned int v9 = 2071181815;
LABEL_31:
      uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      uint64_t v63 = 0;
      int v64 = 0;
      char v65 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(v51, "step_size");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Guess for the initial step size for the solver");
      int v61 = 0;
      char v62 = 1;
      uint64_t v60 = 0x3FF0000000000000;
      turi::option_manager::create_real_option((turi::option_manager *)(a1 + 224), v51, &__p, (uint64_t)&v60, 0, 1.0e-10, 1.0e20);
      switch(v62)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v14 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          if (*(char *)(v60 + 31) < 0) {
            operator delete(*(void **)(v60 + 8));
          }
          uint64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_68;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v17 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          uint64_t v18 = *(void **)(v60 + 8);
          if (v18)
          {
            *(void *)(v60 + 16) = v18;
            operator delete(v18);
          }
          uint64_t v15 = (void *)v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_68;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v19 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          v53[0] = (void *)(v60 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
          goto LABEL_54;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v19 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          v53[0] = (void *)(v60 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
LABEL_54:
          uint64_t v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = v60;
          if (!v60) {
            goto LABEL_69;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v60 + 16));
          uint64_t v15 = (void *)v20;
          unsigned int v21 = -235920773;
          goto LABEL_67;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v22 = (void *)v60;
          if (!v60) {
            goto LABEL_69;
          }
          uint64_t v23 = *(void **)(v60 + 48);
          if (v23)
          {
            *(void *)(v60 + 56) = v23;
            operator delete(v23);
          }
          unint64_t v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = v24;
            operator delete(v24);
          }
          __n128 v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          uint64_t v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_67:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x22A614FA0](v15, v16);
LABEL_69:
          uint64_t v60 = 0;
          int v61 = 0;
          char v62 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v51[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v51[0].__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(v51, "max_iterations");
          std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform during training");
          char v59 = 0;
          int v58 = 0;
          uint64_t v57 = 10;
          turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), v51, &__p, (uint64_t)&v57, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
          switch(v59)
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v26 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              if (*(char *)(v57 + 31) < 0) {
                operator delete(*(void **)(v57 + 8));
              }
              uint64_t v27 = (void *)v26;
              uint64_t v28 = 0x1012C404EF22A49;
              goto LABEL_104;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v29 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              uint64_t v30 = *(void **)(v57 + 8);
              if (v30)
              {
                *(void *)(v57 + 16) = v30;
                operator delete(v30);
              }
              uint64_t v27 = (void *)v29;
              uint64_t v28 = 0x1080C409938AC02;
              goto LABEL_104;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v31 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              v53[0] = (void *)(v57 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
              goto LABEL_90;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v31 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              v53[0] = (void *)(v57 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
LABEL_90:
              uint64_t v27 = (void *)v31;
              uint64_t v28 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v32 = v57;
              if (!v57) {
                goto LABEL_105;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)(v57 + 16));
              uint64_t v27 = (void *)v32;
              unsigned int v33 = -235920773;
              goto LABEL_103;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v57, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v34 = (void *)v57;
              if (!v57) {
                goto LABEL_105;
              }
              uint64_t v35 = *(void **)(v57 + 48);
              if (v35)
              {
                *(void *)(v57 + 56) = v35;
                operator delete(v35);
              }
              uint64_t v36 = (void *)v34[3];
              if (v36)
              {
                v34[4] = v36;
                operator delete(v36);
              }
              uint64_t v37 = (std::__shared_weak_count *)v34[2];
              if (v37) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v37);
              }
              uint64_t v27 = v34;
              unsigned int v33 = 2071181815;
LABEL_103:
              uint64_t v28 = v33 | 0x1030C4000000000;
LABEL_104:
              MEMORY[0x22A614FA0](v27, v28);
LABEL_105:
              uint64_t v57 = 0;
              int v58 = 0;
              char v59 = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v51[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v51[0].__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(v51, "lbfgs_memory_level");
              std::string::basic_string[abi:ne180100]<0>(&__p, "Number of previous iterations to cache for LBFGS");
              char v56 = 0;
              int v55 = 0;
              uint64_t v54 = 11;
              turi::option_manager::create_integer_option((turi::option_manager *)(a1 + 224), v51, &__p, (uint64_t)&v54, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
              switch(v56)
              {
                case 2:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v38 = v54;
                  if (!v54) {
                    goto LABEL_141;
                  }
                  if (*(char *)(v54 + 31) < 0) {
                    operator delete(*(void **)(v54 + 8));
                  }
                  uint64_t v39 = (void *)v38;
                  uint64_t v40 = 0x1012C404EF22A49;
                  goto LABEL_140;
                case 3:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v41 = v54;
                  if (!v54) {
                    goto LABEL_141;
                  }
                  uint64_t v42 = *(void **)(v54 + 8);
                  if (v42)
                  {
                    *(void *)(v54 + 16) = v42;
                    operator delete(v42);
                  }
                  uint64_t v39 = (void *)v41;
                  uint64_t v40 = 0x1080C409938AC02;
                  goto LABEL_140;
                case 4:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v43 = v54;
                  if (!v54) {
                    goto LABEL_141;
                  }
                  v53[0] = (void *)(v54 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
                  goto LABEL_126;
                case 5:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v43 = v54;
                  if (!v54) {
                    goto LABEL_141;
                  }
                  v53[0] = (void *)(v54 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
LABEL_126:
                  uint64_t v39 = (void *)v43;
                  uint64_t v40 = 0x1020C405E66F15BLL;
                  goto LABEL_140;
                case 8:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v44 = v54;
                  if (!v54) {
                    goto LABEL_141;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v54 + 16));
                  uint64_t v39 = (void *)v44;
                  unsigned int v45 = -235920773;
                  goto LABEL_139;
                case 9:
                  if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v46 = (void *)v54;
                  if (!v54) {
                    goto LABEL_141;
                  }
                  unint64_t v47 = *(void **)(v54 + 48);
                  if (v47)
                  {
                    *(void *)(v54 + 56) = v47;
                    operator delete(v47);
                  }
                  double v48 = (void *)v46[3];
                  if (v48)
                  {
                    v46[4] = v48;
                    operator delete(v48);
                  }
                  double v49 = (std::__shared_weak_count *)v46[2];
                  if (v49) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
                  }
                  uint64_t v39 = v46;
                  unsigned int v45 = 2071181815;
LABEL_139:
                  uint64_t v40 = v45 | 0x1030C4000000000;
LABEL_140:
                  MEMORY[0x22A614FA0](v39, v40);
LABEL_141:
                  uint64_t v54 = 0;
                  int v55 = 0;
                  char v56 = 0;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v51[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v51[0].__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
                  std::string::basic_string[abi:ne180100]<0>(v53, "Solver used for training");
                  turi::flexible_type::flexible_type((turi::flexible_type *)&v52, "auto");
                default:
                  goto LABEL_141;
              }
            default:
              goto LABEL_105;
          }
        default:
          goto LABEL_69;
      }
    default:
      goto LABEL_33;
  }
}

void sub_2244AA388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, char a20,uint64_t a21,int a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,char a39,void *a40,int a41,char a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,int a48,char a49)
{
  MEMORY[0x22A614FA0](v49, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v50 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v50 - 136), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v52 = *(void *)(v50 - 136);
        if (v52)
        {
          if (*(char *)(v52 + 31) < 0) {
            operator delete(*(void **)(v52 + 8));
          }
          MEMORY[0x22A614FA0](v52, 0x1012C404EF22A49);
        }
      }
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v50 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      double v53 = *(void **)(v50 - 136);
      if (!v53) {
        goto LABEL_27;
      }
      uint64_t v54 = (void *)v53[1];
      if (v54)
      {
        v53[2] = v54;
        operator delete(v54);
      }
      int v55 = v53;
      uint64_t v56 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v50 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v57 = *(void *)(v50 - 136);
      if (!v57) {
        goto LABEL_27;
      }
      a9 = (void **)(v57 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v50 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v57 = *(void *)(v50 - 136);
      if (!v57) {
        goto LABEL_27;
      }
      a9 = (void **)(v57 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
LABEL_18:
      int v55 = (void *)v57;
      uint64_t v56 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v50 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v58 = *(void *)(v50 - 136);
      if (!v58) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v58 + 16));
      int v55 = (void *)v58;
      unsigned int v59 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v50 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v60 = *(void **)(v50 - 136);
      if (!v60) {
        goto LABEL_27;
      }
      int v55 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v60);
      unsigned int v59 = 2071181815;
LABEL_25:
      uint64_t v56 = v59 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v55, v56);
LABEL_27:
      *(void *)(v50 - 136) = 0;
LABEL_28:
      *(void *)(v50 - 136) = 0;
      *(_DWORD *)(v50 - 128) = 0;
      *(unsigned char *)(v50 - 124) = 0;
      a9 = &a40;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
      if (a17 < 0) {
        operator delete(__p);
      }
      if (a29 < 0) {
        operator delete(a24);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

uint64_t turi::supervised::logistic_regression::train(turi::supervised::logistic_regression *this)
{
  v43[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v36, "simple_mode");
  uint64_t v2 = (unsigned char *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v36);
  uint64_t v3 = 0;
  switch(v2[12])
  {
    case 0:
      uint64_t v3 = *(void *)v2;
      goto LABEL_25;
    case 1:
      uint64_t v3 = (uint64_t)*(double *)v2;
      goto LABEL_25;
    case 2:
      uint64_t v5 = *(void *)v2;
      uint64_t v6 = (char **)(*(void *)v2 + 8);
      __idx[0] = 0;
      uint64_t v7 = (char *)v6;
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v7 = *v6;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v7);
      uint64_t v3 = std::stoll((const std::string *)&__p, __idx, 10);
      if (SBYTE7(v40) < 0) {
        operator delete((void *)__p);
      }
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v8 = *(void *)(v5 + 16);
      }
      else {
        uint64_t v8 = *(unsigned __int8 *)(v5 + 31);
      }
      if (__idx[0] != v8)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v29 = std::string::append(&v38, " cannot be interpreted as an integer");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        *(void *)&long long v40 = *((void *)&v29->__r_.__value_.__l + 2);
        long long __p = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v4 = *(void *)v2;
      *(void *)&long long v40 = 0;
      long long __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_24;
    case 4:
      uint64_t v9 = *(void *)v2;
      *(void *)&long long v40 = 0;
      long long __p = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v9 + 8), *(uint64_t **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      goto LABEL_24;
    case 5:
      uint64_t v10 = *(void *)v2;
      *(void *)&long long v40 = 0;
      long long __p = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      goto LABEL_24;
    case 6:
      uint64_t v3 = (uint64_t)(*(void *)v2 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v11 = *(void *)v2;
      uint64_t v12 = *(void *)(*(void *)v2 + 16);
      *(void *)&long long __p = *(void *)(*(void *)v2 + 8);
      *((void *)&__p + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
      }
      long long v13 = *(_OWORD *)(v11 + 24);
      long long v14 = *(_OWORD *)(v11 + 56);
      long long v41 = *(_OWORD *)(v11 + 40);
      long long v42 = v14;
      long long v40 = v13;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p + 1);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if ((void)v40)
      {
        *((void *)&v40 + 1) = v40;
        operator delete((void *)v40);
      }
      if (*((void *)&__p + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
      }
LABEL_24:
      uint64_t v3 = 0;
LABEL_25:
      *((unsigned char *)this + 392) = v3 != 0;
      if (v37 < 0) {
        operator delete(v36);
      }
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
LABEL_65:
      __break(1u);
      return result;
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "feature_rescaling");
  option_value = (unsigned char *)turi::ml_model_base::get_option_value((uint64_t)this, (const void **)&v36);
  uint64_t v16 = 0;
  switch(option_value[12])
  {
    case 0:
      uint64_t v16 = *(void *)option_value;
      goto LABEL_51;
    case 1:
      uint64_t v16 = (uint64_t)*(double *)option_value;
      goto LABEL_51;
    case 2:
      uint64_t v18 = *(void *)option_value;
      uint64_t v19 = (char **)(*(void *)option_value + 8);
      __idx[0] = 0;
      uint64_t v20 = (char *)v19;
      if (*(char *)(v18 + 31) < 0) {
        uint64_t v20 = *v19;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v20);
      uint64_t v16 = std::stoll((const std::string *)&__p, __idx, 10);
      if (SBYTE7(v40) < 0) {
        operator delete((void *)__p);
      }
      if (*(char *)(v18 + 31) < 0) {
        uint64_t v21 = *(void *)(v18 + 16);
      }
      else {
        uint64_t v21 = *(unsigned __int8 *)(v18 + 31);
      }
      if (__idx[0] != v21)
      {
        uint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v32 = std::string::append(&v38, " cannot be interpreted as an integer");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *(void *)&long long v40 = *((void *)&v32->__r_.__value_.__l + 2);
        long long __p = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v31, (const std::string *)&__p);
        __cxa_throw(v31, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_51;
    case 3:
      uint64_t v17 = *(void *)option_value;
      *(void *)&long long v40 = 0;
      long long __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v17 + 8), *(void *)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_50;
    case 4:
      uint64_t v22 = *(void *)option_value;
      *(void *)&long long v40 = 0;
      long long __p = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(void *)(v22 + 16) - *(void *)(v22 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      goto LABEL_50;
    case 5:
      uint64_t v23 = *(void *)option_value;
      *(void *)&long long v40 = 0;
      long long __p = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(void *)(v23 + 16) - *(void *)(v23 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      goto LABEL_50;
    case 6:
      uint64_t v16 = (uint64_t)(*(void *)option_value << 8) >> 8;
      goto LABEL_51;
    case 7:
      goto LABEL_51;
    case 8:
      uint64_t v24 = *(void *)option_value;
      uint64_t v25 = *(void *)(*(void *)option_value + 16);
      *(void *)&long long __p = *(void *)(*(void *)option_value + 8);
      *((void *)&__p + 1) = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 1u, memory_order_relaxed);
      }
      long long v26 = *(_OWORD *)(v24 + 24);
      long long v27 = *(_OWORD *)(v24 + 56);
      long long v41 = *(_OWORD *)(v24 + 40);
      long long v42 = v27;
      long long v40 = v26;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p + 1);
      goto LABEL_50;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)option_value + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v41 + 1))
      {
        *(void *)&long long v42 = *((void *)&v41 + 1);
        operator delete(*((void **)&v41 + 1));
      }
      if ((void)v40)
      {
        *((void *)&v40 + 1) = v40;
        operator delete((void *)v40);
      }
      if (*((void *)&__p + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
      }
LABEL_50:
      uint64_t v16 = 0;
LABEL_51:
      if (v37 < 0)
      {
        operator delete(v36);
        if (!v16) {
          goto LABEL_56;
        }
      }
      else if (!v16)
      {
LABEL_56:
        turi::supervised::get_class_weights_from_options((uint64_t)this + 224, (uint64_t)this + 376, (uint64_t)v43);
      }
      turi::supervised::logistic_regression_opt_interface::init_feature_rescaling(*((turi::supervised::logistic_regression_opt_interface **)this
                                                                                  + 50));
    default:
      uint64_t result = turi::flexible_type_fail(0);
      goto LABEL_65;
  }
}

void sub_2244ADCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x3B0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a29, (void *)a30);
  turi::optimization::_solver_return::~_solver_return((void **)&STACK[0x540]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a32);
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a73) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a73);
  }
  if (STACK[0x208]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x208]);
  }
  free((void *)STACK[0x218]);
  free((void *)STACK[0x228]);
  free(v73);
  free((void *)STACK[0x250]);
  STACK[0x288] = (unint64_t)&STACK[0x260];
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x288]);
  switch(*(unsigned char *)(v74 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v74 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v76 = *(void *)(v74 - 136);
      if (!v76) {
        goto LABEL_33;
      }
      if (*(char *)(v76 + 31) < 0) {
        operator delete(*(void **)(v76 + 8));
      }
      uint64_t v77 = (void *)v76;
      uint64_t v78 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v74 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v82 = *(void **)(v74 - 136);
      if (!v82) {
        goto LABEL_33;
      }
      uint64_t v83 = (void *)v82[1];
      if (v83)
      {
        v82[2] = v83;
        operator delete(v83);
      }
      uint64_t v77 = v82;
      uint64_t v78 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v74 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v79 = *(void **)(v74 - 136);
      if (!v79) {
        goto LABEL_33;
      }
      STACK[0x288] = (unint64_t)(v79 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x288]);
      goto LABEL_27;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v74 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v79 = *(void **)(v74 - 136);
      if (!v79) {
        goto LABEL_33;
      }
      STACK[0x288] = (unint64_t)(v79 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x288]);
LABEL_27:
      uint64_t v77 = v79;
      uint64_t v78 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v74 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v84 = *(void *)(v74 - 136);
      if (!v84) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v84 + 16));
      uint64_t v77 = (void *)v84;
      unsigned int v81 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v74 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      long long v80 = *(void **)(v74 - 136);
      if (!v80) {
        goto LABEL_33;
      }
      uint64_t v77 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v80);
      unsigned int v81 = 2071181815;
LABEL_31:
      uint64_t v78 = v81 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v77, v78);
LABEL_33:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_33;
  }
}

void turi::supervised::logistic_regression::predict_single_example(void *a1@<X0>, void **a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1[56];
  if (v8 == 2)
  {
    uint64_t v104 = a2;
    uint64_t v105 = a1 + 52;
    if (a1[53])
    {
      uint64_t v9 = a1[52];
      __src[1] = *a2;
      uint64_t v109 = v9;
      float64x2_t v110 = &v104;
      double v10 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)__src);
    }
    else
    {
      double v10 = 0.0;
    }
    long double v43 = exp(-v10);
    long double v44 = log1p(v43);
    double v45 = exp(-v44);
    double v46 = v45;
    switch(*a3)
    {
      case 0:
      case 4:
        turi::supervised::logistic_regression::predict_single_example(Eigen::Matrix<double,-1,1,0,-1,1> const&,turi::supervised::prediction_type_enum const&)::$_0::operator()();
      case 1:
        uint64_t v76 = *(void *)(*(void *)(*(void *)(a1[47] + 24) + 32) + 80) + 16 * (v45 >= 0.5);
        *(void *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 12) = 0;
        if (v76 != a4)
        {
          uint64_t v77 = *(void *)v76;
          *(void *)(a4 + 5) = *(void *)(v76 + 5);
          *(void *)a4 = v77;
          int v78 = *(unsigned __int8 *)(v76 + 12);
          *(unsigned char *)(a4 + 12) = v78;
          switch(v78)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
              break;
            default:
              return;
          }
        }
        return;
      case 2:
        *(unsigned char *)(a4 + 12) = 0;
        *(_DWORD *)(a4 + 8) = 0;
        *(void *)a4 = v45 >= 0.5;
        return;
      case 3:
      case 6:
        *(_DWORD *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 12) = 1;
        *(double *)a4 = v45;
        return;
      case 5:
        *(_DWORD *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 12) = 1;
        *(double *)a4 = v10;
        return;
      case 7:
        double v75 = (double *)operator new(0x10uLL);
        double *v75 = 1.0 - v46;
        v75[1] = v46;
        *(void *)(a4 + 5) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 12) = 3;
        operator new();
      default:
        goto LABEL_96;
    }
  }
  unint64_t v11 = a1[57];
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v12 = (long long *)a1[52];
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v104, a1[53], a1[53], 1);
  long long v13 = (char *)v104;
  uint64_t v14 = (void)v105 * v106;
  if ((uint64_t)v105 * v106 >= 0) {
    uint64_t v15 = (void)v105 * v106;
  }
  else {
    uint64_t v15 = v14 + 1;
  }
  int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v14 >= 2)
  {
    int64_t v17 = 0;
    uint64_t v18 = v104;
    uint64_t v19 = v12;
    do
    {
      long long v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  unint64_t v21 = v8 - 1;
  BOOL v22 = v14 <= v16;
  uint64_t v23 = v14 - v16;
  if (!v22)
  {
    uint64_t v24 = v15 >> 1;
    uint64_t v25 = (uint64_t *)&v12[v15 >> 1];
    long long v26 = &v13[16 * v24];
    do
    {
      uint64_t v27 = *v25++;
      *(void *)long long v26 = v27;
      v26 += 8;
      --v23;
    }
    while (v23);
  }
  uint64_t v28 = a1[56];
  uint64_t v29 = v28 - 1;
  uint64_t v30 = v11 / v21;
  if (v21 <= v11 && v28 != 1 && 0x7FFFFFFFFFFFFFFFLL / v29 < v30)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v93 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v93, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v104, v29 * v30, v30, v29);
  long long v102 = 0;
  uint64_t v103 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v102, v106, 1);
  uint64_t v31 = v106;
  if (v103 != v106)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v102, v106, 1);
    uint64_t v31 = v103;
  }
  uint64_t v32 = (char *)v102;
  if (v31 >= 0) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = v31 + 1;
  }
  int64_t v34 = v33 & 0xFFFFFFFFFFFFFFFELL;
  if (v31 >= 2)
  {
    unint64_t v35 = 2;
    if (v34 > 2) {
      unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(v102, ((8 * v35 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v34 < v31) {
    bzero(&v32[16 * (v33 >> 1)], 8 * v31 - 16 * (v33 >> 1));
  }
  *(void *)&long long v96 = 0x3FF0000000000000;
  __src[0] = &v104;
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>((uint64_t **)__src, (unint64_t *)a2, (uint64_t *)&v102, (double *)&v96);
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v100, v103, 1);
  char v37 = (double *)v102;
  uint64_t v36 = v103;
  if (v101 != v103)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v100, v103, 1);
    uint64_t v36 = v101;
  }
  std::string v38 = v100;
  if (v36 >= 1)
  {
    uint64_t v39 = (long double *)v100;
    uint64_t v40 = v36;
    do
    {
      long double v41 = *v37++;
      *v39++ = exp(v41);
      --v40;
    }
    while (v40);
  }
  if (v36)
  {
    __src[0] = v38;
    uint64_t v108 = &v100;
    double v42 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
  }
  else
  {
    double v42 = 0.0;
  }
  uint64_t v47 = v101;
  long long v98 = 0;
  uint64_t v99 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v98, v101, 1);
  double v48 = (float64x2_t *)v100;
  if (v99 != v47)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v98, v47, 1);
    uint64_t v47 = v99;
  }
  double v49 = v42 + 1.0;
  uint64_t v50 = (char *)v98;
  if (v47 >= 0) {
    uint64_t v51 = v47;
  }
  else {
    uint64_t v51 = v47 + 1;
  }
  int64_t v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
  if (v47 >= 2)
  {
    int64_t v53 = 0;
    float64x2_t v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49, 0);
    int v55 = (float64x2_t *)v98;
    uint64_t v56 = v48;
    do
    {
      float64x2_t v57 = *v56++;
      *v55++ = vdivq_f64(v57, v54);
      v53 += 2;
    }
    while (v53 < v52);
  }
  BOOL v58 = __OFSUB__(v47, v52);
  uint64_t v59 = v47 - v52;
  if (!((v59 < 0) ^ v58 | (v59 == 0)))
  {
    uint64_t v60 = v51 >> 1;
    f64 = v48[v51 >> 1].f64;
    char v62 = (double *)&v50[16 * v60];
    do
    {
      double v63 = *f64++;
      *v62++ = v63 / v49;
      --v59;
    }
    while (v59);
  }
  switch(*a3)
  {
    case 0:
      turi::supervised::logistic_regression::predict_single_example(Eigen::Matrix<double,-1,1,0,-1,1> const&,turi::supervised::prediction_type_enum const&)::$_1::operator()();
    case 1:
    case 2:
      uint64_t v64 = a1[56];
      uint64_t v65 = v64 - 1;
      if (v64 == 1)
      {
        uint64_t v67 = 0;
      }
      else
      {
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        double v68 = 0.0;
        do
        {
          double v69 = *((double *)v102 + v66);
          if (v68 < v69) {
            uint64_t v67 = v66 + 1;
          }
          uint64_t v70 = v66 + 1;
          if (v68 < v69) {
            double v68 = *((double *)v102 + v66);
          }
          ++v66;
        }
        while (v65 != v70);
      }
      if (*a3 == 2)
      {
        char v79 = 0;
        *(unsigned char *)(a4 + 12) = 0;
        *(_DWORD *)(a4 + 8) = 0;
        *(void *)a4 = v67;
      }
      else
      {
        uint64_t v82 = *(void *)(*(void *)(*(void *)(a1[47] + 24) + 32) + 80) + 16 * v67;
        *(void *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 12) = 0;
        if (v82 == a4)
        {
LABEL_93:
          char v79 = 0;
        }
        else
        {
          char v79 = 0;
          uint64_t v83 = *(void *)v82;
          *(void *)(a4 + 5) = *(void *)(v82 + 5);
          *(void *)a4 = v83;
          int v84 = *(unsigned __int8 *)(v82 + 12);
          *(unsigned char *)(a4 + 12) = v84;
          switch(v84)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              char v79 = 0;
              atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
              break;
            default:
              break;
          }
        }
      }
LABEL_94:
      free(v98);
      free(v100);
      free(v102);
      free(v104);
      if (v79) {
LABEL_96:
      }
        turi::supervised::logistic_regression::predict_single_example(Eigen::Matrix<double,-1,1,0,-1,1> const&,turi::supervised::prediction_type_enum const&)::$_2::operator()();
      return;
    case 3:
    case 7:
      uint64_t v71 = (char *)v98 + 8 * a1[56] - 8;
      uint64_t v97 = 0;
      long long v96 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v96, v98, (uint64_t)v71, (v71 - (unsigned char *)v98) >> 3);
      uint64_t v72 = (char *)v96;
      if (v99)
      {
        __src[0] = v98;
        uint64_t v108 = &v98;
        double v73 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
      }
      else
      {
        double v73 = 0.0;
      }
      double v95 = 1.0 - v73;
      std::vector<double>::insert((uint64_t)&v96, v72, &v95);
      char v86 = (double *)*((void *)&v96 + 1);
      for (uint64_t i = (double *)v96; i != v86; ++i)
      {
        double v87 = 0.0;
        if (*i >= 0.0)
        {
          double v87 = 1.0;
          if (*i <= 1.0) {
            continue;
          }
        }
        *uint64_t i = v87;
      }
      *(void *)(a4 + 5) = 0;
      *(void *)a4 = 0;
      *(unsigned char *)(a4 + 12) = 3;
      operator new();
    case 4:
      long long v80 = v98;
      if (v99)
      {
        __src[0] = v98;
        uint64_t v108 = &v98;
        double v81 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
        long long v80 = v98;
      }
      else
      {
        double v81 = 0.0;
      }
      double v88 = 1.0 - v81;
      *(double *)&long long v96 = 1.0 - v81;
      __src[0] = v80;
      uint64_t v108 = &v98;
      Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
      double v95 = v89;
      uint64_t v90 = (double *)&v96;
      if (v88 < v89) {
        uint64_t v90 = &v95;
      }
      __src[0] = 0;
      if (*v90 < 0.0) {
        uint64_t v90 = (double *)__src;
      }
      uint64_t v94 = 0x3FF0000000000000;
      if (*v90 <= 1.0) {
        uint64_t v91 = (uint64_t *)v90;
      }
      else {
        uint64_t v91 = &v94;
      }
      turi::flexible_type::flexible_type<double>(a4, v91);
      goto LABEL_93;
    case 5:
    case 6:
      uint64_t v74 = (char *)v102 + 8 * a1[56] - 8;
      __src[1] = 0;
      uint64_t v108 = 0;
      __src[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__src, v102, (uint64_t)v74, (v74 - (unsigned char *)v102) >> 3);
      *(void *)&long long v96 = 0;
      std::vector<double>::insert((uint64_t)__src, (char *)__src[0], (double *)&v96);
      *(void *)(a4 + 5) = 0;
      *(void *)a4 = 0;
      *(unsigned char *)(a4 + 12) = 3;
      operator new();
    default:
      char v79 = 1;
      goto LABEL_94;
  }
}

void sub_2244AFAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,atomic_ullong *volatile a23,uint64_t a24)
{
  MEMORY[0x22A614FA0](v26, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v24 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v28 = *v24;
      if (!*v24) {
        goto LABEL_27;
      }
      if (*((char *)v28 + 31) < 0) {
        operator delete((void *)v28[1]);
      }
      uint64_t v29 = v28;
      uint64_t v30 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v33 = *v24;
      if (!*v24) {
        goto LABEL_27;
      }
      int64_t v34 = (void *)v33[1];
      if (v34)
      {
        v33[2] = (atomic_ullong)v34;
        operator delete(v34);
      }
      uint64_t v29 = v33;
      uint64_t v30 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v31 = *v24;
      if (!*v24) {
        goto LABEL_27;
      }
      a23 = v31 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v31 = *v24;
      if (!*v24) {
        goto LABEL_27;
      }
      a23 = v31 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
LABEL_21:
      uint64_t v29 = v31;
      uint64_t v30 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v35 = *v24;
      if (!*v24) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v35 + 2);
      uint64_t v29 = v35;
      unsigned int v32 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v24, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v24) {
        goto LABEL_27;
      }
      uint64_t v29 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v24);
      unsigned int v32 = 2071181815;
LABEL_25:
      uint64_t v30 = v32 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v29, v30);
LABEL_27:
      *uint64_t v24 = 0;
LABEL_28:
      *uint64_t v24 = 0;
      *((_DWORD *)v24 + 2) = 0;
      *((unsigned char *)v24 + 12) = 0;
      operator delete(v25);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

char *std::vector<double>::insert(uint64_t a1, char *__src, double *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    long long __p = v19;
    BOOL v22 = &v19[8 * v16];
    uint64_t v23 = v22;
    uint64_t v24 = &v19[8 * v18];
    std::__split_buffer<double>::push_back(&__p, a3);
    uint64_t v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(double *)__src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    double v10 = __src + 8;
    unint64_t v11 = v6 - 8;
    uint64_t v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)uint64_t v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(double *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_2244B04AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::logistic_regression::predict_single_example(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1[56];
  if (v8 == 2)
  {
    uint64_t v9 = a2[3];
    if (v9 < 1)
    {
      double v12 = 0.0;
    }
    else
    {
      double v10 = (double *)a2[1];
      unint64_t v11 = (int *)a2[2];
      double v12 = 0.0;
      do
      {
        double v13 = *v10++;
        double v14 = v13;
        uint64_t v15 = *v11++;
        double v12 = v12 + v14 * *(double *)(a1[52] + 8 * v15);
        --v9;
      }
      while (v9);
    }
    long double v48 = exp(-v12);
    long double v49 = log1p(v48);
    double v50 = exp(-v49);
    double v51 = v50;
    switch(*a3)
    {
      case 0:
      case 4:
        turi::supervised::logistic_regression::predict_single_example(Eigen::SparseVector<double,0,int> const&,turi::supervised::prediction_type_enum const&)::$_0::operator()();
      case 1:
        uint64_t v81 = *(void *)(*(void *)(*(void *)(a1[47] + 24) + 32) + 80) + 16 * (v50 >= 0.5);
        *(void *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 12) = 0;
        if (v81 != a4)
        {
          uint64_t v82 = *(void *)v81;
          *(void *)(a4 + 5) = *(void *)(v81 + 5);
          *(void *)a4 = v82;
          int v83 = *(unsigned __int8 *)(v81 + 12);
          *(unsigned char *)(a4 + 12) = v83;
          switch(v83)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
              break;
            default:
              return;
          }
        }
        return;
      case 2:
        *(unsigned char *)(a4 + 12) = 0;
        *(_DWORD *)(a4 + 8) = 0;
        *(void *)a4 = v50 >= 0.5;
        return;
      case 3:
      case 6:
        *(_DWORD *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 12) = 1;
        *(double *)a4 = v50;
        return;
      case 5:
        *(_DWORD *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 12) = 1;
        *(double *)a4 = v12;
        return;
      case 7:
        long long v80 = (double *)operator new(0x10uLL);
        double *v80 = 1.0 - v51;
        v80[1] = v51;
        *(void *)(a4 + 5) = 0;
        *(void *)a4 = 0;
        *(unsigned char *)(a4 + 12) = 3;
        operator new();
      default:
        goto LABEL_88;
    }
  }
  unint64_t v16 = a1[57];
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v17 = (long long *)a1[52];
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v104, a1[53], a1[53], 1);
  unint64_t v18 = (char *)v104;
  uint64_t v19 = v105 * v106;
  if (v105 * v106 >= 0) {
    uint64_t v20 = v105 * v106;
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  int64_t v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
  if (v19 >= 2)
  {
    int64_t v22 = 0;
    uint64_t v23 = v104;
    uint64_t v24 = v17;
    do
    {
      long long v25 = *v24++;
      *v23++ = v25;
      v22 += 2;
    }
    while (v22 < v21);
  }
  unint64_t v26 = v8 - 1;
  BOOL v27 = v19 <= v21;
  uint64_t v28 = v19 - v21;
  if (!v27)
  {
    uint64_t v29 = v20 >> 1;
    uint64_t v30 = (uint64_t *)&v17[v20 >> 1];
    atomic_ullong *volatile v31 = &v18[16 * v29];
    do
    {
      uint64_t v32 = *v30++;
      *(void *)atomic_ullong *volatile v31 = v32;
      v31 += 8;
      --v28;
    }
    while (v28);
  }
  uint64_t v33 = a1[56];
  uint64_t v34 = v33 - 1;
  uint64_t v35 = v16 / v26;
  if (v26 <= v16 && v33 != 1 && 0x7FFFFFFFFFFFFFFFLL / v34 < v35)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v94 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v94, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v104, v34 * v35, v35, v34);
  long long v102 = 0;
  uint64_t v103 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v102, v106, 1);
  uint64_t v36 = v106;
  if (v103 != v106)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v102, v106, 1);
    uint64_t v36 = v103;
  }
  char v37 = (char *)v102;
  if (v36 >= 0) {
    uint64_t v38 = v36;
  }
  else {
    uint64_t v38 = v36 + 1;
  }
  int64_t v39 = v38 & 0xFFFFFFFFFFFFFFFELL;
  if (v36 >= 2)
  {
    unint64_t v40 = 2;
    if (v39 > 2) {
      unint64_t v40 = v38 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(v102, ((8 * v40 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v39 < v36) {
    bzero(&v37[16 * (v38 >> 1)], 8 * v36 - 16 * (v38 >> 1));
  }
  long long v98 = (void *)0x3FF0000000000000;
  *(void *)&long long v96 = &v102;
  __src[0] = 0;
  __src[1] = a2;
  uint64_t v100 = &v104;
  Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run((uint64_t)__src, (uint64_t)&v100, (uint64_t **)&v96, (double *)&v98);
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v100, v103, 1);
  double v42 = (double *)v102;
  uint64_t v41 = v103;
  if (v101 != v103)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v100, v103, 1);
    uint64_t v41 = v101;
  }
  long double v43 = v100;
  if (v41 >= 1)
  {
    long double v44 = (long double *)v100;
    uint64_t v45 = v41;
    do
    {
      long double v46 = *v42++;
      *v44++ = exp(v46);
      --v45;
    }
    while (v45);
  }
  if (v41)
  {
    __src[0] = v43;
    uint64_t v108 = &v100;
    double v47 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
  }
  else
  {
    double v47 = 0.0;
  }
  uint64_t v52 = v101;
  long long v98 = 0;
  uint64_t v99 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v98, v101, 1);
  int64_t v53 = (float64x2_t *)v100;
  if (v99 != v52)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v98, v52, 1);
    uint64_t v52 = v99;
  }
  double v54 = v47 + 1.0;
  int v55 = (char *)v98;
  if (v52 >= 0) {
    uint64_t v56 = v52;
  }
  else {
    uint64_t v56 = v52 + 1;
  }
  int64_t v57 = v56 & 0xFFFFFFFFFFFFFFFELL;
  if (v52 >= 2)
  {
    int64_t v58 = 0;
    float64x2_t v59 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v54, 0);
    uint64_t v60 = (float64x2_t *)v98;
    int v61 = v53;
    do
    {
      float64x2_t v62 = *v61++;
      *v60++ = vdivq_f64(v62, v59);
      v58 += 2;
    }
    while (v58 < v57);
  }
  BOOL v63 = __OFSUB__(v52, v57);
  uint64_t v64 = v52 - v57;
  if (!((v64 < 0) ^ v63 | (v64 == 0)))
  {
    uint64_t v65 = v56 >> 1;
    f64 = v53[v56 >> 1].f64;
    uint64_t v67 = (double *)&v55[16 * v65];
    do
    {
      double v68 = *f64++;
      *v67++ = v68 / v54;
      --v64;
    }
    while (v64);
  }
  switch(*a3)
  {
    case 0:
      turi::supervised::logistic_regression::predict_single_example(Eigen::SparseVector<double,0,int> const&,turi::supervised::prediction_type_enum const&)::$_1::operator()();
    case 1:
    case 2:
      uint64_t v69 = a1[56];
      uint64_t v70 = v69 - 1;
      if (v69 == 1)
      {
        uint64_t v72 = 0;
      }
      else
      {
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        double v73 = 0.0;
        do
        {
          double v74 = *((double *)v102 + v71);
          if (v73 < v74) {
            uint64_t v72 = v71 + 1;
          }
          uint64_t v75 = v71 + 1;
          if (v73 < v74) {
            double v73 = *((double *)v102 + v71);
          }
          ++v71;
        }
        while (v70 != v75);
      }
      if (*a3 == 2)
      {
        char v84 = 0;
        *(unsigned char *)(a4 + 12) = 0;
        *(_DWORD *)(a4 + 8) = 0;
        *(void *)a4 = v72;
      }
      else
      {
        uint64_t v87 = *(void *)(*(void *)(*(void *)(a1[47] + 24) + 32) + 80) + 16 * v72;
        *(void *)a4 = 0;
        *(_DWORD *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 12) = 0;
        if (v87 == a4)
        {
LABEL_85:
          char v84 = 0;
        }
        else
        {
          char v84 = 0;
          uint64_t v88 = *(void *)v87;
          *(void *)(a4 + 5) = *(void *)(v87 + 5);
          *(void *)a4 = v88;
          int v89 = *(unsigned __int8 *)(v87 + 12);
          *(unsigned char *)(a4 + 12) = v89;
          switch(v89)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              char v84 = 0;
              atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
              break;
            default:
              break;
          }
        }
      }
LABEL_86:
      free(v98);
      free(v100);
      free(v102);
      free(v104);
      if (v84) {
LABEL_88:
      }
        turi::supervised::logistic_regression::predict_single_example(Eigen::SparseVector<double,0,int> const&,turi::supervised::prediction_type_enum const&)::$_2::operator()();
      return;
    case 3:
    case 7:
      uint64_t v76 = (char *)v98 + 8 * a1[56] - 8;
      uint64_t v97 = 0;
      long long v96 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v96, v98, (uint64_t)v76, (v76 - (unsigned char *)v98) >> 3);
      uint64_t v77 = (char *)v96;
      if (v99)
      {
        __src[0] = v98;
        uint64_t v108 = &v98;
        double v78 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
      }
      else
      {
        double v78 = 0.0;
      }
      double v95 = 1.0 - v78;
      std::vector<double>::insert((uint64_t)&v96, v77, &v95);
      *(void *)(a4 + 5) = 0;
      *(void *)a4 = 0;
      *(unsigned char *)(a4 + 12) = 3;
      operator new();
    case 4:
      unsigned __int8 v85 = v98;
      if (v99)
      {
        __src[0] = v98;
        uint64_t v108 = &v98;
        double v86 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
        unsigned __int8 v85 = v98;
      }
      else
      {
        double v86 = 0.0;
      }
      double v90 = 1.0 - v86;
      *(double *)&long long v96 = 1.0 - v86;
      __src[0] = v85;
      uint64_t v108 = &v98;
      Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)__src);
      double v95 = v91;
      if (v90 >= v91) {
        char v92 = (double *)&v96;
      }
      else {
        char v92 = &v95;
      }
      turi::flexible_type::flexible_type<double>(a4, v92);
      goto LABEL_85;
    case 5:
    case 6:
      char v79 = (char *)v102 + 8 * a1[56] - 8;
      __src[1] = 0;
      uint64_t v108 = 0;
      __src[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__src, v102, (uint64_t)v79, (v79 - (unsigned char *)v102) >> 3);
      *(void *)&long long v96 = 0;
      std::vector<double>::insert((uint64_t)__src, (char *)__src[0], (double *)&v96);
      *(void *)(a4 + 5) = 0;
      *(void *)a4 = 0;
      *(unsigned char *)(a4 + 12) = 3;
      operator new();
    default:
      char v84 = 1;
      goto LABEL_86;
  }
}

void sub_2244B1654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,atomic_ullong *volatile a25,uint64_t a26)
{
  MEMORY[0x22A614FA0](v28, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v26 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v30 = *v26;
      if (!*v26) {
        goto LABEL_27;
      }
      if (*((char *)v30 + 31) < 0) {
        operator delete((void *)v30[1]);
      }
      atomic_ullong *volatile v31 = v30;
      uint64_t v32 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v35 = *v26;
      if (!*v26) {
        goto LABEL_27;
      }
      uint64_t v36 = (void *)v35[1];
      if (v36)
      {
        uint64_t v35[2] = (atomic_ullong)v36;
        operator delete(v36);
      }
      atomic_ullong *volatile v31 = v35;
      uint64_t v32 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v33 = *v26;
      if (!*v26) {
        goto LABEL_27;
      }
      a25 = v33 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v33 = *v26;
      if (!*v26) {
        goto LABEL_27;
      }
      a25 = v33 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
LABEL_21:
      atomic_ullong *volatile v31 = v33;
      uint64_t v32 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v37 = *v26;
      if (!*v26) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v37 + 2);
      atomic_ullong *volatile v31 = v37;
      unsigned int v34 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v26) {
        goto LABEL_27;
      }
      atomic_ullong *volatile v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v26);
      unsigned int v34 = 2071181815;
LABEL_25:
      uint64_t v32 = v34 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v31, v32);
LABEL_27:
      *unint64_t v26 = 0;
LABEL_28:
      *unint64_t v26 = 0;
      *((_DWORD *)v26 + 2) = 0;
      *((unsigned char *)v26 + 12) = 0;
      operator delete(v27);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void turi::supervised::logistic_regression::fast_predict_topk(turi::supervised::supervised_learning_model_base *a1, uint64_t a2, uint64_t a3, std::string::value_type *a4, unint64_t a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  uint64_t v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)&__p);
  unint64_t __sz = turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v8);
  if (SHIBYTE(v43) < 0) {
    operator delete(__p);
  }
  char v41 = turi::supervised::prediction_type_enum_from_name(a4);
  ((void (*)(turi::supervised::supervised_learning_model_base *, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  uint64_t v9 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)&__p);
  unint64_t v26 = turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v9);
  if (SHIBYTE(v43) < 0) {
    operator delete(__p);
  }
  if (__sz < a5)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v43 + 1, (uint64_t)"The training data contained ", 28);
    int64_t v22 = (void *)std::ostream::operator<<();
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" classes.", 9);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" The parameter 'k' must be less than or equal to the number of ", 63);
    long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"classes in the training data.", 29);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v25);
    p_p = &__p;
    turi::supervised::logistic_regression::fast_predict_topk(std::vector<turi::flexible_type> const&,std::string const&,std::string const&,unsigned long)::$_0::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "id");
  std::string::basic_string[abi:ne180100]<0>(&v44, "class");
  if (a4[23] < 0) {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else {
    std::string v46 = *(std::string *)a4;
  }
  uint64_t v38 = 0;
  int64_t v39 = 0;
  unint64_t v40 = 0;
  p_p = (void **)&v38;
  LOBYTE(v49) = 0;
  uint64_t v38 = (std::string *)operator new(0x48uLL);
  int64_t v39 = v38;
  unint64_t v40 = v38 + 3;
  uint64_t v10 = 0;
  int64_t v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (long long *)&__p, v47, v38);
  unint64_t v27 = v26 / (__sz - 1);
  do
  {
    if (SHIBYTE(v46.__r_.__value_.__r.__words[v10 + 2]) < 0) {
      operator delete(*(void **)((char *)&v46.__r_.__value_.__l.__data_ + v10 * 8));
    }
    v10 -= 3;
  }
  while (v10 != -9);
  __int16 v11 = *(unsigned __int8 *)(*(void *)(*((void *)a1 + 47) + 24) + 28);
  double v12 = operator new(2uLL);
  *double v12 = v11 << 8;
  uint64_t v36 = v12 + 1;
  atomic_ullong *volatile v37 = v12 + 1;
  atomic_ullong *volatile v35 = v12;
  int v13 = a4[23];
  if (v13 < 0)
  {
    if (*((void *)a4 + 1) != 4) {
      goto LABEL_19;
    }
    a4 = *(std::string::value_type **)a4;
  }
  else if (v13 != 4)
  {
    goto LABEL_19;
  }
  if (*(_DWORD *)a4 == 1802396018)
  {
    double v14 = operator new(4uLL);
    char v15 = 0;
LABEL_20:
    void v14[2] = v15;
    *(_WORD *)double v14 = *v12;
    unint64_t v16 = v14 + 3;
    atomic_ullong *volatile v35 = v14;
    atomic_ullong *volatile v37 = v14 + 4;
    operator delete(v12);
    uint64_t v36 = v16;
    turi::gl_sframe_writer::gl_sframe_writer(&v34, &v38, &v35, 1);
    uint64_t v17 = *(unsigned char **)a2;
    if (*(void *)a2 != *(void *)(a2 + 8))
    {
      uint64_t v31 = (uint64_t)a1 + 376;
      memset(&v33, 0, sizeof(v33));
      std::vector<std::pair<unsigned long,char const*>>::resize(&v33, __sz);
      memset(v32, 0, sizeof(v32));
      std::vector<turi::flexible_type>::resize(v32, 3uLL);
      if (v17[12] == 5)
      {
        unint64_t v18 = *(void *)(*((void *)a1 + 47) + 64);
        if (v18 > 3 * turi::supervised::supervised_learning_model_base::num_features(a1))
        {
          LOBYTE(__p) = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          uint64_t v45 = (void *)(v26 / (__sz - 1));
          turi::ml_data_row_reference::from_row(v31, (void *)(*(void *)v17 + 8));
        }
        p_p = 0;
        unint64_t v49 = 0;
        if (__sz - 1 <= v26)
        {
          if (v27 >> 61 || (uint64_t v19 = (void **)malloc_type_malloc(8 * v27, 0x1E76AA36uLL)) == 0)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            int64_t v21 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v21, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
          }
          p_p = v19;
        }
        unint64_t v49 = v26 / (__sz - 1);
        turi::ml_data_row_reference::from_row(v31, (void *)(*(void *)v17 + 8));
      }
      turi::supervised::logistic_regression::fast_predict_topk(std::vector<turi::flexible_type> const&,std::string const&,std::string const&,unsigned long)::$_1::operator()();
    }
    turi::gl_sframe_writer::close(&v34);
  }
LABEL_19:
  double v14 = operator new(4uLL);
  char v15 = 1;
  goto LABEL_20;
}

void sub_2244B3CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
}

uint64_t turi::supervised::prediction_type_enum_from_name(void *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "na");
    char v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    char v7 = 0;
    std::string::basic_string[abi:ne180100]<0>(v8, "class");
    char v9 = 1;
    std::string::basic_string[abi:ne180100]<0>(v10, "class_index");
    char v11 = 2;
    std::string::basic_string[abi:ne180100]<0>(v12, "probability");
    char v13 = 3;
    std::string::basic_string[abi:ne180100]<0>(v14, "max_probability");
    char v15 = 4;
    std::string::basic_string[abi:ne180100]<0>(v16, "margin");
    char v17 = 5;
    std::string::basic_string[abi:ne180100]<0>(v18, "rank");
    char v19 = 6;
    std::string::basic_string[abi:ne180100]<0>(v20, "probability_vector");
    char v21 = 7;
    std::map<std::string,turi::supervised::prediction_type_enum>::map[abi:ne180100]((uint64_t)&turi::supervised::prediction_type_enum_from_name(std::string const&)::type_map, v4, 9);
    uint64_t v3 = 36;
    do
    {
      if (*((char *)&v4[v3 - 1] - 1) < 0) {
        operator delete((void *)v4[v3 - 4]);
      }
      v3 -= 4;
    }
    while (v3 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::supervised::prediction_type_enum>::~map[abi:ne180100], &turi::supervised::prediction_type_enum_from_name(std::string const&)::type_map, &dword_223D44000);
  }
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::supervised::prediction_type_enum_from_name(std::string const&)::type_map, (const void **)a1))
  {
    v4[0] = a1;
    turi::supervised::prediction_type_enum_from_name(std::string const&)::{lambda(void)#1}::operator()();
  }
  return *(char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::supervised::prediction_type_enum_from_name(std::string const&)::type_map, (const void **)a1);
}

void sub_2244B45AC(_Unwind_Exception *a1)
{
  uint64_t v3 = 288;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0) {
      operator delete(*(void **)(v1 + v3 - 32));
    }
    v3 -= 32;
    if (!v3)
    {
      _Unwind_Resume(a1);
    }
  }
}

void turi::supervised::logistic_regression::save_impl(turi::supervised::logistic_regression *this, turi::oarchive *a2)
{
}

void turi::supervised::logistic_regression::load_version(turi::supervised::logistic_regression *this, turi::iarchive *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  assert_msg(a3 < 7, (uint64_t)"This model version cannot be loaded. Please re-save your state.", a3, a4, a5, a6, a7, a8, v14);
  if (a3 <= 5) {
    turi::supervised::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  }
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v16[0] = &__p;
  char v11 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v16);
  *((void *)this + 56) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v11 + 14);
  if (v20 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  v16[0] = &__p;
  double v12 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v16);
  *((void *)this + 57) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v12 + 14);
  if (v20 < 0) {
    operator delete(__p);
  }
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (void *)this + 47);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,1,0,-1,1>((uint64_t)a2, (void **)this + 52);
  turi::option_manager::load((turi::supervised::logistic_regression *)((char *)this + 224), a2);
  memset(v16, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v16, &turi::FLEX_UNDEFINED);
  *(void **)&v19[5] = *(void **)((char *)v16 + 5);
  *(void **)char v19 = v16[0];
  v19[12] = BYTE4(v16[1]);
  LODWORD(__p) = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "progress");
  char v15 = v16;
  char v13 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)v16, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v13 + 14, (unsigned int *)&__p);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
}

void sub_2244B489C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t turi::supervised::logistic_regression::get_version(turi::supervised::logistic_regression *this)
{
  return 6;
}

void turi::supervised::logistic_regression::export_to_coreml(turi::supervised::logistic_regression *this)
{
  v2[15] = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)(*(uint64_t (**)(turi::supervised::logistic_regression *))(*(void *)this + 16))(this);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v2, "class", &v1);
}

void sub_2244B4A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, void *a18, uint64_t a19, char a20)
{
}

const char *turi::supervised::logistic_regression::name(turi::supervised::logistic_regression *this)
{
  return "classifier_logistic_regression";
}

void *turi::supervised::logistic_regression::uid(turi::supervised::logistic_regression *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised::logistic_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised::logistic_regression::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised::logistic_regression::uid(void)::_uid;
}

void sub_2244B4B80(_Unwind_Exception *a1)
{
}

uint64_t std::map<std::string,turi::supervised::prediction_type_enum>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,turi::supervised::prediction_type_enum>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2244B4C2C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::logistic_regression_opt_interface,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2244B4CAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::supervised::linear_regression_opt_interface>::shared_ptr[abi:ne180100]<turi::supervised::linear_regression_opt_interface,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::logistic_regression_opt_interface *,std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::__shared_ptr_default_delete<turi::supervised::logistic_regression_opt_interface,turi::supervised::logistic_regression_opt_interface>,std::allocator<turi::supervised::logistic_regression_opt_interface>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::logistic_regression_opt_interface *,std::shared_ptr<turi::supervised::logistic_regression_opt_interface>::__shared_ptr_default_delete<turi::supervised::logistic_regression_opt_interface,turi::supervised::logistic_regression_opt_interface>,std::allocator<turi::supervised::logistic_regression_opt_interface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t **a1, unint64_t *a2, uint64_t *a3, double *a4)
{
  void v21[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = a2[1];
  if (v4 >> 61) {
    goto LABEL_14;
  }
  char v7 = *a1;
  double v8 = *a4;
  unint64_t v9 = *a2;
  if (*a2)
  {
    unint64_t v10 = *a2;
    goto LABEL_8;
  }
  size_t v11 = 8 * v4;
  if (v4 <= 0x4000)
  {
    double v12 = (char *)&v20[-1] - ((MEMORY[0x270FA5388](v11, v11 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v12, v13);
    unint64_t v9 = 0;
    unint64_t v10 = (unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  unint64_t v10 = (unint64_t)malloc_type_malloc(v11, 0x1E76AA36uLL);
  if (!v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v9 = *a2;
  unint64_t v4 = a2[1];
LABEL_8:
  if (v9) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (void *)v10;
  }
  uint64_t v15 = v7[1];
  uint64_t v16 = v7[2];
  v21[0] = *v7;
  v21[1] = v15;
  v20[0] = v10;
  v20[1] = 1;
  Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(v16, v15, v21, v20, *a3, 1, v8);
  if (8 * v4 > 0x20000) {
    free(v14);
  }
}

void Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run(uint64_t a1, uint64_t a2, uint64_t **a3, double *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(uint64_t *)(*(void *)a2 + 16) >= 1)
  {
    uint64_t v7 = 0;
    do
      Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow((uint64_t)v8, a2, a3, a4, 0, v7++);
    while (v7 < *(void *)(*(void *)a2 + 16));
  }
}

double Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow(uint64_t a1, uint64_t a2, uint64_t **a3, double *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = v6[3];
  if (v7 < 1)
  {
    double v10 = 0.0;
  }
  else
  {
    double v8 = (double *)v6[1];
    uint64_t v9 = (int *)v6[2];
    double v10 = 0.0;
    do
    {
      double v11 = *v8++;
      double v12 = v11;
      uint64_t v13 = *v9++;
      double v10 = v10 + v12 * *(double *)(**(void **)a2 + 8 * (*(void *)(*(void *)a2 + 8) * a6 + v13));
      --v7;
    }
    while (v7);
  }
  uint64_t v14 = **a3;
  double result = *(double *)(v14 + 8 * a6) + *a4 * v10;
  *(double *)(v14 + 8 * a6) = result;
  return result;
}

double std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(double *a1, double *a2, double *a3, uint64_t a4, double result)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      unint64_t v9 = ((char *)v6 - (char *)a1) >> 4;
      if (v9 < 2) {
        break;
      }
      if (v9 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>((uint64_t *)a1, (uint64_t *)a1 + 2, (uint64_t *)v6 - 2, a4);
        return result;
      }
      if (v9 == 2)
      {
        double result = *(double *)((char *)v6 + *(void *)(a4 + 8) - 16);
        if (result > *(double *)((char *)a1 + *(void *)(a4 + 24)))
        {
          uint64_t v40 = *(void *)a1;
          *a1 = *(v6 - 2);
          *((void *)v6 - 2) = v40;
          double result = a1[1];
          a1[1] = *(v6 - 1);
          *(v6 - 1) = result;
        }
        return result;
      }
      if ((char *)v6 - (char *)a1 <= 127)
      {
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(a1, v6, a4);
      }
      double v10 = (uint64_t *)&a1[2 * (v9 >> 1)];
      double v11 = (uint64_t *)(v6 - 2);
      int v12 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>((uint64_t *)a1, v10, (uint64_t *)v6 - 2, a4);
      uint64_t v13 = *(void *)(a4 + 8);
      uint64_t v14 = *(void *)(a4 + 24);
      double result = *(double *)((char *)a1 + v13);
      double v15 = *(double *)((char *)v10 + v14);
      if (result > v15)
      {
LABEL_12:
        unint64_t v21 = (unint64_t)(a1 + 2);
        if (a1 + 2 < (double *)v11)
        {
          while (1)
          {
            double result = *(double *)((char *)v10 + v14);
            do
            {
              double v22 = *(double *)(v21 + v13);
              v21 += 16;
            }
            while (v22 > result);
            uint64_t v23 = (uint64_t *)(v21 - 16);
            do
            {
              double v24 = *(double *)((char *)v11 + v13 - 16);
              v11 -= 2;
            }
            while (v24 <= result);
            if (v23 >= v11) {
              break;
            }
            uint64_t v25 = *(void *)(v21 - 16);
            *(void *)(v21 - 16) = *v11;
            uint64_t *v11 = v25;
            uint64_t v26 = *(void *)(v21 - 8);
            *(void *)(v21 - 8) = v11[1];
            v11[1] = v26;
            ++v12;
            if (v23 == v10) {
              double v10 = v11;
            }
          }
          v21 -= 16;
        }
        if ((uint64_t *)v21 != v10)
        {
          double result = *(double *)((char *)v10 + v13);
          if (result > *(double *)(v21 + v14))
          {
            uint64_t v27 = *(void *)v21;
            *(void *)unint64_t v21 = *v10;
            *double v10 = v27;
            double result = *(double *)(v21 + 8);
            *(void *)(v21 + 8) = v10[1];
            *((double *)v10 + 1) = result;
            ++v12;
          }
        }
        if ((double *)v21 == a2) {
          return result;
        }
        if (!v12)
        {
          uint64_t v28 = v13 + 16;
          if (v21 <= (unint64_t)a2)
          {
            unint64_t v32 = v21;
            while ((double *)(v32 + 16) != v6)
            {
              double result = *(double *)(v32 + v28);
              double v33 = *(double *)(v32 + v14);
              v32 += 16;
              if (result > v33) {
                goto LABEL_27;
              }
            }
          }
          else
          {
            uint64_t v29 = a1;
            while (v29 + 2 != (double *)v21)
            {
              double result = *(double *)((char *)v29 + v28);
              double v30 = *(double *)((char *)v29 + v14);
              v29 += 2;
              if (result > v30) {
                goto LABEL_27;
              }
            }
          }
          return result;
        }
LABEL_27:
        if (v21 <= (unint64_t)a2) {
          a1 = (double *)(v21 + 16);
        }
        else {
          uint64_t v6 = (double *)v21;
        }
      }
      else
      {
        uint64_t v16 = v6 - 4;
        while (v16 != a1)
        {
          double v17 = *(double *)((char *)v16 + v13);
          v16 -= 2;
          if (v17 > v15)
          {
            uint64_t v18 = *(void *)a1;
            uint64_t v20 = *((void *)v16 + 2);
            char v19 = (uint64_t *)(v16 + 2);
            *(void *)a1 = v20;
            *char v19 = v18;
            double result = a1[1];
            *((void *)a1 + 1) = v19[1];
            *((double *)v19 + 1) = result;
            ++v12;
            double v11 = v19;
            goto LABEL_12;
          }
        }
        uint64_t v31 = a1 + 2;
        if (result <= *(double *)((char *)v11 + v14))
        {
          while (v31 != (double *)v11)
          {
            if (result > *(double *)((char *)v31 + v14))
            {
              double v34 = *v31;
              *uint64_t v31 = *(v6 - 2);
              *(v6 - 2) = v34;
              double result = v31[1];
              v31[1] = *(v6 - 1);
              *(v6 - 1) = result;
              v31 += 2;
              goto LABEL_44;
            }
            v31 += 2;
          }
          return result;
        }
LABEL_44:
        if (v31 == (double *)v11) {
          return result;
        }
        while (1)
        {
          double result = *(double *)((char *)a1 + v13);
          do
          {
            double v35 = *(double *)((char *)v31 + v14);
            v31 += 2;
          }
          while (result <= v35);
          unint64_t v36 = (unint64_t)(v31 - 2);
          do
          {
            double v37 = *(double *)((char *)v11 + v14 - 16);
            v11 -= 2;
          }
          while (result > v37);
          if (v36 >= (unint64_t)v11) {
            break;
          }
          uint64_t v38 = *((void *)v31 - 2);
          *((void *)v31 - 2) = *v11;
          uint64_t *v11 = v38;
          uint64_t v39 = *((void *)v31 - 1);
          *((void *)v31 - 1) = v11[1];
          v11[1] = v39;
        }
        a1 = v31 - 2;
        if (v36 > (unint64_t)a2) {
          return result;
        }
      }
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 8);
  uint64_t v5 = *(void *)(a4 + 24);
  double v6 = *(double *)((char *)a3 + v4);
  double v7 = *(double *)((char *)a2 + v5);
  if (*(double *)((char *)a2 + v4) > *(double *)((char *)a1 + v5))
  {
    uint64_t v8 = *a1;
    if (v6 > v7)
    {
      *a1 = *a3;
      *a3 = v8;
      uint64_t v9 = a1[1];
      a1[1] = a3[1];
      a3[1] = v9;
      return 1;
    }
    *a1 = *a2;
    *a2 = v8;
    uint64_t v14 = a1[1];
    a1[1] = a2[1];
    a2[1] = v14;
    if (*(double *)((char *)a3 + v4) <= *(double *)((char *)a2 + v5)) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v8;
    a2[1] = a3[1];
    a3[1] = v14;
    return 2;
  }
  if (v6 > v7)
  {
    uint64_t v10 = *a2;
    *a2 = *a3;
    *a3 = v10;
    uint64_t v11 = a2[1];
    a2[1] = a3[1];
    a3[1] = v11;
    if (*(double *)((char *)a2 + v4) <= *(double *)((char *)a1 + v5)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    uint64_t v13 = a1[1];
    a1[1] = a2[1];
    a2[1] = v13;
    return 2;
  }
  return 0;
}

double std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(double *a1, double *a2, uint64_t a3)
{
  if (a2 - 2 != a1)
  {
    uint64_t v3 = *(void *)(a3 + 8);
    uint64_t v4 = *(void *)(a3 + 24);
    do
    {
      uint64_t v5 = a1;
      a1 += 2;
      if (v5 != a2 && a1 != a2)
      {
        double v6 = a1;
        double v7 = v5;
        do
        {
          double result = *(double *)((char *)v6 + v3);
          if (result > *(double *)((char *)v7 + v4)) {
            double v7 = v6;
          }
          v6 += 2;
        }
        while (v6 != a2);
        if (v7 != v5)
        {
          double v9 = *v5;
          *uint64_t v5 = *v7;
          double *v7 = v9;
          double result = v5[1];
          v5[1] = v7[1];
          v7[1] = result;
        }
      }
    }
    while (a1 != a2 - 2);
  }
  return result;
}

double *turi::supervised::flattened_sparse_vector_outer_prod(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a3 + 8);
  double result = (double *)Eigen::internal::CompressedStorage<double,int>::reserve(a3 + 8, a2[1] * a1[3]);
  unint64_t v7 = a2[1];
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a1[5];
    do
    {
      uint64_t v10 = a1[3];
      if (v10 >= 1)
      {
        uint64_t v11 = (double *)a1[1];
        uint64_t v12 = (_DWORD *)a1[2];
        do
        {
          double v13 = *v11++;
          double v14 = *(double *)(*a2 + 8 * v8) * v13;
          LODWORD(v13) = *v12++;
          uint64_t v15 = 0;
          double result = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v5, (int)v8 * (int)v9 + LODWORD(v13), &v15);
          double *result = v14;
          --v10;
        }
        while (v10);
        unint64_t v7 = a2[1];
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

turi::supervised::logistic_regression_opt_interface *turi::supervised::logistic_regression_opt_interface::logistic_regression_opt_interface(turi::supervised::logistic_regression_opt_interface *this, const turi::ml_data *a2, const turi::ml_data *a3, turi::supervised::logistic_regression *a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D783BC8;
  unint64_t v8 = (char *)this + 8;
  turi::ml_data::ml_data((turi::supervised::logistic_regression_opt_interface *)((char *)this + 8));
  turi::ml_data::ml_data((turi::supervised::logistic_regression_opt_interface *)((char *)this + 200));
  *((void *)this + 49) = a4;
  *((_OWORD *)this + 25) = xmmword_2246B9C20;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  unint64_t v33 = 0;
  int v34 = 1065353216;
  uint64_t v35 = 1;
  int v36 = 1065353216;
  std::map<unsigned long,float>::map[abi:ne180100]((uint64_t)this + 440, &v33, 2);
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((_WORD *)this + 240) = 0;
  uint64_t v9 = (turi::thread_pool *)turi::ml_data::operator=((uint64_t)v8, (uint64_t *)a2);
  if (*((void *)a3 + 3) != *((void *)a3 + 2)) {
    uint64_t v9 = (turi::thread_pool *)turi::ml_data::operator=((uint64_t)this + 200, (uint64_t *)a3);
  }
  *((void *)this + 50) = *((void *)this + 4) - *((void *)this + 3);
  *((void *)this + 52) = (uint64_t)(*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1)) >> 4;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v9);
  *((void *)this + 54) = turi::thread_pool::size(instance);
  uint64_t v11 = *((void *)this + 49);
  double v13 = *(uint64_t **)(v11 + 376);
  uint64_t v12 = *(std::__shared_weak_count **)(v11 + 384);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)this + 51) = *(void *)(v13[3] + 64);
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *((void *)this + 51) = *(void *)(v13[3] + 64);
  }
  uint64_t v14 = *v13;
  if (v13[1] == *v13)
  {
    unint64_t v17 = 1;
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 1;
    do
    {
      uint64_t v18 = v14 + v15;
      uint64_t v20 = *(void *)(v14 + v15);
      char v19 = *(std::__shared_weak_count **)(v18 + 8);
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v21 = *(_DWORD *)(v20 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      else
      {
        unsigned int v21 = *(_DWORD *)(v20 + 24);
      }
      if (v21 > 6 || ((1 << v21) & 0x4A) == 0)
      {
        uint64_t v28 = (uint64_t *)(*v13 + v15);
        uint64_t v30 = *v28;
        uint64_t v29 = (std::__shared_weak_count *)v28[1];
        if (v29)
        {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v27 = *(void *)(v30 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        else
        {
          uint64_t v27 = *(void *)(v30 + 64);
        }
      }
      else
      {
        uint64_t v23 = (uint64_t *)(*v13 + v15);
        uint64_t v25 = *v23;
        double v24 = (std::__shared_weak_count *)v23[1];
        if (v24)
        {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v26 = *(void *)(v25 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        else
        {
          uint64_t v26 = *(void *)(v25 + 64);
        }
        uint64_t v27 = v26 - 1;
      }
      v17 += v27;
      ++v16;
      uint64_t v14 = *v13;
      v15 += 16;
    }
    while (v16 < (v13[1] - *v13) >> 4);
  }
  *((void *)this + 53) = v17;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    unint64_t v31 = *((void *)this + 53);
    *((unsigned char *)this + 481) = v31 <= 3 * *((void *)this + 6);
    *((void *)this + 53) = (*((void *)this + 51) - 1) * v31;
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  else
  {
    *((unsigned char *)this + 481) = v17 <= 3 * *((void *)this + 6);
    *((void *)this + 53) = (*((void *)this + 51) - 1) * v17;
  }
  return this;
}

void sub_2244B5894(_Unwind_Exception *a1)
{
  turi::ml_data::~ml_data(v3);
  turi::ml_data::~ml_data(v2);
  turi::neural_net::float_scalar::~float_scalar(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::logistic_regression_opt_interface::~logistic_regression_opt_interface(turi::supervised::logistic_regression_opt_interface *this)
{
  *(void *)this = &unk_26D783BC8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 440, *((void **)this + 56));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v11 = (void **)((char *)this + 352);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v11 = (void **)((char *)this + 304);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v5 = (void *)*((void *)this + 33);
  if (v5)
  {
    *((void *)this + 34) = v5;
    operator delete(v5);
  }
  double v6 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v11 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v11 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v9 = (void *)*((void *)this + 9);
  if (v9)
  {
    *((void *)this + 10) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  uint64_t vars8;

  turi::supervised::logistic_regression_opt_interface::~logistic_regression_opt_interface(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t **turi::supervised::logistic_regression_opt_interface::set_class_weights(uint64_t **this, const turi::flexible_type *a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 8);
  uint64_t v3 = *(void *)(*(void *)a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = this + 55;
    do
    {
      float v5 = *(double *)(v2 + 16);
      unint64_t v6 = *(void *)v2;
      v2 += 32;
      unint64_t v7 = v6;
      unint64_t v8 = &v7;
      this = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, &v7, (uint64_t)&std::piecewise_construct, &v8);
      *((float *)this + 10) = v5;
    }
    while (v2 != v3);
  }
  return this;
}

void turi::supervised::logistic_regression_opt_interface::init_feature_rescaling(turi::supervised::logistic_regression_opt_interface *this)
{
  *((unsigned char *)this + 480) = 1;
  operator new();
}

void sub_2244B5B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    MEMORY[0x22A614FA0](v10, 0x1081C40F38A5E8DLL);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::logistic_regression_opt_interface::rescale_solution(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 480))
  {
    unint64_t v4 = *(void *)(a1 + 424);
    unint64_t v5 = *(void *)(a1 + 408) - 1;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v6 = v4 / v5;
    if (v5 <= v4)
    {
      if ((unint64_t)v6 >> 61 || (unint64_t v7 = malloc_type_malloc(8 * v6, 0x1E76AA36uLL)) == 0)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v38 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v38, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      uint64_t v8 = *(void *)(a1 + 408);
      uint64_t v39 = v7;
      uint64_t v40 = v6;
      if (v8 == 1) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v40 = v4 / v5;
    }
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *a2;
      uint64_t v11 = v6;
      if (v40 != v6)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v39, v6, 1);
        uint64_t v11 = v40;
      }
      uint64_t v12 = v10 + 8 * v9 * v6;
      double v13 = (char *)v39;
      if (v11 >= 0) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = v11 + 1;
      }
      int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 >= 2)
      {
        int64_t v16 = 0;
        unint64_t v17 = v39;
        do
        {
          *v17++ = *(_OWORD *)(v12 + 8 * v16);
          v16 += 2;
        }
        while (v16 < v15);
      }
      BOOL v18 = v11 <= v15;
      uint64_t v19 = v11 - v15;
      if (!v18)
      {
        uint64_t v20 = &v13[16 * (v14 >> 1)];
        do
        {
          *(void *)uint64_t v20 = *(void *)(v12 + 8 * v15);
          v20 += 8;
          ++v15;
          --v19;
        }
        while (v19);
      }
      (*(void (**)(void, void **))(**(void **)(a1 + 464) + 16))(*(void *)(a1 + 464), &v39);
      unint64_t v21 = *a2 + 8 * v9 * v6;
      double v22 = (char *)v39;
      uint64_t v23 = (v21 >> 3) & 1;
      if (v23 >= v6) {
        uint64_t v23 = v6;
      }
      if ((v21 & 7) != 0) {
        uint64_t v23 = v6;
      }
      uint64_t v24 = v6 - v23;
      if (v6 >= v23) {
        uint64_t v25 = v6 - v23;
      }
      else {
        uint64_t v25 = v24 + 1;
      }
      if (v23 >= 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (uint64_t *)v39;
        uint64_t v28 = v23;
        do
        {
          uint64_t v29 = *v27++;
          *(void *)(v21 + 8 * v26++) = v29;
          --v28;
        }
        while (v28);
      }
      uint64_t v30 = (v25 & 0xFFFFFFFFFFFFFFFELL) + v23;
      if (v24 > 1)
      {
        unint64_t v31 = &v22[8 * v23];
        uint64_t v32 = v23;
        do
        {
          long long v33 = *(_OWORD *)v31;
          v31 += 16;
          *(_OWORD *)(v21 + 8 * v32) = v33;
          v32 += 2;
        }
        while (v32 < v30);
      }
      if (v30 < v6)
      {
        unint64_t v34 = v24 - (v25 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v35 = &v22[16 * (v25 >> 1) + 8 * v23];
        do
        {
          uint64_t v36 = *(void *)v35;
          v35 += 8;
          *(void *)(v21 + 8 * v30++) = v36;
          --v34;
        }
        while (v34);
      }
      ++v9;
    }
    while (v9 < *(void *)(a1 + 408) - 1);
    unint64_t v7 = v39;
LABEL_37:
    free(v7);
  }
}

void sub_2244B5DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

uint64_t turi::supervised::logistic_regression_opt_interface::num_examples(turi::supervised::logistic_regression_opt_interface *this)
{
  return *((void *)this + 50);
}

uint64_t turi::supervised::logistic_regression_opt_interface::num_variables(turi::supervised::logistic_regression_opt_interface *this)
{
  return *((void *)this + 53);
}

void turi::supervised::logistic_regression_opt_interface::get_status_header(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  turi::supervised::make_progress_header(*(long long ***)(a1 + 392), a2, *(void *)(a1 + 224) != *(void *)(a1 + 216), a3);
}

void turi::supervised::logistic_regression_opt_interface::get_validation_accuracy(turi::supervised::logistic_regression_opt_interface *this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 49);
  std::string::basic_string[abi:ne180100]<0>(&v49, "train");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char *, void **, void))(*(void *)v2 + 104))(&v27, v2, (char *)this + 200, &v49, 0);
  if (v51 < 0) {
    operator delete(v49);
  }
  std::string::basic_string[abi:ne180100]<0>(&v49, "accuracy");
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v27, (const void **)&v49);
  if (v51 < 0) {
    operator delete(v49);
  }
  if (v28 == (char **)v3) {
    turi::supervised::logistic_regression_opt_interface::get_validation_accuracy(void)::$_0::operator()();
  }
  uint64_t v35 = (void **)&v50;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*(unsigned int *)(v3 + 56), *(_DWORD *)(v3 + 56) ^ (*(int *)(v3 + 56) >> 31), (std::string **)&v35, v3 + 64);
  LODWORD(v49) = *(_DWORD *)(v3 + 56) ^ (*(int *)(v3 + 56) >> 31);
  turi::variant_converter<turi::flexible_type,void>::get((int *)&v49, (uint64_t)&v47);
  switch(v48)
  {
    case 0:
    case 1:
    case 7:
      goto LABEL_61;
    case 2:
      unint64_t v4 = v47;
      size_t __idx = 0;
      unint64_t v5 = (char *)(v47 + 1);
      if (*((char *)v47 + 31) < 0) {
        unint64_t v5 = (char *)v47[1];
      }
      uint64_t v6 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v45, v5);
      std::stod(v6, &__idx);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (*((char *)v4 + 31) < 0) {
        atomic_ullong v7 = v4[2];
      }
      else {
        atomic_ullong v7 = *((unsigned __int8 *)v4 + 31);
      }
      if (__idx != v7)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v25 = std::string::append(&v44, " cannot be interpreted as a float");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v45);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_28;
    case 3:
      double v42 = 0;
      uint64_t v43 = 0;
      long long __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, (const void *)v47[1], v47[2], (v47[2] - v47[1]) >> 3);
      turi::flexible_type_fail(0);
      if (__p)
      {
        double v42 = __p;
        operator delete(__p);
      }
      goto LABEL_28;
    case 4:
      memset(v34, 0, sizeof(v34));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v34, (uint64_t *)v47[1], (uint64_t *)v47[2], (v47[2] - v47[1]) >> 4);
      turi::flexible_type_fail(0);
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      goto LABEL_28;
    case 5:
      memset(v33, 0, sizeof(v33));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v33, (uint64_t *)v47[1], (uint64_t *)v47[2], (v47[2] - v47[1]) >> 5);
      turi::flexible_type_fail(0);
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      goto LABEL_28;
    case 6:
      goto LABEL_28;
    case 8:
      uint64_t v8 = v47;
      unint64_t v9 = (atomic_uint *)v47[2];
      v28[2] = (char *)v47[1];
      uint64_t v29 = v9;
      if (v9) {
        atomic_fetch_add_explicit(v9 + 2, 1u, memory_order_relaxed);
      }
      long long v10 = *(_OWORD *)(v8 + 3);
      long long v11 = *(_OWORD *)(v8 + 5);
      long long v32 = *(_OWORD *)(v8 + 7);
      long long v31 = v11;
      long long v30 = v10;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v29);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v35, (uint64_t)(v47 + 1));
      turi::flexible_type_fail(0);
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
LABEL_28:
      switch(v48)
      {
        case 2:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v12 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            if (*((char *)v47 + 31) < 0) {
              operator delete((void *)v47[1]);
            }
            double v13 = v12;
            uint64_t v14 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
          break;
        case 3:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v21 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            double v22 = (void *)v47[1];
            if (v22)
            {
              v47[2] = (atomic_ullong)v22;
              operator delete(v22);
            }
            double v13 = v21;
            uint64_t v14 = 0x1080C409938AC02;
            goto LABEL_59;
          }
          break;
        case 4:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v15 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            uint64_t v35 = (void **)(v47 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
            goto LABEL_54;
          }
          break;
        case 5:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v15 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            uint64_t v35 = (void **)(v47 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_54:
            double v13 = v15;
            uint64_t v14 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
          break;
        case 8:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v23 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v47 + 2);
            double v13 = v23;
            unsigned int v20 = -235920773;
            goto LABEL_58;
          }
          break;
        case 9:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v16 = v47;
            if (v47)
            {
              unint64_t v17 = (void *)v47[6];
              if (v17)
              {
                v47[7] = (atomic_ullong)v17;
                operator delete(v17);
              }
              BOOL v18 = (void *)v16[3];
              if (v18)
              {
                v16[4] = (atomic_ullong)v18;
                operator delete(v18);
              }
              uint64_t v19 = (std::__shared_weak_count *)v16[2];
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
              double v13 = v16;
              unsigned int v20 = 2071181815;
LABEL_58:
              uint64_t v14 = v20 | 0x1030C4000000000;
LABEL_59:
              MEMORY[0x22A614FA0](v13, v14);
            }
LABEL_60:
            double v47 = 0;
          }
          break;
        default:
          break;
      }
LABEL_61:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v49);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2244B63F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  if (*(char *)(v12 - 169) < 0) {
    operator delete(*(void **)(v12 - 192));
  }
  if (*(char *)(v12 - 193) < 0)
  {
    operator delete(*(void **)(v12 - 216));
    if ((v11 & 1) == 0)
    {
LABEL_8:
      switch(*(unsigned char *)(v12 - 140))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          uint64_t v14 = *(void *)(v12 - 152);
          if (!v14) {
            goto LABEL_34;
          }
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          int64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          uint64_t v19 = *(void **)(v12 - 152);
          if (!v19) {
            goto LABEL_34;
          }
          unsigned int v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = v20;
            operator delete(v20);
          }
          int64_t v15 = v19;
          uint64_t v16 = 0x1080C409938AC02;
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          unint64_t v17 = *(void **)(v12 - 152);
          if (!v17) {
            goto LABEL_34;
          }
          *(void *)(v12 - 216) = v17 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
          goto LABEL_28;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          unint64_t v17 = *(void **)(v12 - 152);
          if (!v17) {
            goto LABEL_34;
          }
          *(void *)(v12 - 216) = v17 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
LABEL_28:
          int64_t v15 = v17;
          uint64_t v16 = 0x1020C405E66F15BLL;
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v21 = *(void *)(v12 - 152);
            if (v21)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v21 + 16));
              MEMORY[0x22A614FA0](v21, 0x1030C40F1F0227BLL);
            }
            *(void *)(v12 - 152) = 0;
          }
          goto LABEL_34;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          BOOL v18 = *(void **)(v12 - 152);
          if (!v18) {
            goto LABEL_34;
          }
          int64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v18);
          uint64_t v16 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_34;
      }
      MEMORY[0x22A614FA0](v15, v16);
LABEL_34:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v12 - 136));
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a9, a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v10);
  goto LABEL_8;
}

void sub_2244B66C4()
{
  if (*(char *)(v0 - 113) < 0) {
    operator delete(*(void **)(v0 - 136));
  }
  JUMPOUT(0x2244B66BCLL);
}

void turi::supervised::logistic_regression_opt_interface::get_training_accuracy(turi::supervised::logistic_regression_opt_interface *this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 49);
  std::string::basic_string[abi:ne180100]<0>(&v49, "train");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char *, void **, void))(*(void *)v2 + 104))(&v27, v2, (char *)this + 8, &v49, 0);
  if (v51 < 0) {
    operator delete(v49);
  }
  std::string::basic_string[abi:ne180100]<0>(&v49, "accuracy");
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v27, (const void **)&v49);
  if (v51 < 0) {
    operator delete(v49);
  }
  if (v28 == (char **)v3) {
    turi::supervised::logistic_regression_opt_interface::get_training_accuracy(void)::$_0::operator()();
  }
  uint64_t v35 = (void **)&v50;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*(unsigned int *)(v3 + 56), *(_DWORD *)(v3 + 56) ^ (*(int *)(v3 + 56) >> 31), (std::string **)&v35, v3 + 64);
  LODWORD(v49) = *(_DWORD *)(v3 + 56) ^ (*(int *)(v3 + 56) >> 31);
  turi::variant_converter<turi::flexible_type,void>::get((int *)&v49, (uint64_t)&v47);
  switch(v48)
  {
    case 0:
    case 1:
    case 7:
      goto LABEL_61;
    case 2:
      unint64_t v4 = v47;
      size_t __idx = 0;
      unint64_t v5 = (char *)(v47 + 1);
      if (*((char *)v47 + 31) < 0) {
        unint64_t v5 = (char *)v47[1];
      }
      uint64_t v6 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v45, v5);
      std::stod(v6, &__idx);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (*((char *)v4 + 31) < 0) {
        atomic_ullong v7 = v4[2];
      }
      else {
        atomic_ullong v7 = *((unsigned __int8 *)v4 + 31);
      }
      if (__idx != v7)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v25 = std::string::append(&v44, " cannot be interpreted as a float");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v45);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_28;
    case 3:
      double v42 = 0;
      uint64_t v43 = 0;
      long long __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, (const void *)v47[1], v47[2], (v47[2] - v47[1]) >> 3);
      turi::flexible_type_fail(0);
      if (__p)
      {
        double v42 = __p;
        operator delete(__p);
      }
      goto LABEL_28;
    case 4:
      memset(v34, 0, sizeof(v34));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v34, (uint64_t *)v47[1], (uint64_t *)v47[2], (v47[2] - v47[1]) >> 4);
      turi::flexible_type_fail(0);
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      goto LABEL_28;
    case 5:
      memset(v33, 0, sizeof(v33));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v33, (uint64_t *)v47[1], (uint64_t *)v47[2], (v47[2] - v47[1]) >> 5);
      turi::flexible_type_fail(0);
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      goto LABEL_28;
    case 6:
      goto LABEL_28;
    case 8:
      uint64_t v8 = v47;
      unint64_t v9 = (atomic_uint *)v47[2];
      v28[2] = (char *)v47[1];
      uint64_t v29 = v9;
      if (v9) {
        atomic_fetch_add_explicit(v9 + 2, 1u, memory_order_relaxed);
      }
      long long v10 = *(_OWORD *)(v8 + 3);
      long long v11 = *(_OWORD *)(v8 + 5);
      long long v32 = *(_OWORD *)(v8 + 7);
      long long v31 = v11;
      long long v30 = v10;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v29);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v35, (uint64_t)(v47 + 1));
      turi::flexible_type_fail(0);
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
LABEL_28:
      switch(v48)
      {
        case 2:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v12 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            if (*((char *)v47 + 31) < 0) {
              operator delete((void *)v47[1]);
            }
            double v13 = v12;
            uint64_t v14 = 0x1012C404EF22A49;
            goto LABEL_59;
          }
          break;
        case 3:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v21 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            double v22 = (void *)v47[1];
            if (v22)
            {
              v47[2] = (atomic_ullong)v22;
              operator delete(v22);
            }
            double v13 = v21;
            uint64_t v14 = 0x1080C409938AC02;
            goto LABEL_59;
          }
          break;
        case 4:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v15 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            uint64_t v35 = (void **)(v47 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
            goto LABEL_54;
          }
          break;
        case 5:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v15 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            uint64_t v35 = (void **)(v47 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_54:
            double v13 = v15;
            uint64_t v14 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          }
          break;
        case 8:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v23 = v47;
            if (!v47) {
              goto LABEL_60;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v47 + 2);
            double v13 = v23;
            unsigned int v20 = -235920773;
            goto LABEL_58;
          }
          break;
        case 9:
          if (atomic_fetch_add(v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v16 = v47;
            if (v47)
            {
              unint64_t v17 = (void *)v47[6];
              if (v17)
              {
                v47[7] = (atomic_ullong)v17;
                operator delete(v17);
              }
              BOOL v18 = (void *)v16[3];
              if (v18)
              {
                v16[4] = (atomic_ullong)v18;
                operator delete(v18);
              }
              uint64_t v19 = (std::__shared_weak_count *)v16[2];
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
              double v13 = v16;
              unsigned int v20 = 2071181815;
LABEL_58:
              uint64_t v14 = v20 | 0x1030C4000000000;
LABEL_59:
              MEMORY[0x22A614FA0](v13, v14);
            }
LABEL_60:
            double v47 = 0;
          }
          break;
        default:
          break;
      }
LABEL_61:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v49);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2244B6D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  if (*(char *)(v12 - 169) < 0) {
    operator delete(*(void **)(v12 - 192));
  }
  if (*(char *)(v12 - 193) < 0)
  {
    operator delete(*(void **)(v12 - 216));
    if ((v11 & 1) == 0)
    {
LABEL_8:
      switch(*(unsigned char *)(v12 - 140))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          uint64_t v14 = *(void *)(v12 - 152);
          if (!v14) {
            goto LABEL_34;
          }
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          int64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          uint64_t v19 = *(void **)(v12 - 152);
          if (!v19) {
            goto LABEL_34;
          }
          unsigned int v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = v20;
            operator delete(v20);
          }
          int64_t v15 = v19;
          uint64_t v16 = 0x1080C409938AC02;
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          unint64_t v17 = *(void **)(v12 - 152);
          if (!v17) {
            goto LABEL_34;
          }
          *(void *)(v12 - 216) = v17 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
          goto LABEL_28;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          unint64_t v17 = *(void **)(v12 - 152);
          if (!v17) {
            goto LABEL_34;
          }
          *(void *)(v12 - 216) = v17 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 216));
LABEL_28:
          int64_t v15 = v17;
          uint64_t v16 = 0x1020C405E66F15BLL;
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v21 = *(void *)(v12 - 152);
            if (v21)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v21 + 16));
              MEMORY[0x22A614FA0](v21, 0x1030C40F1F0227BLL);
            }
            *(void *)(v12 - 152) = 0;
          }
          goto LABEL_34;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v12 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_34;
          }
          BOOL v18 = *(void **)(v12 - 152);
          if (!v18) {
            goto LABEL_34;
          }
          int64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v18);
          uint64_t v16 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_34;
      }
      MEMORY[0x22A614FA0](v15, v16);
LABEL_34:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v12 - 136));
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a9, a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v11)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v10);
  goto LABEL_8;
}

void sub_2244B6FEC()
{
  if (*(char *)(v0 - 113) < 0) {
    operator delete(*(void **)(v0 - 136));
  }
  JUMPOUT(0x2244B6FE4);
}

void turi::supervised::logistic_regression_opt_interface::get_status(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v7, a2);
  turi::supervised::logistic_regression_opt_interface::rescale_solution(a1, (uint64_t *)v7);
  (*(void (**)(void, void **))(**(void **)(a1 + 392) + 208))(*(void *)(a1 + 392), v7);
  turi::supervised::make_progress_row_string(*(void *)(a1 + 392), a1 + 8, a1 + 200, a3, a4);
  free(v7[0]);
}

void sub_2244B710C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t **a4, double *a5)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  unint64_t v10 = *(void *)(a1 + 432);
  v63.__darwin_time_t tv_sec = *(void *)(a1 + 424);
  *(void *)&v63.__darwin_suseconds_t tv_usec = 1;
  uint64_t v64 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)__p, &v63.tv_sec);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v62, v10, (uint64_t)__p);
  free(__p[0]);
  unint64_t v11 = *(void *)(a1 + 432);
  v63.__darwin_time_t tv_sec = 0;
  std::vector<double>::vector(__p, v11, &v63);
  unint64_t v60 = *(void *)(a1 + 424) / (unint64_t)(*(void *)(a1 + 408) - 1);
  gettimeofday(&v59, 0);
  gettimeofday(&v63, 0);
  uint64_t v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12)) {
      goto LABEL_49;
    }
    double v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression_opt_interface.cpp", "compute_first_order_statistics", 244, 1);
    int64_t v15 = pthread_getspecific(*((void *)started + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Starting first order stats computation", 38);
    }
    uint64_t v16 = pthread_getspecific(*((void *)started + 74));
    if (v16)
    {
      if (*((unsigned char *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[2] - 24) + 16));
        unint64_t v17 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale((std::locale *)&v63);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7) {
          goto LABEL_50;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 481))
  {
    BOOL v18 = operator new(0x38uLL);
    *BOOL v18 = &unk_26D783C50;
  }
  else
  {
    BOOL v18 = operator new(0x38uLL);
    *BOOL v18 = &unk_26D783CD0;
  }
  v18[1] = &v60;
  void v18[2] = a1;
  void v18[3] = a3;
  v18[4] = a2;
  v18[5] = v62;
  v18[6] = __p;
  uint64_t v65 = v18;
  turi::in_parallel((turi::thread_pool *)&v63);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v63);
  *a5 = *(double *)__p[0];
  unsigned int v20 = *(float64x2_t **)v62[0];
  uint64_t v19 = *(void *)(v62[0] + 8);
  if (a4[1] != (float64x2_t *)v19)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v19, 1);
    uint64_t v19 = (uint64_t)a4[1];
  }
  uint64_t v21 = *a4;
  if (v19 >= 0) {
    uint64_t v22 = v19;
  }
  else {
    uint64_t v22 = v19 + 1;
  }
  int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
  if (v19 >= 2)
  {
    int64_t v24 = 0;
    uint64_t v25 = *a4;
    long long v26 = v20;
    do
    {
      float64x2_t v27 = *v26++;
      *v25++ = v27;
      v24 += 2;
    }
    while (v24 < v23);
  }
  BOOL v28 = __OFSUB__(v19, v23);
  uint64_t v29 = v19 - v23;
  if (!((v29 < 0) ^ v28 | (v29 == 0)))
  {
    uint64_t v30 = v22 >> 1;
    long long v31 = (uint64_t *)&v20[v22 >> 1];
    f64 = (void *)v21[v30].f64;
    do
    {
      uint64_t v33 = *v31++;
      *f64++ = v33;
      --v29;
    }
    while (v29);
  }
  if (*(void *)(a1 + 432) >= 2uLL)
  {
    unint64_t v34 = 1;
    do
    {
      uint64_t v35 = *(void *)(v62[0] + 16 * v34);
      uint64_t v36 = *a4;
      uint64_t v37 = (uint64_t)a4[1];
      if (v37 >= 0) {
        uint64_t v38 = (uint64_t)a4[1];
      }
      else {
        uint64_t v38 = v37 + 1;
      }
      int64_t v39 = v38 & 0xFFFFFFFFFFFFFFFELL;
      if (v37 >= 2)
      {
        int64_t v40 = 0;
        char v41 = *a4;
        double v42 = *(float64x2_t **)(v62[0] + 16 * v34);
        do
        {
          float64x2_t v43 = *v42++;
          *char v41 = vaddq_f64(v43, *v41);
          ++v41;
          v40 += 2;
        }
        while (v40 < v39);
      }
      BOOL v44 = v37 <= v39;
      uint64_t v45 = v37 - v39;
      if (!v44)
      {
        uint64_t v46 = v38 >> 1;
        double v47 = (double *)(v35 + 16 * v46);
        char v48 = v36[v46].f64;
        do
        {
          double v49 = *v47++;
          *char v48 = v49 + *v48;
          ++v48;
          --v45;
        }
        while (v45);
      }
      *a5 = *((double *)__p[0] + v34++) + *a5;
    }
    while (v34 < *(void *)(a1 + 432));
  }
  uint64_t v50 = (int *)global_logger();
  if (v50[169] <= 2)
  {
    if (!cppipc::must_cancel((cppipc *)v50))
    {
      char v51 = (file_logger *)global_logger();
      uint64_t v52 = file_logger::start_stream(v51, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression_opt_interface.cpp", "compute_first_order_statistics", 338, 1);
      int64_t v53 = pthread_getspecific(*((void *)v52 + 74));
      if (v53 && *((unsigned char *)v53 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)"Computation done at ", 20);
      }
      gettimeofday(&v63, 0);
      uint64_t v54 = file_logger::operator<<<double>((uint64_t)v52);
      int v55 = pthread_getspecific(*(void *)(v54 + 592));
      if (v55 && *((unsigned char *)v55 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)"s", 1);
      }
      uint64_t v56 = pthread_getspecific(*(void *)(v54 + 592));
      if (!v56) {
        goto LABEL_46;
      }
      if (!v56[280]) {
        goto LABEL_46;
      }
      std::ios_base::getloc((const std::ios_base *)&v56[*(void *)(*((void *)v56 + 2) - 24) + 16]);
      int64_t v57 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
      std::locale::~locale((std::locale *)&v63);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v54);
      if (*(_DWORD *)(v54 + 600) != 7) {
        goto LABEL_46;
      }
LABEL_50:
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      void *exception = "LOG_FATAL encountered";
      __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
    }
LABEL_49:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_46:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v63.__darwin_time_t tv_sec = (__darwin_time_t)v62;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
}

void sub_2244B7708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, char *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::locale a20)
{
  if (__p)
  {
    a15 = __p;
    operator delete(__p);
  }
  long long __p = &a17;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(uint64_t a1, uint64_t a2, float64x2_t **a3, float64x2_t **a4, double *a5)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  gettimeofday(&v98, 0);
  gettimeofday(&v99, 0);
  unint64_t v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression_opt_interface.cpp", "compute_second_order_statistics", 351, 1);
    double v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    }
    uint64_t v14 = pthread_getspecific(*((void *)started + 74));
    if (v14)
    {
      if (*((unsigned char *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
        int64_t v15 = std::locale::use_facet((const std::locale *)&v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v99);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unint64_t v16 = *(void *)(a1 + 432);
  v96[0] = *(void *)(a1 + 424);
  v96[1] = v96[0];
  v96[2] = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)&v99, v96);
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::vector(v97, v16, (uint64_t)&v99);
  free((void *)v99.tv_sec);
  unint64_t v17 = *(void *)(a1 + 432);
  v99.__darwin_time_t tv_sec = *(void *)(a1 + 424);
  *(void *)&v99.__darwin_suseconds_t tv_usec = 1;
  uint64_t v100 = 0;
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::PlainObjectBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1>>>((int64x2_t **)__p, &v99.tv_sec);
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::vector(v96, v17, (uint64_t)__p);
  free(__p[0]);
  unint64_t v18 = *(void *)(a1 + 432);
  v99.__darwin_time_t tv_sec = 0;
  std::vector<double>::vector(__p, v18, &v99);
  unint64_t v94 = *(void *)(a1 + 424) / (unint64_t)(*(void *)(a1 + 408) - 1);
  if (*(unsigned char *)(a1 + 481))
  {
    uint64_t v19 = operator new(0x38uLL);
    *uint64_t v19 = &unk_26D783D50;
    v19[1] = &v94;
    v19[2] = a1;
    void v19[3] = a2;
    void v19[4] = __p;
    v19[5] = v96;
  }
  else
  {
    uint64_t v19 = operator new(0x38uLL);
    *uint64_t v19 = &unk_26D783DD0;
    v19[1] = &v94;
    v19[2] = a1;
    void v19[3] = a2;
    void v19[4] = v96;
    v19[5] = __p;
  }
  v19[6] = v97;
  uint64_t v101 = v19;
  turi::in_parallel((turi::thread_pool *)&v99);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v99);
  *a5 = *(double *)__p[0];
  uint64_t v21 = *(float64x2_t **)v97[0];
  uint64_t v20 = *(void *)(v97[0] + 8);
  uint64_t v22 = *(void *)(v97[0] + 16);
  if (a3[1] != (float64x2_t *)v20 || a3[2] != (float64x2_t *)v22)
  {
    if (v20 && v22 && 0x7FFFFFFFFFFFFFFFLL / v22 < v20)
    {
      double v90 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      double v91 = std::bad_alloc::bad_alloc(v90);
      __cxa_throw(v91, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a3, v22 * v20, v20, v22);
    uint64_t v20 = (uint64_t)a3[1];
    uint64_t v22 = (uint64_t)a3[2];
  }
  int64_t v23 = *a3;
  uint64_t v24 = v20 * v22;
  if (v20 * v22 >= 0) {
    uint64_t v25 = v20 * v22;
  }
  else {
    uint64_t v25 = v24 + 1;
  }
  int64_t v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
  if (v24 >= 2)
  {
    int64_t v27 = 0;
    BOOL v28 = *a3;
    uint64_t v29 = v21;
    do
    {
      float64x2_t v30 = *v29++;
      *v28++ = v30;
      v27 += 2;
    }
    while (v27 < v26);
  }
  BOOL v31 = v24 <= v26;
  uint64_t v32 = v24 - v26;
  if (!v31)
  {
    uint64_t v33 = v25 >> 1;
    unint64_t v34 = (uint64_t *)&v21[v25 >> 1];
    f64 = (void *)v23[v33].f64;
    do
    {
      uint64_t v36 = *v34++;
      *f64++ = v36;
      --v32;
    }
    while (v32);
  }
  uint64_t v38 = *(float64x2_t **)v96[0];
  uint64_t v37 = *(void *)(v96[0] + 8);
  if (a4[1] != (float64x2_t *)v37)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v37, 1);
    uint64_t v37 = (uint64_t)a4[1];
  }
  int64_t v39 = *a4;
  if (v37 >= 0) {
    uint64_t v40 = v37;
  }
  else {
    uint64_t v40 = v37 + 1;
  }
  int64_t v41 = v40 & 0xFFFFFFFFFFFFFFFELL;
  if (v37 >= 2)
  {
    int64_t v42 = 0;
    float64x2_t v43 = *a4;
    BOOL v44 = v38;
    do
    {
      float64x2_t v45 = *v44++;
      *v43++ = v45;
      v42 += 2;
    }
    while (v42 < v41);
  }
  BOOL v46 = __OFSUB__(v37, v41);
  uint64_t v47 = v37 - v41;
  if (!((v47 < 0) ^ v46 | (v47 == 0)))
  {
    uint64_t v48 = v40 >> 1;
    double v49 = (uint64_t *)&v38[v40 >> 1];
    uint64_t v50 = (void *)v39[v48].f64;
    do
    {
      uint64_t v51 = *v49++;
      *v50++ = v51;
      --v47;
    }
    while (v47);
  }
  if (*(void *)(a1 + 432) >= 2uLL)
  {
    unint64_t v52 = 1;
    do
    {
      uint64_t v53 = *(void *)(v97[0] + 24 * v52);
      uint64_t v54 = *a3;
      int v55 = a3[1];
      uint64_t v56 = (void)a3[2] * (void)v55;
      if (v56 >= 0) {
        uint64_t v57 = (void)a3[2] * (void)v55;
      }
      else {
        uint64_t v57 = v56 + 1;
      }
      int64_t v58 = v57 & 0xFFFFFFFFFFFFFFFELL;
      if (v56 >= 2)
      {
        int64_t v59 = 0;
        unint64_t v60 = *a3;
        int v61 = *(float64x2_t **)(v97[0] + 24 * v52);
        do
        {
          float64x2_t v62 = *v61++;
          *unint64_t v60 = vaddq_f64(v62, *v60);
          ++v60;
          v59 += 2;
        }
        while (v59 < v58);
      }
      BOOL v31 = v56 <= v58;
      uint64_t v63 = v56 - v58;
      if (!v31)
      {
        uint64_t v64 = v57 >> 1;
        uint64_t v65 = (double *)(v53 + 16 * v64);
        uint64_t v66 = v54[v64].f64;
        do
        {
          double v67 = *v65++;
          *uint64_t v66 = v67 + *v66;
          ++v66;
          --v63;
        }
        while (v63);
      }
      uint64_t v68 = *(void *)(v96[0] + 16 * v52);
      uint64_t v69 = *a4;
      uint64_t v70 = (uint64_t)a4[1];
      if (v70 >= 0) {
        uint64_t v71 = (uint64_t)a4[1];
      }
      else {
        uint64_t v71 = v70 + 1;
      }
      int64_t v72 = v71 & 0xFFFFFFFFFFFFFFFELL;
      if (v70 >= 2)
      {
        int64_t v73 = 0;
        double v74 = *a4;
        uint64_t v75 = *(float64x2_t **)(v96[0] + 16 * v52);
        do
        {
          float64x2_t v76 = *v75++;
          float64x2_t *v74 = vaddq_f64(v76, *v74);
          ++v74;
          v73 += 2;
        }
        while (v73 < v72);
      }
      BOOL v31 = v70 <= v72;
      uint64_t v77 = v70 - v72;
      if (!v31)
      {
        uint64_t v78 = v71 >> 1;
        char v79 = (double *)(v68 + 16 * v78);
        long long v80 = v69[v78].f64;
        do
        {
          double v81 = *v79++;
          double *v80 = v81 + *v80;
          ++v80;
          --v77;
        }
        while (v77);
      }
      *a5 = *((double *)__p[0] + v52++) + *a5;
    }
    while (v52 < *(void *)(a1 + 432));
  }
  uint64_t v82 = (int *)global_logger();
  if (v82[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v82)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int v83 = (file_logger *)global_logger();
    char v84 = file_logger::start_stream(v83, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/logistic_regression_opt_interface.cpp", "compute_second_order_statistics", 477, 1);
    unsigned __int8 v85 = pthread_getspecific(*((void *)v84 + 74));
    if (v85 && *((unsigned char *)v85 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85 + 2, (uint64_t)"Computation done at ", 20);
    }
    gettimeofday(&v99, 0);
    uint64_t v86 = file_logger::operator<<<double>((uint64_t)v84);
    uint64_t v87 = pthread_getspecific(*(void *)(v86 + 592));
    if (v87 && *((unsigned char *)v87 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87 + 2, (uint64_t)"s", 1);
    }
    uint64_t v88 = pthread_getspecific(*(void *)(v86 + 592));
    if (v88)
    {
      if (*((unsigned char *)v88 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(void *)(v88[2] - 24) + 16));
        int v89 = std::locale::use_facet((const std::locale *)&v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
        std::locale::~locale((std::locale *)&v99);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v86);
        if (*(_DWORD *)(v86 + 600) == 7)
        {
          __print_back_trace();
          uint64_t v93 = __cxa_allocate_exception(8uLL);
          void *v93 = "LOG_FATAL encountered";
          __cxa_throw(v93, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v99.__darwin_time_t tv_sec = (__darwin_time_t)v96;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  v99.__darwin_time_t tv_sec = (__darwin_time_t)v97;
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
}

void sub_2244B7F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char **__p, char **a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  long long __p = &a15;
  std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<Eigen::Matrix<double,-1,-1,0,-1,-1>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(uint64_t a1, uint64_t a2, float64x2_t **a3, double *a4)
{
}

void turi::supervised::logistic_regression_opt_interface::compute_validation_first_order_statistics(uint64_t a1, uint64_t a2, float64x2_t **a3, double *a4)
{
}

uint64_t std::map<unsigned long,float>::map[abi:ne180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_2244B8084(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  atomic_ullong v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        atomic_ullong v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        atomic_ullong v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26D783C50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783C50;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3 = a1;
  uint64_t v179 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(unint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  float64x2_t v170 = 0;
  uint64_t v171 = 0;
  unint64_t v8 = *v6;
  if (*v6)
  {
    if (v8 >> 61 || (unint64_t v9 = (char *)malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v135 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v135, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    float64x2_t v170 = v9;
  }
  uint64_t v171 = v8;
  uint64_t v10 = *(void *)(v7 + 408);
  float64x2_t v168 = 0;
  unint64_t v169 = 0;
  unint64_t v11 = v10 - 1;
  if (v10 == 1)
  {
    v166 = 0;
    unint64_t v167 = 0;
LABEL_16:
    unint64_t v17 = 0;
    unint64_t v167 = 0;
    int64_t v164 = 0;
    v165 = 0;
    goto LABEL_17;
  }
  if (v11 >> 61 || (uint64_t v12 = (double *)malloc_type_malloc(8 * v11, 0x1E76AA36uLL)) == 0)
  {
    double v136 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v137 = std::bad_alloc::bad_alloc(v136);
    __cxa_throw(v137, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v13 = *(void *)(v7 + 408);
  float64x2_t v168 = v12;
  unint64_t v169 = v11;
  v166 = 0;
  unint64_t v167 = 0;
  unint64_t v14 = v13 - 1;
  if (v13 == 1) {
    goto LABEL_16;
  }
  if (v14 >> 61 || (int64_t v15 = malloc_type_malloc(8 * v14, 0x1E76AA36uLL)) == 0)
  {
    double v138 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v139 = std::bad_alloc::bad_alloc(v138);
    __cxa_throw(v139, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v16 = *(void *)(v7 + 408);
  v166 = v15;
  unint64_t v167 = v14;
  int64_t v164 = 0;
  v165 = 0;
  unint64_t v17 = (void **)(v16 - 1);
  if (v16 != 1)
  {
    if ((unint64_t)v17 >> 61 || (unint64_t v18 = malloc_type_malloc(8 * (void)v17, 0x1E76AA36uLL)) == 0)
    {
      uint64_t v142 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v143 = std::bad_alloc::bad_alloc(v142);
      __cxa_throw(v143, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    int64_t v164 = v18;
  }
LABEL_17:
  v165 = v17;
  uint64_t v19 = *(long long ***)(v3 + 24);
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  BOOL v161 = 0;
  uint64_t v20 = *v19;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v161, (unint64_t)v19[1], (uint64_t)v19[1], 1);
  uint64_t v21 = (char *)v161;
  uint64_t v22 = v162 * v163;
  if (v162 * v163 >= 0) {
    uint64_t v23 = v162 * v163;
  }
  else {
    uint64_t v23 = v22 + 1;
  }
  int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (v22 >= 2)
  {
    int64_t v25 = 0;
    int64_t v26 = v161;
    int64_t v27 = v20;
    do
    {
      long long v28 = *v27++;
      *v26++ = v28;
      v25 += 2;
    }
    while (v25 < v24);
  }
  BOOL v29 = v22 <= v24;
  uint64_t v30 = v22 - v24;
  if (!v29)
  {
    uint64_t v31 = v23 >> 1;
    uint64_t v32 = (uint64_t *)&v20[v23 >> 1];
    uint64_t v33 = &v21[16 * v31];
    do
    {
      uint64_t v34 = *v32++;
      *(void *)uint64_t v33 = v34;
      v33 += 8;
      --v30;
    }
    while (v30);
  }
  uint64_t v35 = **(void **)(v3 + 8);
  uint64_t v36 = *(void *)(v7 + 408);
  uint64_t v37 = v36 - 1;
  if (v35) {
    BOOL v38 = v36 == 1;
  }
  else {
    BOOL v38 = 1;
  }
  if (!v38 && 0x7FFFFFFFFFFFFFFFLL / v37 < v35)
  {
    double v140 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v141 = std::bad_alloc::bad_alloc(v140);
    __cxa_throw(v141, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v161, v37 * v35, v35, v37);
  unint64_t v160 = 0;
  turi::ml_data::get_iterator(*(turi::ml_data **)(v3 + 32), v4, v5, (uint64_t)v147);
  if (v153 != v152)
  {
    v144 = (uint64_t **)(v7 + 440);
    uint64_t v145 = v7;
    do
    {
      uint64_t v39 = v155;
      if (*(unsigned char *)(v155 + 16)) {
        BOOL v40 = *(unsigned char *)(v155 + 17) == 0;
      }
      else {
        BOOL v40 = 1;
      }
      if (v40)
      {
        unint64_t v41 = 0;
      }
      else
      {
        if (*(unsigned char *)(v155 + 18)) {
          int64_t v42 = (void *)(v155 + 24);
        }
        else {
          int64_t v42 = (void *)(*(void *)(v155 + 96) + 8 * v157);
        }
        unint64_t v41 = *(void *)(*(void *)(v155 + 96) + 8 * v157 + 8 * *v42 - 8);
      }
      unint64_t v160 = v41;
      if (v41 < *(void *)(v7 + 408))
      {
        uint64_t v43 = v4;
        uint64_t v44 = v3;
        float64x2_t v45 = v156;
        if (v156) {
          atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v46 = v157;
        int v47 = v159;
        double v49 = v170;
        int64_t v48 = v171;
        if (v171 >= 0) {
          uint64_t v50 = v171;
        }
        else {
          uint64_t v50 = v171 + 1;
        }
        int64_t v51 = v50 & 0xFFFFFFFFFFFFFFFELL;
        if (v171 >= 2)
        {
          unint64_t v52 = 2;
          if (v51 > 2) {
            unint64_t v52 = v50 & 0xFFFFFFFFFFFFFFFELL;
          }
          uint64_t v53 = v45;
          bzero(v170, ((8 * v52 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          float64x2_t v45 = v53;
        }
        if (v51 < v48)
        {
          uint64_t v54 = v45;
          bzero(&v49[16 * (v50 >> 1)], 8 * v48 - 16 * (v50 >> 1));
          float64x2_t v45 = v54;
        }
        uint64_t v3 = v44;
        uint64_t v4 = v43;
        if (v47)
        {
          uint64_t v55 = *(void *)(v39 + 56);
          if (v55)
          {
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            int64_t v58 = (unint64_t *)(*(void *)(v39 + 96) + 8 * v46 + 8 * (*(unsigned char *)(v39 + 18) == 0));
            uint64_t v59 = *(void *)(v39 + 72);
            unint64_t v60 = v170;
            do
            {
              uint64_t v61 = *(void *)(v59 + 16 * v56);
              unint64_t v62 = *(void *)(v61 + 64);
              switch(*(_DWORD *)(v61 + 24))
              {
                case 0:
                  if (v62) {
                    *(void *)&v60[8 * v57] = *v58;
                  }
                  ++v58;
                  goto LABEL_87;
                case 1:
                  unint64_t v71 = *v58++;
                  unint64_t v70 = v71;
                  --v57;
                  if (v71 < v62 && v70 != 0) {
                    *(void *)&v60[8 * v70 + 8 * v57] = 0x3FF0000000000000;
                  }
                  goto LABEL_87;
                case 2:
                  uint64_t v63 = *(void *)(v61 + 72);
                  if (!v63) {
                    goto LABEL_87;
                  }
                  uint64_t v64 = 0;
                  unint64_t v65 = 0;
                  uint64_t v66 = &v170[8 * v57];
                  do
                  {
                    if (v65 < v62) {
                      *(void *)&v66[8 * v65] = v58[v65];
                    }
                    ++v65;
                    v64 -= 8;
                  }
                  while (v63 != v65);
                  break;
                case 3:
                  uint64_t v74 = *v58++;
                  uint64_t v73 = v74;
                  --v57;
                  if (v74)
                  {
                    uint64_t v75 = v170;
                    do
                    {
                      unint64_t v76 = *v58;
                      if (*v58 < v62 && v76 != 0) {
                        *(void *)&v75[8 * v76 + 8 * v57] = 0x3FF0000000000000;
                      }
                      ++v58;
                      --v73;
                    }
                    while (v73);
                  }
                  goto LABEL_87;
                case 4:
                  unint64_t v80 = *v58;
                  uint64_t v78 = v58 + 1;
                  unint64_t v79 = v80;
                  if (v80)
                  {
                    double v81 = v170;
                    uint64_t v82 = v78;
                    do
                    {
                      unint64_t v84 = *v82;
                      v82 += 2;
                      unint64_t v83 = v84;
                      if (v84 < v62) {
                        *(void *)&v81[8 * v83 + 8 * v57] = v78[1];
                      }
                      uint64_t v78 = v82;
                      --v79;
                    }
                    while (v79);
                  }
                  else
                  {
                    uint64_t v82 = v78;
                  }
                  v57 += v62;
                  int64_t v58 = v82;
                  goto LABEL_88;
                case 7:
                  uint64_t v67 = *(void *)(v61 + 72);
                  if (!v67) {
                    goto LABEL_87;
                  }
                  uint64_t v64 = 0;
                  unint64_t v68 = 0;
                  uint64_t v69 = &v170[8 * v57];
                  do
                  {
                    if (v68 < v62) {
                      *(void *)&v69[8 * v68] = v58[v68];
                    }
                    ++v68;
                    v64 -= 8;
                  }
                  while (v67 != v68);
                  break;
                default:
                  goto LABEL_88;
              }
              int64_t v58 = (unint64_t *)((char *)v58 - v64);
LABEL_87:
              v57 += v62;
LABEL_88:
              ++v56;
            }
            while (v56 != v55);
          }
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        *(void *)&v170[8 * **(void **)(v3 + 8) - 8] = 0x3FF0000000000000;
        uint64_t v7 = v145;
        if (*(unsigned char *)(v145 + 480)) {
          (*(void (**)(void, char **))(**(void **)(v145 + 464) + 16))(*(void *)(v145 + 464), &v170);
        }
        if (*(unsigned char *)(v155 + 16)) {
          BOOL v85 = *(unsigned char *)(v155 + 17) == 0;
        }
        else {
          BOOL v85 = 1;
        }
        if (v85)
        {
          unint64_t v86 = 0;
        }
        else
        {
          uint64_t v87 = (void *)(v155 + 24);
          if (!*(unsigned char *)(v155 + 18)) {
            uint64_t v87 = (void *)(*(void *)(v155 + 96) + 8 * v157);
          }
          unint64_t v86 = *(void *)(*(void *)(v155 + 96) + 8 * v157 + 8 * *v87 - 8);
        }
        unint64_t v160 = v86;
        uint64_t v173 = &v161;
        int64_t v174 = &v170;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(&v168, (uint64_t **)&v173);
        uint64_t v88 = v168;
        if (v160) {
          double v89 = v168[v160 - 1];
        }
        else {
          double v89 = 0.0;
        }
        uint64_t v90 = v169;
        if (v167 != v169)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v166, v169, 1);
          uint64_t v90 = v167;
        }
        double v91 = (uint64_t *)v166;
        if (v90 >= 1)
        {
          char v92 = (long double *)v166;
          uint64_t v93 = v90;
          do
          {
            long double v94 = *v88++;
            *v92++ = exp(v94);
            --v93;
          }
          while (v93);
        }
        if (v90)
        {
          uint64_t v173 = (void **)v91;
          int64_t v175 = &v166;
          double v95 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v173);
          double v91 = (uint64_t *)v166;
        }
        else
        {
          double v95 = 0.0;
        }
        double v96 = log1p(v95);
        uint64_t v97 = v167;
        if (v165 != (void **)v167)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v164, v167, 1);
          uint64_t v97 = (uint64_t)v165;
        }
        double v98 = v95 + 1.0;
        timeval v99 = (char *)v164;
        if (v97 >= 0) {
          uint64_t v100 = v97;
        }
        else {
          uint64_t v100 = v97 + 1;
        }
        int64_t v101 = v100 & 0xFFFFFFFFFFFFFFFELL;
        if (v97 >= 2)
        {
          int64_t v102 = 0;
          float64x2_t v103 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v98, 0);
          uint64_t v104 = (float64x2_t *)v164;
          uint64_t v105 = (float64x2_t *)v91;
          do
          {
            float64x2_t v106 = *v105++;
            *v104++ = vdivq_f64(v106, v103);
            v102 += 2;
          }
          while (v102 < v101);
        }
        BOOL v107 = __OFSUB__(v97, v101);
        uint64_t v108 = v97 - v101;
        if (!((v108 < 0) ^ v107 | (v108 == 0)))
        {
          uint64_t v109 = v100 >> 1;
          float64x2_t v110 = (double *)&v91[2 * (v100 >> 1)];
          uint64_t v111 = (double *)&v99[16 * v109];
          do
          {
            double v112 = *v110++;
            *v111++ = v112 / v98;
            --v108;
          }
          while (v108);
        }
        if (v160) {
          *((double *)v164 + v160 - 1) = *((double *)v164 + v160 - 1) + -1.0;
        }
        uint64_t v172 = &v160;
        double v113 = *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v144, &v160, (uint64_t)&std::piecewise_construct, &v172)+ 10);
        int64_t v174 = (char **)v171;
        int64_t v175 = v165;
        double v176 = v113;
        double v177 = &v170;
        double v178 = &v164;
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(&v146, &v173);
        float64x2_t v114 = (char *)v146;
        uint64_t v115 = (float64x2_t **)(**(void **)(v3 + 40) + 16 * v4);
        uint64_t v116 = *v115;
        uint64_t v117 = (uint64_t)v115[1];
        if (v117 >= 0) {
          uint64_t v118 = (uint64_t)v115[1];
        }
        else {
          uint64_t v118 = v117 + 1;
        }
        int64_t v119 = v118 & 0xFFFFFFFFFFFFFFFELL;
        if (v117 >= 2)
        {
          int64_t v120 = 0;
          v121 = v116;
          uint64_t v122 = (float64x2_t *)v146;
          do
          {
            float64x2_t v123 = *v122++;
            float64x2_t *v121 = vaddq_f64(v123, *v121);
            ++v121;
            v120 += 2;
          }
          while (v120 < v119);
        }
        BOOL v29 = v117 <= v119;
        uint64_t v124 = v117 - v119;
        if (!v29)
        {
          uint64_t v125 = v118 >> 1;
          uint64_t v126 = (double *)&v114[16 * v125];
          f64 = v116[v125].f64;
          do
          {
            double v128 = *v126++;
            double *f64 = v128 + *f64;
            ++f64;
            --v124;
          }
          while (v124);
        }
        uint64_t v173 = (void **)&v160;
        *(double *)(**(void **)(v3 + 48) + 8 * v4) = *(double *)(**(void **)(v3 + 48) + 8 * v4)
                                                     + *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v144, &v160, (uint64_t)&std::piecewise_construct, &v173)+ 10)* (v96 - v89);
        free(v146);
      }
      if (v159 | v149)
      {
        float64x2_t v129 = (uint64_t *)(*(void *)(v155 + 96) + 8 * v157);
        if (v150) {
          float64x2_t v129 = &v151;
        }
        v157 += *v129;
      }
      uint64_t v130 = v153 + 1;
      uint64_t v131 = v152;
      uint64_t v132 = ++v153 - v148 * v154;
      uint64_t v158 = v132;
      if (v132 == v148 && v130 != v152)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v147);
        uint64_t v131 = v152;
        uint64_t v130 = v153;
      }
    }
    while (v130 != v131);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v147);
  free(v161);
  free(v164);
  free(v166);
  free(v168);
  free(v170);
}

void sub_2244B8BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  free(a64);
  free(a66);
  free(*(void **)(v66 - 248));
  free(*(void **)(v66 - 232));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(void *a1, uint64_t **a2)
{
  int64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v4 = (*a2)[2];
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v27, v4, 1);
    unint64_t v5 = (char *)v27;
    uint64_t v6 = v28;
    uint64_t v7 = (unint64_t *)a2[1];
    if (v28 >= 0) {
      uint64_t v8 = v28;
    }
    else {
      uint64_t v8 = v28 + 1;
    }
    int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v28 >= 2)
    {
      unint64_t v10 = 2;
      if (v9 > 2) {
        unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v27, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6) {
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
    }
  }
  else
  {
    uint64_t v7 = (unint64_t *)a2[1];
  }
  unint64_t v11 = *a2;
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v30 = v11;
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(&v30, v7, (uint64_t *)&v27, (double *)&v29);
  uint64_t v13 = (long long *)v27;
  uint64_t v12 = v28;
  if (a1[1] != v28)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v28, 1);
    uint64_t v12 = a1[1];
  }
  unint64_t v14 = (_OWORD *)*a1;
  if (v12 >= 0) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v12 + 1;
  }
  int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v17 = 0;
    unint64_t v18 = (_OWORD *)*a1;
    uint64_t v19 = v13;
    do
    {
      long long v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  BOOL v21 = __OFSUB__(v12, v16);
  uint64_t v22 = v12 - v16;
  if (!((v22 < 0) ^ v21 | (v22 == 0)))
  {
    uint64_t v23 = v15 >> 1;
    int64_t v24 = (uint64_t *)&v13[v15 >> 1];
    int64_t v25 = &v14[v23];
    do
    {
      uint64_t v26 = *v24++;
      *v25++ = v26;
      --v22;
    }
    while (v22);
  }
  free(v27);
}

void sub_2244B8E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(void *a1, void *a2)
{
  v20[1] = *(uint64_t **)MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2[4] + 8);
  uint64_t v5 = *(void *)(a2[5] + 8);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && 0x7FFFFFFFFFFFFFFFLL / v5 < v4) {
    goto LABEL_13;
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v5 * v4, v4, v5);
  uint64_t v7 = a2[4];
  uint64_t v8 = (uint64_t *)a2[5];
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v10 = a2[3];
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  uint64_t v19 = v7;
  v20[0] = v8;
  uint64_t v11 = v8[1];
  if (a1[1] != v9 || a1[2] != v11)
  {
    if (!v9 || !v11 || 0x7FFFFFFFFFFFFFFFLL / v11 >= v9)
    {
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v11 * v9, v9, v11);
      goto LABEL_12;
    }
LABEL_13:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v14 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v14, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
LABEL_12:
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(a1, (uint64_t)v16, v20, (uint64_t)&v15);
  return a1;
}

void sub_2244B8F8C(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26D783CD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783CD0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v122 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = **(void **)(a1 + 8);
  LOBYTE(v151) = 0;
  long long v152 = 0u;
  long long v153 = 0u;
  uint64_t v154 = v6;
  uint64_t v7 = *(void *)(v5 + 408);
  unsigned __int8 v149 = 0;
  unint64_t v150 = 0;
  unint64_t v8 = v7 - 1;
  if (v7 == 1)
  {
    int64_t v147 = 0;
    unint64_t v148 = 0;
LABEL_12:
    unint64_t v14 = 0;
    unint64_t v148 = 0;
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    goto LABEL_13;
  }
  if (v8 >> 61 || (uint64_t v9 = (double *)malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v111 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v111, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v10 = *(void *)(v5 + 408);
  unsigned __int8 v149 = v9;
  unint64_t v150 = v8;
  int64_t v147 = 0;
  unint64_t v148 = 0;
  unint64_t v11 = v10 - 1;
  if (v10 == 1) {
    goto LABEL_12;
  }
  if (v11 >> 61 || (uint64_t v12 = (float64x2_t *)malloc_type_malloc(8 * v11, 0x1E76AA36uLL)) == 0)
  {
    double v112 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v113 = std::bad_alloc::bad_alloc(v112);
    __cxa_throw(v113, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v13 = *(void *)(v5 + 408);
  int64_t v147 = v12;
  unint64_t v148 = v11;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  unint64_t v14 = v13 - 1;
  if (v13 != 1)
  {
    if (v14 >> 61 || (char v15 = (double *)malloc_type_malloc(8 * v14, 0x1E76AA36uLL)) == 0)
    {
      uint64_t v116 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v117 = std::bad_alloc::bad_alloc(v116);
      __cxa_throw(v117, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    uint64_t v145 = v15;
  }
LABEL_13:
  uint64_t v146 = v14;
  int64_t v16 = *(long long ***)(a1 + 24);
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  uint64_t v142 = 0;
  uint64_t v17 = *v16;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v142, (unint64_t)v16[1], (uint64_t)v16[1], 1);
  uint64_t v18 = (char *)v142;
  uint64_t v19 = v143 * v144;
  if (v143 * v144 >= 0) {
    uint64_t v20 = v143 * v144;
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  int64_t v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
  if (v19 >= 2)
  {
    int64_t v22 = 0;
    uint64_t v23 = v142;
    int64_t v24 = v17;
    do
    {
      long long v25 = *v24++;
      *v23++ = v25;
      v22 += 2;
    }
    while (v22 < v21);
  }
  BOOL v26 = v19 <= v21;
  uint64_t v27 = v19 - v21;
  if (!v26)
  {
    uint64_t v28 = v20 >> 1;
    uint64_t v29 = (uint64_t *)&v17[v20 >> 1];
    uint64_t v30 = &v18[16 * v28];
    do
    {
      uint64_t v31 = *v29++;
      *(void *)uint64_t v30 = v31;
      v30 += 8;
      --v27;
    }
    while (v27);
  }
  uint64_t v32 = **(void **)(a1 + 8);
  uint64_t v33 = *(void *)(v5 + 408);
  uint64_t v34 = v33 - 1;
  if (v32) {
    BOOL v35 = v33 == 1;
  }
  else {
    BOOL v35 = 1;
  }
  if (!v35 && 0x7FFFFFFFFFFFFFFFLL / v34 < v32)
  {
    float64x2_t v114 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v115 = std::bad_alloc::bad_alloc(v114);
    __cxa_throw(v115, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v142, v34 * v32, v32, v34);
  unint64_t v141 = 0;
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 32), v122, v4, (uint64_t)v128);
  if (v134 != v133)
  {
    int64_t v120 = (uint64_t **)(v5 + 440);
    uint64_t v118 = a1;
    uint64_t v121 = v5;
    do
    {
      uint64_t v36 = v136;
      if (*(unsigned char *)(v136 + 16)) {
        BOOL v37 = *(unsigned char *)(v136 + 17) == 0;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37)
      {
        unint64_t v38 = 0;
      }
      else
      {
        if (*(unsigned char *)(v136 + 18)) {
          uint64_t v39 = (void *)(v136 + 24);
        }
        else {
          uint64_t v39 = (void *)(*(void *)(v136 + 96) + 8 * v138);
        }
        unint64_t v38 = *(void *)(*(void *)(v136 + 96) + 8 * v138 + 8 * *v39 - 8);
      }
      unint64_t v141 = v38;
      if (v38 < *(void *)(v5 + 408))
      {
        BOOL v40 = v137;
        if (v137) {
          atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int64_t v119 = v40;
        *(void *)&long long v153 = 0;
        if (v140)
        {
          uint64_t v41 = *(void *)(v36 + 56);
          if (v41)
          {
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = (uint64_t *)(*(void *)(v36 + 96) + 8 * v138 + 8 * (*(unsigned char *)(v36 + 18) == 0));
            uint64_t v123 = *(void *)(v36 + 56);
            do
            {
              uint64_t v45 = *(void *)(*(void *)(v36 + 72) + 16 * v42);
              unint64_t v46 = *(void *)(v45 + 64);
              switch(*(_DWORD *)(v45 + 24))
              {
                case 0:
                  uint64_t v47 = *v44++;
                  uint64_t v48 = v47;
                  if (v46)
                  {
                    uint64_t v124 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v152, (int)v43, &v124) = v48;
                  }
                  goto LABEL_77;
                case 1:
                  unint64_t v60 = *v44++;
                  unint64_t v59 = v60;
                  if (v60 < v46 && v59 != 0)
                  {
                    uint64_t v124 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v152, (int)v59 + (int)v43 - 1, &v124) = 0x3FF0000000000000;
                  }
                  goto LABEL_72;
                case 2:
                  uint64_t v49 = *(void *)(v45 + 72);
                  if (v49)
                  {
                    unint64_t v50 = 0;
                    uint64_t v51 = v43 << 32;
                    do
                    {
                      uint64_t v52 = *v44++;
                      uint64_t v53 = v52;
                      if (v50 < v46)
                      {
                        uint64_t v124 = 0;
                        *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v152, v51 >> 32, &v124) = v53;
                      }
                      ++v50;
                      v51 += 0x100000000;
                    }
                    while (v49 != v50);
                  }
                  goto LABEL_59;
                case 3:
                  uint64_t v63 = *v44++;
                  for (uint64_t i = v63; i; --i)
                  {
                    uint64_t v64 = *v44;
                    if (*v44 < v46 && v64 != 0)
                    {
                      uint64_t v124 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v152, (int)v64 + (int)v43 - 1, &v124) = 0x3FF0000000000000;
                    }
                    ++v44;
                  }
LABEL_72:
                  uint64_t v43 = v46 + v43 - 1;
                  break;
                case 4:
                  uint64_t v67 = *v44++;
                  for (uint64_t j = v67; j; --j)
                  {
                    uint64_t v68 = *v44;
                    if (*v44 < v46)
                    {
                      uint64_t v69 = v44[1];
                      uint64_t v124 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v152, (int)v68 + (int)v43, &v124) = v69;
                    }
                    v44 += 2;
                  }
LABEL_77:
                  v43 += v46;
                  break;
                case 7:
                  uint64_t v54 = *(void *)(v45 + 72);
                  if (v54)
                  {
                    unint64_t v55 = 0;
                    uint64_t v56 = v43 << 32;
                    do
                    {
                      uint64_t v57 = *v44++;
                      uint64_t v58 = v57;
                      if (v55 < v46)
                      {
                        uint64_t v124 = 0;
                        *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v152, v56 >> 32, &v124) = v58;
                      }
                      ++v55;
                      v56 += 0x100000000;
                    }
                    while (v54 != v55);
                  }
LABEL_59:
                  v43 += v46;
                  uint64_t v41 = v123;
                  break;
                default:
                  break;
              }
              ++v42;
            }
            while (v42 != v41);
          }
        }
        if (v119) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v119);
        }
        uint64_t v70 = **(_DWORD **)(v118 + 8) - 1;
        uint64_t v124 = 0;
        *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v152, v70, &v124) = 0x3FF0000000000000;
        if (*(unsigned char *)(v121 + 480)) {
          (*(void (**)(void, uint64_t *))(**(void **)(v121 + 464) + 40))(*(void *)(v121 + 464), &v151);
        }
        if (*(unsigned char *)(v136 + 16)) {
          BOOL v71 = *(unsigned char *)(v136 + 17) == 0;
        }
        else {
          BOOL v71 = 1;
        }
        if (v71)
        {
          unint64_t v72 = 0;
        }
        else
        {
          uint64_t v73 = (void *)(v136 + 24);
          if (!*(unsigned char *)(v136 + 18)) {
            uint64_t v73 = (void *)(*(void *)(v136 + 96) + 8 * v138);
          }
          unint64_t v72 = *(void *)(*(void *)(v136 + 96) + 8 * v138 + 8 * *v73 - 8);
        }
        unint64_t v141 = v72;
        uint64_t v124 = (float64x2_t *)&v142;
        *(void *)&long long v125 = &v151;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(&v149, &v124);
        uint64_t v74 = v149;
        if (v141) {
          double v75 = v149[v141 - 1];
        }
        else {
          double v75 = 0.0;
        }
        uint64_t v76 = v150;
        if (v148 != v150)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v147, v150, 1);
          uint64_t v76 = v148;
        }
        uint64_t v77 = v147;
        if (v76 >= 1)
        {
          uint64_t v78 = (long double *)v147;
          uint64_t v79 = v76;
          do
          {
            long double v80 = *v74++;
            *v78++ = exp(v80);
            --v79;
          }
          while (v79);
        }
        if (v76)
        {
          uint64_t v124 = v77;
          *((void *)&v125 + 1) = &v147;
          uint64_t v5 = v121;
          double v81 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run(&v124);
          uint64_t v77 = v147;
        }
        else
        {
          double v81 = 0.0;
          uint64_t v5 = v121;
        }
        double v82 = log1p(v81);
        uint64_t v83 = v148;
        if (v146 != v148)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v145, v148, 1);
          uint64_t v83 = v146;
        }
        double v84 = v81 + 1.0;
        BOOL v85 = v145;
        if (v83 >= 0) {
          uint64_t v86 = v83;
        }
        else {
          uint64_t v86 = v83 + 1;
        }
        int64_t v87 = v86 & 0xFFFFFFFFFFFFFFFELL;
        if (v83 >= 2)
        {
          int64_t v88 = 0;
          float64x2_t v89 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v84, 0);
          uint64_t v90 = (float64x2_t *)v145;
          double v91 = v77;
          do
          {
            float64x2_t v92 = *v91++;
            *v90++ = vdivq_f64(v92, v89);
            v88 += 2;
          }
          while (v88 < v87);
        }
        BOOL v93 = __OFSUB__(v83, v87);
        uint64_t v94 = v83 - v87;
        if (!((v94 < 0) ^ v93 | (v94 == 0)))
        {
          uint64_t v95 = v86 >> 1;
          f64 = v77[v86 >> 1].f64;
          uint64_t v97 = &v85[2 * v95];
          do
          {
            double v98 = *f64++;
            *v97++ = v98 / v84;
            --v94;
          }
          while (v94);
        }
        uint64_t v99 = *(void *)(v5 + 424);
        LOBYTE(v124) = 0;
        long long v125 = 0u;
        long long v126 = 0u;
        uint64_t v127 = v99;
        if (v141) {
          v145[v141 - 1] = v145[v141 - 1] + -1.0;
        }
        turi::supervised::flattened_sparse_vector_outer_prod(&v151, &v145, (uint64_t)&v124);
        v155[0] = &v141;
        uint64_t v100 = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v120, &v141, (uint64_t)&std::piecewise_construct, v155);
        uint64_t v101 = v126;
        if ((uint64_t)v126 >= 1)
        {
          double v102 = *((float *)v100 + 10);
          float64x2_t v103 = (double *)v125;
          do
          {
            *float64x2_t v103 = *v103 * v102;
            ++v103;
            --v101;
          }
          while (v101);
        }
        turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(**(void **)(v118 + 40) + 16 * v122), &v124);
        v155[0] = &v141;
        *(double *)(**(void **)(v118 + 48) + 8 * v122) = *(double *)(**(void **)(v118 + 48) + 8 * v122)
                                                         + *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v120, &v141, (uint64_t)&std::piecewise_construct, v155)+ 10)* (v82 - v75);
        Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v125);
      }
      if (v140 | v130)
      {
        uint64_t v104 = (uint64_t *)(*(void *)(v136 + 96) + 8 * v138);
        if (v131) {
          uint64_t v104 = &v132;
        }
        v138 += *v104;
      }
      uint64_t v105 = v134 + 1;
      uint64_t v106 = v133;
      uint64_t v107 = ++v134 - v129 * v135;
      uint64_t v139 = v107;
      if (v107 == v129 && v105 != v133)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v128);
        uint64_t v106 = v133;
        uint64_t v105 = v134;
      }
    }
    while (v105 != v106);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v128);
  free(v142);
  free(v145);
  free(v147);
  free(v149);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v152);
}

void sub_2244B997C(_Unwind_Exception *a1)
{
  free(*(void **)(v2 - 248));
  free(*(void **)(v2 - 232));
  free(*(void **)(v2 - 216));
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_first_order_statistics(turi::ml_data const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,1,0,-1,1>&,double &,unsigned long,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(void *a1, void *a2)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v4 = *(void *)(*a2 + 16);
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v27, v4, 1);
    uint64_t v5 = (char *)v27;
    uint64_t v6 = v28;
    uint64_t v7 = a2[1];
    if (v28 >= 0) {
      uint64_t v8 = v28;
    }
    else {
      uint64_t v8 = v28 + 1;
    }
    int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v28 >= 2)
    {
      unint64_t v10 = 2;
      if (v9 > 2) {
        unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v27, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6) {
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
    }
  }
  else
  {
    uint64_t v7 = a2[1];
  }
  uint64_t v11 = *a2;
  v31[1] = v7;
  uint64_t v32 = &v27;
  v31[0] = 0;
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v30 = v11;
  Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run((uint64_t)v31, (uint64_t)&v30, (uint64_t **)&v32, (double *)&v29);
  uint64_t v13 = (long long *)v27;
  uint64_t v12 = v28;
  if (a1[1] != v28)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v28, 1);
    uint64_t v12 = a1[1];
  }
  unint64_t v14 = (_OWORD *)*a1;
  if (v12 >= 0) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v12 + 1;
  }
  int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v17 = 0;
    uint64_t v18 = (_OWORD *)*a1;
    uint64_t v19 = v13;
    do
    {
      long long v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  BOOL v21 = __OFSUB__(v12, v16);
  uint64_t v22 = v12 - v16;
  if (!((v22 < 0) ^ v21 | (v22 == 0)))
  {
    uint64_t v23 = v15 >> 1;
    int64_t v24 = (uint64_t *)&v13[v15 >> 1];
    long long v25 = &v14[v23];
    do
    {
      uint64_t v26 = *v24++;
      *v25++ = v26;
      --v22;
    }
    while (v22);
  }
  free(v27);
}

void sub_2244B9C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26D783D50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783D50;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v202 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(unint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v190 = 0;
  float64x2_t v189 = 0;
  unint64_t v8 = *v6;
  if (*v6)
  {
    if (v8 >> 61 || (int64_t v9 = malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v143 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v143, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    float64x2_t v189 = v9;
  }
  uint64_t v190 = v8;
  unint64_t v188 = 0;
  uint64_t v10 = *(void *)(v7 + 408);
  unint64_t v187 = 0;
  v186 = 0;
  unint64_t v11 = v10 - 1;
  if (v10 == 1)
  {
    unint64_t v185 = 0;
    int64_t v184 = 0;
LABEL_16:
    int64_t v17 = 0;
    unint64_t v185 = 0;
    v182 = 0;
    uint64_t v183 = 0;
    goto LABEL_17;
  }
  if (v11 >> 61 || (uint64_t v12 = malloc_type_malloc(8 * v11, 0x1E76AA36uLL)) == 0)
  {
    uint64_t v144 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v145 = std::bad_alloc::bad_alloc(v144);
    __cxa_throw(v145, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v13 = *(void *)(v7 + 408);
  v186 = v12;
  unint64_t v187 = v11;
  unint64_t v185 = 0;
  int64_t v184 = 0;
  unint64_t v14 = v13 - 1;
  if (v13 == 1) {
    goto LABEL_16;
  }
  if (v14 >> 61 || (uint64_t v15 = malloc_type_malloc(8 * v14, 0x1E76AA36uLL)) == 0)
  {
    uint64_t v146 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int64_t v147 = std::bad_alloc::bad_alloc(v146);
    __cxa_throw(v147, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v16 = *(void *)(v7 + 408);
  int64_t v184 = v15;
  unint64_t v185 = v14;
  v182 = 0;
  uint64_t v183 = 0;
  int64_t v17 = (void **)(v16 - 1);
  if (v16 != 1)
  {
    if ((unint64_t)v17 >> 61 || (uint64_t v18 = malloc_type_malloc(8 * (void)v17, 0x1E76AA36uLL)) == 0)
    {
      long long v152 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v153 = std::bad_alloc::bad_alloc(v152);
      __cxa_throw(v153, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    v182 = v18;
  }
LABEL_17:
  uint64_t v183 = v17;
  uint64_t v19 = *(long long ***)(a1 + 24);
  uint64_t v180 = 0;
  uint64_t v181 = 0;
  uint64_t v179 = 0;
  long long v20 = *v19;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v179, (unint64_t)v19[1], (uint64_t)v19[1], 1);
  BOOL v21 = (char *)v179;
  uint64_t v22 = v180 * v181;
  if (v180 * v181 >= 0) {
    uint64_t v23 = v180 * v181;
  }
  else {
    uint64_t v23 = v22 + 1;
  }
  int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (v22 >= 2)
  {
    int64_t v25 = 0;
    uint64_t v26 = v179;
    uint64_t v27 = v20;
    do
    {
      long long v28 = *v27++;
      *v26++ = v28;
      v25 += 2;
    }
    while (v25 < v24);
  }
  BOOL v29 = v22 <= v24;
  uint64_t v30 = v22 - v24;
  if (!v29)
  {
    uint64_t v31 = v23 >> 1;
    uint64_t v32 = (uint64_t *)&v20[v23 >> 1];
    uint64_t v33 = &v21[16 * v31];
    do
    {
      uint64_t v34 = *v32++;
      *(void *)uint64_t v33 = v34;
      v33 += 8;
      --v30;
    }
    while (v30);
  }
  uint64_t v35 = **(void **)(a1 + 8);
  uint64_t v36 = *(void *)(v7 + 408);
  uint64_t v37 = v36 - 1;
  if (v35) {
    BOOL v38 = v36 == 1;
  }
  else {
    BOOL v38 = 1;
  }
  if (!v38 && 0x7FFFFFFFFFFFFFFFLL / v37 < v35)
  {
    unint64_t v150 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v151 = std::bad_alloc::bad_alloc(v150);
    __cxa_throw(v151, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v179, v37 * v35, v35, v37);
  uint64_t v39 = *(void *)(v7 + 408);
  uint64_t v177 = 0;
  uint64_t v178 = 0;
  double v176 = 0;
  uint64_t v40 = v39 - 1;
  if (v39 != 1 && 0x7FFFFFFFFFFFFFFFLL / v40 < v40)
  {
    unint64_t v148 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned __int8 v149 = std::bad_alloc::bad_alloc(v148);
    __cxa_throw(v149, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v176, v40 * v40, v40, v40);
  turi::ml_data::get_iterator((turi::ml_data *)(v7 + 8), v4, v5, (uint64_t)v163);
  if (v169 != v168)
  {
    do
    {
      uint64_t v42 = v171;
      uint64_t v41 = v172;
      if (v172) {
        atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v159 = v41;
      uint64_t v156 = v173;
      int v157 = v175;
      int64_t v43 = v190;
      uint64_t v44 = (char *)v189;
      if (v190 >= 0) {
        uint64_t v45 = v190;
      }
      else {
        uint64_t v45 = v190 + 1;
      }
      int64_t v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
      if (v190 >= 2)
      {
        uint64_t v154 = v45;
        uint64_t v155 = v42;
        uint64_t v47 = 2;
        if (v46 > 2) {
          uint64_t v47 = v46;
        }
        bzero(v189, ((8 * v47 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        uint64_t v45 = v154;
        uint64_t v42 = v155;
      }
      if (v46 < v43)
      {
        uint64_t v48 = v42;
        bzero(&v44[16 * (v45 >> 1)], 8 * v43 - 16 * (v45 >> 1));
        uint64_t v42 = v48;
      }
      if (v157)
      {
        uint64_t v49 = *(void *)(v42 + 56);
        if (v49)
        {
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          uint64_t v52 = (unint64_t *)(*(void *)(v42 + 96) + 8 * v156 + 8 * (*(unsigned char *)(v42 + 18) == 0));
          uint64_t v53 = *(void *)(v42 + 72);
          uint64_t v54 = v189;
          do
          {
            uint64_t v55 = *(void *)(v53 + 16 * v50);
            unint64_t v56 = *(void *)(v55 + 64);
            switch(*(_DWORD *)(v55 + 24))
            {
              case 0:
                if (v56) {
                  v54[v51] = *v52;
                }
                ++v52;
                goto LABEL_77;
              case 1:
                unint64_t v65 = *v52++;
                unint64_t v64 = v65;
                --v51;
                if (v65 < v56 && v64 != 0) {
                  v54[v64 + v51] = 0x3FF0000000000000;
                }
                goto LABEL_77;
              case 2:
                uint64_t v57 = *(void *)(v55 + 72);
                if (!v57) {
                  goto LABEL_77;
                }
                uint64_t v58 = 0;
                unint64_t v59 = 0;
                unint64_t v60 = (char *)v189 + 8 * v51;
                do
                {
                  if (v59 < v56) {
                    *(void *)&v60[8 * v59] = v52[v59];
                  }
                  ++v59;
                  v58 -= 8;
                }
                while (v57 != v59);
                break;
              case 3:
                uint64_t v68 = *v52++;
                uint64_t v67 = v68;
                --v51;
                if (v68)
                {
                  uint64_t v69 = v189;
                  do
                  {
                    unint64_t v70 = *v52;
                    if (*v52 < v56 && v70 != 0) {
                      v69[v70 + v51] = 0x3FF0000000000000;
                    }
                    ++v52;
                    --v67;
                  }
                  while (v67);
                }
                goto LABEL_77;
              case 4:
                unint64_t v74 = *v52;
                unint64_t v72 = v52 + 1;
                unint64_t v73 = v74;
                if (v74)
                {
                  double v75 = v189;
                  uint64_t v76 = v72;
                  do
                  {
                    unint64_t v78 = *v76;
                    v76 += 2;
                    unint64_t v77 = v78;
                    if (v78 < v56) {
                      v75[v77 + v51] = v72[1];
                    }
                    unint64_t v72 = v76;
                    --v73;
                  }
                  while (v73);
                }
                else
                {
                  uint64_t v76 = v72;
                }
                v51 += v56;
                uint64_t v52 = v76;
                goto LABEL_78;
              case 7:
                uint64_t v61 = *(void *)(v55 + 72);
                if (!v61) {
                  goto LABEL_77;
                }
                uint64_t v58 = 0;
                unint64_t v62 = 0;
                uint64_t v63 = (char *)v189 + 8 * v51;
                do
                {
                  if (v62 < v56) {
                    *(void *)&v63[8 * v62] = v52[v62];
                  }
                  ++v62;
                  v58 -= 8;
                }
                while (v61 != v62);
                break;
              default:
                goto LABEL_78;
            }
            uint64_t v52 = (unint64_t *)((char *)v52 - v58);
LABEL_77:
            v51 += v56;
LABEL_78:
            ++v50;
          }
          while (v50 != v49);
        }
      }
      if (v159) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v159);
      }
      *((void *)v189 + **(void **)(a1 + 8) - 1) = 0x3FF0000000000000;
      if (*(unsigned char *)(v7 + 480)) {
        (*(void (**)(void, void **))(**(void **)(v7 + 464) + 16))(*(void *)(v7 + 464), &v189);
      }
      if (*(unsigned char *)(v171 + 16)) {
        BOOL v79 = *(unsigned char *)(v171 + 17) == 0;
      }
      else {
        BOOL v79 = 1;
      }
      if (v79)
      {
        unint64_t v80 = 0;
      }
      else
      {
        double v81 = (void *)(v171 + 24);
        if (!*(unsigned char *)(v171 + 18)) {
          double v81 = (void *)(*(void *)(v171 + 96) + 8 * v173);
        }
        unint64_t v80 = *(void *)(*(void *)(v171 + 96) + 8 * v173 + 8 * *v81 - 8);
      }
      unint64_t v188 = v80;
      uint64_t v195 = &v179;
      v196 = &v189;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(&v186, (uint64_t **)&v195);
      double v82 = (double *)v186;
      if (v188) {
        double v83 = *((double *)v186 + v188 - 1);
      }
      else {
        double v83 = 0.0;
      }
      uint64_t v84 = v187;
      if (v185 != v187)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v184, v187, 1);
        uint64_t v84 = v185;
      }
      uint64_t v158 = v84;
      unint64_t v160 = (uint64_t *)v184;
      if (v84 >= 1)
      {
        uint64_t v85 = v84;
        uint64_t v86 = (long double *)v184;
        do
        {
          long double v87 = *v82++;
          *v86++ = exp(v87);
          --v85;
        }
        while (v85);
      }
      if (v158)
      {
        uint64_t v195 = (void **)v160;
        double v197 = &v184;
        double v88 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v195);
        float64x2_t v89 = (float64x2_t *)v184;
      }
      else
      {
        double v88 = 0.0;
        float64x2_t v89 = (float64x2_t *)v160;
      }
      uint64_t v90 = v185;
      if (v183 != (void **)v185)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v182, v185, 1);
        uint64_t v90 = (uint64_t)v183;
      }
      double v91 = v88 + 1.0;
      float64x2_t v92 = (char *)v182;
      if (v90 >= 0) {
        uint64_t v93 = v90;
      }
      else {
        uint64_t v93 = v90 + 1;
      }
      int64_t v94 = v93 & 0xFFFFFFFFFFFFFFFELL;
      if (v90 >= 2)
      {
        int64_t v95 = 0;
        float64x2_t v96 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v91, 0);
        uint64_t v97 = (float64x2_t *)v182;
        double v98 = v89;
        do
        {
          float64x2_t v99 = *v98++;
          *v97++ = vdivq_f64(v99, v96);
          v95 += 2;
        }
        while (v95 < v94);
      }
      BOOL v100 = __OFSUB__(v90, v94);
      uint64_t v101 = v90 - v94;
      if (!((v101 < 0) ^ v100 | (v101 == 0)))
      {
        uint64_t v102 = v93 >> 1;
        f64 = v89[v93 >> 1].f64;
        uint64_t v104 = (double *)&v92[16 * v102];
        do
        {
          double v105 = *f64++;
          *v104++ = v105 / v91;
          --v101;
        }
        while (v101);
      }
      uint64_t v195 = &v182;
      double v197 = &v182;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(&v176, (float64x2_t ***)&v195);
      uint64_t v106 = (double *)v182;
      uint64_t v107 = v178;
      if (v178 >= v177) {
        uint64_t v107 = v177;
      }
      if (v107 >= 1)
      {
        uint64_t v108 = (double *)v176;
        uint64_t v109 = 8 * v177 + 8;
        float64x2_t v110 = (double *)v182;
        do
        {
          double v111 = *v110++;
          double *v108 = v111 + *v108;
          uint64_t v108 = (double *)((char *)v108 + v109);
          --v107;
        }
        while (v107);
      }
      double v112 = log1p(v88);
      if (v188) {
        v106[v188 - 1] = v106[v188 - 1] + -1.0;
      }
      uint64_t v195 = (void **)&v188;
      *(double *)(**(void **)(a1 + 32) + 8 * v4) = *(double *)(**(void **)(a1 + 32) + 8 * v4)
                                                   + *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t **)(v7 + 440), &v188, (uint64_t)&std::piecewise_construct, &v195)+ 10)* (v112 - v83);
      v194[0] = &v188;
      double v113 = *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t **)(v7 + 440), &v188, (uint64_t)&std::piecewise_construct, v194)+ 10);
      v196 = (void **)v190;
      double v197 = v183;
      double v198 = v113;
      double v199 = &v189;
      uint64_t v200 = &v182;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(&v162, &v195);
      float64x2_t v114 = (char *)v162;
      uint64_t v115 = (float64x2_t **)(**(void **)(a1 + 40) + 16 * v4);
      uint64_t v116 = *v115;
      uint64_t v117 = (uint64_t)v115[1];
      if (v117 >= 0) {
        uint64_t v118 = (uint64_t)v115[1];
      }
      else {
        uint64_t v118 = v117 + 1;
      }
      int64_t v119 = v118 & 0xFFFFFFFFFFFFFFFELL;
      if (v117 >= 2)
      {
        int64_t v120 = 0;
        uint64_t v121 = v116;
        unint64_t v122 = (float64x2_t *)v162;
        do
        {
          float64x2_t v123 = *v122++;
          float64x2_t *v121 = vaddq_f64(v123, *v121);
          ++v121;
          v120 += 2;
        }
        while (v120 < v119);
      }
      BOOL v29 = v117 <= v119;
      uint64_t v124 = v117 - v119;
      if (!v29)
      {
        uint64_t v125 = v118 >> 1;
        long long v126 = (double *)&v114[16 * v125];
        uint64_t v127 = v116[v125].f64;
        do
        {
          double v128 = *v126++;
          *uint64_t v127 = v128 + *v127;
          ++v127;
          --v124;
        }
        while (v124);
      }
      uint64_t v195 = &v189;
      v196 = &v189;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>>(v161, (uint64_t **)&v195);
      if (*(void *)(v7 + 408) != 1)
      {
        unint64_t v129 = 0;
        do
        {
          unint64_t v130 = 0;
          do
          {
            uint64_t v195 = (void **)&v188;
            char v131 = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t **)(v7 + 440), &v188, (uint64_t)&std::piecewise_construct, &v195);
            double v132 = *((double *)v176 + v129 + v177 * v130) * *((float *)v131 + 10);
            uint64_t v133 = (void *)(**(void **)(a1 + 48) + 24 * v4);
            uint64_t v134 = **(void ****)(a1 + 8);
            uint64_t v135 = v133[1];
            uint64_t v195 = (void **)(*v133 + 8 * (void)v134 * v129 + 8 * v135 * (void)v134 * v130);
            v196 = v134;
            double v197 = v134;
            double v198 = *(double *)&v133;
            double v199 = (void **)((void)v134 * v129);
            uint64_t v200 = (void **)((void)v134 * v130);
            uint64_t v201 = v135;
            v194[1] = *(void **)&v132;
            v194[3] = (void *)v161[0];
            v194[4] = (void *)v161[1];
            v193[0] = v195;
            v193[2] = v135;
            v192[0] = v193;
            v192[1] = v194;
            v192[2] = &v191;
            v192[3] = &v195;
            Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,-1,0,-1,-1> const>>,Eigen::internal::add_assign_op<double,double>,0>,4,0>::run(v192);
            ++v130;
            unint64_t v136 = *(void *)(v7 + 408) - 1;
          }
          while (v130 < v136);
          ++v129;
        }
        while (v129 < v136);
      }
      free(v161[0]);
      free(v162);
      if (v175 | v165)
      {
        double v137 = (uint64_t *)(*(void *)(v171 + 96) + 8 * v173);
        if (v166) {
          double v137 = &v167;
        }
        v173 += *v137;
      }
      uint64_t v138 = v169 + 1;
      uint64_t v139 = v168;
      uint64_t v140 = ++v169 - v164 * v170;
      uint64_t v174 = v140;
      if (v140 == v164 && v138 != v168)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v163);
        uint64_t v139 = v168;
        uint64_t v138 = v169;
      }
    }
    while (v138 != v139);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v163);
  free(v176);
  free(v179);
  free(v182);
  free(v184);
  free(v186);
  free(v189);
}

void sub_2244BA818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  free(a72);
  free((void *)STACK[0x208]);
  free((void *)STACK[0x218]);
  free((void *)STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(void *a1, float64x2_t ***a2)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  BOOL v29 = 0;
  uint64_t v4 = (uint64_t)(*a2)[1];
  unint64_t v5 = (uint64_t **)(a2 + 2);
  uint64_t v6 = (uint64_t)a2[2][1];
  if (v4 | v6)
  {
    if (v4) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v4)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v29, v6 * v4, v4, v6);
  }
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(&v29, a2, v5, (uint64_t)&v32);
  int64_t v9 = (long long *)v29;
  uint64_t v8 = v30;
  uint64_t v10 = v31;
  if (a1[1] != v30 || a1[2] != v31)
  {
    if (v30 && v31 && 0x7FFFFFFFFFFFFFFFLL / v31 < v30)
    {
      uint64_t v27 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v28 = std::bad_alloc::bad_alloc(v27);
      __cxa_throw(v28, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v31 * v30, v30, v31);
    uint64_t v8 = a1[1];
    uint64_t v10 = a1[2];
  }
  unint64_t v11 = (_OWORD *)*a1;
  uint64_t v12 = v8 * v10;
  if (v8 * v10 >= 0) {
    uint64_t v13 = v8 * v10;
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v15 = 0;
    uint64_t v16 = (_OWORD *)*a1;
    int64_t v17 = v9;
    do
    {
      long long v18 = *v17++;
      *v16++ = v18;
      v15 += 2;
    }
    while (v15 < v14);
  }
  BOOL v19 = v12 <= v14;
  uint64_t v20 = v12 - v14;
  if (!v19)
  {
    uint64_t v21 = v13 >> 1;
    uint64_t v22 = (uint64_t *)&v9[v13 >> 1];
    uint64_t v23 = &v11[v21];
    do
    {
      uint64_t v24 = *v22++;
      *v23++ = v24;
      --v20;
    }
    while (v20);
  }
  free(v29);
}

void sub_2244BAADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(void *a1, float64x2_t ***a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = **a3;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  BOOL v7 = *a2;
  uint64_t v8 = (uint64_t)(*a2)[1];
  if (v8)
  {
    int64_t v9 = *v7;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v31, v8, 1);
    uint64_t v10 = (char *)v31;
    uint64_t v11 = v32;
    if (v32 >= 0) {
      uint64_t v12 = v32;
    }
    else {
      uint64_t v12 = v32 + 1;
    }
    int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (v32 >= 2)
    {
      int64_t v14 = 0;
      int64_t v15 = (float64x2_t *)v31;
      uint64_t v16 = v9;
      do
      {
        float64x2_t v17 = *v16++;
        *v15++ = vnegq_f64(v17);
        v14 += 2;
      }
      while (v14 < v13);
    }
    BOOL v20 = __OFSUB__(v11, v13);
    BOOL v18 = v11 == v13;
    BOOL v19 = v11 - v13 < 0;
    uint64_t v21 = v11 - v13;
    if (!(v19 ^ v20 | v18))
    {
      uint64_t v22 = v12 >> 1;
      f64 = v9[v12 >> 1].f64;
      uint64_t v24 = (double *)&v10[16 * v22];
      do
      {
        double v25 = *f64++;
        *v24++ = -v25;
        --v21;
      }
      while (v21);
    }
  }
  uint64_t v26 = a1[2];
  if (v26 >= 1)
  {
    for (uint64_t i = 0; i != v26; ++i)
    {
      uint64_t v28 = a1[1];
      v30[0] = *a1 + 8 * v28 * i;
      v30[1] = v28;
      v30[3] = a1;
      v30[4] = 0;
      v30[5] = i;
      v30[6] = v28;
      uint64_t v29 = *(void *)(v6 + 8 * i);
      uint64_t v34 = v32;
      uint64_t v35 = v29;
      uint64_t v36 = &v31;
      Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set::operator()<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(a4, v30, (uint64_t)v33);
    }
  }
  free(v31);
}

void sub_2244BAC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void *Eigen::PlainObjectBase<Eigen::Matrix<double,-1,-1,0,-1,-1>>::PlainObjectBase<Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>>(void *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = (*a2)[1];
  unint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1][1];
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v4) {
    goto LABEL_17;
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v6 * v4, v4, v6);
  uint64_t v8 = (uint64_t)*a2;
  uint64_t v9 = (*a2)[1];
  uint64_t v10 = a2[1][1];
  if (a1[1] != v9 || a1[2] != v10)
  {
    if (v9) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12 || 0x7FFFFFFFFFFFFFFFLL / v10 >= v9)
    {
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v10 * v9, v9, v10);
      uint64_t v8 = (uint64_t)*a2;
      goto LABEL_16;
    }
LABEL_17:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int64_t v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
LABEL_16:
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(a1, v8, v5, (uint64_t)&v16);
  return a1;
}

void sub_2244BAD68(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26D783DD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D783DD0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v145 = *a2;
  unint64_t v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = **(void **)(a1 + 8);
  LOBYTE(v181) = 0;
  uint64_t v142 = v4;
  long long v182 = 0u;
  long long v183 = 0u;
  uint64_t v184 = v5;
  unint64_t v179 = 0;
  unint64_t v180 = 0;
  uint64_t v6 = *(void *)(v4 + 408);
  uint64_t v178 = 0;
  unint64_t v7 = v6 - 1;
  if (v6 == 1)
  {
    unint64_t v177 = 0;
    double v176 = 0;
LABEL_12:
    unint64_t v13 = 0;
    unint64_t v177 = 0;
    uint64_t v175 = 0;
    uint64_t v174 = 0;
    goto LABEL_13;
  }
  if (v7 >> 61 || (uint64_t v8 = (double *)malloc_type_malloc(8 * v7, 0x1E76AA36uLL)) == 0)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v133 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v133, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v9 = *(void *)(v142 + 408);
  uint64_t v178 = v8;
  unint64_t v179 = v7;
  unint64_t v177 = 0;
  double v176 = 0;
  unint64_t v10 = v9 - 1;
  if (v9 == 1) {
    goto LABEL_12;
  }
  if (v10 >> 61 || (uint64_t v11 = malloc_type_malloc(8 * v10, 0x1E76AA36uLL)) == 0)
  {
    uint64_t v134 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v135 = std::bad_alloc::bad_alloc(v134);
    __cxa_throw(v135, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  uint64_t v12 = *(void *)(v142 + 408);
  double v176 = v11;
  unint64_t v177 = v10;
  uint64_t v175 = 0;
  uint64_t v174 = 0;
  unint64_t v13 = v12 - 1;
  if (v12 != 1)
  {
    if (v13 >> 61 || (int64_t v14 = malloc_type_malloc(8 * v13, 0x1E76AA36uLL)) == 0)
    {
      uint64_t v140 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      unint64_t v141 = std::bad_alloc::bad_alloc(v140);
      __cxa_throw(v141, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    uint64_t v174 = v14;
  }
LABEL_13:
  uint64_t v175 = v13;
  int64_t v15 = *(long long ***)(a1 + 24);
  uint64_t v173 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  char v16 = *v15;
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v171, (unint64_t)v15[1], (uint64_t)v15[1], 1);
  float64x2_t v17 = (char *)v171;
  uint64_t v18 = v172 * v173;
  if (v172 * v173 >= 0) {
    uint64_t v19 = v172 * v173;
  }
  else {
    uint64_t v19 = v18 + 1;
  }
  int64_t v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
  if (v18 >= 2)
  {
    int64_t v21 = 0;
    uint64_t v22 = v171;
    uint64_t v23 = v16;
    do
    {
      long long v24 = *v23++;
      *v22++ = v24;
      v21 += 2;
    }
    while (v21 < v20);
  }
  BOOL v25 = v18 <= v20;
  uint64_t v26 = v18 - v20;
  if (!v25)
  {
    uint64_t v27 = v19 >> 1;
    uint64_t v28 = (uint64_t *)&v16[v19 >> 1];
    uint64_t v29 = &v17[16 * v27];
    do
    {
      uint64_t v30 = *v28++;
      *(void *)uint64_t v29 = v30;
      v29 += 8;
      --v26;
    }
    while (v26);
  }
  uint64_t v31 = **(void **)(a1 + 8);
  uint64_t v32 = *(void *)(v142 + 408);
  uint64_t v33 = v32 - 1;
  if (v31) {
    BOOL v34 = v32 == 1;
  }
  else {
    BOOL v34 = 1;
  }
  if (!v34 && 0x7FFFFFFFFFFFFFFFLL / v33 < v31)
  {
    uint64_t v138 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v139 = std::bad_alloc::bad_alloc(v138);
    __cxa_throw(v139, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v171, v33 * v31, v31, v33);
  uint64_t v35 = *(void *)(v142 + 408);
  uint64_t v170 = 0;
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  uint64_t v36 = v35 - 1;
  if (v35 != 1 && 0x7FFFFFFFFFFFFFFFLL / v36 < v36)
  {
    unint64_t v136 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v137 = std::bad_alloc::bad_alloc(v136);
    __cxa_throw(v137, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v168, v36 * v36, v36, v36);
  turi::ml_data::get_iterator((turi::ml_data *)(v142 + 8), v145, v3, (uint64_t)v155);
  if (v161 != v160)
  {
    uint64_t v144 = (uint64_t **)(v142 + 440);
    do
    {
      uint64_t v39 = v163;
      BOOL v38 = v164;
      if (v164) {
        atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v183 = 0;
      if (v167)
      {
        uint64_t v40 = *(void *)(v39 + 56);
        if (v40)
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          int64_t v43 = (uint64_t *)(*(void *)(v39 + 96) + 8 * v165 + 8 * (*(unsigned char *)(v39 + 18) == 0));
          do
          {
            uint64_t v44 = *(void *)(*(void *)(v39 + 72) + 16 * v41);
            unint64_t v45 = *(void *)(v44 + 64);
            switch(*(_DWORD *)(v44 + 24))
            {
              case 0:
                uint64_t v46 = *v43++;
                uint64_t v47 = v46;
                if (v45)
                {
                  unint64_t v185 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v182, (int)v42, &v185) = v47;
                }
                goto LABEL_69;
              case 1:
                unint64_t v59 = *v43++;
                unint64_t v58 = v59;
                if (v59 < v45 && v58 != 0)
                {
                  unint64_t v185 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v182, (int)v58 + (int)v42 - 1, &v185) = 0x3FF0000000000000;
                }
                goto LABEL_64;
              case 2:
                uint64_t v48 = *(void *)(v44 + 72);
                if (v48)
                {
                  unint64_t v49 = 0;
                  uint64_t v50 = v42 << 32;
                  do
                  {
                    uint64_t v51 = *v43++;
                    uint64_t v52 = v51;
                    if (v49 < v45)
                    {
                      unint64_t v185 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v182, v50 >> 32, &v185) = v52;
                    }
                    ++v49;
                    v50 += 0x100000000;
                  }
                  while (v48 != v49);
                }
                goto LABEL_51;
              case 3:
                uint64_t v62 = *v43++;
                for (uint64_t i = v62; i; --i)
                {
                  uint64_t v63 = *v43;
                  if (*v43 < v45 && v63 != 0)
                  {
                    unint64_t v185 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v182, (int)v63 + (int)v42 - 1, &v185) = 0x3FF0000000000000;
                  }
                  ++v43;
                }
LABEL_64:
                uint64_t v42 = v45 + v42 - 1;
                break;
              case 4:
                uint64_t v66 = *v43++;
                for (uint64_t j = v66; j; --j)
                {
                  uint64_t v67 = *v43;
                  if (*v43 < v45)
                  {
                    uint64_t v68 = v43[1];
                    unint64_t v185 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v182, (int)v67 + (int)v42, &v185) = v68;
                  }
                  v43 += 2;
                }
LABEL_69:
                v42 += v45;
                break;
              case 7:
                uint64_t v53 = *(void *)(v44 + 72);
                if (v53)
                {
                  unint64_t v54 = 0;
                  uint64_t v55 = v42 << 32;
                  do
                  {
                    uint64_t v56 = *v43++;
                    uint64_t v57 = v56;
                    if (v54 < v45)
                    {
                      unint64_t v185 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v182, v55 >> 32, &v185) = v57;
                    }
                    ++v54;
                    v55 += 0x100000000;
                  }
                  while (v53 != v54);
                }
LABEL_51:
                v42 += v45;
                break;
              default:
                break;
            }
            ++v41;
          }
          while (v41 != v40);
        }
      }
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      uint64_t v69 = **(_DWORD **)(a1 + 8) - 1;
      unint64_t v185 = 0;
      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v182, v69, &v185) = 0x3FF0000000000000;
      if (*(unsigned char *)(v142 + 480)) {
        (*(void (**)(void, uint64_t *))(**(void **)(v142 + 464) + 40))(*(void *)(v142 + 464), &v181);
      }
      if (*(unsigned char *)(v163 + 16)) {
        BOOL v70 = *(unsigned char *)(v163 + 17) == 0;
      }
      else {
        BOOL v70 = 1;
      }
      if (v70)
      {
        unint64_t v71 = 0;
      }
      else
      {
        unint64_t v72 = (void *)(v163 + 24);
        if (!*(unsigned char *)(v163 + 18)) {
          unint64_t v72 = (void *)(*(void *)(v163 + 96) + 8 * v165);
        }
        unint64_t v71 = *(void *)(*(void *)(v163 + 96) + 8 * v165 + 8 * *v72 - 8);
      }
      unint64_t v180 = v71;
      unint64_t v185 = &v171;
      *(void *)&long long v186 = &v181;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Transpose<Eigen::Matrix<double,-1,-1,0,-1,-1>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(&v178, &v185);
      unint64_t v73 = v178;
      if (v180) {
        double v74 = v178[v180 - 1];
      }
      else {
        double v74 = 0.0;
      }
      uint64_t v75 = v179;
      if (v177 != v179)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v176, v179, 1);
        uint64_t v75 = v177;
      }
      uint64_t v76 = (void **)v176;
      if (v75 >= 1)
      {
        unint64_t v77 = (long double *)v176;
        uint64_t v78 = v75;
        do
        {
          long double v79 = *v73++;
          *v77++ = exp(v79);
          --v78;
        }
        while (v78);
      }
      if (v75)
      {
        unint64_t v185 = v76;
        *((void *)&v186 + 1) = &v176;
        double v80 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v185);
        uint64_t v76 = (void **)v176;
      }
      else
      {
        double v80 = 0.0;
      }
      uint64_t v81 = v177;
      if (v175 != v177)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v174, v177, 1);
        uint64_t v81 = v175;
      }
      double v82 = v80 + 1.0;
      double v83 = (char *)v174;
      if (v81 >= 0) {
        uint64_t v84 = v81;
      }
      else {
        uint64_t v84 = v81 + 1;
      }
      int64_t v85 = v84 & 0xFFFFFFFFFFFFFFFELL;
      if (v81 >= 2)
      {
        int64_t v86 = 0;
        float64x2_t v87 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v82, 0);
        double v88 = (float64x2_t *)v174;
        float64x2_t v89 = (float64x2_t *)v76;
        do
        {
          float64x2_t v90 = *v89++;
          *v88++ = vdivq_f64(v90, v87);
          v86 += 2;
        }
        while (v86 < v85);
      }
      BOOL v91 = __OFSUB__(v81, v85);
      uint64_t v92 = v81 - v85;
      if (!((v92 < 0) ^ v91 | (v92 == 0)))
      {
        uint64_t v93 = v84 >> 1;
        int64_t v94 = (double *)&v76[2 * (v84 >> 1)];
        int64_t v95 = (double *)&v83[16 * v93];
        do
        {
          double v96 = *v94++;
          *v95++ = v96 / v82;
          --v92;
        }
        while (v92);
      }
      unint64_t v185 = &v174;
      *((void *)&v186 + 1) = &v174;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(&v168, (float64x2_t ***)&v185);
      uint64_t v97 = (double *)v174;
      uint64_t v98 = v170;
      if (v170 >= v169) {
        uint64_t v98 = v169;
      }
      if (v98 >= 1)
      {
        float64x2_t v99 = (double *)v168;
        uint64_t v100 = 8 * v169 + 8;
        uint64_t v101 = (double *)v174;
        do
        {
          double v102 = *v101++;
          double *v99 = v102 + *v99;
          float64x2_t v99 = (double *)((char *)v99 + v100);
          --v98;
        }
        while (v98);
      }
      double v103 = log1p(v80);
      uint64_t v104 = *(void *)(v142 + 424);
      LOBYTE(v151) = 0;
      long long v152 = 0u;
      long long v153 = 0u;
      uint64_t v154 = v104;
      if (v180) {
        v97[v180 - 1] = v97[v180 - 1] + -1.0;
      }
      turi::supervised::flattened_sparse_vector_outer_prod(&v181, &v174, (uint64_t)&v151);
      unint64_t v185 = (void **)&v180;
      double v105 = *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v144, &v180, (uint64_t)&std::piecewise_construct, &v185)+ 10);
      v147[0] = 0;
      unint64_t v148 = &v151;
      uint64_t v149 = v154;
      double v150 = v105;
      LOBYTE(v185) = 0;
      long long v186 = 0u;
      long long v187 = 0u;
      uint64_t v188 = v154;
      Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::SparseVector<double,0,int> const,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>,1>::run((double *)&v185, (uint64_t)v147);
      uint64_t v106 = v154;
      uint64_t v154 = v188;
      uint64_t v188 = v106;
      long long v107 = v152;
      long long v152 = v186;
      long long v108 = v153;
      long long v153 = v187;
      long long v186 = v107;
      long long v187 = v108;
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v186);
      turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>((uint64_t *)(**(void **)(a1 + 32) + 16 * v145), &v151);
      unint64_t v185 = (void **)&v180;
      *(double *)(**(void **)(a1 + 40) + 8 * v145) = *(double *)(**(void **)(a1 + 40) + 8 * v145)
                                                     + *((float *)std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v144, &v180, (uint64_t)&std::piecewise_construct, &v185)+ 10)* (v103 - v74);
      uint64_t v109 = *(void *)(v142 + 408);
      if (v109 != 1)
      {
        unint64_t v110 = 0;
        do
        {
          unint64_t v111 = 0;
          do
          {
            uint64_t v112 = v183;
            if ((uint64_t)v183 >= 1)
            {
              uint64_t v113 = 0;
              uint64_t v114 = **(void **)(a1 + 8);
              unint64_t v115 = v114 * v110;
              unint64_t v116 = v114 * v111;
              long long v117 = v182;
              uint64_t v118 = (int *)*((void *)&v182 + 1);
              int64_t v119 = (double *)v182;
              uint64_t v143 = v183;
              while (1)
              {
                if (v112 >= 1)
                {
                  do
                  {
                    unint64_t v185 = (void **)&v180;
                    int64_t v120 = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v144, &v180, (uint64_t)&std::piecewise_construct, &v185);
                    double v121 = *v119++;
                    double v122 = *(double *)(v117 + 8 * v113) * *((float *)v120 + 10) * v121;
                    float64x2_t v123 = (uint64_t *)(**(void **)(a1 + 48) + 24 * v145);
                    uint64_t v124 = *v118++;
                    uint64_t v125 = *v123;
                    unint64_t v126 = v115 + *(int *)(*((void *)&v117 + 1) + 4 * v113) + v123[1] * (v116 + v124);
                    *(double *)(v125 + 8 * v126) = *(double *)(v125 + 8 * v126)
                                                 + v122 * *((double *)v168 + v110 + v169 * v111);
                    --v112;
                  }
                  while (v112);
                }
                if (++v113 == v143) {
                  break;
                }
                uint64_t v118 = (int *)*((void *)&v182 + 1);
                uint64_t v112 = v183;
                int64_t v119 = (double *)v182;
              }
              uint64_t v109 = *(void *)(v142 + 408);
            }
            ++v111;
          }
          while (v111 < v109 - 1);
          ++v110;
        }
        while (v110 < v109 - 1);
      }
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v152);
      if (v167 | v157)
      {
        uint64_t v127 = (uint64_t *)(*(void *)(v163 + 96) + 8 * v165);
        if (v158) {
          uint64_t v127 = &v159;
        }
        v165 += *v127;
      }
      uint64_t v128 = v161 + 1;
      uint64_t v129 = v160;
      uint64_t v130 = ++v161 - v156 * v162;
      uint64_t v166 = v130;
      if (v130 == v156 && v128 != v160)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v155);
        uint64_t v129 = v160;
        uint64_t v128 = v161;
      }
    }
    while (v128 != v129);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v155);
  free(v168);
  free(v171);
  free(v174);
  free(v176);
  free(v178);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v182);
}

void sub_2244BB97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  free((void *)STACK[0x248]);
  free((void *)STACK[0x258]);
  free(*(void **)(v13 - 248));
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(a13);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1,std::allocator<turi::supervised::logistic_regression_opt_interface::compute_second_order_statistics(Eigen::Matrix<double,-1,1,0,-1,1> const&,Eigen::Matrix<double,-1,-1,0,-1,-1> &,Eigen::Matrix<double,-1,1,0,-1,1>&,double &)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

double *Eigen::internal::sparse_vector_assign_selector<Eigen::SparseVector<double,0,int>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::SparseVector<double,0,int> const,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const>,1>::run(double *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  uint64_t v3 = v2[3];
  if (v3 >= 1)
  {
    uint64_t v4 = result;
    double v5 = *(double *)(a2 + 32);
    uint64_t v6 = (double *)v2[1];
    unint64_t v7 = (int *)v2[2];
    do
    {
      double v8 = *v6++;
      double v9 = v5 * v8;
      uint64_t v10 = *v7++;
      __n128 result = (double *)Eigen::SparseVector<double,0,int>::insert(v4, v10);
      double *result = v9;
      --v3;
    }
    while (v3);
  }
  return result;
}

void turi::supervised::xgboost::init_random_forest_common_options(turi::supervised::xgboost *this, turi::option_manager *a2)
{
  v109[2] = *(void ***)MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v88, "max_iterations");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Maximum number of iterations to perform.");
  char v108 = 0;
  int v107 = 0;
  uint64_t v106 = 10;
  turi::option_manager::create_integer_option(this, &v88, &__p, (uint64_t)&v106, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
  switch(v108)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v106, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v3 = v106;
      if (!v106) {
        goto LABEL_33;
      }
      if (*(char *)(v106 + 31) < 0) {
        operator delete(*(void **)(v106 + 8));
      }
      uint64_t v4 = (void *)v3;
      uint64_t v5 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v106, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v6 = v106;
      if (!v106) {
        goto LABEL_33;
      }
      unint64_t v7 = *(void **)(v106 + 8);
      if (v7)
      {
        *(void *)(v106 + 16) = v7;
        operator delete(v7);
      }
      uint64_t v4 = (void *)v6;
      uint64_t v5 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v106, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v106;
      if (!v106) {
        goto LABEL_33;
      }
      v109[0] = (void **)(v106 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v109);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v106, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v106;
      if (!v106) {
        goto LABEL_33;
      }
      v109[0] = (void **)(v106 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v109);
LABEL_18:
      uint64_t v4 = (void *)v8;
      uint64_t v5 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v106, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v106;
      if (!v106) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v106 + 16));
      uint64_t v4 = (void *)v9;
      unsigned int v10 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v106, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v11 = (void *)v106;
      if (!v106) {
        goto LABEL_33;
      }
      uint64_t v12 = *(void **)(v106 + 48);
      if (v12)
      {
        *(void *)(v106 + 56) = v12;
        operator delete(v12);
      }
      uint64_t v13 = (void *)v11[3];
      if (v13)
      {
        v11[4] = v13;
        operator delete(v13);
      }
      int64_t v14 = (std::__shared_weak_count *)v11[2];
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      uint64_t v4 = v11;
      unsigned int v10 = 2071181815;
LABEL_31:
      uint64_t v5 = v10 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v4, v5);
LABEL_33:
      uint64_t v106 = 0;
      int v107 = 0;
      char v108 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v88, "max_depth");
      std::string::basic_string[abi:ne180100]<0>(&__p, "The maximum depth of individual trees");
      char v105 = 0;
      int v104 = 0;
      uint64_t v103 = 6;
      turi::option_manager::create_integer_option(this, &v88, &__p, (uint64_t)&v103, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
      switch(v105)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v103, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v15 = v103;
          if (!v103) {
            goto LABEL_69;
          }
          if (*(char *)(v103 + 31) < 0) {
            operator delete(*(void **)(v103 + 8));
          }
          char v16 = (void *)v15;
          uint64_t v17 = 0x1012C404EF22A49;
          goto LABEL_68;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v103, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v18 = v103;
          if (!v103) {
            goto LABEL_69;
          }
          uint64_t v19 = *(void **)(v103 + 8);
          if (v19)
          {
            *(void *)(v103 + 16) = v19;
            operator delete(v19);
          }
          char v16 = (void *)v18;
          uint64_t v17 = 0x1080C409938AC02;
          goto LABEL_68;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v103, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = v103;
          if (!v103) {
            goto LABEL_69;
          }
          v109[0] = (void **)(v103 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v109);
          goto LABEL_54;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v103, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = v103;
          if (!v103) {
            goto LABEL_69;
          }
          v109[0] = (void **)(v103 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v109);
LABEL_54:
          char v16 = (void *)v20;
          uint64_t v17 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v103, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v26 = v103;
          if (!v103) {
            goto LABEL_69;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v103 + 16));
          char v16 = (void *)v26;
          unsigned int v25 = -235920773;
          goto LABEL_67;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v103, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          int64_t v21 = (void *)v103;
          if (!v103) {
            goto LABEL_69;
          }
          uint64_t v22 = *(void **)(v103 + 48);
          if (v22)
          {
            *(void *)(v103 + 56) = v22;
            operator delete(v22);
          }
          uint64_t v23 = (void *)v21[3];
          if (v23)
          {
            void v21[4] = v23;
            operator delete(v23);
          }
          long long v24 = (std::__shared_weak_count *)v21[2];
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          char v16 = v21;
          unsigned int v25 = 2071181815;
LABEL_67:
          uint64_t v17 = v25 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x22A614FA0](v16, v17);
LABEL_69:
          uint64_t v103 = 0;
          int v104 = 0;
          char v105 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v88, "min_child_weight");
          std::string::basic_string[abi:ne180100]<0>(&__p, "Minimum weight required on the leave nodes");
          int v101 = 0;
          char v102 = 1;
          uint64_t v100 = 0x3FB999999999999ALL;
          turi::option_manager::create_real_option(this, &v88, &__p, (uint64_t)&v100, 0, 0.0, 3.40282347e38);
          switch(v102)
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v27 = v100;
              if (!v100) {
                goto LABEL_105;
              }
              if (*(char *)(v100 + 31) < 0) {
                operator delete(*(void **)(v100 + 8));
              }
              uint64_t v28 = (void *)v27;
              uint64_t v29 = 0x1012C404EF22A49;
              goto LABEL_104;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v30 = v100;
              if (!v100) {
                goto LABEL_105;
              }
              uint64_t v31 = *(void **)(v100 + 8);
              if (v31)
              {
                *(void *)(v100 + 16) = v31;
                operator delete(v31);
              }
              uint64_t v28 = (void *)v30;
              uint64_t v29 = 0x1080C409938AC02;
              goto LABEL_104;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v32 = v100;
              if (!v100) {
                goto LABEL_105;
              }
              v109[0] = (void **)(v100 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v109);
              goto LABEL_90;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v32 = v100;
              if (!v100) {
                goto LABEL_105;
              }
              v109[0] = (void **)(v100 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v109);
LABEL_90:
              uint64_t v28 = (void *)v32;
              uint64_t v29 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v38 = v100;
              if (!v100) {
                goto LABEL_105;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)(v100 + 16));
              uint64_t v28 = (void *)v38;
              unsigned int v37 = -235920773;
              goto LABEL_103;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v33 = (void *)v100;
              if (!v100) {
                goto LABEL_105;
              }
              BOOL v34 = *(void **)(v100 + 48);
              if (v34)
              {
                *(void *)(v100 + 56) = v34;
                operator delete(v34);
              }
              uint64_t v35 = (void *)v33[3];
              if (v35)
              {
                v33[4] = v35;
                operator delete(v35);
              }
              uint64_t v36 = (std::__shared_weak_count *)v33[2];
              if (v36) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              }
              uint64_t v28 = v33;
              unsigned int v37 = 2071181815;
LABEL_103:
              uint64_t v29 = v37 | 0x1030C4000000000;
LABEL_104:
              MEMORY[0x22A614FA0](v28, v29);
LABEL_105:
              uint64_t v100 = 0;
              int v101 = 0;
              char v102 = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v88.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&v88, "min_loss_reduction");
              std::string::basic_string[abi:ne180100]<0>(&__p, "Minimun loss reduction required for splitting a node");
              int v98 = 0;
              char v99 = 1;
              uint64_t v97 = 0;
              turi::option_manager::create_real_option(this, &v88, &__p, (uint64_t)&v97, 0, 0.0, 3.40282347e38);
              switch(v99)
              {
                case 2:
                  if (atomic_fetch_add(v97, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v39 = v97;
                  if (!v97) {
                    goto LABEL_141;
                  }
                  if (*((char *)v97 + 31) < 0) {
                    operator delete((void *)v97[1]);
                  }
                  uint64_t v40 = v39;
                  uint64_t v41 = 0x1012C404EF22A49;
                  goto LABEL_140;
                case 3:
                  if (atomic_fetch_add(v97, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v42 = v97;
                  if (!v97) {
                    goto LABEL_141;
                  }
                  int64_t v43 = (void *)v97[1];
                  if (v43)
                  {
                    v97[2] = (atomic_ullong)v43;
                    operator delete(v43);
                  }
                  uint64_t v40 = v42;
                  uint64_t v41 = 0x1080C409938AC02;
                  goto LABEL_140;
                case 4:
                  if (atomic_fetch_add(v97, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v44 = v97;
                  if (!v97) {
                    goto LABEL_141;
                  }
                  v109[0] = (void **)(v97 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v109);
                  goto LABEL_126;
                case 5:
                  if (atomic_fetch_add(v97, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v44 = v97;
                  if (!v97) {
                    goto LABEL_141;
                  }
                  v109[0] = (void **)(v97 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v109);
LABEL_126:
                  uint64_t v40 = v44;
                  uint64_t v41 = 0x1020C405E66F15BLL;
                  goto LABEL_140;
                case 8:
                  if (atomic_fetch_add(v97, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  uint64_t v50 = v97;
                  if (!v97) {
                    goto LABEL_141;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v97 + 2);
                  uint64_t v40 = v50;
                  unsigned int v49 = -235920773;
                  goto LABEL_139;
                case 9:
                  if (atomic_fetch_add(v97, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    goto LABEL_141;
                  }
                  unint64_t v45 = v97;
                  if (!v97) {
                    goto LABEL_141;
                  }
                  uint64_t v46 = (void *)v97[6];
                  if (v46)
                  {
                    v97[7] = (atomic_ullong)v46;
                    operator delete(v46);
                  }
                  uint64_t v47 = (void *)v45[3];
                  if (v47)
                  {
                    v45[4] = (atomic_ullong)v47;
                    operator delete(v47);
                  }
                  uint64_t v48 = (std::__shared_weak_count *)v45[2];
                  if (v48) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
                  }
                  uint64_t v40 = v45;
                  unsigned int v49 = 2071181815;
LABEL_139:
                  uint64_t v41 = v49 | 0x1030C4000000000;
LABEL_140:
                  MEMORY[0x22A614FA0](v40, v41);
LABEL_141:
                  uint64_t v97 = 0;
                  int v98 = 0;
                  char v99 = 0;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v88.__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v88, "row_subsample");
                  std::string::basic_string[abi:ne180100]<0>(&__p, "Percentage of the examples (rows) for training each individual tree");
                  int v95 = 0;
                  char v96 = 1;
                  uint64_t v94 = 0x3FE999999999999ALL;
                  turi::option_manager::create_real_option(this, &v88, &__p, (uint64_t)&v94, 0, 0.0, 1.0);
                  switch(v96)
                  {
                    case 2:
                      if (atomic_fetch_add((atomic_ullong *volatile)v94, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                        goto LABEL_177;
                      }
                      uint64_t v51 = v94;
                      if (!v94) {
                        goto LABEL_177;
                      }
                      if (*(char *)(v94 + 31) < 0) {
                        operator delete(*(void **)(v94 + 8));
                      }
                      uint64_t v52 = (void *)v51;
                      uint64_t v53 = 0x1012C404EF22A49;
                      goto LABEL_176;
                    case 3:
                      if (atomic_fetch_add((atomic_ullong *volatile)v94, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                        goto LABEL_177;
                      }
                      uint64_t v54 = v94;
                      if (!v94) {
                        goto LABEL_177;
                      }
                      uint64_t v55 = *(void **)(v94 + 8);
                      if (v55)
                      {
                        *(void *)(v94 + 16) = v55;
                        operator delete(v55);
                      }
                      uint64_t v52 = (void *)v54;
                      uint64_t v53 = 0x1080C409938AC02;
                      goto LABEL_176;
                    case 4:
                      if (atomic_fetch_add((atomic_ullong *volatile)v94, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                        goto LABEL_177;
                      }
                      uint64_t v56 = v94;
                      if (!v94) {
                        goto LABEL_177;
                      }
                      v109[0] = (void **)(v94 + 8);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v109);
                      goto LABEL_162;
                    case 5:
                      if (atomic_fetch_add((atomic_ullong *volatile)v94, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                        goto LABEL_177;
                      }
                      uint64_t v56 = v94;
                      if (!v94) {
                        goto LABEL_177;
                      }
                      v109[0] = (void **)(v94 + 8);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v109);
LABEL_162:
                      uint64_t v52 = (void *)v56;
                      uint64_t v53 = 0x1020C405E66F15BLL;
                      goto LABEL_176;
                    case 8:
                      if (atomic_fetch_add((atomic_ullong *volatile)v94, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                        goto LABEL_177;
                      }
                      uint64_t v62 = v94;
                      if (!v94) {
                        goto LABEL_177;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)(v94 + 16));
                      uint64_t v52 = (void *)v62;
                      unsigned int v61 = -235920773;
                      goto LABEL_175;
                    case 9:
                      if (atomic_fetch_add((atomic_ullong *volatile)v94, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                        goto LABEL_177;
                      }
                      uint64_t v57 = (void *)v94;
                      if (!v94) {
                        goto LABEL_177;
                      }
                      unint64_t v58 = *(void **)(v94 + 48);
                      if (v58)
                      {
                        *(void *)(v94 + 56) = v58;
                        operator delete(v58);
                      }
                      unint64_t v59 = (void *)v57[3];
                      if (v59)
                      {
                        v57[4] = v59;
                        operator delete(v59);
                      }
                      unint64_t v60 = (std::__shared_weak_count *)v57[2];
                      if (v60) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
                      }
                      uint64_t v52 = v57;
                      unsigned int v61 = 2071181815;
LABEL_175:
                      uint64_t v53 = v61 | 0x1030C4000000000;
LABEL_176:
                      MEMORY[0x22A614FA0](v52, v53);
LABEL_177:
                      uint64_t v94 = 0;
                      int v95 = 0;
                      char v96 = 0;
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v88.__r_.__value_.__l.__data_);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v88, "column_subsample");
                      std::string::basic_string[abi:ne180100]<0>(&__p, "Percentage of the features(columns) sampled for training each individual tree");
                      int v92 = 0;
                      char v93 = 1;
                      uint64_t v91 = 0x3FE999999999999ALL;
                      turi::option_manager::create_real_option(this, &v88, &__p, (uint64_t)&v91, 0, 0.0, 1.0);
                      switch(v93)
                      {
                        case 2:
                          if (atomic_fetch_add((atomic_ullong *volatile)v91, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                            goto LABEL_213;
                          }
                          uint64_t v63 = v91;
                          if (!v91) {
                            goto LABEL_213;
                          }
                          if (*(char *)(v91 + 31) < 0) {
                            operator delete(*(void **)(v91 + 8));
                          }
                          unint64_t v64 = (void *)v63;
                          uint64_t v65 = 0x1012C404EF22A49;
                          goto LABEL_212;
                        case 3:
                          if (atomic_fetch_add((atomic_ullong *volatile)v91, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                            goto LABEL_213;
                          }
                          uint64_t v66 = v91;
                          if (!v91) {
                            goto LABEL_213;
                          }
                          uint64_t v67 = *(void **)(v91 + 8);
                          if (v67)
                          {
                            *(void *)(v91 + 16) = v67;
                            operator delete(v67);
                          }
                          unint64_t v64 = (void *)v66;
                          uint64_t v65 = 0x1080C409938AC02;
                          goto LABEL_212;
                        case 4:
                          if (atomic_fetch_add((atomic_ullong *volatile)v91, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                            goto LABEL_213;
                          }
                          uint64_t v68 = v91;
                          if (!v91) {
                            goto LABEL_213;
                          }
                          v109[0] = (void **)(v91 + 8);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v109);
                          goto LABEL_198;
                        case 5:
                          if (atomic_fetch_add((atomic_ullong *volatile)v91, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                            goto LABEL_213;
                          }
                          uint64_t v68 = v91;
                          if (!v91) {
                            goto LABEL_213;
                          }
                          v109[0] = (void **)(v91 + 8);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v109);
LABEL_198:
                          unint64_t v64 = (void *)v68;
                          uint64_t v65 = 0x1020C405E66F15BLL;
                          goto LABEL_212;
                        case 8:
                          if (atomic_fetch_add((atomic_ullong *volatile)v91, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                            goto LABEL_213;
                          }
                          uint64_t v74 = v91;
                          if (!v91) {
                            goto LABEL_213;
                          }
                          boost::detail::shared_count::~shared_count((atomic_uint **)(v91 + 16));
                          unint64_t v64 = (void *)v74;
                          unsigned int v73 = -235920773;
                          goto LABEL_211;
                        case 9:
                          if (atomic_fetch_add((atomic_ullong *volatile)v91, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                            goto LABEL_213;
                          }
                          uint64_t v69 = (void *)v91;
                          if (!v91) {
                            goto LABEL_213;
                          }
                          BOOL v70 = *(void **)(v91 + 48);
                          if (v70)
                          {
                            *(void *)(v91 + 56) = v70;
                            operator delete(v70);
                          }
                          unint64_t v71 = (void *)v69[3];
                          if (v71)
                          {
                            v69[4] = v71;
                            operator delete(v71);
                          }
                          unint64_t v72 = (std::__shared_weak_count *)v69[2];
                          if (v72) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v72);
                          }
                          unint64_t v64 = v69;
                          unsigned int v73 = 2071181815;
LABEL_211:
                          uint64_t v65 = v73 | 0x1030C4000000000;
LABEL_212:
                          MEMORY[0x22A614FA0](v64, v65);
LABEL_213:
                          uint64_t v91 = 0;
                          int v92 = 0;
                          char v93 = 0;
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__p.__r_.__value_.__l.__data_);
                          }
                          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v88.__r_.__value_.__l.__data_);
                          }
                          std::string::basic_string[abi:ne180100]<0>(&v88, "random_seed");
                          std::string::basic_string[abi:ne180100]<0>(&__p, "Seed for row and column subselection");
                          *(atomic_ullong **)((char *)v90 + 5) = (atomic_ullong *)0x700000000000000;
                          v90[0] = 0;
                          turi::option_manager::create_integer_option(this, &v88, &__p, (uint64_t)v90, (atomic_ullong *)0xFFFFFFFF80000001, (atomic_ullong *)0x7FFFFFFF, 0);
                          switch(BYTE4(v90[1]))
                          {
                            case 2:
                              if (atomic_fetch_add(v90[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                                goto LABEL_249;
                              }
                              uint64_t v75 = v90[0];
                              if (!v90[0]) {
                                goto LABEL_249;
                              }
                              if (*((char *)v90[0] + 31) < 0) {
                                operator delete(*((void **)v90[0] + 1));
                              }
                              uint64_t v76 = v75;
                              uint64_t v77 = 0x1012C404EF22A49;
                              goto LABEL_248;
                            case 3:
                              if (atomic_fetch_add(v90[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                                goto LABEL_249;
                              }
                              uint64_t v78 = v90[0];
                              if (!v90[0]) {
                                goto LABEL_249;
                              }
                              long double v79 = (void *)v90[0][1];
                              if (v79)
                              {
                                v90[0][2] = (atomic_ullong)v79;
                                operator delete(v79);
                              }
                              uint64_t v76 = v78;
                              uint64_t v77 = 0x1080C409938AC02;
                              goto LABEL_248;
                            case 4:
                              if (atomic_fetch_add(v90[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                                goto LABEL_249;
                              }
                              double v80 = v90[0];
                              if (!v90[0]) {
                                goto LABEL_249;
                              }
                              v109[0] = (void **)(v90[0] + 1);
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v109);
                              goto LABEL_234;
                            case 5:
                              if (atomic_fetch_add(v90[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                                goto LABEL_249;
                              }
                              double v80 = v90[0];
                              if (!v90[0]) {
                                goto LABEL_249;
                              }
                              v109[0] = (void **)(v90[0] + 1);
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v109);
LABEL_234:
                              uint64_t v76 = v80;
                              uint64_t v77 = 0x1020C405E66F15BLL;
                              goto LABEL_248;
                            case 8:
                              if (atomic_fetch_add(v90[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                                goto LABEL_249;
                              }
                              int64_t v86 = v90[0];
                              if (!v90[0]) {
                                goto LABEL_249;
                              }
                              boost::detail::shared_count::~shared_count((atomic_uint **)v90[0] + 2);
                              uint64_t v76 = v86;
                              unsigned int v85 = -235920773;
                              goto LABEL_247;
                            case 9:
                              if (atomic_fetch_add(v90[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                                goto LABEL_249;
                              }
                              uint64_t v81 = v90[0];
                              if (!v90[0]) {
                                goto LABEL_249;
                              }
                              double v82 = (void *)v90[0][6];
                              if (v82)
                              {
                                v90[0][7] = (atomic_ullong)v82;
                                operator delete(v82);
                              }
                              double v83 = (void *)v81[3];
                              if (v83)
                              {
                                v81[4] = (atomic_ullong)v83;
                                operator delete(v83);
                              }
                              uint64_t v84 = (std::__shared_weak_count *)v81[2];
                              if (v84) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v84);
                              }
                              uint64_t v76 = v81;
                              unsigned int v85 = 2071181815;
LABEL_247:
                              uint64_t v77 = v85 | 0x1030C4000000000;
LABEL_248:
                              MEMORY[0x22A614FA0](v76, v77);
LABEL_249:
                              memset(v90, 0, 13);
                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(__p.__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v88.__r_.__value_.__l.__data_);
                              }
                              std::string::basic_string[abi:ne180100]<0>(&v88, "metric");
                              std::string::basic_string[abi:ne180100]<0>(&__p, "Performance metric(s) to track during training iterations");
                              turi::flexible_type::flexible_type((turi::flexible_type *)&v89, "auto");
                            default:
                              goto LABEL_249;
                          }
                        default:
                          goto LABEL_213;
                      }
                    default:
                      goto LABEL_177;
                  }
                default:
                  goto LABEL_141;
              }
            default:
              goto LABEL_105;
          }
        default:
          goto LABEL_69;
      }
    default:
      goto LABEL_33;
  }
}

void sub_2244BD464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,int a23,char a24,uint64_t a25,int a26,char a27,uint64_t a28,int a29,char a30,uint64_t a31,int a32,char a33,uint64_t a34,int a35,char a36,uint64_t a37,int a38,char a39)
{
  switch(*(unsigned char *)(v39 - 60))
  {
    case 2:
      turi::gl_sarray::clip((atomic_ullong *volatile *)(v39 - 72));
      break;
    case 3:
      turi::gl_sarray::clip((atomic_ullong *volatile *)(v39 - 72));
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v39 - 72));
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v39 - 72));
      break;
    case 8:
      turi::gl_sarray::clip((atomic_ullong *volatile *)(v39 - 72));
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v39 - 72));
      break;
    default:
      break;
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::set_xgboost_random_forest_common_options(turi::option_manager *a1, xgboost_old::learner::BoostLearner *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v27, "1.0");
  if (v28 >= 0) {
    uint64_t v4 = (char *)v27;
  }
  else {
    uint64_t v4 = (char *)v27[0];
  }
  xgboost_old::learner::BoostLearner::SetParam(a2, "eta", v4);
  uint64_t v5 = (void *)turi::option_manager::current_option_values(a1);
  uint64_t v6 = v5 + 1;
  unint64_t v7 = (void *)*v5;
  if ((void *)*v5 != v5 + 1)
  {
    uint64_t v24 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v25 = *MEMORY[0x263F8C2B8];
    uint64_t v23 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100](&v32, (std::string *)(v7 + 4));
      switch(v34)
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v29);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_15;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v29);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_15:
          v29[0] = v25;
          *(void *)((char *)v29 + *(void *)(v25 - 24)) = v24;
          v29[2] = v23;
          v29[3] = MEMORY[0x263F8C318] + 16;
          if (v30 < 0) {
            operator delete((void *)v29[11]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](&v31);
          break;
        case 2:
          if (*(char *)(v33 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v33 + 8), *(void *)(v33 + 16));
          }
          else
          {
            long long v8 = *(_OWORD *)(v33 + 8);
            v26.__r_.__value_.__r.__words[2] = *(void *)(v33 + 24);
            *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v29, (void *)(v33 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v29, (uint64_t *)(v33 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v29, (void *)(v33 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v33, &v26);
          break;
        case 7:
          memset(&v26, 0, sizeof(v26));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v29, (void *)(v33 + 8));
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
      if ((*((unsigned char *)&v32.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        uint64_t v9 = &v32;
        switch(*((unsigned char *)&v32.__r_.__value_.__s + 23))
        {
          case 0xB:
            goto LABEL_52;
          case 0xD:
            goto LABEL_46;
          case 0x10:
            BOOL v10 = v32.__r_.__value_.__r.__words[0] == 0x735F6E6D756C6F63
               && v32.__r_.__value_.__l.__size_ == 0x656C706D61736275;
            if (!v10) {
              goto LABEL_86;
            }
            goto LABEL_70;
          case 0x12:
            if (v32.__r_.__value_.__r.__words[0] != 0x73736F6C5F6E696DLL
              || v32.__r_.__value_.__l.__size_ != 0x697463756465725FLL
              || LOWORD(v32.__r_.__value_.__r.__words[2]) != 28271)
            {
              goto LABEL_86;
            }
            goto LABEL_66;
          default:
            goto LABEL_86;
        }
      }
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
      uint64_t v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
      if (v32.__r_.__value_.__l.__size_ == 16)
      {
        if (*(void *)v32.__r_.__value_.__l.__data_ == 0x735F6E6D756C6F63
          && *(void *)(v32.__r_.__value_.__r.__words[0] + 8) == 0x656C706D61736275)
        {
LABEL_70:
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v19 = &v26;
          }
          else {
            uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          uint64_t v9 = (std::string *)"colsample_bytree";
          goto LABEL_94;
        }
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
        uint64_t v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      else if (v32.__r_.__value_.__l.__size_ == 18)
      {
        BOOL v12 = *(void *)v32.__r_.__value_.__l.__data_ == 0x73736F6C5F6E696DLL
           && *(void *)(v32.__r_.__value_.__r.__words[0] + 8) == 0x697463756465725FLL;
        if (v12 && *(_WORD *)(v32.__r_.__value_.__r.__words[0] + 16) == 28271)
        {
LABEL_66:
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v19 = &v26;
          }
          else {
            uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          uint64_t v9 = (std::string *)"gamma";
          goto LABEL_94;
        }
      }
      if (size == 13)
      {
LABEL_46:
        if (v9->__r_.__value_.__r.__words[0] == 0x736275735F776F72
          && *(std::string::size_type *)((char *)v9->__r_.__value_.__r.__words + 5) == 0x656C706D61736275)
        {
          if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v19 = &v26;
          }
          else {
            uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
          }
          uint64_t v9 = (std::string *)"subsample";
          goto LABEL_94;
        }
        if ((*((unsigned char *)&v32.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (HIBYTE(v32.__r_.__value_.__r.__words[2]) != 11) {
            goto LABEL_85;
          }
LABEL_52:
          if (v32.__r_.__value_.__r.__words[0] != 0x735F6D6F646E6172
            || *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 3) != 0x646565735F6D6F64)
          {
            goto LABEL_85;
          }
          goto LABEL_89;
        }
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
        uint64_t v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if (size != 11) {
        goto LABEL_86;
      }
      if (v9->__r_.__value_.__r.__words[0] != 0x735F6D6F646E6172
        || *(std::string::size_type *)((char *)v9->__r_.__value_.__r.__words + 3) != 0x646565735F6D6F64)
      {
        if ((*((unsigned char *)&v32.__r_.__value_.__s + 23) & 0x80) == 0) {
LABEL_85:
        }
          uint64_t v9 = &v32;
LABEL_86:
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v19 = &v26;
        }
        else {
          uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
LABEL_94:
        xgboost_old::learner::BoostLearner::SetParam(a2, (std::string::value_type *)v9, (char *)v19);
        goto LABEL_95;
      }
LABEL_89:
      if (v34 != 7)
      {
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v19 = &v26;
        }
        else {
          uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        uint64_t v9 = (std::string *)"seed";
        goto LABEL_94;
      }
LABEL_95:
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v32);
      int64_t v21 = (void *)v7[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          int64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v7[2];
          BOOL v10 = *v22 == (void)v7;
          unint64_t v7 = v22;
        }
        while (!v10);
      }
      unint64_t v7 = v22;
    }
    while (v22 != v6);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_2244BE40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::random_forest_regression::configure(turi::supervised::xgboost::random_forest_regression *this)
{
  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "silent", "1");
  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "objective", "reg:linear");
  std::map<std::string,unsigned long>::map[abi:ne180100](v4, (const void ***)this + 28);
  memset(v5, 0, sizeof(v5));
  std::vector<turi::option_handling::option_info>::__init_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(v5, *((void *)this + 31), *((void *)this + 32), (uint64_t)(*((void *)this + 32) - *((void *)this + 31)) >> 7);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v6, (uint64_t)this + 272);
  turi::supervised::xgboost::set_xgboost_random_forest_common_options((turi::option_manager *)v4, *((xgboost_old::learner::BoostLearner **)this + 208));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v6, (void *)v6[1]);
  unint64_t v7 = (void **)v5;
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v4, (char *)v4[1]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Random forest regression");
  turi::supervised::supervised_learning_model_base::display_regression_training_summary(this, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2244BE5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::random_forest_regression::init_options(xgboost_old::learner::BoostLearner **a1, uint64_t a2)
{
  turi::supervised::xgboost::xgboost_model::init_options(a1, a2);
  turi::supervised::xgboost::init_random_forest_common_options((turi::supervised::xgboost *)(a1 + 28), v3);
}

void sub_2244BE688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::supervised::xgboost::random_forest_regression::export_to_coreml(turi::supervised::xgboost::random_forest_regression *this)
{
  v1[20] = *MEMORY[0x263EF8340];
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v1, "model_type", "random_forest");
}

void sub_2244BE838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,char a21)
{
}

void turi::supervised::xgboost::random_forest_classifier::model_specific_init(uint64_t **this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  turi::supervised::xgboost::xgboost_model::model_specific_init((turi::supervised::xgboost::xgboost_model *)this, a2, a3);
  uint64_t v19 = *(void **)(this[47][3] + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  p_p = &__p;
  uint64_t v4 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this + 37, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v4 + 14, &v19);
  if (v21 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = this[47];
  uint64_t v6 = this[48];
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  v18[0] = 0;
  v18[1] = 0;
  p_p = (void **)v18;
  long long v8 = (void *)v7[3];
  if (!v8[8]) {
LABEL_15:
  }
    turi::flexible_type_converter<std::map<turi::flexible_type,unsigned long>>::set(&p_p, (uint64_t)&v19);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = v8[6];
    if ((*(_DWORD *)(v12 + 24) | 2) == 2)
    {
      uint64_t v13 = (uint64_t *)(v12 + 80);
    }
    else
    {
      uint64_t v15 = v12 + 32;
      uint64_t v14 = *(void *)(v12 + 32);
      if (v11 >= (*(void *)(v15 + 8) - v14) >> 3)
      {
        uint64_t v16 = 0;
        goto LABEL_12;
      }
      uint64_t v13 = (uint64_t *)(v14 + v10);
    }
    uint64_t v16 = *v13;
LABEL_12:
    uint64_t v19 = (void *)(*(void *)(v8[4] + 80) + v9);
    std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t **)&p_p, (uint64_t)v19, v5, (uint64_t)&std::piecewise_construct, &v19)[6] = v16;
    ++v11;
    long long v8 = (void *)v7[3];
    v10 += 8;
    v9 += 16;
    if (v11 >= v8[8]) {
      goto LABEL_15;
    }
  }
}

void sub_2244BEB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&a21);
  std::__tree<std::__value_type<turi::flexible_type,unsigned long>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,unsigned long>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,unsigned long>>>::destroy((uint64_t)&a10, a11);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::random_forest_classifier::configure(turi::supervised::xgboost::random_forest_classifier *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  uint64_t v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  unint64_t v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v18, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xgboost_old::learner::BoostLearner::SetParam(*((xgboost_old::learner::BoostLearner **)this + 208), "silent", "1");
  uint64_t v4 = (xgboost_old::learner::BoostLearner *)*((void *)this + 208);
  if (v3 < 3)
  {
    uint64_t v6 = "binary:logistic";
  }
  else
  {
    std::to_string(&__p, v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xgboost_old::learner::BoostLearner::SetParam(v4, "num_class", (char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = (xgboost_old::learner::BoostLearner *)*((void *)this + 208);
    uint64_t v6 = "multi:softprob";
  }
  xgboost_old::learner::BoostLearner::SetParam(v4, "objective", v6);
  std::map<std::string,unsigned long>::map[abi:ne180100](v11, (const void ***)this + 28);
  memset(v12, 0, sizeof(v12));
  std::vector<turi::option_handling::option_info>::__init_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(v12, *((void *)this + 31), *((void *)this + 32), (uint64_t)(*((void *)this + 32) - *((void *)this + 31)) >> 7);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v13, (uint64_t)this + 272);
  turi::supervised::xgboost::set_xgboost_random_forest_common_options((turi::option_manager *)v11, *((xgboost_old::learner::BoostLearner **)this + 208));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v13, (void *)v13[1]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v11, (char *)v11[1]);
  std::string::basic_string[abi:ne180100]<0>(v9, "Random forest classifier");
  turi::supervised::supervised_learning_model_base::display_classifier_training_summary(this, (uint64_t)v9, 0);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  v15[0] = *MEMORY[0x263F8C2B8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v15[2] = v7;
  v15[3] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v17);
}

void sub_2244BEE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::random_forest_classifier::init_options(xgboost_old::learner::BoostLearner **a1, uint64_t a2)
{
  v19[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  turi::supervised::xgboost::xgboost_model::init_options(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(&v17, "class_weights");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Weights (during training) assigned to each class.");
  *(atomic_ullong **)((char *)v19 + 5) = (atomic_ullong *)0x700000000000000;
  v19[0] = 0;
  turi::option_manager::create_flexible_type_option((turi::option_manager *)(a1 + 28), &v17, &__p, (uint64_t)v19, 1);
  switch(BYTE4(v19[1]))
  {
    case 2:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v4 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      if (*((char *)v19[0] + 31) < 0) {
        operator delete(*((void **)v19[0] + 1));
      }
      __n128 v5 = v4;
      uint64_t v6 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      long long v8 = (void *)v19[0][1];
      if (v8)
      {
        v19[0][2] = (atomic_ullong)v8;
        operator delete(v8);
      }
      __n128 v5 = v7;
      uint64_t v6 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      char v18 = (void **)(v19[0] + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      char v18 = (void **)(v19[0] + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_18:
      __n128 v5 = v9;
      uint64_t v6 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v15 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v19[0] + 2);
      __n128 v5 = v15;
      unsigned int v14 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(v19[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      char v10 = v19[0];
      if (!v19[0]) {
        goto LABEL_33;
      }
      unint64_t v11 = (void *)v19[0][6];
      if (v11)
      {
        v19[0][7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      uint64_t v12 = (void *)v10[3];
      if (v12)
      {
        v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      uint64_t v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      __n128 v5 = v10;
      unsigned int v14 = 2071181815;
LABEL_31:
      uint64_t v6 = v14 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v5, v6);
LABEL_33:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      turi::supervised::xgboost::init_random_forest_common_options((turi::supervised::xgboost *)(a1 + 28), v3);
    default:
      goto LABEL_33;
  }
}

void sub_2244BF188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, char *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,int a23,int a24,char a25)
{
}

void turi::supervised::xgboost::random_forest_classifier::export_to_coreml(turi::supervised::xgboost::random_forest_classifier *this)
{
  v1[20] = *MEMORY[0x263EF8340];
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v1, "model_type", "random_forest");
}

void sub_2244BF418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

const char *turi::supervised::xgboost::random_forest_regression::name(turi::supervised::xgboost::random_forest_regression *this)
{
  return "random_forest_regression";
}

void *turi::supervised::xgboost::random_forest_regression::uid(turi::supervised::xgboost::random_forest_regression *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised::xgboost::random_forest_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/random_forest.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised::xgboost::random_forest_regression::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised::xgboost::random_forest_regression::uid(void)::_uid;
}

void sub_2244BF514(_Unwind_Exception *a1)
{
}

const char *turi::supervised::xgboost::random_forest_classifier::name(turi::supervised::xgboost::random_forest_classifier *this)
{
  return "random_forest_classifier";
}

void *turi::supervised::xgboost::random_forest_classifier::uid(turi::supervised::xgboost::random_forest_classifier *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised::xgboost::random_forest_classifier::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/random_forest.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised::xgboost::random_forest_classifier::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised::xgboost::random_forest_classifier::uid(void)::_uid;
}

void sub_2244BF5C4(_Unwind_Exception *a1)
{
}

uint64_t turi::supervised::check_target_column_type(uint64_t *a1, turi::sframe *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v60);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v6 = a1[1];
    if (v6 != 14
      || (*(void *)*a1 == 0x6966697373616C63 ? (BOOL v7 = *(void *)(*a1 + 6) == 0x6D76735F72656966) : (BOOL v7 = 0), !v7))
    {
      if (v6 != 30) {
        goto LABEL_31;
      }
      __n128 v5 = (uint64_t *)*a1;
      goto LABEL_12;
    }
LABEL_29:
    uint64_t v15 = "SVM";
    goto LABEL_30;
  }
  int v4 = *((unsigned __int8 *)a1 + 23);
  if (v4 != 14)
  {
    __n128 v5 = a1;
    if (v4 != 30) {
      goto LABEL_32;
    }
LABEL_12:
    uint64_t v8 = *v5;
    uint64_t v9 = v5[1];
    uint64_t v10 = v5[2];
    uint64_t v11 = *(uint64_t *)((char *)v5 + 22);
    if (v8 != 0x6966697373616C63
      || v9 != 0x7369676F6C5F7265
      || v10 != 0x726765725F636974
      || v11 != 0x6E6F697373657267)
    {
      goto LABEL_31;
    }
    uint64_t v15 = "Logistic Regression";
LABEL_30:
    MEMORY[0x22A614700](__p, v15);
    goto LABEL_31;
  }
  if (*a1 == 0x6966697373616C63 && *(uint64_t *)((char *)a1 + 6) == 0x6D76735F72656966) {
    goto LABEL_29;
  }
LABEL_31:
  int v4 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    int v17 = 0;
    if (v4 != 14)
    {
      if (v4 == 24) {
        goto LABEL_63;
      }
      char v18 = a1;
      if (v4 != 30) {
        goto LABEL_94;
      }
LABEL_47:
      uint64_t v24 = *v18;
      uint64_t v25 = v18[1];
      uint64_t v26 = v18[2];
      uint64_t v27 = *(uint64_t *)((char *)v18 + 22);
      if (v24 == 0x6966697373616C63
        && v25 == 0x7369676F6C5F7265
        && v26 == 0x726765725F636974
        && v27 == 0x6E6F697373657267)
      {
        goto LABEL_106;
      }
      if (v17)
      {
        uint64_t v19 = a1[1];
        goto LABEL_59;
      }
      if (v4 != 24) {
        goto LABEL_94;
      }
      int v17 = 0;
LABEL_63:
      uint64_t v31 = a1;
      goto LABEL_64;
    }
    uint64_t v20 = a1;
    goto LABEL_39;
  }
  uint64_t v19 = a1[1];
  if (v19 != 14) {
    goto LABEL_45;
  }
  uint64_t v20 = (uint64_t *)*a1;
  int v17 = 1;
LABEL_39:
  uint64_t v21 = *v20;
  uint64_t v22 = *(uint64_t *)((char *)v20 + 6);
  if (v21 == 0x6966697373616C63 && v22 == 0x6D76735F72656966) {
    goto LABEL_106;
  }
  if (!v17) {
    goto LABEL_94;
  }
  uint64_t v19 = a1[1];
LABEL_45:
  if (v19 == 30)
  {
    char v18 = (uint64_t *)*a1;
    int v17 = 1;
    goto LABEL_47;
  }
LABEL_59:
  if (v19 != 24) {
    goto LABEL_94;
  }
  uint64_t v31 = (uint64_t *)*a1;
  int v17 = 1;
LABEL_64:
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  uint64_t v34 = v31[2];
  if (v32 != 0x665F6D6F646E6172 || v33 != 0x6C635F747365726FLL || v34 != 0x7265696669737361)
  {
    if (v17)
    {
      if (a1[1] != 24) {
        goto LABEL_94;
      }
      unsigned int v37 = (uint64_t *)*a1;
    }
    else
    {
      if (v4 != 24) {
        goto LABEL_94;
      }
      unsigned int v37 = a1;
    }
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    uint64_t v40 = v37[2];
    BOOL v41 = v38 == 0x6E6F697369636564 && v39 == 0x6C635F656572745FLL;
    if (!v41 || v40 != 0x7265696669737361)
    {
      if (v17)
      {
        if (a1[1] != 24) {
          goto LABEL_94;
        }
        a1 = (uint64_t *)*a1;
      }
      else if (v4 != 24)
      {
        goto LABEL_94;
      }
      BOOL v43 = *a1 == 0x5F646574736F6F62 && a1[1] == 0x6C635F7365657274;
      if (!v43 || a1[2] != 0x7265696669737361)
      {
LABEL_94:
        if (turi::sframe::column_type(a2, 0) >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          std::string::operator=(&v63, &__str);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v62);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          unint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Column type of target '", 23);
          turi::sframe::column_name(a2, 0, &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_str, size);
          unsigned int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"' must be int or float.", 23);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v49);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
          turi::supervised::check_target_column_type(std::string,turi::sframe)::{lambda(void)#2}::operator()();
        }
        goto LABEL_107;
      }
    }
  }
LABEL_106:
  if ((turi::sframe::column_type(a2, 0) & 0xFFFFFFFD) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    std::string::operator=(&v63, &__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v62);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Column type of target '", 23);
    turi::sframe::column_name(a2, 0, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v53 = &__str;
    }
    else {
      uint64_t v53 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v54 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v54 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
    uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"' must be int or str.", 21);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v56);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    turi::supervised::check_target_column_type(std::string,turi::sframe)::{lambda(void)#1}::operator()();
  }
LABEL_107:
  if (v59 < 0) {
    operator delete(__p[0]);
  }
  v60[0] = *MEMORY[0x263F8C2B8];
  uint64_t v50 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v60 + *(void *)(v60[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v61 = v50;
  v62[0] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v64);
}

void sub_2244BFBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(long long **)(a3 + 40);
  if (*(long long **)(a3 + 48) != v3)
  {
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v6 = *v3;
      v13.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
    }
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v11 = v12;
    memset(&v10, 0, sizeof(v10));
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 232))(a1))
    {
      unsigned int v14 = &v13;
      *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v11, (const void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v14)+ 14) = 6;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__str, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      }
      else {
        std::string __str = v13;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v10, &__str, v16, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v9);
    uint64_t v7 = v9;
    turi::sframe::select_column(a3, 0, &v8);
    turi::unity_sarray::construct_from_sarray(v7, (uint64_t *)&v8);
  }
  turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
}

void sub_2244C0650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,void *__p)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a71);
  turi::ml_data::~ml_data((turi::ml_data *)&STACK[0x2F0]);
  a71 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  a71 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x3B0]);
  turi::ml_data::~ml_data((turi::ml_data *)&a27);
  if (a56) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a56);
  }
  STACK[0x3B0] = (unint64_t)&a57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a60, (char *)a61);
  if (a68 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unsigned __int8 *a5@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  turi::ml_data::ml_data((uint64_t)a5, (void *)(a1 + 376));
  uint64_t v9 = *(long long **)(a3 + 40);
  if (*(long long **)(a3 + 48) != v9)
  {
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v14.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
    }
    turi::sframe::select_column(a3, 0, &v13);
    turi::sframe::add_column(a2, &v13, (uint64_t)&v14, (uint64_t)v15);
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v11 = (const void **)v12;
    turi::ml_data::fill(a5, (uint64_t)v15, (uint64_t)&v14, &v11, 1, a4);
  }
  turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
}

void sub_2244C09C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a10, a11);
  turi::sframe::~sframe((turi::sframe *)&a22);
  if (a20 < 0) {
    operator delete(__p);
  }
  turi::ml_data::~ml_data(v22);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::check_feature_means_and_variances(uint64_t **a1, char a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v87);
  unsigned int v85 = 0;
  unint64_t v86 = 0;
  uint64_t v84 = 0;
  uint64_t v4 = **a1;
  if ((*a1)[1] == v4) {
    goto LABEL_57;
  }
  unint64_t v5 = 0;
  do
  {
    long long v6 = (uint64_t *)(v4 + 16 * v5);
    uint64_t v8 = *v6;
    uint64_t v7 = (std::__shared_weak_count *)v6[1];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    long long v10 = *(turi::ml_data_internal::column_statistics **)(v8 + 48);
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 56);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (long long **)(**a1 + 16 * v5);
    long long v13 = *v11;
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = *((void *)v13 + 8);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      uint64_t v15 = (long long **)(**a1 + 16 * v5);
      long long v13 = *v15;
      uint64_t v16 = (std::__shared_weak_count *)v15[1];
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    else
    {
      uint64_t v14 = *((void *)v13 + 8);
    }
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v17 = *v13;
      v83.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v17;
    }
    if (v14)
    {
      unint64_t v18 = 0;
      while (fabs(turi::ml_data_internal::column_statistics::stdev(v10, v18)) >= 1.0e-20)
      {
        if (v14 == ++v18) {
          goto LABEL_26;
        }
      }
      uint64_t v19 = v85;
      if ((unint64_t)v85 >= v86)
      {
        uint64_t v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v84, (long long *)&v83);
      }
      else
      {
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v85, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v20 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
          v85->__r_.__value_.__r.__words[2] = v83.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        }
        uint64_t v21 = v19 + 1;
      }
      unsigned int v85 = v21;
    }
LABEL_26:
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v9) {
        goto LABEL_29;
      }
LABEL_28:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      goto LABEL_29;
    }
    operator delete(v83.__r_.__value_.__l.__data_);
    if (v9) {
      goto LABEL_28;
    }
LABEL_29:
    ++v5;
    uint64_t v4 = **a1;
  }
  while (v5 < ((*a1)[1] - v4) >> 4);
  if (v85 != v84 && (a2 & 1) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"WARNING: Detected extremely low variance for feature(s) ", 56);
    if ((char *)v85 - (char *)v84 != 24)
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      do
      {
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"'", 1);
        int v25 = SHIBYTE(v84[v22].__r_.__value_.__r.__words[2]);
        if (v25 >= 0) {
          uint64_t data = (uint64_t)&v84[v22];
        }
        else {
          uint64_t data = (uint64_t)v84[v22].__r_.__value_.__l.__data_;
        }
        if (v25 >= 0) {
          uint64_t size = HIBYTE(v84[v22].__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t size = v84[v22].__r_.__value_.__l.__size_;
        }
        char v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, data, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"', ", 3);
        ++v23;
        ++v22;
      }
      while (v23 < -1 - 0x5555555555555555 * (((char *)v85 - (char *)v84) >> 3));
    }
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"'", 1);
    int v30 = SHIBYTE(v85[-1].__r_.__value_.__r.__words[2]);
    if (v30 >= 0) {
      uint64_t v31 = v85 - 1;
    }
    else {
      uint64_t v31 = (std::string *)v85[-1].__r_.__value_.__l.__data_;
    }
    if (v30 >= 0) {
      std::string::size_type v32 = HIBYTE(v85[-1].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v85[-1].__r_.__value_.__l.__size_;
    }
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"'", 1);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" because all entries are nearly the same.\n", 42);
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Proceeding with model training using all features. ", 51);
    unsigned int v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"If the model does not provide results of adequate quality, ", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"exclude the above mentioned feature(s) from the input dataset.", 62);
    uint64_t v38 = (int *)global_logger();
    if (v38[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v38)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v39 = (file_logger *)global_logger();
      started = file_logger::start_stream(v39, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning_utils-inl.hpp", "check_feature_means_and_variances", 275, 1);
      std::stringbuf::str();
      uint64_t v41 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      uint64_t v42 = pthread_getspecific(*(void *)(v41 + 592));
      if (v42)
      {
        if (*((unsigned char *)v42 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(v42[2] - 24) + 16));
          BOOL v43 = std::locale::use_facet((const std::locale *)&v83, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
          std::locale::~locale((std::locale *)&v83);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v41);
          if (*(_DWORD *)(v41 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (v82 < 0) {
        operator delete(__p);
      }
    }
  }
LABEL_57:
  uint64_t v44 = v84;
  for (uint64_t i = v85; i != v44; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i[-1].__r_.__value_.__l.__data_);
    }
  }
  unsigned int v85 = v44;
  uint64_t v46 = **a1;
  if ((*a1)[1] == v46) {
    goto LABEL_95;
  }
  unint64_t v47 = 0;
  char v48 = 0;
  while (2)
  {
    unsigned int v49 = (uint64_t *)(v46 + 16 * v47);
    uint64_t v51 = *v49;
    uint64_t v50 = (std::__shared_weak_count *)v49[1];
    if (v50)
    {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    uint64_t v53 = *(turi::ml_data_internal::column_statistics **)(v51 + 48);
    uint64_t v52 = *(std::__shared_weak_count **)(v51 + 56);
    if (v52) {
      atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v54 = (long long **)(**a1 + 16 * v47);
    uint64_t v56 = *v54;
    uint64_t v55 = (std::__shared_weak_count *)v54[1];
    if (v55)
    {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v57 = *((void *)v56 + 8);
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      unint64_t v58 = (long long **)(**a1 + 16 * v47);
      uint64_t v56 = *v58;
      char v59 = (std::__shared_weak_count *)v58[1];
      if (v59)
      {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
    }
    else
    {
      uint64_t v57 = *((void *)v56 + 8);
    }
    if (*((char *)v56 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v56, *((void *)v56 + 1));
    }
    else
    {
      long long v60 = *v56;
      v83.__r_.__value_.__r.__words[2] = *((void *)v56 + 2);
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v60;
    }
    if (v57)
    {
      unint64_t v61 = 0;
      while ((COERCE_UNSIGNED_INT64(turi::ml_data_internal::column_statistics::mean(v53, v61)) & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
      {
        if (v57 == ++v61) {
          goto LABEL_87;
        }
      }
      uint64_t v62 = v85;
      if ((unint64_t)v85 >= v86)
      {
        uint64_t v64 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v84, (long long *)&v83);
      }
      else
      {
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v85, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v63 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
          v85->__r_.__value_.__r.__words[2] = v83.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
        }
        uint64_t v64 = v62 + 1;
      }
      unsigned int v85 = v64;
      char v48 = 1;
    }
LABEL_87:
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v83.__r_.__value_.__l.__data_);
      if (v52) {
LABEL_89:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    else if (v52)
    {
      goto LABEL_89;
    }
    ++v47;
    uint64_t v46 = **a1;
    if (v47 < ((*a1)[1] - v46) >> 4) {
      continue;
    }
    break;
  }
  if (v48)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Detected inf/nan values in feature(s) ", 38);
    if ((char *)v85 - (char *)v84 != 24)
    {
      uint64_t v73 = 0;
      unint64_t v74 = 0;
      do
      {
        uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"'", 1);
        int v76 = SHIBYTE(v84[v73].__r_.__value_.__r.__words[2]);
        if (v76 >= 0) {
          uint64_t v77 = (uint64_t)&v84[v73];
        }
        else {
          uint64_t v77 = (uint64_t)v84[v73].__r_.__value_.__l.__data_;
        }
        if (v76 >= 0) {
          uint64_t v78 = HIBYTE(v84[v73].__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t v78 = v84[v73].__r_.__value_.__l.__size_;
        }
        long double v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, v77, v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"', ", 3);
        ++v74;
        ++v73;
      }
      while (v74 < -1 - 0x5555555555555555 * (((char *)v85 - (char *)v84) >> 3));
    }
    uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"'", 1);
    int v68 = SHIBYTE(v85[-1].__r_.__value_.__r.__words[2]);
    if (v68 >= 0) {
      uint64_t v69 = v85 - 1;
    }
    else {
      uint64_t v69 = (std::string *)v85[-1].__r_.__value_.__l.__data_;
    }
    if (v68 >= 0) {
      std::string::size_type v70 = HIBYTE(v85[-1].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v70 = v85[-1].__r_.__value_.__l.__size_;
    }
    unint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v69, v70);
    unint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"'. ", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Cannot proceed with model training.", 35);
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    turi::supervised::check_feature_means_and_variances(std::shared_ptr<turi::ml_metadata>,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_95:
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  v87[0] = *MEMORY[0x263F8C2B8];
  uint64_t v65 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v87 + *(void *)(v87[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v88[0] = v65;
  v88[1] = MEMORY[0x263F8C318] + 16;
  if (v89 < 0) {
    operator delete((void *)v88[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v90);
}

void sub_2244C127C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)(v25 - 104) = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 104));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void turi::supervised::get_class_names(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<turi::flexible_type>::resize(a2, *(void *)(*(void *)(*(void *)a1 + 24) + 64));
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)a1 + 24) + 32) + 80);
      if (v7 != v4)
      {
        uint64_t v8 = v4 + v5;
        switch(*(unsigned char *)(v4 + v5 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)v8;
              if (!*(void *)v8) {
                goto LABEL_36;
              }
              if (*((char *)v9 + 31) < 0) {
                operator delete((void *)v9[1]);
              }
              atomic_ullong *volatile v10 = v9;
              uint64_t v11 = 0x1012C404EF22A49;
              goto LABEL_35;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v8;
              if (!*(void *)v8) {
                goto LABEL_36;
              }
              long long v13 = (void *)v12[1];
              if (v13)
              {
                void v12[2] = (atomic_ullong)v13;
                operator delete(v13);
              }
              atomic_ullong *volatile v10 = v12;
              uint64_t v11 = 0x1080C409938AC02;
              goto LABEL_35;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v8;
              if (!*(void *)v8) {
                goto LABEL_36;
              }
              uint64_t v26 = (void **)(v14 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v26);
              goto LABEL_21;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v8;
              if (!*(void *)v8) {
                goto LABEL_36;
              }
              uint64_t v26 = (void **)(v14 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v26);
LABEL_21:
              atomic_ullong *volatile v10 = v14;
              uint64_t v11 = 0x1020C405E66F15BLL;
              goto LABEL_35;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v8;
              if (!*(void *)v8) {
                goto LABEL_36;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v15 + 2);
              atomic_ullong *volatile v10 = v15;
              unsigned int v16 = -235920773;
              goto LABEL_34;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v8;
              if (*(void *)v8)
              {
                unint64_t v18 = (void *)v17[6];
                if (v18)
                {
                  v17[7] = (atomic_ullong)v18;
                  operator delete(v18);
                }
                uint64_t v19 = (void *)v17[3];
                if (v19)
                {
                  void v17[4] = (atomic_ullong)v19;
                  operator delete(v19);
                }
                long long v20 = (std::__shared_weak_count *)v17[2];
                if (v20) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
                }
                atomic_ullong *volatile v10 = v17;
                unsigned int v16 = 2071181815;
LABEL_34:
                uint64_t v11 = v16 | 0x1030C4000000000;
LABEL_35:
                MEMORY[0x22A614FA0](v10, v11);
              }
LABEL_36:
              *(void *)uint64_t v8 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v21 = *(void *)(v7 + v5);
        *(void *)(v8 + 5) = *(void *)(v7 + v5 + 5);
        *(void *)uint64_t v8 = v21;
        unsigned int v22 = *(unsigned __int8 *)(v7 + v5 + 12);
        *(unsigned char *)(v8 + 12) = v22;
        BOOL v23 = v22 > 9;
        int v24 = (1 << v22) & 0x33C;
        if (!v23 && v24 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v8, 1uLL);
        }
      }
      ++v6;
      uint64_t v4 = *a2;
      v5 += 16;
    }
    while (v6 < (a2[1] - *a2) >> 4);
  }
}

void sub_2244C15F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::impute_missing_columns_using_current_metadata(turi::supervised::supervised_learning_model_base *this@<X0>, const turi::sframe *a2@<X1>, turi::sframe *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  turi::sframe::sframe((turi::sframe *)v13, a2);
  if (*((unsigned char *)a2 + 288) && *((void *)a2 + 4))
  {
    unint64_t v6 = (turi::ml_metadata *)*((void *)this + 47);
    if (!v6) {
      turi::supervised::supervised_learning_model_base::impute_missing_columns_using_current_metadata(turi::sframe const&)const::$_0::operator()();
    }
    turi::ml_metadata::column_names(v6, &v11);
    std::vector<std::string>::pointer begin = v11.__begin_;
    for (std::vector<std::string>::pointer i = v11.__end_; begin != i; ++begin)
    {
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v10, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v9 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        v10.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v9;
      }
      if (!turi::sframe::contains_column((uint64_t)a2, (unsigned __int8 **)&v10)) {
        operator new();
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
    }
    atomic_ullong *volatile v12 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    turi::sframe::sframe(a3, (uint64_t)v13);
  }
  else
  {
    turi::sframe::sframe(a3, a2);
  }
  turi::sframe::~sframe((turi::sframe *)v13);
}

void sub_2244C1AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  turi::sframe::~sframe((turi::sframe *)&a72);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 *a4@<X8>)
{
  turi::ml_data::ml_data((uint64_t)a4, (void *)(a1 + 376));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v7 = (const void **)v8;
  turi::ml_data::fill(a4, a2, (uint64_t)__p, &v7, 1, a3);
}

void sub_2244C1E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a9, a10);
  if (a17 < 0) {
    operator delete(__p);
  }
  turi::ml_data::~ml_data(v17);
  _Unwind_Resume(a1);
}

unint64_t turi::supervised::supervised_learning_model_base::num_features(turi::supervised::supervised_learning_model_base *this)
{
  v9[9] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "num_features");
  uint64_t v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  uint64_t v7 = (std::string *)v9;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*v2, *v2 ^ (*v2 >> 31), &v7, (uint64_t)(v2 + 2));
  int v8 = *v2 ^ (*v2 >> 31);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)__p, &v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v8);
  return v3;
}

void sub_2244C1F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, unsigned int a17)
{
}

unint64_t turi::supervised::supervised_learning_model_base::num_unpacked_features(turi::supervised::supervised_learning_model_base *this)
{
  v9[9] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "num_unpacked_features");
  uint64_t v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  uint64_t v7 = (std::string *)v9;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*v2, *v2 ^ (*v2 >> 31), &v7, (uint64_t)(v2 + 2));
  int v8 = *v2 ^ (*v2 >> 31);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)__p, &v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v8);
  return v3;
}

void sub_2244C2050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, unsigned int a17)
{
}

unint64_t turi::supervised::supervised_learning_model_base::num_examples(turi::supervised::supervised_learning_model_base *this)
{
  v9[9] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "num_examples");
  uint64_t v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  uint64_t v7 = (std::string *)v9;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*v2, *v2 ^ (*v2 >> 31), &v7, (uint64_t)(v2 + 2));
  int v8 = *v2 ^ (*v2 >> 31);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)__p, &v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v8);
  return v3;
}

void sub_2244C2158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, unsigned int a17)
{
}

void turi::supervised::supervised_learning_model_base::get_train_stats(turi::supervised::supervised_learning_model_base *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v40, "num_examples");
  std::string::basic_string[abi:ne180100]<0>(v41, "num_features");
  uint64_t v36 = 0;
  unsigned int v37 = 0;
  uint64_t v38 = 0;
  *(void *)&long long v42 = &v36;
  BYTE8(v42) = 0;
  uint64_t v36 = (std::string *)operator new(0x30uLL);
  unsigned int v37 = v36;
  uint64_t v38 = v36 + 2;
  uint64_t v4 = 0;
  unsigned int v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, &v40, &v42, v36);
  do
  {
    if (SHIBYTE(v41[v4 + 2]) < 0) {
      operator delete((void *)v41[v4]);
    }
    v4 -= 3;
  }
  while (v4 != -6);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v5 = v36;
  char v6 = v37;
  if (v36 != v37)
  {
    uint64_t v7 = (char *)this + 296;
    do
    {
      int v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)&v5->__r_.__value_.__l.__data_);
      turi::variant_converter<turi::flexible_type,void>::get(v8, (uint64_t)&v42);
      uint64_t v39 = v5;
      long long v9 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v5->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v39);
      std::string v10 = v9;
      std::vector<std::string> v11 = v9 + 7;
      if (&v42 == (long long *)(v9 + 7))
      {
        switch(BYTE12(v42))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              int v24 = (void *)v42;
              if ((void)v42)
              {
                if (*(char *)(v42 + 31) < 0) {
                  operator delete(*(void **)(v42 + 8));
                }
                uint64_t v25 = v24;
                uint64_t v26 = 0x1012C404EF22A49;
                goto LABEL_75;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v27 = (void *)v42;
              if ((void)v42)
              {
                char v28 = *(void **)(v42 + 8);
                if (v28)
                {
                  *(void *)(v42 + 16) = v28;
                  operator delete(v28);
                }
                uint64_t v25 = v27;
                uint64_t v26 = 0x1080C409938AC02;
                goto LABEL_75;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v29 = (void *)v42;
              if ((void)v42)
              {
                *(void *)&long long v40 = v42 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
                goto LABEL_61;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v29 = (void *)v42;
              if ((void)v42)
              {
                *(void *)&long long v40 = v42 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
LABEL_61:
                uint64_t v25 = v29;
                uint64_t v26 = 0x1020C405E66F15BLL;
                goto LABEL_75;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              int v30 = (void *)v42;
              if ((void)v42)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(v42 + 16));
                uint64_t v25 = v30;
                unsigned int v31 = -235920773;
                goto LABEL_74;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string::size_type v32 = (void *)v42;
              if ((void)v42)
              {
                uint64_t v33 = *(void **)(v42 + 48);
                if (v33)
                {
                  *(void *)(v42 + 56) = v33;
                  operator delete(v33);
                }
                uint64_t v34 = (void *)v32[3];
                if (v34)
                {
                  v32[4] = v34;
                  operator delete(v34);
                }
                uint64_t v35 = (std::__shared_weak_count *)v32[2];
                if (v35) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
                }
                uint64_t v25 = v32;
                unsigned int v31 = 2071181815;
LABEL_74:
                uint64_t v26 = v31 | 0x1030C4000000000;
LABEL_75:
                MEMORY[0x22A614FA0](v25, v26);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*((unsigned char *)v9 + 68))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = (atomic_ullong *volatile)*v11;
              if (!*v11) {
                goto LABEL_40;
              }
              if (*((char *)v12 + 31) < 0) {
                operator delete((void *)v12[1]);
              }
              atomic_ullong *volatile v13 = v12;
              uint64_t v14 = 0x1012C404EF22A49;
              goto LABEL_39;
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = (atomic_ullong *volatile)*v11;
              if (!*v11) {
                goto LABEL_40;
              }
              unsigned int v16 = (void *)v15[1];
              if (v16)
              {
                v15[2] = (atomic_ullong)v16;
                operator delete(v16);
              }
              atomic_ullong *volatile v13 = v15;
              uint64_t v14 = 0x1080C409938AC02;
              goto LABEL_39;
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v17 = (atomic_ullong *volatile)*v11;
              if (!*v11) {
                goto LABEL_40;
              }
              *(void *)&long long v40 = v17 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
              goto LABEL_25;
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v17 = (atomic_ullong *volatile)*v11;
              if (!*v11) {
                goto LABEL_40;
              }
              *(void *)&long long v40 = v17 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
LABEL_25:
              atomic_ullong *volatile v13 = v17;
              uint64_t v14 = 0x1020C405E66F15BLL;
              goto LABEL_39;
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v18 = (atomic_ullong *volatile)*v11;
              if (!*v11) {
                goto LABEL_40;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v18 + 2);
              atomic_ullong *volatile v13 = v18;
              unsigned int v19 = -235920773;
              goto LABEL_38;
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v20 = (atomic_ullong *volatile)*v11;
              if (*v11)
              {
                uint64_t v21 = (void *)v20[6];
                if (v21)
                {
                  v20[7] = (atomic_ullong)v21;
                  operator delete(v21);
                }
                unsigned int v22 = (void *)v20[3];
                if (v22)
                {
                  v20[4] = (atomic_ullong)v22;
                  operator delete(v22);
                }
                BOOL v23 = (std::__shared_weak_count *)v20[2];
                if (v23) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                }
                atomic_ullong *volatile v13 = v20;
                unsigned int v19 = 2071181815;
LABEL_38:
                uint64_t v14 = v19 | 0x1030C4000000000;
LABEL_39:
                MEMORY[0x22A614FA0](v13, v14);
              }
LABEL_40:
              uint64_t *v11 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t *v11 = v42;
        *(uint64_t *)((char *)v11 + 5) = *(void *)((char *)&v42 + 5);
        *((unsigned char *)v10 + 68) = BYTE12(v42);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  *(void *)&long long v40 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
}

void sub_2244C269C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  uint64_t v26 = 0;
  while (1)
  {
    if (*((char *)&a22 + v26 + 7) < 0) {
      operator delete(*(void **)((char *)&a20 + v26));
    }
    v26 -= 24;
    if (v26 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void turi::supervised::supervised_learning_model_base::get_feature_names(turi::supervised::supervised_learning_model_base *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  unint64_t v3 = (char *)this + 296;
  std::string::basic_string[abi:ne180100]<0>(__p, "features");
  uint64_t v4 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v3, (const void **)__p);
  turi::variant_converter<std::vector<std::string>,void>::get(v4, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2244C28DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::supervised_learning_model_base::get_target_name(turi::supervised::supervised_learning_model_base *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = (char *)this + 296;
  std::string::basic_string[abi:ne180100]<0>(__p, "target");
  uint64_t v4 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v3, (const void **)__p);
  turi::variant_converter<std::string,void>::get(v4, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2244C2960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *turi::supervised::supervised_learning_model_base::get_tracking_metrics@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[43], this[44], 0xAAAAAAAAAAAAAAABLL * (((char *)this[44] - (char *)this[43]) >> 3));
}

void turi::supervised::supervised_learning_model_base::get_metric_display_name(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  v11[6] = *MEMORY[0x263EF8340];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v7, "accuracy", "Accuracy");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v8, "auc", "Area Under Curve");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v9, "log_loss", "Log Loss");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v10, "max_error", "Max Error");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[23],0>(v11, "rmse", "Root-Mean-Square Error");
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)turi::supervised::supervised_learning_model_base::get_metric_display_name(std::string const&)const::display_names, v7, 5);
    for (uint64_t i = 192; i != -48; i -= 48)
      std::pair<std::string,std::string>::~pair((uint64_t)&v7[i]);
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100], turi::supervised::supervised_learning_model_base::get_metric_display_name(std::string const&)const::display_names, &dword_223D44000);
  }
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(turi::supervised::supervised_learning_model_base::get_metric_display_name(std::string const&)const::display_names, (unsigned __int8 *)a1);
  if (v4)
  {
    if ((char)v4[63] < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)v4 + 5), *((void *)v4 + 6));
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 40);
      a2->__r_.__value_.__r.__words[2] = *((void *)v4 + 7);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    }
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void sub_2244C2B90(_Unwind_Exception *a1)
{
  for (uint64_t i = 192; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::classify(uint64_t a1@<X0>, uint64_t a2@<X1>, turi::sframe *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  turi::sframe::sframe(a3);
  std::string::basic_string[abi:ne180100]<0>(&v13, "class");
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void **))(*(void *)a1 + 120))(&v10, a1, a2, &v13);
  std::string::basic_string[abi:ne180100]<0>(&__p, "class");
  turi::sframe::add_column((uint64_t)a3, &v10, (uint64_t)&__p, (uint64_t)&v15);
  turi::sframe::operator=((uint64_t)a3, (uint64_t)&v15);
  turi::sframe::~sframe((turi::sframe *)&v15);
  if (v12 < 0) {
    operator delete(__p);
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "num_classes");
  char v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&v15.__locale_);
  unint64_t v7 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v13, v6);
  if (v16 < 0) {
    operator delete(v15.__locale_);
  }
  if (v7 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "probability");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, std::locale *))(*(void *)a1 + 120))(&v9, a1, a2, &v15);
    if (v16 < 0) {
      operator delete(v15.__locale_);
    }
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "max_probability");
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void **))(*(void *)a1 + 120))(&v8, a1, a2, &v13);
  std::string::basic_string[abi:ne180100]<0>(&__p, "probability");
  turi::sframe::add_column((uint64_t)a3, &v8, (uint64_t)&__p, (uint64_t)&v15);
  turi::sframe::operator=((uint64_t)a3, (uint64_t)&v15);
  turi::sframe::~sframe((turi::sframe *)&v15);
  if (v12 < 0) {
    operator delete(__p);
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  if (v14 < 0) {
    operator delete(v13);
  }
}

void sub_2244C3300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,std::locale a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::locale::~locale(&a41);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a13, a14);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  turi::sframe::~sframe(v46);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::predict(turi::thread_pool *a1, uint64_t a2, uint64_t a3)
{
  v32[33] = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  turi::thread_pool::size(instance);
  char v29 = turi::supervised::prediction_type_enum_from_name((void *)a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1 + 296, (const void **)__p);
  uint64_t v7 = v6;
  if (SHIBYTE(v32[0]) < 0)
  {
    operator delete(__p[0]);
    if (v7) {
      goto LABEL_3;
    }
  }
  else if (v6)
  {
LABEL_3:
    std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
    long long v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)__p);
    unint64_t v9 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v28, v8);
    goto LABEL_6;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num_features");
  long long v10 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)__p);
  unint64_t v9 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v28, v10);
LABEL_6:
  unint64_t v11 = v9;
  unint64_t v30 = v9;
  if (SHIBYTE(v32[0]) < 0) {
    operator delete(__p[0]);
  }
  if (!(*(unsigned int (**)(turi::thread_pool *))(*(void *)a1 + 232))(a1)) {
LABEL_34:
  }
    operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "num_classes");
  char v12 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)__p);
  unint64_t v13 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v28, v12);
  if (SHIBYTE(v32[0]) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    if (v15 == 6 && **(_DWORD **)a3 == 1735549293 && *(_WORD *)(*(void *)a3 + 4) == 28265)
    {
      if (v13 < 3) {
        goto LABEL_33;
      }
      goto LABEL_36;
    }
    if (v15 != 11)
    {
LABEL_33:
      unint64_t v30 = v11 / (v13 - 1);
      goto LABEL_34;
    }
    char v14 = *(uint64_t **)a3;
  }
  else
  {
    if (*(unsigned char *)(a3 + 23) == 6)
    {
      if (*(_DWORD *)a3 != 1735549293 || *(_WORD *)(a3 + 4) != 28265) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    char v14 = (uint64_t *)a3;
    if (*(unsigned char *)(a3 + 23) != 11) {
      goto LABEL_33;
    }
  }
  uint64_t v17 = *v14;
  uint64_t v18 = *(uint64_t *)((char *)v14 + 3);
  if (v17 != 0x6C696261626F7270 || v18 != 0x7974696C69626162) {
    goto LABEL_33;
  }
LABEL_32:
  if (v13 <= 2) {
    goto LABEL_33;
  }
LABEL_36:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Output type '", 13);
  int v22 = *(char *)(a3 + 23);
  if (v22 >= 0) {
    uint64_t v23 = a3;
  }
  else {
    uint64_t v23 = *(void *)a3;
  }
  if (v22 >= 0) {
    uint64_t v24 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v24 = *(void *)(a3 + 8);
  }
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
  uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"' is only supported for binary classification.", 46);
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" For multi-class classification, use predict_topk() instead.", 60);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v27);
  char v28 = __p;
  turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_0::operator()();
}

void sub_2244C3958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void turi::supervised::supervised_learning_model_base::fast_predict(turi::supervised::supervised_learning_model_base *a1, void *a2, uint64_t a3, uint64_t **a4)
{
  v46[5] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  uint64_t v7 = (uint64_t)a1 + 296;
  uint64_t v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1 + 296, (const void **)&__p);
  uint64_t v9 = v8;
  if (SHIBYTE(v41) < 0)
  {
    operator delete(__p);
    if (v9)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
      long long v10 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(v7, (const void **)&__p);
      unint64_t v35 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v38, v10);
      if (SHIBYTE(v41) < 0) {
        operator delete(__p);
      }
LABEL_7:
      std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
      uint64_t v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v7, (const void **)&__p);
      uint64_t v12 = v11;
      if (SHIBYTE(v41) < 0)
      {
        operator delete(__p);
        if (!v12) {
          goto LABEL_14;
        }
      }
      else if (!v11)
      {
        goto LABEL_14;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
      unint64_t v13 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(v7, (const void **)&__p);
      unint64_t v14 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v38, v13);
      if (SHIBYTE(v41) < 0) {
        operator delete(__p);
      }
      v35 /= v14 - 1;
LABEL_14:
      std::vector<turi::flexible_type>::vector(v46, (uint64_t)(a2[1] - *a2) >> 4);
      if (*((char *)a4 + 23) < 0)
      {
        unsigned int v19 = a4[1];
        if (v19 != (uint64_t *)5
          || (*(_DWORD *)*a4 == 1935764579 ? (BOOL v20 = *((unsigned char *)*a4 + 4) == 115) : (BOOL v20 = 0), !v20))
        {
          if (v19 == (uint64_t *)18)
          {
            if (**a4 == 0x6C696261626F7270 && (*a4)[1] == 0x746365765F797469 && *((_WORD *)*a4 + 8) == 29295)
            {
LABEL_66:
              char v29 = 3;
              goto LABEL_56;
            }
            unsigned int v19 = a4[1];
          }
          if (v19 != (uint64_t *)11)
          {
LABEL_55:
            char v29 = 1;
            goto LABEL_56;
          }
          char v16 = *a4;
LABEL_42:
          uint64_t v23 = *v16;
          uint64_t v24 = *(uint64_t *)((char *)v16 + 3);
          if (v23 == 0x6C696261626F7270 && v24 == 0x7974696C69626162)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
            uint64_t v26 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(v7, (const void **)&__p);
            unint64_t v27 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v38, v26);
            if (SHIBYTE(v41) < 0) {
              operator delete(__p);
            }
            if (v27 >= 3) {
              turi::supervised::supervised_learning_model_base::fast_predict(std::vector<turi::flexible_type> const&,std::string const&,std::string const&)::$_0::operator()();
            }
          }
          goto LABEL_55;
        }
      }
      else
      {
        int v15 = *((unsigned __int8 *)a4 + 23);
        if (v15 != 5)
        {
          char v16 = (uint64_t *)a4;
          if (v15 != 11)
          {
            if (v15 != 18) {
              goto LABEL_55;
            }
            BOOL v17 = *a4 == (uint64_t *)0x6C696261626F7270 && a4[1] == (uint64_t *)0x746365765F797469;
            if (!v17 || *((_WORD *)a4 + 8) != 29295) {
              goto LABEL_55;
            }
            goto LABEL_66;
          }
          goto LABEL_42;
        }
        if (*(_DWORD *)a4 != 1935764579 || *((unsigned char *)a4 + 4) != 115) {
          goto LABEL_55;
        }
      }
      char v29 = *(unsigned char *)(*(void *)(*((void *)a1 + 47) + 24) + 28);
LABEL_56:
      turi::gl_sarray_writer::gl_sarray_writer(&v45, v29, 1);
      ((void (*)(turi::supervised::supervised_learning_model_base *, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
      char v44 = 0;
      char v44 = turi::supervised::prediction_type_enum_from_name(a4);
      unint64_t v30 = (unsigned char *)*a2;
      if (*a2 != a2[1])
      {
        uint64_t v37 = (uint64_t)a1 + 376;
        if (v30[12] == 5)
        {
          unint64_t v31 = *(void *)(*((void *)a1 + 47) + 64);
          if (v31 > 3 * turi::supervised::supervised_learning_model_base::num_features(a1))
          {
            LOBYTE(__p) = 0;
            long long v41 = 0u;
            long long v42 = 0u;
            unint64_t v43 = v35;
            turi::ml_data_row_reference::from_row(v37, (void *)(*(void *)v30 + 8));
          }
          uint64_t v38 = 0;
          unint64_t v39 = 0;
          if (v35)
          {
            if (v35 >> 61 || (std::string::size_type v32 = malloc_type_malloc(8 * v35, 0x1E76AA36uLL)) == 0)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              uint64_t v34 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v34, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
            }
            uint64_t v38 = v32;
          }
          unint64_t v39 = v35;
          turi::ml_data_row_reference::from_row(v37, (void *)(*(void *)v30 + 8));
        }
        turi::supervised::supervised_learning_model_base::fast_predict(std::vector<turi::flexible_type> const&,std::string const&,std::string const&)::$_1::operator()();
      }
      turi::gl_sarray_writer::close(&v45);
    }
  }
  else if (v8)
  {
    goto LABEL_3;
  }
  unint64_t v35 = 0;
  goto LABEL_7;
}

void sub_2244C475C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::string __p = (void *)(v31 - 152);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::fast_classify(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, turi::gl_sframe *a4@<X8>)
{
  v16[4] = *MEMORY[0x263EF8340];
  turi::gl_sframe::gl_sframe(a4);
  std::string::basic_string[abi:ne180100]<0>(v14, "class");
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, void **))(*(void *)a1 + 176))(v10, a1, a2, a3, v14);
  std::string::basic_string[abi:ne180100]<0>(__p, "class");
  turi::gl_sframe::add_column((uint64_t)a4, (uint64_t)v10, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "num_classes");
  uint64_t v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)v10);
  unint64_t v9 = turi::variant_converter<unsigned long,void>::get((uint64_t)v14, v8);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v9 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "error");
    std::string::basic_string[abi:ne180100]<0>(__p, "probability");
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **, void **))(*(void *)a1 + 176))(v14, a1, a2, v10, __p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    v16[0] = &unk_26D784310;
    void v16[3] = v16;
    turi::gl_sarray::apply((uint64_t)v14, (uint64_t)v16, 1, 1);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "max_probability");
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, void **))(*(void *)a1 + 176))(v10, a1, a2, a3, v14);
  std::string::basic_string[abi:ne180100]<0>(__p, "probability");
  turi::gl_sframe::add_column((uint64_t)a4, (uint64_t)v10, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_2244C5028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a16);
  if (*(char *)(v34 - 105) < 0) {
    operator delete(*(void **)(v34 - 128));
  }
  *uint64_t v33 = &unk_26D759E10;
  uint64_t v36 = (std::__shared_weak_count *)v33[2];
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::predict_topk(uint64_t a1@<X0>, std::string::value_type *a2@<X2>, unint64_t a3@<X3>, turi::sframe *a4@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  unint64_t v39 = a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  uint64_t v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  unint64_t v9 = (turi::thread_pool *)turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v8);
  long long v10 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v38 = v10;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v9);
  uint64_t v12 = turi::thread_pool::size(instance);
  unint64_t v37 = 0;
  char v36 = turi::supervised::prediction_type_enum_from_name(a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  uint64_t v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v14 = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v14) {
      goto LABEL_5;
    }
  }
  else if (v13)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
    char v15 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
    unint64_t v16 = turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v15);
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_features");
  BOOL v17 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&__p.__r_.__value_.__l.__data_);
  unint64_t v16 = turi::variant_converter<unsigned long,void>::get((uint64_t)&p_p, v17);
LABEL_8:
  unint64_t v18 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v37 = v18 / ((unint64_t)v10 - 1);
  if ((unint64_t)v10 < a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"The training data contained ", 28);
    uint64_t v26 = (void *)std::ostream::operator<<();
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" classes.", 9);
    char v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" The parameter 'k' must be less than or equal to the number of ", 63);
    char v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"classes in the training data.", 29);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v29);
    p_p = &__p;
    turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_0::operator()();
  }
  turi::sframe::sframe(a4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "id");
  std::string::basic_string[abi:ne180100]<0>(v41, "class");
  if (a2[23] < 0) {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else {
    std::string v42 = *(std::string *)a2;
  }
  p_p = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  p_p_p = &p_p;
  LOBYTE(v31) = 0;
  p_p = (std::string *)operator new(0x48uLL);
  uint64_t v34 = p_p;
  unint64_t v35 = p_p + 3;
  uint64_t v19 = 0;
  uint64_t v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (long long *)&__p, v43, p_p);
  do
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[v19 + 2]) < 0) {
      operator delete(*(void **)((char *)&v42.__r_.__value_.__l.__data_ + v19 * 8));
    }
    v19 -= 3;
  }
  while (v19 != -9);
  __int16 v20 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 376) + 24) + 28);
  uint64_t v31 = 0;
  uint64_t v21 = operator new(2uLL);
  _WORD *v21 = v20 << 8;
  p_p_p = v21;
  std::string::size_type v32 = v21 + 1;
  int v22 = a2[23];
  if (v22 < 0)
  {
    if (*((void *)a2 + 1) != 4) {
      goto LABEL_24;
    }
    a2 = *(std::string::value_type **)a2;
  }
  else if (v22 != 4)
  {
    goto LABEL_24;
  }
  if (*(_DWORD *)a2 == 1802396018)
  {
    uint64_t v23 = operator new(4uLL);
    char v24 = 0;
LABEL_25:
    v23[2] = v24;
    *(_WORD *)uint64_t v23 = *v21;
    uint64_t v25 = v23 + 3;
    p_p_p = v23;
    std::string::size_type v32 = v23 + 4;
    operator delete(v21);
    uint64_t v31 = v25;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    turi::sframe::open_for_write((uint64_t)a4, &p_p, &p_p_p, &__p, v12, 1);
  }
LABEL_24:
  uint64_t v23 = operator new(4uLL);
  char v24 = 1;
  goto LABEL_25;
}

void sub_2244C5570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void turi::supervised::supervised_learning_model_base::evaluate(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  gettimeofday(&v128, 0);
  gettimeofday(&v137, 0);
  uint64_t v6 = (cppipc *)global_logger();
  if (*((int *)v6 + 169) <= 2)
  {
    if (cppipc::must_cancel(v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "evaluate", 711, 1);
    unint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Starting evaluation", 19);
    }
    uint64_t v6 = (cppipc *)pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*((void *)v6 + 2) - 24) + 16));
        long long v10 = std::locale::use_facet((const std::locale *)&v137, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale((std::locale *)&v137);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v6);
  uint64_t v107 = turi::thread_pool::size(instance);
  unint64_t v127 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v137, "num_coefficients");
  uint64_t v12 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&v137);
  unint64_t v13 = turi::variant_converter<unsigned long,void>::get((uint64_t)v135, v12);
  if ((char)v138 < 0) {
    operator delete((void *)v137.tv_sec);
  }
  unint64_t v127 = v13;
  BOOL v126 = 0;
  unint64_t v14 = *(void *)(*(void *)(a1 + 376) + 64);
  BOOL v126 = v14 <= 3
              * turi::supervised::supervised_learning_model_base::num_features((turi::supervised::supervised_learning_model_base *)a1);
  v124[1] = 0;
  unint64_t v125 = 0;
  float64x2_t v123 = (uint64_t *)v124;
  v124[0] = 0;
  memset(v121, 0, sizeof(v121));
  int v122 = 1065353216;
  char v120 = 0;
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1);
  char v120 = v15;
  if (v15)
  {
    std::string::basic_string[abi:ne180100]<0>(&v137, "num_classes");
    unint64_t v16 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 296, (const void **)&v137);
    unint64_t v125 = turi::variant_converter<unsigned long,void>::get((uint64_t)v135, v16);
    if ((char)v138 < 0) {
      operator delete((void *)v137.tv_sec);
    }
    uint64_t v17 = *(void *)(*(void *)a2 + 24);
    unsigned int v18 = *(_DWORD *)(v17 + 24);
    if (v18 <= 6 && ((1 << v18) & 0x5A) != 0) {
      unint64_t v19 = *(void *)(*(void *)(v17 + 32) + 104);
    }
    else {
      unint64_t v19 = *(void *)(v17 + 72);
    }
    v127 /= v125 - 1;
    uint64_t v133 = 0;
    if (v19)
    {
      for (unint64_t i = 0; i < v19; v133 = (long long *)i)
      {
        uint64_t v21 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 376) + 24) + 32) + 80);
        v137.__darwin_time_t tv_sec = (__darwin_time_t)&v133;
        int v22 = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v123, (unint64_t *)&v133, (uint64_t)&std::piecewise_construct, &v137);
        uint64_t v23 = v22;
        uint64_t v24 = v21 + 16 * i;
        uint64_t v25 = v22 + 5;
        if ((uint64_t **)v24 != v22 + 5)
        {
          switch(*((unsigned char *)v22 + 52))
          {
            case 2:
              if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v26 = *v25;
                if (!*v25) {
                  goto LABEL_52;
                }
                if (*((char *)v26 + 31) < 0) {
                  operator delete((void *)v26[1]);
                }
                atomic_ullong *volatile v27 = v26;
                uint64_t v28 = 0x1012C404EF22A49;
                goto LABEL_51;
              }
              break;
            case 3:
              if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v35 = *v25;
                if (!*v25) {
                  goto LABEL_52;
                }
                char v36 = (void *)v35[1];
                if (v36)
                {
                  uint64_t v35[2] = (atomic_ullong)v36;
                  operator delete(v36);
                }
                atomic_ullong *volatile v27 = v35;
                uint64_t v28 = 0x1080C409938AC02;
                goto LABEL_51;
              }
              break;
            case 4:
              if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v29 = *v25;
                if (!*v25) {
                  goto LABEL_52;
                }
                v137.__darwin_time_t tv_sec = (__darwin_time_t)(v29 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
                goto LABEL_46;
              }
              break;
            case 5:
              if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v29 = *v25;
                if (!*v25) {
                  goto LABEL_52;
                }
                v137.__darwin_time_t tv_sec = (__darwin_time_t)(v29 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
LABEL_46:
                atomic_ullong *volatile v27 = v29;
                uint64_t v28 = 0x1020C405E66F15BLL;
                goto LABEL_51;
              }
              break;
            case 8:
              if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v37 = *v25;
                if (!*v25) {
                  goto LABEL_52;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v37 + 2);
                atomic_ullong *volatile v27 = v37;
                unsigned int v34 = -235920773;
                goto LABEL_50;
              }
              break;
            case 9:
              if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v30 = *v25;
                if (*v25)
                {
                  uint64_t v31 = (void *)v30[6];
                  if (v31)
                  {
                    void v30[7] = (atomic_ullong)v31;
                    operator delete(v31);
                  }
                  std::string::size_type v32 = (void *)v30[3];
                  if (v32)
                  {
                    v30[4] = (atomic_ullong)v32;
                    operator delete(v32);
                  }
                  uint64_t v33 = (std::__shared_weak_count *)v30[2];
                  if (v33) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                  }
                  atomic_ullong *volatile v27 = v30;
                  unsigned int v34 = 2071181815;
LABEL_50:
                  uint64_t v28 = v34 | 0x1030C4000000000;
LABEL_51:
                  MEMORY[0x22A614FA0](v27, v28);
                }
LABEL_52:
                char *v25 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v38 = *(uint64_t **)v24;
          *(uint64_t **)((char *)v25 + 5) = *(uint64_t **)(v24 + 5);
          char *v25 = v38;
          LODWORD(v38) = *(unsigned __int8 *)(v24 + 12);
          *((unsigned char *)v23 + 52) = (_BYTE)v38;
          BOOL v39 = v38 > 9;
          int v40 = (1 << (char)v38) & 0x33C;
          if (!v39 && v40 != 0) {
            atomic_fetch_add(*v25, 1uLL);
          }
        }
        std::string v42 = v133;
        *((unsigned char *)&v137.tv_usec + 4) = 0;
        v137.__darwin_suseconds_t tv_usec = 0;
        v137.__darwin_time_t tv_sec = (__darwin_time_t)v133;
        v135[0] = (uint64_t *)&v137;
        *((void *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>((uint64_t)v121, (unsigned __int8 *)&v137, (uint64_t)&std::piecewise_construct, v135)+ 4) = v42;
        switch(*((unsigned char *)&v137.tv_usec + 4))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)v137.tv_sec, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              __darwin_time_t tv_sec = v137.tv_sec;
              if (v137.tv_sec)
              {
                if (*(char *)(v137.tv_sec + 31) < 0) {
                  operator delete(*(void **)(v137.tv_sec + 8));
                }
                uint64_t v44 = (void *)tv_sec;
                uint64_t v45 = 0x1012C404EF22A49;
                goto LABEL_89;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)v137.tv_sec, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              __darwin_time_t v52 = v137.tv_sec;
              if (v137.tv_sec)
              {
                uint64_t v53 = *(void **)(v137.tv_sec + 8);
                if (v53)
                {
                  *(void *)(v137.tv_sec + 16) = v53;
                  operator delete(v53);
                }
                uint64_t v44 = (void *)v52;
                uint64_t v45 = 0x1080C409938AC02;
                goto LABEL_89;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)v137.tv_sec, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              __darwin_time_t v46 = v137.tv_sec;
              if (v137.tv_sec)
              {
                v135[0] = (uint64_t *)(v137.tv_sec + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v135);
                goto LABEL_84;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)v137.tv_sec, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              __darwin_time_t v46 = v137.tv_sec;
              if (v137.tv_sec)
              {
                v135[0] = (uint64_t *)(v137.tv_sec + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v135);
LABEL_84:
                uint64_t v44 = (void *)v46;
                uint64_t v45 = 0x1020C405E66F15BLL;
                goto LABEL_89;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)v137.tv_sec, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              __darwin_time_t v54 = v137.tv_sec;
              if (v137.tv_sec)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(v137.tv_sec + 16));
                uint64_t v44 = (void *)v54;
                unsigned int v51 = -235920773;
                goto LABEL_88;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)v137.tv_sec, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v47 = (void *)v137.tv_sec;
              if (v137.tv_sec)
              {
                char v48 = *(void **)(v137.tv_sec + 48);
                if (v48)
                {
                  *(void *)(v137.tv_sec + 56) = v48;
                  operator delete(v48);
                }
                unsigned int v49 = (void *)v47[3];
                if (v49)
                {
                  v47[4] = v49;
                  operator delete(v49);
                }
                uint64_t v50 = (std::__shared_weak_count *)v47[2];
                if (v50) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v50);
                }
                uint64_t v44 = v47;
                unsigned int v51 = 2071181815;
LABEL_88:
                uint64_t v45 = v51 | 0x1030C4000000000;
LABEL_89:
                MEMORY[0x22A614FA0](v44, v45);
              }
            }
            break;
          default:
            break;
        }
        unint64_t i = (unint64_t)v133 + 1;
      }
    }
  }
  memset(v119, 0, sizeof(v119));
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  memset(&v115, 0, sizeof(v115));
  std::string::basic_string[abi:ne180100]<0>(&v137, "auto");
  uint64_t v55 = a3[23];
  if ((v55 & 0x80u) == 0) {
    uint64_t v56 = a3[23];
  }
  else {
    uint64_t v56 = *((void *)a3 + 1);
  }
  uint64_t v57 = v138;
  int v58 = (char)v138;
  if ((v138 & 0x80u) != 0) {
    uint64_t v57 = *(void *)&v137.tv_usec;
  }
  if (v56 != v57)
  {
    BOOL v68 = 0;
    if (((char)v138 & 0x80000000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_113;
  }
  if ((v138 & 0x80u) == 0) {
    char v59 = (unsigned __int8 *)&v137;
  }
  else {
    char v59 = (unsigned __int8 *)v137.tv_sec;
  }
  if ((v55 & 0x80) != 0)
  {
    BOOL v68 = memcmp(*(const void **)a3, v59, *((void *)a3 + 1)) == 0;
    if ((v58 & 0x80000000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_113;
  }
  if (!a3[23])
  {
    BOOL v68 = 1;
    if (((char)v138 & 0x80000000) == 0) {
      goto LABEL_109;
    }
LABEL_113:
    operator delete((void *)v137.tv_sec);
    if (v68) {
      goto LABEL_110;
    }
    goto LABEL_114;
  }
  uint64_t v60 = v55 - 1;
  unint64_t v61 = a3;
  do
  {
    int v63 = *v61++;
    int v62 = v63;
    int v65 = *v59++;
    int v64 = v65;
    BOOL v66 = v60-- != 0;
    char v67 = v66;
    BOOL v68 = v62 == v64;
  }
  while (v62 == v64 && (v67 & 1) != 0);
  if ((char)v138 < 0) {
    goto LABEL_113;
  }
LABEL_109:
  if (v68)
  {
LABEL_110:
    uint64_t v69 = (std::string **)(a1 + 320);
    if (&v115 == (std::vector<std::string> *)(a1 + 320)) {
      goto LABEL_148;
    }
    std::string::size_type v70 = (long long **)(a1 + 328);
LABEL_135:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v115, *v69, *v70, 0xAAAAAAAAAAAAAAABLL * (((char *)*v70 - (char *)*v69) >> 3));
    goto LABEL_148;
  }
LABEL_114:
  std::string::basic_string[abi:ne180100]<0>(&v137, "train");
  uint64_t v71 = a3[23];
  if ((v71 & 0x80u) == 0) {
    uint64_t v72 = a3[23];
  }
  else {
    uint64_t v72 = *((void *)a3 + 1);
  }
  uint64_t v73 = v138;
  int v74 = (char)v138;
  if ((v138 & 0x80u) != 0) {
    uint64_t v73 = *(void *)&v137.tv_usec;
  }
  if (v72 != v73)
  {
    BOOL v83 = 0;
    if (((char)v138 & 0x80000000) == 0) {
      goto LABEL_132;
    }
    goto LABEL_137;
  }
  if ((v138 & 0x80u) == 0) {
    uint64_t v75 = (unsigned __int8 *)&v137;
  }
  else {
    uint64_t v75 = (unsigned __int8 *)v137.tv_sec;
  }
  if ((v71 & 0x80) != 0)
  {
    BOOL v83 = memcmp(*(const void **)a3, v75, *((void *)a3 + 1)) == 0;
    if ((v74 & 0x80000000) == 0) {
      goto LABEL_132;
    }
    goto LABEL_137;
  }
  if (!a3[23])
  {
    BOOL v83 = 1;
    if (((char)v138 & 0x80000000) == 0) {
      goto LABEL_132;
    }
LABEL_137:
    operator delete((void *)v137.tv_sec);
    if (v83) {
      goto LABEL_133;
    }
    goto LABEL_138;
  }
  uint64_t v76 = v71 - 1;
  uint64_t v77 = a3;
  do
  {
    int v79 = *v77++;
    int v78 = v79;
    int v81 = *v75++;
    int v80 = v81;
    BOOL v66 = v76-- != 0;
    char v82 = v66;
    BOOL v83 = v78 == v80;
  }
  while (v78 == v80 && (v82 & 1) != 0);
  if ((char)v138 < 0) {
    goto LABEL_137;
  }
LABEL_132:
  if (v83)
  {
LABEL_133:
    uint64_t v69 = (std::string **)(a1 + 344);
    if (&v115 == (std::vector<std::string> *)(a1 + 344)) {
      goto LABEL_148;
    }
    std::string::size_type v70 = (long long **)(a1 + 352);
    goto LABEL_135;
  }
LABEL_138:
  v115.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v115, (long long *)a3);
LABEL_148:
  char v114 = 0;
  if (v115.__begin_ != v115.__end_)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "default");
    turi::flexible_type_converter<std::string>::set((uint64_t)&v133);
  }
  uint64_t v84 = v116;
  if (v117 != v116)
  {
    uint64_t v85 = 0;
    unint64_t v86 = 0;
    do
    {
      (*(void (**)(void, uint64_t))(**(void **)(v84 + v85) + 24))(*(void *)(v84 + v85), v107);
      ++v86;
      uint64_t v84 = v116;
      v85 += 16;
    }
    while (v86 < (v117 - v116) >> 4);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v131);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v129);
  float64x2_t v87 = operator new(0x50uLL);
  *float64x2_t v87 = &unk_26D784410;
  v87[1] = &v127;
  void v87[2] = &v114;
  void v87[3] = &v131;
  v87[4] = &v129;
  v87[5] = a2;
  v87[6] = &v120;
  v87[7] = &v126;
  v87[8] = a1;
  v87[9] = &v116;
  uint64_t v139 = v87;
  turi::in_parallel((turi::thread_pool *)&v137);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v137);
  if (v114)
  {
    (*(void (**)(uint64_t))(*(void *)v131 + 40))(v131);
    (*(void (**)(uint64_t))(*(void *)v129 + 40))(v129);
  }
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)a5 = a5 + 8;
  uint64_t v88 = v116;
  if (v117 != v116)
  {
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    unint64_t v91 = 0;
    do
    {
      (*(void (**)(timeval *__return_ptr))(**(void **)(v88 + v90) + 64))(&v137);
      uint64_t v133 = (long long *)(v119[0] + v89);
      int v92 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a5, (const void **)(v119[0] + v89), (uint64_t)&std::piecewise_construct, &v133);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v92 + 14, (unsigned int *)&v137);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v137);
      ++v91;
      uint64_t v88 = v116;
      v90 += 16;
      v89 += 24;
    }
    while (v91 < (v117 - v116) >> 4);
  }
  if (v114 && (a4 & 1) != 0)
  {
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v135);
    uint64_t v111 = v131;
    uint64_t v112 = v132;
    if (v132) {
      atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::gl_sarray::gl_sarray(&v137, &v111);
    std::string::basic_string[abi:ne180100]<0>(&v133, "probs");
    turi::gl_sframe::add_column((uint64_t)v135, (uint64_t)&v137, (uint64_t)&v133);
    if (v134 < 0) {
      operator delete(v133);
    }
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v137);
    if (v112) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
    }
    uint64_t v109 = v129;
    unint64_t v110 = v130;
    if (v130) {
      atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::gl_sarray::gl_sarray(&v137, &v109);
    std::string::basic_string[abi:ne180100]<0>(&v133, "class");
    turi::gl_sframe::add_column((uint64_t)v135, (uint64_t)&v137, (uint64_t)&v133);
    if (v134 < 0) {
      operator delete(v133);
    }
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v137);
    if (v110) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v110);
    }
    std::string::basic_string[abi:ne180100]<0>(&v137, "predictions");
    uint64_t v133 = (long long *)&v137;
    char v93 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a5, (const void **)&v137, (uint64_t)&std::piecewise_construct, &v133);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<turi::gl_sframe>(v93 + 14, (uint64_t)v135);
    if ((char)v138 < 0) {
      operator delete((void *)v137.tv_sec);
    }
    v135[0] = (uint64_t *)&unk_26D759E10;
    if (v136) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v136);
    }
  }
  uint64_t v94 = (int *)global_logger();
  if (v94[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v94)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int v95 = (file_logger *)global_logger();
    char v96 = file_logger::start_stream(v95, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "evaluate", 908, 1);
    uint64_t v97 = pthread_getspecific(*((void *)v96 + 74));
    if (v97 && *((unsigned char *)v97 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97 + 2, (uint64_t)"Evaluation done at ", 19);
    }
    gettimeofday(&v137, 0);
    uint64_t v98 = file_logger::operator<<<double>((uint64_t)v96);
    char v99 = pthread_getspecific(*(void *)(v98 + 592));
    if (v99 && *((unsigned char *)v99 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99 + 2, (uint64_t)"s", 1);
    }
    uint64_t v100 = pthread_getspecific(*(void *)(v98 + 592));
    if (v100)
    {
      if (*((unsigned char *)v100 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(void *)(v100[2] - 24) + 16));
        int v101 = std::locale::use_facet((const std::locale *)&v137, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
        std::locale::~locale((std::locale *)&v137);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v98);
        if (*(_DWORD *)(v98 + 600) == 7)
        {
          __print_back_trace();
          uint64_t v103 = __cxa_allocate_exception(8uLL);
          *uint64_t v103 = "LOG_FATAL encountered";
          __cxa_throw(v103, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (v130) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v130);
  }
  if (v132) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v132);
  }
  v137.__darwin_time_t tv_sec = (__darwin_time_t)&v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
  v137.__darwin_time_t tv_sec = (__darwin_time_t)&v116;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
  v137.__darwin_time_t tv_sec = (__darwin_time_t)v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v121);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v123, v124[0]);
}

void sub_2244C6934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49)
{
  STACK[0x2C0] = (unint64_t)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = (unint64_t)&a36;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  STACK[0x2C0] = (unint64_t)&a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C0]);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&a43);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&a48, (void *)a49);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2244C6E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::display_classifier_training_summary(turi::supervised::supervised_learning_model_base *a1, uint64_t a2, int a3)
{
  turi::supervised::supervised_learning_model_base::num_examples(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_classes");
  unint64_t v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 296, (const void **)__p);
  turi::variant_converter<unsigned long,void>::get((uint64_t)&v62, v6);
  if (v61 < 0) {
    operator delete(__p[0]);
  }
  turi::supervised::supervised_learning_model_base::num_features(a1);
  turi::supervised::supervised_learning_model_base::num_unpacked_features(a1);
  uint64_t v7 = (cppipc *)global_logger();
  int v8 = *((_DWORD *)v7 + 169);
  if (a3)
  {
    if (v8 > 4) {
      return;
    }
    if (!cppipc::must_cancel(v7))
    {
      unint64_t v9 = (file_logger *)global_logger();
      started = file_logger::start_stream(v9, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 928, 1);
      unint64_t v11 = pthread_getspecific(*((void *)started + 74));
      if (v11 && *((unsigned char *)v11 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Training a classifier on ", 25);
      }
      uint64_t v12 = file_logger::operator<<<unsigned long>((uint64_t)started);
      unint64_t v13 = pthread_getspecific(*(void *)(v12 + 592));
      if (v13 && *((unsigned char *)v13 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)" examples mapping to ", 21);
      }
      uint64_t v14 = file_logger::operator<<<unsigned long>(v12);
      int v15 = pthread_getspecific(*(void *)(v14 + 592));
      if (v15 && *((unsigned char *)v15 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)" classes.", 9);
      }
      uint64_t v16 = pthread_getspecific(*(void *)(v14 + 592));
      if (v16 && *((unsigned char *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[2] - 24) + 16));
        long long v17 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        goto LABEL_71;
      }
      return;
    }
    goto LABEL_73;
  }
  if (v8 <= 4)
  {
    if (cppipc::must_cancel(v7)) {
      goto LABEL_73;
    }
    unsigned int v18 = (file_logger *)global_logger();
    unint64_t v19 = file_logger::start_stream(v18, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 933, 1);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v59 = *(std::string *)a2;
    }
    uint64_t v20 = file_logger::operator<<<std::string>((uint64_t)v19, (uint64_t)&v59);
    uint64_t v21 = pthread_getspecific(*(void *)(v20 + 592));
    if (v21 && *((unsigned char *)v21 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)":", 1);
    }
    int v22 = pthread_getspecific(*(void *)(v20 + 592));
    if (v22)
    {
      if (*((unsigned char *)v22 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(v22[2] - 24) + 16));
        uint64_t v23 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v20);
        if (*(_DWORD *)(v20 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v24 = (int *)global_logger();
  if (v24[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v24)) {
      goto LABEL_73;
    }
    uint64_t v25 = (file_logger *)global_logger();
    atomic_ullong *volatile v26 = file_logger::start_stream(v25, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 934, 1);
    atomic_ullong *volatile v27 = pthread_getspecific(*((void *)v26 + 74));
    if (v27 && *((unsigned char *)v27 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)"--------------------------------------------------------", 56);
    }
    uint64_t v28 = pthread_getspecific(*((void *)v26 + 74));
    if (v28)
    {
      if (*((unsigned char *)v28 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(v28[2] - 24) + 16));
        atomic_ullong *volatile v29 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7) {
          goto LABEL_74;
        }
      }
    }
  }
  atomic_ullong *volatile v30 = (int *)global_logger();
  if (v30[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v30)) {
      goto LABEL_73;
    }
    uint64_t v31 = (file_logger *)global_logger();
    std::string::size_type v32 = file_logger::start_stream(v31, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 935, 1);
    uint64_t v33 = pthread_getspecific(*((void *)v32 + 74));
    if (v33 && *((unsigned char *)v33 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33 + 2, (uint64_t)"Number of examples          : ", 30);
    }
    uint64_t v34 = file_logger::operator<<<unsigned long>((uint64_t)v32);
    atomic_ullong *volatile v35 = pthread_getspecific(*(void *)(v34 + 592));
    if (v35)
    {
      if (*((unsigned char *)v35 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(v35[2] - 24) + 16));
        char v36 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v34);
        if (*(_DWORD *)(v34 + 600) == 7) {
          goto LABEL_74;
        }
      }
    }
  }
  atomic_ullong *volatile v37 = (int *)global_logger();
  if (v37[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v37)) {
      goto LABEL_73;
    }
    uint64_t v38 = (file_logger *)global_logger();
    BOOL v39 = file_logger::start_stream(v38, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 936, 1);
    int v40 = pthread_getspecific(*((void *)v39 + 74));
    if (v40 && *((unsigned char *)v40 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)"Number of classes           : ", 30);
    }
    uint64_t v41 = file_logger::operator<<<unsigned long>((uint64_t)v39);
    std::string v42 = pthread_getspecific(*(void *)(v41 + 592));
    if (v42)
    {
      if (*((unsigned char *)v42 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(v42[2] - 24) + 16));
        unint64_t v43 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v41);
        if (*(_DWORD *)(v41 + 600) == 7) {
          goto LABEL_74;
        }
      }
    }
  }
  uint64_t v44 = (int *)global_logger();
  if (v44[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v44)) {
      goto LABEL_73;
    }
    uint64_t v45 = (file_logger *)global_logger();
    __darwin_time_t v46 = file_logger::start_stream(v45, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 937, 1);
    unint64_t v47 = pthread_getspecific(*((void *)v46 + 74));
    if (v47 && *((unsigned char *)v47 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47 + 2, (uint64_t)"Number of feature columns   : ", 30);
    }
    uint64_t v48 = file_logger::operator<<<unsigned long>((uint64_t)v46);
    unsigned int v49 = pthread_getspecific(*(void *)(v48 + 592));
    if (v49)
    {
      if (*((unsigned char *)v49 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(v49[2] - 24) + 16));
        uint64_t v50 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v48);
        if (*(_DWORD *)(v48 + 600) == 7) {
          goto LABEL_74;
        }
      }
    }
  }
  unsigned int v51 = (int *)global_logger();
  if (v51[169] > 4) {
    return;
  }
  if (cppipc::must_cancel((cppipc *)v51)) {
LABEL_73:
  }
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  __darwin_time_t v52 = (file_logger *)global_logger();
  uint64_t v53 = file_logger::start_stream(v52, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_classifier_training_summary", 938, 1);
  __darwin_time_t v54 = pthread_getspecific(*((void *)v53 + 74));
  if (v54 && *((unsigned char *)v54 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54 + 2, (uint64_t)"Number of unpacked features : ", 30);
  }
  uint64_t v14 = file_logger::operator<<<unsigned long>((uint64_t)v53);
  uint64_t v55 = pthread_getspecific(*(void *)(v14 + 592));
  if (v55 && *((unsigned char *)v55 + 280))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(v55[2] - 24) + 16));
    uint64_t v56 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
LABEL_71:
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    file_logger::stream_flush((file_logger *)v14);
    if (*(_DWORD *)(v14 + 600) != 7) {
      return;
    }
LABEL_74:
    __print_back_trace();
    uint64_t v57 = __cxa_allocate_exception(8uLL);
    *uint64_t v57 = "LOG_FATAL encountered";
    __cxa_throw(v57, MEMORY[0x263F8C1D8], 0);
  }
}

void sub_2244C7794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void turi::supervised::supervised_learning_model_base::display_regression_training_summary(turi::supervised::supervised_learning_model_base *a1, uint64_t a2)
{
  turi::supervised::supervised_learning_model_base::num_examples(a1);
  turi::supervised::supervised_learning_model_base::num_features(a1);
  turi::supervised::supervised_learning_model_base::num_unpacked_features(a1);
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      goto LABEL_47;
    }
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 955, 1);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint64_t v7 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    int v8 = pthread_getspecific(*(void *)(v7 + 592));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)":", 1);
    }
    unint64_t v9 = pthread_getspecific(*(void *)(v7 + 592));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(&v41, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v7);
        if (*(_DWORD *)(v7 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v11 = (int *)global_logger();
  if (v11[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v11)) {
      goto LABEL_47;
    }
    uint64_t v12 = (file_logger *)global_logger();
    unint64_t v13 = file_logger::start_stream(v12, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 956, 1);
    uint64_t v14 = pthread_getspecific(*((void *)v13 + 74));
    if (v14 && *((unsigned char *)v14 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"--------------------------------------------------------", 56);
    }
    int v15 = pthread_getspecific(*((void *)v13 + 74));
    if (v15)
    {
      if (*((unsigned char *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(v15[2] - 24) + 16));
        uint64_t v16 = std::locale::use_facet(&v41, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v13);
        if (*((_DWORD *)v13 + 150) == 7) {
          goto LABEL_48;
        }
      }
    }
  }
  long long v17 = (int *)global_logger();
  if (v17[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v17)) {
      goto LABEL_47;
    }
    unsigned int v18 = (file_logger *)global_logger();
    unint64_t v19 = file_logger::start_stream(v18, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 957, 1);
    uint64_t v20 = pthread_getspecific(*((void *)v19 + 74));
    if (v20 && *((unsigned char *)v20 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)"Number of examples          : ", 30);
    }
    uint64_t v21 = file_logger::operator<<<unsigned long>((uint64_t)v19);
    int v22 = pthread_getspecific(*(void *)(v21 + 592));
    if (v22)
    {
      if (*((unsigned char *)v22 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(v22[2] - 24) + 16));
        uint64_t v23 = std::locale::use_facet(&v41, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v21);
        if (*(_DWORD *)(v21 + 600) == 7) {
          goto LABEL_48;
        }
      }
    }
  }
  uint64_t v24 = (int *)global_logger();
  if (v24[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v24)) {
      goto LABEL_47;
    }
    uint64_t v25 = (file_logger *)global_logger();
    atomic_ullong *volatile v26 = file_logger::start_stream(v25, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 958, 1);
    atomic_ullong *volatile v27 = pthread_getspecific(*((void *)v26 + 74));
    if (v27 && *((unsigned char *)v27 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)"Number of features          : ", 30);
    }
    uint64_t v28 = file_logger::operator<<<unsigned long>((uint64_t)v26);
    atomic_ullong *volatile v29 = pthread_getspecific(*(void *)(v28 + 592));
    if (v29)
    {
      if (*((unsigned char *)v29 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(v29[2] - 24) + 16));
        atomic_ullong *volatile v30 = std::locale::use_facet(&v41, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(&v41);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v28);
        if (*(_DWORD *)(v28 + 600) == 7)
        {
LABEL_48:
          __print_back_trace();
          uint64_t v38 = __cxa_allocate_exception(8uLL);
          *uint64_t v38 = "LOG_FATAL encountered";
          __cxa_throw(v38, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v31 = (int *)global_logger();
  if (v31[169] > 4) {
    return;
  }
  if (cppipc::must_cancel((cppipc *)v31)) {
LABEL_47:
  }
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  std::string::size_type v32 = (file_logger *)global_logger();
  uint64_t v33 = file_logger::start_stream(v32, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "display_regression_training_summary", 959, 1);
  uint64_t v34 = pthread_getspecific(*((void *)v33 + 74));
  if (v34 && *((unsigned char *)v34 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34 + 2, (uint64_t)"Number of unpacked features : ", 30);
  }
  uint64_t v35 = file_logger::operator<<<unsigned long>((uint64_t)v33);
  char v36 = pthread_getspecific(*(void *)(v35 + 592));
  if (v36)
  {
    if (*((unsigned char *)v36 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(v36[2] - 24) + 16));
      atomic_ullong *volatile v37 = std::locale::use_facet(&v41, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      std::locale::~locale(&v41);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v35);
      if (*(_DWORD *)(v35 + 600) == 7) {
        goto LABEL_48;
      }
    }
  }
}

void sub_2244C7E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
}

void turi::supervised::supervised_learning_model_base::get_metadata_mapping(turi::supervised::supervised_learning_model_base *this@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)*((void *)this + 47);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = v2;
  std::vector<std::vector<turi::flexible_type>>::vector(a2, v3[8]);
  if (v3[1] != *v3)
  {
    std::vector<turi::flexible_type>::vector(&v6, 2uLL);
    uint64_t v4 = *(std::__shared_weak_count **)(*v3 + 8);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    turi::flexible_type::operator=<std::string>(v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_2244C878C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2244C87F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2244C87C8);
}

void turi::supervised::supervised_learning_model_base::get_metadata_mapping(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/supervised_learning.cpp", "operator()", 1006, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::supervised_learning_model_base::get_metadata_mapping(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2244C8974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_train(turi::supervised::supervised_learning_model_base *a1, const turi::gl_sframe *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v188);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v186, a2);
  turi::supervised::create_validation_data((uint64_t)v186, a4, (turi::gl_sframe *)&__p);
  turi::gl_sframe::operator=((uint64_t)a2, (uint64_t)&__p);
  turi::gl_sframe::operator=((uint64_t)v188, (uint64_t)&v206);
  uint64_t v206 = &unk_26D759E10;
  if (v207) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v207);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
  if (__p.__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
  }
  v186[0] = &unk_26D759E10;
  if (v187) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v187);
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v184, a2);
  turi::gl_sframe::remove_column((uint64_t)v184, (unsigned __int8 **)a3);
  (*(void (**)(turi::supervised::supervised_learning_model_base *, uint64_t))(*(void *)a1 + 64))(a1, a5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "features");
  uint64_t v10 = turi::option_manager::value((uint64_t)a1 + 224, (const void **)&__p.__r_.__value_.__l.__data_);
  *(void *)std::string __str = 0;
  *(_DWORD *)&__str[8] = 0;
  __str[12] = 0;
  if ((unsigned char *)v10 != __str)
  {
    uint64_t v11 = *(void *)v10;
    *(void *)&__str[5] = *(void *)(v10 + 5);
    *(void *)std::string __str = v11;
    __str[12] = *(unsigned char *)(v10 + 12);
    if (__str[12] <= 9u && ((1 << __str[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)__str, 1uLL);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  switch(byte_268088A94)
  {
    case 0:
      int v12 = __str[12];
      switch(__str[12])
      {
        case 0:
          BOOL v13 = *(void *)__str == turi::FLEX_UNDEFINED;
          goto LABEL_226;
        case 1:
          double v63 = *(double *)__str;
          uint64_t v64 = turi::FLEX_UNDEFINED;
          goto LABEL_159;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_77;
        case 6:
          if (turi::FLEX_UNDEFINED != (uint64_t)(*(void *)__str << 8) >> 8) {
            goto LABEL_231;
          }
          int v65 = *(_DWORD *)&__str[8];
          break;
        default:
          goto LABEL_364;
      }
LABEL_163:
      BOOL v13 = v65 == 0;
      goto LABEL_226;
    case 1:
      int v12 = __str[12];
      switch(__str[12])
      {
        case 0:
          double v63 = *(double *)&turi::FLEX_UNDEFINED;
          uint64_t v64 = *(void *)__str;
LABEL_159:
          double v115 = (double)v64;
          goto LABEL_160;
        case 1:
          double v63 = *(double *)__str;
          double v115 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_160:
          BOOL v13 = v63 == v115;
          goto LABEL_226;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_77;
        case 6:
          double v116 = *(double *)&turi::FLEX_UNDEFINED;
          double v117 = (double)*(int *)&__str[8] / 1000000.0 + (double)((uint64_t)(*(void *)__str << 8) >> 8);
          goto LABEL_169;
        default:
          goto LABEL_364;
      }
    case 2:
      int v12 = __str[12];
      if (__str[12] - 3 < 7 || __str[12] < 2u) {
        goto LABEL_77;
      }
      if (__str[12] != 2) {
        goto LABEL_364;
      }
      if (*(char *)(*(void *)__str + 31) < 0) {
        size_t v57 = *(void *)(*(void *)__str + 16);
      }
      else {
        size_t v57 = *(unsigned __int8 *)(*(void *)__str + 31);
      }
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
        uint64_t v127 = *(void *)(turi::FLEX_UNDEFINED + 16);
      }
      else {
        uint64_t v127 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      }
      if (v57 != v127) {
        goto LABEL_231;
      }
      timeval v128 = (unsigned __int8 *)(*(void *)__str + 8);
      if ((*(unsigned char *)(*(void *)__str + 31) & 0x80) != 0) {
        timeval v128 = *(unsigned __int8 **)v128;
      }
      uint64_t v129 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        uint64_t v129 = *(unsigned __int8 **)v129;
      }
      if ((*(unsigned char *)(*(void *)__str + 31) & 0x80) != 0)
      {
        BOOL v13 = memcmp(v128, v129, v57) == 0;
LABEL_226:
        BOOL v46 = v13;
        goto LABEL_229;
      }
      if (v57)
      {
        while (*v128 == *v129)
        {
          ++v128;
          ++v129;
          if (!--v57) {
            goto LABEL_78;
          }
        }
LABEL_231:
        turi::supervised::supervised_learning_model_base::api_train(turi::gl_sframe,std::string const&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
      }
      break;
    case 3:
      int v12 = __str[12];
      if (__str[12] > 9u) {
        goto LABEL_364;
      }
      if (__str[12] != 3) {
        goto LABEL_77;
      }
      int v58 = *(double **)(*(void *)__str + 8);
      std::string v59 = *(double **)(*(void *)__str + 16);
      unint64_t v60 = v59 - v58;
      char v61 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v60 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v61) >> 3) {
        goto LABEL_231;
      }
      if (v59 == v58) {
        break;
      }
      if (v60 <= 1) {
        uint64_t v62 = 1;
      }
      else {
        uint64_t v62 = v59 - v58;
      }
      if (*v58 == *v61)
      {
        uint64_t v133 = 1;
        do
        {
          unint64_t v134 = v133;
          if (v62 == v133) {
            break;
          }
          double v135 = v58[v133];
          double v136 = v61[v133++];
        }
        while (v135 == v136);
        BOOL v46 = v134 >= v60;
      }
      else
      {
        BOOL v46 = 0;
      }
      goto LABEL_229;
    case 4:
      int v12 = __str[12];
      if (__str[12] > 9u) {
        goto LABEL_364;
      }
      if (__str[12] != 4) {
        goto LABEL_77;
      }
      char v14 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v198, (uint64_t *)(*(void *)__str + 8), (void *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_157;
    case 5:
      int v12 = __str[12];
      if (__str[12] > 9u) {
        goto LABEL_364;
      }
      if (__str[12] != 5) {
        goto LABEL_77;
      }
      char v14 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v198, (uint64_t **)(*(void *)__str + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_157;
    case 6:
      int v12 = __str[12];
      switch(__str[12])
      {
        case 0:
          if (*(void *)__str != turi::FLEX_UNDEFINED << 8 >> 8) {
            goto LABEL_231;
          }
          int v65 = dword_268088A90;
          goto LABEL_163;
        case 1:
          double v117 = *(double *)__str;
          double v116 = (double)dword_268088A90 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_169:
          BOOL v46 = vabdd_f64(v117, v116) < 0.0000005;
          goto LABEL_229;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_77;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(void *)__str) & 0xFFFFFFFFFFFFFFLL) != 0) {
            goto LABEL_231;
          }
          BOOL v13 = *(_DWORD *)&__str[8] == dword_268088A90;
          goto LABEL_226;
        default:
          goto LABEL_364;
      }
    case 7:
      int v12 = __str[12];
      if (__str[12] < 7u || __str[12] - 8 < 2) {
        goto LABEL_77;
      }
      if (__str[12] != 7) {
        goto LABEL_364;
      }
      break;
    case 8:
      int v12 = __str[12];
      if (__str[12] < 8u || __str[12] == 9) {
        goto LABEL_77;
      }
      if (__str[12] != 8) {
        goto LABEL_364;
      }
      char v14 = turi::image_type::operator==(*(void *)__str + 8, turi::FLEX_UNDEFINED + 8);
LABEL_157:
      BOOL v46 = v14;
      goto LABEL_229;
    case 9:
      int v12 = __str[12];
      if (__str[12] < 9u) {
        goto LABEL_77;
      }
      if (__str[12] != 9)
      {
LABEL_364:
        turi::flexible_type_fail(0);
LABEL_366:
        __break(1u);
        return;
      }
      uint64_t v15 = turi::FLEX_UNDEFINED;
      uint64_t v16 = *(void *)__str;
      if (turi::FLEX_UNDEFINED != *(void *)__str)
      {
        long long v17 = (void *)(*(void *)__str + 8);
        if (turi::flexible_type_impl::ndarray<double>::same_shape(*(void *)__str + 8, turi::FLEX_UNDEFINED + 8))
        {
          unint64_t v19 = *(char **)(v16 + 24);
          unsigned int v18 = *(char **)(v16 + 32);
          uint64_t v20 = v18 - v19;
          if (v18 != v19)
          {
            if (*v17)
            {
              uint64_t v21 = 1;
              do
              {
                uint64_t v22 = *(void *)v19;
                v19 += 8;
                v21 *= v22;
              }
              while (v19 != v18);
              if (v21)
              {
                v201[0] = 0;
                std::vector<unsigned long>::vector(&__p, v20 >> 3, v201);
                std::string::size_type size = __p.__r_.__value_.__l.__size_;
                uint64_t v24 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                uint64_t v25 = **(void **)(v15 + 8);
                int64_t v26 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
                unint64_t v27 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                unint64_t v28 = v27 - 1;
                if (v27 <= 1) {
                  uint64_t v29 = 1;
                }
                else {
                  uint64_t v29 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                }
                do
                {
                  if ((uint64_t *)size == v24)
                  {
                    uint64_t v37 = 0;
                    double v38 = *(double *)(**(void **)(v16 + 8) + 8 * *(void *)(v16 + 72));
                  }
                  else
                  {
                    uint64_t v30 = 0;
                    uint64_t v31 = *(uint64_t **)(v16 + 48);
                    std::string::size_type v32 = v24;
                    uint64_t v33 = v29;
                    do
                    {
                      uint64_t v35 = *v32++;
                      uint64_t v34 = v35;
                      uint64_t v36 = *v31++;
                      v30 += v36 * v34;
                      --v33;
                    }
                    while (v33);
                    uint64_t v37 = 0;
                    double v38 = *(double *)(**(void **)(v16 + 8) + 8 * (*(void *)(v16 + 72) + v30));
                    BOOL v39 = *(uint64_t **)(v15 + 48);
                    int v40 = v24;
                    uint64_t v41 = v29;
                    do
                    {
                      uint64_t v43 = *v40++;
                      uint64_t v42 = v43;
                      uint64_t v44 = *v39++;
                      v37 += v44 * v42;
                      --v41;
                    }
                    while (v41);
                  }
                  double v45 = *(double *)(v25 + 8 * (*(void *)(v15 + 72) + v37));
                  BOOL v46 = v38 == v45;
                  if (v38 != v45) {
                    break;
                  }
                  uint64_t v47 = v27;
                  unint64_t v48 = v27 - 1;
                  if (v26 >= 1)
                  {
                    uint64_t v49 = *(void *)(v16 + 24);
                    unint64_t v50 = v24[v28] + 1;
                    v24[v28] = v50;
                    if (v50 >= *(void *)(v49 + 8 * v28))
                    {
                      uint64_t v51 = v49 - 16;
                      unint64_t v52 = v27;
                      uint64_t v53 = (unint64_t *)((char *)v24 + (v26 & 0xFFFFFFFFFFFFFFF8) - 16);
                      while (1)
                      {
                        unint64_t v54 = v52 - 1;
                        v53[1] = 0;
                        if ((uint64_t)(v52 - 1) <= 0) {
                          break;
                        }
                        unint64_t v55 = *v53 + 1;
                        *v53-- = v55;
                        unint64_t v56 = *(void *)(v51 + 8 * v52--);
                        if (v55 < v56)
                        {
                          unint64_t v48 = v54 - 1;
                          uint64_t v47 = 1;
                          goto LABEL_46;
                        }
                      }
                      BOOL v46 = 1;
                      goto LABEL_362;
                    }
                    uint64_t v47 = 1;
                    unint64_t v48 = v27 - 1;
                  }
LABEL_46:
                  ;
                }
                while ((v48 & 0x8000000000000000) == 0 && v47);
                if (!v24) {
                  goto LABEL_229;
                }
LABEL_362:
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
                operator delete(v24);
LABEL_229:
                if (!v46 && __str[12] != 4) {
                  goto LABEL_231;
                }
              }
            }
          }
        }
        else
        {
          int v12 = __str[12];
LABEL_77:
          if (v12 != 4) {
            goto LABEL_231;
          }
        }
      }
      break;
    default:
      goto LABEL_364;
  }
LABEL_78:
  switch(byte_268088A94)
  {
    case 0:
      switch(__str[12])
      {
        case 0:
          if (*(void *)__str != turi::FLEX_UNDEFINED) {
            goto LABEL_251;
          }
          goto LABEL_184;
        case 1:
          double v90 = *(double *)__str;
          uint64_t v113 = turi::FLEX_UNDEFINED;
          goto LABEL_178;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_251;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)__str << 8) >> 8 && !*(_DWORD *)&__str[8]) {
            goto LABEL_184;
          }
          goto LABEL_251;
        default:
          goto LABEL_364;
      }
    case 1:
      switch(__str[12])
      {
        case 0:
          double v90 = *(double *)&turi::FLEX_UNDEFINED;
          uint64_t v113 = *(void *)__str;
LABEL_178:
          double v97 = (double)v113;
          goto LABEL_179;
        case 1:
          double v90 = *(double *)__str;
          double v97 = *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_179;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_251;
        case 6:
          double v118 = vabdd_f64((double)*(int *)&__str[8] / 1000000.0 + (double)((uint64_t)(*(void *)__str << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_183;
        default:
          goto LABEL_364;
      }
    case 2:
      if (__str[12] - 3 < 7 || __str[12] < 2u) {
        goto LABEL_251;
      }
      if (__str[12] != 2) {
        goto LABEL_364;
      }
      if (*(char *)(*(void *)__str + 31) < 0) {
        size_t v108 = *(void *)(*(void *)__str + 16);
      }
      else {
        size_t v108 = *(unsigned __int8 *)(*(void *)__str + 31);
      }
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
        uint64_t v130 = *(void *)(turi::FLEX_UNDEFINED + 16);
      }
      else {
        uint64_t v130 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      }
      if (v108 != v130) {
        goto LABEL_251;
      }
      uint64_t v131 = (unsigned __int8 *)(*(void *)__str + 8);
      if ((*(unsigned char *)(*(void *)__str + 31) & 0x80) != 0) {
        uint64_t v131 = *(unsigned __int8 **)v131;
      }
      double v132 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        double v132 = *(unsigned __int8 **)v132;
      }
      if ((*(unsigned char *)(*(void *)__str + 31) & 0x80) != 0)
      {
        if (memcmp(v131, v132, v108)) {
          goto LABEL_251;
        }
LABEL_184:
        memset(&__p, 0, sizeof(__p));
        switch(__str[12])
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_210;
            }
            int64_t v119 = *(void **)__str;
            if (!*(void *)__str) {
              goto LABEL_210;
            }
            if (*(char *)(*(void *)__str + 31) < 0) {
              operator delete(*(void **)(*(void *)__str + 8));
            }
            char v120 = v119;
            uint64_t v121 = 0x1012C404EF22A49;
            goto LABEL_209;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_210;
            }
            uint64_t v124 = *(void **)__str;
            if (!*(void *)__str) {
              goto LABEL_210;
            }
            unint64_t v125 = *(void **)(*(void *)__str + 8);
            if (v125)
            {
              *(void *)(*(void *)__str + 16) = v125;
              operator delete(v125);
            }
            char v120 = v124;
            uint64_t v121 = 0x1080C409938AC02;
            goto LABEL_209;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_210;
            }
            int v122 = *(void **)__str;
            if (!*(void *)__str) {
              goto LABEL_210;
            }
            v204[0].__r_.__value_.__r.__words[0] = *(void *)__str + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v204);
            goto LABEL_204;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_210;
            }
            int v122 = *(void **)__str;
            if (!*(void *)__str) {
              goto LABEL_210;
            }
            v204[0].__r_.__value_.__r.__words[0] = *(void *)__str + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v204);
LABEL_204:
            char v120 = v122;
            uint64_t v121 = 0x1020C405E66F15BLL;
            goto LABEL_209;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_210;
            }
            BOOL v126 = *(void **)__str;
            if (!*(void *)__str) {
              goto LABEL_210;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)__str + 16));
            char v120 = v126;
            unsigned int v123 = -235920773;
            goto LABEL_208;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) != 1 || !*(void *)__str) {
              goto LABEL_210;
            }
            char v120 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)__str);
            unsigned int v123 = 2071181815;
LABEL_208:
            uint64_t v121 = v123 | 0x1030C4000000000;
LABEL_209:
            MEMORY[0x22A614FA0](v120, v121);
LABEL_210:
            *(void *)std::string __str = 0;
            *(_DWORD *)&__str[8] = 0;
            __str[12] = 4;
            operator new();
          default:
            goto LABEL_210;
        }
      }
      if (!v108) {
        goto LABEL_184;
      }
      while (*v131 == *v132)
      {
        ++v131;
        ++v132;
        if (!--v108) {
          goto LABEL_184;
        }
      }
LABEL_251:
      timeval v137 = *(turi::flexible_type_impl **)(*(void *)__str + 8);
      unsigned __int8 v138 = *(turi::flexible_type_impl **)(*(void *)__str + 16);
      memset(&__p, 0, sizeof(__p));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&__p, v137, v138, (v138 - v137) >> 4);
      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
      {
        turi::gl_sframe::column_names((turi::gl_sframe *)v184);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&__p);
        std::string __p = v204[0];
        memset(v204, 0, 24);
        v201[0] = (void **)v204;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v201);
        std::string::basic_string[abi:ne180100]<0>(v204, "features");
        uint64_t v202 = 0;
        v201[0] = 0;
        v201[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>(v201, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
        *(std::string::size_type *)((char *)v208.__r_.__value_.__r.__words + 5) = 0x400000000000000;
        v208.__r_.__value_.__r.__words[0] = 0;
        operator new();
      }
      turi::gl_sframe::select_columns((uint64_t)v184, v204);
      turi::gl_sframe::operator=((uint64_t)v184, (uint64_t)v204);
      v204[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
      if (v204[0].__r_.__value_.__r.__words[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v204[0].__r_.__value_.__r.__words[2]);
      }
      v204[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v204);
      switch(__str[12])
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v139 = *(void **)__str;
            if (*(void *)__str)
            {
              if (*(char *)(*(void *)__str + 31) < 0) {
                operator delete(*(void **)(*(void *)__str + 8));
              }
              uint64_t v140 = v139;
              uint64_t v141 = 0x1012C404EF22A49;
              goto LABEL_286;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v148 = *(void **)__str;
            if (*(void *)__str)
            {
              uint64_t v149 = *(void **)(*(void *)__str + 8);
              if (v149)
              {
                *(void *)(*(void *)__str + 16) = v149;
                operator delete(v149);
              }
              uint64_t v140 = v148;
              uint64_t v141 = 0x1080C409938AC02;
              goto LABEL_286;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v142 = *(void **)__str;
            if (*(void *)__str)
            {
              __p.__r_.__value_.__r.__words[0] = *(void *)__str + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_281;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v142 = *(void **)__str;
            if (*(void *)__str)
            {
              __p.__r_.__value_.__r.__words[0] = *(void *)__str + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_281:
              uint64_t v140 = v142;
              uint64_t v141 = 0x1020C405E66F15BLL;
              goto LABEL_286;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v150 = *(void **)__str;
            if (*(void *)__str)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)__str + 16));
              uint64_t v140 = v150;
              unsigned int v147 = -235920773;
              goto LABEL_285;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)__str, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v143 = *(void **)__str;
            if (*(void *)__str)
            {
              uint64_t v144 = *(void **)(*(void *)__str + 48);
              if (v144)
              {
                *(void *)(*(void *)__str + 56) = v144;
                operator delete(v144);
              }
              unint64_t v145 = (void *)v143[3];
              if (v145)
              {
                v143[4] = v145;
                operator delete(v145);
              }
              uint64_t v146 = (std::__shared_weak_count *)v143[2];
              if (v146) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v146);
              }
              uint64_t v140 = v143;
              unsigned int v147 = 2071181815;
LABEL_285:
              uint64_t v141 = v147 | 0x1030C4000000000;
LABEL_286:
              MEMORY[0x22A614FA0](v140, v141);
            }
          }
          break;
        default:
          break;
      }
      turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)v184, (turi::sframe *)&__p);
      if (*((char *)a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a3, *((void *)a3 + 1));
      }
      else
      {
        *(_OWORD *)std::string __str = *a3;
        *(void *)&__str[16] = *((void *)a3 + 2);
      }
      double v199 = 0;
      double v198 = 0;
      uint64_t v200 = 0;
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
      v208.__r_.__value_.__s.__data_[8] = 0;
      double v198 = (std::string *)operator new(0x18uLL);
      double v199 = v198;
      uint64_t v200 = v198 + 1;
      double v199 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v200, (long long *)__str, (long long *)&__str[24], v198);
      turi::gl_sframe::select_columns((uint64_t)a2, v201);
      turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)v201, (turi::sframe *)v204);
      v201[0] = (void **)&unk_26D759E10;
      if (v202) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v202);
      }
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      uint64_t v151 = (char *)(*(uint64_t (**)(turi::supervised::supervised_learning_model_base *))(*(void *)a1 + 16))(a1);
      std::string::basic_string[abi:ne180100]<0>(v182, v151);
      turi::sframe::sframe((turi::sframe *)v203, (const turi::sframe *)v204);
      turi::supervised::check_target_column_type((uint64_t *)v182, (turi::sframe *)v203);
      turi::sframe::~sframe((turi::sframe *)v203);
      if (v183 < 0) {
        operator delete(v182[0]);
      }
      if ((*(unsigned int (**)(turi::supervised::supervised_learning_model_base *))(*(void *)a1 + 248))(a1)) {
        uint64_t v152 = 2;
      }
      else {
        uint64_t v152 = 1;
      }
      turi::sframe::sframe((turi::sframe *)v201);
      turi::sframe::sframe((turi::sframe *)&v198);
      if (turi::gl_sframe::num_columns((turi::gl_sframe *)v188))
      {
        turi::gl_sframe::column_names((turi::gl_sframe *)v184);
        turi::gl_sframe::select_columns((uint64_t)v188, &v208);
        turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v208, (turi::sframe *)__str);
        turi::sframe::operator=((uint64_t)v201, (uint64_t)__str);
        turi::sframe::~sframe((turi::sframe *)__str);
        v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
        if (v208.__r_.__value_.__r.__words[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v208.__r_.__value_.__r.__words[2]);
        }
        v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
        if (*((char *)a3 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)a3, *((void *)a3 + 1));
        }
        else {
          std::string v193 = *(std::string *)a3;
        }
        unint64_t v179 = 0;
        unint64_t v180 = 0;
        uint64_t v181 = 0;
        uint64_t v190 = &v179;
        char v191 = 0;
        unint64_t v179 = operator new(0x18uLL);
        unint64_t v180 = v179;
        uint64_t v181 = (char *)v179 + 24;
        unint64_t v180 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v181, (long long *)&v193, (long long *)&v194, (std::string *)v179);
        turi::gl_sframe::select_columns((uint64_t)v188, &v208);
        turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v208, (turi::sframe *)__str);
        turi::sframe::operator=((uint64_t)&v198, (uint64_t)__str);
        turi::sframe::~sframe((turi::sframe *)__str);
        v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
        if (v208.__r_.__value_.__r.__words[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v208.__r_.__value_.__r.__words[2]);
        }
        uint64_t v190 = &v179;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v190);
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v193.__r_.__value_.__l.__data_);
        }
        long long v153 = (char *)(*(uint64_t (**)(turi::supervised::supervised_learning_model_base *))(*(void *)a1 + 16))(a1);
        std::string::basic_string[abi:ne180100]<0>(v177, v153);
        turi::sframe::sframe((turi::sframe *)v192, (const turi::sframe *)&v198);
        turi::supervised::check_target_column_type((uint64_t *)v177, (turi::sframe *)v192);
        turi::sframe::~sframe((turi::sframe *)v192);
        if (v178 < 0) {
          operator delete(v177[0]);
        }
        turi::gl_sframe::column_names((turi::gl_sframe *)v184);
        uint64_t v154 = *(_OWORD **)&__str[8];
        if (*(void *)&__str[8] >= *(void *)&__str[16])
        {
          uint64_t v156 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__str, a3);
        }
        else
        {
          if (*((char *)a3 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)&__str[8], *(const std::string::value_type **)a3, *((void *)a3 + 1));
          }
          else
          {
            long long v155 = *a3;
            *(void *)(*(void *)&__str[8] + 16) = *((void *)a3 + 2);
            _OWORD *v154 = v155;
          }
          uint64_t v156 = (uint64_t)v154 + 24;
        }
        *(void *)&__str[8] = v156;
        turi::gl_sframe::select_columns((uint64_t)v188, &v208);
        turi::gl_sframe::operator=((uint64_t)v188, (uint64_t)&v208);
        v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
        if (v208.__r_.__value_.__r.__words[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v208.__r_.__value_.__r.__words[2]);
        }
        v208.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
      }
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],turi::gl_sframe,0>((uint64_t)__str, "validation_data", (uint64_t)v188);
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v208, (const void **)__str, 1);
      turi::ml_model_base::add_or_update_state((uint64_t)a1, &v208);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v208, (char *)v208.__r_.__value_.__l.__size_);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__str[24]);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      (*(void (**)(turi::supervised::supervised_learning_model_base *, std::string *, std::string *, void ***, std::string **, uint64_t, void))(*(void *)a1 + 200))(a1, &__p, v204, v201, &v198, v152, 0);
      (*(void (**)(turi::supervised::supervised_learning_model_base *))(*(void *)a1 + 72))(a1);
      std::string::basic_string[abi:ne180100]<0>(&v179, "disable_posttrain_evaluation");
      option_value = (unsigned char *)turi::ml_model_base::get_option_value((uint64_t)a1, (const void **)&v179);
      uint64_t v158 = 0;
      switch(option_value[12])
      {
        case 0:
          uint64_t v158 = *(void *)option_value;
          goto LABEL_346;
        case 1:
          uint64_t v158 = (uint64_t)*(double *)option_value;
          goto LABEL_346;
        case 2:
          uint64_t v160 = *(void *)option_value;
          uint64_t v161 = (char **)(*(void *)option_value + 8);
          v193.__r_.__value_.__r.__words[0] = 0;
          uint64_t v162 = (char *)v161;
          if (*(char *)(v160 + 31) < 0) {
            uint64_t v162 = *v161;
          }
          std::string::basic_string[abi:ne180100]<0>(__str, v162);
          uint64_t v158 = std::stoll((const std::string *)__str, (size_t *)&v193, 10);
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          if (*(char *)(v160 + 31) < 0) {
            uint64_t v163 = *(void *)(v160 + 16);
          }
          else {
            uint64_t v163 = *(unsigned __int8 *)(v160 + 31);
          }
          if (v193.__r_.__value_.__r.__words[0] != v163)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v171 = std::string::append(&v208, " cannot be interpreted as an integer");
            long long v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
            *(void *)&__str[16] = *((void *)&v171->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __str = v172;
            v171->__r_.__value_.__l.__size_ = 0;
            v171->__r_.__value_.__r.__words[2] = 0;
            v171->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)__str);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_346;
        case 3:
          uint64_t v159 = *(void *)option_value;
          memset(__str, 0, 24);
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v159 + 8), *(void *)(v159 + 16), (uint64_t)(*(void *)(v159 + 16) - *(void *)(v159 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (*(void *)__str)
          {
            *(void *)&__str[8] = *(void *)__str;
            operator delete(*(void **)__str);
          }
          goto LABEL_345;
        case 4:
          uint64_t v164 = *(void *)option_value;
          memset(__str, 0, 24);
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v164 + 8), *(uint64_t **)(v164 + 16), (uint64_t)(*(void *)(v164 + 16) - *(void *)(v164 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v208.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
          goto LABEL_345;
        case 5:
          uint64_t v165 = *(void *)option_value;
          memset(__str, 0, 24);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v165 + 8), *(uint64_t **)(v165 + 16), (uint64_t)(*(void *)(v165 + 16) - *(void *)(v165 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v208.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
          goto LABEL_345;
        case 6:
          uint64_t v158 = (uint64_t)(*(void *)option_value << 8) >> 8;
          goto LABEL_346;
        case 7:
          goto LABEL_346;
        case 8:
          uint64_t v166 = *(void *)option_value;
          uint64_t v167 = *(void *)(*(void *)option_value + 16);
          *(void *)std::string __str = *(void *)(*(void *)option_value + 8);
          *(void *)&__str[8] = v167;
          if (v167) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v167 + 8), 1u, memory_order_relaxed);
          }
          long long v168 = *(_OWORD *)(v166 + 24);
          long long v169 = *(_OWORD *)(v166 + 56);
          long long v196 = *(_OWORD *)(v166 + 40);
          long long v197 = v169;
          *(_OWORD *)&__str[16] = v168;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
          goto LABEL_345;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)option_value + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v196 + 1))
          {
            *(void *)&long long v197 = *((void *)&v196 + 1);
            operator delete(*((void **)&v196 + 1));
          }
          if (*(void *)&__str[16])
          {
            *(void *)&__str[24] = *(void *)&__str[16];
            operator delete(*(void **)&__str[16]);
          }
          if (*(void *)&__str[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
          }
LABEL_345:
          uint64_t v158 = 0;
LABEL_346:
          if (SHIBYTE(v181) < 0)
          {
            operator delete(v179);
            if (!v158) {
              goto LABEL_350;
            }
          }
          else if (!v158)
          {
LABEL_350:
            *(_OWORD *)&__str[8] = 0uLL;
            *(void *)std::string __str = &__str[8];
            turi::gl_sframe::gl_sframe((turi::gl_sframe *)v176, a2);
            std::string::basic_string[abi:ne180100]<0>(v175, "auto");
            std::string::basic_string[abi:ne180100]<0>(&v174, "report");
            turi::gl_sarray::gl_sarray((turi::gl_sarray *)v173);
            turi::supervised::supervised_learning_model_base::api_evaluate(a1, (turi::gl_sframe *)v176, (uint64_t)v175);
          }
          turi::sframe::~sframe((turi::sframe *)&v198);
          turi::sframe::~sframe((turi::sframe *)v201);
          turi::sframe::~sframe((turi::sframe *)v204);
          turi::sframe::~sframe((turi::sframe *)&__p);
          v184[0] = &unk_26D759E10;
          if (v185) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v185);
          }
          v188[0] = &unk_26D759E10;
          if (v189) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v189);
          }
          break;
        default:
          turi::flexible_type_fail(0);
          goto LABEL_366;
      }
      return;
    case 3:
      if (__str[12] > 9u) {
        goto LABEL_364;
      }
      if (__str[12] != 3) {
        goto LABEL_251;
      }
      uint64_t v109 = *(double **)(*(void *)__str + 8);
      unint64_t v110 = *(double **)(*(void *)__str + 16);
      unint64_t v111 = v110 - v109;
      uint64_t v112 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v111 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v112) >> 3) {
        goto LABEL_251;
      }
      if (v110 == v109) {
        goto LABEL_184;
      }
      if (v111 <= 1) {
        unint64_t v111 = 1;
      }
      while (*v109 == *v112)
      {
        ++v109;
        ++v112;
        if (!--v111) {
          goto LABEL_184;
        }
      }
      goto LABEL_251;
    case 4:
      if (__str[12] > 9u) {
        goto LABEL_364;
      }
      if (__str[12] != 4) {
        goto LABEL_251;
      }
      int v66 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v198, (uint64_t *)(*(void *)__str + 8), (void *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_152;
    case 5:
      if (__str[12] > 9u) {
        goto LABEL_364;
      }
      if (__str[12] != 5) {
        goto LABEL_251;
      }
      int v66 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v198, (uint64_t **)(*(void *)__str + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_152;
    case 6:
      switch(__str[12])
      {
        case 0:
          if (*(void *)__str == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268088A90) {
            goto LABEL_184;
          }
          goto LABEL_251;
        case 1:
          double v118 = vabdd_f64(*(double *)__str, (double)dword_268088A90 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_183:
          if (v118 < 0.0000005) {
            goto LABEL_184;
          }
          goto LABEL_251;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_251;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(void *)__str) & 0xFFFFFFFFFFFFFFLL) != 0
            || *(_DWORD *)&__str[8] != dword_268088A90)
          {
            goto LABEL_251;
          }
          goto LABEL_184;
        default:
          goto LABEL_364;
      }
    case 7:
      if (__str[12] < 7u || __str[12] - 8 < 2) {
        goto LABEL_251;
      }
      if (__str[12] != 7) {
        goto LABEL_364;
      }
      goto LABEL_184;
    case 8:
      if (__str[12] < 8u || __str[12] == 9) {
        goto LABEL_251;
      }
      if (__str[12] != 8) {
        goto LABEL_364;
      }
      int v66 = turi::image_type::operator==(*(void *)__str + 8, turi::FLEX_UNDEFINED + 8);
LABEL_152:
      if (!v66) {
        goto LABEL_251;
      }
      goto LABEL_184;
    case 9:
      if (__str[12] < 9u) {
        goto LABEL_251;
      }
      if (__str[12] != 9) {
        goto LABEL_364;
      }
      uint64_t v67 = turi::FLEX_UNDEFINED;
      uint64_t v68 = *(void *)__str;
      if (turi::FLEX_UNDEFINED == *(void *)__str) {
        goto LABEL_184;
      }
      uint64_t v69 = (void *)(*(void *)__str + 8);
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(void *)__str + 8, turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_251;
      }
      uint64_t v71 = *(char **)(v68 + 24);
      std::string::size_type v70 = *(char **)(v68 + 32);
      uint64_t v72 = v70 - v71;
      if (v70 == v71) {
        goto LABEL_184;
      }
      if (!*v69) {
        goto LABEL_184;
      }
      uint64_t v73 = 1;
      do
      {
        uint64_t v74 = *(void *)v71;
        v71 += 8;
        v73 *= v74;
      }
      while (v71 != v70);
      if (!v73) {
        goto LABEL_184;
      }
      v201[0] = 0;
      std::vector<unsigned long>::vector(&__p, v72 >> 3, v201);
      std::string::size_type v75 = __p.__r_.__value_.__l.__size_;
      uint64_t v76 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
      uint64_t v77 = **(void **)(v67 + 8);
      int64_t v78 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
      unint64_t v79 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v80 = v79 - 1;
      if (v79 <= 1) {
        uint64_t v81 = 1;
      }
      else {
        uint64_t v81 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
      }
      while (2)
      {
        if ((uint64_t *)v75 == v76)
        {
          uint64_t v89 = 0;
          double v90 = *(double *)(**(void **)(v68 + 8) + 8 * *(void *)(v68 + 72));
        }
        else
        {
          uint64_t v82 = 0;
          BOOL v83 = *(uint64_t **)(v68 + 48);
          uint64_t v84 = v76;
          uint64_t v85 = v81;
          do
          {
            uint64_t v87 = *v84++;
            uint64_t v86 = v87;
            uint64_t v88 = *v83++;
            v82 += v88 * v86;
            --v85;
          }
          while (v85);
          uint64_t v89 = 0;
          double v90 = *(double *)(**(void **)(v68 + 8) + 8 * (*(void *)(v68 + 72) + v82));
          unint64_t v91 = *(uint64_t **)(v67 + 48);
          int v92 = v76;
          uint64_t v93 = v81;
          do
          {
            uint64_t v95 = *v92++;
            uint64_t v94 = v95;
            uint64_t v96 = *v91++;
            v89 += v96 * v94;
            --v93;
          }
          while (v93);
        }
        double v97 = *(double *)(v77 + 8 * (*(void *)(v67 + 72) + v89));
        if (v90 == v97)
        {
          uint64_t v98 = v79;
          uint64_t v99 = v79 - 1;
          if (v78 >= 1)
          {
            uint64_t v100 = *(void *)(v68 + 24);
            unint64_t v101 = v76[v80] + 1;
            v76[v80] = v101;
            unint64_t v102 = (v78 & 0xFFFFFFFFFFFFFFF8) - 16;
            uint64_t v99 = v79 - 1;
            if (v101 >= *(void *)(v100 + 8 * v80))
            {
              while (1)
              {
                *(uint64_t *)((char *)v76 + v102 + 8) = 0;
                if (v99 <= 0) {
                  break;
                }
                --v99;
                unint64_t v103 = *(uint64_t *)((char *)v76 + v102) + 1;
                *(uint64_t *)((char *)v76 + v102) = v103;
                unint64_t v104 = *(void *)(v100 + v102);
                v102 -= 8;
                if (v103 < v104)
                {
                  uint64_t v98 = 1;
                  goto LABEL_111;
                }
              }
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
              operator delete(v76);
              goto LABEL_184;
            }
            uint64_t v98 = 1;
            uint64_t v99 = v79 - 1;
          }
LABEL_111:
          if (v99 < 0 || !v98) {
            break;
          }
          continue;
        }
        break;
      }
      if (v76)
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
        double v105 = v90;
        double v106 = v97;
        operator delete(v76);
        if (v105 != v106) {
          goto LABEL_251;
        }
      }
      else
      {
LABEL_179:
        if (v90 != v97) {
          goto LABEL_251;
        }
      }
      goto LABEL_184;
    default:
      goto LABEL_364;
  }
}

void sub_2244CB1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55)
{
  MEMORY[0x22A614FA0](v55, 0x1012C404EF22A49);
  STACK[0x770] = (unint64_t)&STACK[0x8A0];
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x770]);
  switch(LOBYTE(STACK[0x2DC]))
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x2D0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      unint64_t v57 = STACK[0x2D0];
      if (!STACK[0x2D0]) {
        break;
      }
      if (*(char *)(v57 + 31) < 0) {
        operator delete(*(void **)(v57 + 8));
      }
      int v58 = (void *)v57;
      uint64_t v59 = 0x1012C404EF22A49;
      goto LABEL_18;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x2D0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      unint64_t v61 = STACK[0x2D0];
      if (!STACK[0x2D0]) {
        break;
      }
      uint64_t v62 = *(void **)(v61 + 8);
      if (v62)
      {
        *(void *)(v61 + 16) = v62;
        operator delete(v62);
      }
      int v58 = (void *)v61;
      uint64_t v59 = 0x1080C409938AC02;
      goto LABEL_18;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x2D0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      unint64_t v60 = STACK[0x2D0];
      if (!STACK[0x2D0]) {
        goto LABEL_27;
      }
      STACK[0x770] = v60 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x770]);
      goto LABEL_22;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x2D0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      unint64_t v60 = STACK[0x2D0];
      if (!STACK[0x2D0]) {
        goto LABEL_27;
      }
      STACK[0x770] = v60 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x770]);
LABEL_22:
      unint64_t v63 = v60;
      uint64_t v64 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x2D0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      unint64_t v65 = STACK[0x2D0];
      if (!STACK[0x2D0]) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v65 + 16));
      unint64_t v63 = v65;
      uint64_t v64 = 0x1030C40F1F0227BLL;
LABEL_26:
      MEMORY[0x22A614FA0](v63, v64);
LABEL_27:
      STACK[0x2D0] = 0;
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x2D0], 0xFFFFFFFFFFFFFFFFLL) != 1 || !STACK[0x2D0]) {
        break;
      }
      int v58 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)STACK[0x2D0]);
      uint64_t v59 = 0x1030C407B73B9F7;
LABEL_18:
      MEMORY[0x22A614FA0](v58, v59);
      break;
    default:
      break;
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  if (a55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a55);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_evaluate(turi::supervised::supervised_learning_model_base *a1, turi::gl_sframe *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, (void *)a1 + 1);
  if (lpsrc
  {
    uint64_t v15 = v6;
    uint64_t v16 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  int v7 = ((uint64_t (*)(turi::supervised::supervised_learning_model_base *, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)&lpsrc);
  BOOL v13 = v15;
  char v14 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)&lpsrc, &v13, v7, (turi::sframe *)v18);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  turi::supervised::supervised_learning_model_base::get_target_name(a1, &v21);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  p_uint64_t data = 0;
  char v9 = 0;
  uint64_t v10 = (std::string *)operator new(0x18uLL);
  uint64_t v11 = v10;
  p_uint64_t data = (const void **)&v10[1].__r_.__value_.__l.__data_;
  uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v21, &v22, v10);
  turi::sframe::select_columns((uint64_t *)&lpsrc, (const void ***)&v10, (uint64_t)v17);
  v8.__vftable = (std::exception_vtbl *)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  turi::supervised::setup_ml_data_for_evaluation((uint64_t)v18, (uint64_t)v17, (uint64_t *)&v15, v7, (turi::ml_data *)&v10);
}

void sub_2244CCF6C()
{
  __cxa_end_catch();
  if (v1 < 0) {
    operator delete(v0);
  }
  JUMPOUT(0x2244CD274);
}

void sub_2244CCF78(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x2244CD37CLL);
}

void sub_2244CCF94()
{
}

void sub_2244CCF9C()
{
}

void sub_2244CD190(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  *(void *)(v48 - 192) = &unk_26D759E10;
  uint64_t v49 = *(std::__shared_weak_count **)(v48 - 176);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (!v50) {
    JUMPOUT(0x2244CD268);
  }
  JUMPOUT(0x2244CD264);
}

void sub_2244CD1FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  *(void *)(v49 - 192) = &unk_26D759E10;
  uint64_t v50 = *(std::__shared_weak_count **)(v49 - 176);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v48, *(char **)(v48 + 8));
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (v54 < 0) {
    operator delete(v53);
  }
  if (v56 < 0) {
    operator delete(v55);
  }
  JUMPOUT(0x2244CD350);
}

void sub_2244CD2DC()
{
}

void sub_2244CD2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a43);
  if (*(char *)(v43 - 169) < 0) {
    operator delete(*(void **)(v43 - 192));
  }
  JUMPOUT(0x2244CD360);
}

void sub_2244CD31C()
{
}

void sub_2244CD324()
{
  if (STACK[0x268]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x268]);
  }
  JUMPOUT(0x2244CD368);
}

void sub_2244CD338()
{
}

void sub_2244CD344()
{
}

void turi::supervised::supervised_learning_model_base::api_predict(uint64_t a1, turi::gl_sframe *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v5 = ((uint64_t (*)(uint64_t, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)v11);
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    char v9 = v6;
    uint64_t v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    char v9 = 0;
    uint64_t v10 = 0;
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)v11, &v9, v5, (turi::sframe *)v12);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  turi::sframe::~sframe((turi::sframe *)v11);
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(a1, (uint64_t)v12, v5, v11);
}

void sub_2244CD5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  turi::ml_data::~ml_data((turi::ml_data *)&a16);
  turi::sframe::~sframe((turi::sframe *)&a53);
  _Unwind_Resume(a1);
}

void sub_2244CD644()
{
}

void turi::supervised::setup_test_data_sframe(const turi::sframe *a1@<X0>, turi::supervised::supervised_learning_model_base **a2@<X1>, int a3@<W2>, turi::sframe *a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  turi::sframe::sframe(a4);
  turi::sframe::sframe((turi::sframe *)v11, a1);
  if (v14) {
    BOOL v8 = v13 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    turi::supervised::check_empty_data(turi::sframe)::{lambda(void)#1}::operator()();
  }
  if (!v12) {
    turi::supervised::check_empty_data(turi::sframe)::{lambda(void)#2}::operator()();
  }
  turi::sframe::~sframe((turi::sframe *)v11);
  turi::supervised::supervised_learning_model_base::get_feature_names(*a2, &v9);
  if (!a3) {
    goto LABEL_12;
  }
  if (a3 != 1)
  {
    if (a3 != 2) {
      turi::supervised::setup_test_data_sframe(turi::sframe const&,std::shared_ptr<turi::supervised::supervised_learning_model_base>,turi::ml_missing_value_action)::{lambda(void)#2}::operator()();
    }
    if (!(*(unsigned int (**)(void))(*(void *)*a2 + 248))()) {
      turi::supervised::setup_test_data_sframe(turi::sframe const&,std::shared_ptr<turi::supervised::supervised_learning_model_base>,turi::ml_missing_value_action)::{lambda(void)#1}::operator()();
    }
LABEL_12:
    turi::supervised::supervised_learning_model_base::impute_missing_columns_using_current_metadata(*a2, a1, (turi::sframe *)v10);
    turi::sframe::operator=((uint64_t)a4, (uint64_t)v10);
    turi::sframe::~sframe((turi::sframe *)v10);
    goto LABEL_13;
  }
  turi::sframe::operator=((uint64_t)a4, (uint64_t)a1);
LABEL_13:
  turi::sframe::select_columns((uint64_t *)a4, (const void ***)&v9, (uint64_t)v10);
  turi::sframe::operator=((uint64_t)a4, (uint64_t)v10);
  turi::sframe::~sframe((turi::sframe *)v10);
  v10[0] = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_2244CD7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  turi::sframe::~sframe((turi::sframe *)&a12);
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  turi::sframe::~sframe(v12);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_predict_topk(uint64_t a1, turi::gl_sframe *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a5)
  {
    int v7 = ((uint64_t (*)(uint64_t, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
    turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)v13);
    std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, (void *)(a1 + 8));
    if (lpsrc
    {
      uint64_t v11 = v8;
      uint64_t v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    turi::supervised::setup_test_data_sframe((const turi::sframe *)v13, &v11, v7, (turi::sframe *)v14);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    turi::sframe::~sframe((turi::sframe *)v13);
    turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(a1, (uint64_t)v14, v7, (unsigned __int8 *)&lpsrc);
  }
  turi::supervised::supervised_learning_model_base::api_predict_topk(turi::gl_sframe,std::string,std::string,unsigned long)::$_0::operator()();
}

void sub_2244CDA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_2244CDACC()
{
}

void turi::supervised::supervised_learning_model_base::api_classify(uint64_t a1, turi::gl_sframe *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v5 = ((uint64_t (*)(uint64_t, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)v11);
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, (void *)(a1 + 8));
  if (lpsrc
  {
    std::vector<std::string> v9 = v6;
    uint64_t v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::vector<std::string> v9 = 0;
    uint64_t v10 = 0;
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)v11, &v9, v5, (turi::sframe *)v12);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  turi::sframe::~sframe((turi::sframe *)v11);
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(a1, (uint64_t)v12, v5, (unsigned __int8 *)&lpsrc);
}

void sub_2244CDCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_2244CDD24()
{
}

void turi::supervised::setup_ml_data_for_evaluation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, turi::ml_data *a5@<X8>)
{
  turi::ml_data::ml_data(a5);
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(*a3, a1, a2, a4, v9);
}

void sub_2244CDDFC(_Unwind_Exception *a1)
{
  turi::ml_data::~ml_data(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_extract_features(void *a1@<X0>, turi::gl_sframe *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, a1 + 1);
  if (!lpsrc)
  {
    BOOL v8 = 0;
    goto LABEL_6;
  }
  if (!v8)
  {
LABEL_6:
    std::vector<std::string> v9 = 0;
    goto LABEL_7;
  }
  std::vector<std::string> v9 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v10 = ((uint64_t (*)(void *, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
  turi::gl_sframe::materialize_to_sframe(a2, (turi::sframe *)&lpsrc);
  uint64_t v13 = v8;
  char v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::supervised::setup_test_data_sframe((const turi::sframe *)&lpsrc, &v13, v10, (turi::sframe *)v15);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  (*(void (**)(uint64_t *__return_ptr, void *, unsigned char *, uint64_t))(*a1 + 136))(&v11, a1, v15, v10);
  turi::gl_sarray::gl_sarray(a4, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  turi::sframe::~sframe((turi::sframe *)v15);
  turi::sframe::~sframe((turi::sframe *)&lpsrc);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_2244CDFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  turi::sframe::~sframe((turi::sframe *)&a14);
  turi::sframe::~sframe((turi::sframe *)&a51);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::supervised_learning_model_base::api_export_to_coreml(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return;
    }
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 23)) {
LABEL_5:
  }
    turi::coreml::MLModelWrapper::save(*a3);
}

void sub_2244CE0A0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::_get_metadata_mapping(turi::supervised::supervised_learning_model_base **a1@<X0>, void *a2@<X8>)
{
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D7841F0;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7841F0;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  *(void *)a2 = v2 == 7;
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::init(turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::sframe const&,turi::ml_missing_value_action,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_2244CE208(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2244CE488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2244CE500(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 68, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2244CE6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"output.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 69, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2244CE8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(**(void **)a1 + 8 * a2);
  unint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8));
  if (v3 < result)
  {
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 8) + 32))(&v23);
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 8) + 40))(&v20);
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 16) + 32))(v17);
    long long v11 = v23;
    *(void *)&void v12[5] = *(void *)&v24[5];
    *(void *)unint64_t v12 = *(void *)v24;
    v12[12] = v24[12];
    if (v24[12] <= 9u && ((1 << v24[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v12, 1uLL);
    }
    long long v13 = v25;
    long long v8 = v20;
    *(void *)&void v9[5] = *(void *)&v21[5];
    *(void *)unint64_t v9 = *(void *)v21;
    v9[12] = v21[12];
    if (v21[12] <= 9u && ((1 << v21[12]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v9, 1uLL);
    }
    long long v10 = v22;
    std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v5, (uint64_t)v17);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v18);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)v19);
    std::transform[abi:ne180100]<turi::sarray_iterator<turi::flexible_type>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0>((uint64_t)&v11, &v8, (uint64_t)v5, (uint64_t)v14);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v16);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v15);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v14);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v7);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v6);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v5);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v8);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v11);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v19);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v18);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v17);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v20);
    return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&v23);
  }
  return result;
}

void sub_2244CEC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a9);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a21);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)&a27);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v27 - 248));
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v27 - 152);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v27 - 104);
  _Unwind_Resume(a1);
}

void sub_2244CED04()
{
}

void sub_2244CED0C()
{
}

uint64_t std::transform[abi:ne180100]<turi::sarray_iterator<turi::flexible_type>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v213 = *MEMORY[0x263EF8340];
  uint64_t v203 = a1 + 16;
  while (*(void *)a1 != *a2 || *(void *)(a1 + 8) != a2[1] || *(void *)(a1 + 32) != a2[4])
  {
    uint64_t v204 = 0x3FE0000000000000;
    double v210 = 0.0;
    int v211 = 0;
    char v212 = 0;
    turi::flexible_type::operator=<double>((uint64_t)&v210, &v204);
    switch(v212)
    {
      case 0:
        switch(*(unsigned char *)(a1 + 28))
        {
          case 0:
            if (*(void *)v203 < *(uint64_t *)&v210) {
              goto LABEL_360;
            }
            goto LABEL_44;
          case 1:
            v7.n128_u64[0] = *(void *)v203;
            double v128 = (double)*(uint64_t *)&v210;
            goto LABEL_213;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_43;
          case 6:
            if (*(uint64_t *)&v210 > (uint64_t)(*(void *)v203 << 8) >> 8) {
              goto LABEL_360;
            }
            goto LABEL_44;
          default:
            goto LABEL_385;
        }
      case 1:
        switch(*(unsigned char *)(a1 + 28))
        {
          case 0:
            v7.n128_f64[0] = v210;
            if (v210 > (double)*(uint64_t *)v203) {
              goto LABEL_360;
            }
            goto LABEL_44;
          case 1:
            v7.n128_u64[0] = *(void *)v203;
            double v128 = v210;
            goto LABEL_213;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_43;
          case 6:
            double v128 = v210;
            v7.n128_f64[0] = (double)*(int *)(a1 + 24) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 16) << 8) >> 8);
LABEL_213:
            if (v7.n128_f64[0] < v128) {
              goto LABEL_360;
            }
            goto LABEL_44;
          default:
            goto LABEL_385;
        }
      case 2:
        unsigned int v9 = *(unsigned __int8 *)(a1 + 28);
        BOOL v10 = v9 - 3 >= 7 && v9 >= 2;
        if (!v10) {
          goto LABEL_43;
        }
        if (v9 != 2)
        {
LABEL_385:
          turi::flexible_type_fail(0);
          __break(1u);
        }
        unint64_t v11 = *(void *)v203;
        if (*(char *)(*(void *)v203 + 31) < 0)
        {
          unint64_t v12 = *(const void **)(v11 + 8);
          size_t v13 = *(void *)(v11 + 16);
        }
        else
        {
          unint64_t v12 = (const void *)(v11 + 8);
          size_t v13 = *(unsigned __int8 *)(*(void *)v203 + 31);
        }
        int v186 = *(char *)(*(void *)&v210 + 31);
        if (v186 >= 0) {
          unint64_t v187 = *(unsigned __int8 *)(*(void *)&v210 + 31);
        }
        else {
          unint64_t v187 = *(void *)(*(void *)&v210 + 16);
        }
        if (v186 >= 0) {
          uint64_t v188 = (atomic_ullong *)(*(void *)&v210 + 8);
        }
        else {
          uint64_t v188 = *(atomic_ullong **)(*(void *)&v210 + 8);
        }
        if (v187 >= v13) {
          size_t v189 = v13;
        }
        else {
          size_t v189 = v187;
        }
        int v190 = memcmp(v12, v188, v189);
        BOOL v191 = v13 < v187;
        if (v190) {
          BOOL v191 = v190 < 0;
        }
        if (v191) {
          goto LABEL_360;
        }
        goto LABEL_44;
      case 3:
        unsigned int v14 = *(unsigned __int8 *)(a1 + 28);
        if (v14 > 9) {
          goto LABEL_385;
        }
        if (v14 != 3) {
          goto LABEL_43;
        }
        unint64_t v15 = *(unint64_t **)(*(void *)v203 + 8);
        float v16 = *(double **)(*(void *)&v210 + 8);
        unint64_t v17 = (uint64_t)(*(void *)(*(void *)&v210 + 16) - (void)v16) >> 3;
        unint64_t v18 = (uint64_t)(*(void *)(*(void *)v203 + 16) - (void)v15) >> 3;
        if (*(unint64_t **)(*(void *)v203 + 16) == v15) {
          goto LABEL_31;
        }
        if (v18 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = (uint64_t)(*(void *)(*(void *)v203 + 16) - (void)v15) >> 3;
        }
        atomic_ullong v20 = (uint64_t)(*(void *)(*(void *)&v210 + 16) - (void)v16) >> 3;
        break;
      case 4:
        unsigned int v8 = *(unsigned __int8 *)(a1 + 28);
        if (v8 > 9) {
          goto LABEL_385;
        }
        if (v8 != 4)
        {
LABEL_43:
          turi::flexible_type_fail(0);
          goto LABEL_44;
        }
        if (!turi::flexible_type_impl::lt_operator::operator()(v7, (uint64_t)&v206, (uint64_t *)(*(void *)v203 + 8), (void *)(*(void *)&v210 + 8)))goto LABEL_44; {
        goto LABEL_360;
        }
      case 5:
      case 8:
      case 9:
        if (*(unsigned __int8 *)(a1 + 28) >= 0xAu) {
          goto LABEL_385;
        }
        goto LABEL_43;
      case 6:
        switch(*(unsigned char *)(a1 + 28))
        {
          case 0:
            if (*(void *)v203 < (uint64_t)(*(void *)&v210 << 8) >> 8) {
              goto LABEL_360;
            }
            goto LABEL_44;
          case 1:
            v7.n128_u64[0] = *(void *)v203;
            if ((double)v211 / 1000000.0 + (double)((uint64_t)(*(void *)&v210 << 8) >> 8) > *(double *)v203) {
              goto LABEL_360;
            }
            goto LABEL_44;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_43;
          case 6:
            uint64_t v129 = (uint64_t)(*(void *)v203 << 8) >> 8;
            if (v129 < (uint64_t)(*(void *)&v210 << 8) >> 8
              || v129 == (uint64_t)(*(void *)&v210 << 8) >> 8 && *(_DWORD *)(a1 + 24) < v211)
            {
              goto LABEL_360;
            }
            goto LABEL_44;
          default:
            goto LABEL_385;
        }
      case 7:
        if (*(unsigned __int8 *)(a1 + 28) <= 9u) {
          goto LABEL_43;
        }
        goto LABEL_385;
      default:
        goto LABEL_385;
    }
    while (v20)
    {
      v7.n128_u64[0] = *v15;
      if (*(double *)v15 > *v16) {
        break;
      }
      if (*(double *)v15 < *v16) {
        goto LABEL_360;
      }
      ++v16;
      ++v15;
      --v20;
      if (!--v19)
      {
LABEL_31:
        if (v18 < v17)
        {
LABEL_360:
          BOOL v21 = 1;
          goto LABEL_121;
        }
        break;
      }
    }
LABEL_44:
    switch(v212)
    {
      case 0:
        BOOL v21 = 0;
        switch(*(unsigned char *)(a1 + 28))
        {
          case 0:
            BOOL v22 = *(void *)v203 == *(void *)&v210;
            goto LABEL_103;
          case 1:
            v7.n128_u64[0] = *(void *)v203;
            uint64_t v79 = *(void *)&v210;
            goto LABEL_228;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_121;
          case 6:
            BOOL v22 = *(void *)&v210 == (uint64_t)(*(void *)(a1 + 16) << 8) >> 8 && *(_DWORD *)(a1 + 24) == 0;
            goto LABEL_103;
          default:
            goto LABEL_385;
        }
      case 1:
        BOOL v21 = 0;
        switch(*(unsigned char *)(a1 + 28))
        {
          case 0:
            v7.n128_f64[0] = v210;
            uint64_t v79 = *(void *)v203;
LABEL_228:
            BOOL v22 = v7.n128_f64[0] == (double)v79;
            goto LABEL_103;
          case 1:
            v7.n128_u64[0] = *(void *)v203;
            BOOL v21 = *(double *)v203 == v210;
            goto LABEL_121;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_121;
          case 6:
            v7.n128_f64[0] = vabdd_f64((double)*(int *)(a1 + 24) / 1000000.0+ (double)((uint64_t)(*(void *)(a1 + 16) << 8) >> 8), v210);
            goto LABEL_231;
          default:
            goto LABEL_385;
        }
      case 2:
        unsigned int v65 = *(unsigned __int8 *)(a1 + 28);
        if (v65 - 3 < 7 || v65 < 2) {
          goto LABEL_120;
        }
        if (v65 != 2) {
          goto LABEL_385;
        }
        uint64_t v67 = *(void *)v203;
        if (*(char *)(*(void *)v203 + 31) < 0) {
          size_t v68 = *(void *)(v67 + 16);
        }
        else {
          size_t v68 = *(unsigned __int8 *)(*(void *)v203 + 31);
        }
        if (*(char *)(*(void *)&v210 + 31) < 0) {
          atomic_ullong v192 = *(void *)(*(void *)&v210 + 16);
        }
        else {
          atomic_ullong v192 = *(unsigned __int8 *)(*(void *)&v210 + 31);
        }
        if (v68 != v192) {
          goto LABEL_120;
        }
        std::string v193 = (void *)(v67 + 8);
        if ((*(unsigned char *)(*(void *)v203 + 31) & 0x80) != 0) {
          std::string v193 = (void *)*v193;
        }
        uint64_t v194 = (atomic_ullong *)(*(void *)&v210 + 8);
        if ((*(unsigned char *)(*(void *)&v210 + 31) & 0x80) != 0) {
          uint64_t v194 = (atomic_ullong *)*v194;
        }
        if ((*(unsigned char *)(*(void *)v203 + 31) & 0x80) != 0)
        {
          BOOL v22 = memcmp(v193, v194, v68) == 0;
LABEL_103:
          BOOL v21 = v22;
        }
        else
        {
          if (!v68) {
            goto LABEL_360;
          }
          size_t v195 = v68 - 1;
          do
          {
            int v197 = *(unsigned __int8 *)v193;
            std::string v193 = (void *)((char *)v193 + 1);
            int v196 = v197;
            int v199 = *(unsigned __int8 *)v194;
            uint64_t v194 = (atomic_ullong *)((char *)v194 + 1);
            int v198 = v199;
            BOOL v10 = v195-- != 0;
            char v200 = v10;
            BOOL v21 = v196 == v198;
          }
          while (v196 == v198 && (v200 & 1) != 0);
        }
        goto LABEL_121;
      case 3:
        unsigned int v69 = *(unsigned __int8 *)(a1 + 28);
        if (v69 > 9) {
          goto LABEL_385;
        }
        if (v69 != 3) {
          goto LABEL_120;
        }
        std::string::size_type v70 = *(unint64_t **)(*(void *)v203 + 8);
        uint64_t v71 = *(void **)(*(void *)v203 + 16);
        unint64_t v72 = v71 - v70;
        uint64_t v73 = *(double **)(*(void *)&v210 + 8);
        if (v72 != (uint64_t)(*(void *)(*(void *)&v210 + 16) - (void)v73) >> 3) {
          goto LABEL_120;
        }
        if (v71 == v70) {
          goto LABEL_360;
        }
        if (v72 <= 1) {
          uint64_t v74 = 1;
        }
        else {
          uint64_t v74 = v71 - v70;
        }
        v7.n128_u64[0] = *v70;
        if (*(double *)v70 != *v73) {
          goto LABEL_120;
        }
        uint64_t v75 = 1;
        do
        {
          unint64_t v76 = v75;
          if (v74 == v75) {
            break;
          }
          v7.n128_u64[0] = v70[v75];
          double v77 = v73[v75++];
        }
        while (v7.n128_f64[0] == v77);
        BOOL v21 = v76 >= v72;
        goto LABEL_121;
      case 4:
        unsigned int v23 = *(unsigned __int8 *)(a1 + 28);
        if (v23 > 9) {
          goto LABEL_385;
        }
        if (v23 != 4) {
          goto LABEL_120;
        }
        int v24 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v206, (uint64_t *)(*(void *)v203 + 8), (void *)(*(void *)&v210 + 8));
        goto LABEL_219;
      case 5:
        unsigned int v80 = *(unsigned __int8 *)(a1 + 28);
        if (v80 > 9) {
          goto LABEL_385;
        }
        if (v80 != 5) {
          goto LABEL_120;
        }
        int v24 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v206, (uint64_t **)(*(void *)v203 + 8), (uint64_t **)(*(void *)&v210 + 8));
        goto LABEL_219;
      case 6:
        BOOL v21 = 0;
        switch(*(unsigned char *)(a1 + 28))
        {
          case 0:
            BOOL v22 = *(void *)v203 == (uint64_t)(*(void *)&v210 << 8) >> 8 && v211 == 0;
            goto LABEL_103;
          case 1:
            v7.n128_f64[0] = vabdd_f64(*(double *)v203, (double)v211 / 1000000.0 + (double)((uint64_t)(*(void *)&v210 << 8) >> 8));
LABEL_231:
            BOOL v21 = v7.n128_f64[0] < 0.0000005;
            goto LABEL_121;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_121;
          case 6:
            BOOL v22 = ((*(void *)&v210 ^ *(void *)(a1 + 16)) & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(a1 + 24) == v211;
            goto LABEL_103;
          default:
            goto LABEL_385;
        }
      case 7:
        unsigned int v78 = *(unsigned __int8 *)(a1 + 28);
        if (v78 >= 0xA) {
          goto LABEL_385;
        }
        BOOL v22 = v78 == 7;
        goto LABEL_103;
      case 8:
        unsigned int v81 = *(unsigned __int8 *)(a1 + 28);
        if (v81 < 8 || v81 == 9) {
          goto LABEL_120;
        }
        if (v81 != 8) {
          goto LABEL_385;
        }
        int v24 = turi::image_type::operator==(*(void *)v203 + 8, *(void *)&v210 + 8);
LABEL_219:
        BOOL v21 = v24;
        goto LABEL_121;
      case 9:
        unsigned int v25 = *(unsigned __int8 *)(a1 + 28);
        if (v25 < 9) {
          goto LABEL_120;
        }
        if (v25 != 9) {
          goto LABEL_385;
        }
        double v26 = v210;
        uint64_t v27 = *(void **)v203;
        if (*(void *)&v210 == *(void *)v203) {
          goto LABEL_360;
        }
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v27 + 1), *(void *)&v210 + 8))
        {
LABEL_120:
          BOOL v21 = 0;
          goto LABEL_121;
        }
        uint64_t v29 = (char *)v27[3];
        unint64_t v28 = (char *)v27[4];
        uint64_t v30 = v28 - v29;
        if (v28 == v29) {
          goto LABEL_360;
        }
        if (!v27[1]) {
          goto LABEL_360;
        }
        uint64_t v31 = 1;
        do
        {
          uint64_t v32 = *(void *)v29;
          v29 += 8;
          v31 *= v32;
        }
        while (v29 != v28);
        if (!v31) {
          goto LABEL_360;
        }
        uint64_t v205 = 0;
        std::vector<unsigned long>::vector(&v206, v30 >> 3, &v205);
        uint64_t v33 = v206;
        uint64_t v34 = v207;
        uint64_t v35 = **(void **)(*(void *)&v26 + 8);
        uint64_t v36 = (char *)v207 - (char *)v206;
        unint64_t v37 = v207 - v206;
        unint64_t v38 = v37 - 1;
        if (v37 <= 1) {
          uint64_t v39 = 1;
        }
        else {
          uint64_t v39 = v207 - v206;
        }
        break;
      default:
        goto LABEL_385;
    }
    do
    {
      if (v34 == v33)
      {
        uint64_t v47 = 0;
        v7.n128_u64[0] = *(void *)(*(void *)v27[1] + 8 * v27[9]);
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v41 = (uint64_t *)v27[6];
        uint64_t v42 = v33;
        uint64_t v43 = v39;
        do
        {
          uint64_t v45 = (uint64_t)*v42++;
          uint64_t v44 = v45;
          uint64_t v46 = *v41++;
          v40 += v46 * v44;
          --v43;
        }
        while (v43);
        uint64_t v47 = 0;
        v7.n128_u64[0] = *(void *)(*(void *)v27[1] + 8 * (v27[9] + v40));
        uint64_t v48 = *(uint64_t **)(*(void *)&v26 + 48);
        uint64_t v49 = v33;
        uint64_t v50 = v39;
        do
        {
          uint64_t v52 = (uint64_t)*v49++;
          uint64_t v51 = v52;
          uint64_t v53 = *v48++;
          v47 += v53 * v51;
          --v50;
        }
        while (v50);
      }
      double v54 = *(double *)(v35 + 8 * (*(void *)(*(void *)&v26 + 72) + v47));
      BOOL v21 = v7.n128_f64[0] == v54;
      if (v7.n128_f64[0] != v54) {
        break;
      }
      uint64_t v55 = v37;
      unint64_t v56 = v37 - 1;
      if (v36 >= 1)
      {
        uint64_t v57 = v27[3];
        unint64_t v58 = (unint64_t)v33[v38] + 1;
        v33[v38] = (void *)v58;
        if (v58 >= *(void *)(v57 + 8 * v38))
        {
          uint64_t v59 = v57 - 16;
          unint64_t v60 = v37;
          unint64_t v61 = (unint64_t *)((char *)v33 + (v36 & 0xFFFFFFFFFFFFFFF8) - 16);
          do
          {
            unint64_t v62 = v60 - 1;
            v61[1] = 0;
            if ((uint64_t)(v60 - 1) <= 0)
            {
              BOOL v21 = 1;
              goto LABEL_381;
            }
            unint64_t v63 = *v61 + 1;
            *v61-- = v63;
            unint64_t v64 = *(void *)(v59 + 8 * v60--);
          }
          while (v63 >= v64);
          uint64_t v55 = 1;
          if (((v62 - 1) & 0x8000000000000000) == 0) {
            continue;
          }
          break;
        }
        uint64_t v55 = 1;
        unint64_t v56 = v37 - 1;
      }
      if ((v56 & 0x8000000000000000) != 0) {
        break;
      }
    }
    while (v55);
LABEL_381:
    if (v33)
    {
      uint64_t v207 = v33;
      operator delete(v33);
    }
LABEL_121:
    switch(v212)
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v210, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v83 = v210;
          if (v210 != 0.0)
          {
            if (*(char *)(*(void *)&v210 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v210 + 8));
            }
            double v84 = v83;
            uint64_t v85 = 0x1012C404EF22A49;
            goto LABEL_152;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v210, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v92 = v210;
          if (v210 != 0.0)
          {
            uint64_t v93 = *(void **)(*(void *)&v210 + 8);
            if (v93)
            {
              *(void *)(*(void *)&v210 + 16) = v93;
              operator delete(v93);
            }
            double v84 = v92;
            uint64_t v85 = 0x1080C409938AC02;
            goto LABEL_152;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v210, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v86 = v210;
          if (v210 != 0.0)
          {
            uint64_t v206 = (void **)(*(void *)&v210 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v206);
            goto LABEL_147;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v210, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v86 = v210;
          if (v210 != 0.0)
          {
            uint64_t v206 = (void **)(*(void *)&v210 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v206);
LABEL_147:
            double v84 = v86;
            uint64_t v85 = 0x1020C405E66F15BLL;
            goto LABEL_152;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v210, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v94 = v210;
          if (v210 != 0.0)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v210 + 16));
            double v84 = v94;
            unsigned int v91 = -235920773;
            goto LABEL_151;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v210, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v87 = v210;
          if (v210 != 0.0)
          {
            uint64_t v88 = *(void **)(*(void *)&v210 + 48);
            if (v88)
            {
              *(void *)(*(void *)&v210 + 56) = v88;
              operator delete(v88);
            }
            uint64_t v89 = *(void **)(*(void *)&v87 + 24);
            if (v89)
            {
              *(void *)(*(void *)&v87 + 32) = v89;
              operator delete(v89);
            }
            double v90 = *(std::__shared_weak_count **)(*(void *)&v87 + 16);
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            double v84 = v87;
            unsigned int v91 = 2071181815;
LABEL_151:
            uint64_t v85 = v91 | 0x1030C4000000000;
LABEL_152:
            MEMORY[0x22A614FA0](*(void *)&v84, v85, v7);
          }
        }
        break;
      default:
        break;
    }
    if (!v21)
    {
      memset(v209, 0, 13);
      if ((atomic_ullong **)v203 != v209)
      {
        *(atomic_ullong **)((char *)v209 + 5) = *(atomic_ullong **)(v203 + 5);
        v209[0] = *(atomic_ullong **)v203;
        BYTE4(v209[1]) = *(unsigned char *)(a1 + 28);
        switch(BYTE4(v209[1]))
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            atomic_fetch_add(v209[0], 1uLL);
            break;
          default:
            goto LABEL_313;
        }
      }
      goto LABEL_313;
    }
    int64_t v95 = *(void *)(a1 + 16);
    unsigned int v96 = *(unsigned __int8 *)(a1 + 28);
    int v97 = *(_DWORD *)(a1 + 24);
    unint64_t v98 = v95;
    switch(*(unsigned char *)(a1 + 28))
    {
      case 0:
        unint64_t v98 = -v95;
        goto LABEL_163;
      case 1:
        unint64_t v98 = v95 ^ 0x8000000000000000;
LABEL_163:
        v209[0] = (atomic_ullong *)v98;
        LODWORD(v209[1]) = v97;
        unsigned int v99 = v96;
        BYTE4(v209[1]) = v96;
        goto LABEL_237;
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add((atomic_ullong *volatile)v95, 1uLL);
        unint64_t v98 = v95;
        switch(v96)
        {
          case 2u:
            if (*(void *)v95 != 1) {
              operator new();
            }
            goto LABEL_173;
          case 3u:
            if (*(void *)v95 != 1) {
              operator new();
            }
            unint64_t v98 = v95;
            uint64_t v100 = *(double **)(v95 + 8);
            uint64_t v101 = *(void *)(v95 + 16) - (void)v100;
            if (!v101) {
              goto LABEL_202;
            }
            unint64_t v102 = v101 >> 3;
            if (v102 <= 1) {
              unint64_t v102 = 1;
            }
            do
            {
              v7.n128_f64[0] = -*v100;
              *v100++ = v7.n128_f64[0];
              --v102;
            }
            while (v102);
            goto LABEL_233;
          case 4u:
            if (*(void *)v95 != 1) {
              operator new();
            }
            goto LABEL_173;
          case 5u:
            if (*(void *)v95 != 1) {
              operator new();
            }
            goto LABEL_173;
          case 6u:
          case 7u:
            goto LABEL_232;
          case 8u:
            if (*(void *)v95 != 1) {
              operator new();
            }
LABEL_173:
            unint64_t v98 = v95;
            goto LABEL_232;
          case 9u:
            if (*(void *)v95 != 1) {
              operator new();
            }
            unint64_t v98 = v95;
            unint64_t v104 = *(uint64_t **)(v95 + 24);
            unint64_t v103 = *(uint64_t **)(v95 + 32);
            if (v103 == v104 || !*(void *)(v95 + 8))
            {
LABEL_202:
              v209[0] = (atomic_ullong *)v98;
              LODWORD(v209[1]) = v97;
              BYTE4(v209[1]) = v96;
              goto LABEL_235;
            }
            uint64_t v105 = 1;
            do
            {
              uint64_t v106 = *v104++;
              v105 *= v106;
            }
            while (v104 != v103);
            if (!v105) {
              goto LABEL_233;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v95 + 8));
            unint64_t v107 = (uint64_t)(*(void *)(v95 + 32) - *(void *)(v95 + 24)) >> 3;
            uint64_t v208 = 0;
            std::vector<unsigned long>::vector(&v206, v107, &v208);
            size_t v108 = v206;
            uint64_t v109 = v207;
            break;
          default:
            goto LABEL_385;
        }
        break;
      case 6:
      case 7:
LABEL_232:
        turi::flexible_type_fail(0);
        goto LABEL_233;
      default:
        goto LABEL_385;
    }
    while (1)
    {
      uint64_t v110 = 0;
      uint64_t v111 = (char *)v109 - (char *)v108;
      if (v111)
      {
        unint64_t v112 = v111 >> 3;
        uint64_t v113 = *(uint64_t **)(v95 + 48);
        if (v112 <= 1) {
          unint64_t v112 = 1;
        }
        do
        {
          uint64_t v115 = (uint64_t)*v108++;
          uint64_t v114 = v115;
          uint64_t v116 = *v113++;
          v110 += v116 * v114;
          --v112;
        }
        while (v112);
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v95 + 8));
      atomic_ullong v117 = *(void *)(v95 + 72) + v110;
      uint64_t v118 = **(void **)(v95 + 8);
      v7.n128_f64[0] = -*(double *)(v118 + 8 * v117);
      *(void *)(v118 + 8 * v117) = v7.n128_u64[0];
      size_t v108 = v206;
      uint64_t v109 = v207;
      uint64_t v119 = v207 - v206;
      uint64_t v120 = v119 - 1;
      if ((char *)v207 - (char *)v206 < 1) {
        goto LABEL_198;
      }
      atomic_ullong v121 = *(void *)(v95 + 24);
      int v122 = (char *)v206[v120] + 1;
      v206[v120] = v122;
      if ((unint64_t)v122 >= *(void *)(v121 + 8 * v120)) {
        break;
      }
LABEL_197:
      uint64_t v119 = 1;
LABEL_198:
      if (v120 < 0 || !v119) {
        goto LABEL_200;
      }
    }
    unsigned int v123 = (unint64_t *)&v108[v119 - 2];
    atomic_ullong v124 = v121 - 16;
    while (1)
    {
      uint64_t v125 = v119 - 1;
      v123[1] = 0;
      if (v119 - 1 <= 0) {
        break;
      }
      unint64_t v126 = *v123 + 1;
      *v123-- = v126;
      unint64_t v127 = *(void *)(v124 + 8 * v119--);
      if (v126 < v127)
      {
        uint64_t v120 = v125 - 1;
        goto LABEL_197;
      }
    }
LABEL_200:
    if (v108)
    {
      uint64_t v207 = v108;
      operator delete(v108);
    }
LABEL_233:
    v209[0] = (atomic_ullong *)v98;
    LODWORD(v209[1]) = v97;
    BYTE4(v209[1]) = v96;
    if (v96 > 9)
    {
      unsigned int v99 = v96;
    }
    else
    {
      unsigned int v99 = v96;
      if (((1 << v96) & 0x33C) != 0)
      {
LABEL_235:
        atomic_fetch_add((atomic_ullong *volatile)v98, 1uLL);
        unsigned int v99 = BYTE4(v209[1]);
      }
    }
LABEL_237:
    switch(v99)
    {
      case 0u:
        uint64_t v130 = (atomic_ullong *)((char *)v209[0] + 1);
        goto LABEL_272;
      case 1u:
        v7.n128_f64[0] = *(double *)v209 + 1.0;
        *(double *)uint64_t v209 = *(double *)v209 + 1.0;
        goto LABEL_281;
      case 2u:
        if (*v209[0] != 1) {
          operator new();
        }
        goto LABEL_280;
      case 3u:
        if (*v209[0] != 1) {
          operator new();
        }
        uint64_t v131 = (double *)v209[0][1];
        uint64_t v132 = v209[0][2] - (void)v131;
        if (v132)
        {
          unint64_t v133 = v132 >> 3;
          if (v133 <= 1) {
            unint64_t v133 = 1;
          }
          do
          {
            v7.n128_f64[0] = *v131 + 1.0;
            *v131++ = v7.n128_f64[0];
            --v133;
          }
          while (v133);
        }
        goto LABEL_281;
      case 4u:
        if (*v209[0] != 1) {
          operator new();
        }
        goto LABEL_280;
      case 5u:
        if (*v209[0] != 1) {
          operator new();
        }
        goto LABEL_280;
      case 6u:
        uint64_t v130 = (atomic_ullong *)((unint64_t)v209[0] & 0xFF00000000000000 | ((unint64_t)v209[0] + 1) & 0xFFFFFFFFFFFFFFLL);
LABEL_272:
        v209[0] = v130;
        goto LABEL_281;
      case 7u:
        goto LABEL_280;
      case 8u:
        if (*v209[0] != 1) {
          operator new();
        }
LABEL_280:
        turi::flexible_type_fail(0);
        goto LABEL_281;
      case 9u:
        if (*v209[0] != 1) {
          operator new();
        }
        unint64_t v134 = v209[0];
        double v136 = (uint64_t *)v209[0][3];
        atomic_ullong v135 = v209[0][4];
        if ((uint64_t *)v135 == v136) {
          goto LABEL_281;
        }
        if (!v209[0][1]) {
          goto LABEL_281;
        }
        uint64_t v137 = 1;
        do
        {
          uint64_t v138 = *v136++;
          v137 *= v138;
        }
        while (v136 != (uint64_t *)v135);
        if (!v137) {
          goto LABEL_281;
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v209[0] + 1);
        unint64_t v139 = (v134[4] - v134[3]) >> 3;
        uint64_t v208 = 0;
        std::vector<unsigned long>::vector(&v206, v139, &v208);
        uint64_t v140 = v206;
        uint64_t v141 = v207;
        break;
      default:
        goto LABEL_385;
    }
    do
    {
      uint64_t v142 = 0;
      uint64_t v143 = (char *)v141 - (char *)v140;
      if (v143)
      {
        unint64_t v144 = v143 >> 3;
        unint64_t v145 = (uint64_t *)v134[6];
        if (v144 <= 1) {
          unint64_t v144 = 1;
        }
        do
        {
          uint64_t v147 = (uint64_t)*v140++;
          uint64_t v146 = v147;
          uint64_t v148 = *v145++;
          v142 += v148 * v146;
          --v144;
        }
        while (v144);
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v134 + 1);
      atomic_ullong v149 = v134[9] + v142;
      uint64_t v150 = *(void *)v134[1];
      v7.n128_f64[0] = *(double *)(v150 + 8 * v149) + 1.0;
      *(void *)(v150 + 8 * v149) = v7.n128_u64[0];
      uint64_t v140 = v206;
      uint64_t v141 = v207;
      uint64_t v151 = v207 - v206;
      uint64_t v152 = v151 - 1;
      if ((char *)v207 - (char *)v206 >= 1)
      {
        atomic_ullong v153 = v134[3];
        uint64_t v154 = (char *)v206[v152] + 1;
        v206[v152] = v154;
        if ((unint64_t)v154 >= *(void *)(v153 + 8 * v152))
        {
          long long v155 = (unint64_t *)&v140[v151 - 2];
          atomic_ullong v156 = v153 - 16;
          while (1)
          {
            uint64_t v157 = v151 - 1;
            v155[1] = 0;
            if (v151 - 1 <= 0) {
              goto LABEL_268;
            }
            unint64_t v158 = *v155 + 1;
            *v155-- = v158;
            unint64_t v159 = *(void *)(v156 + 8 * v151--);
            if (v158 < v159)
            {
              uint64_t v152 = v157 - 1;
              break;
            }
          }
        }
        uint64_t v151 = 1;
      }
    }
    while ((v152 & 0x8000000000000000) == 0 && v151);
    if (!v140) {
      goto LABEL_281;
    }
LABEL_268:
    uint64_t v207 = v140;
    operator delete(v140);
LABEL_281:
    switch(v96)
    {
      case 2u:
        unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v98, 0xFFFFFFFFFFFFFFFFLL);
        if (v98 && add == 1)
        {
          if (*(char *)(v98 + 31) < 0) {
            operator delete(*(void **)(v98 + 8));
          }
          unint64_t v161 = v98;
          uint64_t v162 = 0x1012C404EF22A49;
          goto LABEL_312;
        }
        break;
      case 3u:
        unint64_t v169 = atomic_fetch_add((atomic_ullong *volatile)v98, 0xFFFFFFFFFFFFFFFFLL);
        if (v98 && v169 == 1)
        {
          uint64_t v170 = *(void **)(v98 + 8);
          if (v170)
          {
            *(void *)(v98 + 16) = v170;
            operator delete(v170);
          }
          unint64_t v161 = v98;
          uint64_t v162 = 0x1080C409938AC02;
          goto LABEL_312;
        }
        break;
      case 4u:
        unint64_t v163 = atomic_fetch_add((atomic_ullong *volatile)v98, 0xFFFFFFFFFFFFFFFFLL);
        if (v98 && v163 == 1)
        {
          uint64_t v206 = (void **)(v98 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v206);
          goto LABEL_307;
        }
        break;
      case 5u:
        unint64_t v171 = atomic_fetch_add((atomic_ullong *volatile)v98, 0xFFFFFFFFFFFFFFFFLL);
        if (v98 && v171 == 1)
        {
          uint64_t v206 = (void **)(v98 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v206);
LABEL_307:
          unint64_t v161 = v98;
          uint64_t v162 = 0x1020C405E66F15BLL;
          goto LABEL_312;
        }
        break;
      case 8u:
        unint64_t v172 = atomic_fetch_add((atomic_ullong *volatile)v98, 0xFFFFFFFFFFFFFFFFLL);
        if (v98 && v172 == 1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v98 + 16));
          unint64_t v161 = v98;
          unsigned int v168 = -235920773;
          goto LABEL_311;
        }
        break;
      case 9u:
        unint64_t v164 = atomic_fetch_add((atomic_ullong *volatile)v98, 0xFFFFFFFFFFFFFFFFLL);
        if (v98 && v164 == 1)
        {
          uint64_t v165 = *(void **)(v98 + 48);
          if (v165)
          {
            *(void *)(v98 + 56) = v165;
            operator delete(v165);
          }
          uint64_t v166 = *(void **)(v98 + 24);
          if (v166)
          {
            *(void *)(v98 + 32) = v166;
            operator delete(v166);
          }
          uint64_t v167 = *(std::__shared_weak_count **)(v98 + 16);
          if (v167) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v167);
          }
          unint64_t v161 = v98;
          unsigned int v168 = 2071181815;
LABEL_311:
          uint64_t v162 = v168 | 0x1030C4000000000;
LABEL_312:
          MEMORY[0x22A614FA0](v161, v162);
        }
        break;
      default:
        break;
    }
LABEL_313:
    uint64_t v173 = *(void *)(a3 + 56);
    if (!v173) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, atomic_ullong **, __n128))(*(void *)v173 + 48))(v173, v209, v7);
    switch(BYTE4(v209[1]))
    {
      case 2:
        if (atomic_fetch_add(v209[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v174 = v209[0];
          if (v209[0])
          {
            if (*((char *)v209[0] + 31) < 0) {
              operator delete(*((void **)v209[0] + 1));
            }
            uint64_t v175 = v174;
            uint64_t v176 = 0x1012C404EF22A49;
            goto LABEL_345;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v209[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          char v183 = v209[0];
          if (v209[0])
          {
            uint64_t v184 = (void *)v209[0][1];
            if (v184)
            {
              v209[0][2] = (atomic_ullong)v184;
              operator delete(v184);
            }
            uint64_t v175 = v183;
            uint64_t v176 = 0x1080C409938AC02;
            goto LABEL_345;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v209[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v177 = v209[0];
          if (v209[0])
          {
            uint64_t v206 = (void **)(v209[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v206);
            goto LABEL_340;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v209[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v177 = v209[0];
          if (v209[0])
          {
            uint64_t v206 = (void **)(v209[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v206);
LABEL_340:
            uint64_t v175 = v177;
            uint64_t v176 = 0x1020C405E66F15BLL;
            goto LABEL_345;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v209[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v185 = v209[0];
          if (v209[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v209[0] + 2);
            uint64_t v175 = v185;
            unsigned int v182 = -235920773;
            goto LABEL_344;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v209[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          char v178 = v209[0];
          if (v209[0])
          {
            unint64_t v179 = (void *)v209[0][6];
            if (v179)
            {
              v209[0][7] = (atomic_ullong)v179;
              operator delete(v179);
            }
            unint64_t v180 = (void *)v178[3];
            if (v180)
            {
              v178[4] = (atomic_ullong)v180;
              operator delete(v180);
            }
            uint64_t v181 = (std::__shared_weak_count *)v178[2];
            if (v181) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v181);
            }
            uint64_t v175 = v178;
            unsigned int v182 = 2071181815;
LABEL_344:
            uint64_t v176 = v182 | 0x1030C4000000000;
LABEL_345:
            MEMORY[0x22A614FA0](v175, v176);
          }
        }
        break;
      default:
        break;
    }
    turi::sarray_iterator<turi::flexible_type>::operator++(a1);
  }
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a4, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a4 + 32, a3 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a4 + 64, a3 + 64);
}

void sub_2244D087C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,uint64_t a21,int a22,char a23)
{
  MEMORY[0x22A614FA0](v24, 0x1012C404EF22A49);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v23, 0xFFFFFFFFFFFFFFFFLL);
  if (v23 && add == 1)
  {
    if (*(char *)(v23 + 31) < 0) {
      operator delete(*(void **)(v23 + 8));
    }
    MEMORY[0x22A614FA0](v23, 0x1012C404EF22A49);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZNS_10s"
                                        "upervised30supervised_learning_model_base8classifyERKNS_7ml_dataERKNSt3__112basi"
                                        "c_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEE3$_0vvEEvOT_OT0_T1_NSB_3setI"
                                        "mNSB_4lessImEENSF_ImEEEEEUlmE_EEvmmRKSL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9transformIRNS_6sarrayINS_13flexible_typeEEES5_ZNS_10supervised30supervised_learning_model_base8classifyERKNS_7ml_dataERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEE3$_0vvEEvOT_OT0_T1_NSB_3setImNSB_4lessImEENSF_ImEEEEEUlmE_EEvmmRKSL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type> & const&)::{lambda(void)#1},void>::invoke(unint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    int v2 = (uint64_t *)result;
    do
      unint64_t result = turi::transform<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,turi::supervised::supervised_learning_model_base::classify(turi::ml_data const&,std::string const&)::$_0,std::set<unsigned long>)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)int v2 = &unk_26D784290;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D784290;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  v140[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(turi::supervised::supervised_learning_model_base **)(a1 + 32);
  __n128 v7 = *(unint64_t **)(a1 + 8);
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  unint64_t v8 = *v7;
  if (*v7)
  {
    if (v8 >> 61 || (unsigned int v9 = malloc_type_malloc(8 * v8, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v111 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v111, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    __n128 v7 = *(unint64_t **)(a1 + 8);
    uint64_t v132 = v9;
  }
  uint64_t v133 = v8;
  unint64_t v10 = *v7;
  v128[0] = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  unint64_t v131 = v10;
  memset(v140, 0, 13);
  (*(void (**)(void *__return_ptr))(***(void ***)(a1 + 16) + 32))(v136);
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 24), v4, v5, (uint64_t)v115);
  if (v121 != v120)
  {
    uint64_t v113 = v6;
    uint64_t v114 = a1;
    do
    {
      unint64_t v11 = *(void *)(*((void *)v6 + 47) + 64);
      unint64_t v12 = turi::supervised::supervised_learning_model_base::num_features(v6);
      uint64_t v13 = v123;
      unsigned int v14 = v124;
      if (v11 <= 3 * v12)
      {
        if (v124) {
          atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v45 = v125;
        int v46 = v127;
        uint64_t v48 = (char *)v132;
        int64_t v47 = v133;
        if (v133 >= 0) {
          uint64_t v49 = v133;
        }
        else {
          uint64_t v49 = v133 + 1;
        }
        int64_t v50 = v49 & 0xFFFFFFFFFFFFFFFELL;
        if (v133 >= 2)
        {
          unint64_t v51 = 2;
          if (v50 > 2) {
            unint64_t v51 = v49 & 0xFFFFFFFFFFFFFFFELL;
          }
          bzero(v132, ((8 * v51 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v50 < v47) {
          bzero(&v48[16 * (v49 >> 1)], 8 * v47 - 16 * (v49 >> 1));
        }
        if (v46)
        {
          uint64_t v52 = *(void *)(v13 + 56);
          if (v52)
          {
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            uint64_t v55 = (unint64_t *)(*(void *)(v13 + 96) + 8 * v45 + 8 * (*(unsigned char *)(v13 + 18) == 0));
            uint64_t v56 = *(void *)(v13 + 72);
            uint64_t v57 = v132;
            do
            {
              uint64_t v58 = *(void *)(v56 + 16 * v53);
              unint64_t v59 = *(void *)(v58 + 64);
              switch(*(_DWORD *)(v58 + 24))
              {
                case 0:
                  if (v59) {
                    v57[v54] = *v55;
                  }
                  ++v55;
                  goto LABEL_93;
                case 1:
                  unint64_t v68 = *v55++;
                  unint64_t v67 = v68;
                  --v54;
                  if (v68 < v59 && v67 != 0) {
                    v57[v67 + v54] = 0x3FF0000000000000;
                  }
                  goto LABEL_93;
                case 2:
                  uint64_t v60 = *(void *)(v58 + 72);
                  if (!v60) {
                    goto LABEL_93;
                  }
                  uint64_t v61 = 0;
                  unint64_t v62 = 0;
                  unint64_t v63 = (char *)v132 + 8 * v54;
                  do
                  {
                    if (v62 < v59) {
                      *(void *)&v63[8 * v62] = v55[v62];
                    }
                    ++v62;
                    v61 -= 8;
                  }
                  while (v60 != v62);
                  break;
                case 3:
                  uint64_t v71 = *v55++;
                  uint64_t v70 = v71;
                  --v54;
                  if (v71)
                  {
                    unint64_t v72 = v132;
                    do
                    {
                      unint64_t v73 = *v55;
                      if (*v55 < v59 && v73 != 0) {
                        v72[v73 + v54] = 0x3FF0000000000000;
                      }
                      ++v55;
                      --v70;
                    }
                    while (v70);
                  }
                  goto LABEL_93;
                case 4:
                  unint64_t v77 = *v55;
                  uint64_t v75 = v55 + 1;
                  unint64_t v76 = v77;
                  if (v77)
                  {
                    unsigned int v78 = v132;
                    uint64_t v79 = v75;
                    do
                    {
                      unint64_t v81 = *v79;
                      v79 += 2;
                      unint64_t v80 = v81;
                      if (v81 < v59) {
                        v78[v80 + v54] = v75[1];
                      }
                      uint64_t v75 = v79;
                      --v76;
                    }
                    while (v76);
                  }
                  else
                  {
                    uint64_t v79 = v75;
                  }
                  v54 += v59;
                  uint64_t v55 = v79;
                  goto LABEL_94;
                case 7:
                  uint64_t v64 = *(void *)(v58 + 72);
                  if (!v64) {
                    goto LABEL_93;
                  }
                  uint64_t v61 = 0;
                  unint64_t v65 = 0;
                  int v66 = (char *)v132 + 8 * v54;
                  do
                  {
                    if (v65 < v59) {
                      *(void *)&v66[8 * v65] = v55[v65];
                    }
                    ++v65;
                    v61 -= 8;
                  }
                  while (v64 != v65);
                  break;
                default:
                  goto LABEL_94;
              }
              uint64_t v55 = (unint64_t *)((char *)v55 - v61);
LABEL_93:
              v54 += v59;
LABEL_94:
              ++v53;
            }
            while (v53 != v52);
          }
        }
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        uint64_t v6 = v113;
        *((void *)v132 + **(void **)(v114 + 8) - 1) = 0x3FF0000000000000;
        (*(void (**)(unsigned char *__return_ptr, turi::supervised::supervised_learning_model_base *, void **, void))(*(void *)v113 + 88))(v135, v113, &v132, *(void *)(v114 + 40));
        switch(BYTE4(v140[1]))
        {
          case 2:
LABEL_107:
            if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v82 = v140[0];
              if (v140[0])
              {
                if (*((char *)v140[0] + 31) < 0) {
                  operator delete(*((void **)v140[0] + 1));
                }
                double v83 = v82;
                uint64_t v84 = 0x1012C404EF22A49;
                goto LABEL_137;
              }
            }
            break;
          case 3:
LABEL_124:
            if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unsigned int v91 = v140[0];
              if (v140[0])
              {
                double v92 = (void *)v140[0][1];
                if (v92)
                {
                  v140[0][2] = (atomic_ullong)v92;
                  operator delete(v92);
                }
                double v83 = v91;
                uint64_t v84 = 0x1080C409938AC02;
                goto LABEL_137;
              }
            }
            break;
          case 4:
LABEL_112:
            if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v85 = v140[0];
              if (v140[0])
              {
                unint64_t v134 = (void **)(v140[0] + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v134);
                goto LABEL_132;
              }
            }
            break;
          case 5:
LABEL_129:
            if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v85 = v140[0];
              if (v140[0])
              {
                unint64_t v134 = (void **)(v140[0] + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v134);
LABEL_132:
                double v83 = v85;
                uint64_t v84 = 0x1020C405E66F15BLL;
                goto LABEL_137;
              }
            }
            break;
          case 8:
LABEL_133:
            if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v93 = v140[0];
              if (v140[0])
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v140[0] + 2);
                double v83 = v93;
                unsigned int v90 = -235920773;
                goto LABEL_136;
              }
            }
            break;
          case 9:
LABEL_115:
            if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v86 = v140[0];
              if (v140[0])
              {
                double v87 = (void *)v140[0][6];
                if (v87)
                {
                  v140[0][7] = (atomic_ullong)v87;
                  operator delete(v87);
                }
                uint64_t v88 = (void *)v86[3];
                if (v88)
                {
                  v86[4] = (atomic_ullong)v88;
                  operator delete(v88);
                }
                uint64_t v89 = (std::__shared_weak_count *)v86[2];
                if (v89) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v89);
                }
                double v83 = v86;
                unsigned int v90 = 2071181815;
LABEL_136:
                uint64_t v84 = v90 | 0x1030C4000000000;
LABEL_137:
                MEMORY[0x22A614FA0](v83, v84);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        if (v124) {
          atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v112 = v14;
        *(void *)&long long v130 = 0;
        if (v127)
        {
          uint64_t v15 = *(void *)(v13 + 56);
          if (v15)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            unint64_t v18 = (uint64_t *)(*(void *)(v13 + 96) + 8 * v125 + 8 * (*(unsigned char *)(v13 + 18) == 0));
            do
            {
              uint64_t v19 = *(void *)(*(void *)(v13 + 72) + 16 * v16);
              unint64_t v20 = *(void *)(v19 + 64);
              switch(*(_DWORD *)(v19 + 24))
              {
                case 0:
                  uint64_t v21 = *v18++;
                  uint64_t v22 = v21;
                  if (v20)
                  {
                    *(void *)atomic_ullong v135 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v129, (int)v17, v135) = v22;
                  }
                  goto LABEL_45;
                case 1:
                  unint64_t v34 = *v18++;
                  unint64_t v33 = v34;
                  if (v34 < v20 && v33 != 0)
                  {
                    *(void *)atomic_ullong v135 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v129, (int)v33 + (int)v17 - 1, v135) = 0x3FF0000000000000;
                  }
                  goto LABEL_40;
                case 2:
                  uint64_t v23 = *(void *)(v19 + 72);
                  if (v23)
                  {
                    unint64_t v24 = 0;
                    uint64_t v25 = v17 << 32;
                    do
                    {
                      uint64_t v26 = *v18++;
                      uint64_t v27 = v26;
                      if (v24 < v20)
                      {
                        *(void *)atomic_ullong v135 = 0;
                        *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v129, v25 >> 32, v135) = v27;
                      }
                      ++v24;
                      v25 += 0x100000000;
                    }
                    while (v23 != v24);
                  }
                  goto LABEL_27;
                case 3:
                  uint64_t v37 = *v18++;
                  for (uint64_t i = v37; i; --i)
                  {
                    uint64_t v38 = *v18;
                    if (*v18 < v20 && v38 != 0)
                    {
                      *(void *)atomic_ullong v135 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v129, (int)v38 + (int)v17 - 1, v135) = 0x3FF0000000000000;
                    }
                    ++v18;
                  }
LABEL_40:
                  uint64_t v17 = v20 + v17 - 1;
                  break;
                case 4:
                  uint64_t v41 = *v18++;
                  for (uint64_t j = v41; j; --j)
                  {
                    uint64_t v42 = *v18;
                    if (*v18 < v20)
                    {
                      uint64_t v43 = v18[1];
                      *(void *)atomic_ullong v135 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v129, (int)v42 + (int)v17, v135) = v43;
                    }
                    v18 += 2;
                  }
LABEL_45:
                  v17 += v20;
                  break;
                case 7:
                  uint64_t v28 = *(void *)(v19 + 72);
                  if (v28)
                  {
                    unint64_t v29 = 0;
                    uint64_t v30 = v17 << 32;
                    do
                    {
                      uint64_t v31 = *v18++;
                      uint64_t v32 = v31;
                      if (v29 < v20)
                      {
                        *(void *)atomic_ullong v135 = 0;
                        *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v129, v30 >> 32, v135) = v32;
                      }
                      ++v29;
                      v30 += 0x100000000;
                    }
                    while (v28 != v29);
                  }
LABEL_27:
                  v17 += v20;
                  break;
                default:
                  break;
              }
              ++v16;
            }
            while (v16 != v15);
          }
        }
        if (v112) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v112);
        }
        uint64_t v44 = **(_DWORD **)(v114 + 8) - 1;
        *(void *)atomic_ullong v135 = 0;
        uint64_t v6 = v113;
        *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v129, v44, v135) = 0x3FF0000000000000;
        (*(void (**)(unsigned char *__return_ptr, turi::supervised::supervised_learning_model_base *, char *, void))(*(void *)v113 + 96))(v135, v113, v128, *(void *)(v114 + 40));
        switch(BYTE4(v140[1]))
        {
          case 2:
            goto LABEL_107;
          case 3:
            goto LABEL_124;
          case 4:
            goto LABEL_112;
          case 5:
            goto LABEL_129;
          case 8:
            goto LABEL_133;
          case 9:
            goto LABEL_115;
          default:
            break;
        }
      }
      *(atomic_ullong **)((char *)v140 + 5) = *(atomic_ullong **)&v135[5];
      v140[0] = *(atomic_ullong **)v135;
      BYTE4(v140[1]) = v135[12];
      if (!v137) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v137 + 48))(v137, v140);
      if (v127 | v117)
      {
        double v94 = (uint64_t *)(*(void *)(v123 + 96) + 8 * v125);
        if (v118) {
          double v94 = &v119;
        }
        v125 += *v94;
      }
      uint64_t v95 = v121 + 1;
      uint64_t v96 = v120;
      uint64_t v97 = ++v121 - v116 * v122;
      uint64_t v126 = v97;
      if (v97 == v116 && v95 != v120)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v115);
        uint64_t v96 = v120;
        uint64_t v95 = v121;
      }
    }
    while (v95 != v96);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v115);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v139);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v138);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v136);
  switch(BYTE4(v140[1]))
  {
    case 2:
      if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v98 = v140[0];
        if (v140[0])
        {
          if (*((char *)v140[0] + 31) < 0) {
            operator delete(*((void **)v140[0] + 1));
          }
          unsigned int v99 = v98;
          uint64_t v100 = 0x1012C404EF22A49;
          goto LABEL_178;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v107 = v140[0];
        if (v140[0])
        {
          size_t v108 = (void *)v140[0][1];
          if (v108)
          {
            v140[0][2] = (atomic_ullong)v108;
            operator delete(v108);
          }
          unsigned int v99 = v107;
          uint64_t v100 = 0x1080C409938AC02;
          goto LABEL_178;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v101 = v140[0];
        if (v140[0])
        {
          v115[0] = (void **)(v140[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v115);
          goto LABEL_173;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v101 = v140[0];
        if (v140[0])
        {
          v115[0] = (void **)(v140[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v115);
LABEL_173:
          unsigned int v99 = v101;
          uint64_t v100 = 0x1020C405E66F15BLL;
          goto LABEL_178;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v109 = v140[0];
        if (v140[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v140[0] + 2);
          unsigned int v99 = v109;
          unsigned int v106 = -235920773;
          goto LABEL_177;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v140[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v102 = v140[0];
        if (v140[0])
        {
          unint64_t v103 = (void *)v140[0][6];
          if (v103)
          {
            v140[0][7] = (atomic_ullong)v103;
            operator delete(v103);
          }
          unint64_t v104 = (void *)v102[3];
          if (v104)
          {
            v102[4] = (atomic_ullong)v104;
            operator delete(v104);
          }
          uint64_t v105 = (std::__shared_weak_count *)v102[2];
          if (v105) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v105);
          }
          unsigned int v99 = v102;
          unsigned int v106 = 2071181815;
LABEL_177:
          uint64_t v100 = v106 | 0x1030C4000000000;
LABEL_178:
          MEMORY[0x22A614FA0](v99, v100);
        }
      }
      break;
    default:
      break;
  }
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v129);
  free(v132);
}

void sub_2244D2100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)(v65 - 160));
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100]((void *)(v65 - 192));
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(v65 - 224));
  switch(*(unsigned char *)(v65 - 116))
  {
    case 2:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v65 - 128));
      goto LABEL_16;
    case 3:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v65 - 128));
      goto LABEL_16;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v65 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_16;
      }
      uint64_t v67 = *(void *)(v65 - 128);
      if (!v67) {
        goto LABEL_16;
      }
      a13 = v67 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
      goto LABEL_11;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v65 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_16;
      }
      uint64_t v67 = *(void *)(v65 - 128);
      if (!v67) {
        goto LABEL_16;
      }
      a13 = v67 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
LABEL_11:
      uint64_t v68 = v67;
      uint64_t v69 = 0x1020C405E66F15BLL;
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v65 - 128), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_16;
      }
      uint64_t v70 = *(void *)(v65 - 128);
      if (!v70) {
        goto LABEL_16;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v70 + 16));
      uint64_t v68 = v70;
      uint64_t v69 = 0x1030C40F1F0227BLL;
      break;
    case 9:
      std::__function::__func<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0,std::allocator<turi::query_eval::ec_scatter_partitions(turi::sframe,unsigned long,std::vector<BOOL> const&,std::shared_ptr<turi::sarray<turi::flexible_type>>)::$_0>,void ()(unsigned long,unsigned long)>::operator()((atomic_ullong *volatile *)(v65 - 128));
      goto LABEL_16;
    default:
      goto LABEL_16;
  }
  MEMORY[0x22A614FA0](v68, v69);
LABEL_16:
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(v64);
  free(a64);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict(turi::ml_data const&,std::string const&)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D784310;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D784310;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v197 = *MEMORY[0x263EF8340];
  uint64_t v190 = 0x3FE0000000000000;
  double v194 = 0.0;
  int v195 = 0;
  char v196 = 0;
  turi::flexible_type::operator=<double>((uint64_t)&v194, &v190);
  switch(v196)
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 < *(uint64_t *)&v194) {
            goto LABEL_324;
          }
          goto LABEL_40;
        case 1u:
          v4.n128_u64[0] = *(void *)a1;
          double v128 = (double)*(uint64_t *)&v194;
          goto LABEL_209;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_39;
        case 6u:
          if (*(uint64_t *)&v194 > (uint64_t)(*(void *)a1 << 8) >> 8) {
            goto LABEL_324;
          }
          goto LABEL_40;
        default:
          goto LABEL_349;
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          v4.n128_f64[0] = v194;
          if (v194 > (double)*(uint64_t *)a1) {
            goto LABEL_324;
          }
          goto LABEL_40;
        case 1u:
          v4.n128_u64[0] = *(void *)a1;
          double v128 = v194;
LABEL_209:
          if (v4.n128_f64[0] < v128) {
            goto LABEL_324;
          }
          goto LABEL_40;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_39;
        case 6u:
          v4.n128_f64[0] = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
          if (v4.n128_f64[0] < v194) {
            goto LABEL_324;
          }
          goto LABEL_40;
        default:
          goto LABEL_349;
      }
    case 2:
      unsigned int v6 = a1[12];
      BOOL v7 = v6 - 3 >= 7 && v6 >= 2;
      if (!v7) {
        goto LABEL_39;
      }
      if (v6 != 2)
      {
LABEL_349:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
      }
      unint64_t v8 = *(void *)a1;
      char v9 = *(unsigned char *)(*(void *)&v194 + 31);
      if (*(char *)(*(void *)a1 + 31) < 0)
      {
        unint64_t v10 = *(const void **)(v8 + 8);
        size_t v11 = *(void *)(v8 + 16);
      }
      else
      {
        unint64_t v10 = (const void *)(v8 + 8);
        size_t v11 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
      if (v9 >= 0) {
        unint64_t v176 = *(unsigned __int8 *)(*(void *)&v194 + 31);
      }
      else {
        unint64_t v176 = *(void *)(*(void *)&v194 + 16);
      }
      if (v9 >= 0) {
        unint64_t v177 = (atomic_ullong *)(*(void *)&v194 + 8);
      }
      else {
        unint64_t v177 = *(atomic_ullong **)(*(void *)&v194 + 8);
      }
      if (v176 >= v11) {
        size_t v178 = v11;
      }
      else {
        size_t v178 = v176;
      }
      int v179 = memcmp(v10, v177, v178);
      BOOL v180 = v11 < v176;
      if (v179) {
        BOOL v180 = v179 < 0;
      }
      if (v180) {
        goto LABEL_324;
      }
      goto LABEL_40;
    case 3:
      unsigned int v12 = a1[12];
      if (v12 > 9) {
        goto LABEL_349;
      }
      if (v12 != 3) {
        goto LABEL_39;
      }
      uint64_t v13 = *(unint64_t **)(*(void *)a1 + 8);
      unsigned int v14 = *(double **)(*(void *)&v194 + 8);
      unint64_t v15 = (uint64_t)(*(void *)(*(void *)&v194 + 16) - (void)v14) >> 3;
      unint64_t v16 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v13) >> 3;
      if (*(unint64_t **)(*(void *)a1 + 16) == v13) {
        goto LABEL_27;
      }
      if (v16 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v13) >> 3;
      }
      atomic_ullong v18 = (uint64_t)(*(void *)(*(void *)&v194 + 16) - (void)v14) >> 3;
      break;
    case 4:
      unsigned int v5 = a1[12];
      if (v5 > 9) {
        goto LABEL_349;
      }
      if (v5 != 4)
      {
LABEL_39:
        turi::flexible_type_fail(0);
        goto LABEL_40;
      }
      if (!turi::flexible_type_impl::lt_operator::operator()(v4, (uint64_t)&v192, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)&v194 + 8)))goto LABEL_40; {
      goto LABEL_324;
      }
    case 5:
    case 8:
    case 9:
      if (a1[12] >= 0xAu) {
        goto LABEL_349;
      }
      goto LABEL_39;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 < (uint64_t)(*(void *)&v194 << 8) >> 8) {
            goto LABEL_324;
          }
          goto LABEL_40;
        case 1u:
          v4.n128_f64[0] = (double)v195 / 1000000.0 + (double)((uint64_t)(*(void *)&v194 << 8) >> 8);
          if (v4.n128_f64[0] > *(double *)a1) {
            goto LABEL_324;
          }
          goto LABEL_40;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_39;
        case 6u:
          uint64_t v129 = (uint64_t)(*(void *)a1 << 8) >> 8;
          if (v129 < (uint64_t)(*(void *)&v194 << 8) >> 8
            || v129 == (uint64_t)(*(void *)&v194 << 8) >> 8 && *((_DWORD *)a1 + 2) < v195)
          {
            goto LABEL_324;
          }
          goto LABEL_40;
        default:
          goto LABEL_349;
      }
    case 7:
      if (a1[12] <= 9u) {
        goto LABEL_39;
      }
      goto LABEL_349;
    default:
      goto LABEL_349;
  }
  while (v18)
  {
    v4.n128_u64[0] = *v13;
    if (*(double *)v13 > *v14) {
      break;
    }
    if (*(double *)v13 < *v14) {
      goto LABEL_324;
    }
    ++v14;
    ++v13;
    --v18;
    if (!--v17)
    {
LABEL_27:
      if (v16 < v15)
      {
LABEL_324:
        BOOL v19 = 1;
        goto LABEL_116;
      }
      break;
    }
  }
LABEL_40:
  switch(v196)
  {
    case 0:
      BOOL v19 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v20 = *(void *)a1 == *(void *)&v194;
          goto LABEL_98;
        case 1u:
          v4.n128_u64[0] = *(void *)a1;
          uint64_t v78 = *(void *)&v194;
          goto LABEL_224;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_116;
        case 6u:
          BOOL v20 = *(void *)&v194 == (uint64_t)(*(void *)a1 << 8) >> 8 && *((_DWORD *)a1 + 2) == 0;
          goto LABEL_98;
        default:
          goto LABEL_349;
      }
    case 1:
      BOOL v19 = 0;
      switch(a1[12])
      {
        case 0u:
          v4.n128_f64[0] = v194;
          uint64_t v78 = *(void *)a1;
LABEL_224:
          BOOL v20 = v4.n128_f64[0] == (double)v78;
          goto LABEL_98;
        case 1u:
          v4.n128_u64[0] = *(void *)a1;
          BOOL v19 = *(double *)a1 == v194;
          goto LABEL_116;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_116;
        case 6u:
          double v130 = v194;
          double v131 = (double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8);
          goto LABEL_227;
        default:
          goto LABEL_349;
      }
    case 2:
      unsigned int v63 = a1[12];
      if (v63 - 3 < 7 || v63 < 2) {
        goto LABEL_115;
      }
      if (v63 != 2) {
        goto LABEL_349;
      }
      uint64_t v65 = *(void *)a1;
      if (*(char *)(*(void *)a1 + 31) < 0) {
        size_t v66 = *(void *)(v65 + 16);
      }
      else {
        size_t v66 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
      if (*(char *)(*(void *)&v194 + 31) < 0) {
        atomic_ullong v181 = *(void *)(*(void *)&v194 + 16);
      }
      else {
        atomic_ullong v181 = *(unsigned __int8 *)(*(void *)&v194 + 31);
      }
      if (v66 != v181) {
        goto LABEL_115;
      }
      unsigned int v182 = (void *)(v65 + 8);
      if ((*(unsigned char *)(*(void *)a1 + 31) & 0x80) != 0) {
        unsigned int v182 = (void *)*v182;
      }
      char v183 = (atomic_ullong *)(*(void *)&v194 + 8);
      if ((*(unsigned char *)(*(void *)&v194 + 31) & 0x80) != 0) {
        char v183 = (atomic_ullong *)*v183;
      }
      if ((*(unsigned char *)(*(void *)a1 + 31) & 0x80) != 0)
      {
        BOOL v20 = memcmp(v182, v183, v66) == 0;
LABEL_98:
        BOOL v19 = v20;
      }
      else
      {
        if (!v66) {
          goto LABEL_324;
        }
        size_t v184 = v66 - 1;
        do
        {
          int v186 = *(unsigned __int8 *)v182;
          unsigned int v182 = (void *)((char *)v182 + 1);
          int v185 = v186;
          int v188 = *(unsigned __int8 *)v183;
          char v183 = (atomic_ullong *)((char *)v183 + 1);
          int v187 = v188;
          BOOL v7 = v184-- != 0;
          char v189 = v7;
          BOOL v19 = v185 == v187;
        }
        while (v185 == v187 && (v189 & 1) != 0);
      }
      goto LABEL_116;
    case 3:
      unsigned int v67 = a1[12];
      if (v67 > 9) {
        goto LABEL_349;
      }
      if (v67 != 3) {
        goto LABEL_115;
      }
      uint64_t v69 = *(unint64_t **)(*(void *)a1 + 8);
      uint64_t v68 = *(void **)(*(void *)a1 + 16);
      unint64_t v70 = v68 - v69;
      uint64_t v71 = *(double **)(*(void *)&v194 + 8);
      if (v70 != (uint64_t)(*(void *)(*(void *)&v194 + 16) - (void)v71) >> 3) {
        goto LABEL_115;
      }
      if (v68 == v69) {
        goto LABEL_324;
      }
      if (v70 <= 1) {
        uint64_t v72 = 1;
      }
      else {
        uint64_t v72 = v68 - v69;
      }
      v4.n128_u64[0] = *v69;
      if (*(double *)v69 != *v71) {
        goto LABEL_115;
      }
      unint64_t v73 = 0;
      uint64_t v74 = v71 + 1;
      uint64_t v75 = v69 + 1;
      while (v72 - 1 != v73)
      {
        v4.n128_u64[0] = v75[v73];
        double v76 = v74[v73++];
        if (v4.n128_f64[0] != v76) {
          goto LABEL_345;
        }
      }
      unint64_t v73 = v72;
LABEL_345:
      BOOL v19 = v73 >= v70;
      goto LABEL_116;
    case 4:
      unsigned int v21 = a1[12];
      if (v21 > 9) {
        goto LABEL_349;
      }
      if (v21 != 4) {
        goto LABEL_115;
      }
      int v22 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v192, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)&v194 + 8));
      goto LABEL_215;
    case 5:
      unsigned int v79 = a1[12];
      if (v79 > 9) {
        goto LABEL_349;
      }
      if (v79 != 5) {
        goto LABEL_115;
      }
      int v22 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v192, (uint64_t **)(*(void *)a1 + 8), (uint64_t **)(*(void *)&v194 + 8));
      goto LABEL_215;
    case 6:
      BOOL v19 = 0;
      switch(a1[12])
      {
        case 0u:
          BOOL v20 = *(void *)a1 == (uint64_t)(*(void *)&v194 << 8) >> 8 && v195 == 0;
          goto LABEL_98;
        case 1u:
          double v131 = *(double *)a1;
          double v130 = (double)v195 / 1000000.0 + (double)((uint64_t)(*(void *)&v194 << 8) >> 8);
LABEL_227:
          v4.n128_f64[0] = vabdd_f64(v131, v130);
          BOOL v19 = v4.n128_f64[0] < 0.0000005;
          goto LABEL_116;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_116;
        case 6u:
          BOOL v20 = ((*(void *)&v194 ^ *(void *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == v195;
          goto LABEL_98;
        default:
          goto LABEL_349;
      }
    case 7:
      unsigned int v77 = a1[12];
      if (v77 >= 0xA) {
        goto LABEL_349;
      }
      BOOL v20 = v77 == 7;
      goto LABEL_98;
    case 8:
      unsigned int v80 = a1[12];
      if (v80 < 8 || v80 == 9) {
        goto LABEL_115;
      }
      if (v80 != 8) {
        goto LABEL_349;
      }
      int v22 = turi::image_type::operator==(*(void *)a1 + 8, *(void *)&v194 + 8);
LABEL_215:
      BOOL v19 = v22;
      goto LABEL_116;
    case 9:
      unsigned int v23 = a1[12];
      if (v23 < 9) {
        goto LABEL_115;
      }
      if (v23 != 9) {
        goto LABEL_349;
      }
      double v24 = v194;
      uint64_t v25 = *(void **)a1;
      if (*(void *)&v194 == *(void *)a1) {
        goto LABEL_324;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v25 + 1), *(void *)&v194 + 8))
      {
LABEL_115:
        BOOL v19 = 0;
        goto LABEL_116;
      }
      uint64_t v27 = (char *)v25[3];
      uint64_t v26 = (char *)v25[4];
      uint64_t v28 = v26 - v27;
      if (v26 == v27) {
        goto LABEL_324;
      }
      if (!v25[1]) {
        goto LABEL_324;
      }
      uint64_t v29 = 1;
      do
      {
        uint64_t v30 = *(void *)v27;
        v27 += 8;
        v29 *= v30;
      }
      while (v27 != v26);
      if (!v29) {
        goto LABEL_324;
      }
      uint64_t v191 = 0;
      std::vector<unsigned long>::vector(&v192, v28 >> 3, &v191);
      uint64_t v31 = v192;
      uint64_t v32 = v193;
      uint64_t v33 = **(void **)(*(void *)&v24 + 8);
      uint64_t v34 = (char *)v193 - (char *)v192;
      unint64_t v35 = v193 - v192;
      unint64_t v36 = v35 - 1;
      if (v35 <= 1) {
        uint64_t v37 = 1;
      }
      else {
        uint64_t v37 = v193 - v192;
      }
      break;
    default:
      goto LABEL_349;
  }
  do
  {
    if (v32 == v31)
    {
      uint64_t v45 = 0;
      v4.n128_u64[0] = *(void *)(*(void *)v25[1] + 8 * v25[9]);
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v39 = (uint64_t *)v25[6];
      uint64_t v40 = v31;
      uint64_t v41 = v37;
      do
      {
        uint64_t v43 = (uint64_t)*v40++;
        uint64_t v42 = v43;
        uint64_t v44 = *v39++;
        v38 += v44 * v42;
        --v41;
      }
      while (v41);
      uint64_t v45 = 0;
      v4.n128_u64[0] = *(void *)(*(void *)v25[1] + 8 * (v25[9] + v38));
      int v46 = *(uint64_t **)(*(void *)&v24 + 48);
      int64_t v47 = v31;
      uint64_t v48 = v37;
      do
      {
        uint64_t v50 = (uint64_t)*v47++;
        uint64_t v49 = v50;
        uint64_t v51 = *v46++;
        v45 += v51 * v49;
        --v48;
      }
      while (v48);
    }
    double v52 = *(double *)(v33 + 8 * (*(void *)(*(void *)&v24 + 72) + v45));
    BOOL v19 = v4.n128_f64[0] == v52;
    if (v4.n128_f64[0] != v52) {
      break;
    }
    uint64_t v53 = v35;
    unint64_t v54 = v35 - 1;
    if (v34 >= 1)
    {
      uint64_t v55 = v25[3];
      unint64_t v56 = (unint64_t)v31[v36] + 1;
      v31[v36] = (void *)v56;
      if (v56 >= *(void *)(v55 + 8 * v36))
      {
        uint64_t v57 = v55 - 16;
        unint64_t v58 = v35;
        unint64_t v59 = (unint64_t *)((char *)v31 + (v34 & 0xFFFFFFFFFFFFFFF8) - 16);
        while (1)
        {
          unint64_t v60 = v58 - 1;
          v59[1] = 0;
          if ((uint64_t)(v58 - 1) <= 0) {
            break;
          }
          unint64_t v61 = *v59 + 1;
          *v59-- = v61;
          unint64_t v62 = *(void *)(v57 + 8 * v58--);
          if (v61 < v62)
          {
            unint64_t v54 = v60 - 1;
            uint64_t v53 = 1;
            goto LABEL_73;
          }
        }
        BOOL v19 = 1;
        break;
      }
      uint64_t v53 = 1;
      unint64_t v54 = v35 - 1;
    }
LABEL_73:
    ;
  }
  while (v53 && (v54 & 0x8000000000000000) == 0);
  if (v31)
  {
    std::string v193 = v31;
    operator delete(v31);
  }
LABEL_116:
  switch(v196)
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v194, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v82 = v194;
        if (v194 != 0.0)
        {
          if (*(char *)(*(void *)&v194 + 31) < 0) {
            operator delete(*(void **)(*(void *)&v194 + 8));
          }
          double v83 = v82;
          uint64_t v84 = 0x1012C404EF22A49;
          goto LABEL_147;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v194, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v91 = v194;
        if (v194 != 0.0)
        {
          double v92 = *(void **)(*(void *)&v194 + 8);
          if (v92)
          {
            *(void *)(*(void *)&v194 + 16) = v92;
            operator delete(v92);
          }
          double v83 = v91;
          uint64_t v84 = 0x1080C409938AC02;
          goto LABEL_147;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v194, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v85 = v194;
        if (v194 != 0.0)
        {
          atomic_ullong v192 = (void **)(*(void *)&v194 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v192);
          goto LABEL_142;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v194, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v85 = v194;
        if (v194 != 0.0)
        {
          atomic_ullong v192 = (void **)(*(void *)&v194 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v192);
LABEL_142:
          double v83 = v85;
          uint64_t v84 = 0x1020C405E66F15BLL;
          goto LABEL_147;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v194, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v93 = v194;
        if (v194 != 0.0)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v194 + 16));
          double v83 = v93;
          unsigned int v90 = -235920773;
          goto LABEL_146;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v194, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v86 = v194;
        if (v194 != 0.0)
        {
          double v87 = *(void **)(*(void *)&v194 + 48);
          if (v87)
          {
            *(void *)(*(void *)&v194 + 56) = v87;
            operator delete(v87);
          }
          uint64_t v88 = *(void **)(*(void *)&v86 + 24);
          if (v88)
          {
            *(void *)(*(void *)&v86 + 32) = v88;
            operator delete(v88);
          }
          uint64_t v89 = *(std::__shared_weak_count **)(*(void *)&v86 + 16);
          if (v89) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v89);
          }
          double v83 = v86;
          unsigned int v90 = 2071181815;
LABEL_146:
          uint64_t v84 = v90 | 0x1030C4000000000;
LABEL_147:
          MEMORY[0x22A614FA0](*(void *)&v83, v84, v4);
        }
      }
      break;
    default:
      break;
  }
  if (!v19)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 0;
    if (a1 != (unsigned __int8 *)a2)
    {
      *(void *)(a2 + 5) = *(void *)(a1 + 5);
      *(void *)a2 = *(void *)a1;
      int v98 = a1[12];
      *(unsigned char *)(a2 + 12) = v98;
      switch(v98)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
          break;
        default:
          return;
      }
    }
    return;
  }
  int64_t v94 = *(void *)a1;
  unsigned int v95 = a1[12];
  int v96 = *((_DWORD *)a1 + 2);
  unint64_t v97 = *(void *)a1;
  switch(v95)
  {
    case 0u:
      unint64_t v97 = -v94;
      goto LABEL_158;
    case 1u:
      unint64_t v97 = v94 ^ 0x8000000000000000;
LABEL_158:
      *(unsigned char *)(a2 + 12) = v95;
      *(void *)a2 = v97;
      *(_DWORD *)(a2 + 8) = v96;
      goto LABEL_232;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 8u:
    case 9u:
      atomic_fetch_add((atomic_ullong *volatile)v94, 1uLL);
      unint64_t v97 = v94;
      switch(v95)
      {
        case 2u:
          if (*(void *)v94 != 1) {
            operator new();
          }
          goto LABEL_168;
        case 3u:
          if (*(void *)v94 != 1) {
            operator new();
          }
          unint64_t v97 = v94;
          unsigned int v99 = *(double **)(v94 + 8);
          uint64_t v100 = *(void *)(v94 + 16) - (void)v99;
          if (!v100) {
            goto LABEL_197;
          }
          unint64_t v101 = v100 >> 3;
          if (v101 <= 1) {
            unint64_t v101 = 1;
          }
          do
          {
            v4.n128_f64[0] = -*v99;
            *v99++ = v4.n128_f64[0];
            --v101;
          }
          while (v101);
          goto LABEL_229;
        case 4u:
          if (*(void *)v94 != 1) {
            operator new();
          }
          goto LABEL_168;
        case 5u:
          if (*(void *)v94 != 1) {
            operator new();
          }
          goto LABEL_168;
        case 6u:
        case 7u:
          goto LABEL_228;
        case 8u:
          if (*(void *)v94 != 1) {
            operator new();
          }
LABEL_168:
          unint64_t v97 = v94;
          goto LABEL_228;
        case 9u:
          if (*(void *)v94 != 1) {
            operator new();
          }
          unint64_t v97 = v94;
          unint64_t v103 = *(uint64_t **)(v94 + 24);
          unint64_t v102 = *(uint64_t **)(v94 + 32);
          if (v102 == v103 || !*(void *)(v94 + 8))
          {
LABEL_197:
            *(unsigned char *)(a2 + 12) = v95;
            unsigned __int8 v127 = (unsigned __int8 *)(a2 + 12);
            *(void *)a2 = v97;
            *(_DWORD *)(a2 + 8) = v96;
            goto LABEL_231;
          }
          uint64_t v104 = 1;
          do
          {
            uint64_t v105 = *v103++;
            v104 *= v105;
          }
          while (v103 != v102);
          if (!v104) {
            goto LABEL_229;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v94 + 8));
          unint64_t v106 = (uint64_t)(*(void *)(v94 + 32) - *(void *)(v94 + 24)) >> 3;
          uint64_t v191 = 0;
          std::vector<unsigned long>::vector(&v192, v106, &v191);
          unint64_t v107 = v192;
          size_t v108 = v193;
          break;
        default:
          goto LABEL_349;
      }
      break;
    case 6u:
    case 7u:
LABEL_228:
      turi::flexible_type_fail(0);
      goto LABEL_229;
    default:
      goto LABEL_349;
  }
  while (1)
  {
    uint64_t v109 = 0;
    uint64_t v110 = (char *)v108 - (char *)v107;
    if (v110)
    {
      unint64_t v111 = v110 >> 3;
      unint64_t v112 = *(uint64_t **)(v97 + 48);
      if (v111 <= 1) {
        unint64_t v111 = 1;
      }
      do
      {
        uint64_t v114 = (uint64_t)*v107++;
        uint64_t v113 = v114;
        uint64_t v115 = *v112++;
        v109 += v115 * v113;
        --v111;
      }
      while (v111);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v97 + 8));
    uint64_t v116 = *(void *)(v97 + 72) + v109;
    uint64_t v117 = **(void **)(v97 + 8);
    v4.n128_f64[0] = -*(double *)(v117 + 8 * v116);
    *(void *)(v117 + 8 * v116) = v4.n128_u64[0];
    unint64_t v107 = v192;
    size_t v108 = v193;
    uint64_t v118 = v193 - v192;
    uint64_t v119 = v118 - 1;
    if ((char *)v193 - (char *)v192 < 1) {
      goto LABEL_193;
    }
    uint64_t v120 = *(void *)(v97 + 24);
    uint64_t v121 = (char *)v192[v119] + 1;
    v192[v119] = v121;
    if ((unint64_t)v121 >= *(void *)(v120 + 8 * v119)) {
      break;
    }
LABEL_192:
    uint64_t v118 = 1;
LABEL_193:
    if (v119 < 0 || !v118) {
      goto LABEL_195;
    }
  }
  uint64_t v122 = (unint64_t *)&v107[v118 - 2];
  uint64_t v123 = v120 - 16;
  while (1)
  {
    uint64_t v124 = v118 - 1;
    v122[1] = 0;
    if (v118 - 1 <= 0) {
      break;
    }
    unint64_t v125 = *v122 + 1;
    *v122-- = v125;
    unint64_t v126 = *(void *)(v123 + 8 * v118--);
    if (v125 < v126)
    {
      uint64_t v119 = v124 - 1;
      goto LABEL_192;
    }
  }
LABEL_195:
  if (v107)
  {
    std::string v193 = v107;
    operator delete(v107);
  }
LABEL_229:
  *(unsigned char *)(a2 + 12) = v95;
  unsigned __int8 v127 = (unsigned __int8 *)(a2 + 12);
  *(void *)a2 = v97;
  *(_DWORD *)(a2 + 8) = v96;
  if (v95 > 9)
  {
LABEL_232:
    unsigned int v132 = v95;
  }
  else
  {
    unsigned int v132 = v95;
    if (((1 << v95) & 0x33C) != 0)
    {
LABEL_231:
      atomic_fetch_add((atomic_ullong *volatile)v97, 1uLL);
      unsigned int v132 = *v127;
    }
  }
  switch(v132)
  {
    case 0u:
      unint64_t v133 = *(void *)a2 + 1;
      goto LABEL_269;
    case 1u:
      v4.n128_f64[0] = *(double *)a2 + 1.0;
      *(void *)a2 = v4.n128_u64[0];
      goto LABEL_278;
    case 2u:
      if (**(void **)a2 != 1) {
        operator new();
      }
      goto LABEL_277;
    case 3u:
      if (**(void **)a2 != 1) {
        operator new();
      }
      unint64_t v134 = *(double **)(*(void *)a2 + 8);
      uint64_t v135 = *(void *)(*(void *)a2 + 16) - (void)v134;
      if (v135)
      {
        unint64_t v136 = v135 >> 3;
        if (v136 <= 1) {
          unint64_t v136 = 1;
        }
        v4.n128_u64[0] = 1.0;
        do
        {
          double *v134 = *v134 + 1.0;
          ++v134;
          --v136;
        }
        while (v136);
      }
      goto LABEL_278;
    case 4u:
      if (**(void **)a2 != 1) {
        operator new();
      }
      goto LABEL_277;
    case 5u:
      if (**(void **)a2 != 1) {
        operator new();
      }
      goto LABEL_277;
    case 6u:
      unint64_t v133 = *(void *)a2 & 0xFF00000000000000 | (*(void *)a2 + 1) & 0xFFFFFFFFFFFFFFLL;
LABEL_269:
      *(void *)a2 = v133;
      goto LABEL_278;
    case 7u:
      goto LABEL_277;
    case 8u:
      if (**(void **)a2 != 1) {
        operator new();
      }
LABEL_277:
      turi::flexible_type_fail(0);
      goto LABEL_278;
    case 9u:
      if (**(void **)a2 != 1) {
        operator new();
      }
      atomic_ullong *volatile v137 = *(atomic_ullong *volatile *)a2;
      unint64_t v139 = *(uint64_t **)(*(void *)a2 + 24);
      uint64_t v138 = *(uint64_t **)(*(void *)a2 + 32);
      if (v138 == v139) {
        goto LABEL_278;
      }
      if (!v137[1]) {
        goto LABEL_278;
      }
      uint64_t v140 = 1;
      do
      {
        uint64_t v141 = *v139++;
        v140 *= v141;
      }
      while (v139 != v138);
      if (!v140) {
        goto LABEL_278;
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v137 + 1);
      unint64_t v142 = (v137[4] - v137[3]) >> 3;
      uint64_t v191 = 0;
      std::vector<unsigned long>::vector(&v192, v142, &v191);
      uint64_t v143 = v192;
      unint64_t v144 = v193;
      break;
    default:
      goto LABEL_349;
  }
  do
  {
    uint64_t v145 = 0;
    uint64_t v146 = (char *)v144 - (char *)v143;
    if (v146)
    {
      unint64_t v147 = v146 >> 3;
      uint64_t v148 = (uint64_t *)v137[6];
      if (v147 <= 1) {
        unint64_t v147 = 1;
      }
      do
      {
        uint64_t v150 = (uint64_t)*v143++;
        uint64_t v149 = v150;
        uint64_t v151 = *v148++;
        v145 += v151 * v149;
        --v147;
      }
      while (v147);
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v137 + 1);
    atomic_ullong v152 = v137[9] + v145;
    uint64_t v153 = *(void *)v137[1];
    v4.n128_f64[0] = *(double *)(v153 + 8 * v152) + 1.0;
    *(void *)(v153 + 8 * v152) = v4.n128_u64[0];
    uint64_t v143 = v192;
    unint64_t v144 = v193;
    uint64_t v154 = v193 - v192;
    uint64_t v155 = v154 - 1;
    if ((char *)v193 - (char *)v192 >= 1)
    {
      atomic_ullong v156 = v137[3];
      uint64_t v157 = (char *)v192[v155] + 1;
      v192[v155] = v157;
      if ((unint64_t)v157 >= *(void *)(v156 + 8 * v155))
      {
        unint64_t v158 = (unint64_t *)&v143[v154 - 2];
        atomic_ullong v159 = v156 - 16;
        while (1)
        {
          uint64_t v160 = v154 - 1;
          v158[1] = 0;
          if (v154 - 1 <= 0) {
            goto LABEL_265;
          }
          unint64_t v161 = *v158 + 1;
          *v158-- = v161;
          unint64_t v162 = *(void *)(v159 + 8 * v154--);
          if (v161 < v162)
          {
            uint64_t v155 = v160 - 1;
            break;
          }
        }
      }
      uint64_t v154 = 1;
    }
  }
  while ((v155 & 0x8000000000000000) == 0 && v154);
  if (!v143) {
    goto LABEL_278;
  }
LABEL_265:
  std::string v193 = v143;
  operator delete(v143);
LABEL_278:
  switch(v95)
  {
    case 2u:
      unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v97, 0xFFFFFFFFFFFFFFFFLL);
      if (v97 && add == 1)
      {
        if (*(char *)(v97 + 31) < 0) {
          operator delete(*(void **)(v97 + 8));
        }
        unint64_t v164 = v97;
        uint64_t v165 = 0x1012C404EF22A49;
        goto LABEL_309;
      }
      break;
    case 3u:
      unint64_t v172 = atomic_fetch_add((atomic_ullong *volatile)v97, 0xFFFFFFFFFFFFFFFFLL);
      if (v97 && v172 == 1)
      {
        uint64_t v173 = *(void **)(v97 + 8);
        if (v173)
        {
          *(void *)(v97 + 16) = v173;
          operator delete(v173);
        }
        unint64_t v164 = v97;
        uint64_t v165 = 0x1080C409938AC02;
        goto LABEL_309;
      }
      break;
    case 4u:
      unint64_t v166 = atomic_fetch_add((atomic_ullong *volatile)v97, 0xFFFFFFFFFFFFFFFFLL);
      if (v97 && v166 == 1)
      {
        atomic_ullong v192 = (void **)(v97 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v192);
        goto LABEL_304;
      }
      break;
    case 5u:
      unint64_t v174 = atomic_fetch_add((atomic_ullong *volatile)v97, 0xFFFFFFFFFFFFFFFFLL);
      if (v97 && v174 == 1)
      {
        atomic_ullong v192 = (void **)(v97 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v192);
LABEL_304:
        unint64_t v164 = v97;
        uint64_t v165 = 0x1020C405E66F15BLL;
        goto LABEL_309;
      }
      break;
    case 8u:
      unint64_t v175 = atomic_fetch_add((atomic_ullong *volatile)v97, 0xFFFFFFFFFFFFFFFFLL);
      if (v97 && v175 == 1)
      {
        boost::detail::shared_count::~shared_count((atomic_uint **)(v97 + 16));
        unint64_t v164 = v97;
        unsigned int v171 = -235920773;
        goto LABEL_308;
      }
      break;
    case 9u:
      unint64_t v167 = atomic_fetch_add((atomic_ullong *volatile)v97, 0xFFFFFFFFFFFFFFFFLL);
      if (v97 && v167 == 1)
      {
        unsigned int v168 = *(void **)(v97 + 48);
        if (v168)
        {
          *(void *)(v97 + 56) = v168;
          operator delete(v168);
        }
        unint64_t v169 = *(void **)(v97 + 24);
        if (v169)
        {
          *(void *)(v97 + 32) = v169;
          operator delete(v169);
        }
        uint64_t v170 = *(std::__shared_weak_count **)(v97 + 16);
        if (v170) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v170);
        }
        unint64_t v164 = v97;
        unsigned int v171 = 2071181815;
LABEL_308:
        uint64_t v165 = v171 | 0x1030C4000000000;
LABEL_309:
        MEMORY[0x22A614FA0](v164, v165, v4);
      }
      break;
    default:
      return;
  }
}

void sub_2244D3CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  uint64_t v18 = v16;
  MEMORY[0x22A614FA0](v18, 0x1012C404EF22A49);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v17, 0xFFFFFFFFFFFFFFFFLL);
  if (v17 && add == 1)
  {
    if (*(char *)(v17 + 31) < 0) {
      operator delete(*(void **)(v17 + 8));
    }
    MEMORY[0x22A614FA0](v17, 0x1012C404EF22A49);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::fast_classify(std::vector<turi::flexible_type> const&,std::string const&)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x40uLL);
  *(void *)int v2 = &unk_26D784390;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D784390;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1,std::allocator<turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised::supervised_learning_model_base::predict_topk(turi::ml_data const&,std::string const&,unsigned long)::$_1::operator()(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v255 = *MEMORY[0x263EF8340];
  int v211 = *(turi::supervised::supervised_learning_model_base **)(a1 + 32);
  unsigned int v6 = *(unint64_t **)a1;
  uint64_t v239 = 0;
  v238 = 0;
  unint64_t v7 = *v6;
  if (*v6)
  {
    if (v7 >> 61 || (unint64_t v8 = malloc_type_malloc(8 * v7, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v203 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v203, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    unsigned int v6 = *(unint64_t **)v5;
    v238 = v8;
  }
  uint64_t v239 = v7;
  unint64_t v9 = *v6;
  v234[0] = 0;
  long long v235 = 0u;
  long long v236 = 0u;
  unint64_t v237 = v9;
  turi::sframe::get_output_iterator(*(size_t **)(v5 + 8), a2, (uint64_t)v247);
  memset(&v233, 0, sizeof(v233));
  std::vector<std::pair<unsigned long,char const*>>::resize(&v233, **(void **)(v5 + 16));
  memset(v232, 0, sizeof(v232));
  std::vector<turi::flexible_type>::resize(v232, 3uLL);
  turi::ml_data::get_iterator(*(turi::ml_data **)(v5 + 24), a2, a3, (uint64_t)v218);
  if (v224 == v223)
  {
    uint64_t v10 = 0;
    int v214 = 0;
  }
  else
  {
    LOBYTE(v214) = 0;
    uint64_t v10 = 0;
    uint64_t v212 = v5;
    do
    {
      unint64_t v11 = *(void *)(*((void *)v211 + 47) + 64);
      unint64_t v12 = turi::supervised::supervised_learning_model_base::num_features(v211);
      uint64_t v13 = v226;
      unsigned int v14 = v227;
      if (v11 <= 3 * v12)
      {
        if (v227) {
          atomic_fetch_add_explicit(&v227->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v46 = v228;
        int v47 = v230;
        int64_t v48 = v239;
        uint64_t v49 = (char *)v238;
        if (v239 >= 0) {
          uint64_t v50 = v239;
        }
        else {
          uint64_t v50 = v239 + 1;
        }
        int64_t v51 = v50 & 0xFFFFFFFFFFFFFFFELL;
        if (v239 >= 2)
        {
          unint64_t v52 = 2;
          if (v51 > 2) {
            unint64_t v52 = v50 & 0xFFFFFFFFFFFFFFFELL;
          }
          bzero(v238, ((8 * v52 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v51 < v48) {
          bzero(&v49[16 * (v50 >> 1)], 8 * v48 - 16 * (v50 >> 1));
        }
        uint64_t v5 = v212;
        if (v47)
        {
          uint64_t v53 = *(void *)(v13 + 56);
          if (v53)
          {
            uint64_t v54 = 0;
            uint64_t v55 = 0;
            unint64_t v56 = (unint64_t *)(*(void *)(v13 + 96) + 8 * v46 + 8 * (*(unsigned char *)(v13 + 18) == 0));
            uint64_t v57 = *(void *)(v13 + 72);
            unint64_t v58 = v238;
            while (2)
            {
              uint64_t v59 = *(void *)(v57 + 16 * v54);
              unint64_t v60 = *(void *)(v59 + 64);
              switch(*(_DWORD *)(v59 + 24))
              {
                case 0:
                  if (v60) {
                    v58[v55] = *v56;
                  }
                  ++v56;
                  goto LABEL_83;
                case 1:
                  unint64_t v69 = *v56++;
                  unint64_t v68 = v69;
                  uint64_t v70 = v55 - 1;
                  if (v69 < v60 && v68 != 0) {
                    v58[v70 + v68] = 0x3FF0000000000000;
                  }
                  goto LABEL_97;
                case 2:
                  uint64_t v61 = *(void *)(v59 + 72);
                  if (!v61) {
                    goto LABEL_83;
                  }
                  uint64_t v62 = 0;
                  unint64_t v63 = 0;
                  uint64_t v64 = (char *)v238 + 8 * v55;
                  do
                  {
                    if (v63 < v60) {
                      *(void *)&v64[8 * v63] = v56[v63];
                    }
                    ++v63;
                    v62 -= 8;
                  }
                  while (v61 != v63);
                  goto LABEL_82;
                case 3:
                  uint64_t v73 = *v56++;
                  uint64_t v72 = v73;
                  uint64_t v70 = v55 - 1;
                  if (v73)
                  {
                    uint64_t v74 = v238;
                    do
                    {
                      unint64_t v75 = *v56;
                      if (*v56 < v60 && v75 != 0) {
                        v74[v70 + v75] = 0x3FF0000000000000;
                      }
                      ++v56;
                      --v72;
                    }
                    while (v72);
                  }
LABEL_97:
                  uint64_t v55 = v70 + v60;
                  goto LABEL_106;
                case 4:
                  unint64_t v79 = *v56;
                  unsigned int v77 = v56 + 1;
                  unint64_t v78 = v79;
                  if (v79)
                  {
                    unsigned int v80 = v238;
                    unint64_t v81 = v77;
                    do
                    {
                      unint64_t v83 = *v81;
                      v81 += 2;
                      unint64_t v82 = v83;
                      if (v83 < v60) {
                        v80[v82 + v55] = v77[1];
                      }
                      unsigned int v77 = v81;
                      --v78;
                    }
                    while (v78);
                  }
                  else
                  {
                    unint64_t v81 = v77;
                  }
                  v55 += v60;
                  unint64_t v56 = v81;
                  goto LABEL_106;
                case 7:
                  uint64_t v65 = *(void *)(v59 + 72);
                  if (!v65) {
                    goto LABEL_83;
                  }
                  uint64_t v62 = 0;
                  unint64_t v66 = 0;
                  unsigned int v67 = (char *)v238 + 8 * v55;
                  do
                  {
                    if (v66 < v60) {
                      *(void *)&v67[8 * v66] = v56[v66];
                    }
                    ++v66;
                    v62 -= 8;
                  }
                  while (v65 != v66);
LABEL_82:
                  unint64_t v56 = (unint64_t *)((char *)v56 - v62);
LABEL_83:
                  v55 += v60;
LABEL_106:
                  if (++v54 == v53) {
                    break;
                  }
                  continue;
                default:
                  goto LABEL_106;
              }
              break;
            }
          }
        }
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        *((void *)v238 + **(void **)v212 - 1) = 0x3FF0000000000000;
        uint64_t v44 = v211;
        (*(void (**)(std::string *__return_ptr, turi::supervised::supervised_learning_model_base *, void **, void))(*(void *)v211 + 88))(&v251, v211, &v238, *(void *)(v212 + 40));
        switch((char)v214)
        {
          case 2:
LABEL_110:
            if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
            {
              if (*(char *)(v10 + 31) < 0) {
                operator delete(*(void **)(v10 + 8));
              }
              uint64_t v84 = v10;
              uint64_t v85 = 0x1012C404EF22A49;
              goto LABEL_140;
            }
            break;
          case 3:
LABEL_127:
            if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
            {
              unsigned int v90 = *(void **)(v10 + 8);
              if (v90)
              {
                *(void *)(v10 + 16) = v90;
                operator delete(v90);
              }
              uint64_t v84 = v10;
              uint64_t v85 = 0x1080C409938AC02;
              goto LABEL_140;
            }
            break;
          case 4:
LABEL_115:
            if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
            {
              v240 = (void **)(v10 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v240);
              goto LABEL_135;
            }
            break;
          case 5:
LABEL_132:
            if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
            {
              v240 = (void **)(v10 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v240);
LABEL_135:
              uint64_t v84 = v10;
              uint64_t v85 = 0x1020C405E66F15BLL;
              goto LABEL_140;
            }
            break;
          case 8:
LABEL_136:
            if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v10 + 16));
              uint64_t v84 = v10;
              unsigned int v89 = -235920773;
              goto LABEL_139;
            }
            break;
          case 9:
LABEL_118:
            if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
            {
              double v86 = *(void **)(v10 + 48);
              if (v86)
              {
                *(void *)(v10 + 56) = v86;
                operator delete(v86);
              }
              double v87 = *(void **)(v10 + 24);
              if (v87)
              {
                *(void *)(v10 + 32) = v87;
                operator delete(v87);
              }
              uint64_t v88 = *(std::__shared_weak_count **)(v10 + 16);
              if (v88) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v88);
              }
              uint64_t v84 = v10;
              unsigned int v89 = 2071181815;
LABEL_139:
              uint64_t v85 = v89 | 0x1030C4000000000;
LABEL_140:
              MEMORY[0x22A614FA0](v84, v85);
            }
            break;
          default:
            break;
        }
      }
      else
      {
        if (v227) {
          atomic_fetch_add_explicit(&v227->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v210 = v14;
        *(void *)&long long v236 = 0;
        if (v230)
        {
          uint64_t v15 = *(void *)(v13 + 56);
          if (v15)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 0;
            uint64_t v18 = (uint64_t *)(*(void *)(v13 + 96) + 8 * v228 + 8 * (*(unsigned char *)(v13 + 18) == 0));
            uint64_t v213 = v10;
            do
            {
              uint64_t v19 = *(void *)(*(void *)(v13 + 72) + 16 * v16);
              unint64_t v20 = *(void *)(v19 + 64);
              switch(*(_DWORD *)(v19 + 24))
              {
                case 0:
                  uint64_t v21 = *v18++;
                  uint64_t v22 = v21;
                  if (v20)
                  {
                    v251.__r_.__value_.__r.__words[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v235, (int)v17, &v251) = v22;
                  }
                  goto LABEL_48;
                case 1:
                  unint64_t v33 = *v18++;
                  unint64_t v32 = v33;
                  if (v33 < v20 && v32 != 0)
                  {
                    v251.__r_.__value_.__r.__words[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v235, (int)v32 + (int)v17 - 1, &v251) = 0x3FF0000000000000;
                  }
                  uint64_t v17 = v17 + v20 - 1;
                  goto LABEL_49;
                case 2:
                  uint64_t v23 = *(void *)(v19 + 72);
                  if (!v23) {
                    goto LABEL_29;
                  }
                  uint64_t v24 = 0;
                  unint64_t v25 = 0;
                  uint64_t v26 = v17 << 32;
                  do
                  {
                    if (v25 < v20)
                    {
                      uint64_t v27 = v18[v25];
                      v251.__r_.__value_.__r.__words[0] = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v235, v26 >> 32, &v251) = v27;
                    }
                    ++v25;
                    v26 += 0x100000000;
                    v24 -= 8;
                  }
                  while (v23 != v25);
                  break;
                case 3:
                  uint64_t v36 = *v18++;
                  for (uint64_t i = v36; i; --i)
                  {
                    uint64_t v37 = *v18;
                    if (*v18 < v20 && v37 != 0)
                    {
                      v251.__r_.__value_.__r.__words[0] = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v235, (int)v37 + (int)v17 - 1, &v251) = 0x3FF0000000000000;
                    }
                    ++v18;
                  }
                  uint64_t v17 = v17 + v20 - 1;
                  goto LABEL_49;
                case 4:
                  uint64_t v40 = *v18++;
                  for (uint64_t j = v40; j; --j)
                  {
                    uint64_t v41 = *v18;
                    if (*v18 < v20)
                    {
                      uint64_t v42 = v18[1];
                      v251.__r_.__value_.__r.__words[0] = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v235, (int)v41 + (int)v17, &v251) = v42;
                    }
                    v18 += 2;
                  }
LABEL_48:
                  v17 += v20;
                  goto LABEL_49;
                case 7:
                  uint64_t v28 = *(void *)(v19 + 72);
                  if (!v28) {
                    goto LABEL_29;
                  }
                  uint64_t v24 = 0;
                  unint64_t v29 = 0;
                  uint64_t v30 = v17 << 32;
                  do
                  {
                    if (v29 < v20)
                    {
                      uint64_t v31 = v18[v29];
                      v251.__r_.__value_.__r.__words[0] = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v235, v30 >> 32, &v251) = v31;
                    }
                    ++v29;
                    v30 += 0x100000000;
                    v24 -= 8;
                  }
                  while (v28 != v29);
                  break;
                default:
                  goto LABEL_49;
              }
              uint64_t v18 = (uint64_t *)((char *)v18 - v24);
              uint64_t v5 = v212;
LABEL_29:
              v17 += v20;
              uint64_t v10 = v213;
LABEL_49:
              ++v16;
            }
            while (v16 != v15);
          }
        }
        if (v210) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v210);
        }
        uint64_t v43 = **(_DWORD **)v5 - 1;
        v251.__r_.__value_.__r.__words[0] = 0;
        *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v235, v43, &v251) = 0x3FF0000000000000;
        uint64_t v44 = v211;
        (*(void (**)(std::string *__return_ptr, turi::supervised::supervised_learning_model_base *, char *, void))(*(void *)v211 + 96))(&v251, v211, v234, *(void *)(v5 + 40));
        switch((char)v214)
        {
          case 2:
            goto LABEL_110;
          case 3:
            goto LABEL_127;
          case 4:
            goto LABEL_115;
          case 5:
            goto LABEL_132;
          case 8:
            goto LABEL_136;
          case 9:
            goto LABEL_118;
          default:
            break;
        }
      }
      uint64_t v10 = v251.__r_.__value_.__r.__words[0];
      int v91 = v251.__r_.__value_.__r.__words[1];
      int v214 = v251.__r_.__value_.__s.__data_[12];
      switch(v251.__r_.__value_.__s.__data_[12])
      {
        case 3:
          double v92 = (void *)(v251.__r_.__value_.__r.__words[0] + 8);
          double v93 = (void *)(v251.__r_.__value_.__r.__words[0] + 16);
          char v94 = 3;
          goto LABEL_145;
        case 4:
          double v92 = (void *)(v251.__r_.__value_.__r.__words[0] + 8);
          double v93 = (void *)(v251.__r_.__value_.__r.__words[0] + 16);
          char v94 = 4;
          goto LABEL_145;
        case 5:
          double v92 = (void *)(v251.__r_.__value_.__r.__words[0] + 8);
          double v93 = (void *)(v251.__r_.__value_.__r.__words[0] + 16);
          char v94 = 5;
LABEL_145:
          uint64_t v95 = (uint64_t)(*v93 - *v92) >> v94;
          goto LABEL_146;
        case 9:
          int v98 = *(uint64_t **)(v251.__r_.__value_.__r.__words[0] + 24);
          unint64_t v97 = *(uint64_t **)(v251.__r_.__value_.__r.__words[0] + 32);
          if (v97 == v98)
          {
            uint64_t v95 = 0;
          }
          else
          {
            uint64_t v95 = *(void *)(v251.__r_.__value_.__r.__words[0] + 8);
            if (v95)
            {
              uint64_t v95 = 1;
              do
              {
                uint64_t v99 = *v98++;
                v95 *= v99;
              }
              while (v98 != v97);
            }
          }
LABEL_146:
          if (v95 != **(void **)(v5 + 16)) {
            goto LABEL_170;
          }
          if (!v95)
          {
            p_first = (double *)&v233.__begin_->first;
            goto LABEL_226;
          }
LABEL_155:
          switch(v251.__r_.__value_.__s.__data_[12])
          {
            case 1:
            case 3:
            case 9:
              uint64_t v100 = 0;
              unint64_t v101 = 0;
              unint64_t v102 = (void *)v251.__r_.__value_.__r.__words[0];
              break;
            case 2:
              if (*(void *)v251.__r_.__value_.__l.__data_ != 1) {
                operator new();
              }
              goto LABEL_432;
            case 4:
              if (*(void *)v251.__r_.__value_.__l.__data_ != 1) {
                operator new();
              }
              goto LABEL_432;
            case 5:
              if (*(void *)v251.__r_.__value_.__l.__data_ != 1) {
                operator new();
              }
              goto LABEL_432;
            case 8:
              if (*(void *)v251.__r_.__value_.__l.__data_ != 1) {
                operator new();
              }
              goto LABEL_432;
            default:
              goto LABEL_432;
          }
          return;
        default:
          if (**(void **)(v5 + 16) == 1) {
            goto LABEL_155;
          }
LABEL_170:
          double v108 = 0.0;
          v45.n128_u64[0] = 0;
          if (**(unsigned char **)(v5 + 40) != 5)
          {
            double data = 0.0;
            switch(v251.__r_.__value_.__s.__data_[12])
            {
              case 0:
                double data = (double)(uint64_t)v251.__r_.__value_.__l.__data_;
                goto LABEL_198;
              case 1:
                double data = *(double *)&v251.__r_.__value_.__l.__data_;
                goto LABEL_198;
              case 2:
                size_t __idx = 0;
                uint64_t v110 = (char *)(v251.__r_.__value_.__r.__words[0] + 8);
                if (*(char *)(v251.__r_.__value_.__r.__words[0] + 31) < 0) {
                  uint64_t v110 = *(char **)(v251.__r_.__value_.__r.__words[0] + 8);
                }
                unint64_t v111 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v251, v110);
                double v112 = std::stod(v111, &__idx);
                if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v251.__r_.__value_.__l.__data_);
                }
                if (*(char *)(v10 + 31) < 0) {
                  uint64_t v113 = *(void *)(v10 + 16);
                }
                else {
                  uint64_t v113 = *(unsigned __int8 *)(v10 + 31);
                }
                if (__idx != v113)
                {
                  uint64_t v207 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  uint64_t v208 = std::string::append(&v245, " cannot be interpreted as a float");
                  long long v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
                  v251.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v209;
                  v208->__r_.__value_.__l.__size_ = 0;
                  v208->__r_.__value_.__r.__words[2] = 0;
                  v208->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v207, &v251);
                  __cxa_throw(v207, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                float v117 = v112;
                double data = v117;
                goto LABEL_198;
              case 3:
                memset(&v251, 0, sizeof(v251));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v251, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (v251.__r_.__value_.__r.__words[0])
                {
                  v251.__r_.__value_.__l.__size_ = v251.__r_.__value_.__r.__words[0];
                  operator delete(v251.__r_.__value_.__l.__data_);
                }
                goto LABEL_198;
              case 4:
                memset(&v251, 0, sizeof(v251));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v251, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
                goto LABEL_198;
              case 5:
                memset(&v251, 0, sizeof(v251));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v251, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
                goto LABEL_198;
              case 6:
                double data = (double)SLODWORD(v251.__r_.__value_.__r.__words[1]) / 1000000.0
                     + (double)((uint64_t)(v251.__r_.__value_.__r.__words[0] << 8) >> 8);
                goto LABEL_198;
              case 7:
                goto LABEL_198;
              case 8:
                uint64_t v114 = *(atomic_uint **)(v251.__r_.__value_.__r.__words[0] + 16);
                v240 = *(void ***)(v251.__r_.__value_.__r.__words[0] + 8);
                int v241 = v114;
                if (v114) {
                  atomic_fetch_add_explicit(v114 + 2, 1u, memory_order_relaxed);
                }
                long long v115 = *(_OWORD *)(v10 + 24);
                long long v116 = *(_OWORD *)(v10 + 56);
                long long v243 = *(_OWORD *)(v10 + 40);
                long long v244 = v116;
                long long v242 = v115;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v241);
                goto LABEL_198;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v251, v251.__r_.__value_.__r.__words[0] + 8);
                turi::flexible_type_fail(0);
                if (v253)
                {
                  uint64_t v254 = v253;
                  operator delete(v253);
                }
                if (v251.__r_.__value_.__r.__words[2])
                {
                  std::string::size_type v252 = v251.__r_.__value_.__r.__words[2];
                  operator delete((void *)v251.__r_.__value_.__r.__words[2]);
                }
                if (v251.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v251.__r_.__value_.__l.__size_);
                }
LABEL_198:
                v45.n128_f64[0] = 1.0 - data;
                break;
              default:
                goto LABEL_432;
            }
          }
          std::vector<std::pair<unsigned long, const char *>>::pointer begin = v233.__begin_;
          v233.__begin_->first = 0;
          begin->second = (const char *)v45.n128_u64[0];
          switch(v214)
          {
            case 0:
              double v108 = (double)v10;
              goto LABEL_225;
            case 1:
              double v108 = *(double *)&v10;
              goto LABEL_225;
            case 2:
              size_t __idx = 0;
              uint64_t v119 = (char *)(v10 + 8);
              if (*(char *)(v10 + 31) < 0) {
                uint64_t v119 = *(char **)(v10 + 8);
              }
              uint64_t v120 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v251, v119);
              v45.n128_f64[0] = std::stod(v120, &__idx);
              double v121 = v45.n128_f64[0];
              if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v251.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v10 + 31) < 0) {
                uint64_t v122 = *(void *)(v10 + 16);
              }
              else {
                uint64_t v122 = *(unsigned __int8 *)(v10 + 31);
              }
              if (__idx != v122)
              {
                uint64_t v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                uint64_t v205 = std::string::append(&v245, " cannot be interpreted as a float");
                long long v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
                v251.__r_.__value_.__r.__words[2] = v205->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v206;
                v205->__r_.__value_.__l.__size_ = 0;
                v205->__r_.__value_.__r.__words[2] = 0;
                v205->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v204, &v251);
                __cxa_throw(v204, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              v45.n128_f32[0] = v121;
              double v108 = v45.n128_f32[0];
              goto LABEL_225;
            case 3:
              memset(&v251, 0, sizeof(v251));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v251, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (v251.__r_.__value_.__r.__words[0])
              {
                v251.__r_.__value_.__l.__size_ = v251.__r_.__value_.__r.__words[0];
                operator delete(v251.__r_.__value_.__l.__data_);
              }
              goto LABEL_225;
            case 4:
              memset(&v251, 0, sizeof(v251));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v251, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
              goto LABEL_225;
            case 5:
              memset(&v251, 0, sizeof(v251));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v251, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
              goto LABEL_225;
            case 6:
              v45.n128_f64[0] = (double)(v10 << 8 >> 8);
              double v108 = (double)v91 / 1000000.0 + v45.n128_f64[0];
              goto LABEL_225;
            case 7:
              goto LABEL_225;
            case 8:
              uint64_t v123 = *(atomic_uint **)(v10 + 16);
              v240 = *(void ***)(v10 + 8);
              int v241 = v123;
              if (v123) {
                atomic_fetch_add_explicit(v123 + 2, 1u, memory_order_relaxed);
              }
              long long v124 = *(_OWORD *)(v10 + 24);
              long long v125 = *(_OWORD *)(v10 + 56);
              long long v243 = *(_OWORD *)(v10 + 40);
              long long v244 = v125;
              long long v242 = v124;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v241);
              goto LABEL_225;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&v251, v10 + 8);
              turi::flexible_type_fail(0);
              if (v253)
              {
                uint64_t v254 = v253;
                operator delete(v253);
              }
              if (v251.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v252 = v251.__r_.__value_.__r.__words[2];
                operator delete((void *)v251.__r_.__value_.__r.__words[2]);
              }
              if (v251.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v251.__r_.__value_.__l.__size_);
              }
LABEL_225:
              p_first = (double *)&v233.__begin_->first;
              v233.__begin_[1].first = 1;
              p_first[3] = v108;
              goto LABEL_226;
            default:
              goto LABEL_432;
          }
      }
      do
      {
        if (v214 == 1)
        {
          uint64_t v104 = (const char *)v102;
          if (v101)
          {
LABEL_432:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
          }
        }
        else
        {
          if (v214 == 3)
          {
            if (*v102 != 1) {
              operator new();
            }
            unint64_t v103 = v102;
            uint64_t v105 = v102 + 1;
            unint64_t v106 = v101;
          }
          else
          {
            if (*v102 != 1) {
              operator new();
            }
            unint64_t v103 = v102;
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v102 + 1);
            uint64_t v105 = (void *)v102[1];
            unint64_t v106 = v102[9] + v101;
          }
          uint64_t v104 = *(const char **)(*v105 + 8 * v106);
          unint64_t v102 = v103;
        }
        p_first = (double *)&v233.__begin_->first;
        unint64_t v107 = &v233.__begin_[v100];
        v107->first = v101;
        v107->second = v104;
        ++v101;
        ++v100;
      }
      while (v101 < **(void **)(v5 + 16));
      uint64_t v10 = (uint64_t)v102;
LABEL_226:
      unint64_t v126 = *(void **)(v5 + 48);
      unsigned __int8 v127 = &p_first[2 * *v126 - 2];
      uint64_t v216 = 8;
      uint64_t v217 = 8;
      if (v127 != (double *)v233.__end_)
      {
        v45.n128_f64[0] = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,boost::_bi::bind_t<BOOL,boost::_bi::greater,boost::_bi::list2<boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<1>>>,boost::_bi::bind_t<double const&,boost::_mfi::dm<double,std::pair<unsigned long,double>>,boost::_bi::list1<boost::arg<2>>>>> &,std::__wrap_iter<std::pair<unsigned long,double>*>>(p_first, v127, (double *)&v233.__end_->first, (uint64_t)v215, v45.n128_f64[0]);
        unint64_t v126 = *(void **)(v5 + 48);
      }
      if (*v126)
      {
        uint64_t v128 = 0;
        unint64_t v129 = 0;
        do
        {
          uint64_t v130 = v224;
          uint64_t v131 = v231;
          uint64_t v132 = v232[0];
          switch(*(unsigned char *)(v232[0] + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v232[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v133 = *(atomic_uint ***)v132;
                if (!*(void *)v132) {
                  goto LABEL_262;
                }
                if (*((char *)v133 + 31) < 0) {
                  operator delete(v133[1]);
                }
                unint64_t v134 = v133;
                uint64_t v135 = 0x1012C404EF22A49;
                goto LABEL_261;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v232[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v142 = *(atomic_uint ***)v132;
                if (!*(void *)v132) {
                  goto LABEL_262;
                }
                uint64_t v143 = v142[1];
                if (v143)
                {
                  v142[2] = v143;
                  operator delete(v143);
                }
                unint64_t v134 = v142;
                uint64_t v135 = 0x1080C409938AC02;
                goto LABEL_261;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v232[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v136 = *(atomic_uint ***)v132;
                if (!*(void *)v132) {
                  goto LABEL_262;
                }
                v251.__r_.__value_.__r.__words[0] = (std::string::size_type)(v136 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
                goto LABEL_256;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v232[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v136 = *(atomic_uint ***)v132;
                if (!*(void *)v132) {
                  goto LABEL_262;
                }
                v251.__r_.__value_.__r.__words[0] = (std::string::size_type)(v136 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
LABEL_256:
                unint64_t v134 = v136;
                uint64_t v135 = 0x1020C405E66F15BLL;
                goto LABEL_261;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v232[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v144 = *(atomic_uint ***)v132;
                if (!*(void *)v132) {
                  goto LABEL_262;
                }
                boost::detail::shared_count::~shared_count(v144 + 2);
                unint64_t v134 = v144;
                unsigned int v141 = -235920773;
                goto LABEL_260;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v232[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v137 = *(atomic_uint ***)v132;
                if (*(void *)v132)
                {
                  uint64_t v138 = v137[6];
                  if (v138)
                  {
                    v137[7] = v138;
                    operator delete(v138);
                  }
                  unint64_t v139 = v137[3];
                  if (v139)
                  {
                    v137[4] = v139;
                    operator delete(v139);
                  }
                  uint64_t v140 = (std::__shared_weak_count *)v137[2];
                  if (v140) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v140);
                  }
                  unint64_t v134 = v137;
                  unsigned int v141 = 2071181815;
LABEL_260:
                  uint64_t v135 = v141 | 0x1030C4000000000;
LABEL_261:
                  MEMORY[0x22A614FA0](v134, v135, v45);
                }
LABEL_262:
                *(void *)uint64_t v132 = 0;
              }
              break;
            default:
              break;
          }
          *(_DWORD *)(v132 + 8) = 0;
          *(unsigned char *)(v132 + 12) = 0;
          *(void *)uint64_t v132 = v130 - v131;
          unint64_t v145 = *(void *)(*(void *)(*(void *)(*((void *)v44 + 47) + 24) + 32) + 80)
               + 16 * v233.__begin_[v128].first;
          uint64_t v146 = v232[0];
          uint64_t v147 = v232[0] + 16;
          if (v145 != v232[0] + 16)
          {
            switch(*(unsigned char *)(v232[0] + 28))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v147, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v148 = *(atomic_ullong *volatile *)v147;
                  if (!*(void *)v147) {
                    goto LABEL_296;
                  }
                  if (*((char *)v148 + 31) < 0) {
                    operator delete((void *)v148[1]);
                  }
                  atomic_ullong *volatile v149 = v148;
                  uint64_t v150 = 0x1012C404EF22A49;
                  goto LABEL_295;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v147, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v157 = *(atomic_ullong *volatile *)v147;
                  if (!*(void *)v147) {
                    goto LABEL_296;
                  }
                  unint64_t v158 = (void *)v157[1];
                  if (v158)
                  {
                    v157[2] = (atomic_ullong)v158;
                    operator delete(v158);
                  }
                  atomic_ullong *volatile v149 = v157;
                  uint64_t v150 = 0x1080C409938AC02;
                  goto LABEL_295;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v147, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v151 = *(atomic_ullong *volatile *)v147;
                  if (!*(void *)v147) {
                    goto LABEL_296;
                  }
                  v251.__r_.__value_.__r.__words[0] = (std::string::size_type)(v151 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
                  goto LABEL_290;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v147, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v151 = *(atomic_ullong *volatile *)v147;
                  if (!*(void *)v147) {
                    goto LABEL_296;
                  }
                  v251.__r_.__value_.__r.__words[0] = (std::string::size_type)(v151 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
LABEL_290:
                  atomic_ullong *volatile v149 = v151;
                  uint64_t v150 = 0x1020C405E66F15BLL;
                  goto LABEL_295;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v147, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v159 = *(atomic_ullong *volatile *)v147;
                  if (!*(void *)v147) {
                    goto LABEL_296;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v159 + 2);
                  atomic_ullong *volatile v149 = v159;
                  unsigned int v156 = -235920773;
                  goto LABEL_294;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v147, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v152 = *(atomic_ullong *volatile *)v147;
                  if (*(void *)v147)
                  {
                    uint64_t v153 = (void *)v152[6];
                    if (v153)
                    {
                      v152[7] = (atomic_ullong)v153;
                      operator delete(v153);
                    }
                    uint64_t v154 = (void *)v152[3];
                    if (v154)
                    {
                      v152[4] = (atomic_ullong)v154;
                      operator delete(v154);
                    }
                    uint64_t v155 = (std::__shared_weak_count *)v152[2];
                    if (v155) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v155);
                    }
                    atomic_ullong *volatile v149 = v152;
                    unsigned int v156 = 2071181815;
LABEL_294:
                    uint64_t v150 = v156 | 0x1030C4000000000;
LABEL_295:
                    MEMORY[0x22A614FA0](v149, v150, v45);
                  }
LABEL_296:
                  *(void *)uint64_t v147 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v160 = *(void *)v145;
            *(void *)(v147 + 5) = *(void *)(v145 + 5);
            *(void *)uint64_t v147 = v160;
            LODWORD(v160) = *(unsigned __int8 *)(v145 + 12);
            *(unsigned char *)(v146 + 28) = v160;
            BOOL v161 = v160 > 9;
            int v162 = (1 << v160) & 0x33C;
            if (!v161 && v162 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v147, 1uLL);
            }
          }
          if (**(unsigned char **)(v5 + 40) == 6)
          {
            uint64_t v164 = v232[0];
            switch(*(unsigned char *)(v232[0] + 44))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v165 = *(void *)(v164 + 32);
                  if (!v165) {
                    goto LABEL_362;
                  }
                  if (*(char *)(v165 + 31) < 0) {
                    operator delete(*(void **)(v165 + 8));
                  }
                  unint64_t v166 = (void *)v165;
                  uint64_t v167 = 0x1012C404EF22A49;
                  goto LABEL_361;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  int v185 = *(void **)(v164 + 32);
                  if (!v185) {
                    goto LABEL_362;
                  }
                  int v186 = (void *)v185[1];
                  if (v186)
                  {
                    v185[2] = v186;
                    operator delete(v186);
                  }
                  unint64_t v166 = v185;
                  uint64_t v167 = 0x1080C409938AC02;
                  goto LABEL_361;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v173 = *(void **)(v164 + 32);
                  if (!v173) {
                    goto LABEL_362;
                  }
                  v251.__r_.__value_.__r.__words[0] = (std::string::size_type)(v173 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
                  goto LABEL_352;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v173 = *(void **)(v164 + 32);
                  if (!v173) {
                    goto LABEL_362;
                  }
                  v251.__r_.__value_.__r.__words[0] = (std::string::size_type)(v173 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
LABEL_352:
                  unint64_t v166 = v173;
                  uint64_t v167 = 0x1020C405E66F15BLL;
                  goto LABEL_361;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v189 = *(void *)(v164 + 32);
                  if (!v189) {
                    goto LABEL_362;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v189 + 16));
                  unint64_t v166 = (void *)v189;
                  unsigned int v179 = -235920773;
                  goto LABEL_360;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  unint64_t v175 = *(void **)(v164 + 32);
                  if (v175)
                  {
                    unint64_t v176 = (void *)v175[6];
                    if (v176)
                    {
                      v175[7] = v176;
                      operator delete(v176);
                    }
                    unint64_t v177 = (void *)v175[3];
                    if (v177)
                    {
                      v175[4] = v177;
                      operator delete(v177);
                    }
                    size_t v178 = (std::__shared_weak_count *)v175[2];
                    if (v178) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v178);
                    }
                    unint64_t v166 = v175;
                    unsigned int v179 = 2071181815;
LABEL_360:
                    uint64_t v167 = v179 | 0x1030C4000000000;
LABEL_361:
                    MEMORY[0x22A614FA0](v166, v167, v45);
                  }
LABEL_362:
                  *(void *)(v164 + 32) = 0;
                }
                break;
              default:
                break;
            }
            *(_DWORD *)(v164 + 40) = 0;
            *(unsigned char *)(v164 + 44) = 0;
            *(void *)(v164 + 32) = v129;
          }
          else
          {
            std::vector<std::pair<unsigned long, const char *>>::pointer v168 = v233.__begin_;
            uint64_t v169 = v232[0];
            switch(*(unsigned char *)(v232[0] + 44))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v170 = *(void *)(v169 + 32);
                  if (!v170) {
                    goto LABEL_369;
                  }
                  if (*(char *)(v170 + 31) < 0) {
                    operator delete(*(void **)(v170 + 8));
                  }
                  unsigned int v171 = (void *)v170;
                  uint64_t v172 = 0x1012C404EF22A49;
                  goto LABEL_368;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  int v187 = *(void **)(v169 + 32);
                  if (!v187) {
                    goto LABEL_369;
                  }
                  int v188 = (void *)v187[1];
                  if (v188)
                  {
                    v187[2] = v188;
                    operator delete(v188);
                  }
                  unsigned int v171 = v187;
                  uint64_t v172 = 0x1080C409938AC02;
                  goto LABEL_368;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  unint64_t v174 = *(void **)(v169 + 32);
                  if (!v174) {
                    goto LABEL_369;
                  }
                  v251.__r_.__value_.__r.__words[0] = (std::string::size_type)(v174 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
                  goto LABEL_356;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  unint64_t v174 = *(void **)(v169 + 32);
                  if (!v174) {
                    goto LABEL_369;
                  }
                  v251.__r_.__value_.__r.__words[0] = (std::string::size_type)(v174 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
LABEL_356:
                  unsigned int v171 = v174;
                  uint64_t v172 = 0x1020C405E66F15BLL;
                  goto LABEL_368;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v190 = *(void *)(v169 + 32);
                  if (!v190) {
                    goto LABEL_369;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v190 + 16));
                  unsigned int v171 = (void *)v190;
                  unsigned int v184 = -235920773;
                  goto LABEL_367;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v232[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  BOOL v180 = *(void **)(v169 + 32);
                  if (v180)
                  {
                    atomic_ullong v181 = (void *)v180[6];
                    if (v181)
                    {
                      v180[7] = v181;
                      operator delete(v181);
                    }
                    unsigned int v182 = (void *)v180[3];
                    if (v182)
                    {
                      v180[4] = v182;
                      operator delete(v182);
                    }
                    char v183 = (std::__shared_weak_count *)v180[2];
                    if (v183) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v183);
                    }
                    unsigned int v171 = v180;
                    unsigned int v184 = 2071181815;
LABEL_367:
                    uint64_t v172 = v184 | 0x1030C4000000000;
LABEL_368:
                    MEMORY[0x22A614FA0](v171, v172, v45);
                  }
LABEL_369:
                  *(void *)(v169 + 32) = 0;
                }
                break;
              default:
                break;
            }
            *(void *)(v169 + 32) = 0;
            *(_DWORD *)(v169 + 40) = 0;
            *(unsigned char *)(v169 + 44) = 1;
            v45.n128_u64[0] = (unint64_t)v168[v128].second;
            *(void *)(v169 + 32) = v45.n128_u64[0];
          }
          if (!v248) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)v248 + 48))(v248, v232, v45);
          ++v129;
          ++v128;
        }
        while (v129 < **(void **)(v5 + 48));
      }
      if (v230 | v220)
      {
        uint64_t v191 = (uint64_t *)(*(void *)(v226 + 96) + 8 * v228);
        if (v221) {
          uint64_t v191 = &v222;
        }
        v228 += *v191;
      }
      uint64_t v192 = v224 + 1;
      uint64_t v193 = ++v224 - v219 * v225;
      uint64_t v229 = v193;
      if (v193 == v219 && v192 != v223) {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v218);
      }
    }
    while (v224 != v223);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v218);
  v218[0] = (void **)v232;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v218);
  if (v233.__begin_)
  {
    v233.__end_ = v233.__begin_;
    operator delete(v233.__begin_);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v250);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v249);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v247);
  switch(v214)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
      {
        if (*(char *)(v10 + 31) < 0) {
          operator delete(*(void **)(v10 + 8));
        }
        uint64_t v195 = v10;
        uint64_t v196 = 0x1012C404EF22A49;
        goto LABEL_416;
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
      {
        uint64_t v201 = *(void **)(v10 + 8);
        if (v201)
        {
          *(void *)(v10 + 16) = v201;
          operator delete(v201);
        }
        uint64_t v195 = v10;
        uint64_t v196 = 0x1080C409938AC02;
        goto LABEL_416;
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
      {
        v218[0] = (void **)(v10 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v218);
        goto LABEL_411;
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
      {
        v218[0] = (void **)(v10 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v218);
LABEL_411:
        uint64_t v195 = v10;
        uint64_t v196 = 0x1020C405E66F15BLL;
        goto LABEL_416;
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
      {
        boost::detail::shared_count::~shared_count((atomic_uint **)(v10 + 16));
        uint64_t v195 = v10;
        unsigned int v200 = -235920773;
        goto LABEL_415;
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10)
      {
        uint64_t v197 = *(void **)(v10 + 48);
        if (v197)
        {
          *(void *)(v10 + 56) = v197;
          operator delete(v197);
        }
        int v198 = *(void **)(v10 + 24);
        if (v198)
        {
          *(void *)(v10 + 32) = v198;
          operator delete(v198);
        }
        int v199 = *(std::__shared_weak_count **)(v10 + 16);
        if (v199) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v199);
        }
        uint64_t v195 = v10;
        unsigned int v200 = 2071181815;
LABEL_415:
        uint64_t v196 = v200 | 0x1030C4000000000;
LABEL_416:
        MEMORY[0x22A614FA0](v195, v196);
      }
      break;
    default:
      break;
  }
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v235);
  free(v238);
}

void sub_2244D65FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v75 - 185) < 0) {
    operator delete(*(void **)(v75 - 208));
  }
  if (SLOBYTE(STACK[0x2A7]) < 0)
  {
    operator delete((void *)STACK[0x290]);
    if ((v73 & 1) == 0)
    {
LABEL_8:
      turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)&a24);
      a24 = (uint64_t)&a69;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
      unsigned int v77 = a72;
      if (a72)
      {
        STACK[0x200] = (unint64_t)a72;
        operator delete(v77);
      }
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](&STACK[0x2F0]);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](&STACK[0x2D0]);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&STACK[0x2B0]);
      if (atomic_fetch_add((atomic_ullong *volatile)v74, 0xFFFFFFFFFFFFFFFFLL) == 1 && v74)
      {
        if (*(char *)(v74 + 31) < 0) {
          operator delete(*(void **)(v74 + 8));
        }
        MEMORY[0x22A614FA0](v74, 0x1012C404EF22A49);
      }
      Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(a18);
      free((void *)STACK[0x240]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v72);
  goto LABEL_8;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x28uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v9;
  uint64_t v17 = *a4;
  void v16[2] = 0;
  *((_DWORD *)v16 + 6) = 0;
  *((unsigned char *)v16 + 28) = 0;
  uint64_t v18 = *v17;
  *(void *)((char *)v16 + 21) = *(uint64_t *)((char *)v17 + 5);
  void v16[2] = v18;
  *((unsigned char *)v16 + 28) = *((unsigned char *)v17 + 12);
  *((unsigned char *)v17 + 12) = 0;
  void v16[4] = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    void *v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_2244D6E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::set(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::map<unsigned long,turi::flexible_type>>(a2, a1);
}

void sub_2244D6EE0(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<9>::set<std::map<unsigned long,turi::flexible_type>>(uint64_t a1, void *a2)
{
  v56[2] = *(void ***)MEMORY[0x263EF8340];
  long long v50 = 0uLL;
  unint64_t v51 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v50, a2[2]);
  unsigned int v6 = (void *)*a2;
  unint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    while (2)
    {
      memset(v53, 0, 13);
      turi::flexible_type_internals::ft_resolver<3>::set<unsigned long const&>((uint64_t)v53, (atomic_ullong **)v5 + 4);
      memset(v56, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v56, v5 + 5);
      *(atomic_ullong **)&v54[5] = *(atomic_ullong **)((char *)v53 + 5);
      *(atomic_ullong **)uint64_t v54 = v53[0];
      v54[12] = BYTE4(v53[1]);
      BYTE4(v53[1]) = 0;
      *(void ***)&v55[5] = *(void ***)((char *)v56 + 5);
      *(void ***)uint64_t v55 = v56[0];
      v55[12] = BYTE4(v56[1]);
      BYTE4(v56[1]) = 0;
      uint64_t v7 = *((void *)&v50 + 1);
      if (*((void *)&v50 + 1) >= v51)
      {
        uint64_t v10 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v50, (uint64_t *)v54);
      }
      else
      {
        **((void **)&v50 + 1) = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 12) = 0;
        uint64_t v8 = *(void *)v54;
        *(void *)(v7 + 5) = *(void *)&v54[5];
        *(void *)uint64_t v7 = v8;
        *(unsigned char *)(v7 + 12) = v54[12];
        v54[12] = 0;
        *(void *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(unsigned char *)(v7 + 28) = 0;
        uint64_t v9 = *(void *)v55;
        *(void *)(v7 + 21) = *(void *)&v55[5];
        *(void *)(v7 + 16) = v9;
        *(unsigned char *)(v7 + 28) = v55[12];
        v55[12] = 0;
        uint64_t v10 = v7 + 32;
      }
      *((void *)&v50 + 1) = v10;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v54);
      switch(BYTE4(v56[1]))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v56[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          uint8x8_t v11 = v56[0];
          if (!v56[0]) {
            goto LABEL_37;
          }
          if (*((char *)v56[0] + 31) < 0) {
            operator delete(v56[0][1]);
          }
          unint64_t v12 = v11;
          uint64_t v13 = 0x1012C404EF22A49;
          goto LABEL_36;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v56[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          float v20 = v56[0];
          if (!v56[0]) {
            goto LABEL_37;
          }
          BOOL v21 = v56[0][1];
          if (v21)
          {
            v56[0][2] = v21;
            operator delete(v21);
          }
          unint64_t v12 = v20;
          uint64_t v13 = 0x1080C409938AC02;
          goto LABEL_36;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v56[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          unsigned int v14 = v56[0];
          if (!v56[0]) {
            goto LABEL_37;
          }
          unint64_t v52 = v56[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v52);
          goto LABEL_31;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v56[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          unsigned int v14 = v56[0];
          if (!v56[0]) {
            goto LABEL_37;
          }
          unint64_t v52 = v56[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v52);
LABEL_31:
          unint64_t v12 = v14;
          uint64_t v13 = 0x1020C405E66F15BLL;
          goto LABEL_36;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v56[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          unint64_t v22 = v56[0];
          if (!v56[0]) {
            goto LABEL_37;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v56[0] + 2);
          unint64_t v12 = v22;
          unsigned int v19 = -235920773;
          goto LABEL_35;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v56[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_37;
          }
          unint64_t v15 = v56[0];
          if (!v56[0]) {
            goto LABEL_37;
          }
          uint64_t v16 = v56[0][6];
          if (v16)
          {
            v56[0][7] = v16;
            operator delete(v16);
          }
          uint64_t v17 = v15[3];
          if (v17)
          {
            void v15[4] = v17;
            operator delete(v17);
          }
          uint64_t v18 = (std::__shared_weak_count *)v15[2];
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          unint64_t v12 = v15;
          unsigned int v19 = 2071181815;
LABEL_35:
          uint64_t v13 = v19 | 0x1030C4000000000;
LABEL_36:
          MEMORY[0x22A614FA0](v12, v13);
LABEL_37:
          switch(BYTE4(v53[1]))
          {
            case 2:
              if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              unint64_t v23 = v53[0];
              if (!v53[0]) {
                goto LABEL_69;
              }
              if (*((char *)v53[0] + 31) < 0) {
                operator delete(*((void **)v53[0] + 1));
              }
              size_t v24 = v23;
              uint64_t v25 = 0x1012C404EF22A49;
              goto LABEL_68;
            case 3:
              if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              unint64_t v32 = v53[0];
              if (!v53[0]) {
                goto LABEL_69;
              }
              unint64_t v33 = (void *)v53[0][1];
              if (v33)
              {
                v53[0][2] = (atomic_ullong)v33;
                operator delete(v33);
              }
              size_t v24 = v32;
              uint64_t v25 = 0x1080C409938AC02;
              goto LABEL_68;
            case 4:
              if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              unint64_t v26 = v53[0];
              if (!v53[0]) {
                goto LABEL_69;
              }
              v56[0] = (void **)(v53[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v56);
              goto LABEL_63;
            case 5:
              if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              unint64_t v26 = v53[0];
              if (!v53[0]) {
                goto LABEL_69;
              }
              v56[0] = (void **)(v53[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v56);
LABEL_63:
              size_t v24 = v26;
              uint64_t v25 = 0x1020C405E66F15BLL;
              goto LABEL_68;
            case 8:
              if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              uint64_t v34 = v53[0];
              if (!v53[0]) {
                goto LABEL_69;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v53[0] + 2);
              size_t v24 = v34;
              unsigned int v31 = -235920773;
              goto LABEL_67;
            case 9:
              if (atomic_fetch_add(v53[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_69;
              }
              uint64_t v27 = v53[0];
              if (!v53[0]) {
                goto LABEL_69;
              }
              uint64_t v28 = (void *)v53[0][6];
              if (v28)
              {
                v53[0][7] = (atomic_ullong)v28;
                operator delete(v28);
              }
              char v29 = (void *)v27[3];
              if (v29)
              {
                v27[4] = (atomic_ullong)v29;
                operator delete(v29);
              }
              uint64_t v30 = (std::__shared_weak_count *)v27[2];
              if (v30) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v30);
              }
              size_t v24 = v27;
              unsigned int v31 = 2071181815;
LABEL_67:
              uint64_t v25 = v31 | 0x1030C4000000000;
LABEL_68:
              MEMORY[0x22A614FA0](v24, v25);
LABEL_69:
              unint64_t v35 = (void *)v5[1];
              if (v35)
              {
                do
                {
                  uint64_t v36 = v35;
                  unint64_t v35 = (void *)*v35;
                }
                while (v35);
              }
              else
              {
                do
                {
                  uint64_t v36 = (void *)v5[2];
                  BOOL v37 = *v36 == (void)v5;
                  uint64_t v5 = v36;
                }
                while (!v37);
              }
              uint64_t v5 = v36;
              if (v36 == v4) {
                goto LABEL_75;
              }
              continue;
            default:
              goto LABEL_69;
          }
        default:
          goto LABEL_37;
      }
    }
  }
LABEL_75:
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      if (*((char *)v38 + 31) < 0) {
        operator delete((void *)v38[1]);
      }
      atomic_ullong *volatile v39 = v38;
      uint64_t v40 = 0x1012C404EF22A49;
      goto LABEL_106;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      int64_t v48 = (void *)v47[1];
      if (v48)
      {
        v47[2] = (atomic_ullong)v48;
        operator delete(v48);
      }
      atomic_ullong *volatile v39 = v47;
      uint64_t v40 = 0x1080C409938AC02;
      goto LABEL_106;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      *(void *)uint64_t v54 = v41 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
      goto LABEL_101;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      *(void *)uint64_t v54 = v41 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
LABEL_101:
      atomic_ullong *volatile v39 = v41;
      uint64_t v40 = 0x1020C405E66F15BLL;
      goto LABEL_106;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      atomic_ullong *volatile v49 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v49 + 2);
      atomic_ullong *volatile v39 = v49;
      unsigned int v46 = -235920773;
      goto LABEL_105;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_108;
      }
      atomic_ullong *volatile v42 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_107;
      }
      uint64_t v43 = (void *)v42[6];
      if (v43)
      {
        v42[7] = (atomic_ullong)v43;
        operator delete(v43);
      }
      uint64_t v44 = (void *)v42[3];
      if (v44)
      {
        v42[4] = (atomic_ullong)v44;
        operator delete(v44);
      }
      __n128 v45 = (std::__shared_weak_count *)v42[2];
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      atomic_ullong *volatile v39 = v42;
      unsigned int v46 = 2071181815;
LABEL_105:
      uint64_t v40 = v46 | 0x1030C4000000000;
LABEL_106:
      MEMORY[0x22A614FA0](v39, v40);
LABEL_107:
      *(void *)a1 = 0;
LABEL_108:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 5;
      operator new();
    default:
      goto LABEL_108;
  }
}

void sub_2244D7A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  MEMORY[0x22A614FA0](v16, 0x1012C404EF22A49);
  a16 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>>,std::reverse_iterator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>*>,std::reverse_iterator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>*>,std::reverse_iterator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>>,std::reverse_iterator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>*>,std::reverse_iterator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>*>,std::reverse_iterator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>>,std::reverse_iterator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>>,std::reverse_iterator<std::shared_ptr<turi::evaluation::supervised_evaluation_interface>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x50uLL);
  *(void *)int v2 = &unk_26D784410;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D784410;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
}

uint64_t std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0,std::allocator<turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised::supervised_learning_model_base::evaluate(turi::ml_data const&,std::string const&,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v394 = *MEMORY[0x263EF8340];
  v344 = *(void **)(a1 + 56);
  double v387 = 0.0;
  int v388 = 0;
  char v389 = 0;
  memset(v386, 0, 13);
  memset(v385, 0, 13);
  uint64_t v6 = *(_DWORD **)a1;
  v353 = 0;
  uint64_t v354 = 0;
  unint64_t v7 = *(void *)v6;
  if (*(void *)v6)
  {
    if (v7 >> 61 || (uint64_t v8 = malloc_type_malloc(8 * v7, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v342 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v342, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    uint64_t v6 = *(_DWORD **)v5;
    v353 = v8;
  }
  uint64_t v354 = v7;
  uint64_t v9 = *(void *)v6;
  char v349 = 0;
  long long v350 = 0u;
  long long v351 = 0u;
  uint64_t v352 = v9;
  uint64_t v382 = 0;
  v383[3] = 0;
  v384[3] = 0;
  uint64_t v378 = 0;
  v379[3] = 0;
  v380[3] = 0;
  if (**(unsigned char **)(v5 + 8))
  {
    (*(void (**)(void ***__return_ptr))(***(void ***)(v5 + 16) + 32))(v362);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::operator=[abi:ne180100](v381, (uint64_t)v362);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::operator=[abi:ne180100](v383, (uint64_t)v363);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::operator=[abi:ne180100](v384, (uint64_t)v364);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v364);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v363);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v362);
    (*(void (**)(void ***__return_ptr))(***(void ***)(v5 + 24) + 32))(v362);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::operator=[abi:ne180100](v377, (uint64_t)v362);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::operator=[abi:ne180100](v379, (uint64_t)v363);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::operator=[abi:ne180100](v380, (uint64_t)v364);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v364);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v363);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v362);
  }
  turi::ml_data::get_iterator(*(turi::ml_data **)(v5 + 32), a2, a3, (uint64_t)v362);
  if (v370 == v369)
  {
LABEL_8:
    turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v362);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v380);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v379);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v377);
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v384);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v383);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v381);
    Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v350);
    free(v353);
    switch(BYTE4(v385[1]))
    {
      case 2:
        if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v10 = v385[0];
          if (v385[0])
          {
            if (*((char *)v385[0] + 31) < 0) {
              operator delete(*((void **)v385[0] + 1));
            }
            uint8x8_t v11 = v10;
            uint64_t v12 = 0x1012C404EF22A49;
            goto LABEL_671;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::vector<std::string> v308 = v385[0];
          if (v385[0])
          {
            v309 = (void *)v385[0][1];
            if (v309)
            {
              v385[0][2] = (atomic_ullong)v309;
              operator delete(v309);
            }
            uint8x8_t v11 = v308;
            uint64_t v12 = 0x1080C409938AC02;
            goto LABEL_671;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v302 = v385[0];
          if (v385[0])
          {
            v362[0] = (void **)(v385[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v362);
            goto LABEL_666;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v302 = v385[0];
          if (v385[0])
          {
            v362[0] = (void **)(v385[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v362);
LABEL_666:
            uint8x8_t v11 = v302;
            uint64_t v12 = 0x1020C405E66F15BLL;
            goto LABEL_671;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v310 = v385[0];
          if (v385[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v385[0] + 2);
            uint8x8_t v11 = v310;
            unsigned int v307 = -235920773;
            goto LABEL_670;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v303 = v385[0];
          if (v385[0])
          {
            uint64_t v304 = (void *)v385[0][6];
            if (v304)
            {
              v385[0][7] = (atomic_ullong)v304;
              operator delete(v304);
            }
            v305 = (void *)v303[3];
            if (v305)
            {
              v303[4] = (atomic_ullong)v305;
              operator delete(v305);
            }
            unint64_t v306 = (std::__shared_weak_count *)v303[2];
            if (v306) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v306);
            }
            uint8x8_t v11 = v303;
            unsigned int v307 = 2071181815;
LABEL_670:
            uint64_t v12 = v307 | 0x1030C4000000000;
LABEL_671:
            MEMORY[0x22A614FA0](v11, v12);
          }
        }
        break;
      default:
        break;
    }
    switch(BYTE4(v386[1]))
    {
      case 2:
        if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string v311 = v386[0];
          if (v386[0])
          {
            if (*((char *)v386[0] + 31) < 0) {
              operator delete(*((void **)v386[0] + 1));
            }
            uint64_t v312 = v311;
            uint64_t v313 = 0x1012C404EF22A49;
            goto LABEL_703;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v320 = v386[0];
          if (v386[0])
          {
            v321 = (void *)v386[0][1];
            if (v321)
            {
              v386[0][2] = (atomic_ullong)v321;
              operator delete(v321);
            }
            uint64_t v312 = v320;
            uint64_t v313 = 0x1080C409938AC02;
            goto LABEL_703;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v314 = v386[0];
          if (v386[0])
          {
            v362[0] = (void **)(v386[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v362);
            goto LABEL_698;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v314 = v386[0];
          if (v386[0])
          {
            v362[0] = (void **)(v386[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v362);
LABEL_698:
            uint64_t v312 = v314;
            uint64_t v313 = 0x1020C405E66F15BLL;
            goto LABEL_703;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v322 = v386[0];
          if (v386[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v386[0] + 2);
            uint64_t v312 = v322;
            unsigned int v319 = -235920773;
            goto LABEL_702;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string v315 = v386[0];
          if (v386[0])
          {
            v316 = (void *)v386[0][6];
            if (v316)
            {
              v386[0][7] = (atomic_ullong)v316;
              operator delete(v316);
            }
            v317 = (void *)v315[3];
            if (v317)
            {
              v315[4] = (atomic_ullong)v317;
              operator delete(v317);
            }
            long long v318 = (std::__shared_weak_count *)v315[2];
            if (v318) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v318);
            }
            uint64_t v312 = v315;
            unsigned int v319 = 2071181815;
LABEL_702:
            uint64_t v313 = v319 | 0x1030C4000000000;
LABEL_703:
            MEMORY[0x22A614FA0](v312, v313);
          }
        }
        break;
      default:
        break;
    }
    switch(v389)
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v323 = v387;
          if (v387 != 0.0)
          {
            if (*(char *)(*(void *)&v387 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v387 + 8));
            }
            double v324 = v323;
            uint64_t v325 = 0x1012C404EF22A49;
            goto LABEL_735;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v332 = v387;
          if (v387 != 0.0)
          {
            v333 = *(void **)(*(void *)&v387 + 8);
            if (v333)
            {
              *(void *)(*(void *)&v387 + 16) = v333;
              operator delete(v333);
            }
            double v324 = v332;
            uint64_t v325 = 0x1080C409938AC02;
            goto LABEL_735;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v326 = v387;
          if (v387 != 0.0)
          {
            v362[0] = (void **)(*(void *)&v387 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v362);
            goto LABEL_730;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v326 = v387;
          if (v387 != 0.0)
          {
            v362[0] = (void **)(*(void *)&v387 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v362);
LABEL_730:
            double v324 = v326;
            uint64_t v325 = 0x1020C405E66F15BLL;
            goto LABEL_735;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v334 = v387;
          if (v387 != 0.0)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v387 + 16));
            double v324 = v334;
            unsigned int v331 = -235920773;
            goto LABEL_734;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v327 = v387;
          if (v387 != 0.0)
          {
            v328 = *(void **)(*(void *)&v387 + 48);
            if (v328)
            {
              *(void *)(*(void *)&v387 + 56) = v328;
              operator delete(v328);
            }
            uint64_t v329 = *(void **)(*(void *)&v327 + 24);
            if (v329)
            {
              *(void *)(*(void *)&v327 + 32) = v329;
              operator delete(v329);
            }
            uint64_t v330 = *(std::__shared_weak_count **)(*(void *)&v327 + 16);
            if (v330) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v330);
            }
            double v324 = v327;
            unsigned int v331 = 2071181815;
LABEL_734:
            uint64_t v325 = v331 | 0x1030C4000000000;
LABEL_735:
            MEMORY[0x22A614FA0](*(void *)&v324, v325);
          }
        }
        break;
      default:
        return;
    }
    return;
  }
  uint64_t v343 = a2;
  uint64_t v345 = v5;
  while (1)
  {
    uint64_t v13 = v372;
    v346 = v373;
    if (!**(unsigned char **)(v5 + 40))
    {
      if (**(unsigned char **)(v5 + 48))
      {
        if (v373) {
          atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v55 = v374;
        int v56 = v376;
        unint64_t v58 = (char *)v353;
        int64_t v57 = v354;
        if (v354 >= 0) {
          uint64_t v59 = v354;
        }
        else {
          uint64_t v59 = v354 + 1;
        }
        int64_t v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
        if (v354 >= 2)
        {
          unint64_t v61 = 2;
          if (v60 > 2) {
            unint64_t v61 = v59 & 0xFFFFFFFFFFFFFFFELL;
          }
          bzero(v353, ((8 * v61 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if (v60 < v57) {
          bzero(&v58[16 * (v59 >> 1)], 8 * v57 - 16 * (v59 >> 1));
        }
        uint64_t v5 = v345;
        if (v56)
        {
          uint64_t v62 = *(void *)(v13 + 56);
          if (v62)
          {
            uint64_t v63 = 0;
            uint64_t v64 = 0;
            uint64_t v65 = (unint64_t *)(*(void *)(v13 + 96) + 8 * v55 + 8 * (*(unsigned char *)(v13 + 18) == 0));
            uint64_t v66 = *(void *)(v13 + 72);
            unsigned int v67 = v353;
            while (2)
            {
              uint64_t v68 = *(void *)(v66 + 16 * v63);
              unint64_t v69 = *(void *)(v68 + 64);
              switch(*(_DWORD *)(v68 + 24))
              {
                case 0:
                  if (v69) {
                    v67[v64] = *v65;
                  }
                  ++v65;
                  goto LABEL_110;
                case 1:
                  unint64_t v78 = *v65++;
                  unint64_t v77 = v78;
                  uint64_t v79 = v64 - 1;
                  if (v78 < v69 && v77 != 0) {
                    v67[v79 + v77] = 0x3FF0000000000000;
                  }
                  goto LABEL_124;
                case 2:
                  uint64_t v70 = *(void *)(v68 + 72);
                  if (!v70) {
                    goto LABEL_110;
                  }
                  uint64_t v71 = 0;
                  unint64_t v72 = 0;
                  int v73 = (char *)v353 + 8 * v64;
                  do
                  {
                    if (v72 < v69) {
                      *(void *)&v73[8 * v72] = v65[v72];
                    }
                    ++v72;
                    v71 -= 8;
                  }
                  while (v70 != v72);
                  goto LABEL_109;
                case 3:
                  uint64_t v82 = *v65++;
                  uint64_t v81 = v82;
                  uint64_t v79 = v64 - 1;
                  if (v82)
                  {
                    unint64_t v83 = v353;
                    do
                    {
                      unint64_t v84 = *v65;
                      if (*v65 < v69 && v84 != 0) {
                        v83[v79 + v84] = 0x3FF0000000000000;
                      }
                      ++v65;
                      --v81;
                    }
                    while (v81);
                  }
LABEL_124:
                  uint64_t v64 = v79 + v69;
                  goto LABEL_133;
                case 4:
                  unint64_t v88 = *v65;
                  double v86 = v65 + 1;
                  unint64_t v87 = v88;
                  if (v88)
                  {
                    unsigned int v89 = v353;
                    unsigned int v90 = v86;
                    do
                    {
                      unint64_t v92 = *v90;
                      v90 += 2;
                      unint64_t v91 = v92;
                      if (v92 < v69) {
                        v89[v91 + v64] = v86[1];
                      }
                      double v86 = v90;
                      --v87;
                    }
                    while (v87);
                  }
                  else
                  {
                    unsigned int v90 = v86;
                  }
                  v64 += v69;
                  uint64_t v65 = v90;
                  goto LABEL_133;
                case 7:
                  uint64_t v74 = *(void *)(v68 + 72);
                  if (!v74) {
                    goto LABEL_110;
                  }
                  uint64_t v71 = 0;
                  unint64_t v75 = 0;
                  double v76 = (char *)v353 + 8 * v64;
                  do
                  {
                    if (v75 < v69) {
                      *(void *)&v76[8 * v75] = v65[v75];
                    }
                    ++v75;
                    v71 -= 8;
                  }
                  while (v74 != v75);
LABEL_109:
                  uint64_t v65 = (unint64_t *)((char *)v65 - v71);
LABEL_110:
                  v64 += v69;
LABEL_133:
                  if (++v63 == v62) {
                    break;
                  }
                  continue;
                default:
                  goto LABEL_133;
              }
              break;
            }
          }
        }
        if (v346) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v346);
        }
        *((void *)v353 + **(void **)v345 - 1) = 0x3FF0000000000000;
        v360.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(std::string *__return_ptr))(*v344 + 88))(&v390);
        switch(BYTE4(v386[1]))
        {
          case 2:
            goto LABEL_226;
          case 3:
            goto LABEL_271;
          case 4:
            goto LABEL_259;
          case 5:
            goto LABEL_276;
          case 8:
            goto LABEL_280;
          case 9:
            goto LABEL_262;
          default:
            break;
        }
      }
      else
      {
        if (v373) {
          atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&long long v351 = 0;
        if (v376)
        {
          uint64_t v125 = *(void *)(v13 + 56);
          if (v125)
          {
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = (uint64_t *)(*(void *)(v13 + 96) + 8 * v374 + 8 * (*(unsigned char *)(v13 + 18) == 0));
            while (2)
            {
              uint64_t v129 = *(void *)(*(void *)(v13 + 72) + 16 * v126);
              unint64_t v130 = *(void *)(v129 + 64);
              switch(*(_DWORD *)(v129 + 24))
              {
                case 0:
                  uint64_t v131 = *v128++;
                  uint64_t v132 = v131;
                  if (v130)
                  {
                    v390.__r_.__value_.__r.__words[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, (int)v127, &v390) = v132;
                  }
                  goto LABEL_221;
                case 1:
                  unint64_t v143 = *v128++;
                  unint64_t v142 = v143;
                  if (v143 < v130 && v142 != 0)
                  {
                    v390.__r_.__value_.__r.__words[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, (int)v142 + (int)v127 - 1, &v390) = 0x3FF0000000000000;
                  }
                  goto LABEL_216;
                case 2:
                  uint64_t v133 = *(void *)(v129 + 72);
                  if (!v133) {
                    goto LABEL_221;
                  }
                  uint64_t v134 = 0;
                  unint64_t v135 = 0;
                  uint64_t v136 = v127 << 32;
                  do
                  {
                    if (v135 < v130)
                    {
                      uint64_t v137 = v128[v135];
                      v390.__r_.__value_.__r.__words[0] = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, v136 >> 32, &v390) = v137;
                    }
                    ++v135;
                    v136 += 0x100000000;
                    v134 -= 8;
                  }
                  while (v133 != v135);
                  goto LABEL_203;
                case 3:
                  uint64_t v146 = *v128++;
                  for (uint64_t i = v146; i; --i)
                  {
                    uint64_t v147 = *v128;
                    if (*v128 < v130 && v147 != 0)
                    {
                      v390.__r_.__value_.__r.__words[0] = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, (int)v147 + (int)v127 - 1, &v390) = 0x3FF0000000000000;
                    }
                    ++v128;
                  }
LABEL_216:
                  uint64_t v127 = v127 + v130 - 1;
                  goto LABEL_222;
                case 4:
                  uint64_t v150 = *v128++;
                  for (uint64_t j = v150; j; --j)
                  {
                    uint64_t v151 = *v128;
                    if (*v128 < v130)
                    {
                      uint64_t v152 = v128[1];
                      v390.__r_.__value_.__r.__words[0] = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, (int)v151 + (int)v127, &v390) = v152;
                    }
                    v128 += 2;
                  }
                  goto LABEL_221;
                case 7:
                  uint64_t v138 = *(void *)(v129 + 72);
                  if (!v138) {
                    goto LABEL_221;
                  }
                  uint64_t v134 = 0;
                  unint64_t v139 = 0;
                  uint64_t v140 = v127 << 32;
                  do
                  {
                    if (v139 < v130)
                    {
                      uint64_t v141 = v128[v139];
                      v390.__r_.__value_.__r.__words[0] = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, v140 >> 32, &v390) = v141;
                    }
                    ++v139;
                    v140 += 0x100000000;
                    v134 -= 8;
                  }
                  while (v138 != v139);
LABEL_203:
                  uint64_t v128 = (uint64_t *)((char *)v128 - v134);
                  a2 = v343;
                  uint64_t v5 = v345;
LABEL_221:
                  v127 += v130;
LABEL_222:
                  if (++v126 == v125) {
                    break;
                  }
                  continue;
                default:
                  goto LABEL_222;
              }
              break;
            }
          }
        }
        if (v346) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v346);
        }
        uint64_t v153 = **(_DWORD **)v5 - 1;
        v390.__r_.__value_.__r.__words[0] = 0;
        *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, v153, &v390) = 0x3FF0000000000000;
        v360.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(std::string *__return_ptr))(*v344 + 96))(&v390);
        switch(BYTE4(v386[1]))
        {
          case 2:
LABEL_226:
            if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v154 = v386[0];
              if (v386[0])
              {
                if (*((char *)v386[0] + 31) < 0) {
                  operator delete(*((void **)v386[0] + 1));
                }
                uint64_t v155 = v154;
                uint64_t v156 = 0x1012C404EF22A49;
                goto LABEL_284;
              }
            }
            break;
          case 3:
LABEL_271:
            if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v172 = v386[0];
              if (v386[0])
              {
                uint64_t v173 = (void *)v386[0][1];
                if (v173)
                {
                  v386[0][2] = (atomic_ullong)v173;
                  operator delete(v173);
                }
                uint64_t v155 = v172;
                uint64_t v156 = 0x1080C409938AC02;
                goto LABEL_284;
              }
            }
            break;
          case 4:
LABEL_259:
            if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v166 = v386[0];
              if (v386[0])
              {
                v355 = (void **)(v386[0] + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v355);
                goto LABEL_279;
              }
            }
            break;
          case 5:
LABEL_276:
            if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v166 = v386[0];
              if (v386[0])
              {
                v355 = (void **)(v386[0] + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v355);
LABEL_279:
                uint64_t v155 = v166;
                uint64_t v156 = 0x1020C405E66F15BLL;
                goto LABEL_284;
              }
            }
            break;
          case 8:
LABEL_280:
            if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v174 = v386[0];
              if (v386[0])
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v386[0] + 2);
                uint64_t v155 = v174;
                unsigned int v171 = -235920773;
                goto LABEL_283;
              }
            }
            break;
          case 9:
LABEL_262:
            if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v167 = v386[0];
              if (v386[0])
              {
                std::vector<std::pair<unsigned long, const char *>>::pointer v168 = (void *)v386[0][6];
                if (v168)
                {
                  v386[0][7] = (atomic_ullong)v168;
                  operator delete(v168);
                }
                uint64_t v169 = (void *)v167[3];
                if (v169)
                {
                  v167[4] = (atomic_ullong)v169;
                  operator delete(v169);
                }
                uint64_t v170 = (std::__shared_weak_count *)v167[2];
                if (v170) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v170);
                }
                uint64_t v155 = v167;
                unsigned int v171 = 2071181815;
LABEL_283:
                uint64_t v156 = v171 | 0x1030C4000000000;
LABEL_284:
                MEMORY[0x22A614FA0](v155, v156);
              }
            }
            break;
          default:
            break;
        }
      }
      *(atomic_ullong **)((char *)v386 + 5) = *(atomic_ullong **)((char *)v390.__r_.__value_.__r.__words + 5);
      v386[0] = (atomic_ullong *)v390.__r_.__value_.__l.__data_;
      BYTE4(v386[1]) = v390.__r_.__value_.__s.__data_[12];
      *(double *)&uint64_t v175 = 1.0;
      if (*(unsigned char *)(v372 + 16) && !*(unsigned char *)(v372 + 17))
      {
        unint64_t v176 = (void *)(v372 + 24);
        if (!*(unsigned char *)(v372 + 18)) {
          unint64_t v176 = (void *)(*(void *)(v372 + 96) + 8 * v374);
        }
        uint64_t v175 = *(uint64_t *)(*(void *)(v372 + 96) + 8 * v374 + 8 * *v176 - 8);
      }
      char v177 = 1;
      switch(v389)
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_322;
          }
          double v178 = v387;
          if (v387 == 0.0) {
            goto LABEL_322;
          }
          if (*(char *)(*(void *)&v387 + 31) < 0) {
            operator delete(*(void **)(*(void *)&v387 + 8));
          }
          double v179 = v178;
          uint64_t v180 = 0x1012C404EF22A49;
          goto LABEL_321;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_322;
          }
          double v187 = v387;
          if (v387 == 0.0) {
            goto LABEL_322;
          }
          int v188 = *(void **)(*(void *)&v387 + 8);
          if (v188)
          {
            *(void *)(*(void *)&v387 + 16) = v188;
            operator delete(v188);
          }
          double v179 = v187;
          uint64_t v180 = 0x1080C409938AC02;
          goto LABEL_321;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_322;
          }
          double v181 = v387;
          if (v387 == 0.0) {
            goto LABEL_322;
          }
          v390.__r_.__value_.__r.__words[0] = *(void *)&v387 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
          goto LABEL_316;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_322;
          }
          double v181 = v387;
          if (v387 == 0.0) {
            goto LABEL_322;
          }
          v390.__r_.__value_.__r.__words[0] = *(void *)&v387 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
LABEL_316:
          double v179 = v181;
          uint64_t v180 = 0x1020C405E66F15BLL;
          goto LABEL_321;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_322;
          }
          double v189 = v387;
          if (v387 == 0.0) {
            goto LABEL_322;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v387 + 16));
          double v179 = v189;
          unsigned int v186 = -235920773;
          goto LABEL_320;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_322;
          }
          double v182 = v387;
          if (v387 == 0.0) {
            goto LABEL_322;
          }
          char v183 = *(void **)(*(void *)&v387 + 48);
          if (v183)
          {
            *(void *)(*(void *)&v387 + 56) = v183;
            operator delete(v183);
          }
          unsigned int v184 = *(void **)(*(void *)&v182 + 24);
          if (v184)
          {
            *(void *)(*(void *)&v182 + 32) = v184;
            operator delete(v184);
          }
          int v185 = *(std::__shared_weak_count **)(*(void *)&v182 + 16);
          if (v185) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v185);
          }
          double v179 = v182;
          unsigned int v186 = 2071181815;
LABEL_320:
          uint64_t v180 = v186 | 0x1030C4000000000;
LABEL_321:
          MEMORY[0x22A614FA0](*(void *)&v179, v180);
LABEL_322:
          char v177 = 1;
          break;
        default:
          goto LABEL_546;
      }
      goto LABEL_546;
    }
    if (**(unsigned char **)(v5 + 48))
    {
      if (v373) {
        atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = v374;
      int v15 = v376;
      uint64_t v17 = (char *)v353;
      int64_t v16 = v354;
      if (v354 >= 0) {
        uint64_t v18 = v354;
      }
      else {
        uint64_t v18 = v354 + 1;
      }
      int64_t v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
      if (v354 >= 2)
      {
        unint64_t v20 = 2;
        if (v19 > 2) {
          unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
        }
        bzero(v353, ((8 * v20 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      if (v19 < v16) {
        bzero(&v17[16 * (v18 >> 1)], 8 * v16 - 16 * (v18 >> 1));
      }
      uint64_t v5 = v345;
      if (v15)
      {
        uint64_t v21 = *(void *)(v13 + 56);
        if (v21)
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          size_t v24 = (unint64_t *)(*(void *)(v13 + 96) + 8 * v14 + 8 * (*(unsigned char *)(v13 + 18) == 0));
          uint64_t v25 = *(void *)(v13 + 72);
          unint64_t v26 = v353;
          while (2)
          {
            uint64_t v27 = *(void *)(v25 + 16 * v22);
            unint64_t v28 = *(void *)(v27 + 64);
            switch(*(_DWORD *)(v27 + 24))
            {
              case 0:
                if (v28) {
                  v26[v23] = *v24;
                }
                ++v24;
                goto LABEL_47;
              case 1:
                unint64_t v37 = *v24++;
                unint64_t v36 = v37;
                uint64_t v38 = v23 - 1;
                if (v37 < v28 && v36 != 0) {
                  v26[v38 + v36] = 0x3FF0000000000000;
                }
                goto LABEL_61;
              case 2:
                uint64_t v29 = *(void *)(v27 + 72);
                if (!v29) {
                  goto LABEL_47;
                }
                uint64_t v30 = 0;
                unint64_t v31 = 0;
                unint64_t v32 = (char *)v353 + 8 * v23;
                do
                {
                  if (v31 < v28) {
                    *(void *)&v32[8 * v31] = v24[v31];
                  }
                  ++v31;
                  v30 -= 8;
                }
                while (v29 != v31);
                goto LABEL_46;
              case 3:
                uint64_t v41 = *v24++;
                uint64_t v40 = v41;
                uint64_t v38 = v23 - 1;
                if (v41)
                {
                  atomic_ullong *volatile v42 = v353;
                  do
                  {
                    unint64_t v43 = *v24;
                    if (*v24 < v28 && v43 != 0) {
                      v42[v38 + v43] = 0x3FF0000000000000;
                    }
                    ++v24;
                    --v40;
                  }
                  while (v40);
                }
LABEL_61:
                uint64_t v23 = v38 + v28;
                goto LABEL_70;
              case 4:
                unint64_t v47 = *v24;
                __n128 v45 = v24 + 1;
                unint64_t v46 = v47;
                if (v47)
                {
                  int64_t v48 = v353;
                  atomic_ullong *volatile v49 = v45;
                  do
                  {
                    unint64_t v51 = *v49;
                    v49 += 2;
                    unint64_t v50 = v51;
                    if (v51 < v28) {
                      v48[v50 + v23] = v45[1];
                    }
                    __n128 v45 = v49;
                    --v46;
                  }
                  while (v46);
                }
                else
                {
                  atomic_ullong *volatile v49 = v45;
                }
                v23 += v28;
                size_t v24 = v49;
                goto LABEL_70;
              case 7:
                uint64_t v33 = *(void *)(v27 + 72);
                if (!v33) {
                  goto LABEL_47;
                }
                uint64_t v30 = 0;
                unint64_t v34 = 0;
                unint64_t v35 = (char *)v353 + 8 * v23;
                do
                {
                  if (v34 < v28) {
                    *(void *)&v35[8 * v34] = v24[v34];
                  }
                  ++v34;
                  v30 -= 8;
                }
                while (v33 != v34);
LABEL_46:
                size_t v24 = (unint64_t *)((char *)v24 - v30);
LABEL_47:
                v23 += v28;
LABEL_70:
                if (++v22 == v21) {
                  break;
                }
                continue;
              default:
                goto LABEL_70;
            }
            break;
          }
        }
      }
      if (v346) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v346);
      }
      *((void *)v353 + **(void **)v345 - 1) = 0x3FF0000000000000;
      v360.__r_.__value_.__s.__data_[0] = 2;
      (*(void (**)(std::string *__return_ptr))(*v344 + 88))(&v390);
      switch(BYTE4(v386[1]))
      {
        case 2:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v52 = v386[0];
            if (v386[0])
            {
              if (*((char *)v386[0] + 31) < 0) {
                operator delete(*((void **)v386[0] + 1));
              }
              uint64_t v53 = v52;
              uint64_t v54 = 0x1012C404EF22A49;
              goto LABEL_256;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v163 = v386[0];
            if (v386[0])
            {
              uint64_t v164 = (void *)v386[0][1];
              if (v164)
              {
                v386[0][2] = (atomic_ullong)v164;
                operator delete(v164);
              }
              uint64_t v53 = v163;
              uint64_t v54 = 0x1080C409938AC02;
              goto LABEL_256;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v157 = v386[0];
            if (v386[0])
            {
              v355 = (void **)(v386[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v355);
              goto LABEL_251;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v157 = v386[0];
            if (v386[0])
            {
              v355 = (void **)(v386[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v355);
LABEL_251:
              uint64_t v53 = v157;
              uint64_t v54 = 0x1020C405E66F15BLL;
              goto LABEL_256;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v165 = v386[0];
            if (v386[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v386[0] + 2);
              uint64_t v53 = v165;
              unsigned int v162 = -235920773;
              goto LABEL_255;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v158 = v386[0];
            if (v386[0])
            {
              atomic_ullong *volatile v159 = (void *)v386[0][6];
              if (v159)
              {
                v386[0][7] = (atomic_ullong)v159;
                operator delete(v159);
              }
              uint64_t v160 = (void *)v158[3];
              if (v160)
              {
                v158[4] = (atomic_ullong)v160;
                operator delete(v160);
              }
              BOOL v161 = (std::__shared_weak_count *)v158[2];
              if (v161) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v161);
              }
              uint64_t v53 = v158;
              unsigned int v162 = 2071181815;
LABEL_255:
              uint64_t v54 = v162 | 0x1030C4000000000;
LABEL_256:
              MEMORY[0x22A614FA0](v53, v54);
            }
          }
          break;
        default:
          break;
      }
      *(atomic_ullong **)((char *)v386 + 5) = *(atomic_ullong **)((char *)v390.__r_.__value_.__r.__words + 5);
      v386[0] = (atomic_ullong *)v390.__r_.__value_.__l.__data_;
      BYTE4(v386[1]) = v390.__r_.__value_.__s.__data_[12];
      if (!**(unsigned char **)(v345 + 8)) {
        goto LABEL_383;
      }
      v360.__r_.__value_.__s.__data_[0] = 7;
      (*(void (**)(std::string *__return_ptr))(*v344 + 88))(&v390);
      switch(BYTE4(v385[1]))
      {
        case 2:
          goto LABEL_351;
        case 3:
          goto LABEL_368;
        case 4:
          goto LABEL_356;
        case 5:
          goto LABEL_373;
        case 8:
          goto LABEL_377;
        case 9:
          goto LABEL_359;
        default:
          break;
      }
    }
    else
    {
      if (v373) {
        atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v351 = 0;
      if (v376)
      {
        uint64_t v93 = *(void *)(v13 + 56);
        if (v93)
        {
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          int v96 = (uint64_t *)(*(void *)(v13 + 96) + 8 * v374 + 8 * (*(unsigned char *)(v13 + 18) == 0));
          while (2)
          {
            uint64_t v97 = *(void *)(*(void *)(v13 + 72) + 16 * v94);
            unint64_t v98 = *(void *)(v97 + 64);
            switch(*(_DWORD *)(v97 + 24))
            {
              case 0:
                uint64_t v99 = *v96++;
                uint64_t v100 = v99;
                if (v98)
                {
                  v390.__r_.__value_.__r.__words[0] = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, (int)v95, &v390) = v100;
                }
                goto LABEL_174;
              case 1:
                unint64_t v111 = *v96++;
                unint64_t v110 = v111;
                if (v111 < v98 && v110 != 0)
                {
                  v390.__r_.__value_.__r.__words[0] = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, (int)v110 + (int)v95 - 1, &v390) = 0x3FF0000000000000;
                }
                goto LABEL_169;
              case 2:
                uint64_t v101 = *(void *)(v97 + 72);
                if (!v101) {
                  goto LABEL_174;
                }
                uint64_t v102 = 0;
                unint64_t v103 = 0;
                uint64_t v104 = v95 << 32;
                do
                {
                  if (v103 < v98)
                  {
                    uint64_t v105 = v96[v103];
                    v390.__r_.__value_.__r.__words[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, v104 >> 32, &v390) = v105;
                  }
                  ++v103;
                  v104 += 0x100000000;
                  v102 -= 8;
                }
                while (v101 != v103);
                goto LABEL_156;
              case 3:
                uint64_t v114 = *v96++;
                for (uint64_t k = v114; k; --k)
                {
                  uint64_t v115 = *v96;
                  if (*v96 < v98 && v115 != 0)
                  {
                    v390.__r_.__value_.__r.__words[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, (int)v115 + (int)v95 - 1, &v390) = 0x3FF0000000000000;
                  }
                  ++v96;
                }
LABEL_169:
                uint64_t v95 = v95 + v98 - 1;
                goto LABEL_175;
              case 4:
                uint64_t v118 = *v96++;
                for (uint64_t m = v118; m; --m)
                {
                  uint64_t v119 = *v96;
                  if (*v96 < v98)
                  {
                    uint64_t v120 = v96[1];
                    v390.__r_.__value_.__r.__words[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, (int)v119 + (int)v95, &v390) = v120;
                  }
                  v96 += 2;
                }
                goto LABEL_174;
              case 7:
                uint64_t v106 = *(void *)(v97 + 72);
                if (!v106) {
                  goto LABEL_174;
                }
                uint64_t v102 = 0;
                unint64_t v107 = 0;
                uint64_t v108 = v95 << 32;
                do
                {
                  if (v107 < v98)
                  {
                    uint64_t v109 = v96[v107];
                    v390.__r_.__value_.__r.__words[0] = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, v108 >> 32, &v390) = v109;
                  }
                  ++v107;
                  v108 += 0x100000000;
                  v102 -= 8;
                }
                while (v106 != v107);
LABEL_156:
                int v96 = (uint64_t *)((char *)v96 - v102);
                a2 = v343;
                uint64_t v5 = v345;
LABEL_174:
                v95 += v98;
LABEL_175:
                if (++v94 == v93) {
                  break;
                }
                continue;
              default:
                goto LABEL_175;
            }
            break;
          }
        }
      }
      if (v346) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v346);
      }
      uint64_t v121 = **(_DWORD **)v5 - 1;
      v390.__r_.__value_.__r.__words[0] = 0;
      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v350, v121, &v390) = 0x3FF0000000000000;
      v360.__r_.__value_.__s.__data_[0] = 2;
      (*(void (**)(std::string *__return_ptr))(*v344 + 96))(&v390);
      switch(BYTE4(v386[1]))
      {
        case 2:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v122 = v386[0];
            if (v386[0])
            {
              if (*((char *)v386[0] + 31) < 0) {
                operator delete(*((void **)v386[0] + 1));
              }
              uint64_t v123 = v122;
              uint64_t v124 = 0x1012C404EF22A49;
              goto LABEL_348;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v196 = v386[0];
            if (v386[0])
            {
              uint64_t v197 = (void *)v386[0][1];
              if (v197)
              {
                v386[0][2] = (atomic_ullong)v197;
                operator delete(v197);
              }
              uint64_t v123 = v196;
              uint64_t v124 = 0x1080C409938AC02;
              goto LABEL_348;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v190 = v386[0];
            if (v386[0])
            {
              v355 = (void **)(v386[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v355);
              goto LABEL_343;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v190 = v386[0];
            if (v386[0])
            {
              v355 = (void **)(v386[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v355);
LABEL_343:
              uint64_t v123 = v190;
              uint64_t v124 = 0x1020C405E66F15BLL;
              goto LABEL_348;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v198 = v386[0];
            if (v386[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v386[0] + 2);
              uint64_t v123 = v198;
              unsigned int v195 = -235920773;
              goto LABEL_347;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v191 = v386[0];
            if (v386[0])
            {
              uint64_t v192 = (void *)v386[0][6];
              if (v192)
              {
                v386[0][7] = (atomic_ullong)v192;
                operator delete(v192);
              }
              uint64_t v193 = (void *)v191[3];
              if (v193)
              {
                v191[4] = (atomic_ullong)v193;
                operator delete(v193);
              }
              double v194 = (std::__shared_weak_count *)v191[2];
              if (v194) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v194);
              }
              uint64_t v123 = v191;
              unsigned int v195 = 2071181815;
LABEL_347:
              uint64_t v124 = v195 | 0x1030C4000000000;
LABEL_348:
              MEMORY[0x22A614FA0](v123, v124);
            }
          }
          break;
        default:
          break;
      }
      *(atomic_ullong **)((char *)v386 + 5) = *(atomic_ullong **)((char *)v390.__r_.__value_.__r.__words + 5);
      v386[0] = (atomic_ullong *)v390.__r_.__value_.__l.__data_;
      BYTE4(v386[1]) = v390.__r_.__value_.__s.__data_[12];
      if (!**(unsigned char **)(v5 + 8)) {
        goto LABEL_383;
      }
      v360.__r_.__value_.__s.__data_[0] = 7;
      (*(void (**)(std::string *__return_ptr))(*v344 + 96))(&v390);
      switch(BYTE4(v385[1]))
      {
        case 2:
LABEL_351:
          if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v199 = v385[0];
            if (v385[0])
            {
              if (*((char *)v385[0] + 31) < 0) {
                operator delete(*((void **)v385[0] + 1));
              }
              unsigned int v200 = v199;
              uint64_t v201 = 0x1012C404EF22A49;
              goto LABEL_381;
            }
          }
          break;
        case 3:
LABEL_368:
          if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v208 = v385[0];
            if (v385[0])
            {
              long long v209 = (void *)v385[0][1];
              if (v209)
              {
                v385[0][2] = (atomic_ullong)v209;
                operator delete(v209);
              }
              unsigned int v200 = v208;
              uint64_t v201 = 0x1080C409938AC02;
              goto LABEL_381;
            }
          }
          break;
        case 4:
LABEL_356:
          if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v202 = v385[0];
            if (v385[0])
            {
              v355 = (void **)(v385[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v355);
              goto LABEL_376;
            }
          }
          break;
        case 5:
LABEL_373:
          if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v202 = v385[0];
            if (v385[0])
            {
              v355 = (void **)(v385[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v355);
LABEL_376:
              unsigned int v200 = v202;
              uint64_t v201 = 0x1020C405E66F15BLL;
              goto LABEL_381;
            }
          }
          break;
        case 8:
LABEL_377:
          if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v210 = v385[0];
            if (v385[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v385[0] + 2);
              unsigned int v200 = v210;
              unsigned int v207 = -235920773;
              goto LABEL_380;
            }
          }
          break;
        case 9:
LABEL_359:
          if (atomic_fetch_add(v385[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v203 = v385[0];
            if (v385[0])
            {
              uint64_t v204 = (void *)v385[0][6];
              if (v204)
              {
                v385[0][7] = (atomic_ullong)v204;
                operator delete(v204);
              }
              uint64_t v205 = (void *)v203[3];
              if (v205)
              {
                v203[4] = (atomic_ullong)v205;
                operator delete(v205);
              }
              long long v206 = (std::__shared_weak_count *)v203[2];
              if (v206) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v206);
              }
              unsigned int v200 = v203;
              unsigned int v207 = 2071181815;
LABEL_380:
              uint64_t v201 = v207 | 0x1030C4000000000;
LABEL_381:
              MEMORY[0x22A614FA0](v200, v201);
            }
          }
          break;
        default:
          break;
      }
    }
    *(atomic_ullong **)((char *)v385 + 5) = *(atomic_ullong **)((char *)v390.__r_.__value_.__r.__words + 5);
    v385[0] = (atomic_ullong *)v390.__r_.__value_.__l.__data_;
    BYTE4(v385[1]) = v390.__r_.__value_.__s.__data_[12];
LABEL_383:
    if (**(unsigned char **)(v5 + 8))
    {
      int v211 = 0;
      double v212 = 0.0;
      while (1)
      {
        unint64_t v213 = 1;
        switch(BYTE4(v385[1]))
        {
          case 3:
            int v214 = v385[0] + 1;
            uint64_t v215 = v385[0] + 2;
            char v216 = 3;
            goto LABEL_389;
          case 4:
            int v214 = v385[0] + 1;
            uint64_t v215 = v385[0] + 2;
            char v216 = 4;
            goto LABEL_389;
          case 5:
            int v214 = v385[0] + 1;
            uint64_t v215 = v385[0] + 2;
            char v216 = 5;
LABEL_389:
            unint64_t v213 = (*v215 - *v214) >> v216;
            break;
          case 9:
            unint64_t v218 = (uint64_t *)v385[0][3];
            atomic_ullong v217 = v385[0][4];
            if ((uint64_t *)v217 == v218)
            {
              unint64_t v213 = 0;
            }
            else
            {
              unint64_t v213 = v385[0][1];
              if (v213)
              {
                unint64_t v213 = 1;
                do
                {
                  uint64_t v219 = *v218++;
                  v213 *= v219;
                }
                while (v218 != (uint64_t *)v217);
              }
            }
            break;
          default:
            break;
        }
        if ((unint64_t)v211 >= v213)
        {
          if (v382)
          {
            (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v382 + 48))(v382, v385);
            uint64_t v241 = 0;
            uint64_t v242 = *(void *)(*(void *)(v344[47] + 24) + 32);
            switch(BYTE4(v386[1]))
            {
              case 0:
                uint64_t v241 = (uint64_t)v386[0];
                goto LABEL_501;
              case 1:
                uint64_t v241 = (uint64_t)*(double *)v386;
                goto LABEL_501;
              case 2:
                long long v243 = v386[0];
                size_t __idx = 0;
                long long v244 = (char *)(v386[0] + 1);
                if (*((char *)v386[0] + 31) < 0) {
                  long long v244 = (char *)v386[0][1];
                }
                std::string v245 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v390, v244);
                uint64_t v241 = std::stoll(v245, &__idx, 10);
                if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v390.__r_.__value_.__l.__data_);
                }
                if (*((char *)v243 + 31) < 0) {
                  atomic_ullong v246 = v243[2];
                }
                else {
                  atomic_ullong v246 = *((unsigned __int8 *)v243 + 31);
                }
                if (__idx != v246)
                {
                  v299 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  uint64_t v300 = std::string::append(&v360, " cannot be interpreted as an integer");
                  long long v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
                  v390.__r_.__value_.__r.__words[2] = v300->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v390.__r_.__value_.__l.__data_ = v301;
                  v300->__r_.__value_.__l.__size_ = 0;
                  v300->__r_.__value_.__r.__words[2] = 0;
                  v300->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v299, &v390);
                  __cxa_throw(v299, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_501;
              case 3:
                memset(&v390, 0, sizeof(v390));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v390, *((const void **)v386[0] + 1), v386[0][2], (v386[0][2] - v386[0][1]) >> 3);
                turi::flexible_type_fail(0);
                if (v390.__r_.__value_.__r.__words[0])
                {
                  v390.__r_.__value_.__l.__size_ = v390.__r_.__value_.__r.__words[0];
                  operator delete(v390.__r_.__value_.__l.__data_);
                }
                goto LABEL_500;
              case 4:
                memset(&v390, 0, sizeof(v390));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v390, *((uint64_t **)v386[0] + 1), *((uint64_t **)v386[0] + 2), (v386[0][2] - v386[0][1]) >> 4);
                turi::flexible_type_fail(0);
                v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
                goto LABEL_500;
              case 5:
                memset(&v390, 0, sizeof(v390));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v390, *((uint64_t **)v386[0] + 1), *((uint64_t **)v386[0] + 2), (v386[0][2] - v386[0][1]) >> 5);
                turi::flexible_type_fail(0);
                v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
                goto LABEL_500;
              case 6:
                uint64_t v241 = (uint64_t)v386[0] << 8 >> 8;
                goto LABEL_501;
              case 7:
                goto LABEL_501;
              case 8:
                v247 = v386[0];
                uint64_t v248 = (atomic_uint *)v386[0][2];
                v355 = (void **)v386[0][1];
                v356 = v248;
                if (v248) {
                  atomic_fetch_add_explicit(v248 + 2, 1u, memory_order_relaxed);
                }
                long long v249 = *(_OWORD *)(v247 + 3);
                long long v250 = *(_OWORD *)(v247 + 7);
                long long v358 = *(_OWORD *)(v247 + 5);
                long long v359 = v250;
                long long v357 = v249;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v356);
                goto LABEL_500;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v390, (uint64_t)(v386[0] + 1));
                turi::flexible_type_fail(0);
                if (v392)
                {
                  v393 = v392;
                  operator delete(v392);
                }
                if (v390.__r_.__value_.__r.__words[2])
                {
                  std::string::size_type v391 = v390.__r_.__value_.__r.__words[2];
                  operator delete((void *)v390.__r_.__value_.__r.__words[2]);
                }
                if (v390.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v390.__r_.__value_.__l.__size_);
                }
LABEL_500:
                uint64_t v241 = 0;
LABEL_501:
                if (!v378) {
                  std::__throw_bad_function_call[abi:ne180100]();
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v378 + 48))(v378, *(void *)(v242 + 80) + 16 * v241);
                goto LABEL_503;
              default:
                goto LABEL_741;
            }
          }
          std::__throw_bad_function_call[abi:ne180100]();
        }
        switch(BYTE4(v385[1]))
        {
          case 2:
            if (*v385[0] != 1) {
              operator new();
            }
            return;
          case 3:
            if (*v385[0] != 1) {
              operator new();
            }
            return;
          case 4:
            if (*v385[0] != 1) {
              operator new();
            }
            return;
          case 5:
            if (*v385[0] != 1) {
              operator new();
            }
            return;
          case 8:
            if (*v385[0] != 1) {
              operator new();
            }
            return;
          case 9:
            if (*v385[0] != 1) {
              operator new();
            }
            return;
          default:
            break;
        }
        if (BYTE4(v385[1]) == 1)
        {
          if (v211) {
            goto LABEL_741;
          }
          uint64_t v223 = (double *)v385;
        }
        else
        {
          if (BYTE4(v385[1]) == 9)
          {
            uint64_t v222 = v385[0];
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v385[0] + 1);
            unsigned __int8 v220 = (atomic_ullong *)v222[1];
            char v221 = (atomic_ullong *)((char *)v211 + v222[9]);
          }
          else
          {
            if (BYTE4(v385[1]) != 3) {
              goto LABEL_741;
            }
            unsigned __int8 v220 = v385[0] + 1;
            char v221 = v211;
          }
          uint64_t v223 = (double *)(*v220 + 8 * (void)v221);
        }
        if (v212 < *v223)
        {
          switch(BYTE4(v385[1]))
          {
            case 2:
              if (*v385[0] != 1) {
                operator new();
              }
              goto LABEL_741;
            case 3:
              uint64_t v225 = v385[0];
              if (*v385[0] != 1) {
                operator new();
              }
              goto LABEL_436;
            case 4:
              if (*v385[0] != 1) {
                operator new();
              }
              goto LABEL_741;
            case 5:
              if (*v385[0] != 1) {
                operator new();
              }
              goto LABEL_741;
            case 8:
              if (*v385[0] != 1) {
                operator new();
              }
              goto LABEL_741;
            case 9:
              uint64_t v224 = v385[0];
              if (*v385[0] != 1) {
                operator new();
              }
              goto LABEL_438;
            default:
              if (BYTE4(v385[1]) == 1)
              {
                if (v211) {
                  goto LABEL_741;
                }
                uint64_t v228 = (double *)v385;
              }
              else
              {
                if (BYTE4(v385[1]) == 9)
                {
                  uint64_t v224 = v385[0];
LABEL_438:
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v224 + 1);
                  uint64_t v226 = (void *)v224[1];
                  v227 = (atomic_ullong *)((char *)v211 + v224[9]);
                }
                else
                {
                  if (BYTE4(v385[1]) != 3) {
                    goto LABEL_741;
                  }
                  uint64_t v225 = v385[0];
LABEL_436:
                  uint64_t v226 = v225 + 1;
                  v227 = v211;
                }
                uint64_t v228 = (double *)(*v226 + 8 * (void)v227);
              }
              double v212 = *v228;
              switch(BYTE4(v386[1]))
              {
                case 2:
                  if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    uint64_t v229 = v386[0];
                    if (v386[0])
                    {
                      if (*((char *)v386[0] + 31) < 0) {
                        operator delete(*((void **)v386[0] + 1));
                      }
                      unsigned __int8 v230 = v229;
                      uint64_t v231 = 0x1012C404EF22A49;
                      goto LABEL_473;
                    }
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    v238 = v386[0];
                    if (v386[0])
                    {
                      uint64_t v239 = (void *)v386[0][1];
                      if (v239)
                      {
                        v386[0][2] = (atomic_ullong)v239;
                        operator delete(v239);
                      }
                      unsigned __int8 v230 = v238;
                      uint64_t v231 = 0x1080C409938AC02;
                      goto LABEL_473;
                    }
                  }
                  break;
                case 4:
                  if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    v232 = v386[0];
                    if (v386[0])
                    {
                      v390.__r_.__value_.__r.__words[0] = (std::string::size_type)(v386[0] + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
                      goto LABEL_468;
                    }
                  }
                  break;
                case 5:
                  if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    v232 = v386[0];
                    if (v386[0])
                    {
                      v390.__r_.__value_.__r.__words[0] = (std::string::size_type)(v386[0] + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
LABEL_468:
                      unsigned __int8 v230 = v232;
                      uint64_t v231 = 0x1020C405E66F15BLL;
                      goto LABEL_473;
                    }
                  }
                  break;
                case 8:
                  if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    v240 = v386[0];
                    if (v386[0])
                    {
                      boost::detail::shared_count::~shared_count((atomic_uint **)v386[0] + 2);
                      unsigned __int8 v230 = v240;
                      unsigned int v237 = -235920773;
                      goto LABEL_472;
                    }
                  }
                  break;
                case 9:
                  if (atomic_fetch_add(v386[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    std::vector<std::pair<unsigned long, const char *>> v233 = v386[0];
                    if (v386[0])
                    {
                      uint64_t v234 = (void *)v386[0][6];
                      if (v234)
                      {
                        v386[0][7] = (atomic_ullong)v234;
                        operator delete(v234);
                      }
                      long long v235 = (void *)v233[3];
                      if (v235)
                      {
                        v233[4] = (atomic_ullong)v235;
                        operator delete(v235);
                      }
                      long long v236 = (std::__shared_weak_count *)v233[2];
                      if (v236) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v236);
                      }
                      unsigned __int8 v230 = v233;
                      unsigned int v237 = 2071181815;
LABEL_472:
                      uint64_t v231 = v237 | 0x1030C4000000000;
LABEL_473:
                      MEMORY[0x22A614FA0](v230, v231);
                    }
                  }
                  break;
                default:
                  break;
              }
              LODWORD(v386[1]) = 0;
              BYTE4(v386[1]) = 0;
              v386[0] = v211;
              break;
          }
        }
        int v211 = (atomic_ullong *)((char *)v211 + 1);
      }
    }
LABEL_503:
    if (!*(unsigned char *)(v372 + 16) || *(unsigned char *)(v372 + 17) == 0)
    {
      *(double *)&uint64_t v175 = 0.0;
    }
    else
    {
      std::string::size_type v252 = (void *)(v372 + 24);
      if (!*(unsigned char *)(v372 + 18)) {
        std::string::size_type v252 = (void *)(*(void *)(v372 + 96) + 8 * v374);
      }
      uint64_t v175 = *(uint64_t *)(*(void *)(v372 + 96) + 8 * v374 + 8 * *v252 - 8);
    }
    char v177 = 0;
    switch(v389)
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v253 = v387;
          if (v387 != 0.0)
          {
            if (*(char *)(*(void *)&v387 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v387 + 8));
            }
            MEMORY[0x22A614FA0](*(void *)&v253, 0x1012C404EF22A49);
          }
        }
        goto LABEL_545;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_545;
        }
        double v261 = v387;
        if (v387 == 0.0) {
          goto LABEL_544;
        }
        uint64_t v262 = *(void **)(*(void *)&v387 + 8);
        if (v262)
        {
          *(void *)(*(void *)&v387 + 16) = v262;
          operator delete(v262);
        }
        double v259 = v261;
        uint64_t v263 = 0x1080C409938AC02;
        goto LABEL_543;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_545;
        }
        double v254 = v387;
        if (v387 == 0.0) {
          goto LABEL_544;
        }
        v390.__r_.__value_.__r.__words[0] = *(void *)&v387 + 8;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
        goto LABEL_538;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_545;
        }
        double v254 = v387;
        if (v387 == 0.0) {
          goto LABEL_544;
        }
        v390.__r_.__value_.__r.__words[0] = *(void *)&v387 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
LABEL_538:
        double v259 = v254;
        uint64_t v263 = 0x1020C405E66F15BLL;
        goto LABEL_543;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_545;
        }
        double v264 = v387;
        if (v387 == 0.0) {
          goto LABEL_544;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v387 + 16));
        double v259 = v264;
        unsigned int v260 = -235920773;
        goto LABEL_542;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v387, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v255 = v387;
          if (v387 != 0.0)
          {
            unint64_t v256 = *(void **)(*(void *)&v387 + 48);
            if (v256)
            {
              *(void *)(*(void *)&v387 + 56) = v256;
              operator delete(v256);
            }
            v257 = *(void **)(*(void *)&v255 + 24);
            if (v257)
            {
              *(void *)(*(void *)&v255 + 32) = v257;
              operator delete(v257);
            }
            uint64_t v258 = *(std::__shared_weak_count **)(*(void *)&v255 + 16);
            if (v258) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v258);
            }
            double v259 = v255;
            unsigned int v260 = 2071181815;
LABEL_542:
            uint64_t v263 = v260 | 0x1030C4000000000;
LABEL_543:
            MEMORY[0x22A614FA0](*(void *)&v259, v263);
          }
LABEL_544:
          char v177 = 0;
          double v387 = 0.0;
        }
        else
        {
LABEL_545:
          char v177 = 0;
        }
        break;
      default:
        break;
    }
LABEL_546:
    int v388 = 0;
    char v389 = v177;
    double v387 = *(double *)&v175;
    uint64_t v265 = **(void **)(v5 + 64);
    if (*(void *)(*(void *)(v5 + 64) + 8) != v265) {
      break;
    }
LABEL_632:
    if (v376 | v366)
    {
      double v294 = (uint64_t *)(*(void *)(v372 + 96) + 8 * v374);
      if (v367) {
        double v294 = &v368;
      }
      v374 += *v294;
    }
    uint64_t v295 = v370 + 1;
    uint64_t v296 = v369;
    uint64_t v297 = ++v370 - v365 * v371;
    uint64_t v375 = v297;
    if (v297 == v365 && v295 != v369)
    {
      turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v362);
      uint64_t v295 = v370;
      uint64_t v296 = v369;
    }
    if (v295 == v296) {
      goto LABEL_8;
    }
  }
  uint64_t v266 = 0;
  unint64_t v267 = 0;
  while (1)
  {
    if ((*(uint64_t (**)(void))(**(void **)(v265 + v266) + 32))(*(void *)(v265 + v266)))
    {
      uint64_t v268 = v385;
      goto LABEL_576;
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(**(void **)(v5 + 64) + v266) + 16))(&v390);
    if ((SHIBYTE(v390.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) == 19)
      {
        BOOL v269 = v390.__r_.__value_.__r.__words[0] == 0x6966697373616C63
            && v390.__r_.__value_.__l.__size_ == 0x72756363615F7265;
        if (v269 && *(std::string::size_type *)((char *)&v390.__r_.__value_.__r.__words[1] + 3) == 0x7963617275636361) {
          goto LABEL_572;
        }
      }
      goto LABEL_575;
    }
    if (v390.__r_.__value_.__l.__size_ == 19) {
      break;
    }
    operator delete(v390.__r_.__value_.__l.__data_);
LABEL_575:
    uint64_t v268 = v386;
LABEL_576:
    uint64_t v276 = *(void *)(**(void **)(v5 + 64) + v266);
    (*(void (**)(uint64_t, double *, atomic_ullong **, uint64_t))(*(void *)v276 + 48))(v276, &v387, v268, a2);
LABEL_577:
    ++v267;
    uint64_t v265 = **(void **)(v5 + 64);
    v266 += 16;
    if (v267 >= (*(void *)(*(void *)(v5 + 64) + 8) - v265) >> 4) {
      goto LABEL_632;
    }
  }
  BOOL v273 = *(void *)v390.__r_.__value_.__l.__data_ != 0x6966697373616C63
      || *(void *)(v390.__r_.__value_.__r.__words[0] + 8) != 0x72756363615F7265
      || *(void *)(v390.__r_.__value_.__r.__words[0] + 11) != 0x7963617275636361;
  operator delete(v390.__r_.__value_.__l.__data_);
  if (v273) {
    goto LABEL_575;
  }
LABEL_572:
  uint64_t v274 = 0;
  uint64_t v275 = *(void *)(**(void **)(v5 + 64) + v266);
  switch(v389)
  {
    case 0:
      uint64_t v274 = *(void *)&v387;
      goto LABEL_601;
    case 1:
      uint64_t v274 = (uint64_t)v387;
      goto LABEL_601;
    case 2:
      double v277 = v387;
      size_t __idx = 0;
      timeval v278 = (char *)(*(void *)&v387 + 8);
      if (*(char *)(*(void *)&v387 + 31) < 0) {
        timeval v278 = *(char **)(*(void *)&v387 + 8);
      }
      long long v279 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v390, v278);
      uint64_t v274 = std::stoll(v279, &__idx, 10);
      if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v390.__r_.__value_.__l.__data_);
      }
      if (*(char *)(*(void *)&v277 + 31) < 0) {
        uint64_t v280 = *(void *)(*(void *)&v277 + 16);
      }
      else {
        uint64_t v280 = *(unsigned __int8 *)(*(void *)&v277 + 31);
      }
      if (__idx != v280)
      {
        v335 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v336 = std::string::append(&v360, " cannot be interpreted as an integer");
        long long v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
        v390.__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v390.__r_.__value_.__l.__data_ = v337;
        v336->__r_.__value_.__l.__size_ = 0;
        v336->__r_.__value_.__r.__words[2] = 0;
        v336->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v335, &v390);
        __cxa_throw(v335, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_601;
    case 3:
      memset(&v390, 0, sizeof(v390));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v390, *(const void **)(*(void *)&v387 + 8), *(void *)(*(void *)&v387 + 16), (uint64_t)(*(void *)(*(void *)&v387 + 16) - *(void *)(*(void *)&v387 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v390.__r_.__value_.__r.__words[0])
      {
        v390.__r_.__value_.__l.__size_ = v390.__r_.__value_.__r.__words[0];
        operator delete(v390.__r_.__value_.__l.__data_);
      }
      goto LABEL_600;
    case 4:
      memset(&v390, 0, sizeof(v390));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v390, *(uint64_t **)(*(void *)&v387 + 8), *(uint64_t **)(*(void *)&v387 + 16), (uint64_t)(*(void *)(*(void *)&v387 + 16) - *(void *)(*(void *)&v387 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
      goto LABEL_600;
    case 5:
      memset(&v390, 0, sizeof(v390));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v390, *(uint64_t **)(*(void *)&v387 + 8), *(uint64_t **)(*(void *)&v387 + 16), (uint64_t)(*(void *)(*(void *)&v387 + 16) - *(void *)(*(void *)&v387 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
      goto LABEL_600;
    case 6:
      uint64_t v274 = (uint64_t)(*(void *)&v387 << 8) >> 8;
      goto LABEL_601;
    case 7:
      goto LABEL_601;
    case 8:
      double v281 = v387;
      long long v282 = *(atomic_uint **)(*(void *)&v387 + 16);
      v355 = *(void ***)(*(void *)&v387 + 8);
      v356 = v282;
      if (v282) {
        atomic_fetch_add_explicit(v282 + 2, 1u, memory_order_relaxed);
      }
      long long v283 = *(_OWORD *)(*(void *)&v281 + 24);
      long long v284 = *(_OWORD *)(*(void *)&v281 + 56);
      long long v358 = *(_OWORD *)(*(void *)&v281 + 40);
      long long v359 = v284;
      long long v357 = v283;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v356);
      goto LABEL_600;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v390, *(void *)&v387 + 8);
      turi::flexible_type_fail(0);
      if (v392)
      {
        v393 = v392;
        operator delete(v392);
      }
      if (v390.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v391 = v390.__r_.__value_.__r.__words[2];
        operator delete((void *)v390.__r_.__value_.__r.__words[2]);
      }
      if (v390.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v390.__r_.__value_.__l.__size_);
      }
LABEL_600:
      uint64_t v274 = 0;
LABEL_601:
      uint64_t v348 = v274;
      uint64_t v285 = 0;
      switch(BYTE4(v386[1]))
      {
        case 0:
          uint64_t v285 = (uint64_t)v386[0];
          goto LABEL_625;
        case 1:
          uint64_t v285 = (uint64_t)*(double *)v386;
          goto LABEL_625;
        case 2:
          double v286 = v386[0];
          size_t __idx = 0;
          double v287 = (char *)(v386[0] + 1);
          if (*((char *)v386[0] + 31) < 0) {
            double v287 = (char *)v386[0][1];
          }
          uint64_t v288 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v390, v287);
          uint64_t v285 = std::stoll(v288, &__idx, 10);
          if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v390.__r_.__value_.__l.__data_);
          }
          if (*((char *)v286 + 31) < 0) {
            atomic_ullong v289 = v286[2];
          }
          else {
            atomic_ullong v289 = *((unsigned __int8 *)v286 + 31);
          }
          if (__idx != v289)
          {
            v338 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v339 = std::string::append(&v360, " cannot be interpreted as an integer");
            long long v340 = *(_OWORD *)&v339->__r_.__value_.__l.__data_;
            v390.__r_.__value_.__r.__words[2] = v339->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v390.__r_.__value_.__l.__data_ = v340;
            v339->__r_.__value_.__l.__size_ = 0;
            v339->__r_.__value_.__r.__words[2] = 0;
            v339->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v338, &v390);
            __cxa_throw(v338, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_625;
        case 3:
          memset(&v390, 0, sizeof(v390));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v390, *((const void **)v386[0] + 1), v386[0][2], (v386[0][2] - v386[0][1]) >> 3);
          turi::flexible_type_fail(0);
          if (v390.__r_.__value_.__r.__words[0])
          {
            v390.__r_.__value_.__l.__size_ = v390.__r_.__value_.__r.__words[0];
            operator delete(v390.__r_.__value_.__l.__data_);
          }
          goto LABEL_624;
        case 4:
          memset(&v390, 0, sizeof(v390));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v390, *((uint64_t **)v386[0] + 1), *((uint64_t **)v386[0] + 2), (v386[0][2] - v386[0][1]) >> 4);
          turi::flexible_type_fail(0);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
          goto LABEL_624;
        case 5:
          memset(&v390, 0, sizeof(v390));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v390, *((uint64_t **)v386[0] + 1), *((uint64_t **)v386[0] + 2), (v386[0][2] - v386[0][1]) >> 5);
          turi::flexible_type_fail(0);
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v360);
          goto LABEL_624;
        case 6:
          uint64_t v285 = (uint64_t)v386[0] << 8 >> 8;
          goto LABEL_625;
        case 7:
          goto LABEL_625;
        case 8:
          unint64_t v290 = v386[0];
          timeval v291 = (atomic_uint *)v386[0][2];
          v355 = (void **)v386[0][1];
          v356 = v291;
          if (v291) {
            atomic_fetch_add_explicit(v291 + 2, 1u, memory_order_relaxed);
          }
          long long v292 = *(_OWORD *)(v290 + 3);
          long long v293 = *(_OWORD *)(v290 + 7);
          long long v358 = *(_OWORD *)(v290 + 5);
          long long v359 = v293;
          long long v357 = v292;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v356);
          goto LABEL_624;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&v390, (uint64_t)(v386[0] + 1));
          turi::flexible_type_fail(0);
          if (v392)
          {
            v393 = v392;
            operator delete(v392);
          }
          if (v390.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v391 = v390.__r_.__value_.__r.__words[2];
            operator delete((void *)v390.__r_.__value_.__r.__words[2]);
          }
          if (v390.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v390.__r_.__value_.__l.__size_);
          }
LABEL_624:
          uint64_t v285 = 0;
LABEL_625:
          uint64_t v347 = v285;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)v275 + 56))(v275, &v348, &v347, a2);
          goto LABEL_577;
        default:
          goto LABEL_741;
      }
    default:
      break;
  }
LABEL_741:
  turi::flexible_type_fail(0);
  __break(1u);
}

void sub_2244DB484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43)
{
  if (*(char *)(v45 - 169) < 0) {
    operator delete(*(void **)(v45 - 192));
  }
  if (a41 < 0)
  {
    operator delete(__p);
    if ((v44 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v44)
  {
LABEL_8:
    turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)&a43);
    turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&STACK[0x260]);
    turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&STACK[0x2C0]);
    Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(a17);
    free(a26);
    switch(*(unsigned char *)(v45 - 228))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 240), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        uint64_t v47 = *(void *)(v45 - 240);
        if (!v47) {
          goto LABEL_34;
        }
        if (*(char *)(v47 + 31) < 0) {
          operator delete(*(void **)(v47 + 8));
        }
        int64_t v48 = (void *)v47;
        uint64_t v49 = 0x1012C404EF22A49;
        goto LABEL_33;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 240), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        uint64_t v53 = *(void **)(v45 - 240);
        if (!v53) {
          goto LABEL_34;
        }
        uint64_t v54 = (void *)v53[1];
        if (v54)
        {
          v53[2] = v54;
          operator delete(v54);
        }
        int64_t v48 = v53;
        uint64_t v49 = 0x1080C409938AC02;
        goto LABEL_33;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 240), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        unint64_t v50 = *(void **)(v45 - 240);
        if (!v50) {
          goto LABEL_34;
        }
        a43 = (uint64_t)(v50 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
        goto LABEL_28;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 240), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        unint64_t v50 = *(void **)(v45 - 240);
        if (!v50) {
          goto LABEL_34;
        }
        a43 = (uint64_t)(v50 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
LABEL_28:
        int64_t v48 = v50;
        uint64_t v49 = 0x1020C405E66F15BLL;
        goto LABEL_33;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 240), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        uint64_t v55 = *(void *)(v45 - 240);
        if (!v55) {
          goto LABEL_34;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v55 + 16));
        int64_t v48 = (void *)v55;
        unsigned int v52 = -235920773;
        goto LABEL_32;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 240), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        unint64_t v51 = *(void **)(v45 - 240);
        if (!v51) {
          goto LABEL_34;
        }
        int64_t v48 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v51);
        unsigned int v52 = 2071181815;
LABEL_32:
        uint64_t v49 = v52 | 0x1030C4000000000;
LABEL_33:
        MEMORY[0x22A614FA0](v48, v49);
LABEL_34:
        switch(*(unsigned char *)(v45 - 212))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_60;
            }
            uint64_t v56 = *(void *)(v45 - 224);
            if (!v56) {
              goto LABEL_60;
            }
            if (*(char *)(v56 + 31) < 0) {
              operator delete(*(void **)(v56 + 8));
            }
            int64_t v57 = (void *)v56;
            uint64_t v58 = 0x1012C404EF22A49;
            goto LABEL_59;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_60;
            }
            uint64_t v62 = *(void **)(v45 - 224);
            if (!v62) {
              goto LABEL_60;
            }
            uint64_t v63 = (void *)v62[1];
            if (v63)
            {
              v62[2] = v63;
              operator delete(v63);
            }
            int64_t v57 = v62;
            uint64_t v58 = 0x1080C409938AC02;
            goto LABEL_59;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_60;
            }
            uint64_t v59 = *(void **)(v45 - 224);
            if (!v59) {
              goto LABEL_60;
            }
            a43 = (uint64_t)(v59 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
            goto LABEL_54;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_60;
            }
            uint64_t v59 = *(void **)(v45 - 224);
            if (!v59) {
              goto LABEL_60;
            }
            a43 = (uint64_t)(v59 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
LABEL_54:
            int64_t v57 = v59;
            uint64_t v58 = 0x1020C405E66F15BLL;
            goto LABEL_59;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_60;
            }
            uint64_t v64 = *(void *)(v45 - 224);
            if (!v64) {
              goto LABEL_60;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(v64 + 16));
            int64_t v57 = (void *)v64;
            unsigned int v61 = -235920773;
            goto LABEL_58;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_60;
            }
            int64_t v60 = *(void **)(v45 - 224);
            if (!v60) {
              goto LABEL_60;
            }
            int64_t v57 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v60);
            unsigned int v61 = 2071181815;
LABEL_58:
            uint64_t v58 = v61 | 0x1030C4000000000;
LABEL_59:
            MEMORY[0x22A614FA0](v57, v58);
LABEL_60:
            switch(*(unsigned char *)(v45 - 196))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 208), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_86;
                }
                uint64_t v65 = *(void *)(v45 - 208);
                if (!v65) {
                  goto LABEL_86;
                }
                if (*(char *)(v65 + 31) < 0) {
                  operator delete(*(void **)(v65 + 8));
                }
                uint64_t v66 = (void *)v65;
                uint64_t v67 = 0x1012C404EF22A49;
                goto LABEL_85;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 208), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_86;
                }
                uint64_t v71 = *(void **)(v45 - 208);
                if (!v71) {
                  goto LABEL_86;
                }
                unint64_t v72 = (void *)v71[1];
                if (v72)
                {
                  v71[2] = v72;
                  operator delete(v72);
                }
                uint64_t v66 = v71;
                uint64_t v67 = 0x1080C409938AC02;
                goto LABEL_85;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 208), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_86;
                }
                uint64_t v68 = *(void **)(v45 - 208);
                if (!v68) {
                  goto LABEL_86;
                }
                a43 = (uint64_t)(v68 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
                goto LABEL_80;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 208), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_86;
                }
                uint64_t v68 = *(void **)(v45 - 208);
                if (!v68) {
                  goto LABEL_86;
                }
                a43 = (uint64_t)(v68 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
LABEL_80:
                uint64_t v66 = v68;
                uint64_t v67 = 0x1020C405E66F15BLL;
                goto LABEL_85;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 208), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_86;
                }
                uint64_t v73 = *(void *)(v45 - 208);
                if (!v73) {
                  goto LABEL_86;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)(v73 + 16));
                uint64_t v66 = (void *)v73;
                unsigned int v70 = -235920773;
                goto LABEL_84;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)(v45 - 208), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_86;
                }
                unint64_t v69 = *(void **)(v45 - 208);
                if (!v69) {
                  goto LABEL_86;
                }
                uint64_t v66 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v69);
                unsigned int v70 = 2071181815;
LABEL_84:
                uint64_t v67 = v70 | 0x1030C4000000000;
LABEL_85:
                MEMORY[0x22A614FA0](v66, v67);
LABEL_86:
                _Unwind_Resume(a1);
                return;
              default:
                goto LABEL_86;
            }
          default:
            goto LABEL_60;
        }
      default:
        goto LABEL_34;
    }
  }
  __cxa_free_exception(v43);
  goto LABEL_8;
}

uint64_t OUTLINED_FUNCTION_33(uint64_t a1)
{
  return *(void *)a1;
}

void turi::supervised::xgboost::make_row_batch(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  turi::ml_data_row_reference::from_row(a2, a1);
}

void sub_2244DC5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::make_simple_dmatrix(xgboost_old::io::DMatrixSimple *a1@<X8>)
{
}

void sub_2244DC710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  xgboost_old::io::DMatrixSimple::~DMatrixSimple(v13);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::io::DMatrixSimple::AddRow(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = (char **)(a1 + 26);
    uint64_t v8 = a1 + 28;
    uint64_t v9 = (char *)a1[27];
    do
    {
      if ((unint64_t)v9 >= *v8)
      {
        uint64_t v10 = (v9 - *v7) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = *v8 - (void)*v7;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 28), v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = &v14[8 * v10];
        *(void *)uint64_t v15 = *(void *)(v3 + 8 * v6);
        uint64_t v9 = v15 + 8;
        uint64_t v17 = (char *)a1[26];
        int64_t v16 = (char *)a1[27];
        if (v16 != v17)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          int64_t v16 = *v7;
        }
        a1[26] = v15;
        a1[27] = v9;
        a1[28] = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)uint64_t v9 = *(void *)(v3 + 8 * v6);
        v9 += 8;
      }
      a1[27] = v9;
      uint64_t v3 = *a2;
      uint64_t v19 = a2[1];
      unint64_t v20 = (*(_DWORD *)(*a2 + 8 * v6) + 1);
      if (a1[3] > v20) {
        unint64_t v20 = a1[3];
      }
      a1[3] = v20;
      ++v6;
      uint64_t v4 = v19 - v3;
    }
    while (v6 < (v19 - v3) >> 3);
  }
  unint64_t v21 = a1[25];
  uint64_t v22 = (uint64_t *)a1[24];
  uint64_t v23 = *(v22 - 1) + (v4 >> 3);
  if ((unint64_t)v22 >= v21)
  {
    uint64_t v25 = (uint64_t *)a1[23];
    uint64_t v26 = v22 - v25;
    if ((unint64_t)(v26 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = v21 - (void)v25;
    unint64_t v28 = (uint64_t)(v21 - (void)v25) >> 2;
    if (v28 <= v26 + 1) {
      unint64_t v28 = v26 + 1;
    }
    if (v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29)
    {
      uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 25), v29);
      uint64_t v25 = (uint64_t *)a1[23];
      uint64_t v22 = (uint64_t *)a1[24];
    }
    else
    {
      uint64_t v30 = 0;
    }
    unint64_t v31 = (uint64_t *)&v30[8 * v26];
    unint64_t v32 = &v30[8 * v29];
    *unint64_t v31 = v23;
    size_t v24 = v31 + 1;
    while (v22 != v25)
    {
      uint64_t v33 = *--v22;
      *--unint64_t v31 = v33;
    }
    a1[23] = v31;
    a1[24] = v24;
    a1[25] = v32;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    uint64_t *v22 = v23;
    size_t v24 = v22 + 1;
  }
  a1[24] = v24;
  ++a1[2];
  return (((uint64_t)v24 - a1[23]) >> 3) - 2;
}

void turi::supervised::xgboost::MakeFeatMap(std::vector<std::string> *a1, turi::ml_metadata **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)*a2;
  if (*((void *)*a2 + 1) != v8)
  {
    unint64_t v11 = 0;
    int v12 = 0;
    std::string::size_type v61 = *MEMORY[0x263F8C2B8];
    uint64_t v59 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    std::string::size_type v60 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    do
    {
      unint64_t v13 = (uint64_t *)(v8 + 16 * v11);
      uint64_t v15 = *v13;
      uint64_t v14 = (std::__shared_weak_count *)v13[1];
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v16 = *(unsigned __int8 *)(v15 + 28);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      else
      {
        unsigned int v16 = *(unsigned __int8 *)(v15 + 28);
      }
      if (v16 <= 9)
      {
        if (((1 << v16) & 0x23A) != 0)
        {
          for (unint64_t i = 0; ; ++i)
          {
            uint64_t v18 = (uint64_t *)(*(void *)*a2 + 16 * v11);
            uint64_t v20 = *v18;
            uint64_t v19 = (std::__shared_weak_count *)v18[1];
            if (v19)
            {
              atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v21 = *(void *)(v20 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
            else
            {
              unint64_t v21 = *(void *)(v20 + 64);
            }
            if (i >= v21) {
              break;
            }
            turi::ml_metadata::feature_name(*a2, v11, i, 1, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            xgboost_old::utils::FeatMap::PushBack(a1, v12 + i, (char *)p_p, "q");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_74;
        }
        if (!v16)
        {
          for (unint64_t j = 0; ; ++j)
          {
            unsigned int v52 = (uint64_t *)(*(void *)*a2 + 16 * v11);
            uint64_t v54 = *v52;
            uint64_t v53 = (std::__shared_weak_count *)v52[1];
            if (v53)
            {
              atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v55 = *(void *)(v54 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v53);
            }
            else
            {
              unint64_t v55 = *(void *)(v54 + 64);
            }
            if (j >= v55) {
              break;
            }
            uint64_t v56 = *(void *)*a2 + 16 * v11;
            uint64_t v58 = *(char **)v56;
            int64_t v57 = *(std::__shared_weak_count **)(v56 + 8);
            if (v57)
            {
              atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v57);
            }
            if (v58[23] < 0) {
              uint64_t v58 = *(char **)v58;
            }
            xgboost_old::utils::FeatMap::PushBack(a1, v12, v58, "int");
          }
          goto LABEL_74;
        }
        if (v16 == 2)
        {
          uint64_t v23 = 0;
          unint64_t v24 = 0;
          while (2)
          {
            uint64_t v25 = (uint64_t *)(*(void *)*a2 + 16 * v11);
            uint64_t v27 = *v25;
            uint64_t v26 = (std::__shared_weak_count *)v25[1];
            if (v26)
            {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v28 = *(void *)(v27 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
            else
            {
              unint64_t v28 = *(void *)(v27 + 64);
            }
            if (v24 < v28)
            {
              unint64_t v29 = (const void ***)(*(void *)*a2 + 16 * v11);
              unint64_t v31 = *v29;
              uint64_t v30 = (std::__shared_weak_count *)v29[1];
              if (v30)
              {
                atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                std::__shared_weak_count::__release_shared[abi:ne180100](v30);
              }
              if (*((char *)v31 + 23) >= 0) {
                size_t v32 = *((unsigned __int8 *)v31 + 23);
              }
              else {
                size_t v32 = (size_t)v31[1];
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&v63, v32 + 1);
              if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v33 = &v63;
              }
              else {
                uint64_t v33 = (std::string *)v63.__r_.__value_.__r.__words[0];
              }
              if (v32)
              {
                if (*((char *)v31 + 23) >= 0) {
                  unint64_t v34 = v31;
                }
                else {
                  unint64_t v34 = *v31;
                }
                memmove(v33, v34, v32);
              }
              *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v32) = 61;
              unint64_t v35 = (uint64_t *)(*(void *)*a2 + 16 * v11);
              uint64_t v37 = *v35;
              unint64_t v36 = (std::__shared_weak_count *)v35[1];
              if (v36)
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              }
              uint64_t v38 = (turi::flexible_type_impl *)(*(void *)(*(void *)(v37 + 32) + 80) + v23);
              switch(*((unsigned char *)v38 + 12))
              {
                case 0:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  goto LABEL_50;
                case 1:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
LABEL_50:
                  __p.__r_.__value_.__r.__words[0] = v61;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v61 - 24)) = v60;
                  __p.__r_.__value_.__r.__words[2] = v59;
                  uint64_t v67 = MEMORY[0x263F8C318] + 16;
                  if (v69 < 0) {
                    operator delete(v68);
                  }
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x22A614E30](&v70);
                  goto LABEL_57;
                case 2:
                  uint64_t v39 = *(void *)v38;
                  if (*(char *)(*(void *)v38 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(v39 + 8), *(void *)(v39 + 16));
                  }
                  else
                  {
                    long long v40 = *(_OWORD *)(v39 + 8);
                    v62.__r_.__value_.__r.__words[2] = *(void *)(v39 + 24);
                    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v40;
                  }
                  goto LABEL_57;
                case 3:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v38 + 8));
                  goto LABEL_57;
                case 4:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(void *)v38 + 8));
                  goto LABEL_57;
                case 5:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v38 + 8));
                  goto LABEL_57;
                case 6:
                  turi::flexible_type_impl::get_string_visitor::operator()(v38, &v62);
                  goto LABEL_57;
                case 7:
                  memset(&v62, 0, sizeof(v62));
                  goto LABEL_57;
                case 8:
                  turi::flexible_type_impl::get_string_visitor::operator()();
                  goto LABEL_57;
                case 9:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v38 + 8));
LABEL_57:
                  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v41 = &v62;
                  }
                  else {
                    uint64_t v41 = (std::string *)v62.__r_.__value_.__r.__words[0];
                  }
                  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type size = v62.__r_.__value_.__l.__size_;
                  }
                  unint64_t v43 = std::string::append(&v63, (const std::string::value_type *)v41, size);
                  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
                  int64_t v65 = v43->__r_.__value_.__r.__words[2];
                  *(_OWORD *)uint64_t v64 = v44;
                  v43->__r_.__value_.__l.__size_ = 0;
                  v43->__r_.__value_.__r.__words[2] = 0;
                  v43->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v62.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v63.__r_.__value_.__l.__data_);
                  }
                  if (v65 >= 0) {
                    uint64_t v45 = (char *)v64;
                  }
                  else {
                    uint64_t v45 = (char *)v64[0];
                  }
                  xgboost_old::utils::FeatMap::PushBack(a1, v12 + v24, v45, "i");
                  if (SHIBYTE(v65) < 0) {
                    operator delete(v64[0]);
                  }
                  ++v24;
                  v23 += 16;
                  continue;
                default:
                  turi::flexible_type_fail(0);
                  __break(1u);
                  return;
              }
            }
            goto LABEL_74;
          }
        }
      }
      assert_msg(0, (uint64_t)"Internal error: type not handled in xgboost switch statement.", a3, a4, a5, a6, a7, a8, v59);
LABEL_74:
      unint64_t v46 = *a2;
      uint64_t v8 = *(void *)*a2;
      uint64_t v47 = (uint64_t *)(v8 + 16 * v11);
      uint64_t v49 = *v47;
      int64_t v48 = (std::__shared_weak_count *)v47[1];
      if (v48)
      {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v50 = *(void *)(v49 + 64);
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        unint64_t v46 = *a2;
        uint64_t v8 = *(void *)*a2;
      }
      else
      {
        uint64_t v50 = *(void *)(v49 + 64);
      }
      v12 += v50;
      ++v11;
    }
    while (v11 < (*((void *)v46 + 1) - v8) >> 4);
  }
}

void sub_2244DCFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::utils::FeatMap::PushBack(std::vector<std::string> *this, int a2, char *a3, const char *a4)
{
  xgboost_old::utils::Check(-1431655765 * ((unint64_t)((char *)this->__end_ - (char *)this->__begin_) >> 3) == a2, "invalid fmap format", a3);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  std::vector<std::string>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
    if (v13) {
      uint64_t v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&this->__end_cap_, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14 + v10;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    long long v16 = *(_OWORD *)__p;
    v15->__r_.__value_.__r.__words[2] = v34;
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    __p[1] = 0;
    std::string::size_type v34 = 0;
    __p[0] = 0;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    uint64_t v17 = this->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v18 = SHIBYTE(v34);
    this->__end_ = v17;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v9 = *(_OWORD *)__p;
    end->__r_.__value_.__r.__words[2] = v34;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
    this->__end_ = end + 1;
  }
  if (!strcmp("i", a4))
  {
    int v20 = 0;
  }
  else if (!strcmp("q", a4))
  {
    int v20 = 1;
  }
  else if (!strcmp("int", a4))
  {
    int v20 = 2;
  }
  else
  {
    if (strcmp("float", a4)) {
      xgboost_old::utils::Error((xgboost_old::utils *)"unknown feature type, use i for indicator and q for quantity", v19);
    }
    int v20 = 3;
  }
  unint64_t v21 = this[1].__end_cap_.__value_;
  uint64_t v22 = (char *)this[1].__end_;
  if (v22 >= (char *)v21)
  {
    std::vector<std::string>::pointer begin = this[1].__begin_;
    uint64_t v25 = (v22 - (char *)begin) >> 2;
    if ((unint64_t)(v25 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v26 = (char *)v21 - (char *)begin;
    unint64_t v27 = ((char *)v21 - (char *)begin) >> 1;
    if (v27 <= v25 + 1) {
      unint64_t v27 = v25 + 1;
    }
    if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28)
    {
      unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&this[1].__end_cap_, v28);
      std::vector<std::string>::pointer begin = this[1].__begin_;
      uint64_t v22 = (char *)this[1].__end_;
    }
    else
    {
      unint64_t v29 = 0;
    }
    uint64_t v30 = (int *)&v29[4 * v25];
    unint64_t v31 = (std::string *)&v29[4 * v28];
    *uint64_t v30 = v20;
    uint64_t v23 = (std::string *)(v30 + 1);
    while (v22 != (char *)begin)
    {
      int v32 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--uint64_t v30 = v32;
    }
    this[1].__begin_ = (std::vector<std::string>::pointer)v30;
    this[1].__end_ = v23;
    this[1].__end_cap_.__value_ = v31;
    if (begin) {
      operator delete(begin);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v22 = v20;
    uint64_t v23 = (std::string *)(v22 + 4);
  }
  this[1].__end_ = v23;
}

void sub_2244DD2FC(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

uint64_t turi::supervised::xgboost::xgboost_model::_get_early_stopping_rounds(turi::supervised::xgboost::xgboost_model *this, char a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "early_stopping_rounds");
  uint64_t v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)this + 296, (const void **)__p);
  uint64_t v5 = v4;
  if (SBYTE7(v31) < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return 0;
    }
  }
  else if (!v4)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "early_stopping_rounds");
  unint64_t v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  turi::variant_converter<turi::flexible_type,void>::get(v6, (uint64_t)&v36);
  if (SBYTE7(v31) < 0) {
    operator delete(__p[0]);
  }
  if (v37 != 7)
  {
    switch(v37)
    {
      case 0:
        uint64_t v7 = *(void *)&v36;
        goto LABEL_31;
      case 1:
        uint64_t v7 = (uint64_t)v36;
        goto LABEL_31;
      case 2:
        double v8 = v36;
        size_t __idx = 0;
        long long v9 = (char *)(*(void *)&v36 + 8);
        if (*(char *)(*(void *)&v36 + 31) < 0) {
          long long v9 = *(char **)(*(void *)&v36 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v9);
        uint64_t v7 = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v31) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(*(void *)&v8 + 31) < 0) {
          uint64_t v10 = *(void *)(*(void *)&v8 + 16);
        }
        else {
          uint64_t v10 = *(unsigned __int8 *)(*(void *)&v8 + 31);
        }
        if (__idx != v10)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          unint64_t v28 = std::string::append(&v34, " cannot be interpreted as an integer");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *(void *)&long long v31 = *((void *)&v28->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_31;
      case 3:
        __p[1] = 0;
        *(void *)&long long v31 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(void *)&v36 + 8), *(void *)(*(void *)&v36 + 16), (uint64_t)(*(void *)(*(void *)&v36 + 16) - *(void *)(*(void *)&v36 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_30;
      case 4:
        __p[1] = 0;
        *(void *)&long long v31 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(void *)&v36 + 8), *(uint64_t **)(*(void *)&v36 + 16), (uint64_t)(*(void *)(*(void *)&v36 + 16) - *(void *)(*(void *)&v36 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        goto LABEL_30;
      case 5:
        __p[1] = 0;
        *(void *)&long long v31 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(void *)&v36 + 8), *(uint64_t **)(*(void *)&v36 + 16), (uint64_t)(*(void *)(*(void *)&v36 + 16) - *(void *)(*(void *)&v36 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
        goto LABEL_30;
      case 6:
        uint64_t v7 = (uint64_t)(*(void *)&v36 << 8) >> 8;
        goto LABEL_31;
      case 8:
        double v11 = v36;
        unint64_t v12 = *(atomic_uint **)(*(void *)&v36 + 16);
        __p[0] = *(void **)(*(void *)&v36 + 8);
        __p[1] = v12;
        if (v12) {
          atomic_fetch_add_explicit(v12 + 2, 1u, memory_order_relaxed);
        }
        long long v13 = *(_OWORD *)(*(void *)&v11 + 24);
        long long v14 = *(_OWORD *)(*(void *)&v11 + 56);
        long long v32 = *(_OWORD *)(*(void *)&v11 + 40);
        long long v33 = v14;
        long long v31 = v13;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_30;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)&v36 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v32 + 1))
        {
          *(void *)&long long v33 = *((void *)&v32 + 1);
          operator delete(*((void **)&v32 + 1));
        }
        if ((void)v31)
        {
          *((void *)&v31 + 1) = v31;
          operator delete((void *)v31);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_30:
        uint64_t v7 = 0;
LABEL_31:
        switch(v37)
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v15 = v36;
              if (v36 != 0.0)
              {
                if (*(char *)(*(void *)&v36 + 31) < 0) {
                  operator delete(*(void **)(*(void *)&v36 + 8));
                }
                double v16 = v15;
                uint64_t v17 = 0x1012C404EF22A49;
                goto LABEL_58;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v23 = v36;
              if (v36 != 0.0)
              {
                unint64_t v24 = *(void **)(*(void *)&v36 + 8);
                if (v24)
                {
                  *(void *)(*(void *)&v36 + 16) = v24;
                  operator delete(v24);
                }
                double v16 = v23;
                uint64_t v17 = 0x1080C409938AC02;
                goto LABEL_58;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v18 = v36;
              if (v36 != 0.0)
              {
                __p[0] = (void *)(*(void *)&v36 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_57;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v18 = v36;
              if (v36 != 0.0)
              {
                __p[0] = (void *)(*(void *)&v36 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_57:
                double v16 = v18;
                uint64_t v17 = 0x1020C405E66F15BLL;
                goto LABEL_58;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v25 = v36;
              if (v36 != 0.0)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v36 + 16));
                MEMORY[0x22A614FA0](*(void *)&v25, 0x1030C40F1F0227BLL);
              }
              double v36 = 0.0;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v19 = v36;
              if (v36 != 0.0)
              {
                int v20 = *(void **)(*(void *)&v36 + 48);
                if (v20)
                {
                  *(void *)(*(void *)&v36 + 56) = v20;
                  operator delete(v20);
                }
                unint64_t v21 = *(void **)(*(void *)&v19 + 24);
                if (v21)
                {
                  *(void *)(*(void *)&v19 + 32) = v21;
                  operator delete(v21);
                }
                uint64_t v22 = *(std::__shared_weak_count **)(*(void *)&v19 + 16);
                if (v22) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                }
                double v16 = v19;
                uint64_t v17 = 0x1030C407B73B9F7;
LABEL_58:
                MEMORY[0x22A614FA0](*(void *)&v16, v17);
              }
            }
            break;
          default:
            break;
        }
        if (v7)
        {
          if (*((void *)this + 44) == *((void *)this + 43)) {
            turi::supervised::xgboost::xgboost_model::_get_early_stopping_rounds(BOOL)::$_0::operator()();
          }
          if ((a2 & 1) == 0) {
            turi::supervised::xgboost::xgboost_model::_get_early_stopping_rounds(BOOL)::$_1::operator()();
          }
        }
        return v7;
      default:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  return 0;
}

void sub_2244DD89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v27)
  {
LABEL_8:
    switch(*(unsigned char *)(v28 - 60))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        uint64_t v30 = *(void *)(v28 - 72);
        if (!v30) {
          goto LABEL_34;
        }
        if (*(char *)(v30 + 31) < 0) {
          operator delete(*(void **)(v30 + 8));
        }
        long long v31 = (void *)v30;
        uint64_t v32 = 0x1012C404EF22A49;
        goto LABEL_33;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        double v36 = *(void **)(v28 - 72);
        if (!v36) {
          goto LABEL_34;
        }
        char v37 = (void *)v36[1];
        if (v37)
        {
          v36[2] = v37;
          operator delete(v37);
        }
        long long v31 = v36;
        uint64_t v32 = 0x1080C409938AC02;
        goto LABEL_33;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        long long v33 = *(void **)(v28 - 72);
        if (!v33) {
          goto LABEL_34;
        }
        a21 = v33 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        goto LABEL_28;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        long long v33 = *(void **)(v28 - 72);
        if (!v33) {
          goto LABEL_34;
        }
        a21 = v33 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
LABEL_28:
        long long v31 = v33;
        uint64_t v32 = 0x1020C405E66F15BLL;
        goto LABEL_33;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        uint64_t v38 = *(void *)(v28 - 72);
        if (!v38) {
          goto LABEL_34;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v38 + 16));
        long long v31 = (void *)v38;
        unsigned int v35 = -235920773;
        goto LABEL_32;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        std::string v34 = *(void **)(v28 - 72);
        if (!v34) {
          goto LABEL_34;
        }
        long long v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v34);
        unsigned int v35 = 2071181815;
LABEL_32:
        uint64_t v32 = v35 | 0x1030C4000000000;
LABEL_33:
        MEMORY[0x22A614FA0](v31, v32);
LABEL_34:
        _Unwind_Resume(a1);
        return;
      default:
        goto LABEL_34;
    }
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void turi::supervised::xgboost::xgboost_model::_checkpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "_checkpoint", 269, 1);
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Checkpointing to ", 17);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v12 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v12, &__p);
    uint64_t v7 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    double v8 = pthread_getspecific(*(void *)(v7 + 592));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        long long v9 = std::locale::use_facet(&v15, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v7);
        if (*(_DWORD *)(v7 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v14 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  v15.__locale_ = (std::locale::__imp *)-1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  double v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v25 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  turi::dir_archive::open_directory_for_write((uint64_t)&v15, (uint64_t)&v11, 0);
}

void sub_2244DDEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,std::locale a46)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::_save(turi::supervised::xgboost::xgboost_model *this, turi::oarchive *a2)
{
}

void turi::supervised::xgboost::xgboost_model::_restore_from_checkpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v3[0] = -1;
  memset(&v3[1], 0, 24);
  v3[4] = v4;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v9 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v2 = *(std::string *)a2;
  }
  turi::dir_archive::open_directory_for_read((uint64_t)v3, (uint64_t)&v2);
}

void sub_2244DEC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::locale a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,int a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,char a48)
{
}

void turi::supervised::xgboost::fast_evaluate(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, float **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = (void *)*a3;
  long long v5 = (void *)a3[1];
  if ((void *)*a3 != v5)
  {
    uint64_t v9 = (uint64_t)(a4 + 2);
    do
    {
      float v10 = (**(float (***)(void, uint64_t, uint64_t, void))*v4)(*v4, a1, a2, 0);
      float v11 = v10;
      long long v13 = a4[1];
      unint64_t v12 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v12)
      {
        std::locale v15 = *a4;
        uint64_t v16 = v13 - *a4;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v19);
          std::locale v15 = *a4;
          long long v13 = a4[1];
        }
        else
        {
          int v20 = 0;
        }
        long long v21 = (float *)&v20[4 * v16];
        float *v21 = v11;
        char v14 = v21 + 1;
        while (v13 != v15)
        {
          int v22 = *((_DWORD *)v13-- - 1);
          *((_DWORD *)v21-- - 1) = v22;
        }
        *a4 = v21;
        a4[1] = v14;
        a4[2] = (float *)&v20[4 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *long long v13 = v10;
        char v14 = v13 + 1;
      }
      a4[1] = v14;
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_2244DF080(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::parse_tracking_metric(uint64_t a1@<X0>, void *a2@<X8>)
{
  void v10[3] = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rmse");
    std::string::basic_string[abi:ne180100]<0>(v9, "max_error");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_regression_metrics, (const void **)&__p, 2);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0) {
        operator delete((void *)v9[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_regression_metrics, &dword_223D44000);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "accuracy");
    std::string::basic_string[abi:ne180100]<0>(v9, "log_loss");
    std::string::basic_string[abi:ne180100]<0>(v10, "auc");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_classifier_metrics, (const void **)&__p, 3);
    for (uint64_t j = 0; j != -9; j -= 3)
    {
      if (SHIBYTE(v10[j + 2]) < 0) {
        operator delete((void *)v10[j]);
      }
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::supervised::xgboost::parse_tracking_metric(turi::flexible_type const&,std::vector<std::string> const&,BOOL)::supported_classifier_metrics, &dword_223D44000);
  }
  memset(&v6, 0, sizeof(v6));
  if (*(unsigned char *)(a1 + 12) != 7)
  {
    v7.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v7.__r_.__value_.__r.__words[1]) = 0;
    v7.__r_.__value_.__s.__data_[12] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "auto");
    turi::flexible_type::operator=<std::string>((uint64_t)&v7);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __n128 __p = &v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2244E0370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v36 = 0;
  while (1)
  {
    if (*(char *)(v34 + v36 + 71) < 0) {
      operator delete(*(void **)(v34 + v36 + 48));
    }
    v36 -= 24;
    if (v36 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void turi::supervised::xgboost::transform_prediction(uint64_t *a1@<X8>)
{
}

void sub_2244E23FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a35);
  uint64_t v36 = *(std::__shared_weak_count **)(a15 + 8);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(a1);
}

void sub_2244E2B68()
{
  if (v0) {
    JUMPOUT(0x2244E2B74);
  }
  JUMPOUT(0x2244E2B54);
}

turi::thread_pool *turi::copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 248)) {
    BOOL v3 = *(unsigned char *)(a3 + 249) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
  }
  return turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(a1, a2, (uint64_t *)a3);
}

turi::thread_pool *turi::copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 248)) {
    BOOL v3 = *(unsigned char *)(a3 + 249) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
  }
  return turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(a1, a2, (uint64_t *)a3);
}

void turi::supervised::xgboost::transform_prediction_topk(const std::string::value_type **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, turi::sframe *a5@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v25 = a3;
  uint64_t v26 = a2;
  int v9 = turi::supervised::prediction_type_enum_from_name(a1);
  char v24 = v9;
  if (v9 != 3)
  {
    if (v9 == 6)
    {
      char v10 = 0;
LABEL_6:
      uint64_t v11 = *(void *)(*(void *)a4 + 24);
      uint64_t v13 = *(void *)(v11 + 32);
      uint64_t v12 = *(void *)(v11 + 40);
      v23[2] = v13;
      v23[3] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      if (a3 == 2) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = a3;
      }
      v23[1] = v14;
      std::string::basic_string[abi:ne180100]<0>(&__p, "id");
      std::string::basic_string[abi:ne180100]<0>(v28, "class");
      if (*((char *)a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v29, *a1, (std::string::size_type)a1[1]);
      }
      else {
        std::string v29 = *(std::string *)a1;
      }
      long long v21 = 0;
      int v22 = 0;
      v23[0] = 0;
      uint64_t v18 = &v21;
      LOBYTE(v19) = 0;
      long long v21 = (std::string *)operator new(0x48uLL);
      int v22 = v21;
      v23[0] = v21 + 3;
      uint64_t v15 = 0;
      int v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v23, (long long *)&__p, v30, v21);
      while (1)
      {
        if (SHIBYTE(v29.__r_.__value_.__r.__words[v15 + 2]) < 0) {
          operator delete(*(void **)((char *)&v29.__r_.__value_.__l.__data_ + v15 * 8));
        }
        v15 -= 3;
        if (v15 == -9)
        {
          char v16 = *(unsigned char *)(*(void *)(*(void *)a4 + 24) + 28);
          unint64_t v17 = operator new(3uLL);
          v20[1] = v17 + 3;
          void v20[2] = v17 + 3;
          *unint64_t v17 = 0;
          v17[1] = v16;
          v17[2] = v10;
          v20[0] = v17;
          turi::sframe::sframe(a5);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          turi::sframe::open_for_write((uint64_t)a5, &v21, v20, &__p, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
        }
      }
    }
    if (v9 != 5) {
      turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0::operator()();
    }
  }
  char v10 = 1;
  goto LABEL_6;
}

void sub_2244E31B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a36);
  turi::sframe::~sframe(v41);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  a9 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::trim_boost_learner()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::get_temp_name((turi::fs_impl *)__p);
}

void sub_2244E3394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x22A614FA0](v20, 0x10B3C40FBEE5559);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::learner::BoostLearner::SaveModel(xgboost_old::learner::BoostLearner *this, dmlc::Stream *a2, uint64_t a3)
{
  uint64_t v6 = dmlc::Stream::Create(a2, "w", 0);
  if (*((_DWORD *)this + 4) || !strcmp((const char *)a2, "stdout"))
  {
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v6 + 8))(v6, "bs64\t", 5);
    v8[0] = &unk_26D7845C8;
    v8[1] = v6;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    std::string __p = 0;
    int v9 = 0;
    xgboost_old::learner::BoostLearner::SaveModel((uint64_t)this, (uint64_t)v8, a3);
    xgboost_old::utils::Base64OutStream::Finish((xgboost_old::utils::Base64OutStream *)v8, 10);
    v8[0] = &unk_26D7845C8;
    if (SHIBYTE(v12) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v6 + 8))(v6, "binf", 4);
    xgboost_old::learner::BoostLearner::SaveModel((uint64_t)this, v6, a3);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_2244E3564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::learner::BoostLearner::LoadModel(std::string *this, dmlc::Stream *a2)
{
  uint64_t v4 = (dmlc::Stream *)dmlc::Stream::Create(a2, "r", 0);
  memset(&v22, 0, sizeof(v22));
  std::string::resize(&v22, 4uLL, 0);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v5 = &v22;
  }
  else {
    long long v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  BOOL v6 = (**(uint64_t (***)(dmlc::Stream *, std::string *, uint64_t))v4)(v4, v5, 4) != 0;
  xgboost_old::utils::Check(v6, "invalid model", v7);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v22.__r_.__value_.__l.__size_ != 4) {
      goto LABEL_11;
    }
    long long v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if (*(_DWORD *)v22.__r_.__value_.__l.__data_ != 875983714) {
      goto LABEL_10;
    }
  }
  else
  {
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) != 4) {
      goto LABEL_11;
    }
    if (LODWORD(v22.__r_.__value_.__l.__data_) != 875983714)
    {
      long long v8 = &v22;
LABEL_10:
      if (LODWORD(v8->__r_.__value_.__l.__data_) == 1718511970)
      {
        xgboost_old::learner::BoostLearner::LoadModel(this, v4, 1);
        goto LABEL_13;
      }
LABEL_11:
      (*(void (**)(dmlc::Stream *))(*(void *)v4 + 24))(v4);
      uint64_t v4 = (dmlc::Stream *)dmlc::Stream::Create(a2, "r", 0);
      xgboost_old::learner::BoostLearner::LoadModel(this, v4, 1);
      goto LABEL_12;
    }
  }
  char v16 = &unk_26D784668;
  xgboost_old::utils::StreamBufferReader::StreamBufferReader((xgboost_old::utils::StreamBufferReader *)&v17, 0x100uLL);
  unint64_t v17 = v4;
  int64x2_t v20 = vdupq_n_s64(1uLL);
  uint64_t v21 = 0;
  uint64_t v9 = MEMORY[0x263EF8318];
  do
  {
    uint64_t v10 = v20.i64[1];
    char v11 = v19;
    uint64_t v12 = (void **)__p;
    if (v20.i64[1] >= (unint64_t)v20.i64[0])
    {
      v20.i64[0] = (**(uint64_t (***)(dmlc::Stream *))v17)(v17);
      if (!v20.i64[0])
      {
        unsigned int v14 = -1;
        LODWORD(v21) = -1;
        goto LABEL_27;
      }
      uint64_t v10 = 0;
      char v11 = v19;
      uint64_t v12 = (void **)__p;
    }
    v20.i64[1] = v10 + 1;
    if (v11 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = v12;
    }
    unsigned int v14 = *((char *)p_p + v10);
    LODWORD(v21) = v14;
    if ((v14 & 0x80000000) == 0)
    {
      int v15 = *(_DWORD *)(v9 + 4 * v14 + 60) & 0x4000;
      continue;
    }
LABEL_27:
    int v15 = __maskrune(v14, 0x4000uLL);
  }
  while (v15);
  xgboost_old::learner::BoostLearner::LoadModel(this, (dmlc::Stream *)&v16, 1);
  char v16 = &unk_26D784668;
  if (v19 < 0) {
    operator delete(__p);
  }
LABEL_12:
  if (v4) {
LABEL_13:
  }
    (*(void (**)(dmlc::Stream *))(*(void *)v4 + 24))(v4);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_2244E3868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<xgboost_old::learner::BoostLearner>::reset[abi:ne180100]<xgboost_old::learner::BoostLearner,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<xgboost_old::learner::BoostLearner>::shared_ptr[abi:ne180100]<xgboost_old::learner::BoostLearner,void>(&v2, a2);
}

turi::supervised::xgboost::xgboost_model *turi::supervised::xgboost::xgboost_model::xgboost_model(turi::supervised::xgboost::xgboost_model *this)
{
  *((void *)this + 5) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = (char *)this + 112;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = (char *)this + 160;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 25) = (char *)this + 208;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = (char *)this + 280;
  *((void *)this + 35) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = (char *)this + 304;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((unsigned char *)this + 368) = 1;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *(void *)this = &unk_26D784490;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  turi::table_printer::table_printer((turi::supervised::xgboost::xgboost_model *)((char *)this + 424));
  *((void *)this + 151) = 0;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  gettimeofday((timeval *)this + 76, 0);
  turi::gl_sframe::gl_sframe((turi::supervised::xgboost::xgboost_model *)((char *)this + 1232));
  turi::gl_sframe::gl_sframe((turi::supervised::xgboost::xgboost_model *)((char *)this + 1256));
  turi::ml_data::ml_data((turi::supervised::xgboost::xgboost_model *)((char *)this + 1280));
  turi::ml_data::ml_data((turi::supervised::xgboost::xgboost_model *)((char *)this + 1472));
  *((_OWORD *)this + 104) = 0u;
  *((_DWORD *)this + 420) = 2;
  *((void *)this + 211) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 209);
  *((_OWORD *)this + 104) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  return this;
}

void sub_2244E3A94(_Unwind_Exception *a1)
{
  BOOL v6 = (std::__shared_weak_count *)*((void *)v1 + 209);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  turi::ml_data::~ml_data(v4);
  turi::ml_data::~ml_data(v3);
  *((void *)v1 + 157) = &unk_26D759E10;
  std::string v7 = (std::__shared_weak_count *)*((void *)v1 + 159);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *((void *)v1 + 154) = &unk_26D759E10;
  long long v8 = (std::__shared_weak_count *)*((void *)v1 + 156);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v1 + 150);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v1 + 148);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  turi::table_printer::~table_printer(v2);
  char v11 = (std::__shared_weak_count *)*((void *)v1 + 52);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v1 + 50);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  turi::supervised::supervised_learning_model_base::~supervised_learning_model_base(v1);
  _Unwind_Resume(a1);
}

void sub_2244E3B6C()
{
}

uint64_t turi::supervised::xgboost::xgboost_model::model_specific_init(turi::supervised::xgboost::xgboost_model *this, const turi::ml_data *a2, const turi::ml_data *a3)
{
  turi::ml_data::operator=((uint64_t)this + 1280, (uint64_t *)a2);
  return turi::ml_data::operator=((uint64_t)this + 1472, (uint64_t *)a3);
}

void turi::supervised::xgboost::convert_vec_string(void *a1@<X0>, uint64_t a2@<X8>)
{
  v2[2] = *MEMORY[0x263EF8340];
  if (*a1 != a1[1]) {
    turi::flexible_type::flexible_type<std::string>((uint64_t)v2);
  }
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 4;
  operator new();
}

void sub_2244E3F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  int v15 = v13;
  MEMORY[0x22A614FA0](v14, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v17 = *v12;
    if (*v12)
    {
      a12 = (void **)(v17 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
      MEMORY[0x22A614FA0](v17, 0x1020C405E66F15BLL);
    }
    *uint64_t v12 = 0;
  }
  *uint64_t v12 = 0;
  *((_DWORD *)v12 + 2) = 0;
  *((unsigned char *)v12 + 12) = 0;
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

size_t turi::supervised::xgboost::xgboost_model::is_random_forest(turi::supervised::xgboost::xgboost_model *this)
{
  uint64_t v1 = (const char *)(*(uint64_t (**)(turi::supervised::xgboost::xgboost_model *))(*(void *)this + 16))(this);
  size_t result = strlen(v1);
  if (result)
  {
    uint64_t v3 = 0;
    uint64_t v4 = result - 1;
    if (result - 1 >= 0xC) {
      uint64_t v4 = 12;
    }
    uint64_t v5 = v4 + 1;
    while (v1[v3] == aRandomForest[v3])
    {
      if (v5 == ++v3) {
        return v3 == 13;
      }
    }
    return 0;
  }
  return result;
}

uint64_t turi::supervised::xgboost::xgboost_model::init_options(xgboost_old::learner::BoostLearner **a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "_storage_mode");
  uint64_t v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  if (SBYTE7(v84) < 0) {
    operator delete(__p[0]);
  }
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v82, "_storage_mode");
    uint64_t v5 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v82.__r_.__value_.__l.__data_);
    LODWORD(v6) = 0;
    switch(v5[12])
    {
      case 0:
        uint64_t v6 = *(void *)v5;
        goto LABEL_33;
      case 1:
        uint64_t v6 = (uint64_t)*(double *)v5;
        goto LABEL_33;
      case 2:
        uint64_t v11 = *(void *)v5;
        uint64_t v12 = (char **)(*(void *)v5 + 8);
        __idx.__r_.__value_.__r.__words[0] = 0;
        uint64_t v13 = (char *)v12;
        if (*(char *)(v11 + 31) < 0) {
          uint64_t v13 = *v12;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v13);
        LODWORD(v6) = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
        if (SBYTE7(v84) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v11 + 31) < 0) {
          uint64_t v14 = *(void *)(v11 + 16);
        }
        else {
          uint64_t v14 = *(unsigned __int8 *)(v11 + 31);
        }
        if (__idx.__r_.__value_.__r.__words[0] != v14)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          char v69 = std::string::append(&v90, " cannot be interpreted as an integer");
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          *(void *)&long long v84 = *((void *)&v69->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_33;
      case 3:
        uint64_t v10 = *(void *)v5;
        __p[1] = 0;
        *(void *)&long long v84 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_32;
      case 4:
        uint64_t v15 = *(void *)v5;
        __p[1] = 0;
        *(void *)&long long v84 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
        goto LABEL_32;
      case 5:
        uint64_t v16 = *(void *)v5;
        __p[1] = 0;
        *(void *)&long long v84 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
        goto LABEL_32;
      case 6:
        uint64_t v6 = (uint64_t)(*(void *)v5 << 8) >> 8;
        goto LABEL_33;
      case 7:
        goto LABEL_33;
      case 8:
        uint64_t v17 = *(void *)v5;
        uint64_t v18 = *(atomic_uint **)(*(void *)v5 + 16);
        __p[0] = *(void **)(*(void *)v5 + 8);
        __p[1] = v18;
        if (v18) {
          atomic_fetch_add_explicit(v18 + 2, 1u, memory_order_relaxed);
        }
        long long v19 = *(_OWORD *)(v17 + 24);
        long long v20 = *(_OWORD *)(v17 + 56);
        long long v85 = *(_OWORD *)(v17 + 40);
        long long v86 = v20;
        long long v84 = v19;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_32;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v5 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v85 + 1))
        {
          *(void *)&long long v86 = *((void *)&v85 + 1);
          operator delete(*((void **)&v85 + 1));
        }
        if ((void)v84)
        {
          *((void *)&v84 + 1) = v84;
          operator delete((void *)v84);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_32:
        LODWORD(v6) = 0;
LABEL_33:
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        turi::supervised::xgboost::xgboost_model::_set_storage_mode((uint64_t)a1, v6);
        goto LABEL_117;
      default:
        goto LABEL_176;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "_internal_opts");
  uint64_t v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  uint64_t v8 = v7;
  if (SBYTE7(v84) < 0)
  {
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_117;
    }
  }
  else if (!v7)
  {
LABEL_117:
    std::string::basic_string[abi:ne180100]<0>(__p, "_num_batches");
    uint64_t v44 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
    uint64_t v45 = v44;
    if (SBYTE7(v84) < 0)
    {
      operator delete(__p[0]);
      if (!v45) {
        goto LABEL_148;
      }
    }
    else if (!v44)
    {
LABEL_148:
      std::string::basic_string[abi:ne180100]<0>(__p, "metric");
      uint64_t v59 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
      uint64_t v60 = v59;
      if (SBYTE7(v84) < 0)
      {
        operator delete(__p[0]);
        if (!v60) {
          goto LABEL_157;
        }
      }
      else if (!v59)
      {
        goto LABEL_157;
      }
      std::string::basic_string[abi:ne180100]<0>(&v90, "metric");
      uint64_t v61 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v90.__r_.__value_.__l.__data_);
      (*((void (**)(xgboost_old::learner::BoostLearner **))*a1 + 29))(a1);
      turi::supervised::xgboost::parse_tracking_metric(v61, __p);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      memset(&v79, 0, sizeof(v79));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v79, (long long *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
      if (a1 + 43 != (xgboost_old::learner::BoostLearner **)&v79) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 43), (std::string *)v79.__r_.__value_.__l.__data_, (long long *)v79.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 3));
      }
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
LABEL_157:
      std::string::basic_string[abi:ne180100]<0>(__p, "features");
      std::string::basic_string[abi:ne180100]<0>(&v90, "List of features that are considered during training and prediction for this model.");
      memset(&v82, 0, sizeof(v82));
      *(void *)&v91[5] = 0x400000000000000;
      *(void *)unint64_t v91 = 0;
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v82, "_num_batches");
    unint64_t v46 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v82.__r_.__value_.__l.__data_);
    LODWORD(v47) = 0;
    switch(v46[12])
    {
      case 0:
        uint64_t v47 = *(void *)v46;
        goto LABEL_145;
      case 1:
        uint64_t v47 = (uint64_t)*(double *)v46;
        goto LABEL_145;
      case 2:
        uint64_t v49 = *(void *)v46;
        uint64_t v50 = (char **)(*(void *)v46 + 8);
        __idx.__r_.__value_.__r.__words[0] = 0;
        unint64_t v51 = (char *)v50;
        if (*(char *)(v49 + 31) < 0) {
          unint64_t v51 = *v50;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v51);
        LODWORD(v47) = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
        if (SBYTE7(v84) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v49 + 31) < 0) {
          uint64_t v52 = *(void *)(v49 + 16);
        }
        else {
          uint64_t v52 = *(unsigned __int8 *)(v49 + 31);
        }
        if (__idx.__r_.__value_.__r.__words[0] != v52)
        {
          uint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          unint64_t v72 = std::string::append(&v90, " cannot be interpreted as an integer");
          long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          *(void *)&long long v84 = *((void *)&v72->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v71, (const std::string *)__p);
          __cxa_throw(v71, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_145;
      case 3:
        uint64_t v48 = *(void *)v46;
        __p[1] = 0;
        *(void *)&long long v84 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v48 + 8), *(void *)(v48 + 16), (uint64_t)(*(void *)(v48 + 16) - *(void *)(v48 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_144;
      case 4:
        uint64_t v53 = *(void *)v46;
        __p[1] = 0;
        *(void *)&long long v84 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(void *)(v53 + 16) - *(void *)(v53 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
        goto LABEL_144;
      case 5:
        uint64_t v54 = *(void *)v46;
        __p[1] = 0;
        *(void *)&long long v84 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v54 + 8), *(uint64_t **)(v54 + 16), (uint64_t)(*(void *)(v54 + 16) - *(void *)(v54 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
        goto LABEL_144;
      case 6:
        uint64_t v47 = (uint64_t)(*(void *)v46 << 8) >> 8;
        goto LABEL_145;
      case 7:
        goto LABEL_145;
      case 8:
        uint64_t v55 = *(void *)v46;
        uint64_t v56 = *(atomic_uint **)(*(void *)v46 + 16);
        __p[0] = *(void **)(*(void *)v46 + 8);
        __p[1] = v56;
        if (v56) {
          atomic_fetch_add_explicit(v56 + 2, 1u, memory_order_relaxed);
        }
        long long v57 = *(_OWORD *)(v55 + 24);
        long long v58 = *(_OWORD *)(v55 + 56);
        long long v85 = *(_OWORD *)(v55 + 40);
        long long v86 = v58;
        long long v84 = v57;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_144;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v46 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v85 + 1))
        {
          *(void *)&long long v86 = *((void *)&v85 + 1);
          operator delete(*((void **)&v85 + 1));
        }
        if ((void)v84)
        {
          *((void *)&v84 + 1) = v84;
          operator delete((void *)v84);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_144:
        LODWORD(v47) = 0;
LABEL_145:
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        turi::supervised::xgboost::xgboost_model::_set_num_batches((turi::supervised::xgboost::xgboost_model *)a1, (int)v47);
        goto LABEL_148;
      default:
        goto LABEL_175;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v82, "_internal_opts");
  uint64_t v9 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v82.__r_.__value_.__l.__data_);
  switch(v9[12])
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_47;
    case 2:
      uint64_t v23 = *(void *)v9;
      if (*(char *)(*(void *)v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v23 + 8), *(void *)(v23 + 16));
      }
      else
      {
        long long v24 = *(_OWORD *)(v23 + 8);
        *(void *)&long long v84 = *(void *)(v23 + 24);
        *(_OWORD *)std::string __p = v24;
      }
      turi::flexible_type_fail(0);
      memset(&v90, 0, sizeof(v90));
      if ((SBYTE7(v84) & 0x80000000) == 0) {
        goto LABEL_48;
      }
      std::string v22 = __p[0];
      goto LABEL_172;
    case 3:
      uint64_t v21 = *(void *)v9;
      __p[1] = 0;
      *(void *)&long long v84 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v21 + 8), *(void *)(v21 + 16), (uint64_t)(*(void *)(v21 + 16) - *(void *)(v21 + 8)) >> 3);
      turi::flexible_type_fail(0);
      memset(&v90, 0, sizeof(v90));
      std::string v22 = __p[0];
      if (!__p[0]) {
        goto LABEL_48;
      }
      __p[1] = __p[0];
LABEL_172:
      operator delete(v22);
      goto LABEL_48;
    case 4:
      uint64_t v62 = *(void *)v9;
      __p[1] = 0;
      *(void *)&long long v84 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v62 + 8), *(uint64_t **)(v62 + 16), (uint64_t)(*(void *)(v62 + 16) - *(void *)(v62 + 8)) >> 4);
      turi::flexible_type_fail(0);
      memset(&v90, 0, sizeof(v90));
      __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
      goto LABEL_48;
    case 5:
      uint64_t v63 = *(void *)v9;
      memset(&v90, 0, sizeof(v90));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v90, *(uint64_t **)(v63 + 8), *(uint64_t **)(v63 + 16), (uint64_t)(*(void *)(v63 + 16) - *(void *)(v63 + 8)) >> 5);
      goto LABEL_48;
    case 7:
LABEL_47:
      memset(&v90, 0, sizeof(v90));
      goto LABEL_48;
    case 8:
      uint64_t v64 = *(void *)v9;
      int64_t v65 = *(atomic_uint **)(*(void *)v9 + 16);
      __p[0] = *(void **)(*(void *)v9 + 8);
      __p[1] = v65;
      if (v65) {
        atomic_fetch_add_explicit(v65 + 2, 1u, memory_order_relaxed);
      }
      long long v66 = *(_OWORD *)(v64 + 24);
      long long v67 = *(_OWORD *)(v64 + 56);
      long long v85 = *(_OWORD *)(v64 + 40);
      long long v86 = v67;
      long long v84 = v66;
      turi::flexible_type_fail(0);
      memset(&v90, 0, sizeof(v90));
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_48;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v9 + 8);
      turi::flexible_type_fail(0);
      memset(&v90, 0, sizeof(v90));
      if (*((void *)&v85 + 1))
      {
        *(void *)&long long v86 = *((void *)&v85 + 1);
        operator delete(*((void **)&v85 + 1));
      }
      if ((void)v84)
      {
        *((void *)&v84 + 1) = v84;
        operator delete((void *)v84);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_48:
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      std::string::size_type size = v90.__r_.__value_.__l.__size_;
      if (v90.__r_.__value_.__r.__words[0] == v90.__r_.__value_.__l.__size_)
      {
LABEL_116:
        __p[0] = &v90;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_117;
      }
      unint64_t v77 = *(void **)(MEMORY[0x263F8C2B8] + 64);
      unint64_t v78 = (void *)*MEMORY[0x263F8C2B8];
      uint64_t v76 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      uint64_t v26 = (turi::flexible_type_impl *)(v90.__r_.__value_.__r.__words[0] + 16);
      while (2)
      {
        int v27 = (turi::flexible_type_impl *)((char *)v26 - 16);
        switch(*((unsigned char *)v26 - 4))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_61;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_61:
            __p[0] = v78;
            *(void **)((char *)__p + *((void *)v78 - 3)) = v77;
            *(void *)&long long v84 = v76;
            *((void *)&v84 + 1) = MEMORY[0x263F8C318] + 16;
            if (v88 < 0) {
              operator delete(v87);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x22A614E30](v89);
            goto LABEL_68;
          case 2:
            uint64_t v28 = *(void *)v27;
            if (*(char *)(*(void *)v27 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)(v28 + 8), *(void *)(v28 + 16));
            }
            else
            {
              long long v29 = *(_OWORD *)(v28 + 8);
              v82.__r_.__value_.__r.__words[2] = *(void *)(v28 + 24);
              *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v29;
            }
            goto LABEL_68;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v27 + 8));
            goto LABEL_68;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v27 + 8));
            goto LABEL_68;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v27 + 8));
            goto LABEL_68;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v27, &v82);
            goto LABEL_68;
          case 7:
            memset(&v82, 0, sizeof(v82));
            goto LABEL_68;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_68;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v27 + 8));
LABEL_68:
            switch(*((unsigned char *)v26 + 12))
            {
              case 0:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_77;
              case 1:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_77:
                __p[0] = v78;
                *(void **)((char *)__p + *((void *)v78 - 3)) = v77;
                *(void *)&long long v84 = v76;
                *((void *)&v84 + 1) = MEMORY[0x263F8C318] + 16;
                if (v88 < 0) {
                  operator delete(v87);
                }
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v89);
                goto LABEL_84;
              case 2:
                uint64_t v30 = *(void *)v26;
                if (*(char *)(*(void *)v26 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__idx, *(const std::string::value_type **)(v30 + 8), *(void *)(v30 + 16));
                }
                else
                {
                  long long v31 = *(_OWORD *)(v30 + 8);
                  __idx.__r_.__value_.__r.__words[2] = *(void *)(v30 + 24);
                  *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v31;
                }
                goto LABEL_84;
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v26 + 8));
                goto LABEL_84;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v26 + 8));
                goto LABEL_84;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v26 + 8));
                goto LABEL_84;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()(v26, &__idx);
                goto LABEL_84;
              case 7:
                memset(&__idx, 0, sizeof(__idx));
                goto LABEL_84;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_84;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v26 + 8));
LABEL_84:
                uint64_t v32 = (int *)global_logger();
                if (v32[169] <= 2)
                {
                  if (cppipc::must_cancel((cppipc *)v32)) {
                    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
                  }
                  long long v33 = (file_logger *)global_logger();
                  started = file_logger::start_stream(v33, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "init_options", 728, 1);
                  unsigned int v35 = pthread_getspecific(*((void *)started + 74));
                  if (v35 && *((unsigned char *)v35 + 280)) {
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)"Set internal learner option: ", 29);
                  }
                  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v81, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v81 = v82;
                  }
                  uint64_t v36 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v81);
                  char v37 = pthread_getspecific(*(void *)(v36 + 592));
                  if (v37 && *((unsigned char *)v37 + 280)) {
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"=", 1);
                  }
                  if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v80, __idx.__r_.__value_.__l.__data_, __idx.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v80 = __idx;
                  }
                  uint64_t v38 = file_logger::operator<<<std::string>(v36, (uint64_t)&v80);
                  uint64_t v39 = pthread_getspecific(*(void *)(v38 + 592));
                  if (v39)
                  {
                    if (*((unsigned char *)v39 + 280))
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(v39[2] - 24) + 16));
                      long long v40 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
                      ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
                      std::locale::~locale((std::locale *)__p);
                      std::ostream::put();
                      std::ostream::flush();
                      file_logger::stream_flush((file_logger *)v38);
                      if (*(_DWORD *)(v38 + 600) == 7)
                      {
                        __print_back_trace();
                        uint64_t v74 = __cxa_allocate_exception(8uLL);
                        void *v74 = "LOG_FATAL encountered";
                        __cxa_throw(v74, MEMORY[0x263F8C1D8], 0);
                      }
                    }
                  }
                  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v80.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v81.__r_.__value_.__l.__data_);
                  }
                }
                if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v41 = &v82;
                }
                else {
                  uint64_t v41 = (std::string *)v82.__r_.__value_.__r.__words[0];
                }
                if ((__idx.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_idx = &__idx;
                }
                else {
                  p_idx = (std::string *)__idx.__r_.__value_.__r.__words[0];
                }
                xgboost_old::learner::BoostLearner::SetParam(a1[208], (std::string::value_type *)v41, (char *)p_idx);
                if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__idx.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v82.__r_.__value_.__l.__data_);
                }
                unint64_t v43 = (char *)v26 + 16;
                uint64_t v26 = (turi::flexible_type_impl *)((char *)v26 + 32);
                if (v43 == (unsigned char *)size) {
                  goto LABEL_116;
                }
                continue;
              default:
                goto LABEL_175;
            }
          default:
LABEL_175:
            uint64_t result = turi::flexible_type_fail(0);
            break;
        }
        break;
      }
LABEL_177:
      __break(1u);
      return result;
    default:
LABEL_176:
      uint64_t result = turi::flexible_type_fail(0);
      goto LABEL_177;
  }
}

void sub_2244E5CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 161) < 0)
  {
    operator delete(*(void **)(v47 - 184));
    if ((v46 & 1) == 0)
    {
LABEL_8:
      if (a38 < 0) {
        operator delete(a33);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

void turi::supervised::xgboost::xgboost_model::_set_storage_mode(uint64_t a1, int a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "_set_storage_mode", 761, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Set storage mode to ", 20);
    }
    uint64_t v8 = file_logger::operator<<<int>((uint64_t)started);
    uint64_t v9 = pthread_getspecific(*(void *)(v8 + 592));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 1680) = a2;
}

void sub_2244E667C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::supervised::xgboost::xgboost_model::_set_num_batches(turi::supervised::xgboost::xgboost_model *this, uint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "_set_num_batches", 766, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Set number of batches to ", 25);
    }
    uint64_t v8 = file_logger::operator<<<unsigned long>((uint64_t)started);
    uint64_t v9 = pthread_getspecific(*(void *)(v8 + 592));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  *((void *)this + 211) = a2;
}

void sub_2244E681C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

unint64_t turi::supervised::xgboost::xgboost_model::num_classes(turi::supervised::xgboost::xgboost_model *this)
{
  if (!(*(unsigned int (**)(turi::supervised::xgboost::xgboost_model *))(*(void *)this + 232))(this)) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num_classes");
  long long v2 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 296, (const void **)__p);
  unint64_t v3 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v7, v2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_2244E68CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::xgboost_model::_init_data(turi::supervised::xgboost::xgboost_model *this@<X0>, void **a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *(void *)&v25[5] = 0x700000000000000;
  *(void *)uint64_t v25 = 0;
  if ((*(unsigned int (**)(turi::supervised::xgboost::xgboost_model *))(*(void *)this + 232))(this)) {
    turi::supervised::get_class_weights_from_options((uint64_t)this + 224, (uint64_t)this + 376, (uint64_t)&v22);
  }
  uint64_t v20 = *((void *)this + 187) - *((void *)this + 186);
  std::string::basic_string[abi:ne180100]<0>(&v22, "num_validation_examples");
  __p[0] = &v22;
  uint64_t v4 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v22, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(v4 + 14, &v20);
  if (v24 < 0) {
    operator delete(v22);
  }
  std::allocate_shared[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,std::allocator<turi::supervised::xgboost::DMatrixMLData>,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,void>((uint64_t)this + 1280, (uint64_t)v25, (unsigned int *)this + 420, (void *)this + 211, &v22);
  if (*((void *)this + 187) == *((void *)this + 186))
  {
    uint64_t v5 = 0;
    char v6 = 0;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,std::allocator<turi::supervised::xgboost::DMatrixMLData>,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,void>((uint64_t)this + 1472, (uint64_t)v25, (unsigned int *)this + 420, (void *)this + 211, __p);
    uint64_t v5 = __p[0];
    char v6 = (std::__shared_weak_count *)__p[1];
  }
  char v7 = v23;
  *a2 = v22;
  a2[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a2[2] = v5;
  a2[3] = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  switch(v25[12])
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void **)v25;
        if (*(void *)v25)
        {
          if (*(char *)(*(void *)v25 + 31) < 0) {
            operator delete(*(void **)(*(void *)v25 + 8));
          }
          uint64_t v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_45;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = *(void **)v25;
        if (*(void *)v25)
        {
          std::locale v12 = *(void **)(*(void *)v25 + 8);
          if (v12)
          {
            *(void *)(*(void *)v25 + 16) = v12;
            operator delete(v12);
          }
          uint64_t v9 = v11;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_45;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = *(void **)v25;
        if (*(void *)v25)
        {
          std::string v22 = (void *)(*(void *)v25 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
          goto LABEL_31;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = *(void **)v25;
        if (*(void *)v25)
        {
          std::string v22 = (void *)(*(void *)v25 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
LABEL_31:
          uint64_t v9 = v13;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_45;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *(void **)v25;
        if (*(void *)v25)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v25 + 16));
          uint64_t v9 = v14;
          unsigned int v15 = -235920773;
          goto LABEL_44;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = *(void **)v25;
        if (*(void *)v25)
        {
          uint64_t v17 = *(void **)(*(void *)v25 + 48);
          if (v17)
          {
            *(void *)(*(void *)v25 + 56) = v17;
            operator delete(v17);
          }
          uint64_t v18 = (void *)v16[3];
          if (v18)
          {
            void v16[4] = v18;
            operator delete(v18);
          }
          long long v19 = (std::__shared_weak_count *)v16[2];
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          uint64_t v9 = v16;
          unsigned int v15 = 2071181815;
LABEL_44:
          uint64_t v10 = v15 | 0x1030C4000000000;
LABEL_45:
          MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2244E6E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  switch(*(unsigned char *)(v22 - 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v24 = *(void *)(v22 - 56);
      if (!v24) {
        goto LABEL_29;
      }
      if (*(char *)(v24 + 31) < 0) {
        operator delete(*(void **)(v24 + 8));
      }
      uint64_t v25 = (void *)v24;
      uint64_t v26 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v30 = *(void **)(v22 - 56);
      if (!v30) {
        goto LABEL_29;
      }
      long long v31 = (void *)v30[1];
      if (v31)
      {
        v30[2] = v31;
        operator delete(v31);
      }
      uint64_t v25 = v30;
      uint64_t v26 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      int v27 = *(void **)(v22 - 56);
      if (!v27) {
        goto LABEL_29;
      }
      a17 = v27 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      int v27 = *(void **)(v22 - 56);
      if (!v27) {
        goto LABEL_29;
      }
      a17 = v27 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_23:
      uint64_t v25 = v27;
      uint64_t v26 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v32 = *(void *)(v22 - 56);
      if (!v32) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v32 + 16));
      uint64_t v25 = (void *)v32;
      unsigned int v29 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v28 = *(void **)(v22 - 56);
      if (!v28) {
        goto LABEL_29;
      }
      uint64_t v25 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v28);
      unsigned int v29 = 2071181815;
LABEL_27:
      uint64_t v26 = v29 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v25, v26);
LABEL_29:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_29;
  }
}

void turi::supervised::xgboost::xgboost_model::_init_learner(xgboost_old::learner::BoostLearner **a1, xgboost_old::learner::DMatrix **a2, uint64_t *a3, char a4, uint64_t a5, char a6)
{
  (*((void (**)(xgboost_old::learner::BoostLearner **))*a1 + 33))(a1);
  uint64_t v12 = *a3;
  uint64_t v13 = (char **)a1[208];
  if (v12)
  {
    uint64_t v14 = *a2;
    unsigned int v15 = operator new(0x10uLL);
    uint64_t v20 = v15 + 2;
    uint64_t v21 = v15 + 2;
    *unsigned int v15 = v14;
    v15[1] = v12;
    std::string __p = v15;
  }
  else
  {
    uint64_t v17 = *a2;
    uint64_t v18 = operator new(8uLL);
    std::string __p = v18;
    *uint64_t v18 = v17;
    uint64_t v20 = v18 + 1;
    uint64_t v21 = v18 + 1;
  }
  xgboost_old::learner::BoostLearner::SetCacheData(v13, (uint64_t)&__p, v16);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  if (*((unsigned char *)*a2 + 184)) {
    xgboost_old::learner::BoostLearner::SetParam(a1[208], "updater", "grow_histmaker,prune");
  }
  if (a4 & 1) != 0 || (a6)
  {
    if ((a6 & 1) == 0) {
      turi::supervised::xgboost::xgboost_model::_restore_from_checkpoint((uint64_t)a1, a5);
    }
  }
  else
  {
    xgboost_old::learner::BoostLearner::InitModel(a1[208]);
  }
  xgboost_old::learner::BoostLearner::CheckInit(a1[208], *a2);
}

void sub_2244E7224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::learner::BoostLearner::SetCacheData(char **a1, uint64_t a2, const char *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  xgboost_old::utils::Assert(a1[44] == a1[43], "can only call cache data once", a3);
  char v6 = *(uint64_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7 != *(void *)a2)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a1 + 43;
    while (v8)
    {
      uint64_t v11 = 0;
      char v12 = 0;
      uint64_t v13 = v6[v8];
      do
        v12 |= v13 == v6[v11++];
      while (v8 != v11);
      if ((v12 & 1) == 0) {
        goto LABEL_9;
      }
LABEL_26:
      if (++v8 >= (unint64_t)((v7 - (uint64_t)v6) >> 3)) {
        goto LABEL_29;
      }
    }
    uint64_t v13 = *v6;
LABEL_9:
    *(void *)(v13 + 176) = a1;
    uint64_t v14 = v6[v8];
    uint64_t v15 = *(void *)(v14 + 16);
    uint64_t v17 = a1[44];
    unint64_t v16 = (unint64_t)a1[45];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *v10) >> 3);
      unint64_t v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)*v10) >> 3);
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22) {
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(a1 + 45), v22);
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = &v23[24 * v19];
      *(void *)uint64_t v24 = v14;
      *((void *)v24 + 1) = v9;
      *((void *)v24 + 2) = v15;
      uint64_t v26 = a1[43];
      uint64_t v25 = a1[44];
      int v27 = v24;
      if (v25 != v26)
      {
        do
        {
          long long v28 = *(_OWORD *)(v25 - 24);
          *((void *)v27 - 1) = *((void *)v25 - 1);
          *(_OWORD *)(v27 - 24) = v28;
          v27 -= 24;
          v25 -= 24;
        }
        while (v25 != v26);
        uint64_t v25 = *v10;
      }
      uint64_t v18 = v24 + 24;
      a1[43] = v27;
      a1[44] = v24 + 24;
      a1[45] = &v23[24 * v22];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(void *)uint64_t v17 = v14;
      *((void *)v17 + 1) = v9;
      uint64_t v18 = v17 + 24;
      *((void *)v17 + 2) = v15;
    }
    a1[44] = v18;
    char v6 = *(uint64_t **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    v9 += *(void *)(*(void *)(*(void *)a2 + 8 * v8) + 16);
    goto LABEL_26;
  }
  uint64_t v9 = 0;
LABEL_29:
  xgboost_old::utils::SPrintf((xgboost_old::utils *)v29, (char *)0x19, "%lu", v5, v9);
  xgboost_old::learner::BoostLearner::SetParam((xgboost_old::learner::BoostLearner *)a1, "num_pbuffer", v29);
  a1[4] = (char *)v9;
}

uint64_t xgboost_old::learner::BoostLearner::InitModel(xgboost_old::learner::BoostLearner *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v3 = (char *)*((void *)this + 43);
  long long v2 = (char *)*((void *)this + 44);
  int64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    unint64_t v6 = v4 / 24;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      uint64_t v7 = *(void *)v3;
      v3 += 24;
      unsigned int v8 = *(_DWORD *)(v7 + 24);
      if (v5 <= v8) {
        unsigned int v5 = v8;
      }
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)uint64_t v15 = v5;
  rabit::engine::Allreduce_((uint64_t)v15, 4, 1, (uint64_t)rabit::op::Reducer<rabit::op::Max,unsigned int>, 3, 0, 0, 0);
  uint64_t v10 = *(unsigned int *)v15;
  uint64_t v11 = *((unsigned int *)this + 19);
  if (*(_DWORD *)v15 > v11)
  {
    *((_DWORD *)this + 19) = *(_DWORD *)v15;
    uint64_t v11 = v10;
  }
  xgboost_old::utils::SPrintf((xgboost_old::utils *)v15, (char *)0x19, "%d", v9, v11);
  xgboost_old::learner::BoostLearner::SetParam(this, "bst:num_feature", v15);
  xgboost_old::learner::BoostLearner::InitObjGBM((uint64_t)this, v12, v13);
  *((float *)this + 18) = (*(float (**)(void, float))(**((void **)this + 30) + 56))(*((void *)this + 30), *((float *)this + 18));
  return (*(uint64_t (**)(void))(**((void **)this + 26) + 32))(*((void *)this + 26));
}

void xgboost_old::learner::BoostLearner::CheckInit(xgboost_old::learner::BoostLearner *this, xgboost_old::learner::DMatrix *a2)
{
  unint64_t v4 = *((int *)a2 + 6);
  unsigned __int8 v7 = 1;
  std::vector<BOOL>::vector(__p, v4, &v7);
  if (*((_DWORD *)this + 7) || *((_DWORD *)this + 6) == 2) {
    uint64_t v5 = 0x8000;
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = (**(uint64_t (***)(xgboost_old::learner::DMatrix *))a2)(a2);
  (*(void (**)(uint64_t, void **, uint64_t, float))(*(void *)v6 + 24))(v6, __p, v5, *((float *)this + 10));
  if (*((_DWORD *)a2 + 2) == -21758) {
    xgboost_old::learner::BoostLearner::SetParam(this, "updater", "grow_histmaker,prune");
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_2244E7704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::xgboost_model::_init_progress_printer(turi::supervised::xgboost::xgboost_model *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)&long long v37 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v33, "Iteration");
  uint64_t v35 = 8;
  std::string::basic_string[abi:ne180100]<0>(v36, "Elapsed Time");
  v36[3] = 8;
  long long v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  v29.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v30 = (std::string *)operator new(0x40uLL);
  long long v31 = v30;
  uint64_t v32 = (std::string *)((char *)v30 + 64);
  uint64_t v5 = 0;
  long long v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*>((uint64_t)&v32, &v33, &v37, v30);
  do
  {
    if (SHIBYTE(v36[v5 + 2]) < 0) {
      operator delete((void *)v36[v5]);
    }
    v5 -= 4;
  }
  while (v5 != -8);
  uint64_t v6 = *((void *)this + 43);
  uint64_t v7 = *((void *)this + 44);
  if (v6 != v7)
  {
    while (1)
    {
      turi::supervised::supervised_learning_model_base::get_metric_display_name(v6, &v29);
      std::operator+<char>();
      unsigned int v8 = v31;
      if (v31 >= v32) {
        break;
      }
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v8->__r_.__value_.__r.__words[2] = v28;
      v8[1].__r_.__value_.__r.__words[0] = 6;
      long long v31 = (std::string *)((char *)v8 + 32);
      if (a2) {
        goto LABEL_16;
      }
LABEL_25:
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      v6 += 24;
      if (v6 == v7) {
        goto LABEL_28;
      }
    }
    uint64_t v9 = ((char *)v31 - (char *)v30) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)v32 - (char *)v30;
    if (((char *)v32 - (char *)v30) >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v36[0] = &v32;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&v32, v12);
    uint64_t v14 = &v13[32 * v9];
    *(void *)&long long v33 = v13;
    *((void *)&v33 + 1) = v14;
    uint64_t v35 = (uint64_t)&v13[32 * v15];
    *((void *)v14 + 2) = v28;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)__p;
    std::string::size_type v28 = 0;
    *(_OWORD *)std::string __p = 0uLL;
    *((void *)v14 + 3) = 6;
    uint64_t v34 = v14 + 32;
    std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer((uint64_t *)&v30, &v33);
    uint64_t v16 = v31;
    std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v33);
    long long v31 = v16;
    if (!a2) {
      goto LABEL_25;
    }
LABEL_16:
    std::operator+<char>();
    uint64_t v17 = v31;
    if (v31 >= v32)
    {
      uint64_t v18 = ((char *)v31 - (char *)v30) >> 5;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 59) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = (char *)v32 - (char *)v30;
      if (((char *)v32 - (char *)v30) >> 4 > v19) {
        unint64_t v19 = v20 >> 4;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      v36[0] = &v32;
      unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&v32, v21);
      uint64_t v23 = &v22[32 * v18];
      *(void *)&long long v33 = v22;
      *((void *)&v33 + 1) = v23;
      uint64_t v35 = (uint64_t)&v22[32 * v24];
      *((void *)v23 + 2) = v28;
      *(_OWORD *)uint64_t v23 = *(_OWORD *)__p;
      std::string::size_type v28 = 0;
      *(_OWORD *)std::string __p = 0uLL;
      *((void *)v23 + 3) = 6;
      uint64_t v34 = v23 + 32;
      std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer((uint64_t *)&v30, &v33);
      uint64_t v25 = v31;
      std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&v33);
      long long v31 = v25;
    }
    else
    {
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v17->__r_.__value_.__r.__words[2] = v28;
      v17[1].__r_.__value_.__r.__words[0] = 6;
      long long v31 = (std::string *)((char *)v17 + 32);
    }
    goto LABEL_25;
  }
LABEL_28:
  turi::table_printer::table_printer(a3, &v30, 1);
  *(void *)&long long v33 = &v30;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_2244E7A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  a16 = &a22;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::xgboost_model::init_training(uint64_t a1, const turi::gl_sframe *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  if (a6)
  {
    uint64_t v10 = turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a5);
    uint64_t v12 = *(unsigned __int8 *)(a4 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a4 + 8);
    }
    if (v12)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "target");
      turi::flexible_type::flexible_type<std::string>((uint64_t)&v145);
    }
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v122);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v120, a2);
  std::string::basic_string[abi:ne180100]<0>(&v141, "random_seed");
  uint64_t v13 = (unsigned char *)turi::option_manager::value(a1 + 224, (const void **)&v141);
  switch(v13[12])
  {
    case 0:
    case 1:
    case 6:
    case 7:
      goto LABEL_27;
    case 2:
      uint64_t v15 = *(void *)v13;
      uint64_t v16 = (char **)(*(void *)v13 + 8);
      __idx.__r_.__value_.__r.__words[0] = 0;
      uint64_t v17 = (char *)v16;
      if (*(char *)(v15 + 31) < 0) {
        uint64_t v17 = *v16;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v17);
      std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
      if (SBYTE7(v127) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v15 + 31) < 0) {
        uint64_t v18 = *(void *)(v15 + 16);
      }
      else {
        uint64_t v18 = *(unsigned __int8 *)(v15 + 31);
      }
      if (__idx.__r_.__value_.__r.__words[0] != v18)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v30 = std::string::append(&v145, " cannot be interpreted as an integer");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        *(void *)&long long v127 = *((void *)&v30->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_27;
    case 3:
      uint64_t v14 = *(void *)v13;
      __p[1] = 0;
      *(void *)&long long v127 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v14 + 8), *(void *)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_27;
    case 4:
      uint64_t v19 = *(void *)v13;
      __p[1] = 0;
      *(void *)&long long v127 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
      goto LABEL_27;
    case 5:
      uint64_t v20 = *(void *)v13;
      __p[1] = 0;
      *(void *)&long long v127 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v145);
      goto LABEL_27;
    case 8:
      uint64_t v21 = *(void *)v13;
      unint64_t v22 = *(atomic_uint **)(*(void *)v13 + 16);
      __p[0] = *(void **)(*(void *)v13 + 8);
      __p[1] = v22;
      if (v22) {
        atomic_fetch_add_explicit(v22 + 2, 1u, memory_order_relaxed);
      }
      long long v23 = *(_OWORD *)(v21 + 24);
      long long v24 = *(_OWORD *)(v21 + 56);
      long long v128 = *(_OWORD *)(v21 + 40);
      long long v129 = v24;
      long long v127 = v23;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_27;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v13 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v128 + 1))
      {
        *(void *)&long long v129 = *((void *)&v128 + 1);
        operator delete(*((void **)&v128 + 1));
      }
      if ((void)v127)
      {
        *((void *)&v127 + 1) = v127;
        operator delete((void *)v127);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_27:
      turi::supervised::create_validation_data((const turi::gl_sframe *)v120, a3, (turi::gl_sframe *)v146);
      turi::gl_sframe::operator=((uint64_t)a2, (uint64_t)v146);
      turi::gl_sframe::operator=((uint64_t)v122, (uint64_t)v148);
      v148[0] = &unk_26D759E10;
      if (v149) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v149);
      }
      v146[0] = &unk_26D759E10;
      if (v147) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v147);
      }
      if (SHIBYTE(v143) < 0) {
        operator delete(v141);
      }
      v120[0] = &unk_26D759E10;
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      std::string::basic_string[abi:ne180100]<0>(v146, "target");
      uint64_t v25 = (turi::flexible_type_impl *)turi::option_manager::value(a1 + 224, (const void **)v146);
      switch(*((unsigned char *)v25 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_44;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_44:
          __p[0] = *(void **)MEMORY[0x263F8C2B8];
          uint64_t v28 = *(void *)(MEMORY[0x263F8C2B8] + 72);
          *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
          *(void *)&long long v127 = v28;
          *((void *)&v127 + 1) = MEMORY[0x263F8C318] + 16;
          if (SHIBYTE(v131[0]) < 0) {
            operator delete(v130);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v132);
          goto LABEL_54;
        case 2:
          uint64_t v26 = *(void *)v25;
          if (*(char *)(*(void *)v25 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)(v26 + 8), *(void *)(v26 + 16));
          }
          else
          {
            long long v27 = *(_OWORD *)(v26 + 8);
            v119.__r_.__value_.__r.__words[2] = *(void *)(v26 + 24);
            *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v27;
          }
          goto LABEL_54;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v25 + 8));
          goto LABEL_54;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v25 + 8));
          goto LABEL_54;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v25 + 8));
          goto LABEL_54;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v25, &v119);
          goto LABEL_54;
        case 7:
          memset(&v119, 0, sizeof(v119));
          goto LABEL_54;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_54;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v25 + 8));
LABEL_54:
          if (SHIBYTE(v147) < 0) {
            operator delete(v146[0]);
          }
          turi::gl_sframe::gl_sframe((turi::gl_sframe *)v118, a2);
          turi::gl_sframe::remove_column((uint64_t)v118, (unsigned __int8 **)&v119);
          std::string::basic_string[abi:ne180100]<0>(__p, "features");
          uint64_t v32 = turi::option_manager::value(a1 + 224, (const void **)__p);
          double v106 = *(double *)v32;
          int v33 = *(_DWORD *)(v32 + 8);
          unsigned int v34 = *(unsigned __int8 *)(v32 + 12);
          if (v34 <= 9 && ((1 << v34) & 0x33C) != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)&v106, 1uLL);
          }
          if (SBYTE7(v127) < 0) {
            operator delete(__p[0]);
          }
          break;
        default:
          goto LABEL_242;
      }
      break;
    default:
LABEL_242:
      uint64_t result = turi::flexible_type_fail(0);
      goto LABEL_243;
  }
  switch(byte_268088B04)
  {
    case 0:
      switch(v34)
      {
        case 0u:
          if (*(void *)&v106 != turi::FLEX_UNDEFINED) {
            goto LABEL_236;
          }
          goto LABEL_151;
        case 1u:
          double v78 = v106;
          double v79 = (double)turi::FLEX_UNDEFINED;
          goto LABEL_138;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_127;
        case 6u:
          if (turi::FLEX_UNDEFINED != (uint64_t)(*(void *)&v106 << 8) >> 8) {
            goto LABEL_127;
          }
          if (v33) {
            goto LABEL_236;
          }
          goto LABEL_151;
        default:
          goto LABEL_241;
      }
    case 1:
      switch(v34)
      {
        case 0u:
          double v78 = *(double *)&turi::FLEX_UNDEFINED;
          double v79 = (double)*(uint64_t *)&v106;
LABEL_138:
          if (v78 != v79) {
            goto LABEL_236;
          }
          goto LABEL_151;
        case 1u:
          if (*(double *)&turi::FLEX_UNDEFINED != v106) {
            goto LABEL_236;
          }
          goto LABEL_151;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_127;
        case 6u:
          double v82 = vabdd_f64((double)v33 / 1000000.0 + (double)((uint64_t)(*(void *)&v106 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_150;
        default:
          goto LABEL_241;
      }
    case 2:
      if (v34 - 3 < 7 || v34 < 2) {
        goto LABEL_127;
      }
      if (v34 != 2) {
        goto LABEL_241;
      }
      if (*(char *)(*(void *)&v106 + 31) < 0) {
        size_t v73 = *(void *)(*(void *)&v106 + 16);
      }
      else {
        size_t v73 = *(unsigned __int8 *)(*(void *)&v106 + 31);
      }
      if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
        uint64_t v102 = *(void *)(turi::FLEX_UNDEFINED + 16);
      }
      else {
        uint64_t v102 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      }
      if (v73 != v102) {
        goto LABEL_127;
      }
      unint64_t v103 = (unsigned __int8 *)(*(void *)&v106 + 8);
      if ((*(unsigned char *)(*(void *)&v106 + 31) & 0x80) != 0) {
        unint64_t v103 = *(unsigned __int8 **)v103;
      }
      uint64_t v104 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        uint64_t v104 = *(unsigned __int8 **)v104;
      }
      if ((*(unsigned char *)(*(void *)&v106 + 31) & 0x80) != 0)
      {
        if (!memcmp(v103, v104, v73)) {
          goto LABEL_151;
        }
        goto LABEL_236;
      }
      if (!v73) {
        goto LABEL_151;
      }
      while (*v103 == *v104)
      {
        ++v103;
        ++v104;
        if (!--v73) {
          goto LABEL_151;
        }
      }
      goto LABEL_127;
    case 3:
      if (v34 > 9) {
        goto LABEL_241;
      }
      if (v34 != 3) {
        goto LABEL_127;
      }
      uint64_t v74 = *(double **)(*(void *)&v106 + 8);
      unint64_t v75 = *(double **)(*(void *)&v106 + 16);
      unint64_t v76 = v75 - v74;
      unint64_t v77 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v76 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v77) >> 3) {
        goto LABEL_127;
      }
      if (v75 == v74) {
        goto LABEL_151;
      }
      if (v76 <= 1) {
        unint64_t v76 = 1;
      }
      while (*v74 == *v77)
      {
        ++v77;
        ++v74;
        if (!--v76) {
          goto LABEL_151;
        }
      }
      goto LABEL_127;
    case 4:
      if (v34 > 9) {
        goto LABEL_241;
      }
      if (v34 != 4) {
        goto LABEL_127;
      }
      char v35 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v141, (uint64_t *)(*(void *)&v106 + 8), (void *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_135;
    case 5:
      if (v34 > 9) {
        goto LABEL_241;
      }
      if (v34 != 5) {
        goto LABEL_127;
      }
      char v35 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v141, (uint64_t **)(*(void *)&v106 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_135;
    case 6:
      switch(v34)
      {
        case 0u:
          if (*(void *)&v106 != turi::FLEX_UNDEFINED << 8 >> 8) {
            goto LABEL_127;
          }
          if (dword_268088B00) {
            goto LABEL_236;
          }
          goto LABEL_151;
        case 1u:
          double v82 = vabdd_f64(v106, (double)dword_268088B00 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_150:
          if (v82 < 0.0000005) {
            goto LABEL_151;
          }
          goto LABEL_236;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_127;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(void *)&v106) & 0xFFFFFFFFFFFFFFLL) != 0) {
            goto LABEL_127;
          }
          if (v33 != dword_268088B00) {
            goto LABEL_236;
          }
          goto LABEL_151;
        default:
          goto LABEL_241;
      }
    case 7:
      if (v34 < 7 || v34 - 8 < 2) {
        goto LABEL_127;
      }
      if (v34 != 7) {
        goto LABEL_241;
      }
      goto LABEL_151;
    case 8:
      if (v34 < 8 || v34 == 9) {
        goto LABEL_127;
      }
      if (v34 != 8) {
        goto LABEL_241;
      }
      char v35 = turi::image_type::operator==(*(void *)&v106 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_135:
      if (v35) {
        goto LABEL_151;
      }
      goto LABEL_127;
    case 9:
      if (v34 < 9) {
        goto LABEL_127;
      }
      if (v34 == 9)
      {
        uint64_t v36 = turi::FLEX_UNDEFINED;
        if (turi::FLEX_UNDEFINED == *(void *)&v106) {
          goto LABEL_151;
        }
        if (turi::flexible_type_impl::ndarray<double>::same_shape(*(void *)&v106 + 8, turi::FLEX_UNDEFINED + 8))
        {
          uint64_t v38 = *(char **)(*(void *)&v106 + 24);
          long long v37 = *(char **)(*(void *)&v106 + 32);
          uint64_t v39 = v37 - v38;
          if (v37 == v38) {
            goto LABEL_151;
          }
          if (!*(void *)(*(void *)&v106 + 8)) {
            goto LABEL_151;
          }
          uint64_t v40 = 1;
          do
          {
            uint64_t v41 = *(void *)v38;
            v38 += 8;
            v40 *= v41;
          }
          while (v38 != v37);
          if (!v40) {
            goto LABEL_151;
          }
          v145.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(__p, v39 >> 3, &v145);
          atomic_ullong *volatile v42 = (uint64_t *)__p[0];
          unint64_t v43 = (uint64_t *)__p[1];
          uint64_t v44 = **(void **)(v36 + 8);
          int64_t v45 = (char *)__p[1] - (char *)__p[0];
          unint64_t v46 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v47 = v46 - 1;
          if (v46 <= 1) {
            int64_t v48 = 1;
          }
          else {
            int64_t v48 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          }
          do
          {
            if (v43 == v42)
            {
              uint64_t v56 = 0;
              double v57 = *(double *)(**(void **)(*(void *)&v106 + 8) + 8 * *(void *)(*(void *)&v106 + 72));
            }
            else
            {
              uint64_t v49 = 0;
              uint64_t v50 = *(uint64_t **)(*(void *)&v106 + 48);
              unint64_t v51 = v42;
              int64_t v52 = v48;
              do
              {
                uint64_t v54 = *v51++;
                uint64_t v53 = v54;
                uint64_t v55 = *v50++;
                v49 += v55 * v53;
                --v52;
              }
              while (v52);
              uint64_t v56 = 0;
              double v57 = *(double *)(**(void **)(*(void *)&v106 + 8) + 8 * (*(void *)(*(void *)&v106 + 72) + v49));
              long long v58 = *(uint64_t **)(v36 + 48);
              uint64_t v59 = v42;
              int64_t v60 = v48;
              do
              {
                uint64_t v62 = *v59++;
                uint64_t v61 = v62;
                uint64_t v63 = *v58++;
                v56 += v63 * v61;
                --v60;
              }
              while (v60);
            }
            double v64 = *(double *)(v44 + 8 * (*(void *)(v36 + 72) + v56));
            if (v57 != v64) {
              break;
            }
            uint64_t v65 = v46;
            uint64_t v66 = v46 - 1;
            if (v45 >= 1)
            {
              uint64_t v67 = *(void *)(*(void *)&v106 + 24);
              unint64_t v68 = v42[v47] + 1;
              v42[v47] = v68;
              unint64_t v69 = (v45 & 0xFFFFFFFFFFFFFFF8) - 16;
              uint64_t v66 = v46 - 1;
              if (v68 >= *(void *)(v67 + 8 * v47))
              {
                while (1)
                {
                  *(uint64_t *)((char *)v42 + v69 + 8) = 0;
                  if (v66 <= 0) {
                    break;
                  }
                  --v66;
                  unint64_t v70 = *(uint64_t *)((char *)v42 + v69) + 1;
                  *(uint64_t *)((char *)v42 + v69) = v70;
                  unint64_t v71 = *(void *)(v67 + v69);
                  v69 -= 8;
                  if (v70 < v71)
                  {
                    uint64_t v65 = 1;
                    goto LABEL_94;
                  }
                }
                __p[1] = v42;
                operator delete(v42);
LABEL_151:
                turi::gl_sframe::column_names((turi::gl_sframe *)v118);
                std::string::basic_string[abi:ne180100]<0>(v146, "features");
                memset(&v145, 0, sizeof(v145));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>(&v145, (uint64_t)__p[0], (uint64_t)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
                *(std::string::size_type *)((char *)__idx.__r_.__value_.__r.__words + 5) = 0x400000000000000;
                __idx.__r_.__value_.__r.__words[0] = 0;
                operator new();
              }
              uint64_t v65 = 1;
              uint64_t v66 = v46 - 1;
            }
LABEL_94:
            ;
          }
          while ((v66 & 0x8000000000000000) == 0 && v65);
          if (v42)
          {
            __p[1] = v42;
            double v72 = v64;
            operator delete(v42);
            if (v57 == v72) {
              goto LABEL_151;
            }
          }
          else if (v57 == v64)
          {
            goto LABEL_151;
          }
        }
LABEL_127:
        if (v34 == 4)
        {
          std::string v80 = *(turi::flexible_type_impl **)(*(void *)&v106 + 8);
          std::string v81 = *(turi::flexible_type_impl **)(*(void *)&v106 + 16);
          if (v80 != v81)
          {
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&long long v127 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((std::string *)__p, v80, v81, (v81 - v80) >> 4);
            if (__p[1] != __p[0])
            {
              turi::gl_sframe::select_columns((uint64_t)v118, v146);
              turi::gl_sframe::operator=((uint64_t)v118, (uint64_t)v146);
              v146[0] = &unk_26D759E10;
              if (v147) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v147);
              }
              v146[0] = __p;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v146);
              turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)v118, (turi::sframe *)v146);
              if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&__idx, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
              }
              else {
                std::string __idx = v119;
              }
              unint64_t v142 = 0;
              uint64_t v141 = 0;
              unint64_t v143 = 0;
              v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
              v123.__r_.__value_.__s.__data_[8] = 0;
              uint64_t v141 = operator new(0x18uLL);
              unint64_t v142 = v141;
              unint64_t v143 = (char *)v141 + 24;
              unint64_t v142 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v143, (long long *)&__idx, v140, (std::string *)v141);
              turi::gl_sframe::select_columns((uint64_t)a2, __p);
              turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)__p, (turi::sframe *)&v145);
              __p[0] = &unk_26D759E10;
              if ((void)v127) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v127);
              }
              v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
              if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__idx.__r_.__value_.__l.__data_);
              }
              turi::gl_sframe::operator=(a1 + 1232, (uint64_t)a2);
              unint64_t v83 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
              std::string::basic_string[abi:ne180100]<0>(v116, v83);
              turi::sframe::sframe((turi::sframe *)v144, (const turi::sframe *)&v145);
              turi::supervised::check_target_column_type((uint64_t *)v116, (turi::sframe *)v144);
              turi::sframe::~sframe((turi::sframe *)v144);
              if (v117 < 0) {
                operator delete(v116[0]);
              }
              if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 248))(a1)) {
                uint64_t v84 = 2;
              }
              else {
                uint64_t v84 = 1;
              }
              turi::sframe::sframe((turi::sframe *)&v141);
              turi::sframe::sframe((turi::sframe *)&__idx);
              if (turi::gl_sframe::num_columns((turi::gl_sframe *)v122))
              {
                turi::gl_sframe::column_names((turi::gl_sframe *)v118);
                turi::gl_sframe::select_columns((uint64_t)v122, &v123);
                turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v123, (turi::sframe *)__p);
                turi::sframe::operator=((uint64_t)&v141, (uint64_t)__p);
                turi::sframe::~sframe((turi::sframe *)__p);
                v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
                if (v123.__r_.__value_.__r.__words[2]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v123.__r_.__value_.__r.__words[2]);
                }
                v137.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
                if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v137, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v137 = v119;
                }
                uint64_t v113 = 0;
                uint64_t v114 = 0;
                uint64_t v115 = 0;
                size_t v124 = (size_t)&v113;
                char v125 = 0;
                uint64_t v113 = operator new(0x18uLL);
                uint64_t v114 = v113;
                uint64_t v115 = (char *)v113 + 24;
                uint64_t v114 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v115, (long long *)&v137, (long long *)&v138, (std::string *)v113);
                turi::gl_sframe::select_columns((uint64_t)v122, &v123);
                turi::gl_sframe::materialize_to_sframe((turi::gl_sframe *)&v123, (turi::sframe *)__p);
                turi::sframe::operator=((uint64_t)&__idx, (uint64_t)__p);
                turi::sframe::~sframe((turi::sframe *)__p);
                v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
                if (v123.__r_.__value_.__r.__words[2]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v123.__r_.__value_.__r.__words[2]);
                }
                size_t v124 = (size_t)&v113;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
                if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v137.__r_.__value_.__l.__data_);
                }
                long long v85 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                std::string::basic_string[abi:ne180100]<0>(v111, v85);
                turi::sframe::sframe((turi::sframe *)v136, (const turi::sframe *)&__idx);
                turi::supervised::check_target_column_type((uint64_t *)v111, (turi::sframe *)v136);
                turi::sframe::~sframe((turi::sframe *)v136);
                if (v112 < 0) {
                  operator delete(v111[0]);
                }
                turi::gl_sframe::column_names((turi::gl_sframe *)v118);
                long long v86 = __p[1];
                if (__p[1] >= (void *)v127)
                {
                  char v88 = (void *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (long long *)&v119);
                }
                else
                {
                  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)__p[1], v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v87 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
                    *((void *)__p[1] + 2) = *((void *)&v119.__r_.__value_.__l + 2);
                    _OWORD *v86 = v87;
                  }
                  char v88 = (char *)v86 + 24;
                }
                __p[1] = v88;
                turi::gl_sframe::select_columns((uint64_t)v122, &v123);
                turi::gl_sframe::operator=((uint64_t)v122, (uint64_t)&v123);
                v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
                if (v123.__r_.__value_.__r.__words[2]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v123.__r_.__value_.__r.__words[2]);
                }
                v123.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
              }
              std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],turi::gl_sframe,0>((uint64_t)__p, "validation_data", (uint64_t)v122);
              std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v123, (const void **)__p, 1);
              turi::ml_model_base::add_or_update_state(a1, &v123);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v123, (char *)v123.__r_.__value_.__l.__size_);
              boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v127 + 2);
              if (SBYTE7(v127) < 0) {
                operator delete(__p[0]);
              }
              turi::gl_sframe::operator=(a1 + 1256, (uint64_t)v122);
              int v89 = v150;
              uint64_t v90 = v148[1];
              std::string::basic_string[abi:ne180100]<0>(__p, "training_number_of_examples");
              if (v89) {
                uint64_t v91 = v90;
              }
              else {
                uint64_t v91 = 0;
              }
              *(void *)&long long v128 = v91;
              DWORD2(v128) = 0;
              BYTE12(v128) = 0;
              DWORD2(v127) = 0;
              uint64_t v92 = turi::gl_sframe::size((turi::gl_sframe *)v122);
              std::string::basic_string[abi:ne180100]<0>(v131, "validation_number_of_examples");
              uint64_t v133 = v92;
              int v134 = 0;
              char v135 = 0;
              v132[0] = 0;
              std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v123, (const void **)__p, 2);
              turi::ml_model_base::add_or_update_state(a1, &v123);
              std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v123, (char *)v123.__r_.__value_.__l.__size_);
              unint64_t v93 = 0;
              while (1)
              {
                boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v132[v93 / 4]);
                if (SHIBYTE(v131[v93 / 8 + 2]) < 0) {
                  operator delete((void *)v131[v93 / 8]);
                }
                v93 -= 104;
                if (v93 == -208)
                {
                  if (a6)
                  {
                    uint64_t v94 = turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224));
                    std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)__p, v94);
                    (*(void (**)(uint64_t, void **, std::string *, void **, std::string *, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, v146, &v145, &v141, &__idx, v84, 1);
                    turi::option_manager::set_options(a1 + 224, __p);
                    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)__p, (void *)__p[1]);
                  }
                  else
                  {
                    (*(void (**)(uint64_t, void **, std::string *, void **, std::string *, uint64_t, void))(*(void *)a1 + 200))(a1, v146, &v145, &v141, &__idx, v84, 0);
                  }
                  turi::supervised::xgboost::xgboost_model::_init_data((turi::supervised::xgboost::xgboost_model *)a1, __p);
                  v123.__r_.__value_.__r.__words[0] = a1 + 392;
                  v123.__r_.__value_.__l.__size_ = a1 + 408;
                  std::tuple<std::shared_ptr<turi::sframe> &,std::shared_ptr<turi::sframe> &>::operator=[abi:ne180100]<std::shared_ptr<turi::sframe>,std::shared_ptr<turi::sframe>,0>((uint64_t *)&v123, (long long *)__p);
                  if (*((void *)&v127 + 1)) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v127 + 1));
                  }
                  if (__p[1]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                  }
                  uint64_t v95 = *(atomic_ullong **)(a1 + 400);
                  v110[0] = *(xgboost_old::learner::DMatrix **)(a1 + 392);
                  v110[1] = (xgboost_old::learner::DMatrix *)v95;
                  if (v95) {
                    atomic_fetch_add_explicit(v95 + 1, 1uLL, memory_order_relaxed);
                  }
                  int v96 = *(std::__shared_weak_count **)(a1 + 416);
                  v109[0] = *(void *)(a1 + 408);
                  v109[1] = (uint64_t)v96;
                  if (v96) {
                    atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v107, "");
                  turi::supervised::xgboost::xgboost_model::_init_learner((xgboost_old::learner::BoostLearner **)a1, v110, v109, 0, (uint64_t)v107, a6);
                  if (v108 < 0) {
                    operator delete(v107[0]);
                  }
                  if (v96) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v96);
                  }
                  if (v95) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v95);
                  }
                  turi::supervised::xgboost::xgboost_model::_init_progress_printer((turi::supervised::xgboost::xgboost_model *)a1, *(void *)(a1 + 408) != 0, (uint64_t)__p);
                  turi::table_printer::operator=(a1 + 424, (uint64_t)__p);
                  turi::table_printer::~table_printer((turi::table_printer *)__p);
                  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
                  long long v97 = *(_OWORD *)__p;
                  __p[0] = 0;
                  __p[1] = 0;
                  unint64_t v98 = *(std::__shared_weak_count **)(a1 + 1184);
                  *(_OWORD *)(a1 + 1176) = v97;
                  if (v98)
                  {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v98);
                    if (__p[1]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                    }
                  }
                  if (a6)
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, "progress");
                    uint64_t v113 = __p;
                    uint64_t v99 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v113);
                    turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get(v99 + 14, &v123);
                    long long v100 = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
                    *(_OWORD *)&v123.__r_.__value_.__l.__data_ = 0uLL;
                    uint64_t v101 = *(std::__shared_weak_count **)(a1 + 1184);
                    *(_OWORD *)(a1 + 1176) = v100;
                    if (v101)
                    {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v101);
                      if (v123.__r_.__value_.__l.__size_) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v123.__r_.__value_.__l.__size_);
                      }
                    }
                    if (SBYTE7(v127) < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  operator new();
                }
              }
            }
            turi::supervised::xgboost::xgboost_model::init_training(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::string const&,std::map<std::string,turi::flexible_type>,BOOL)::$_1::operator()();
          }
          goto LABEL_151;
        }
LABEL_236:
        turi::supervised::xgboost::xgboost_model::init_training(turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::string const&,std::map<std::string,turi::flexible_type>,BOOL)::$_0::operator()();
      }
LABEL_241:
      uint64_t result = turi::flexible_type_fail(0);
LABEL_243:
      __break(1u);
      return result;
    default:
      goto LABEL_241;
  }
}

void sub_2244EA058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  MEMORY[0x22A614FA0](v49, 0x1012C404EF22A49);
  switch(LOBYTE(STACK[0x56C]))
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x560], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v51 = STACK[0x560];
        if (STACK[0x560])
        {
          if (*(char *)(v51 + 31) < 0) {
            operator delete(*(void **)(v51 + 8));
          }
          MEMORY[0x22A614FA0](v51, 0x1012C404EF22A49);
        }
      }
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x560], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      unint64_t v55 = STACK[0x560];
      if (!STACK[0x560]) {
        goto LABEL_27;
      }
      uint64_t v56 = *(void **)(v55 + 8);
      if (v56)
      {
        *(void *)(v55 + 16) = v56;
        operator delete(v56);
      }
      uint64_t v53 = (void *)v55;
      uint64_t v57 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x560], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      unint64_t v52 = STACK[0x560];
      if (!STACK[0x560]) {
        goto LABEL_27;
      }
      STACK[0x690] = v52 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x690]);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x560], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      unint64_t v52 = STACK[0x560];
      if (!STACK[0x560]) {
        goto LABEL_27;
      }
      STACK[0x690] = v52 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x690]);
LABEL_21:
      uint64_t v53 = (void *)v52;
      uint64_t v57 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x560], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      unint64_t v58 = STACK[0x560];
      if (!STACK[0x560]) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v58 + 16));
      uint64_t v53 = (void *)v58;
      unsigned int v54 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)STACK[0x560], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!STACK[0x560]) {
        goto LABEL_27;
      }
      uint64_t v53 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)STACK[0x560]);
      unsigned int v54 = 2071181815;
LABEL_25:
      uint64_t v57 = v54 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v53, v57);
LABEL_27:
      STACK[0x560] = 0;
LABEL_28:
      STACK[0x560] = 0;
      LODWORD(STACK[0x568]) = 0;
      LOBYTE(STACK[0x56C]) = 0;
      STACK[0x690] = (unint64_t)&STACK[0x8E0];
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x690]);
      if (SLOBYTE(STACK[0xA27]) < 0) {
        operator delete((void *)STACK[0xA10]);
      }
      STACK[0xA10] = (unint64_t)&a48;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA10]);
      switch(v48)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
            goto LABEL_56;
          }
          if (*(char *)(a9 + 31) < 0) {
            operator delete(*(void **)(a9 + 8));
          }
          uint64_t v59 = (void *)a9;
          uint64_t v60 = 0x1012C404EF22A49;
          goto LABEL_55;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
            goto LABEL_56;
          }
          uint64_t v63 = *(void **)(a9 + 8);
          if (v63)
          {
            *(void *)(a9 + 16) = v63;
            operator delete(v63);
          }
          uint64_t v59 = (void *)a9;
          uint64_t v60 = 0x1080C409938AC02;
          goto LABEL_55;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
            goto LABEL_56;
          }
          uint64_t v61 = (void *)a9;
          STACK[0xA10] = a9 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA10]);
          goto LABEL_50;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
            goto LABEL_56;
          }
          uint64_t v61 = (void *)a9;
          STACK[0xA10] = a9 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA10]);
LABEL_50:
          uint64_t v59 = v61;
          uint64_t v60 = 0x1020C405E66F15BLL;
          goto LABEL_55;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
            goto LABEL_56;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(a9 + 16));
          uint64_t v59 = (void *)a9;
          unsigned int v62 = -235920773;
          goto LABEL_54;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
            goto LABEL_56;
          }
          uint64_t v59 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a9);
          unsigned int v62 = 2071181815;
LABEL_54:
          uint64_t v60 = v62 | 0x1030C4000000000;
LABEL_55:
          MEMORY[0x22A614FA0](v59, v60);
LABEL_56:
          if (a28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](a28);
          }
          if (a34 < 0) {
            operator delete(a29);
          }
          if (a41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](a41);
          }
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_56;
      }
    default:
      goto LABEL_28;
  }
}

uint64_t turi::table_printer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<std::pair<std::string,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(a1, *(std::string **)a2, *(long long **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  turi::sframe::operator=(a1 + 296, a2 + 296);
  *(_WORD *)(a1 + 592) = *(_WORD *)(a2 + 592);
  std::function<void ()(std::vector<turi::flexible_type> const&)>::operator=((void *)(a1 + 600), a2 + 600);
  std::function<void ()(std::vector<turi::flexible_type> &&)>::operator=((void *)(a1 + 632), a2 + 632);
  std::function<void ()(turi::sframe_rows const&)>::operator=((void *)(a1 + 664), a2 + 664);
  if (a1 != a2)
  {
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 696, *(uint64_t **)(a2 + 696), *(uint64_t **)(a2 + 704), (uint64_t)(*(void *)(a2 + 704) - *(void *)(a2 + 696)) >> 4);
    std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>((void *)(a1 + 720), *(char **)(a2 + 720), *(char **)(a2 + 728), *(void *)(a2 + 728) - *(void *)(a2 + 720));
  }
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  return a1;
}

void std::shared_ptr<turi::supervised::xgboost::metric_tracker>::reset[abi:ne180100]<turi::supervised::xgboost::metric_tracker,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::supervised::xgboost::metric_tracker>::shared_ptr[abi:ne180100]<turi::supervised::xgboost::metric_tracker,void>(&v2, a2);
}

void turi::supervised::xgboost::xgboost_model::resume_training(uint64_t a1, const turi::gl_sframe *a2, int *a3)
{
  v12[9] = *MEMORY[0x263EF8340];
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v9, a2);
  __p[0] = v12;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*a3, *a3 ^ (*a3 >> 31), (std::string **)__p, (uint64_t)(a3 + 2));
  int v11 = *a3 ^ (*a3 >> 31);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v6[0] = 0;
  v6[1] = 0;
  long long v5 = v6;
  turi::supervised::xgboost::xgboost_model::init_training(a1, (const turi::gl_sframe *)v9, (uint64_t)&v11, (uint64_t)__p, (uint64_t)&v5, 1);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v5, v6[0]);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
  v9[0] = &unk_26D759E10;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_2244EB398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, std::__shared_weak_count *a20,unsigned int a21)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a21);
  a18 = &unk_26D759E10;
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::iterate_training(turi::supervised::xgboost::xgboost_model *this)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 51);
  int is_random_forest = turi::supervised::xgboost::xgboost_model::is_random_forest(this);
  long long v4 = (xgboost_old::learner::BoostLearner *)*((void *)this + 208);
  uint64_t v5 = *((unsigned int *)this + 302);
  long long v6 = (const xgboost_old::learner::DMatrix *)*((void *)this + 49);
  if (is_random_forest) {
    xgboost_old::learner::BoostLearner::UpdateOneIterKeepGpair(v4, v5, v6);
  }
  else {
    xgboost_old::learner::BoostLearner::UpdateOneIter(v4, v5, v6);
  }
  memset(v27, 0, sizeof(v27));
  double v7 = 1.0 / (double)(unint64_t)(*((void *)this + 151) + 1);
  turi::supervised::xgboost::xgboost_model::xgboost_predict(this, *((void *)this + 49), 0, (uint64_t *)v27, v7);
  turi::supervised::xgboost::fast_evaluate((uint64_t)v27, *((void *)this + 49) + 16, *((void **)this + 149), (float **)__p);
  turi::supervised::xgboost::metric_tracker::track_training(*((void *)this + 149), *((void *)this + 151), __p);
  if (v2)
  {
    v30.__darwin_time_t tv_sec = 0;
    *(void *)&v30.__darwin_suseconds_t tv_usec = 0;
    uint64_t v31 = 0;
    turi::supervised::xgboost::xgboost_model::xgboost_predict(this, *((void *)this + 51), 0, &v30.tv_sec, v7);
    turi::supervised::xgboost::fast_evaluate((uint64_t)&v30, *((void *)this + 51) + 16, *((void **)this + 149), (float **)&v23);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v23;
    uint64_t v26 = v24;
    turi::supervised::xgboost::metric_tracker::track_validation(*((void *)this + 149), *((void *)this + 151), __p);
    if (v30.tv_sec)
    {
      *(void *)&v30.__darwin_suseconds_t tv_usec = v30.tv_sec;
      operator delete((void *)v30.tv_sec);
    }
  }
  char v8 = (turi::supervised::xgboost::metric_tracker *)*((void *)this + 149);
  uint64_t v9 = (std::string *)*((void *)this + 151);
  gettimeofday(&v30, 0);
  turi::supervised::xgboost::metric_tracker::make_progress_table_row(v8, (double)(v30.tv_usec - *((_DWORD *)this + 306)) / 1000000.0 + (double)(v30.tv_sec - *((void *)this + 152)), v9, (std::string::size_type)&v23);
  uint64_t v10 = *((void *)this + 151);
  uint64_t v28 = (uint64_t)(*((void *)this + 54) - *((void *)this + 53)) >> 5;
  v29.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v23 + 1) - v23) >> 3);
  if (v29.tv_sec == v28)
  {
    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)this + 62, 1uLL);
    BOOL v12 = turi::table_printer::register_tick((turi::supervised::xgboost::xgboost_model *)((char *)this + 424), v10 + 1, add + 1);
    BOOL v13 = v12;
    if (v12)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 520));
      turi::table_printer::print_row<std::string>((void *)this + 53, &v23);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 520));
    }
    unint64_t v14 = *((void *)this + 146);
    if (v14 && !(add % v14))
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 656));
      uint64_t v16 = *((void *)&v23 + 1);
      uint64_t v15 = v23;
      if (!*((unsigned char *)this + 1016))
      {
        std::vector<turi::flexible_type>::resize((uint64_t *)this + 140, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v23 + 1) - v23) >> 3));
        uint64_t v16 = *((void *)&v23 + 1);
        uint64_t v15 = v23;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v23 + 1) - v23) >> 3);
        uint64_t v18 = *((void *)this + 143);
        unint64_t v19 = *((void *)this + 144) - v18;
        if (v17 <= v19)
        {
          if (v17 < v19) {
            *((void *)this + 144) = v18 - 0x5555555555555555 * ((uint64_t)(*((void *)&v23 + 1) - v23) >> 3);
          }
        }
        else
        {
          std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)this + 1144, v17 - v19);
          uint64_t v16 = *((void *)&v23 + 1);
          uint64_t v15 = v23;
        }
      }
      if (v16 != v15) {
        turi::flexible_type::operator=<std::string>(*((void *)this + 140));
      }
      turi::table_printer::track_progress_row((uint64_t)this + 424, (uint64_t *)this + 140);
      *((unsigned char *)this + 1017) = v13;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 656));
    }
    if ((*(uint64_t (**)(void))(**((void **)this + 147) + 64))(*((void *)this + 147)))
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v22);
      uint64_t v20 = (turi::unity_sframe *)v22;
      turi::table_printer::get_tracked_table((turi::supervised::xgboost::xgboost_model *)((char *)this + 424), (turi::sframe *)&v30);
      turi::unity_sframe::construct_from_sframe(v20, (const turi::sframe *)&v30);
    }
    uint64_t v21 = (turi::unity_sframe *)*((void *)this + 147);
    turi::table_printer::get_tracked_table((turi::supervised::xgboost::xgboost_model *)((char *)this + 424), (turi::sframe *)&v30);
    turi::unity_sframe::construct_from_sframe(v21, (const turi::sframe *)&v30);
  }
  v30.__darwin_time_t tv_sec = (__darwin_time_t)&v29;
  *(void *)&v30.__darwin_suseconds_t tv_usec = &v28;
  turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
}

void sub_2244EB9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::learner::BoostLearner::UpdateOneIterKeepGpair(xgboost_old::learner::BoostLearner *this, uint64_t a2, const xgboost_old::learner::DMatrix *a3)
{
  if (*((_DWORD *)this + 3)
    || (Engine = rabit::engine::GetEngine(this), (*(unsigned int (**)(uint64_t *))(*Engine + 72))(Engine)))
  {
    srand(a2 - *((_DWORD *)this + 2) + (*((_DWORD *)this + 2) << 7));
  }
  if (a2)
  {
    if (*((void *)this + 40) != *((void *)this + 41)) {
      goto LABEL_9;
    }
  }
  else
  {
    xgboost_old::learner::BoostLearner::PredictRaw((float *)this, (uint64_t)a3, (void *)this + 37, 0, 1.0);
  }
  (*(void (**)(void, char *, char *, uint64_t, char *))(**((void **)this + 30) + 24))(*((void *)this + 30), (char *)this + 296, (char *)a3 + 16, a2, (char *)this + 320);
LABEL_9:
  uint64_t v7 = *((void *)this + 26);
  uint64_t v8 = (**(uint64_t (***)(const xgboost_old::learner::DMatrix *))a3)(a3);
  uint64_t v9 = *((void *)this + 43);
  uint64_t v10 = *((void *)this + 44) - v9;
  if (v10)
  {
    uint64_t v11 = v10 / 24;
    if ((unint64_t)(v10 / 24) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (uint64_t *)(v9 + 8);
    while (1)
    {
      BOOL v13 = (const xgboost_old::learner::DMatrix *)*(v12 - 1) == a3 && *((void *)a3 + 22) == (void)this;
      if (v13 && v12[1] == *((void *)a3 + 2)) {
        break;
      }
      v12 += 3;
      if (!--v11) {
        goto LABEL_20;
      }
    }
    uint64_t v14 = *v12;
  }
  else
  {
LABEL_20:
    uint64_t v14 = -1;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)v7 + 56);
  return v15(v7, v8, v14, (char *)a3 + 16, (char *)this + 320);
}

uint64_t xgboost_old::learner::BoostLearner::UpdateOneIter(xgboost_old::learner::BoostLearner *this, uint64_t a2, const xgboost_old::learner::DMatrix *a3)
{
  if (*((_DWORD *)this + 3)
    || (Engine = rabit::engine::GetEngine(this), (*(unsigned int (**)(uint64_t *))(*Engine + 72))(Engine)))
  {
    srand(a2 - *((_DWORD *)this + 2) + (*((_DWORD *)this + 2) << 7));
  }
  xgboost_old::learner::BoostLearner::PredictRaw((float *)this, (uint64_t)a3, (void *)this + 37, 0, 1.0);
  (*(void (**)(void, char *, char *, uint64_t, char *))(**((void **)this + 30) + 24))(*((void *)this + 30), (char *)this + 296, (char *)a3 + 16, a2, (char *)this + 320);
  uint64_t v7 = *((void *)this + 26);
  uint64_t v8 = (**(uint64_t (***)(const xgboost_old::learner::DMatrix *))a3)(a3);
  uint64_t v9 = *((void *)this + 43);
  uint64_t v10 = *((void *)this + 44) - v9;
  if (v10)
  {
    uint64_t v11 = v10 / 24;
    if ((unint64_t)(v10 / 24) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (uint64_t *)(v9 + 8);
    while (1)
    {
      BOOL v13 = (const xgboost_old::learner::DMatrix *)*(v12 - 1) == a3 && *((void *)a3 + 22) == (void)this;
      if (v13 && v12[1] == *((void *)a3 + 2)) {
        break;
      }
      v12 += 3;
      if (!--v11) {
        goto LABEL_15;
      }
    }
    uint64_t v14 = *v12;
  }
  else
  {
LABEL_15:
    uint64_t v14 = -1;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)v7 + 56);
  return v15(v7, v8, v14, (char *)a3 + 16, (char *)this + 320);
}

unint64_t turi::supervised::xgboost::xgboost_model::xgboost_predict(turi::supervised::xgboost::xgboost_model *a1, uint64_t a2, char a3, uint64_t *a4, double a5)
{
  int is_random_forest = turi::supervised::xgboost::xgboost_model::is_random_forest(a1);
  double v11 = 1.0;
  if (is_random_forest)
  {
    double v11 = a5;
    if (a5 == 0.0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "max_iterations");
      unint64_t v12 = *(void *)turi::option_manager::value((uint64_t)a1 + 224, (const void **)__p);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      double v11 = 1.0 / (double)v12;
    }
  }
  uint64_t v13 = *((void *)a1 + 208);
  float v14 = v11;
  xgboost_old::learner::BoostLearner::PredictRaw((float *)v13, a2, a4, 0, v14);
  if (a3)
  {
    unint64_t result = turi::supervised::xgboost::xgboost_model::num_classes(a1);
    if (result >= 3)
    {
      uint64_t v16 = *a4;
      uint64_t v17 = a4[1];
      uint64_t v18 = v17 - *a4;
      if (v17 != *a4)
      {
        unint64_t v19 = 0;
        unint64_t v20 = v18 >> 2;
        if (v20 <= 1) {
          unint64_t v20 = 1;
        }
        double v21 = 0.0;
        do
        {
          float v22 = *(float *)(v16 + 4 * v19) - v21;
          if (!(v19 % result))
          {
            float v22 = 0.0;
            double v21 = *(float *)(v16 + 4 * v19);
          }
          *(float *)(v16 + 4 * v19++) = v22;
        }
        while (v20 != v19);
      }
    }
  }
  else
  {
    (*(void (**)(void, uint64_t *))(**(void **)(v13 + 240) + 40))(*(void *)(v13 + 240), a4);
    return turi::supervised::xgboost::xgboost_model::num_classes(a1);
  }
  return result;
}

void sub_2244EBFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::track_training(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) != v3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t **)(a1 + 24);
    do
    {
      uint64_t v10 = (long long *)(v3 + v7);
      int v11 = *(_DWORD *)(*a3 + 4 * v8);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v12 = *v10;
        __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v14 = a2;
      p_p = &__p;
      *((_DWORD *)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long>&&>,std::tuple<>>(v9, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 16) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v8;
      uint64_t v3 = *(void *)(a1 + 72);
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v3) >> 3));
  }
}

void sub_2244EC10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::track_validation(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) != v3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t **)(a1 + 48);
    do
    {
      uint64_t v10 = (long long *)(v3 + v7);
      int v11 = *(_DWORD *)(*a3 + 4 * v8);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v12 = *v10;
        __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v14 = a2;
      p_p = &__p;
      *((_DWORD *)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long>&&>,std::tuple<>>(v9, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 16) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v8;
      uint64_t v3 = *(void *)(a1 + 72);
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v3) >> 3));
  }
}

void sub_2244EC234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::make_progress_table_row(turi::supervised::xgboost::metric_tracker *this@<X0>, double a2@<D0>, std::string *a3@<X1>, std::string::size_type a4@<X8>)
{
  *(void *)&long long v50 = *MEMORY[0x263EF8340];
  std::to_string((std::string *)&v49, (unint64_t)a3->__r_.__value_.__r.__words + 1);
  std::to_string((std::string *)&v49.__end_cap_, a2);
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  v46.__r_.__value_.__r.__words[0] = a4;
  v46.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v8 = (std::string *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v8;
  *(void *)(a4 + 16) = v8 + 2;
  uint64_t v45 = a4 + 16;
  uint64_t v9 = 0;
  *(void *)(a4 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(a4 + 16, (long long *)&v49, &v50, v8);
  do
  {
    if (*((char *)&v49 + v9 * 8 + 47) < 0) {
      operator delete((&v49.__end_cap_.__value_)[v9]);
    }
    v9 -= 3;
  }
  while (v9 != -6);
  uint64_t v10 = *((void *)this + 9);
  if (*((void *)this + 10) != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = (long long *)(v10 + v11);
      if (*(char *)(v10 + v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        v46.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v14;
      }
      unint64_t v47 = a3;
      uint64_t v15 = (float *)std::map<std::pair<std::string,unsigned long>,float>::at((uint64_t)this + 24, (const void **)&v46.__r_.__value_.__l.__data_);
      std::to_string(&v48, *v15);
      unint64_t v16 = *(void *)(a4 + 8);
      unint64_t v17 = *(void *)(a4 + 16);
      if (v16 >= v17)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a4) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a4) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        v49.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v22) {
          long long v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v45, v22);
        }
        else {
          long long v23 = 0;
        }
        char v24 = v23 + v19;
        v49.__first_ = v23;
        v49.__begin_ = v24;
        v49.__end_cap_.__value_ = &v23[v22];
        long long v25 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        v24->__r_.__value_.__r.__words[2] = v48.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        memset(&v48, 0, sizeof(v48));
        v49.__end_ = v24 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &v49);
        uint64_t v26 = *(void *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&v49);
        int v27 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
        *(void *)(a4 + 8) = v26;
        if (v27 < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v18 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        *(void *)(v16 + 16) = *((void *)&v48.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v16 = v18;
        memset(&v48, 0, sizeof(v48));
        *(void *)(a4 + 8) = v16 + 24;
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v49, *(const std::string::value_type **)(v10 + v11), *(void *)(v10 + v11 + 8));
      }
      else
      {
        long long v28 = *v13;
        v49.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v13 + 2);
        *(_OWORD *)&v49.__first_ = v28;
      }
      v49.__end_cap_.__value_ = a3;
      uint64_t v29 = std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__count_unique<std::pair<std::string,unsigned long>>((uint64_t)this + 48, (const void **)&v49.__first_);
      uint64_t v30 = v29;
      if (SHIBYTE(v49.__end_) < 0)
      {
        operator delete(v49.__first_);
        if (v30)
        {
LABEL_32:
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v10 + v11), *(void *)(v10 + v11 + 8));
          }
          else
          {
            long long v31 = *v13;
            v46.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
            *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v31;
          }
          unint64_t v47 = a3;
          uint64_t v32 = (float *)std::map<std::pair<std::string,unsigned long>,float>::at((uint64_t)this + 48, (const void **)&v46.__r_.__value_.__l.__data_);
          std::to_string(&v48, *v32);
          unint64_t v33 = *(void *)(a4 + 8);
          unint64_t v34 = *(void *)(a4 + 16);
          if (v33 >= v34)
          {
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *(void *)a4) >> 3);
            unint64_t v37 = v36 + 1;
            if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(void *)a4) >> 3);
            if (2 * v38 > v37) {
              unint64_t v37 = 2 * v38;
            }
            if (v38 >= 0x555555555555555) {
              unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v39 = v37;
            }
            v49.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
            if (v39) {
              uint64_t v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v45, v39);
            }
            else {
              uint64_t v40 = 0;
            }
            uint64_t v41 = v40 + v36;
            v49.__first_ = v40;
            v49.__begin_ = v41;
            v49.__end_cap_.__value_ = &v40[v39];
            long long v42 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
            v41->__r_.__value_.__r.__words[2] = v48.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
            memset(&v48, 0, sizeof(v48));
            v49.__end_ = v41 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &v49);
            uint64_t v43 = *(void *)(a4 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&v49);
            int v44 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
            *(void *)(a4 + 8) = v43;
            if (v44 < 0) {
              operator delete(v48.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v35 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
            *(void *)(v33 + 16) = *((void *)&v48.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v33 = v35;
            memset(&v48, 0, sizeof(v48));
            *(void *)(a4 + 8) = v33 + 24;
          }
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v46.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (v29)
      {
        goto LABEL_32;
      }
      ++v12;
      uint64_t v10 = *((void *)this + 9);
      v11 += 24;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 10) - v10) >> 3));
  }
}

void sub_2244EC6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 + 8) = v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  uint64_t v39 = 0;
  while (1)
  {
    if (*(&a36 + v39) < 0) {
      operator delete(*(void **)((char *)&a31 + v39));
    }
    v39 -= 24;
    if (v39 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void turi::supervised::xgboost::xgboost_model::_save_training_state(uint64_t a1, double a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(std::__shared_weak_count **)(a6 + 8);
  std::string __p = *(void **)a6;
  unint64_t v75 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&__p, (uint64_t)&v78);
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "progress");
  *(void *)&long long v69 = &__p;
  uint64_t v10 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v69);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v10 + 14, (unsigned int *)&v78);
  if (v76 < 0) {
    operator delete(__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v78);
  v73[0] = 0;
  v73[1] = 0;
  double v72 = v73;
  std::string::basic_string[abi:ne180100]<0>(&v78, "training_time");
  std::string __p = &v78;
  uint64_t v11 = (atomic_ullong *volatile *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v72, (const void **)&v78.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
  long long v18 = v11;
  switch(*((unsigned char *)v11 + 68))
  {
    case 2:
      if (atomic_fetch_add(v11[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      uint64_t v19 = *((void *)v11 + 7);
      if (!v19) {
        goto LABEL_39;
      }
      if (*(char *)(v19 + 31) < 0) {
        operator delete(*(void **)(v19 + 8));
      }
      unint64_t v20 = (void *)v19;
      uint64_t v21 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      if (atomic_fetch_add(v11[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      long long v28 = (void *)*((void *)v11 + 7);
      if (!v28) {
        goto LABEL_39;
      }
      uint64_t v29 = (void *)v28[1];
      if (v29)
      {
        void v28[2] = v29;
        operator delete(v29);
      }
      unint64_t v20 = v28;
      uint64_t v21 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      if (atomic_fetch_add(v11[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      unint64_t v22 = (void *)*((void *)v11 + 7);
      if (!v22) {
        goto LABEL_39;
      }
      std::string __p = v22 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_33;
    case 5:
      if (atomic_fetch_add(v11[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      unint64_t v22 = (void *)*((void *)v11 + 7);
      if (!v22) {
        goto LABEL_39;
      }
      std::string __p = v22 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_33:
      unint64_t v20 = v22;
      uint64_t v21 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      if (atomic_fetch_add(v11[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      uint64_t v30 = *((void *)v11 + 7);
      if (!v30) {
        goto LABEL_39;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v30 + 16));
      unint64_t v20 = (void *)v30;
      unsigned int v27 = -235920773;
      goto LABEL_37;
    case 9:
      if (atomic_fetch_add(v11[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      long long v23 = (void *)*((void *)v11 + 7);
      if (!v23) {
        goto LABEL_39;
      }
      char v24 = (void *)v23[6];
      if (v24)
      {
        v23[7] = v24;
        operator delete(v24);
      }
      long long v25 = (void *)v23[3];
      if (v25)
      {
        void v23[4] = v25;
        operator delete(v25);
      }
      uint64_t v26 = (std::__shared_weak_count *)v23[2];
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      unint64_t v20 = v23;
      unsigned int v27 = 2071181815;
LABEL_37:
      uint64_t v21 = v27 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x22A614FA0](v20, v21);
LABEL_39:
      *((void *)v18 + 7) = 0;
LABEL_40:
      *((_DWORD *)v18 + 16) = 0;
      *((unsigned char *)v18 + 68) = 1;
      *((double *)v18 + 7) = a2;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      uint64_t v31 = *(void *)(a1 + 344);
      uint64_t v66 = a1;
      if (*(void *)(a1 + 352) != v31)
      {
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        while (2)
        {
          unint64_t v34 = (long long *)(v31 + v32);
          if (*((char *)v34 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v34, *((void *)v34 + 1));
          }
          else
          {
            long long v35 = *v34;
            v78.__r_.__value_.__r.__words[2] = *((void *)v34 + 2);
            *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v35;
          }
          uint64_t v36 = *a4;
          std::operator+<char>();
          *(void *)&long long v69 = &__p;
          uint64_t v37 = (atomic_ullong *volatile *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v72, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v69);
          unint64_t v38 = v37;
          switch(*((unsigned char *)v37 + 68))
          {
            case 2:
              if (atomic_fetch_add(v37[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              uint64_t v39 = *((void *)v37 + 7);
              if (!v39) {
                goto LABEL_79;
              }
              if (*(char *)(v39 + 31) < 0) {
                operator delete(*(void **)(v39 + 8));
              }
              uint64_t v40 = (void *)v39;
              uint64_t v41 = 0x1012C404EF22A49;
              goto LABEL_78;
            case 3:
              if (atomic_fetch_add(v37[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              std::string v48 = (void *)*((void *)v37 + 7);
              if (!v48) {
                goto LABEL_79;
              }
              std::__split_buffer<std::string> v49 = (void *)v48[1];
              if (v49)
              {
                v48[2] = v49;
                operator delete(v49);
              }
              uint64_t v40 = v48;
              uint64_t v41 = 0x1080C409938AC02;
              goto LABEL_78;
            case 4:
              if (atomic_fetch_add(v37[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              long long v42 = (void *)*((void *)v37 + 7);
              if (!v42) {
                goto LABEL_79;
              }
              *(void *)&long long v69 = v42 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
              goto LABEL_73;
            case 5:
              if (atomic_fetch_add(v37[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              long long v42 = (void *)*((void *)v37 + 7);
              if (!v42) {
                goto LABEL_79;
              }
              *(void *)&long long v69 = v42 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
LABEL_73:
              uint64_t v40 = v42;
              uint64_t v41 = 0x1020C405E66F15BLL;
              goto LABEL_78;
            case 8:
              if (atomic_fetch_add(v37[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              uint64_t v50 = *((void *)v37 + 7);
              if (!v50) {
                goto LABEL_79;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)(v50 + 16));
              uint64_t v40 = (void *)v50;
              unsigned int v47 = -235920773;
              goto LABEL_77;
            case 9:
              if (atomic_fetch_add(v37[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_80;
              }
              uint64_t v43 = (void *)*((void *)v37 + 7);
              if (!v43) {
                goto LABEL_79;
              }
              int v44 = (void *)v43[6];
              if (v44)
              {
                v43[7] = v44;
                operator delete(v44);
              }
              uint64_t v45 = (void *)v43[3];
              if (v45)
              {
                v43[4] = v45;
                operator delete(v45);
              }
              std::string v46 = (std::__shared_weak_count *)v43[2];
              if (v46) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v46);
              }
              uint64_t v40 = v43;
              unsigned int v47 = 2071181815;
LABEL_77:
              uint64_t v41 = v47 | 0x1030C4000000000;
LABEL_78:
              MEMORY[0x22A614FA0](v40, v41);
LABEL_79:
              *((void *)v38 + 7) = 0;
              a1 = v66;
LABEL_80:
              *((void *)v38 + 7) = 0;
              *((_DWORD *)v38 + 16) = 0;
              *((unsigned char *)v38 + 68) = 1;
              *((double *)v38 + 7) = *(float *)(v36 + 4 * v33);
              if (v76 < 0) {
                operator delete(__p);
              }
              uint64_t v51 = *a5;
              if (a5[1] != *a5)
              {
                std::operator+<char>();
                *(void *)&long long v69 = &__p;
                unint64_t v52 = (atomic_ullong *volatile *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v72, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v69);
                uint64_t v53 = v52;
                switch(*((unsigned char *)v52 + 68))
                {
                  case 2:
                    if (atomic_fetch_add(v52[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_116;
                    }
                    uint64_t v54 = *((void *)v52 + 7);
                    if (!v54) {
                      goto LABEL_115;
                    }
                    if (*(char *)(v54 + 31) < 0) {
                      operator delete(*(void **)(v54 + 8));
                    }
                    unint64_t v55 = (void *)v54;
                    uint64_t v56 = 0x1012C404EF22A49;
                    goto LABEL_114;
                  case 3:
                    if (atomic_fetch_add(v52[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_116;
                    }
                    uint64_t v63 = (void *)*((void *)v52 + 7);
                    if (!v63) {
                      goto LABEL_115;
                    }
                    double v64 = (void *)v63[1];
                    if (v64)
                    {
                      v63[2] = v64;
                      operator delete(v64);
                    }
                    unint64_t v55 = v63;
                    uint64_t v56 = 0x1080C409938AC02;
                    goto LABEL_114;
                  case 4:
                    if (atomic_fetch_add(v52[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_116;
                    }
                    uint64_t v57 = (void *)*((void *)v52 + 7);
                    if (!v57) {
                      goto LABEL_115;
                    }
                    *(void *)&long long v69 = v57 + 1;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
                    goto LABEL_109;
                  case 5:
                    if (atomic_fetch_add(v52[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_116;
                    }
                    uint64_t v57 = (void *)*((void *)v52 + 7);
                    if (!v57) {
                      goto LABEL_115;
                    }
                    *(void *)&long long v69 = v57 + 1;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
LABEL_109:
                    unint64_t v55 = v57;
                    uint64_t v56 = 0x1020C405E66F15BLL;
                    goto LABEL_114;
                  case 8:
                    if (atomic_fetch_add(v52[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_116;
                    }
                    uint64_t v65 = *((void *)v52 + 7);
                    if (!v65) {
                      goto LABEL_115;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)(v65 + 16));
                    unint64_t v55 = (void *)v65;
                    unsigned int v62 = -235920773;
                    goto LABEL_113;
                  case 9:
                    if (atomic_fetch_add(v52[7], 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_116;
                    }
                    unint64_t v58 = (void *)*((void *)v52 + 7);
                    if (!v58) {
                      goto LABEL_115;
                    }
                    uint64_t v59 = (void *)v58[6];
                    if (v59)
                    {
                      v58[7] = v59;
                      operator delete(v59);
                    }
                    uint64_t v60 = (void *)v58[3];
                    if (v60)
                    {
                      v58[4] = v60;
                      operator delete(v60);
                    }
                    uint64_t v61 = (std::__shared_weak_count *)v58[2];
                    if (v61) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
                    }
                    unint64_t v55 = v58;
                    unsigned int v62 = 2071181815;
LABEL_113:
                    uint64_t v56 = v62 | 0x1030C4000000000;
LABEL_114:
                    MEMORY[0x22A614FA0](v55, v56);
LABEL_115:
                    *((void *)v53 + 7) = 0;
                    a1 = v66;
LABEL_116:
                    *((void *)v53 + 7) = 0;
                    *((_DWORD *)v53 + 16) = 0;
                    *((unsigned char *)v53 + 68) = 1;
                    *((double *)v53 + 7) = *(float *)(v51 + 4 * v33);
                    if (v76 < 0) {
                      operator delete(__p);
                    }
                    break;
                  default:
                    goto LABEL_116;
                }
              }
              if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v78.__r_.__value_.__l.__data_);
              }
              ++v33;
              uint64_t v31 = *(void *)(a1 + 344);
              v32 += 24;
              if (v33 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 352) - v31) >> 3)) {
                break;
              }
              continue;
            default:
              goto LABEL_80;
          }
          break;
        }
      }
      *(_OWORD *)unint64_t v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      turi::supervised::xgboost::MakeFeatMap((std::vector<std::string> *)&v69, (turi::ml_metadata **)(a1 + 376), v12, v13, v14, v15, v16, v17);
      (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(a1 + 1664) + 208) + 88))(v68);
      turi::supervised::xgboost::convert_vec_string(v68, (uint64_t)&v77);
    default:
      goto LABEL_40;
  }
}

void sub_2244EE198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,char a44)
{
  MEMORY[0x22A614FA0](v44, 0x1012C404EF22A49);
  if (*(char *)(v45 - 201) < 0) {
    operator delete(*(void **)(v45 - 224));
  }
  *(void *)(v45 - 224) = &a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 224));
  xgboost_old::utils::FeatMap::~FeatMap((xgboost_old::utils::FeatMap *)&a17);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::metric_tracker::get_training_metrics(turi::supervised::xgboost::metric_tracker *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *((void *)this + 9);
  if (*((void *)this + 10) != v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = (char *)this + 24;
    do
    {
      uint64_t v9 = (long long *)(v4 + 24 * v7);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      uint64_t v25 = a2;
      uint64_t v11 = (_DWORD *)std::map<std::pair<std::string,unsigned long>,float>::at((uint64_t)v8, (const void **)&__p.__r_.__value_.__l.__data_);
      uint64_t v12 = v11;
      uint64_t v14 = a3[1];
      unint64_t v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = *a3;
        uint64_t v17 = (v14 - *a3) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v20);
          uint64_t v16 = *a3;
          uint64_t v14 = a3[1];
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = &v21[4 * v17];
        *(_DWORD *)unint64_t v22 = *v12;
        uint64_t v15 = v22 + 4;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        *a3 = v22;
        a3[1] = v15;
        a3[2] = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v14 = *v11;
        uint64_t v15 = v14 + 4;
      }
      a3[1] = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v7;
      uint64_t v4 = *((void *)this + 9);
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 10) - v4) >> 3));
  }
}

void sub_2244EEC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::get_validation_metrics(turi::supervised::xgboost::metric_tracker *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((void *)this + 8))
  {
    uint64_t v5 = *((void *)this + 9);
    if (*((void *)this + 10) != v5)
    {
      unint64_t v7 = 0;
      do
      {
        unint64_t v8 = (long long *)(v5 + 24 * v7);
        if (*((char *)v8 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
        }
        else
        {
          long long v9 = *v8;
          __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
        }
        uint64_t v24 = a2;
        long long v10 = (_DWORD *)std::map<std::pair<std::string,unsigned long>,float>::at((uint64_t)this + 48, (const void **)&__p.__r_.__value_.__l.__data_);
        uint64_t v11 = v10;
        unint64_t v13 = a3[1];
        unint64_t v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v15 = *a3;
          uint64_t v16 = (v13 - *a3) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v12 - (void)v15;
          if (v18 >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v19);
            uint64_t v15 = *a3;
            unint64_t v13 = a3[1];
          }
          else
          {
            unint64_t v20 = 0;
          }
          uint64_t v21 = &v20[4 * v16];
          *(_DWORD *)uint64_t v21 = *v11;
          uint64_t v14 = v21 + 4;
          while (v13 != v15)
          {
            int v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *a3 = v21;
          a3[1] = v14;
          a3[2] = &v20[4 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v13 = *v10;
          uint64_t v14 = v13 + 4;
        }
        a3[1] = v14;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v7;
        uint64_t v5 = *((void *)this + 9);
      }
      while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 10) - v5) >> 3));
    }
  }
}

void sub_2244EEDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::xgboost_model::finalize_training(turi::supervised::xgboost::xgboost_model *this)
{
}

void sub_2244EF164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a10);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  a27 = &unk_26D759E10;
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v46 - 104, *(char **)(v46 - 96));
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::train(turi::supervised::xgboost::xgboost_model *this)
{
  uint64_t v229 = *MEMORY[0x263EF8340];
  uint64_t v206 = 0xFFFFFFFFLL;
  if ((*((void *)this + 163) - *((void *)this + 162)) >> 32)
  {
    __p[0] = &v206;
    turi::supervised::xgboost::xgboost_model::train(void)::$_0::operator()((unint64_t **)__p);
  }
  *(_DWORD *)((char *)v205 + 3) = 0;
  v205[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__str, "resume_from_checkpoint");
  int v185 = (char *)this + 224;
  if (turi::option_manager::is_option((uint64_t)this + 224, (const void **)__str))
  {
    std::string::basic_string[abi:ne180100]<0>(&v212, "resume_from_checkpoint");
    uint64_t v2 = (unsigned __int8 *)turi::option_manager::value((uint64_t)v185, (const void **)&v212.__r_.__value_.__l.__data_);
    switch(byte_268088B04)
    {
      case 0:
        BOOL v3 = 0;
        switch(v2[12])
        {
          case 0u:
            BOOL v4 = *(void *)v2 == turi::FLEX_UNDEFINED;
            goto LABEL_53;
          case 1u:
            double v48 = *(double *)v2;
            uint64_t v49 = turi::FLEX_UNDEFINED;
            goto LABEL_313;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_61;
          case 6u:
            int v52 = *((_DWORD *)v2 + 2);
            BOOL v53 = turi::FLEX_UNDEFINED == (uint64_t)(*(void *)v2 << 8) >> 8;
            goto LABEL_303;
          default:
            goto LABEL_374;
        }
      case 1:
        BOOL v3 = 0;
        switch(v2[12])
        {
          case 0u:
            double v48 = *(double *)&turi::FLEX_UNDEFINED;
            uint64_t v49 = *(void *)v2;
LABEL_313:
            BOOL v4 = v48 == (double)v49;
            goto LABEL_53;
          case 1u:
            BOOL v3 = *(double *)v2 == *(double *)&turi::FLEX_UNDEFINED;
            goto LABEL_61;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_61;
          case 6u:
            double v162 = *(double *)&turi::FLEX_UNDEFINED;
            double v163 = (double)*((int *)v2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v2 << 8) >> 8);
            goto LABEL_316;
          default:
            goto LABEL_374;
        }
      case 2:
        BOOL v3 = 0;
        unsigned int v33 = v2[12];
        if (v33 - 3 < 7 || v33 < 2) {
          goto LABEL_61;
        }
        if (v33 != 2) {
          goto LABEL_374;
        }
        double v34 = *(double *)v2;
        char v35 = *(unsigned char *)(*(void *)v2 + 31);
        if (v35 < 0) {
          size_t v36 = *(void *)(*(void *)&v34 + 16);
        }
        else {
          size_t v36 = *(unsigned __int8 *)(*(void *)v2 + 31);
        }
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
          uint64_t v166 = *(void *)(turi::FLEX_UNDEFINED + 16);
        }
        else {
          uint64_t v166 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        }
        if (v36 != v166) {
          goto LABEL_60;
        }
        uint64_t v167 = (void *)(*(void *)&v34 + 8);
        if (v35 < 0) {
          uint64_t v167 = (void *)*v167;
        }
        std::vector<std::pair<unsigned long, const char *>>::pointer v168 = (void *)(turi::FLEX_UNDEFINED + 8);
        if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
          std::vector<std::pair<unsigned long, const char *>>::pointer v168 = (void *)*v168;
        }
        if (v35 < 0)
        {
          BOOL v4 = memcmp(v167, v168, v36) == 0;
LABEL_53:
          BOOL v3 = v4;
        }
        else
        {
          if (!v36) {
            goto LABEL_350;
          }
          size_t v169 = v36 - 1;
          do
          {
            int v171 = *(unsigned __int8 *)v167;
            uint64_t v167 = (void *)((char *)v167 + 1);
            int v170 = v171;
            int v173 = *(unsigned __int8 *)v168;
            std::vector<std::pair<unsigned long, const char *>>::pointer v168 = (void *)((char *)v168 + 1);
            int v172 = v173;
            BOOL v174 = v169-- != 0;
            char v175 = v174;
            BOOL v3 = v170 == v172;
          }
          while (v170 == v172 && (v175 & 1) != 0);
        }
        goto LABEL_61;
      case 3:
        unsigned int v37 = v2[12];
        if (v37 > 9) {
          goto LABEL_374;
        }
        if (v37 != 3) {
          goto LABEL_60;
        }
        unint64_t v38 = *(double **)(*(void *)v2 + 8);
        uint64_t v39 = *(double **)(*(void *)v2 + 16);
        unint64_t v40 = v39 - v38;
        uint64_t v41 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v40 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v41) >> 3) {
          goto LABEL_60;
        }
        if (v39 == v38) {
          goto LABEL_350;
        }
        if (v40 <= 1) {
          uint64_t v42 = 1;
        }
        else {
          uint64_t v42 = v39 - v38;
        }
        if (*v38 != *v41) {
          goto LABEL_60;
        }
        uint64_t v43 = 1;
        do
        {
          unint64_t v44 = v43;
          if (v42 == v43) {
            break;
          }
          double v45 = v38[v43];
          double v46 = v41[v43++];
        }
        while (v45 == v46);
        BOOL v3 = v44 >= v40;
        goto LABEL_61;
      case 4:
        unsigned int v6 = v2[12];
        if (v6 > 9) {
          goto LABEL_374;
        }
        if (v6 != 4) {
          goto LABEL_60;
        }
        int v7 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v208, (uint64_t *)(*(void *)v2 + 8), (void *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_308;
      case 5:
        unsigned int v50 = v2[12];
        if (v50 > 9) {
          goto LABEL_374;
        }
        if (v50 != 5) {
          goto LABEL_60;
        }
        int v7 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v208, (uint64_t **)(*(void *)v2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_308;
      case 6:
        BOOL v3 = 0;
        switch(v2[12])
        {
          case 0u:
            int v52 = dword_268088B00;
            BOOL v53 = *(void *)v2 == turi::FLEX_UNDEFINED << 8 >> 8;
LABEL_303:
            BOOL v4 = v53 && v52 == 0;
            goto LABEL_53;
          case 1u:
            double v163 = *(double *)v2;
            double v162 = (double)dword_268088B00 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_316:
            BOOL v3 = vabdd_f64(v163, v162) < 0.0000005;
            goto LABEL_61;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_61;
          case 6u:
            BOOL v4 = ((turi::FLEX_UNDEFINED ^ *(void *)v2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v2 + 2) == dword_268088B00;
            goto LABEL_53;
          default:
            goto LABEL_374;
        }
      case 7:
        unsigned int v47 = v2[12];
        if (v47 >= 0xA) {
          goto LABEL_374;
        }
        BOOL v4 = v47 == 7;
        goto LABEL_53;
      case 8:
        BOOL v3 = 0;
        unsigned int v54 = v2[12];
        if (v54 < 8 || v54 == 9) {
          goto LABEL_61;
        }
        if (v54 != 8) {
          goto LABEL_374;
        }
        int v7 = turi::image_type::operator==(*(void *)v2 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_308:
        BOOL v3 = v7;
        goto LABEL_61;
      case 9:
        unsigned int v8 = v2[12];
        if (v8 < 9) {
          goto LABEL_60;
        }
        if (v8 != 9)
        {
LABEL_374:
          turi::flexible_type_fail(0);
          goto LABEL_377;
        }
        uint64_t v9 = turi::FLEX_UNDEFINED;
        long long v10 = *(void **)v2;
        if (turi::FLEX_UNDEFINED == *(void *)v2) {
          goto LABEL_350;
        }
        if (turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v10 + 1), turi::FLEX_UNDEFINED + 8))
        {
          unint64_t v12 = (char *)v10[3];
          uint64_t v11 = (char *)v10[4];
          uint64_t v13 = v11 - v12;
          if (v11 == v12) {
            goto LABEL_350;
          }
          if (!v10[1]) {
            goto LABEL_350;
          }
          uint64_t v14 = 1;
          do
          {
            uint64_t v15 = *(void *)v12;
            v12 += 8;
            v14 *= v15;
          }
          while (v12 != v11);
          if (v14)
          {
            v226.__r_.__value_.__r.__words[0] = 0;
            std::vector<unsigned long>::vector(__p, v13 >> 3, &v226);
            while (1)
            {
              uint64_t v16 = __p[0];
              if (__p[1] == __p[0])
              {
                uint64_t v25 = 0;
                double v26 = *(double *)(*(void *)v10[1] + 8 * v10[9]);
              }
              else
              {
                uint64_t v17 = 0;
                unint64_t v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                unint64_t v19 = (uint64_t *)v10[6];
                if (v18 <= 1) {
                  unint64_t v18 = 1;
                }
                unint64_t v20 = (uint64_t *)__p[0];
                unint64_t v21 = v18;
                do
                {
                  uint64_t v23 = *v20++;
                  uint64_t v22 = v23;
                  uint64_t v24 = *v19++;
                  v17 += v24 * v22;
                  --v21;
                }
                while (v21);
                uint64_t v25 = 0;
                double v26 = *(double *)(*(void *)v10[1] + 8 * (v10[9] + v17));
                unsigned int v27 = *(uint64_t **)(v9 + 48);
                long long v28 = (uint64_t *)__p[0];
                do
                {
                  uint64_t v30 = *v28++;
                  uint64_t v29 = v30;
                  uint64_t v31 = *v27++;
                  v25 += v31 * v29;
                  --v18;
                }
                while (v18);
              }
              double v32 = *(double *)(**(void **)(v9 + 8) + 8 * (*(void *)(v9 + 72) + v25));
              BOOL v3 = v26 == v32;
              if (v26 != v32) {
                break;
              }
              if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v10 + 1), (uint64_t *)__p))
              {
                uint64_t v16 = __p[0];
                break;
              }
            }
            if (v16)
            {
              __p[1] = v16;
              operator delete(v16);
            }
          }
          else
          {
LABEL_350:
            BOOL v3 = 1;
          }
        }
        else
        {
LABEL_60:
          BOOL v3 = 0;
        }
LABEL_61:
        int v5 = !v3;
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v212.__r_.__value_.__l.__data_);
        }
        break;
      default:
        goto LABEL_374;
    }
  }
  else
  {
    int v5 = 0;
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v212, "resume_from_checkpoint");
    uint64_t v51 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)v185, (const void **)&v212.__r_.__value_.__l.__data_);
    switch(*((unsigned char *)v51 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_82;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_82:
        __p[0] = *(void **)MEMORY[0x263F8C2B8];
        uint64_t v57 = *(void *)(MEMORY[0x263F8C2B8] + 72);
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
        uint64_t v214 = v57;
        uint64_t v215 = (std::__shared_weak_count *)(MEMORY[0x263F8C318] + 16);
        if (v218[0].__opaque[7] < 0) {
          operator delete(v217);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](&v218[0].__opaque[24]);
        goto LABEL_89;
      case 2:
        uint64_t v55 = *(void *)v51;
        if (*(char *)(*(void *)v51 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v55 + 8), *(void *)(v55 + 16));
        }
        else
        {
          long long v56 = *(_OWORD *)(v55 + 8);
          *(void *)&__str[16] = *(void *)(v55 + 24);
          *(_OWORD *)std::string __str = v56;
        }
        goto LABEL_89;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v51 + 8));
        goto LABEL_89;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v51 + 8));
        goto LABEL_89;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v51 + 8));
        goto LABEL_89;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v51, (std::string *)__str);
        goto LABEL_89;
      case 7:
        memset(__str, 0, 24);
        goto LABEL_89;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_89;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v51 + 8));
LABEL_89:
        long long v58 = *(_OWORD *)__str;
        v205[0] = *(_DWORD *)&__str[16];
        *(_DWORD *)((char *)v205 + 3) = *(_DWORD *)&__str[19];
        int v59 = __str[23];
        __str[23] = 0;
        __str[0] = 0;
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v212.__r_.__value_.__l.__data_);
          if ((v59 & 0x80000000) == 0) {
            goto LABEL_91;
          }
        }
        else if ((v59 & 0x80000000) == 0)
        {
LABEL_91:
          *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v58;
          LODWORD(v204.__r_.__value_.__r.__words[2]) = v205[0];
          *(_DWORD *)((char *)&v204.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v205 + 3);
          *((unsigned char *)&v204.__r_.__value_.__s + 23) = v59;
          goto LABEL_94;
        }
        std::string::__init_copy_ctor_external(&v204, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
LABEL_94:
        turi::sanitize_url((__n128 *)&v204, (__n128 *)__p);
        if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v204.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(__str, "resume_from_checkpoint");
        *(std::string::size_type *)((char *)v226.__r_.__value_.__r.__words + 5) = 0x200000000000000;
        v226.__r_.__value_.__r.__words[0] = 0;
        operator new();
      default:
        goto LABEL_375;
    }
  }
  *(_DWORD *)((char *)v203 + 3) = 0;
  v203[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__str, "model_checkpoint_path");
  if (turi::option_manager::is_option((uint64_t)v185, (const void **)__str))
  {
    std::string::basic_string[abi:ne180100]<0>(&v212, "model_checkpoint_path");
    uint64_t v61 = (unsigned __int8 *)turi::option_manager::value((uint64_t)v185, (const void **)&v212.__r_.__value_.__l.__data_);
    switch(byte_268088B04)
    {
      case 0:
        BOOL v62 = 0;
        switch(v61[12])
        {
          case 0u:
            BOOL v63 = *(void *)v61 == turi::FLEX_UNDEFINED;
            goto LABEL_148;
          case 1u:
            double v107 = *(double *)v61;
            uint64_t v108 = turi::FLEX_UNDEFINED;
            goto LABEL_328;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_156;
          case 6u:
            int v111 = *((_DWORD *)v61 + 2);
            BOOL v112 = turi::FLEX_UNDEFINED == (uint64_t)(*(void *)v61 << 8) >> 8;
            goto LABEL_318;
          default:
            goto LABEL_375;
        }
      case 1:
        BOOL v62 = 0;
        switch(v61[12])
        {
          case 0u:
            double v107 = *(double *)&turi::FLEX_UNDEFINED;
            uint64_t v108 = *(void *)v61;
LABEL_328:
            BOOL v63 = v107 == (double)v108;
            goto LABEL_148;
          case 1u:
            BOOL v62 = *(double *)v61 == *(double *)&turi::FLEX_UNDEFINED;
            goto LABEL_156;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_156;
          case 6u:
            double v164 = *(double *)&turi::FLEX_UNDEFINED;
            double v165 = (double)*((int *)v61 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v61 << 8) >> 8);
            goto LABEL_331;
          default:
            goto LABEL_375;
        }
      case 2:
        BOOL v62 = 0;
        unsigned int v92 = v61[12];
        if (v92 - 3 < 7 || v92 < 2) {
          goto LABEL_156;
        }
        if (v92 != 2) {
          goto LABEL_375;
        }
        double v93 = *(double *)v61;
        char v94 = *(unsigned char *)(*(void *)v61 + 31);
        if (v94 < 0) {
          size_t v95 = *(void *)(*(void *)&v93 + 16);
        }
        else {
          size_t v95 = *(unsigned __int8 *)(*(void *)v61 + 31);
        }
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0) {
          uint64_t v176 = *(void *)(turi::FLEX_UNDEFINED + 16);
        }
        else {
          uint64_t v176 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        }
        if (v95 != v176) {
          goto LABEL_155;
        }
        char v177 = (void *)(*(void *)&v93 + 8);
        if (v94 < 0) {
          char v177 = (void *)*v177;
        }
        double v178 = (void *)(turi::FLEX_UNDEFINED + 8);
        if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
          double v178 = (void *)*v178;
        }
        if (v94 < 0)
        {
          BOOL v63 = memcmp(v177, v178, v95) == 0;
LABEL_148:
          BOOL v62 = v63;
        }
        else
        {
          if (!v95) {
            goto LABEL_369;
          }
          size_t v179 = v95 - 1;
          do
          {
            int v181 = *(unsigned __int8 *)v177;
            char v177 = (void *)((char *)v177 + 1);
            int v180 = v181;
            int v183 = *(unsigned __int8 *)v178;
            double v178 = (void *)((char *)v178 + 1);
            int v182 = v183;
            BOOL v174 = v179-- != 0;
            char v184 = v174;
            BOOL v62 = v180 == v182;
          }
          while (v180 == v182 && (v184 & 1) != 0);
        }
        goto LABEL_156;
      case 3:
        unsigned int v96 = v61[12];
        if (v96 > 9) {
          goto LABEL_375;
        }
        if (v96 != 3) {
          goto LABEL_155;
        }
        long long v97 = *(double **)(*(void *)v61 + 8);
        unint64_t v98 = *(double **)(*(void *)v61 + 16);
        unint64_t v99 = v98 - v97;
        long long v100 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v99 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v100) >> 3) {
          goto LABEL_155;
        }
        if (v98 == v97) {
          goto LABEL_369;
        }
        if (v99 <= 1) {
          uint64_t v101 = 1;
        }
        else {
          uint64_t v101 = v98 - v97;
        }
        if (*v97 != *v100) {
          goto LABEL_155;
        }
        uint64_t v102 = 1;
        do
        {
          unint64_t v103 = v102;
          if (v101 == v102) {
            break;
          }
          double v104 = v97[v102];
          double v105 = v100[v102++];
        }
        while (v104 == v105);
        BOOL v62 = v103 >= v99;
        goto LABEL_156;
      case 4:
        unsigned int v65 = v61[12];
        if (v65 > 9) {
          goto LABEL_375;
        }
        if (v65 != 4) {
          goto LABEL_155;
        }
        int v66 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v208, (uint64_t *)(*(void *)v61 + 8), (void *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_323;
      case 5:
        unsigned int v109 = v61[12];
        if (v109 > 9) {
          goto LABEL_375;
        }
        if (v109 != 5) {
          goto LABEL_155;
        }
        int v66 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v208, (uint64_t **)(*(void *)v61 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_323;
      case 6:
        BOOL v62 = 0;
        switch(v61[12])
        {
          case 0u:
            int v111 = dword_268088B00;
            BOOL v112 = *(void *)v61 == turi::FLEX_UNDEFINED << 8 >> 8;
LABEL_318:
            BOOL v63 = v112 && v111 == 0;
            goto LABEL_148;
          case 1u:
            double v165 = *(double *)v61;
            double v164 = (double)dword_268088B00 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_331:
            BOOL v62 = vabdd_f64(v165, v164) < 0.0000005;
            goto LABEL_156;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_156;
          case 6u:
            BOOL v63 = ((turi::FLEX_UNDEFINED ^ *(void *)v61) & 0xFFFFFFFFFFFFFFLL) == 0
               && *((_DWORD *)v61 + 2) == dword_268088B00;
            goto LABEL_148;
          default:
            goto LABEL_375;
        }
      case 7:
        unsigned int v106 = v61[12];
        if (v106 >= 0xA) {
          goto LABEL_375;
        }
        BOOL v63 = v106 == 7;
        goto LABEL_148;
      case 8:
        BOOL v62 = 0;
        unsigned int v113 = v61[12];
        if (v113 < 8 || v113 == 9) {
          goto LABEL_156;
        }
        if (v113 != 8) {
          goto LABEL_375;
        }
        int v66 = turi::image_type::operator==(*(void *)v61 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_323:
        BOOL v62 = v66;
        goto LABEL_156;
      case 9:
        unsigned int v67 = v61[12];
        if (v67 < 9) {
          goto LABEL_155;
        }
        if (v67 != 9) {
          goto LABEL_375;
        }
        uint64_t v68 = turi::FLEX_UNDEFINED;
        long long v69 = *(void **)v61;
        if (turi::FLEX_UNDEFINED == *(void *)v61) {
          goto LABEL_369;
        }
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v69 + 1), turi::FLEX_UNDEFINED + 8))
        {
LABEL_155:
          BOOL v62 = 0;
          goto LABEL_156;
        }
        long long v71 = (char *)v69[3];
        unint64_t v70 = (char *)v69[4];
        uint64_t v72 = v70 - v71;
        if (v70 == v71) {
          goto LABEL_369;
        }
        if (!v69[1]) {
          goto LABEL_369;
        }
        uint64_t v73 = 1;
        do
        {
          uint64_t v74 = *(void *)v71;
          v71 += 8;
          v73 *= v74;
        }
        while (v71 != v70);
        if (!v73)
        {
LABEL_369:
          BOOL v62 = 1;
          goto LABEL_156;
        }
        v226.__r_.__value_.__r.__words[0] = 0;
        std::vector<unsigned long>::vector(__p, v72 >> 3, &v226);
        break;
      default:
        goto LABEL_375;
    }
    while (1)
    {
      unint64_t v75 = __p[0];
      if (__p[1] == __p[0])
      {
        uint64_t v84 = 0;
        double v85 = *(double *)(*(void *)v69[1] + 8 * v69[9]);
      }
      else
      {
        uint64_t v76 = 0;
        unint64_t v77 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        std::string v78 = (uint64_t *)v69[6];
        if (v77 <= 1) {
          unint64_t v77 = 1;
        }
        uint64_t v79 = (uint64_t *)__p[0];
        unint64_t v80 = v77;
        do
        {
          uint64_t v82 = *v79++;
          uint64_t v81 = v82;
          uint64_t v83 = *v78++;
          v76 += v83 * v81;
          --v80;
        }
        while (v80);
        uint64_t v84 = 0;
        double v85 = *(double *)(*(void *)v69[1] + 8 * (v69[9] + v76));
        long long v86 = *(uint64_t **)(v68 + 48);
        long long v87 = (uint64_t *)__p[0];
        do
        {
          uint64_t v89 = *v87++;
          uint64_t v88 = v89;
          uint64_t v90 = *v86++;
          v84 += v90 * v88;
          --v77;
        }
        while (v77);
      }
      double v91 = *(double *)(**(void **)(v68 + 8) + 8 * (*(void *)(v68 + 72) + v84));
      BOOL v62 = v85 == v91;
      if (v85 != v91) {
        break;
      }
      if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v69 + 1), (uint64_t *)__p))
      {
        unint64_t v75 = __p[0];
        break;
      }
    }
    if (v75)
    {
      __p[1] = v75;
      operator delete(v75);
    }
LABEL_156:
    int v64 = !v62;
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v212.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v64 = 0;
  }
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v64) {
      goto LABEL_160;
    }
LABEL_163:
    unsigned int v200 = 0;
    uint64_t v201 = 0;
    uint64_t v198 = 0;
    uint64_t v199 = 0;
    turi::supervised::xgboost::xgboost_model::_init_data(this, __p);
    *(void *)std::string __str = &v200;
    *(void *)&__str[8] = &v198;
    std::tuple<std::shared_ptr<turi::sframe> &,std::shared_ptr<turi::sframe> &>::operator=[abi:ne180100]<std::shared_ptr<turi::sframe>,std::shared_ptr<turi::sframe>,0>((uint64_t *)__str, (long long *)__p);
    if (v215) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v215);
    }
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    std::string v119 = (std::__shared_weak_count *)v201;
    v197[0] = v200;
    v197[1] = (xgboost_old::learner::DMatrix *)v201;
    if (v201) {
      atomic_fetch_add_explicit(v201 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v120 = (std::__shared_weak_count *)v199;
    v196[0] = v198;
    v196[1] = v199;
    if (v199) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v199 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = 0uLL;
    LODWORD(v195.__r_.__value_.__r.__words[2]) = v205[0];
    *(_DWORD *)((char *)&v195.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v205 + 3);
    *((unsigned char *)&v195.__r_.__value_.__s + 23) = 0;
    turi::supervised::xgboost::xgboost_model::_init_learner((xgboost_old::learner::BoostLearner **)this, v197, v196, 0, (uint64_t)&v195, 0);
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (v120) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v120);
    }
    if (v119) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v119);
    }
    uint64_t v186 = v198;
    turi::supervised::xgboost::xgboost_model::_init_progress_printer(this, v198 != 0, (uint64_t)__p);
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v194);
    turi::supervised::xgboost::metric_tracker::metric_tracker(&v212, (long long **)this);
    uint64_t early_stopping_rounds = turi::supervised::xgboost::xgboost_model::_get_early_stopping_rounds(this, v186 != 0);
    if (!early_stopping_rounds)
    {
      size_t v124 = 0;
      goto LABEL_226;
    }
    uint64_t v122 = *((void *)this + 44);
    if (*(char *)(v122 - 1) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v122 - 24), *(void *)(v122 - 16));
    }
    else
    {
      long long v123 = *(_OWORD *)(v122 - 24);
      *(void *)&__str[16] = *(void *)(v122 - 8);
      *(_OWORD *)std::string __str = v123;
    }
    char v125 = __str[23];
    if ((__str[23] & 0x80000000) != 0)
    {
      if (*(void *)&__str[8] == 3)
      {
        if (**(_WORD **)__str != 30049 || *(unsigned char *)(*(void *)__str + 2) != 99) {
          goto LABEL_217;
        }
        goto LABEL_223;
      }
      if (*(void *)&__str[8] == 8)
      {
        uint64_t v126 = *(void **)__str;
LABEL_216:
        if (*v126 != 0x7963617275636361) {
          goto LABEL_217;
        }
LABEL_223:
        char v127 = 1;
        int v128 = 0x800000;
LABEL_224:
        int v130 = v128;
        uint64_t v131 = (char *)operator new(0x68uLL);
        *((void *)v131 + 1) = 0;
        *((void *)v131 + 2) = 0;
        *(void *)uint64_t v131 = &unk_26D785088;
        *(_OWORD *)(v131 + 24) = 0u;
        size_t v124 = v131 + 24;
        *(_OWORD *)(v131 + 40) = 0u;
        *(_OWORD *)(v131 + 56) = 0u;
        *((void *)v131 + 9) = early_stopping_rounds + 1;
        v131[80] = v127;
        *((void *)v131 + 11) = 0;
        *((void *)v131 + 12) = early_stopping_rounds;
        *((_DWORD *)v131 + 21) = v130;
        if (v125 < 0) {
          operator delete(*(void **)__str);
        }
LABEL_226:
        gettimeofday(&v193, 0);
        gettimeofday(&v193, 0);
        std::string::basic_string[abi:ne180100]<0>(&v208, "max_iterations");
        if (turi::option_manager::is_option((uint64_t)v185, (const void **)&v208.__r_.__value_.__l.__data_))
        {
          std::string::basic_string[abi:ne180100]<0>(&v227, "max_iterations");
          uint64_t v132 = (unsigned char *)turi::option_manager::value((uint64_t)v185, (const void **)&v227);
          unint64_t v133 = 0;
          switch(v132[12])
          {
            case 0:
              unint64_t v133 = *(void *)v132;
              goto LABEL_258;
            case 1:
              unint64_t v133 = (uint64_t)*(double *)v132;
              goto LABEL_258;
            case 2:
              uint64_t v136 = *(void *)v132;
              std::string v137 = (char **)(*(void *)v132 + 8);
              size_t __idx = 0;
              uint64_t v138 = (char *)v137;
              if (*(char *)(v136 + 31) < 0) {
                uint64_t v138 = *v137;
              }
              std::string::basic_string[abi:ne180100]<0>(__str, v138);
              unint64_t v133 = std::stoll((const std::string *)__str, &__idx, 10);
              if ((__str[23] & 0x80000000) != 0) {
                operator delete(*(void **)__str);
              }
              if (*(char *)(v136 + 31) < 0) {
                uint64_t v139 = *(void *)(v136 + 16);
              }
              else {
                uint64_t v139 = *(unsigned __int8 *)(v136 + 31);
              }
              if (__idx != v139)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                uint64_t v160 = std::string::append(&v226, " cannot be interpreted as an integer");
                long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
                *(void *)&__str[16] = *((void *)&v160->__r_.__value_.__l + 2);
                *(_OWORD *)std::string __str = v161;
                v160->__r_.__value_.__l.__size_ = 0;
                v160->__r_.__value_.__r.__words[2] = 0;
                v160->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, (const std::string *)__str);
                __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              goto LABEL_258;
            case 3:
              uint64_t v135 = *(void *)v132;
              memset(__str, 0, 24);
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v135 + 8), *(void *)(v135 + 16), (uint64_t)(*(void *)(v135 + 16) - *(void *)(v135 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (*(void *)__str)
              {
                *(void *)&__str[8] = *(void *)__str;
                operator delete(*(void **)__str);
              }
              goto LABEL_257;
            case 4:
              uint64_t v140 = *(void *)v132;
              memset(__str, 0, 24);
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v140 + 8), *(uint64_t **)(v140 + 16), (uint64_t)(*(void *)(v140 + 16) - *(void *)(v140 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v226.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
              goto LABEL_257;
            case 5:
              uint64_t v141 = *(void *)v132;
              memset(__str, 0, 24);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v141 + 8), *(uint64_t **)(v141 + 16), (uint64_t)(*(void *)(v141 + 16) - *(void *)(v141 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v226.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
              goto LABEL_257;
            case 6:
              unint64_t v133 = (uint64_t)(*(void *)v132 << 8) >> 8;
              goto LABEL_258;
            case 7:
              goto LABEL_258;
            case 8:
              uint64_t v142 = *(void *)v132;
              uint64_t v143 = *(void *)(*(void *)v132 + 16);
              *(void *)std::string __str = *(void *)(*(void *)v132 + 8);
              *(void *)&__str[8] = v143;
              if (v143) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v143 + 8), 1u, memory_order_relaxed);
              }
              long long v144 = *(_OWORD *)(v142 + 24);
              long long v145 = *(_OWORD *)(v142 + 56);
              long long v210 = *(_OWORD *)(v142 + 40);
              long long v211 = v145;
              *(_OWORD *)&__str[16] = v144;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
              goto LABEL_257;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)v132 + 8);
              turi::flexible_type_fail(0);
              if (*((void *)&v210 + 1))
              {
                *(void *)&long long v211 = *((void *)&v210 + 1);
                operator delete(*((void **)&v210 + 1));
              }
              if (*(void *)&__str[16])
              {
                *(void *)&__str[24] = *(void *)&__str[16];
                operator delete(*(void **)&__str[16]);
              }
              if (*(void *)&__str[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
              }
LABEL_257:
              unint64_t v133 = 0;
LABEL_258:
              if (v228 < 0) {
                operator delete((void *)v227.tv_sec);
              }
              goto LABEL_260;
            default:
              turi::flexible_type_fail(0);
              goto LABEL_377;
          }
        }
        unint64_t v133 = 1;
LABEL_260:
        if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v208.__r_.__value_.__l.__data_);
        }
        uint64_t v146 = 0;
        uint64_t v147 = (cppipc *)turi::table_printer::print_header((turi::table_printer *)__p);
        while ((unint64_t)v146 < v133)
        {
          if (cppipc::must_cancel(v147)) {
            turi::supervised::xgboost::xgboost_model::train(void)::$_1::operator()();
          }
          int is_random_forest = turi::supervised::xgboost::xgboost_model::is_random_forest(this);
          atomic_ullong *volatile v149 = (xgboost_old::learner::BoostLearner *)*((void *)this + 208);
          if (is_random_forest) {
            xgboost_old::learner::BoostLearner::UpdateOneIterKeepGpair(v149, (uint64_t)v146, v200);
          }
          else {
            xgboost_old::learner::BoostLearner::UpdateOneIter(v149, (uint64_t)v146, v200);
          }
          uint64_t v190 = 0;
          uint64_t v191 = 0;
          uint64_t v192 = 0;
          turi::supervised::xgboost::xgboost_model::xgboost_predict(this, (uint64_t)v200, 0, (uint64_t *)&v190, 1.0 / (double)((unint64_t)v146->__r_.__value_.__r.__words + 1));
          turi::supervised::xgboost::fast_evaluate((uint64_t)&v190, (uint64_t)v200 + 16, &v212, (float **)&v189);
          turi::supervised::xgboost::metric_tracker::track_training((uint64_t)&v212, (uint64_t)v146, &v189);
          if (v186)
          {
            memset(__str, 0, 24);
            turi::supervised::xgboost::xgboost_model::xgboost_predict(this, v198, 0, (uint64_t *)__str, 1.0 / (double)((unint64_t)v146->__r_.__value_.__r.__words + 1));
            turi::supervised::xgboost::fast_evaluate((uint64_t)__str, v198 + 16, &v212, (float **)&v226);
            if (v189.__r_.__value_.__r.__words[0])
            {
              v189.__r_.__value_.__l.__size_ = v189.__r_.__value_.__r.__words[0];
              operator delete(v189.__r_.__value_.__l.__data_);
            }
            std::string v189 = v226;
            turi::supervised::xgboost::metric_tracker::track_validation((uint64_t)&v212, (uint64_t)v146, &v189);
            if (*(void *)__str)
            {
              *(void *)&__str[8] = *(void *)__str;
              operator delete(*(void **)__str);
            }
          }
          gettimeofday((timeval *)__str, 0);
          turi::supervised::xgboost::metric_tracker::make_progress_table_row((turi::supervised::xgboost::metric_tracker *)&v212, (double)(*(_DWORD *)&__str[8] - v193.tv_usec) / 1000000.0 + (double)(*(void *)__str - v193.tv_sec), v146, (std::string::size_type)&v187);
          v226.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((v188 - v187) >> 3);
          v208.__r_.__value_.__r.__words[0] = ((char *)__p[1] - (char *)__p[0]) >> 5;
          if (v226.__r_.__value_.__r.__words[0] != v208.__r_.__value_.__r.__words[0])
          {
            *(void *)std::string __str = &v226;
            *(void *)&__str[8] = &v208;
            turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
          }
          unint64_t add = atomic_fetch_add(v216, 1uLL);
          BOOL v151 = turi::table_printer::register_tick((turi::table_printer *)__p, (unint64_t)v146->__r_.__value_.__r.__words + 1, add + 1);
          BOOL v152 = v151;
          if (v151)
          {
            pthread_mutex_lock(v218);
            turi::table_printer::print_row<std::string>(__p, &v187);
            pthread_mutex_unlock(v218);
          }
          if (v225 && !(add % v225))
          {
            pthread_mutex_lock(v219);
            uint64_t v153 = v187;
            uint64_t v154 = v188;
            if (!v220)
            {
              std::vector<turi::flexible_type>::resize(v222, 0xAAAAAAAAAAAAAAABLL * ((v188 - v187) >> 3));
              uint64_t v153 = v187;
              uint64_t v154 = v188;
              unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * ((v188 - v187) >> 3);
              if (v155 <= v224 - v223)
              {
                if (v155 < v224 - v223) {
                  uint64_t v224 = v223 - 0x5555555555555555 * ((v188 - v187) >> 3);
                }
              }
              else
              {
                std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)&v223, v155 - (v224 - v223));
                uint64_t v153 = v187;
                uint64_t v154 = v188;
              }
            }
            if (v154 != v153) {
              turi::flexible_type::operator=<std::string>(v222[0]);
            }
            turi::table_printer::track_progress_row((uint64_t)__p, v222);
            BOOL v221 = v152;
            pthread_mutex_unlock(v219);
          }
          if (v124)
          {
            uint64_t v156 = *((void *)this + 209);
            if (v156) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v156 + 8), 1uLL, memory_order_relaxed);
            }
            turi::supervised::xgboost::metric_tracker::get_validation_metrics((turi::supervised::xgboost::metric_tracker *)&v212, (uint64_t)v146, (char **)__str);
            turi::supervised::xgboost::early_stopping_checkpointer::add();
          }
          uint64_t v146 = (std::string *)((char *)v146 + 1);
          *(void *)std::string __str = &v187;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          if (v189.__r_.__value_.__r.__words[0])
          {
            v189.__r_.__value_.__l.__size_ = v189.__r_.__value_.__r.__words[0];
            operator delete(v189.__r_.__value_.__l.__data_);
          }
          uint64_t v147 = (cppipc *)v190;
          if (v190)
          {
            uint64_t v191 = v190;
            operator delete(v190);
          }
        }
        turi::table_printer::print_footer((turi::table_printer *)__p);
        if ((*(uint64_t (**)(void))(*(void *)v194 + 64))(v194))
        {
          _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v226);
          atomic_ullong *volatile v157 = (turi::unity_sframe *)v226.__r_.__value_.__r.__words[0];
          turi::table_printer::get_tracked_table((turi::table_printer *)__p, (turi::sframe *)__str);
          turi::unity_sframe::construct_from_sframe(v157, (const turi::sframe *)__str);
        }
        unint64_t v158 = (turi::unity_sframe *)v194;
        turi::table_printer::get_tracked_table((turi::table_printer *)__p, (turi::sframe *)__str);
        turi::unity_sframe::construct_from_sframe(v158, (const turi::sframe *)__str);
      }
    }
    else
    {
      if (__str[23] == 3)
      {
        if (*(unsigned __int16 *)__str != 30049 || __str[2] != 99) {
          goto LABEL_217;
        }
        goto LABEL_223;
      }
      if (__str[23] == 8)
      {
        uint64_t v126 = __str;
        goto LABEL_216;
      }
    }
LABEL_217:
    char v127 = 0;
    int v128 = 2139095039;
    goto LABEL_224;
  }
  if (!v64) {
    goto LABEL_163;
  }
LABEL_160:
  std::string::basic_string[abi:ne180100]<0>(&v212, "model_checkpoint_path");
  unint64_t v110 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)v185, (const void **)&v212.__r_.__value_.__l.__data_);
  switch(*((unsigned char *)v110 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_177;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_177:
      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v116 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v214 = v116;
      uint64_t v215 = (std::__shared_weak_count *)(MEMORY[0x263F8C318] + 16);
      if (v218[0].__opaque[7] < 0) {
        operator delete(v217);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v218[0].__opaque[24]);
      goto LABEL_184;
    case 2:
      uint64_t v114 = *(void *)v110;
      if (*(char *)(*(void *)v110 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v114 + 8), *(void *)(v114 + 16));
      }
      else
      {
        long long v115 = *(_OWORD *)(v114 + 8);
        *(void *)&__str[16] = *(void *)(v114 + 24);
        *(_OWORD *)std::string __str = v115;
      }
      goto LABEL_184;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v110 + 8));
      goto LABEL_184;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v110 + 8));
      goto LABEL_184;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v110 + 8));
      goto LABEL_184;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v110, (std::string *)__str);
      goto LABEL_184;
    case 7:
      memset(__str, 0, 24);
      goto LABEL_184;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_184;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v110 + 8));
LABEL_184:
      long long v117 = *(_OWORD *)__str;
      v203[0] = *(_DWORD *)&__str[16];
      *(_DWORD *)((char *)v203 + 3) = *(_DWORD *)&__str[19];
      int v118 = __str[23];
      __str[23] = 0;
      __str[0] = 0;
      if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v212.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "model_checkpoint_path");
      if (v118 < 0)
      {
        std::string::__init_copy_ctor_external(&v202, (const std::string::value_type *)v117, *((std::string::size_type *)&v117 + 1));
      }
      else
      {
        *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v117;
        LODWORD(v202.__r_.__value_.__r.__words[2]) = v203[0];
        *(_DWORD *)((char *)&v202.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v203 + 3);
        *((unsigned char *)&v202.__r_.__value_.__s + 23) = v118;
      }
      turi::sanitize_url((__n128 *)&v202, (__n128 *)__str);
      turi::flexible_type::flexible_type<std::string>((uint64_t)&v212);
    default:
      break;
  }
LABEL_375:
  turi::flexible_type_fail(0);
LABEL_377:
  __break(1u);
}

void sub_2244F2CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, boost::detail::shared_count *a10, void *a11, uint64_t a12, int a13, int a14)
{
  uint64_t v15 = (void *)STACK[0x410];
  if (STACK[0x410])
  {
    STACK[0x418] = (unint64_t)v15;
    operator delete(v15);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (a14 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::early_stopping_checkpointer::add()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::get_temp_name((turi::fs_impl *)&__p);
}

void sub_2244F4004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::~metric_tracker(char **this)
{
  uint64_t v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 6), this[7]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 3), this[4]);
  uint64_t v2 = this;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void xgboost_old::utils::FeatMap::~FeatMap(xgboost_old::utils::FeatMap *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void turi::supervised::xgboost::xgboost_model::predict_impl(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  memset(v32, 0, sizeof(v32));
  unint64_t v8 = turi::supervised::xgboost::xgboost_model::num_classes(a1);
  int v9 = *(unsigned __int8 *)(a3 + 23);
  if (v8 < 3) {
    goto LABEL_17;
  }
  if ((v9 & 0x80) != 0)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    if (v11 == 6 && **(_DWORD **)a3 == 1735549293 && *(_WORD *)(*(void *)a3 + 4) == 28265) {
      goto LABEL_36;
    }
    if (v11 != 11) {
      goto LABEL_20;
    }
    long long v10 = *(uint64_t **)a3;
  }
  else
  {
    if (v9 == 6)
    {
      BOOL v18 = *(_DWORD *)a3 == 1735549293 && *(_WORD *)(a3 + 4) == 28265;
      uint64_t v16 = a3;
      if (!v18) {
        goto LABEL_27;
      }
      goto LABEL_36;
    }
    long long v10 = (uint64_t *)a3;
    if (v9 != 11) {
      goto LABEL_22;
    }
  }
  uint64_t v13 = *v10;
  uint64_t v14 = *(uint64_t *)((char *)v10 + 3);
  if (v13 != 0x6C696261626F7270 || v14 != 0x7974696C69626162)
  {
LABEL_17:
    if ((v9 & 0x80) == 0)
    {
      uint64_t v16 = a3;
      if (v9 == 6) {
        goto LABEL_27;
      }
      goto LABEL_22;
    }
LABEL_20:
    if (*(void *)(a3 + 8) == 6)
    {
      uint64_t v16 = *(void *)a3;
LABEL_27:
      int v19 = *(_DWORD *)v16;
      int v20 = *(unsigned __int16 *)(v16 + 4);
      char v17 = v19 == 1735549293 && v20 == 28265;
LABEL_33:
      turi::supervised::xgboost::xgboost_model::xgboost_predict(a1, a2, v17, v32, 0.0);
      turi::supervised::prediction_type_enum_from_name((void *)a3);
      turi::supervised::xgboost::xgboost_model::num_classes(a1);
      uint64_t v22 = *((void *)a1 + 48);
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      }
      turi::supervised::xgboost::transform_prediction(a4);
    }
LABEL_22:
    char v17 = 0;
    goto LABEL_33;
  }
LABEL_36:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Output type '", 13);
  int v24 = *(char *)(a3 + 23);
  if (v24 >= 0) {
    uint64_t v25 = a3;
  }
  else {
    uint64_t v25 = *(void *)a3;
  }
  if (v24 >= 0) {
    uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v26 = *(void *)(a3 + 8);
  }
  unsigned int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
  long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' is only supported for binary classification.", 46);
  uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" For multi-class classification, use predict_topk() instead.", 60);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v29);
  turi::supervised::xgboost::xgboost_model::predict_impl(xgboost_old::learner::DMatrix const&,std::string const&)::$_0::operator()();
}

void sub_2244F434C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  int v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(void *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::predict(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void v21[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  *(atomic_ullong **)((char *)v21 + 5) = (atomic_ullong *)0x700000000000000;
  v21[0] = 0;
  turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(v19, a2, v21, 2, 0);
  switch(BYTE4(v21[1]))
  {
    case 2:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      int v7 = v21[0];
      if (!v21[0]) {
        goto LABEL_33;
      }
      if (*((char *)v21[0] + 31) < 0) {
        operator delete(*((void **)v21[0] + 1));
      }
      unint64_t v8 = v7;
      uint64_t v9 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      long long v10 = v21[0];
      if (!v21[0]) {
        goto LABEL_33;
      }
      uint64_t v11 = (void *)v21[0][1];
      if (v11)
      {
        v21[0][2] = (atomic_ullong)v11;
        operator delete(v11);
      }
      unint64_t v8 = v10;
      uint64_t v9 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v12 = v21[0];
      if (!v21[0]) {
        goto LABEL_33;
      }
      v20[0] = (void **)(v21[0] + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v20);
      goto LABEL_27;
    case 5:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v12 = v21[0];
      if (!v21[0]) {
        goto LABEL_33;
      }
      v20[0] = (void **)(v21[0] + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v20);
LABEL_27:
      unint64_t v8 = v12;
      uint64_t v9 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      BOOL v18 = v21[0];
      if (!v21[0]) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v21[0] + 2);
      unint64_t v8 = v18;
      unsigned int v17 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v13 = v21[0];
      if (!v21[0]) {
        goto LABEL_33;
      }
      uint64_t v14 = (void *)v21[0][6];
      if (v14)
      {
        v21[0][7] = (atomic_ullong)v14;
        operator delete(v14);
      }
      uint64_t v15 = (void *)v13[3];
      if (v15)
      {
        v13[4] = (atomic_ullong)v15;
        operator delete(v15);
      }
      uint64_t v16 = (std::__shared_weak_count *)v13[2];
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      unint64_t v8 = v13;
      unsigned int v17 = 2071181815;
LABEL_31:
      uint64_t v9 = v17 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v8, v9);
LABEL_33:
      memset(v21, 0, 13);
      turi::supervised::xgboost::xgboost_model::predict_impl(a1, (uint64_t)v19, a3, a4);
    default:
      goto LABEL_33;
  }
}

void sub_2244F460C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)va);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::fast_predict(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v8 = ((uint64_t (*)(uint64_t, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
  uint64_t v4 = *(void *)(a1 + 384);
  uint64_t v5 = *(void *)(a1 + 376);
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  turi::supervised::xgboost::make_simple_dmatrix((xgboost_old::io::DMatrixSimple *)v7);
}

void sub_2244F4894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  xgboost_old::io::DMatrixSimple::~DMatrixSimple((xgboost_old::io::DMatrixSimple *)va);
  _Unwind_Resume(a1);
}

void sub_2244F48EC()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x2244F48E4);
}

void turi::supervised::xgboost::xgboost_model::fast_predict_topk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v8 = ((uint64_t (*)(uint64_t, uint64_t))turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string)(a1, a3);
  uint64_t v4 = *(void *)(a1 + 384);
  uint64_t v5 = *(void *)(a1 + 376);
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  turi::supervised::xgboost::make_simple_dmatrix((xgboost_old::io::DMatrixSimple *)v7);
}

void sub_2244F4A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  turi::sframe::~sframe((turi::sframe *)&a47);
  xgboost_old::io::DMatrixSimple::~DMatrixSimple((xgboost_old::io::DMatrixSimple *)&a16);
  _Unwind_Resume(a1);
}

void sub_2244F4A88()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x2244F4A80);
}

void turi::supervised::xgboost::xgboost_model::predict_topk_impl(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, turi::sframe *a5@<X8>)
{
  unint64_t v10 = turi::supervised::xgboost::xgboost_model::num_classes(a1);
  if (v10 < a4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"The training data contained ", 28);
    int v19 = (void *)std::ostream::operator<<();
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" classes.", 9);
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" The parameter 'k' must be less than or equal to the number of ", 63);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"classes in the training data.", 29);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v22);
    v23[2] = __p;
    turi::supervised::xgboost::xgboost_model::predict_topk_impl(xgboost_old::learner::DMatrix const&,std::string const&,unsigned long)::$_0::operator()();
  }
  __p[0] = 0;
  __p[1] = 0;
  v25[0] = 0;
  int v11 = *(char *)(a3 + 23);
  if (v11 < 0)
  {
    if (*(void *)(a3 + 8) != 6)
    {
LABEL_13:
      char v16 = 0;
      goto LABEL_14;
    }
    unint64_t v12 = *(const std::string::value_type **)a3;
  }
  else
  {
    unint64_t v12 = (const std::string::value_type *)a3;
    if (v11 != 6) {
      goto LABEL_13;
    }
  }
  int v13 = *(_DWORD *)v12;
  int v14 = *((unsigned __int16 *)v12 + 2);
  char v16 = v13 == 1735549293 && v14 == 28265;
LABEL_14:
  turi::supervised::xgboost::xgboost_model::xgboost_predict(a1, a2, v16, (uint64_t *)__p, 0.0);
  uint64_t v17 = *((void *)a1 + 47);
  uint64_t v18 = *((void *)a1 + 48);
  v23[0] = v17;
  v23[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  turi::supervised::xgboost::transform_prediction_topk((const std::string::value_type **)a3, a4, v10, (uint64_t)v23, a5);
}

void sub_2244F4C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void turi::supervised::xgboost::xgboost_model::predict_topk(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, turi::sframe *a5@<X8>)
{
  v23[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  *(atomic_ullong **)((char *)v23 + 5) = (atomic_ullong *)0x700000000000000;
  v23[0] = 0;
  turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(v21, a2, v23, 2, 0);
  switch(BYTE4(v23[1]))
  {
    case 2:
      if (atomic_fetch_add(v23[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v23[0];
      if (!v23[0]) {
        goto LABEL_33;
      }
      if (*((char *)v23[0] + 31) < 0) {
        operator delete(*((void **)v23[0] + 1));
      }
      unint64_t v10 = v9;
      uint64_t v11 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(v23[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      unint64_t v12 = v23[0];
      if (!v23[0]) {
        goto LABEL_33;
      }
      int v13 = (void *)v23[0][1];
      if (v13)
      {
        v23[0][2] = (atomic_ullong)v13;
        operator delete(v13);
      }
      unint64_t v10 = v12;
      uint64_t v11 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(v23[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      int v14 = v23[0];
      if (!v23[0]) {
        goto LABEL_33;
      }
      v22[0] = (void **)(v23[0] + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v22);
      goto LABEL_27;
    case 5:
      if (atomic_fetch_add(v23[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      int v14 = v23[0];
      if (!v23[0]) {
        goto LABEL_33;
      }
      v22[0] = (void **)(v23[0] + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v22);
LABEL_27:
      unint64_t v10 = v14;
      uint64_t v11 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(v23[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      int v20 = v23[0];
      if (!v23[0]) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v23[0] + 2);
      unint64_t v10 = v20;
      unsigned int v19 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(v23[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v15 = v23[0];
      if (!v23[0]) {
        goto LABEL_33;
      }
      char v16 = (void *)v23[0][6];
      if (v16)
      {
        v23[0][7] = (atomic_ullong)v16;
        operator delete(v16);
      }
      uint64_t v17 = (void *)v15[3];
      if (v17)
      {
        char v15[4] = (atomic_ullong)v17;
        operator delete(v17);
      }
      uint64_t v18 = (std::__shared_weak_count *)v15[2];
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      unint64_t v10 = v15;
      unsigned int v19 = 2071181815;
LABEL_31:
      uint64_t v11 = v19 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v10, v11);
LABEL_33:
      memset(v23, 0, 13);
      turi::supervised::xgboost::xgboost_model::predict_topk_impl(a1, (uint64_t)v21, a3, a4, a5);
    default:
      goto LABEL_33;
  }
}

void sub_2244F4EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)va);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::evaluate(turi::supervised::xgboost::xgboost_model *a1, uint64_t a2)
{
  v17[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  *(atomic_ullong **)((char *)v17 + 5) = (atomic_ullong *)0x700000000000000;
  v17[0] = 0;
  turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(v15, a2, v17, 2, 0);
  switch(BYTE4(v17[1]))
  {
    case 2:
      if (atomic_fetch_add(v17[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      BOOL v3 = v17[0];
      if (!v17[0]) {
        goto LABEL_33;
      }
      if (*((char *)v17[0] + 31) < 0) {
        operator delete(*((void **)v17[0] + 1));
      }
      uint64_t v4 = v3;
      uint64_t v5 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(v17[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v6 = v17[0];
      if (!v17[0]) {
        goto LABEL_33;
      }
      int v7 = (void *)v17[0][1];
      if (v7)
      {
        v17[0][2] = (atomic_ullong)v7;
        operator delete(v7);
      }
      uint64_t v4 = v6;
      uint64_t v5 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(v17[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      int v8 = v17[0];
      if (!v17[0]) {
        goto LABEL_33;
      }
      v16[0] = (void **)(v17[0] + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v16);
      goto LABEL_27;
    case 5:
      if (atomic_fetch_add(v17[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      int v8 = v17[0];
      if (!v17[0]) {
        goto LABEL_33;
      }
      v16[0] = (void **)(v17[0] + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v16);
LABEL_27:
      uint64_t v4 = v8;
      uint64_t v5 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(v17[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      int v14 = v17[0];
      if (!v17[0]) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v17[0] + 2);
      uint64_t v4 = v14;
      unsigned int v13 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(v17[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v17[0];
      if (!v17[0]) {
        goto LABEL_33;
      }
      unint64_t v10 = (void *)v17[0][6];
      if (v10)
      {
        v17[0][7] = (atomic_ullong)v10;
        operator delete(v10);
      }
      uint64_t v11 = (void *)v9[3];
      if (v11)
      {
        v9[4] = (atomic_ullong)v11;
        operator delete(v11);
      }
      unint64_t v12 = (std::__shared_weak_count *)v9[2];
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v4 = v9;
      unsigned int v13 = 2071181815;
LABEL_31:
      uint64_t v5 = v13 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v4, v5);
LABEL_33:
      memset(v17, 0, 13);
      turi::supervised::xgboost::xgboost_model::evaluate_impl(a1, (uint64_t)v15);
    default:
      goto LABEL_33;
  }
}

void sub_2244F52C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)va);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::xgboost_model *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  v43[0] = 0;
  v43[1] = 0;
  uint64_t v42 = v43;
  memset(v40, 0, sizeof(v40));
  int v41 = 1065353216;
  __p[6] = (void *)turi::supervised::xgboost::xgboost_model::num_classes(a1);
  if ((*(unsigned int (**)(turi::supervised::xgboost::xgboost_model *))(*(void *)a1 + 232))(a1))
  {
    unint64_t v44 = 0;
    if (*(void *)(a2 + 200))
    {
      unint64_t v3 = 0;
      while (2)
      {
        uint64_t v4 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 47) + 24) + 32) + 80);
        double v46 = &v44;
        uint64_t v5 = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v42, (unint64_t *)&v44, (uint64_t)&std::piecewise_construct, (void **)&v46);
        uint64_t v6 = v5;
        uint64_t v7 = v4 + 16 * v3;
        int v8 = v5 + 5;
        if ((uint64_t **)v7 != v5 + 5)
        {
          switch(*((unsigned char *)v5 + 52))
          {
            case 2:
              if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_38;
              }
              atomic_ullong *volatile v9 = *v8;
              if (!*v8) {
                goto LABEL_37;
              }
              if (*((char *)v9 + 31) < 0) {
                operator delete((void *)v9[1]);
              }
              atomic_ullong *volatile v10 = v9;
              uint64_t v11 = 0x1012C404EF22A49;
              goto LABEL_36;
            case 3:
              if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_38;
              }
              atomic_ullong *volatile v12 = *v8;
              if (!*v8) {
                goto LABEL_37;
              }
              unsigned int v13 = (void *)v12[1];
              if (v13)
              {
                void v12[2] = (atomic_ullong)v13;
                operator delete(v13);
              }
              atomic_ullong *volatile v10 = v12;
              uint64_t v11 = 0x1080C409938AC02;
              goto LABEL_36;
            case 4:
              if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_38;
              }
              atomic_ullong *volatile v14 = *v8;
              if (!*v8) {
                goto LABEL_37;
              }
              double v46 = v14 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
              goto LABEL_31;
            case 5:
              if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_38;
              }
              atomic_ullong *volatile v14 = *v8;
              if (!*v8) {
                goto LABEL_37;
              }
              double v46 = v14 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
LABEL_31:
              atomic_ullong *volatile v10 = v14;
              uint64_t v11 = 0x1020C405E66F15BLL;
              goto LABEL_36;
            case 8:
              if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_38;
              }
              atomic_ullong *volatile v20 = *v8;
              if (!*v8) {
                goto LABEL_37;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
              atomic_ullong *volatile v10 = v20;
              unsigned int v19 = -235920773;
              goto LABEL_35;
            case 9:
              if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_38;
              }
              atomic_ullong *volatile v15 = *v8;
              if (!*v8) {
                goto LABEL_37;
              }
              char v16 = (void *)v15[6];
              if (v16)
              {
                v15[7] = (atomic_ullong)v16;
                operator delete(v16);
              }
              uint64_t v17 = (void *)v15[3];
              if (v17)
              {
                char v15[4] = (atomic_ullong)v17;
                operator delete(v17);
              }
              uint64_t v18 = (std::__shared_weak_count *)v15[2];
              if (v18) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v18);
              }
              atomic_ullong *volatile v10 = v15;
              unsigned int v19 = 2071181815;
LABEL_35:
              uint64_t v11 = v19 | 0x1030C4000000000;
LABEL_36:
              MEMORY[0x22A614FA0](v10, v11);
LABEL_37:
              atomic_ullong *v8 = 0;
LABEL_38:
              unint64_t v21 = *(uint64_t **)v7;
              *(uint64_t **)((char *)v8 + 5) = *(uint64_t **)(v7 + 5);
              atomic_ullong *v8 = v21;
              LODWORD(v21) = *(unsigned __int8 *)(v7 + 12);
              *((unsigned char *)v6 + 52) = (_BYTE)v21;
              BOOL v22 = v21 > 9;
              int v23 = (1 << (char)v21) & 0x33C;
              if (!v22 && v23 != 0) {
                atomic_fetch_add(*v8, 1uLL);
              }
              break;
            default:
              goto LABEL_38;
          }
        }
        uint64_t v25 = v44;
        char v48 = 0;
        int v47 = 0;
        double v46 = v44;
        double v45 = &v46;
        *((void *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>((uint64_t)v40, (unsigned __int8 *)&v46, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45)+ 4) = v25;
        switch(v48)
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_75;
            }
            uint64_t v26 = v46;
            if (!v46) {
              goto LABEL_75;
            }
            if (*((char *)v46 + 31) < 0) {
              operator delete(*((void **)v46 + 1));
            }
            unsigned int v27 = v26;
            uint64_t v28 = 0x1012C404EF22A49;
            goto LABEL_74;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_75;
            }
            uint64_t v29 = v46;
            if (!v46) {
              goto LABEL_75;
            }
            uint64_t v30 = (void *)*((void *)v46 + 1);
            if (v30)
            {
              *((void *)v46 + 2) = v30;
              operator delete(v30);
            }
            unsigned int v27 = v29;
            uint64_t v28 = 0x1080C409938AC02;
            goto LABEL_74;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_75;
            }
            uint64_t v31 = v46;
            if (!v46) {
              goto LABEL_75;
            }
            double v45 = (void **)((char *)v46 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
            goto LABEL_69;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_75;
            }
            uint64_t v31 = v46;
            if (!v46) {
              goto LABEL_75;
            }
            double v45 = (void **)((char *)v46 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v45);
LABEL_69:
            unsigned int v27 = v31;
            uint64_t v28 = 0x1020C405E66F15BLL;
            goto LABEL_74;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_75;
            }
            unsigned int v37 = v46;
            if (!v46) {
              goto LABEL_75;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v46 + 2);
            unsigned int v27 = v37;
            unsigned int v36 = -235920773;
            goto LABEL_73;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_75;
            }
            double v32 = v46;
            if (!v46) {
              goto LABEL_75;
            }
            unsigned int v33 = (void *)*((void *)v46 + 6);
            if (v33)
            {
              *((void *)v46 + 7) = v33;
              operator delete(v33);
            }
            double v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = v34;
              operator delete(v34);
            }
            char v35 = (std::__shared_weak_count *)v32[2];
            if (v35) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            }
            unsigned int v27 = v32;
            unsigned int v36 = 2071181815;
LABEL_73:
            uint64_t v28 = v36 | 0x1030C4000000000;
LABEL_74:
            MEMORY[0x22A614FA0](v27, v28);
LABEL_75:
            unint64_t v3 = (unint64_t)(v44 + 1);
            unint64_t v44 = (char *)v3;
            if (v3 >= *(void *)(a2 + 200)) {
              break;
            }
            continue;
          default:
            goto LABEL_75;
        }
        break;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  turi::flexible_type_converter<std::string>::set((uint64_t)&v44);
}

void sub_2244F6524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  STACK[0x2A0] = (unint64_t)&a53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = (unint64_t)&a63;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = (unint64_t)&STACK[0x200];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a29, (char *)a30);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&a33);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&a39, (void *)a40);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::extract_features(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata(a1, a2, a3, v3);
}

void sub_2244F7540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  MEMORY[0x22A614FA0](v42, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v43 - 212))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v43 - 224), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v45 = *(void *)(v43 - 224);
        if (v45)
        {
          if (*(char *)(v45 + 31) < 0) {
            operator delete(*(void **)(v45 + 8));
          }
          MEMORY[0x22A614FA0](v45, 0x1012C404EF22A49);
        }
      }
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v43 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      unsigned int v50 = *(void **)(v43 - 224);
      if (!v50) {
        goto LABEL_27;
      }
      uint64_t v51 = (void *)v50[1];
      if (v51)
      {
        v50[2] = v51;
        operator delete(v51);
      }
      char v48 = v50;
      uint64_t v52 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v43 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      double v46 = *(void **)(v43 - 224);
      if (!v46) {
        goto LABEL_27;
      }
      *(void *)(v43 - 232) = v46 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 232));
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v43 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      double v46 = *(void **)(v43 - 224);
      if (!v46) {
        goto LABEL_27;
      }
      *(void *)(v43 - 232) = v46 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 232));
LABEL_21:
      char v48 = v46;
      uint64_t v52 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v43 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v53 = *(void *)(v43 - 224);
      if (!v53) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v53 + 16));
      char v48 = (void *)v53;
      unsigned int v49 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v43 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      int v47 = *(void **)(v43 - 224);
      if (!v47) {
        goto LABEL_27;
      }
      char v48 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v47);
      unsigned int v49 = 2071181815;
LABEL_25:
      uint64_t v52 = v49 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v48, v52);
LABEL_27:
      *(void *)(v43 - 224) = 0;
LABEL_28:
      if (__p) {
        operator delete(__p);
      }
      turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v43 - 208));
      unsigned int v54 = *(std::__shared_weak_count **)(a9 + 8);
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)&a16);
      turi::ml_data::~ml_data((turi::ml_data *)&a42);
      uint64_t v55 = *(void **)(v43 - 256);
      if (v55)
      {
        *(void *)(v43 - 248) = v55;
        operator delete(v55);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void turi::supervised::xgboost::get_index_map_with_escaping(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v3 = **a1;
  if ((*a1)[1] != v3)
  {
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = (std::__shared_weak_count *)v6[1];
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        int v9 = *(_DWORD *)(v8 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      else
      {
        int v9 = *(_DWORD *)(v8 + 24);
      }
      switch(v9)
      {
        case 0:
          uint64_t v30 = (uint64_t *)(**a1 + 16 * v5);
          uint64_t v32 = *v30;
          uint64_t v31 = (std::__shared_weak_count *)v30[1];
          if (!v31)
          {
            int v33 = *(unsigned __int8 *)(v32 + 28);
LABEL_38:
            uint64_t v36 = *(void *)(v32 + 104);
            goto LABEL_39;
          }
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          int v33 = *(unsigned __int8 *)(v32 + 28);
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          double v34 = (uint64_t *)(**a1 + 16 * v5);
          uint64_t v32 = *v34;
          char v35 = (std::__shared_weak_count *)v34[1];
          if (!v35) {
            goto LABEL_38;
          }
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v36 = *(void *)(v32 + 104);
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
LABEL_39:
          snprintf(__str, 0x100uLL, "{%zd}", v36);
          if (v33) {
            int v47 = "q";
          }
          else {
            int v47 = "int";
          }
          xgboost_old::utils::FeatMap::PushBack((std::vector<std::string> *)a2, v36, __str, v47);
LABEL_43:
          ++v5;
          uint64_t v3 = **a1;
          if (v5 >= ((*a1)[1] - v3) >> 4) {
            return;
          }
          break;
        case 1:
        case 3:
          for (unint64_t i = 0; ; ++i)
          {
            uint64_t v11 = (uint64_t *)(**a1 + 16 * v5);
            uint64_t v13 = *v11;
            atomic_ullong *volatile v12 = (std::__shared_weak_count *)v11[1];
            if (v12)
            {
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v14 = *(void *)(v13 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            else
            {
              unint64_t v14 = *(void *)(v13 + 64);
            }
            if (i >= v14) {
              break;
            }
            atomic_ullong *volatile v15 = (uint64_t *)(**a1 + 16 * v5);
            uint64_t v17 = *v15;
            char v16 = (std::__shared_weak_count *)v15[1];
            if (v16)
            {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v18 = *(void *)(v17 + 104);
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            else
            {
              uint64_t v18 = *(void *)(v17 + 104);
            }
            uint64_t v19 = v18 + i;
            snprintf(__str, 0x100uLL, "{%zd}", v19);
            xgboost_old::utils::FeatMap::PushBack((std::vector<std::string> *)a2, v19, __str, "i");
          }
          goto LABEL_43;
        case 2:
        case 7:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v21 = (uint64_t *)(**a1 + 16 * v5);
            uint64_t v23 = *v21;
            BOOL v22 = (std::__shared_weak_count *)v21[1];
            if (v22)
            {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v24 = *(void *)(v23 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            else
            {
              unint64_t v24 = *(void *)(v23 + 64);
            }
            if (j >= v24) {
              break;
            }
            uint64_t v25 = (uint64_t *)(**a1 + 16 * v5);
            uint64_t v27 = *v25;
            uint64_t v26 = (std::__shared_weak_count *)v25[1];
            if (v26)
            {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v28 = *(void *)(v27 + 104);
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
            else
            {
              uint64_t v28 = *(void *)(v27 + 104);
            }
            uint64_t v29 = v28 + j;
            snprintf(__str, 0x100uLL, "{%zd}", v29);
            xgboost_old::utils::FeatMap::PushBack((std::vector<std::string> *)a2, v29, __str, "q");
          }
          goto LABEL_43;
        case 4:
          for (unint64_t k = 0; ; ++k)
          {
            unint64_t v38 = (uint64_t *)(**a1 + 16 * v5);
            uint64_t v40 = *v38;
            uint64_t v39 = (std::__shared_weak_count *)v38[1];
            if (v39)
            {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v41 = *(void *)(v40 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
            else
            {
              unint64_t v41 = *(void *)(v40 + 64);
            }
            if (k >= v41) {
              break;
            }
            uint64_t v42 = (uint64_t *)(**a1 + 16 * v5);
            uint64_t v44 = *v42;
            uint64_t v43 = (std::__shared_weak_count *)v42[1];
            if (v43)
            {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v45 = *(void *)(v44 + 104);
              std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            }
            else
            {
              uint64_t v45 = *(void *)(v44 + 104);
            }
            uint64_t v46 = v45 + k;
            snprintf(__str, 0x100uLL, "{%zd}", v46);
            xgboost_old::utils::FeatMap::PushBack((std::vector<std::string> *)a2, v46, __str, "q");
          }
          goto LABEL_43;
        default:
          goto LABEL_43;
      }
    }
  }
}

void sub_2244F7E40(_Unwind_Exception *a1)
{
  xgboost_old::utils::FeatMap::~FeatMap(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::get_trees(turi::supervised::xgboost::xgboost_model *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 48);
  v7[0] = *((uint64_t **)this + 47);
  v7[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  }
  turi::supervised::xgboost::get_index_map_with_escaping(v7, (uint64_t)v6);
  (*(void (**)(void *__return_ptr))(**(void **)(*((void *)this + 208) + 208) + 88))(v5);
  turi::supervised::xgboost::convert_vec_string(v5, a2);
}

void sub_2244F7F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v6 - 40) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 40));
  xgboost_old::utils::FeatMap::~FeatMap((xgboost_old::utils::FeatMap *)va);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::learner::BoostLearner::SaveModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a1 + 72);
  long long v7 = *(_OWORD *)(a1 + 152);
  long long v8 = *(_OWORD *)(a1 + 184);
  v20[6] = *(_OWORD *)(a1 + 168);
  v20[7] = v8;
  uint64_t v21 = *(void *)(a1 + 200);
  long long v9 = *(_OWORD *)(a1 + 88);
  v20[0] = v6;
  v20[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 120);
  void v20[2] = *(_OWORD *)(a1 + 104);
  void v20[3] = v10;
  v20[4] = *(_OWORD *)(a1 + 136);
  void v20[5] = v7;
  HIDWORD(v20[0]) = a3;
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a2 + 8))(a2, v20, 136);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 271);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a1 + 256);
  }
  uint64_t v22 = v11;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v22, 8);
  if (v22)
  {
    int v12 = *(char *)(a1 + 271);
    if (v12 >= 0) {
      uint64_t v13 = a1 + 248;
    }
    else {
      uint64_t v13 = *(void *)(a1 + 248);
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a1 + 271);
    }
    else {
      uint64_t v14 = *(void *)(a1 + 256);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v13, v14);
  }
  uint64_t v15 = *(unsigned __int8 *)(a1 + 239);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a1 + 224);
  }
  uint64_t v22 = v15;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v22, 8);
  if (v22)
  {
    int v16 = *(char *)(a1 + 239);
    if (v16 >= 0) {
      uint64_t v17 = a1 + 216;
    }
    else {
      uint64_t v17 = *(void *)(a1 + 216);
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a1 + 239);
    }
    else {
      uint64_t v18 = *(void *)(a1 + 224);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v17, v18);
  }
  uint64_t v22 = (uint64_t)(*(void *)(a1 + 304) - *(void *)(a1 + 296)) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v22, 8);
  if (v22) {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 296), *(void *)(a1 + 304) - *(void *)(a1 + 296));
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 208) + 16))(*(void *)(a1 + 208), a2, a3);
}

void turi::supervised::xgboost::xgboost_model::save_impl(turi::supervised::xgboost::xgboost_model *this, turi::oarchive *a2)
{
}

uint64_t turi::supervised::xgboost::xgboost_model::load_version(turi::supervised::xgboost::xgboost_model *this, turi::iarchive *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  assert_msg(a3 < 0xA, (uint64_t)"This model version cannot be loaded. Please re-save your state.", a3, a4, a5, a6, a7, a8, v12[0]);
  if (a3 <= 8) {
    turi::supervised::xgboost::xgboost_model::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  }
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (void *)this + 47);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::option_manager::load((turi::supervised::xgboost::xgboost_model *)((char *)this + 224), a2);
  v12[0] = (uint64_t)&unk_26D784AC8;
  v12[1] = (uint64_t)a2;
  return xgboost_old::learner::BoostLearner::LoadModel(*((std::string **)this + 208), (dmlc::Stream *)v12, 1);
}

uint64_t xgboost_old::learner::BoostLearner::LoadModel(std::string *this, dmlc::Stream *a2, char a3)
{
  __n[4] = *MEMORY[0x263EF8340];
  BOOL v6 = (**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, (char *)&this[3], 136) != 0;
  xgboost_old::utils::Check(v6, "BoostLearner: wrong model format", v7);
  __n[0] = 0;
  BOOL v8 = (**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, uint64_t))a2)(a2, __n, 8) != 0;
  xgboost_old::utils::Check(v8, "BoostLearner: wrong model format", v9);
  std::string::size_type v10 = __n[0];
  if (__n[0] >= 0xFFFFFFFF)
  {
    LODWORD(v39) = 0;
    BOOL v11 = (**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v39, 4) != 0;
    xgboost_old::utils::Check(v11, "BoostLearner: wrong model format", v12);
    std::string::size_type v10 = HIDWORD(__n[0]);
    __n[0] >>= 32;
  }
  if (v10)
  {
    p_std::string::size_type size = &this[10].__r_.__value_.__l.__size_;
    std::string::resize((std::string *)((char *)this + 248), v10, 0);
    if (this[11].__r_.__value_.__s.__data_[7] < 0) {
      p_std::string::size_type size = (std::string::size_type *)*p_size;
    }
    BOOL v14 = (**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, std::string::size_type))a2)(a2, p_size, __n[0]) != 0;
    xgboost_old::utils::Check(v14, "BoostLearner: wrong model format", v15);
  }
  __n[0] = 0;
  uint64_t v16 = (**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, uint64_t))a2)(a2, __n, 8);
  if (v16)
  {
    uint64_t v18 = (std::string::__raw *)&this[9];
    std::string::size_type v19 = __n[0];
    std::string::resize(this + 9, __n[0], 0);
    if (!__n[0]) {
      goto LABEL_12;
    }
    if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v18 = (std::string::__raw *)v18->__words[0];
    }
    uint64_t v16 = (**(uint64_t (***)(dmlc::Stream *, std::string::__raw *, std::string::size_type))a2)(a2, v18, v19);
    if (v16) {
LABEL_12:
    }
      uint64_t v16 = 1;
  }
  xgboost_old::utils::Check(v16, "BoostLearner: wrong model format", v17);
  std::string::pointer data = this[10].__r_.__value_.__l.__data_;
  if (data) {
    (*(void (**)(std::string::pointer))(*(void *)data + 8))(data);
  }
  std::string::size_type v22 = this[8].__r_.__value_.__r.__words[2];
  if (v22) {
    (*(void (**)(std::string::size_type))(*(void *)v22 + 104))(v22);
  }
  if (a3)
  {
    std::string::size_type size = (char *)this[14].__r_.__value_.__l.__size_;
    uint64_t v23 = (char *)this[14].__r_.__value_.__r.__words[2];
    int64_t v25 = v23 - size;
    if (v23 == size)
    {
      unsigned int v26 = 0;
    }
    else
    {
      unsigned int v26 = 0;
      unint64_t v27 = v25 / 24;
      if (v27 <= 1) {
        unint64_t v27 = 1;
      }
      do
      {
        uint64_t v28 = *(void *)size;
        size += 24;
        unsigned int v29 = *(_DWORD *)(v28 + 24);
        if (v26 <= v29) {
          unsigned int v26 = v29;
        }
        --v27;
      }
      while (v27);
    }
    LODWORD(__n[0]) = v26;
    rabit::engine::Allreduce_((uint64_t)__n, 4, 1, (uint64_t)rabit::op::Reducer<rabit::op::Max,unsigned int>, 3, 0, 0, 0);
    uint64_t v31 = LODWORD(__n[0]);
    uint64_t v30 = HIDWORD(this[3].__r_.__value_.__r.__words[0]);
    if (LODWORD(__n[0]) > v30)
    {
      HIDWORD(this[3].__r_.__value_.__r.__words[0]) = __n[0];
      uint64_t v30 = v31;
    }
  }
  else
  {
    uint64_t v30 = HIDWORD(this[3].__r_.__value_.__r.__words[0]);
  }
  xgboost_old::utils::SPrintf((xgboost_old::utils *)__n, (char *)0x19, "%d", v20, v30);
  xgboost_old::learner::BoostLearner::SetParam((xgboost_old::learner::BoostLearner *)this, "bst:num_feature", (char *)__n);
  xgboost_old::learner::BoostLearner::InitObjGBM((uint64_t)this, v32, v33);
  xgboost_old::utils::SPrintf((xgboost_old::utils *)__n, (char *)0x20, "%u", v34, LODWORD(this[3].__r_.__value_.__r.__words[1]));
  (*(void (**)(std::string::size_type, const char *, std::string::size_type *))(*(void *)this[10].__r_.__value_.__l.__data_
                                                                                         + 16))(this[10].__r_.__value_.__r.__words[0], "num_class", __n);
  unint64_t v39 = 0;
  uint64_t v35 = (**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v39, 8);
  if (v35)
  {
    unint64_t v37 = v39;
    std::vector<float>::resize((uint64_t)&this[12].__r_.__value_.__l.__size_, v39);
    if (!v39
      || (uint64_t v35 = (**(uint64_t (***)(dmlc::Stream *, std::string::size_type, uint64_t))a2)(a2, this[12].__r_.__value_.__l.__size_, 4 * v37)) != 0)
    {
      uint64_t v35 = 1;
    }
  }
  xgboost_old::utils::Check(v35, "BoostLearner: wrong model format", v36);
  uint64_t result = (*(uint64_t (**)(std::string::size_type, dmlc::Stream *, BOOL))(*(void *)this[8].__r_.__value_.__r.__words[2]
                                                                                   + 8))(this[8].__r_.__value_.__r.__words[2], a2, HIDWORD(this[3].__r_.__value_.__r.__words[1]) != 0);
  if (!HIDWORD(this[3].__r_.__value_.__r.__words[1])) {
    return (*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(void *)this[8].__r_.__value_.__r.__words[2]
  }
                                                                                     + 40))(this[8].__r_.__value_.__r.__words[2], this[1].__r_.__value_.__l.__size_);
  return result;
}

void turi::supervised::xgboost::xgboost_model::_export_xgboost_model(turi::supervised::xgboost::xgboost_model *a1)
{
  v1[3] = *MEMORY[0x263EF8340];
  turi::supervised::xgboost::xgboost_model::get_trees(a1, (uint64_t)v1);
}

void sub_2244F8A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13)
{
  a13 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void xgboost_old::utils::Base64OutStream::Finish(xgboost_old::utils::Base64OutStream *this, int __c)
{
  int v4 = *((_DWORD *)this + 4);
  if (v4 == 1)
  {
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[(unint64_t)*((unsigned __int8 *)this + 21) >> 2]);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[16 * (*((unsigned char *)this + 21) & 3)]);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, 61);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, 61);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
    int v4 = *((_DWORD *)this + 4);
  }
  if (v4 == 2)
  {
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[(unint64_t)*((unsigned __int8 *)this + 21) >> 2]);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[((unint64_t)*((unsigned __int8 *)this + 22) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*((unsigned char *)this + 21) & 3))]);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[4 * (*((unsigned char *)this + 22) & 0xF)]);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, 61);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
  }
  *((_DWORD *)this + 4) = 0;
  if (__c != -1)
  {
    std::string::push_back((std::string *)this + 1, __c);
    if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((unsigned char **)this + 3) = 0;
        *((void *)this + 4) = 0;
      }
      else
      {
        *((unsigned char *)this + 24) = 0;
        *((unsigned char *)this + 47) = 0;
      }
    }
  }
  uint64_t v5 = (void *)((char *)this + 24);
  if (*((char *)this + 47) < 0)
  {
    if (!*((void *)this + 4)) {
      return;
    }
    uint64_t v5 = (void *)*v5;
  }
  else if (!*((unsigned char *)this + 47))
  {
    return;
  }
  (*(void (**)(void, void *))(**((void **)this + 1) + 8))(*((void *)this + 1), v5);
  if (*((char *)this + 47) < 0)
  {
    **((unsigned char **)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  else
  {
    *((unsigned char *)this + 24) = 0;
    *((unsigned char *)this + 47) = 0;
  }
}

void xgboost_old::utils::Base64OutStream::~Base64OutStream(void **this)
{
  *this = &unk_26D7845C8;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26D7845C8;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  JUMPOUT(0x22A614FA0);
}

void xgboost_old::utils::Base64OutStream::Read(xgboost_old::utils::Base64OutStream *this, const char *a2)
{
}

uint64_t sub_2244F90C8()
{
  return 0;
}

void xgboost_old::utils::Base64OutStream::Write(xgboost_old::utils::Base64OutStream *this, char *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    BOOL v6 = (std::string *)((char *)this + 24);
    int v7 = *((_DWORD *)this + 4);
    do
    {
      if (v7 <= 2)
      {
        uint64_t v8 = v3;
        do
        {
          char v9 = *a2++;
          uint64_t v10 = v7 + 1;
          *((_DWORD *)this + 4) = v10;
          *((unsigned char *)this + v10 + 20) = v9;
          uint64_t v3 = v8 - 1;
          int v7 = *((_DWORD *)this + 4);
        }
        while (v7 <= 2 && v8-- != 1);
      }
      if (v7 == 3)
      {
        std::string::push_back(v6, xgboost_old::utils::base64::EncodeTable[(unint64_t)*((unsigned __int8 *)this + 21) >> 2]);
        if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
        {
          (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
          if (*((char *)this + 47) < 0)
          {
            **((unsigned char **)this + 3) = 0;
            *((void *)this + 4) = 0;
          }
          else
          {
            *((unsigned char *)this + 24) = 0;
            *((unsigned char *)this + 47) = 0;
          }
        }
        std::string::push_back(v6, xgboost_old::utils::base64::EncodeTable[((unint64_t)*((unsigned __int8 *)this + 22) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*((unsigned char *)this + 21) & 3))]);
        if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
        {
          (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
          if (*((char *)this + 47) < 0)
          {
            **((unsigned char **)this + 3) = 0;
            *((void *)this + 4) = 0;
          }
          else
          {
            *((unsigned char *)this + 24) = 0;
            *((unsigned char *)this + 47) = 0;
          }
        }
        std::string::push_back(v6, xgboost_old::utils::base64::EncodeTable[((unint64_t)*((unsigned __int8 *)this + 23) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*((unsigned char *)this + 22) & 0xF))]);
        if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
        {
          (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
          if (*((char *)this + 47) < 0)
          {
            **((unsigned char **)this + 3) = 0;
            *((void *)this + 4) = 0;
          }
          else
          {
            *((unsigned char *)this + 24) = 0;
            *((unsigned char *)this + 47) = 0;
          }
        }
        std::string::push_back(v6, xgboost_old::utils::base64::EncodeTable[*((unsigned char *)this + 23) & 0x3F]);
        if (*((char *)this + 47) < 0 && *((void *)this + 4) >= 0x100uLL)
        {
          (*(void (**)(void, void))(**((void **)this + 1) + 8))(*((void *)this + 1), *((void *)this + 3));
          if (*((char *)this + 47) < 0)
          {
            **((unsigned char **)this + 3) = 0;
            *((void *)this + 4) = 0;
          }
          else
          {
            *((unsigned char *)this + 24) = 0;
            *((unsigned char *)this + 47) = 0;
          }
        }
        int v7 = 0;
        *((_DWORD *)this + 4) = 0;
      }
    }
    while (v3);
  }
}

xgboost_old::learner::BoostLearner *xgboost_old::learner::BoostLearner::BoostLearner(xgboost_old::learner::BoostLearner *this)
{
  *((void *)this + 6) = 0;
  *(void *)this = &unk_26D784610;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 25) = 0;
  *((void *)this + 9) = 1056964608;
  *((void *)this + 10) = 0;
  uint64_t v2 = (char *)this + 216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  MEMORY[0x22A614700]((char *)this + 248, "reg:linear");
  MEMORY[0x22A614700](v2, "gbtree");
  *((_DWORD *)this + 10) = 1065353216;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_2244F94A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int v7 = *(void **)(v2 + 344);
  if (v7)
  {
    *(void *)(v2 + 352) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(v2 + 320);
  if (v8)
  {
    *(void *)(v2 + 328) = v8;
    operator delete(v8);
  }
  char v9 = *(void **)(v2 + 296);
  if (v9)
  {
    *(void *)(v2 + 304) = v9;
    operator delete(v9);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 271) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 239) < 0) {
    operator delete(*v4);
  }
  xgboost_old::learner::EvalSet::~EvalSet(v3);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::learner::BoostLearner::Load(std::string *this, dmlc::Stream *a2)
{
  return xgboost_old::learner::BoostLearner::LoadModel(this, a2, 0);
}

uint64_t xgboost_old::learner::BoostLearner::Save(uint64_t a1, uint64_t a2)
{
  return xgboost_old::learner::BoostLearner::SaveModel(a1, a2, *(_DWORD *)(a1 + 24) != 2);
}

void xgboost_old::learner::BoostLearner::~BoostLearner(xgboost_old::learner::BoostLearner *this)
{
  xgboost_old::learner::BoostLearner::~BoostLearner(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(void *)this = &unk_26D784610;
  uint64_t v2 = *((void *)this + 30);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 26);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 104))(v3);
  }
  int v4 = (void *)*((void *)this + 43);
  if (v4)
  {
    *((void *)this + 44) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 40);
  if (v5)
  {
    *((void *)this + 41) = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)*((void *)this + 37);
  if (v6)
  {
    *((void *)this + 38) = v6;
    operator delete(v6);
  }
  int v7 = (void **)((char *)this + 272);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  xgboost_old::learner::EvalSet::~EvalSet((xgboost_old::learner::BoostLearner *)((char *)this + 48));
}

void xgboost_old::learner::EvalSet::~EvalSet(xgboost_old::learner::EvalSet *this)
{
  uint64_t v2 = *(void **)this;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = v2[v5];
    if (v6)
    {
      (*(void (**)(void))(*(void *)v6 + 24))(v2[v5]);
      uint64_t v2 = *(void **)this;
      uint64_t v3 = (void *)*((void *)this + 1);
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void xgboost_old::utils::Base64InStream::~Base64InStream(void **this)
{
  *this = &unk_26D784668;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26D784668;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t xgboost_old::utils::Base64InStream::Read(xgboost_old::utils::Base64InStream *this, char *a2, const char *a3)
{
  uint64_t v3 = (uint64_t)a3;
  if (a3)
  {
    int v4 = a2;
    int v6 = *((_DWORD *)this + 15);
    if (!v6)
    {
      char v9 = a3;
LABEL_9:
      uint64_t v10 = (char *)this + 16;
      unsigned int v11 = *((_DWORD *)this + 14);
      while (1)
      {
        if (v11 == -1)
        {
LABEL_107:
          v3 -= (uint64_t)v9;
          return v3;
        }
        if (v11 <= 0x7F)
        {
          if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v11 + 60) & 0x4000) != 0) {
            goto LABEL_107;
          }
        }
        else if (__maskrune(v11, 0x4000uLL))
        {
          goto LABEL_107;
        }
        int v12 = xgboost_old::utils::base64::DecodeTable[*((int *)this + 14)];
        unint64_t v13 = *((void *)this + 6);
        if (v13 >= *((void *)this + 5))
        {
          if (*((char *)this + 39) < 0)
          {
            uint64_t v15 = (char *)*((void *)this + 2);
            uint64_t v14 = *((void *)this + 3);
          }
          else
          {
            uint64_t v14 = *((unsigned __int8 *)this + 39);
            uint64_t v15 = (char *)this + 16;
          }
          uint64_t v16 = (***((uint64_t (****)(void, char *, uint64_t))this + 1))(*((void *)this + 1), v15, v14);
          *((void *)this + 5) = v16;
          if (!v16)
          {
            *((_DWORD *)this + 14) = -1;
            goto LABEL_30;
          }
          unint64_t v13 = 0;
        }
        *((void *)this + 6) = v13 + 1;
        uint64_t v17 = (char *)this + 16;
        if (*((char *)this + 39) < 0) {
          uint64_t v17 = *(char **)v10;
        }
        unsigned int v18 = v17[v13];
        *((_DWORD *)this + 14) = v18;
        if (v18 == -1)
        {
          uint64_t v16 = 0;
        }
        else
        {
          if ((v18 & 0x80000000) != 0) {
            int v19 = __maskrune(v18, 0x4000uLL);
          }
          else {
            int v19 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v18 + 60) & 0x4000;
          }
          uint64_t v16 = v19 == 0;
        }
LABEL_30:
        xgboost_old::utils::Check(v16, "invalid base64 format", a3);
        int v21 = xgboost_old::utils::base64::DecodeTable[*((int *)this + 14)];
        *int v4 = ((v12 << 18) | (v21 << 12)) >> 16;
        unint64_t v22 = *((void *)this + 6);
        if (v22 >= *((void *)this + 5))
        {
          if (*((char *)this + 39) < 0)
          {
            unint64_t v24 = (char *)*((void *)this + 2);
            uint64_t v23 = *((void *)this + 3);
          }
          else
          {
            uint64_t v23 = *((unsigned __int8 *)this + 39);
            unint64_t v24 = (char *)this + 16;
          }
          uint64_t v25 = (***((uint64_t (****)(void, char *, uint64_t))this + 1))(*((void *)this + 1), v24, v23);
          *((void *)this + 5) = v25;
          if (!v25)
          {
            *((_DWORD *)this + 14) = -1;
            goto LABEL_45;
          }
          unint64_t v22 = 0;
        }
        *((void *)this + 6) = v22 + 1;
        unsigned int v26 = (char *)this + 16;
        if (*((char *)this + 39) < 0) {
          unsigned int v26 = *(char **)v10;
        }
        unsigned int v27 = v26[v22];
        *((_DWORD *)this + 14) = v27;
        if (v27 == -1)
        {
          uint64_t v25 = 0;
        }
        else
        {
          if ((v27 & 0x80000000) != 0) {
            int v28 = __maskrune(v27, 0x4000uLL);
          }
          else {
            int v28 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v27 + 60) & 0x4000;
          }
          uint64_t v25 = v28 == 0;
        }
LABEL_45:
        unsigned int v29 = v9 - 1;
        xgboost_old::utils::Check(v25, "invalid base64 format", v20);
        uint64_t v31 = *((int *)this + 14);
        if (v31 == 61)
        {
          unint64_t v52 = *((void *)this + 6);
          if (v52 < *((void *)this + 5)) {
            goto LABEL_87;
          }
          if (*((char *)this + 39) < 0)
          {
            unsigned int v54 = (char *)*((void *)this + 2);
            uint64_t v53 = *((void *)this + 3);
          }
          else
          {
            uint64_t v53 = *((unsigned __int8 *)this + 39);
            unsigned int v54 = (char *)this + 16;
          }
          uint64_t v55 = (***((uint64_t (****)(void, char *, uint64_t))this + 1))(*((void *)this + 1), v54, v53);
          *((void *)this + 5) = v55;
          if (v55)
          {
            unint64_t v52 = 0;
LABEL_87:
            *((void *)this + 6) = v52 + 1;
            long long v56 = (char *)this + 16;
            if (*((char *)this + 39) < 0) {
              long long v56 = *(char **)v10;
            }
            int v57 = v56[v52];
          }
          else
          {
            int v57 = 255;
          }
          *((_DWORD *)this + 14) = (char)v57;
          xgboost_old::utils::Check(v57 == 61, "invalid base64 format", v30);
LABEL_91:
          unint64_t v58 = *((void *)this + 6);
          if (v58 < *((void *)this + 5))
          {
LABEL_97:
            *((void *)this + 6) = v58 + 1;
            if (*((char *)this + 39) < 0) {
              uint64_t v10 = *(char **)v10;
            }
            unsigned int v62 = v10[v58];
            *((_DWORD *)this + 14) = v62;
            if (v62 == -1) {
              goto LABEL_103;
            }
            if ((v62 & 0x80000000) != 0) {
              int v63 = __maskrune(v62, 0x4000uLL);
            }
            else {
              int v63 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v62 + 60) & 0x4000;
            }
            BOOL v64 = v63 != 0;
          }
          else
          {
            if (*((char *)this + 39) < 0)
            {
              uint64_t v60 = (char *)*((void *)this + 2);
              uint64_t v59 = *((void *)this + 3);
            }
            else
            {
              uint64_t v59 = *((unsigned __int8 *)this + 39);
              uint64_t v60 = (char *)this + 16;
            }
            uint64_t v61 = (***((uint64_t (****)(void, char *, uint64_t))this + 1))(*((void *)this + 1), v60, v59);
            *((void *)this + 5) = v61;
            if (v61)
            {
              unint64_t v58 = 0;
              goto LABEL_97;
            }
            *((_DWORD *)this + 14) = -1;
LABEL_103:
            BOOL v64 = 1;
          }
          xgboost_old::utils::Check(v64, "invalid base64 format", a3);
          char v9 = v29;
          goto LABEL_107;
        }
        int v32 = v21 << 12;
        int v33 = xgboost_old::utils::base64::DecodeTable[v31];
        unsigned int v34 = (v32 | (v33 << 6)) >> 8;
        if (v9 == (const char *)1)
        {
          uint64_t v35 = *((int *)this + 15);
          *((_DWORD *)this + 15) = v35 + 1;
          *((unsigned char *)this + v35 + 64) = v34;
          ++v4;
        }
        else
        {
          v4[1] = v34;
          v4 += 2;
          unsigned int v29 = v9 - 2;
        }
        unint64_t v36 = *((void *)this + 6);
        if (v36 >= *((void *)this + 5))
        {
          if (*((char *)this + 39) < 0)
          {
            unint64_t v38 = (char *)*((void *)this + 2);
            uint64_t v37 = *((void *)this + 3);
          }
          else
          {
            uint64_t v37 = *((unsigned __int8 *)this + 39);
            unint64_t v38 = (char *)this + 16;
          }
          uint64_t v39 = (***((uint64_t (****)(void, char *, uint64_t))this + 1))(*((void *)this + 1), v38, v37);
          *((void *)this + 5) = v39;
          if (!v39)
          {
            *((_DWORD *)this + 14) = -1;
            goto LABEL_64;
          }
          unint64_t v36 = 0;
        }
        *((void *)this + 6) = v36 + 1;
        uint64_t v40 = (char *)this + 16;
        if (*((char *)this + 39) < 0) {
          uint64_t v40 = *(char **)v10;
        }
        unsigned int v41 = v40[v36];
        *((_DWORD *)this + 14) = v41;
        if (v41 == -1)
        {
          uint64_t v39 = 0;
        }
        else
        {
          if ((v41 & 0x80000000) != 0) {
            int v42 = __maskrune(v41, 0x4000uLL);
          }
          else {
            int v42 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v41 + 60) & 0x4000;
          }
          uint64_t v39 = v42 == 0;
        }
LABEL_64:
        xgboost_old::utils::Check(v39, "invalid base64 format", v30);
        uint64_t v43 = *((int *)this + 14);
        if (v43 == 61) {
          goto LABEL_91;
        }
        char v44 = xgboost_old::utils::base64::DecodeTable[v43] | ((_BYTE)v33 << 6);
        if (v29)
        {
          *v4++ = v44;
          char v9 = v29 - 1;
        }
        else
        {
          char v9 = 0;
          uint64_t v45 = *((int *)this + 15);
          *((_DWORD *)this + 15) = v45 + 1;
          *((unsigned char *)this + v45 + 64) = v44;
        }
        unint64_t v46 = *((void *)this + 6);
        if (v46 < *((void *)this + 5)) {
          goto LABEL_74;
        }
        if (*((char *)this + 39) < 0)
        {
          char v48 = (char *)*((void *)this + 2);
          uint64_t v47 = *((void *)this + 3);
        }
        else
        {
          uint64_t v47 = *((unsigned __int8 *)this + 39);
          char v48 = (char *)this + 16;
        }
        uint64_t v49 = (***((uint64_t (****)(void, char *, uint64_t))this + 1))(*((void *)this + 1), v48, v47);
        *((void *)this + 5) = v49;
        if (v49)
        {
          unint64_t v46 = 0;
LABEL_74:
          *((void *)this + 6) = v46 + 1;
          unsigned int v50 = (char *)this + 16;
          if (*((char *)this + 39) < 0) {
            unsigned int v50 = *(char **)v10;
          }
          char v51 = v50[v46];
          goto LABEL_77;
        }
        char v51 = -1;
LABEL_77:
        unsigned int v11 = v51;
        *((_DWORD *)this + 14) = v51;
        if (!v9) {
          goto LABEL_107;
        }
      }
    }
    if (v6 == 2)
    {
      char v7 = *((unsigned char *)this + 64);
      if ((unint64_t)a3 < 2)
      {
        *a2 = v7;
        *((unsigned char *)this + 64) = *((unsigned char *)this + 65);
        uint64_t v3 = 1;
        *((_DWORD *)this + 15) = 1;
        return v3;
      }
      *a2 = v7;
      a2[1] = *((unsigned char *)this + 65);
      int v4 = a2 + 2;
      uint64_t v8 = -2;
    }
    else
    {
      *a2 = *((unsigned char *)this + 64);
      int v4 = a2 + 1;
      uint64_t v8 = -1;
    }
    *((_DWORD *)this + 15) = 0;
    char v9 = &a3[v8];
    if (&a3[v8]) {
      goto LABEL_9;
    }
  }
  return v3;
}

void xgboost_old::utils::Base64InStream::Write(xgboost_old::utils::Base64InStream *this, const char *a2)
{
}

xgboost_old::utils::StreamBufferReader *xgboost_old::utils::StreamBufferReader::StreamBufferReader(xgboost_old::utils::StreamBufferReader *this, std::string::size_type a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((int64x2_t *)this + 2) = vdupq_n_s64(1uLL);
  std::string::resize((std::string *)((char *)this + 8), a2, 0);
  return this;
}

void sub_2244F9E24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

turi::table_printer *turi::table_printer::table_printer(turi::table_printer *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  gettimeofday((timeval *)((char *)this + 24), 0);
  *((void *)this + 5) = 1000 * std::chrono::system_clock::now().__d_.__rep_;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  uint64_t v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 96), 0);
  assert_msg(v2 == 0, (uint64_t)"Mutex create error %d", v3, v4, v5, v6, v7, v8, v2);
  uint64_t v9 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 160), 0);
  assert_msg(v9 == 0, (uint64_t)"Mutex create error %d", v10, v11, v12, v13, v14, v15, v9);
  *((void *)this + 28) = 0xBFF0000000000000;
  uint64_t v16 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 232), 0);
  assert_msg(v16 == 0, (uint64_t)"Mutex create error %d", v17, v18, v19, v20, v21, v22, v16);
  turi::sframe::sframe((turi::table_printer *)((char *)this + 296));
  *((_WORD *)this + 296) = 0;
  *((void *)this + 78) = 0;
  *((void *)this + 82) = 0;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((void *)this + 92) = 0;
  *((void *)this + 93) = 1;
  return this;
}

void sub_2244F9F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v12;
  turi::mutex::~mutex(v13);
  turi::mutex::~mutex(v11);
  turi::mutex::~mutex(v10);
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::learner::BoostLearner::InitObjGBM(uint64_t this, uint64_t a2, const char *a3)
{
  if (!*(void *)(this + 240))
  {
    uint64_t v3 = this;
    xgboost_old::utils::Assert(*(void *)(this + 208) == 0, "GBM and obj should be NULL", a3);
    uint64_t v5 = (xgboost_old::learner *)(v3 + 248);
    if (*(char *)(v3 + 271) < 0) {
      uint64_t v5 = *(xgboost_old::learner **)(v3 + 248);
    }
    xgboost_old::learner::CreateObjFunction(v5, v4);
  }
  return this;
}

unsigned int *rabit::op::Reducer<rabit::op::Max,unsigned int>(unsigned int *result, unsigned int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      unsigned int v5 = *result++;
      unsigned int v4 = v5;
      if (*a2 < v5) {
        *a2 = v4;
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void xgboost_old::learner::CreateObjFunction(xgboost_old::learner *this, const char *a2)
{
  if (strcmp("reg:linear", (const char *)this))
  {
    if (strcmp("reg:logistic", (const char *)this))
    {
      if (strcmp("binary:logistic", (const char *)this))
      {
        if (strcmp("binary:logitraw", (const char *)this))
        {
          if (strcmp("count:poisson", (const char *)this))
          {
            if (strcmp("multi:softmax", (const char *)this))
            {
              if (strcmp("multi:softprob", (const char *)this))
              {
                if (strcmp("rank:pairwise", (const char *)this))
                {
                  if (strcmp("rank:ndcg", (const char *)this))
                  {
                    if (strcmp("rank:map", (const char *)this)) {
                      xgboost_old::utils::Error((xgboost_old::utils *)"unknown objective function type: %s", v3, this);
                    }
                    operator new();
                  }
                  operator new();
                }
                operator new();
              }
              operator new();
            }
            operator new();
          }
          operator new();
        }
        operator new();
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

float xgboost_old::learner::RegLossObj::SetParam(xgboost_old::learner::RegLossObj *this, const char *a2, const char *a3)
{
  if (!strcmp("scale_pos_weight", a2))
  {
    float result = atof(a3);
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t xgboost_old::learner::RegLossObj::GetGradient(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  xgboost_old::utils::Check(*(void *)(a3 + 72) != *(void *)(a3 + 64), "label set cannot be empty", (const char *)a3);
  xgboost_old::utils::Check(((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2)% (unint64_t)((uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 2) == 0, "labels are not correctly provided", v9);
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)a5, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  unsigned __int8 v16 = 1;
  int v15 = (*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 2;
  uint64_t v10 = (const char *)((*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v14[0] = (unsigned int *)&v15;
  v14[1] = a1;
  void v14[2] = (unsigned int *)a2;
  void v14[3] = (unsigned int *)a3;
  void v14[4] = (unsigned int *)&v16;
  v14[5] = a5;
  turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(0, v10, v14);
  if (a1[3]) {
    uint64_t v12 = "label must be in [0,1] for logistic regression";
  }
  else {
    uint64_t v12 = "";
  }
  return xgboost_old::utils::Check(v16, "%s", v11, v12);
}

const char *xgboost_old::learner::RegLossObj::DefaultEvalMetric(xgboost_old::learner::RegLossObj *this)
{
  int v1 = *((_DWORD *)this + 3);
  uint64_t v2 = "rmse";
  if (v1 == 3) {
    uint64_t v2 = "auc";
  }
  if (v1 == 2) {
    return "error";
  }
  else {
    return v2;
  }
}

void xgboost_old::learner::RegLossObj::PredTransform(uint64_t a1, void *a2)
{
  unint64_t v2 = ((a2[1] - *a2) >> 2);
  v3[0] = a2;
  v3[1] = a1;
  turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(0, v2, (uint64_t)v3);
}

uint64_t xgboost_old::learner::IObjFunction::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

float xgboost_old::learner::RegLossObj::ProbToMargin(xgboost_old::learner::RegLossObj *this, float a2, uint64_t a3, const char *a4)
{
  float v4 = a2;
  if ((*((_DWORD *)this + 3) - 1) <= 2)
  {
    uint64_t v5 = a2 < 1.0 && a2 > 0.0;
    xgboost_old::utils::Check(v5, "base_score must be in (0,1) for logistic loss", a4);
    return -logf((float)(1.0 / v4) + -1.0);
  }
  return v4;
}

void turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, const char *a2, unsigned int **a3)
{
  uint64_t v5 = (const char *)a1;
  uint64_t v16 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = (unint64_t)v7 > 1;
  }
  if (v10)
  {
    uint64_t v11 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v15, v11);
    double v12 = (double)(unint64_t)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v13 = (unint64_t)((double)(unint64_t)v5 + v12 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v13 = (unint64_t)a2;
    }
    void v14[2] = (unint64_t)((double)(unint64_t)v5 + v12 * (double)0);
    void v14[3] = v13;
    v14[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v14[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v15, v14);
  }
  if (a2 > v5)
  {
    do
      *(float *)&double v9 = xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(a3, v5++, v9);
    while (a2 != v5);
  }
}

void sub_2244FA9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

float xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(unsigned int **a1, const char *a2, double a3)
{
  uint64_t v5 = a1[1];
  unint64_t v6 = **a1;
  float v7 = *(float *)(*(void *)a1[2] + 4 * (void)a2);
  unsigned int v8 = v5[3];
  unint64_t v9 = (unint64_t)a2 / v6;
  if (v8 - 1 < 2)
  {
    float v7 = 1.0 / (float)(expf(-v7) + 1.0);
  }
  else if (v8 && v8 != 3)
  {
    xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", a2);
  }
  BOOL v10 = &a2[-(v9 * v6)];
  uint64_t v11 = a1[3];
  uint64_t v12 = *((void *)v11 + 14);
  float v13 = 1.0;
  if (*((void *)v11 + 15) != v12) {
    float v13 = *(float *)(v12 + 4 * (void)v10);
  }
  float v14 = *(float *)(*((void *)v11 + 8) + 4 * (void)v10);
  if (v14 == 1.0) {
    float v13 = v13 * *((float *)v5 + 2);
  }
  unsigned int v15 = v5[3];
  if (v15)
  {
    if (v14 < 0.0 || v14 > 1.0) {
      *(unsigned char *)a1[4] = 0;
    }
    *(float *)&a3 = v7;
    if (v15 - 1 >= 2)
    {
      if (v15 != 3) {
        xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", a2, a3);
      }
      *(float *)&a3 = 1.0 / (float)(expf(-v7) + 1.0);
    }
    float v17 = *(float *)&a3 - v14;
    if (v15 - 1 >= 2)
    {
      if (v15 != 3) {
        xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", a2);
      }
      float v7 = 1.0 / (float)(expf(-v7) + 1.0);
    }
    float v18 = v7 * (float)(1.0 - v7);
    if (v18 < 1.0e-16) {
      float v18 = 1.0e-16;
    }
  }
  else
  {
    float v17 = v7 - v14;
    float v18 = 1.0;
  }
  float result = v13 * v18;
  uint64_t v20 = (float *)(*(void *)a1[5] + 8 * (void)a2);
  *uint64_t v20 = v13 * v17;
  v20[1] = result;
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      float result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710A99 & 0x7FFFFFFFFFFFFFFFLL)
        || (float result = strcmp((const char *)result, (const char *)(0x8000000224710A99 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1, double a2)
{
  for (unint64_t i = *(const char **)(a1 + 8); (unint64_t)i < *(void *)(a1 + 16); ++i)
    *(float *)&a2 = xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(*(unsigned int ***)a1, i, a2);
}

void turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  float v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = (unint64_t)v7 > 1;
  }
  if (v11)
  {
    unsigned int v15 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v19, v15);
    double v16 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v17 = (unint64_t)((double)v5 + v16 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v17 = a2;
    }
    void v18[2] = (unint64_t)((double)v5 + v16 * (double)0);
    void v18[3] = v17;
    v18[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v18[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v19, v18);
  }
  if (a2 > v5)
  {
    uint64_t v12 = **(void **)a3;
    do
    {
      LODWORD(v10) = *(_DWORD *)(v12 + 4 * v5);
      int v13 = *(_DWORD *)(*(void *)(a3 + 8) + 12);
      if ((v13 - 1) < 2)
      {
        *(float *)&double v10 = 1.0 / (float)(expf(-*(float *)&v10) + 1.0);
      }
      else
      {
        if (v13) {
          BOOL v14 = v13 == 3;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14) {
          xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", v9, v10);
        }
      }
      *(_DWORD *)(v12 + 4 * v5++) = LODWORD(v10);
    }
    while (a2 != v5);
  }
}

void sub_2244FAE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      float result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710B4ELL & 0x7FFFFFFFFFFFFFFFLL)
        || (float result = strcmp((const char *)result, (const char *)(0x8000000224710B4ELL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t ***a1, const char *a2, double a3)
{
  unint64_t v3 = (unint64_t)a1[1];
  for (unint64_t i = (unint64_t)a1[2]; v3 < i; ++v3)
  {
    uint64_t v6 = ***a1;
    LODWORD(a3) = *(_DWORD *)(v6 + 4 * v3);
    int v7 = *((_DWORD *)(*a1)[1] + 3);
    if ((v7 - 1) < 2)
    {
      *(float *)&a3 = 1.0 / (float)(expf(-*(float *)&a3) + 1.0);
    }
    else
    {
      if (v7) {
        BOOL v8 = v7 == 3;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8) {
        xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", a2, a3);
      }
    }
    *(_DWORD *)(v6 + 4 * v3) = LODWORD(a3);
  }
}

float xgboost_old::learner::PoissonRegression::SetParam(xgboost_old::learner::PoissonRegression *this, const char *a2, const char *a3)
{
  if (!strcmp("max_delta_step", a2))
  {
    float result = atof(a3);
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t xgboost_old::learner::PoissonRegression::GetGradient(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  xgboost_old::utils::Check(*(float *)(a1 + 8) != 0.0, "PoissonRegression: need to set max_delta_step", (const char *)a3);
  xgboost_old::utils::Check(*(void *)(a3 + 72) != *(void *)(a3 + 64), "label set cannot be empty", v9);
  xgboost_old::utils::Check(a2[1] - *a2 == *(void *)(a3 + 72) - *(void *)(a3 + 64), "labels are not correctly provided", v10);
  std::vector<xgboost_old::SparseBatch::Entry>::resize(a5, (uint64_t)(a2[1] - *a2) >> 2);
  unsigned __int8 v15 = 1;
  unint64_t v11 = ((a2[1] - *a2) >> 2);
  v14[0] = a2;
  v14[1] = a3;
  void v14[2] = a5;
  void v14[3] = a1;
  uint64_t v14[4] = &v15;
  turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(0, v11, (uint64_t)v14);
  return xgboost_old::utils::Check(v15, "PoissonRegression: label must be nonnegative", v12);
}

void xgboost_old::learner::PoissonRegression::PredTransform(uint64_t a1, void *a2)
{
  unint64_t v2 = (uint64_t)(a2[1] - *a2) >> 2;
  unint64_t v3 = a2;
  turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(0, v2, &v3);
}

void turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  int v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unsigned int v27 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v31, v27);
    double v28 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v29 = (unint64_t)((double)(unint64_t)a1 + v28 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v29 = a2;
    }
    v30[2] = (unint64_t)((double)(unint64_t)a1 + v28 * (double)0);
    v30[3] = v29;
    v30[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v30[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v31, v30);
  }
  BOOL v9 = a2 > (unint64_t)a1;
  unint64_t v10 = a2 - (void)a1;
  if (v9)
  {
    unint64_t v11 = *(void **)(a3 + 8);
    uint64_t v13 = v11[14];
    uint64_t v12 = v11[15];
    unsigned __int8 v15 = *(void **)(a3 + 16);
    uint64_t v14 = *(void *)(a3 + 24);
    double v16 = (float *)(**(void **)a3 + 4 * (void)a1);
    unint64_t v17 = *(unsigned char **)(a3 + 32);
    float v18 = (float *)(v13 + 4 * (void)a1);
    uint64_t v19 = (float *)(v11[8] + 4 * (void)a1);
    uint64_t v20 = (8 * (void)a1) | 4;
    do
    {
      if (v12 == v13) {
        float v21 = 1.0;
      }
      else {
        float v21 = *v18;
      }
      if (*v19 >= 0.0)
      {
        float v23 = *v16;
        float v22 = *v19;
        float v24 = v21 * (float)(expf(*v16) - v22);
        float v25 = expf(v23 + *(float *)(v14 + 8));
        unsigned int v26 = (float *)(*v15 + v20);
        *(v26 - 1) = v24;
        *unsigned int v26 = v21 * v25;
      }
      else
      {
        *unint64_t v17 = 0;
      }
      ++v16;
      ++v18;
      ++v19;
      v20 += 8;
      --v10;
    }
    while (v10);
  }
}

void sub_2244FB310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      float result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710BFDLL & 0x7FFFFFFFFFFFFFFFLL)
        || (float result = strcmp((const char *)result, (const char *)(0x8000000224710BFDLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *a1)
{
  unint64_t v1 = a1[1];
  unint64_t v2 = a1[2];
  unint64_t v3 = v2 - v1;
  if (v2 > v1)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *(void *)(*a1 + 24);
    uint64_t v6 = *(void **)(*a1 + 8);
    uint64_t v8 = v6[14];
    uint64_t v7 = v6[15];
    uint64_t v9 = (8 * v1) | 4;
    unint64_t v10 = (float *)(**(void **)*a1 + 4 * v1);
    unint64_t v11 = (float *)(v6[8] + 4 * v1);
    uint64_t v12 = (float *)(v8 + 4 * v1);
    do
    {
      if (v7 == v8) {
        float v13 = 1.0;
      }
      else {
        float v13 = *v12;
      }
      if (*v11 >= 0.0)
      {
        float v15 = *v10;
        float v14 = *v11;
        float v16 = v13 * (float)(expf(*v10) - v14);
        float v17 = expf(v15 + *(float *)(v5 + 8));
        float v18 = (float *)(**(void **)(v4 + 16) + v9);
        *(v18 - 1) = v16;
        *float v18 = v13 * v17;
      }
      else
      {
        **(unsigned char **)(v4 + 32) = 0;
      }
      v9 += 8;
      ++v10;
      ++v11;
      ++v12;
      --v3;
    }
    while (v3);
  }
}

void turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, void **a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v12 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v16, v12);
    double v13 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v14 = (unint64_t)((double)(unint64_t)a1 + v13 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v14 = a2;
    }
    v15[2] = (unint64_t)((double)(unint64_t)a1 + v13 * (double)0);
    v15[3] = v14;
    v15[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v15[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v16, v15);
  }
  BOOL v9 = a2 > (unint64_t)a1;
  unint64_t v10 = a2 - (void)a1;
  if (v9)
  {
    unint64_t v11 = (float *)(**a3 + 4 * (void)a1);
    do
    {
      float *v11 = expf(*v11);
      ++v11;
      --v10;
    }
    while (v10);
  }
}

void sub_2244FB63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      float result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710CB9 & 0x7FFFFFFFFFFFFFFFLL)
        || (float result = strcmp((const char *)result, (const char *)(0x8000000224710CB9 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = v2 - v1;
  if (v2 > v1)
  {
    uint64_t v4 = (float *)(***(void ***)a1 + 4 * v1);
    do
    {
      *uint64_t v4 = expf(*v4);
      ++v4;
      --v3;
    }
    while (v3);
  }
}

uint64_t xgboost_old::learner::SoftmaxMultiClassObj::SetParam(xgboost_old::learner::SoftmaxMultiClassObj *this, const char *a2, const char *a3)
{
  uint64_t result = strcmp("num_class", a2);
  if (!result)
  {
    uint64_t result = atoi(a3);
    *((_DWORD *)this + 2) = result;
  }
  return result;
}

uint64_t xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  xgboost_old::utils::Check(a1[2] != 0, "must set num_class to use softmax", (const char *)a3);
  xgboost_old::utils::Check(*(void *)(a3 + 72) != *(void *)(a3 + 64), "label set cannot be empty", v9);
  xgboost_old::utils::Check(((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2)% (unint64_t)(((uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 2) * (int)a1[2]) == 0, "SoftmaxMultiClassObj: label size and pred size does not match", v10);
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)a5, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  unint64_t v11 = (int)a1[2];
  int v12 = v11 * ((*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 2);
  int v21 = ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) / v11;
  int v22 = v12;
  int v20 = 0;
  unint64_t v19 = turi::thread::cpu_count(v13);
  v18[0] = (unsigned int *)&v21;
  v18[1] = (unsigned int *)&v19;
  void v18[2] = a1;
  void v18[3] = (unsigned int *)a2;
  uint64_t v18[4] = (unsigned int *)&v22;
  v18[5] = (unsigned int *)a3;
  v18[6] = (unsigned int *)&v20;
  v18[7] = a5;
  turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(0, v19, v18);
  BOOL v16 = v20 >= 0 && v20 < (int)a1[2];
  return xgboost_old::utils::Check(v16, "SoftmaxMultiClassObj: label must be in [0, num_class), num_class=%d but found %d in label", v14, a1[2], v20);
}

void xgboost_old::learner::SoftmaxMultiClassObj::PredTransform(unsigned int *a1, uint64_t a2)
{
}

void xgboost_old::learner::SoftmaxMultiClassObj::EvalTransform(unsigned int *a1, uint64_t a2)
{
}

void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, unsigned int **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    void v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    uint64_t v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2244FBA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = **a1;
  unint64_t v5 = *(void *)a1[1];
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  std::vector<float>::vector(&__p, (int)v3[2]);
  uint64_t v8 = (float *)__p;
  unint64_t v48 = v7;
  if (v6 >= v7)
  {
    if (!__p) {
      return;
    }
  }
  else
  {
    uint64_t v47 = v50;
    unint64_t v46 = (char *)v50 - (unsigned char *)__p;
    unint64_t v9 = ((char *)v50 - (unsigned char *)__p) >> 2;
    uint64_t v10 = 2;
    if (v9 > 2) {
      uint64_t v10 = ((char *)v50 - (unsigned char *)__p) >> 2;
    }
    if (v9 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = ((char *)v50 - (unsigned char *)__p) >> 2;
    }
    unint64_t v12 = a1[5];
    uint64_t v44 = *((void *)v12 + 8);
    uint64_t v45 = a1[4];
    uint64_t v13 = *((void *)v12 + 14);
    uint64_t v14 = v3[2];
    uint64_t v42 = v10 - 1;
    uint64_t v43 = *((void *)v12 + 15);
    do
    {
      if ((int)v14 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)a1[3];
        uint64_t v17 = v14;
        float v18 = v8;
        do
        {
          *v18++ = *(float *)(v16 + 4 * (v6 * v14 + v15++));
          --v17;
        }
        while (v17);
      }
      float v19 = *v8;
      int v20 = v8 + 1;
      uint64_t v21 = v42;
      if (v46 >= 5)
      {
        do
        {
          float v22 = *v20++;
          float v23 = v22;
          if (v22 >= v19) {
            float v19 = v23;
          }
          --v21;
        }
        while (v21);
      }
      if (v47 != v8)
      {
        double v24 = 0.0;
        float v25 = v8;
        uint64_t v26 = v11;
        do
        {
          float v27 = expf(*v25 - v19);
          *v25++ = v27;
          double v24 = v24 + v27;
          --v26;
        }
        while (v26);
        unint64_t v29 = v8;
        uint64_t v30 = v11;
        do
        {
          float v28 = v24;
          *unint64_t v29 = *v29 / v28;
          ++v29;
          --v30;
        }
        while (v30);
      }
      unint64_t v31 = v6 % *v45;
      unsigned int v32 = (int)*(float *)(v44 + 4 * v31);
      if ((v32 & 0x80000000) != 0 || (int)v14 <= (int)v32)
      {
        *a1[6] = v32;
        unsigned int v32 = 0;
      }
      if (v43 == v13) {
        float v33 = 1.0;
      }
      else {
        float v33 = *(float *)(v13 + 4 * v31);
      }
      uint64_t v14 = v3[2];
      if ((int)v14 >= 1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = v32;
        uint64_t v36 = v6 * v14 + v32;
        uint64_t v37 = v3[2];
        unint64_t v38 = v8;
        do
        {
          float v39 = *v38;
          if (v35)
          {
            float v40 = v33 * v39;
            unsigned int v41 = (float *)(*(void *)a1[7] + 8 * (v6 * v14 + v34));
          }
          else
          {
            float v40 = v33 * (float)(v39 + -1.0);
            unsigned int v41 = (float *)(*(void *)a1[7] + 8 * v36);
          }
          *unsigned int v41 = v40;
          v41[1] = v33 * (float)((float)(v39 + v39) * (float)(1.0 - v39));
          ++v34;
          --v35;
          ++v38;
          --v37;
        }
        while (v37);
      }
      ++v6;
    }
    while (v6 != v48);
  }
  unsigned int v50 = v8;
  operator delete(v8);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710D72 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x8000000224710D72 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  for (unint64_t i = *(void *)(a1 + 8); i < *(void *)(a1 + 16); ++i)
    xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(*(unsigned int ***)a1, i);
}

void xgboost_old::learner::SoftmaxMultiClassObj::Transform(unsigned int *a1, uint64_t a2, const char *a3)
{
  int v3 = (int)a3;
  int v13 = (int)a3;
  unint64_t v6 = (turi::thread *)xgboost_old::utils::Check(a1[2] != 0, "must set num_class to use softmax", a3);
  *(void *)&v10[4] = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v7 = ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) / (unint64_t)(int)a1[2];
  *(void *)uint64_t v10 = v7;
  if (!v3) {
    std::vector<float>::resize((uint64_t)&v10[4], v7);
  }
  v8[0] = (unsigned int *)v10;
  v8[1] = (unsigned int *)&v9;
  void v8[2] = a1;
  void v8[3] = (unsigned int *)a2;
  v8[4] = (unsigned int *)&v13;
  void v8[5] = (unsigned int *)&v10[4];
  unint64_t v9 = turi::thread::cpu_count(v6);
  turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(0, v9, v8);
  if (&v10[4] != (unsigned char *)a2 && !v13) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a2, *(char **)&v10[4], v11, (v11 - *(void *)&v10[4]) >> 2);
  }
  if (*(void *)&v10[4])
  {
    uint64_t v11 = *(void *)&v10[4];
    operator delete(*(void **)&v10[4]);
  }
}

void sub_2244FBEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, unsigned int **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    void v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    uint64_t v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2244FC05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  unint64_t v2 = a1;
  int v3 = a1[2];
  uint64_t v4 = **a1;
  unint64_t v5 = *(void *)a1[1];
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  std::vector<float>::vector(&__p, (int)v3[2]);
  uint64_t v8 = (float *)__p;
  if (v6 < v7)
  {
    uint64_t v9 = v3[2];
    uint64_t v10 = (int)v9;
    int v11 = *v2[4];
    uint64_t v49 = v51;
    unint64_t v12 = (char *)v51 - (unsigned char *)__p;
    unint64_t v13 = ((char *)v51 - (unsigned char *)__p) >> 2;
    if (v51 == __p) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = (float *)__p;
    }
    uint64_t v15 = 2;
    if (v13 > 2) {
      uint64_t v15 = ((char *)v51 - (unsigned char *)__p) >> 2;
    }
    if (v13 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = ((char *)v51 - (unsigned char *)__p) >> 2;
    }
    uint64_t v47 = (float *)((char *)__p + 4);
    uint64_t v48 = v15 - 1;
    uint64_t v45 = v3[2];
    uint64_t v46 = (int)v9;
    uint64_t v43 = v2;
    unint64_t v44 = (char *)v51 - (unsigned char *)__p;
    do
    {
      uint64_t v17 = v6 * v10;
      if ((int)v10 >= 1)
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)v2[3];
        uint64_t v20 = v9;
        uint64_t v21 = v8;
        do
        {
          *v21++ = *(float *)(v19 + 4 * (v17 + v18++));
          --v20;
        }
        while (v20);
      }
      if (v11)
      {
        float v22 = *v8;
        float v23 = v47;
        uint64_t v24 = v48;
        if (v12 >= 5)
        {
          do
          {
            float v25 = *v23++;
            float v26 = v25;
            if (v25 >= v22) {
              float v22 = v26;
            }
            --v24;
          }
          while (v24);
        }
        if (v49 != v8)
        {
          double v27 = 0.0;
          float v28 = v8;
          unint64_t v29 = v8;
          uint64_t v30 = v16;
          uint64_t v31 = v16;
          do
          {
            float v32 = expf(*v29 - v22);
            *v29++ = v32;
            double v27 = v27 + v32;
            --v31;
          }
          while (v31);
          uint64_t v8 = v28;
          uint64_t v34 = v28;
          uint64_t v16 = v30;
          uint64_t v35 = v30;
          unint64_t v2 = v43;
          unint64_t v12 = v44;
          uint64_t v9 = v45;
          uint64_t v10 = v46;
          do
          {
            float v33 = v27;
            *uint64_t v34 = *v34 / v33;
            ++v34;
            --v35;
          }
          while (v35);
        }
        if ((int)v9 >= 1)
        {
          uint64_t v36 = 0;
          uint64_t v37 = *(void *)v2[3];
          uint64_t v38 = v9;
          float v39 = v8;
          do
          {
            int v40 = *(_DWORD *)v39++;
            *(_DWORD *)(v37 + 4 * (v17 + v36++)) = v40;
            --v38;
          }
          while (v38);
        }
      }
      else
      {
        if (v12 < 5)
        {
          LODWORD(v41) = 0;
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 1;
          do
          {
            if (v14[v42] > v14[v41]) {
              uint64_t v41 = v42;
            }
            ++v42;
          }
          while (v13 != v42);
        }
        *(float *)(*(void *)v2[5] + 4 * v6) = (float)(int)v41;
      }
      ++v6;
    }
    while (v6 != v7);
  }
  if (v8)
  {
    char v51 = v8;
    operator delete(v8);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710E31 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x8000000224710E31 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  for (unint64_t i = *(void *)(a1 + 8); i < *(void *)(a1 + 16); ++i)
    xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}::operator()(*(unsigned int ***)a1, i);
}

void xgboost_old::learner::PairwiseRankObj::~PairwiseRankObj(xgboost_old::learner::PairwiseRankObj *this)
{
}

uint64_t xgboost_old::learner::LambdaRankObj::SetParam(xgboost_old::learner::LambdaRankObj *this, const char *a2, const char *a3)
{
  if (!strcmp("loss_type", a2)) {
    *((_DWORD *)this + 2) = atoi(a3);
  }
  if (!strcmp("fix_list_weight", a2))
  {
    float v6 = atof(a3);
    *((float *)this + 4) = v6;
  }
  uint64_t result = strcmp("num_pairsample", a2);
  if (!result)
  {
    uint64_t result = atoi(a3);
    *((_DWORD *)this + 3) = result;
  }
  return result;
}

void xgboost_old::learner::LambdaRankObj::GetGradient(_DWORD *a1, void *a2, void *a3, int a4, uint64_t a5)
{
  unint64_t v7 = a3;
  xgboost_old::utils::Check(a2[1] - *a2 == a3[9] - a3[8], "label size predict size not match", (const char *)a3);
  unsigned int v106 = (uint64_t *)a5;
  std::vector<xgboost_old::SparseBatch::Entry>::resize(a5, (uint64_t)(a2[1] - *a2) >> 2);
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v118, 2uLL, __x);
  uint64_t v10 = (uint64_t)(v7[9] - v7[8]) >> 2;
  std::vector<unsigned int>::pointer begin = v118.__begin_;
  v118.__begin_[1] = v10;
  unint64_t v12 = (unsigned int *)v7[11];
  unint64_t v13 = (unsigned int *)v7[12];
  BOOL v14 = v13 == v12;
  if (v13 == v12)
  {
    unint64_t v12 = begin;
    uint64_t v15 = &v118;
  }
  else
  {
    uint64_t v15 = (std::vector<unsigned int> *)(v7 + 11);
  }
  double v105 = v15;
  if (v14) {
    p_std::vector<std::string>::pointer end = &v118.__end_;
  }
  else {
    p_std::vector<std::string>::pointer end = (std::vector<unsigned int>::pointer *)(v7 + 12);
  }
  uint64_t v17 = *p_end != v12 && v10 == *(*p_end - 1);
  xgboost_old::utils::Check(v17, "group structure not consistent with #rows", v9);
  unint64_t v18 = (unint64_t)((char *)*p_end - (char *)v105->__begin_) >> 2;
  unsigned int v117 = 1111 * a4;
  *(void *)__x = 0;
  long long v115 = 0;
  uint64_t v116 = 0;
  std::string __p = 0;
  BOOL v112 = 0;
  unsigned int v113 = 0;
  uint64_t v108 = 0;
  unsigned int v109 = 0;
  uint64_t v110 = 0;
  uint64_t v102 = (v18 - 1);
  if (v18 == 1) {
    goto LABEL_120;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v101 = v7;
  do
  {
    uint64_t v21 = (char *)__p;
    BOOL v112 = (char *)__p;
    long long v115 = v19;
    unint64_t v22 = v105->__begin_[v20];
    uint64_t v103 = v20;
    uint64_t v23 = v20 + 1;
    uint64_t v24 = __p;
    uint64_t v104 = v23;
    if (v22 < v105->__begin_[v23])
    {
      do
      {
        int v25 = *(_DWORD *)(*a2 + 4 * v22);
        int v26 = *(_DWORD *)(v7[8] + 4 * v22);
        if (v21 >= v113)
        {
          double v27 = (char *)__p;
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (unsigned char *)__p) >> 2);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0x1555555555555555) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v113 - (unsigned char *)__p) >> 2) > v29) {
            unint64_t v29 = 0x5555555555555556 * ((v113 - (unsigned char *)__p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v113 - (unsigned char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v30 = 0x1555555555555555;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)&v113, v30);
            double v27 = (char *)__p;
            uint64_t v21 = v112;
          }
          else
          {
            uint64_t v31 = 0;
          }
          float v32 = &v31[12 * v28];
          *(_DWORD *)float v32 = v25;
          *((_DWORD *)v32 + 1) = v26;
          *((_DWORD *)v32 + 2) = v22;
          float v33 = v32;
          if (v21 != v27)
          {
            do
            {
              uint64_t v34 = *(void *)(v21 - 12);
              v21 -= 12;
              int v35 = *((_DWORD *)v21 + 2);
              *(void *)(v33 - 12) = v34;
              v33 -= 12;
              *((_DWORD *)v33 + 2) = v35;
            }
            while (v21 != v27);
            double v27 = (char *)__p;
          }
          uint64_t v21 = v32 + 12;
          std::string __p = v33;
          BOOL v112 = v32 + 12;
          unsigned int v113 = &v31[12 * v30];
          if (v27) {
            operator delete(v27);
          }
          uint64_t v23 = v104;
        }
        else
        {
          *(_DWORD *)uint64_t v21 = v25;
          *((_DWORD *)v21 + 1) = v26;
          *((_DWORD *)v21 + 2) = v22;
          v21 += 12;
        }
        BOOL v112 = v21;
        *(void *)(*v106 + 8 * v22++) = 0;
      }
      while (v22 < v105->__begin_[v23]);
      uint64_t v24 = __p;
    }
    unint64_t v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v21 - v24) >> 2));
    v119[0] = (uint64_t (*)(uint64_t *, uint64_t *))xgboost_old::learner::LambdaRankObj::ListEntry::CmpPred;
    if (v21 == v24) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = v36;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,false>((uint64_t)v24, (uint64_t *)v21, v119, v37, 1);
    std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)&v108, 0xAAAAAAAAAAAAAAABLL * ((v112 - (unsigned char *)__p) >> 2));
    float v39 = (int *)v108;
    if (v112 != __p)
    {
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v112 - (unsigned char *)__p) >> 2);
      uint64_t v41 = (char *)v108 + 4;
      uint64_t v42 = (unsigned __int32 *)((char *)__p + 4);
      unsigned int v43 = 1;
      do
      {
        unsigned __int32 v44 = *v42;
        v42 += 3;
        v38.n128_u32[0] = v44;
        *(v41 - 1) = v44;
        *uint64_t v41 = v43 - 1;
        v41 += 2;
      }
      while (v40 > v43++);
    }
    unint64_t v46 = 126 - 2 * __clz((v109 - (char *)v39) >> 3);
    v119[0] = (uint64_t (*)(uint64_t *, uint64_t *))xgboost_old::learner::CmpFirst;
    if (v109 == (char *)v39) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = v46;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>(v39, (int *)v109, (uint64_t (**)(int *, int *))v119, v47, 1, v38);
    uint64_t v49 = (float *)v108;
    uint64_t v48 = (int *)v109;
    if (v109 != v108)
    {
      unint64_t v50 = 0;
      unsigned int v51 = 0;
      unint64_t v52 = (v109 - (unsigned char *)v108) >> 3;
      while (1)
      {
        uint64_t v53 = &v49[2 * v50];
        int v54 = 1;
        do
        {
          int v55 = v54;
          unint64_t v50 = v51 + v54;
          if (v52 <= v50) {
            break;
          }
          ++v54;
        }
        while (v49[2 * v50] == *v53);
        unsigned int v56 = v52 - v55;
        if (v56)
        {
          int v57 = a1[3];
          if (v57) {
            break;
          }
        }
LABEL_86:
        unint64_t v52 = ((char *)v48 - (char *)v49) >> 3;
        unsigned int v51 = v50;
        if (v52 <= v50) {
          goto LABEL_87;
        }
      }
      double v58 = (double)v56;
      while (v51 >= v50)
      {
LABEL_84:
        if (!--v57)
        {
          uint64_t v49 = (float *)v108;
          uint64_t v48 = (int *)v109;
          goto LABEL_86;
        }
      }
      uint64_t v59 = v51;
      while (1)
      {
        unsigned int v60 = ((double)rand_r(&v117) * 4.65661287e-10 * v58);
        if (v51 <= v60)
        {
          int v64 = *((_DWORD *)v108 + 2 * v59 + 1);
          int v65 = *((_DWORD *)v108 + 2 * v55 + 2 * v60 + 1);
          int v63 = v115;
          if (v115 >= v116)
          {
            unsigned int v67 = *(char **)__x;
            unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v115[-*(void *)__x] >> 2);
            unint64_t v73 = v72 + 1;
            if (v72 + 1 > 0x1555555555555555) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)&v116[-*(void *)__x] >> 2) > v73) {
              unint64_t v73 = 0x5555555555555556 * ((uint64_t)&v116[-*(void *)__x] >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v116[-*(void *)__x] >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v70 = 0x1555555555555555;
            }
            else {
              unint64_t v70 = v73;
            }
            if (v70)
            {
              long long v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)&v116, v70);
              unsigned int v67 = *(char **)__x;
              int v63 = v115;
            }
            else
            {
              long long v71 = 0;
            }
            uint64_t v74 = &v71[12 * v72];
            *(_DWORD *)uint64_t v74 = v64;
            *((_DWORD *)v74 + 1) = v65;
            *((_DWORD *)v74 + 2) = 1065353216;
            unint64_t v75 = v74;
            if (v63 != v67)
            {
              do
              {
                uint64_t v78 = *(void *)(v63 - 12);
                v63 -= 12;
                int v79 = *((_DWORD *)v63 + 2);
                *(void *)(v75 - 12) = v78;
                v75 -= 12;
                *((_DWORD *)v75 + 2) = v79;
              }
              while (v63 != v67);
LABEL_80:
              unsigned int v67 = *(char **)__x;
            }
LABEL_81:
            int v66 = v74 + 12;
            *(void *)__x = v75;
            long long v115 = v74 + 12;
            uint64_t v116 = &v71[12 * v70];
            if (v67) {
              operator delete(v67);
            }
            goto LABEL_83;
          }
          *(_DWORD *)long long v115 = v64;
          *((_DWORD *)v63 + 1) = v65;
        }
        else
        {
          int v61 = *((_DWORD *)v108 + 2 * v60 + 1);
          int v62 = *((_DWORD *)v108 + 2 * v59 + 1);
          int v63 = v115;
          if (v115 >= v116)
          {
            unsigned int v67 = *(char **)__x;
            unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v115[-*(void *)__x] >> 2);
            unint64_t v69 = v68 + 1;
            if (v68 + 1 > 0x1555555555555555) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)&v116[-*(void *)__x] >> 2) > v69) {
              unint64_t v69 = 0x5555555555555556 * ((uint64_t)&v116[-*(void *)__x] >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v116[-*(void *)__x] >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v70 = 0x1555555555555555;
            }
            else {
              unint64_t v70 = v69;
            }
            if (v70)
            {
              long long v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)&v116, v70);
              unsigned int v67 = *(char **)__x;
              int v63 = v115;
            }
            else
            {
              long long v71 = 0;
            }
            uint64_t v74 = &v71[12 * v68];
            *(_DWORD *)uint64_t v74 = v61;
            *((_DWORD *)v74 + 1) = v62;
            *((_DWORD *)v74 + 2) = 1065353216;
            unint64_t v75 = v74;
            if (v63 != v67)
            {
              do
              {
                uint64_t v76 = *(void *)(v63 - 12);
                v63 -= 12;
                int v77 = *((_DWORD *)v63 + 2);
                *(void *)(v75 - 12) = v76;
                v75 -= 12;
                *((_DWORD *)v75 + 2) = v77;
              }
              while (v63 != v67);
              goto LABEL_80;
            }
            goto LABEL_81;
          }
          *(_DWORD *)long long v115 = v61;
          *((_DWORD *)v63 + 1) = v62;
        }
        int v66 = v63 + 12;
        *((_DWORD *)v63 + 2) = 1065353216;
LABEL_83:
        long long v115 = v66;
        if (++v59 == v50) {
          goto LABEL_84;
        }
      }
    }
LABEL_87:
    (*(void (**)(_DWORD *, void **, std::vector<unsigned int>::value_type *))(*(void *)a1 + 64))(a1, &__p, __x);
    LODWORD(v81) = a1[4];
    float v82 = 1.0 / (float)(int)a1[3];
    if (*(float *)&v81 != 0.0) {
      float v82 = v82 * (float)(*(float *)&v81 / (float)(v105->__begin_[v104] - v105->__begin_[v103]));
    }
    uint64_t v19 = v115;
    if (v115 != *(char **)__x)
    {
      uint64_t v83 = 0;
      unint64_t v84 = 0;
      uint64_t v19 = *(char **)__x;
      do
      {
        double v85 = (float *)&v19[v83];
        long long v86 = (unsigned int *)__p;
        float v88 = *v85;
        unsigned int v87 = *((_DWORD *)v85 + 1);
        float v89 = v85[2];
        float v90 = *((float *)__p + 3 * *(unsigned int *)v85) - *((float *)__p + 3 * v87);
        int v91 = a1[2];
        if ((v91 - 1) < 2)
        {
          float v90 = 1.0 / (float)(expf(-v90) + 1.0);
        }
        else
        {
          if (v91) {
            BOOL v92 = v91 == 3;
          }
          else {
            BOOL v92 = 1;
          }
          if (!v92) {
            xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", v80);
          }
        }
        *(float *)&double v81 = v90;
        if ((v91 - 1) >= 2)
        {
          if (v91 != 3)
          {
            if (v91) {
              xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", v80, v81);
            }
            float v93 = v90 + -1.0;
            goto LABEL_112;
          }
          *(float *)&double v81 = 1.0 / (float)(expf(-v90) + 1.0);
        }
        float v93 = *(float *)&v81 + -1.0;
        if ((v91 - 1) < 2) {
          goto LABEL_109;
        }
        if (v91)
        {
          if (v91 != 3) {
            xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", v80);
          }
          float v90 = 1.0 / (float)(expf(-v90) + 1.0);
LABEL_109:
          if ((float)(v90 * (float)(1.0 - v90)) >= 1.0e-16) {
            float v94 = v90 * (float)(1.0 - v90);
          }
          else {
            float v94 = 1.0e-16;
          }
          goto LABEL_114;
        }
LABEL_112:
        float v94 = 1.0;
LABEL_114:
        uint64_t v95 = *v106;
        unsigned int v96 = (float *)(*v106 + 8 * v86[3 * LODWORD(v88) + 2]);
        float v97 = (float)(v82 * v89) + (float)(v82 * v89);
        float v98 = v96[1] + (float)(v97 * v94);
        float *v96 = *v96 + (float)(v93 * (float)(v82 * v89));
        v96[1] = v98;
        unint64_t v99 = (float *)(v95 + 8 * v86[3 * v87 + 2]);
        float v100 = v99[1];
        float *v99 = *v99 - (float)(v93 * (float)(v82 * v89));
        v99[1] = v100 + (float)(v97 * v94);
        ++v84;
        uint64_t v19 = *(char **)__x;
        v83 += 12;
      }
      while (v84 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v115[-*(void *)__x] >> 2));
    }
    unint64_t v7 = v101;
    uint64_t v20 = v104;
  }
  while (v104 != v102);
  if (v108)
  {
    unsigned int v109 = (char *)v108;
    operator delete(v108);
  }
  if (__p)
  {
    BOOL v112 = (char *)__p;
    operator delete(__p);
  }
LABEL_120:
  if (*(void *)__x)
  {
    long long v115 = *(char **)__x;
    operator delete(*(void **)__x);
  }
  if (v118.__begin_)
  {
    v118.__end_ = v118.__begin_;
    operator delete(v118.__begin_);
  }
}

void sub_2244FCD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *xgboost_old::learner::LambdaRankObj::DefaultEvalMetric(xgboost_old::learner::LambdaRankObj *this)
{
  return "map";
}

BOOL xgboost_old::learner::LambdaRankObj::ListEntry::CmpPred(float *a1, float *a2)
{
  return *a1 > *a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  int v11 = (uint64_t *)((char *)a2 - 12);
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (uint64_t)a2 - v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 2);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)((uint64_t *)((char *)a2 - 12), (uint64_t *)v12);
          if (result)
          {
            int v31 = *(_DWORD *)(v12 + 8);
            uint64_t v29 = *(void *)v12;
            uint64_t v27 = *v11;
            *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 - 1);
            *(void *)uint64_t v12 = v27;
            uint64_t *v11 = v29;
            *((_DWORD *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)v12, (uint64_t *)(v12 + 12), (uint64_t *)((char *)a2 - 12), a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v12, v12 + 12, v12 + 24, (uint64_t)a2 - 12, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v12, v12 + 12, v12 + 24, v12 + 36, (uint64_t)a2 - 12, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 287) {
      break;
    }
    if (v14 == 1)
    {
      if ((uint64_t *)v12 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,xgboost_old::learner::LambdaRankObj::ListEntry*>(v12, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = v12 + 12 * (v16 >> 1);
    if ((unint64_t)v15 >= 0x601)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)v12, (uint64_t *)(v12 + 12 * (v16 >> 1)), (uint64_t *)((char *)a2 - 12), a3);
      uint64_t v19 = 3 * v17;
      uint64_t v20 = (uint64_t *)(v12 + 12 * v17 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)(v12 + 12), v20, a2 - 3, a3);
      uint64_t v21 = (uint64_t *)(v12 + 24);
      unint64_t v22 = (uint64_t *)(v12 + 12 + 4 * v19);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v21, v22, (uint64_t *)((char *)a2 - 36), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v20, (uint64_t *)v18, v22, a3);
      int v30 = *(_DWORD *)(v10 + 8);
      uint64_t v28 = *(void *)v10;
      uint64_t v23 = *(void *)v18;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v18 + 8);
      *(void *)uint64_t v10 = v23;
      *(_DWORD *)(v18 + 8) = v30;
      *(void *)unint64_t v18 = v28;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)(v12 + 12 * (v16 >> 1)), (uint64_t *)v12, (uint64_t *)((char *)a2 - 12), a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)((uint64_t *)(v10 - 12), (uint64_t *)v10) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::learner::LambdaRankObj::ListEntry *,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&)>((uint64_t *)v10, a2, a3);
      uint64_t v12 = result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::learner::LambdaRankObj::ListEntry *,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&)>((uint64_t *)v10, (unint64_t)a2, (uint64_t (**)(char *, uint64_t *))a3);
    if ((v25 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v10, v24, a3);
    uint64_t v12 = v24 + 12;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v24 + 12, (uint64_t)a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = (uint64_t *)v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,false>(v10, v24, a3, -v14, a5 & 1);
      uint64_t v12 = v24 + 12;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v12, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v12, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v17 = v3;
    uint64_t v18 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 12;
    if (result + 12 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          uint64_t v15 = *(void *)v10;
          int v16 = *(_DWORD *)(v10 + 8);
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(void *)(v13 + 12) = *(void *)(v6 + v12);
            *(_DWORD *)(v13 + 20) = *(_DWORD *)(v6 + v12 + 8);
            if (!v12) {
              break;
            }
            v12 -= 12;
            uint64_t result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 12;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          *(void *)uint64_t v14 = v15;
          *(_DWORD *)(v14 + 8) = v16;
        }
        uint64_t v7 = v10 + 12;
        v9 += 12;
      }
      while (v10 + 12 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v14 = v3;
    uint64_t v15 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 12;
    if (result + 12 != a2)
    {
      uint64_t v9 = result - 12;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          uint64_t v12 = *(void *)v6;
          int v13 = *(_DWORD *)(v6 + 8);
          uint64_t v11 = v9;
          do
          {
            *(void *)(v11 + 24) = *(void *)(v11 + 12);
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 20);
            uint64_t result = (*a3)((uint64_t)&v12, v11);
            v11 -= 12;
          }
          while ((result & 1) != 0);
          *(void *)(v11 + 24) = v12;
          *(_DWORD *)(v11 + 32) = v13;
        }
        uint64_t v7 = v6 + 12;
        v9 += 12;
      }
      while (v6 + 12 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    int v13 = *((_DWORD *)a2 + 2);
    uint64_t v14 = *a2;
    int v15 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_DWORD *)a3 + 2) = v13;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    int v16 = *((_DWORD *)a1 + 2);
    uint64_t v17 = *a1;
    int v18 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!result)
  {
    int v19 = *((_DWORD *)a1 + 2);
    uint64_t v20 = *a1;
    int v21 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_DWORD *)a2 + 2) = v19;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    int v22 = *((_DWORD *)a2 + 2);
    uint64_t v23 = *a2;
    int v24 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_DWORD *)a3 + 2) = v22;
    return 2;
  }
  int v10 = *((_DWORD *)a1 + 2);
  uint64_t v11 = *a1;
  int v12 = *((_DWORD *)a3 + 2);
  *a1 = *a3;
  *((_DWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_DWORD *)a3 + 2) = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::learner::LambdaRankObj::ListEntry *,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4 = a2;
  uint64_t v16 = *a1;
  int v17 = *((_DWORD *)a1 + 2);
  if ((*a3)(&v16, (uint64_t *)((char *)a2 - 12)))
  {
    uint64_t v6 = a1;
    do
      uint64_t v6 = (uint64_t *)((char *)v6 + 12);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (uint64_t *)((char *)a1 + 12);
    do
    {
      uint64_t v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v16, v7);
      uint64_t v7 = (uint64_t *)((char *)v6 + 12);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      uint64_t v4 = (uint64_t *)((char *)v4 - 12);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    int v19 = *((_DWORD *)v6 + 2);
    uint64_t v18 = v9;
    uint64_t v10 = *v4;
    *((_DWORD *)v6 + 2) = *((_DWORD *)v4 + 2);
    *uint64_t v6 = v10;
    uint64_t v11 = v18;
    *((_DWORD *)v4 + 2) = v19;
    *uint64_t v4 = v11;
    do
      uint64_t v6 = (uint64_t *)((char *)v6 + 12);
    while (!(*a3)(&v16, v6));
    do
      uint64_t v4 = (uint64_t *)((char *)v4 - 12);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  int v12 = (uint64_t *)((char *)v6 - 12);
  if ((uint64_t *)((char *)v6 - 12) != a1)
  {
    uint64_t v13 = *v12;
    *((_DWORD *)a1 + 2) = *((_DWORD *)v6 - 1);
    *a1 = v13;
  }
  uint64_t v14 = v16;
  *((_DWORD *)v6 - 1) = v17;
  *int v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::learner::LambdaRankObj::ListEntry *,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(char *, uint64_t *))
{
  uint64_t v6 = 0;
  uint64_t v17 = *a1;
  int v18 = *((_DWORD *)a1 + 2);
  do
    v6 += 12;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  unint64_t v7 = (unint64_t)a1 + v6;
  uint64_t v8 = (uint64_t)a1 + v6 - 12;
  if (v6 == 12)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 12;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 12;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    uint64_t v9 = (uint64_t *)((char *)a1 + v6);
    unint64_t v10 = a2;
    do
    {
      uint64_t v19 = *v9;
      uint64_t v11 = v19;
      int v20 = *((_DWORD *)v9 + 2);
      int v12 = v20;
      int v13 = *(_DWORD *)(v10 + 8);
      uint64_t *v9 = *(void *)v10;
      *((_DWORD *)v9 + 2) = v13;
      *(_DWORD *)(v10 + 8) = v12;
      *(void *)unint64_t v10 = v11;
      do
        uint64_t v9 = (uint64_t *)((char *)v9 + 12);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 12;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    uint64_t v8 = (uint64_t)v9 - 12;
  }
  if ((uint64_t *)v8 != a1)
  {
    uint64_t v14 = *(void *)v8;
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v8 + 8);
    *a1 = v14;
  }
  uint64_t v15 = v17;
  *(_DWORD *)(v8 + 8) = v18;
  *(void *)uint64_t v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (uint64_t *)(a2 - 12);
      if ((*a3)((uint64_t *)(a2 - 12), (uint64_t *)a1))
      {
        int v9 = *(_DWORD *)(a1 + 8);
        uint64_t v10 = *(void *)a1;
        int v11 = *(_DWORD *)(a2 - 4);
        *(void *)a1 = *v8;
        *(_DWORD *)(a1 + 8) = v11;
        uint64_t *v8 = v10;
        *(_DWORD *)(a2 - 4) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a1 + 12, a1 + 24, a2 - 12, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a1 + 12, a1 + 24, a1 + 36, a2 - 12, a3);
      return 1;
    default:
      int v12 = (uint64_t *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), a3);
      uint64_t v13 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v13, v12))
    {
      uint64_t v19 = *(void *)v13;
      int v20 = *(_DWORD *)(v13 + 8);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(void *)(v17 + 36) = *(void *)(a1 + v16 + 24);
        *(_DWORD *)(v17 + 44) = *(_DWORD *)(a1 + v16 + 32);
        if (v16 == -24) {
          break;
        }
        v16 -= 12;
        if (((*a3)(&v19, (uint64_t *)(v17 + 12)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 36;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(void *)uint64_t v18 = v19;
      *(_DWORD *)(v18 + 8) = v20;
      if (++v15 == 8) {
        return v13 + 12 == a2;
      }
    }
    int v12 = (uint64_t *)v13;
    v14 += 12;
    v13 += 12;
    if (v13 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  uint64_t result = (*a5)((uint64_t *)a4, (uint64_t *)a3);
  if (result)
  {
    int v11 = *(_DWORD *)(a3 + 8);
    uint64_t v12 = *(void *)a3;
    int v13 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *(_DWORD *)(a3 + 8) = v13;
    *(void *)a4 = v12;
    *(_DWORD *)(a4 + 8) = v11;
    uint64_t result = (*a5)((uint64_t *)a3, (uint64_t *)a2);
    if (result)
    {
      int v14 = *(_DWORD *)(a2 + 8);
      uint64_t v15 = *(void *)a2;
      int v16 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(_DWORD *)(a2 + 8) = v16;
      *(void *)a3 = v15;
      *(_DWORD *)(a3 + 8) = v14;
      uint64_t result = (*a5)((uint64_t *)a2, (uint64_t *)a1);
      if (result)
      {
        int v17 = *(_DWORD *)(a1 + 8);
        uint64_t v18 = *(void *)a1;
        int v19 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v19;
        *(void *)a2 = v18;
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)((uint64_t *)a5, (uint64_t *)a4);
  if (result)
  {
    int v13 = *(_DWORD *)(a4 + 8);
    uint64_t v14 = *(void *)a4;
    int v15 = *(_DWORD *)(a5 + 8);
    *(void *)a4 = *(void *)a5;
    *(_DWORD *)(a4 + 8) = v15;
    *(void *)a5 = v14;
    *(_DWORD *)(a5 + 8) = v13;
    uint64_t result = (*a6)((uint64_t *)a4, (uint64_t *)a3);
    if (result)
    {
      int v16 = *(_DWORD *)(a3 + 8);
      uint64_t v17 = *(void *)a3;
      int v18 = *(_DWORD *)(a4 + 8);
      *(void *)a3 = *(void *)a4;
      *(_DWORD *)(a3 + 8) = v18;
      *(void *)a4 = v17;
      *(_DWORD *)(a4 + 8) = v16;
      uint64_t result = (*a6)((uint64_t *)a3, (uint64_t *)a2);
      if (result)
      {
        int v19 = *(_DWORD *)(a2 + 8);
        uint64_t v20 = *(void *)a2;
        int v21 = *(_DWORD *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *(_DWORD *)(a2 + 8) = v21;
        *(void *)a3 = v20;
        *(_DWORD *)(a3 + 8) = v19;
        uint64_t result = (*a6)((uint64_t *)a2, (uint64_t *)a1);
        if (result)
        {
          int v22 = *(_DWORD *)(a1 + 8);
          uint64_t v23 = *(void *)a1;
          int v24 = *(_DWORD *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(_DWORD *)(a1 + 8) = v24;
          *(void *)a2 = v23;
          *(_DWORD *)(a2 + 8) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(a1 + 12 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a4, v9, v12);
        uint64_t v12 = (uint64_t *)((char *)v12 - 12);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if ((*a4)((uint64_t)v14, a1))
        {
          int v15 = *((_DWORD *)v14 + 2);
          uint64_t v16 = *v14;
          int v17 = *(_DWORD *)(a1 + 8);
          *uint64_t v14 = *(void *)a1;
          *((_DWORD *)v14 + 2) = v17;
          *(void *)a1 = v16;
          *(_DWORD *)(a1 + 8) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a4, v9, (uint64_t *)a1);
        }
        uint64_t v14 = (uint64_t *)((char *)v14 + 12);
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 < 13)
    {
      return v13;
    }
    else
    {
      uint64_t v28 = v13;
      int64_t v18 = v8 / 0xCuLL;
      do
      {
        uint64_t v29 = v6;
        uint64_t v19 = 0;
        uint64_t v30 = *(void *)a1;
        int v31 = *(_DWORD *)(a1 + 8);
        uint64_t v20 = a1;
        do
        {
          uint64_t v21 = v20 + 12 * v19 + 12;
          uint64_t v22 = (2 * v19) | 1;
          uint64_t v23 = 2 * v19 + 2;
          if (v23 < v18 && (*a4)(v20 + 12 * v19 + 12, v20 + 12 * v19 + 24))
          {
            v21 += 12;
            uint64_t v22 = v23;
          }
          uint64_t v24 = *(void *)v21;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v21 + 8);
          *(void *)uint64_t v20 = v24;
          uint64_t v20 = v21;
          uint64_t v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        uint64_t v6 = (uint64_t *)((char *)v29 - 12);
        if ((uint64_t *)v21 == (uint64_t *)((char *)v29 - 12))
        {
          *(_DWORD *)(v21 + 8) = v31;
          *(void *)uint64_t v21 = v30;
        }
        else
        {
          uint64_t v25 = *v6;
          *(_DWORD *)(v21 + 8) = *((_DWORD *)v29 - 1);
          *(void *)uint64_t v21 = v25;
          *uint64_t v6 = v30;
          *((_DWORD *)v29 - 1) = v31;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, v21 + 12, (uint64_t (**)(uint64_t, uint64_t))a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 12 - a1) >> 2));
        }
      }
      while (v18-- > 2);
      return v28;
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v8 = result;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v13 = result + 12 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
      if (v14 < a3 && (*a2)(result + 12 * v12, v13 + 12))
      {
        v13 += 12;
        uint64_t v12 = v14;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t *))*a2)(v13, v7);
      if ((result & 1) == 0)
      {
        uint64_t v20 = *v7;
        int v21 = *((_DWORD *)v7 + 2);
        do
        {
          uint64_t v15 = v13;
          uint64_t v16 = *(void *)v13;
          *((_DWORD *)v7 + 2) = *(_DWORD *)(v13 + 8);
          uint64_t *v7 = v16;
          if (v9 < v12) {
            break;
          }
          uint64_t v17 = (2 * v12) | 1;
          uint64_t v13 = v8 + 12 * v17;
          uint64_t v18 = 2 * v12 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 12 * v17, v13 + 12))
            {
              v13 += 12;
              uint64_t v17 = v18;
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t *))*a2)(v13, &v20);
          unint64_t v7 = (uint64_t *)v15;
          uint64_t v12 = v17;
        }
        while (!result);
        uint64_t v19 = v20;
        *(_DWORD *)(v15 + 8) = v21;
        *(void *)uint64_t v15 = v19;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = result + 12 * (v6 >> 1);
    unint64_t v11 = (uint64_t *)(a2 - 12);
    uint64_t result = (*a3)(v10, a2 - 12);
    if (result)
    {
      uint64_t v14 = *v11;
      int v15 = *((_DWORD *)v11 + 2);
      do
      {
        uint64_t v12 = v10;
        uint64_t v13 = *(void *)v10;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v10 + 8);
        uint64_t *v11 = v13;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = v8 + 12 * v9;
        uint64_t result = (*a3)(v10, (uint64_t)&v14);
        unint64_t v11 = (uint64_t *)v12;
      }
      while ((result & 1) != 0);
      *(void *)uint64_t v12 = v14;
      *(_DWORD *)(v12 + 8) = v15;
    }
  }
  return result;
}

void xgboost_old::learner::LambdaRankObjNDCG::GetLambdaWeight(uint64_t a1, void *a2, void *a3)
{
  std::vector<float>::vector(&v38, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v5 = v38;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    unint64_t v7 = v6 / 12;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    uint64_t v8 = (int *)(*a2 + 4);
    unint64_t v9 = v38;
    do
    {
      int v10 = *v8;
      v8 += 3;
      *(_DWORD *)v9++ = v10;
      --v7;
    }
    while (v7);
  }
  unint64_t v11 = 126 - 2 * __clz(v39 - v5);
  if (v39 == v5) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v5, v39, (uint64_t)&v40, v12, 1);
  uint64_t v13 = v38;
  int64_t v14 = (char *)v39 - (char *)v38;
  if (v39 == v38)
  {
    if (v39)
    {
      float v39 = v38;
      operator delete(v38);
    }
  }
  else
  {
    uint64_t v15 = 0;
    if ((unint64_t)(v14 >> 2) <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v14 >> 2;
    }
    double v17 = 0.0;
    do
    {
      unsigned int v18 = v13[v15];
      if (v18) {
        double v17 = v17 + (float)((float)~(-1 << v18) / logf((float)(unint64_t)(v15 + 2)));
      }
      ++v15;
    }
    while (v16 != v15);
    float v19 = v17;
    float v39 = v13;
    operator delete(v13);
    if (v19 != 0.0)
    {
      uint64_t v20 = *a3;
      uint64_t v21 = a3[1] - *a3;
      if (v21)
      {
        float v22 = 1.0 / v19;
        unint64_t v23 = v21 / 12;
        uint64_t v24 = *a2;
        if (v23 <= 1) {
          uint64_t v25 = 1;
        }
        else {
          uint64_t v25 = v23;
        }
        BOOL v26 = (float *)(v20 + 8);
        do
        {
          unsigned int v27 = *((_DWORD *)v26 - 2);
          unsigned int v28 = *((_DWORD *)v26 - 1);
          float v29 = 1.0 / logf((float)v27 + 2.0);
          float v30 = logf((float)v28 + 2.0);
          float v31 = (float)~(-1 << (int)*(float *)(v24 + 12 * v27 + 4));
          float v32 = (float)~(-1 << (int)*(float *)(v24 + 12 * v28 + 4));
          float v33 = v22
              * (float)((float)((float)((float)(1.0 / v30) * v32) + (float)(v31 * v29))
                      - (float)((float)((float)(1.0 / v30) * v31) + (float)(v32 * v29)));
          float v34 = -v33;
          if (v33 >= 0.0) {
            float v34 = v33;
          }
          *BOOL v26 = v34;
          v26 += 3;
          --v25;
        }
        while (v25);
      }
      return;
    }
  }
  uint64_t v35 = a3[1] - *a3;
  if (v35)
  {
    unint64_t v36 = v35 / 12;
    if (v36 <= 1) {
      unint64_t v36 = 1;
    }
    uint64_t v37 = (_DWORD *)(*a3 + 8);
    do
    {
      *uint64_t v37 = 0;
      v37 += 3;
      --v36;
    }
    while (v36);
  }
}

void sub_2244FE320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float *std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v22 = *(a2 - 1);
          float v23 = *v11;
          if (v22 > *v11)
          {
            float *v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          float v24 = v11[1];
          float v25 = *(a2 - 1);
          if (v24 <= v25) {
            int v26 = *((_DWORD *)a2 - 1);
          }
          else {
            int v26 = *((_DWORD *)v11 + 1);
          }
          if (v24 > v25) {
            float v24 = *(a2 - 1);
          }
          *(a2 - 1) = v24;
          *((_DWORD *)v11 + 1) = v26;
          float v27 = *(a2 - 1);
          if (v27 <= *v11) {
            float v28 = *v11;
          }
          else {
            float v28 = *(a2 - 1);
          }
          if (v27 > *v11) {
            float v27 = *v11;
          }
          *(a2 - 1) = v27;
          int v30 = *(_DWORD *)v11;
          float v29 = v11[1];
          if (v28 <= v29)
          {
            int v30 = *((_DWORD *)v11 + 1);
            float v29 = v28;
          }
          *(_DWORD *)unint64_t v11 = v30;
          v11[1] = v29;
          break;
        case 4uLL:
          float v32 = v11[1];
          float v31 = v11[2];
          if (*v11 <= v31) {
            int v33 = *((_DWORD *)v11 + 2);
          }
          else {
            int v33 = *(_DWORD *)v11;
          }
          if (*v11 <= v31) {
            float v31 = *v11;
          }
          v11[2] = v31;
          *(_DWORD *)unint64_t v11 = v33;
          float v34 = *(a2 - 1);
          if (v32 <= v34) {
            float v35 = *(a2 - 1);
          }
          else {
            float v35 = v32;
          }
          if (v32 <= v34) {
            float v34 = v32;
          }
          *(a2 - 1) = v34;
          float v36 = *v11;
          if (*v11 <= v35) {
            float v37 = v35;
          }
          else {
            float v37 = *v11;
          }
          if (*v11 > v35) {
            float v36 = v35;
          }
          float *v11 = v37;
          v11[1] = v36;
          float v38 = v11[2];
          float v39 = *(a2 - 1);
          if (v38 <= v39) {
            float v40 = *(a2 - 1);
          }
          else {
            float v40 = v11[2];
          }
          if (v38 > v39) {
            float v38 = *(a2 - 1);
          }
          *(a2 - 1) = v38;
          float v41 = v11[1];
          if (v41 <= v40) {
            float v42 = v40;
          }
          else {
            float v42 = v11[1];
          }
          if (v41 > v40) {
            float v41 = v40;
          }
          v11[1] = v42;
          v11[2] = v41;
          break;
        case 5uLL:
          int v43 = *(_DWORD *)v11;
          float v44 = v11[1];
          if (*v11 <= v44) {
            int v45 = *((_DWORD *)v11 + 1);
          }
          else {
            int v45 = *(_DWORD *)v11;
          }
          if (*v11 > v44) {
            int v43 = *((_DWORD *)v11 + 1);
          }
          *(_DWORD *)unint64_t v11 = v45;
          *((_DWORD *)v11 + 1) = v43;
          float v46 = v11[3];
          float v47 = *(a2 - 1);
          if (v46 <= v47) {
            int v48 = *((_DWORD *)a2 - 1);
          }
          else {
            int v48 = *((_DWORD *)v11 + 3);
          }
          if (v46 > v47) {
            float v46 = *(a2 - 1);
          }
          *(a2 - 1) = v46;
          *((_DWORD *)v11 + 3) = v48;
          float v49 = *(a2 - 1);
          float v50 = v11[2];
          if (v49 <= v50) {
            float v51 = v11[2];
          }
          else {
            float v51 = *(a2 - 1);
          }
          if (v49 > v50) {
            float v49 = v11[2];
          }
          *(a2 - 1) = v49;
          int v53 = *((_DWORD *)v11 + 2);
          float v52 = v11[3];
          float v54 = v11[1];
          if (v51 <= v52)
          {
            int v53 = *((_DWORD *)v11 + 3);
            float v52 = v51;
          }
          *((_DWORD *)v11 + 2) = v53;
          uint64_t v11[3] = v52;
          float v55 = *(a2 - 1);
          if (v54 <= v55) {
            float v56 = *(a2 - 1);
          }
          else {
            float v56 = v54;
          }
          if (v54 <= v55) {
            float v55 = v54;
          }
          *(a2 - 1) = v55;
          int v57 = *(_DWORD *)v11;
          float v59 = v11[2];
          float v58 = v11[3];
          if (v58 <= *v11) {
            float v60 = *v11;
          }
          else {
            float v60 = v11[3];
          }
          if (v58 > *v11) {
            float v58 = *v11;
          }
          if (v60 <= v59)
          {
            int v57 = *((_DWORD *)v11 + 2);
            float v59 = v60;
          }
          if (v58 <= v56) {
            float v61 = v56;
          }
          else {
            float v61 = v58;
          }
          if (v58 > v56) {
            float v58 = v56;
          }
          if (v61 <= v59) {
            float v56 = v59;
          }
          *(_DWORD *)unint64_t v11 = v57;
          v11[1] = v56;
          if (v61 <= v59) {
            float v62 = v61;
          }
          else {
            float v62 = v59;
          }
          v11[2] = v62;
          uint64_t v11[3] = v58;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v17 - 1, v17, &v11[v16 + 1]);
      float v18 = *v11;
      float *v11 = *v17;
      *double v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= *v11)
    {
      uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v11, a2);
      unint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    float v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v11, v19);
    unint64_t v11 = v19 + 1;
    uint64_t result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  int v63 = v11 + 1;
  BOOL v65 = v11 == a2 || v63 == a2;
  if (a5)
  {
    if (!v65)
    {
      uint64_t v66 = 0;
      unsigned int v67 = v11;
      do
      {
        float v69 = *v67;
        float v68 = v67[1];
        unsigned int v67 = v63;
        if (v68 > v69)
        {
          uint64_t v70 = v66;
          while (1)
          {
            *(float *)((char *)v11 + v70 + 4) = v69;
            if (!v70) {
              break;
            }
            float v69 = *(float *)((char *)v11 + v70 - 4);
            v70 -= 4;
            if (v68 <= v69)
            {
              long long v71 = (float *)((char *)v11 + v70 + 4);
              goto LABEL_119;
            }
          }
          long long v71 = v11;
LABEL_119:
          *long long v71 = v68;
        }
        int v63 = v67 + 1;
        v66 += 4;
      }
      while (v67 + 1 != a2);
    }
  }
  else if (!v65)
  {
    do
    {
      float v73 = *v10;
      float v72 = v10[1];
      int v10 = v63;
      if (v72 > v73)
      {
        uint64_t v74 = v63;
        do
        {
          float *v74 = v73;
          float v73 = *(v74 - 2);
          --v74;
        }
        while (v72 > v73);
        float *v74 = v72;
      }
      ++v63;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 <= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  float v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    float v5 = a1 + 1;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      float v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    float v7 = *v3;
    float v8 = *a2;
    do
    {
      float *v3 = v8;
      *a2 = v7;
      do
      {
        float v9 = v3[1];
        ++v3;
        float v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        float v10 = *--a2;
        float v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  float v3 = *a1;
  do
    float v4 = a1[++v2];
  while (v4 > v3);
  float v5 = &a1[v2];
  float v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      float v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    float v9 = *a2;
    float v10 = &a1[v2];
    unint64_t v11 = a2;
    do
    {
      *float v10 = v9;
      float *v11 = v4;
      do
      {
        float v12 = v10[1];
        ++v10;
        float v4 = v12;
      }
      while (v12 > v3);
      do
      {
        float v13 = *--v11;
        float v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    float v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  *float v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2)
{
  BOOL v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      float v3 = *(a2 - 1);
      float v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      float v20 = a1[1];
      float v21 = *(a2 - 1);
      if (v20 <= v21) {
        int v22 = *((_DWORD *)a2 - 1);
      }
      else {
        int v22 = *((_DWORD *)a1 + 1);
      }
      if (v20 > v21) {
        float v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      float v23 = *(a2 - 1);
      if (v23 <= *a1) {
        float v24 = *a1;
      }
      else {
        float v24 = *(a2 - 1);
      }
      if (v23 > *a1) {
        float v23 = *a1;
      }
      *(a2 - 1) = v23;
      float v26 = *a1;
      float v25 = a1[1];
      if (v24 <= v25)
      {
        float v26 = a1[1];
        float v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      float v48 = a1[1];
      float v47 = a1[2];
      if (*a1 <= v47) {
        float v49 = a1[2];
      }
      else {
        float v49 = *a1;
      }
      if (*a1 <= v47) {
        float v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      float v50 = *(a2 - 1);
      if (v48 <= v50) {
        float v51 = *(a2 - 1);
      }
      else {
        float v51 = v48;
      }
      if (v48 <= v50) {
        float v50 = v48;
      }
      *(a2 - 1) = v50;
      float v52 = *a1;
      if (*a1 <= v51) {
        float v53 = v51;
      }
      else {
        float v53 = *a1;
      }
      if (*a1 > v51) {
        float v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      float v54 = a1[2];
      float v55 = *(a2 - 1);
      if (v54 <= v55) {
        float v56 = *(a2 - 1);
      }
      else {
        float v56 = a1[2];
      }
      if (v54 > v55) {
        float v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      float v57 = a1[1];
      if (v57 <= v56) {
        float v58 = v56;
      }
      else {
        float v58 = a1[1];
      }
      if (v57 > v56) {
        float v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      float v27 = *a1;
      float v28 = a1[1];
      if (*a1 <= v28) {
        float v29 = a1[1];
      }
      else {
        float v29 = *a1;
      }
      if (*a1 > v28) {
        float v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      float v30 = a1[3];
      float v31 = *(a2 - 1);
      if (v30 <= v31) {
        int v32 = *((_DWORD *)a2 - 1);
      }
      else {
        int v32 = *((_DWORD *)a1 + 3);
      }
      if (v30 > v31) {
        float v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      float v33 = *(a2 - 1);
      float v34 = a1[2];
      if (v33 <= v34) {
        float v35 = a1[2];
      }
      else {
        float v35 = *(a2 - 1);
      }
      if (v33 > v34) {
        float v33 = a1[2];
      }
      *(a2 - 1) = v33;
      int v37 = *((_DWORD *)a1 + 2);
      float v36 = a1[3];
      float v38 = a1[1];
      if (v35 <= v36)
      {
        int v37 = *((_DWORD *)a1 + 3);
        float v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      float v39 = *(a2 - 1);
      if (v38 <= v39) {
        float v40 = *(a2 - 1);
      }
      else {
        float v40 = v38;
      }
      if (v38 <= v39) {
        float v39 = v38;
      }
      *(a2 - 1) = v39;
      float v41 = *a1;
      float v43 = a1[2];
      float v42 = a1[3];
      if (v42 <= *a1) {
        float v44 = *a1;
      }
      else {
        float v44 = a1[3];
      }
      if (v42 > *a1) {
        float v42 = *a1;
      }
      if (v44 <= v43)
      {
        float v41 = a1[2];
        float v43 = v44;
      }
      if (v42 <= v40) {
        float v45 = v40;
      }
      else {
        float v45 = v42;
      }
      if (v42 > v40) {
        float v42 = v40;
      }
      if (v45 <= v43) {
        float v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43) {
        float v46 = v45;
      }
      else {
        float v46 = v43;
      }
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      float v5 = a1 + 2;
      float v6 = a1[2];
      float v8 = *a1;
      float v7 = a1[1];
      if (v7 <= v6) {
        float v9 = a1[2];
      }
      else {
        float v9 = a1[1];
      }
      if (v7 <= v6) {
        float v6 = a1[1];
      }
      if (v6 <= v8) {
        float v10 = *a1;
      }
      else {
        float v10 = v6;
      }
      if (v6 > v8) {
        float v6 = *a1;
      }
      *float v5 = v6;
      if (v10 <= v9) {
        float v11 = v9;
      }
      else {
        float v11 = v8;
      }
      if (v10 > v9) {
        float v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      float v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        BOOL v2 = 1;
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = 12;
        while (1)
        {
          float v15 = *v12;
          float v16 = *v5;
          if (*v12 > *v5)
          {
            uint64_t v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              uint64_t v18 = v17 - 4;
              if (v17 == 4) {
                break;
              }
              float v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                float v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            float v19 = a1;
LABEL_27:
            *float v19 = v15;
            if (++v13 == 8) {
              break;
            }
          }
          float v5 = v12;
          v14 += 4;
          if (++v12 == a2) {
            goto LABEL_29;
          }
        }
        BOOL v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    float v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      float v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        float v15 = *v14;
        if (*v14 > *a1)
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0;
        float v18 = *a1;
        float v19 = a1;
        do
        {
          float v20 = v19;
          v19 += v17 + 1;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            uint64_t v17 = v22;
          }
          *float v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *float v19 = *v6;
          *float v6 = v18;
          uint64_t v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5) {
            continue;
          }
          unint64_t v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          float v25 = &a1[v24];
          float v26 = *v25;
          float v18 = *v19;
          if (*v25 <= *v19) {
            continue;
          }
          do
          {
            *float v19 = v26;
            float v19 = v25;
            if (!v24) {
              break;
            }
            unint64_t v24 = (v24 - 1) >> 1;
            float v25 = &a1[v24];
            float v26 = *v25;
          }
          while (*v25 > v18);
        }
        *float v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (float *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        uint64_t v7 = v9;
      }
      float v10 = *v8;
      float v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v12 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 4 * v7);
          uint64_t v13 = v12 + 2;
          if (v13 < a3 && *v8 > v8[1])
          {
            ++v8;
            uint64_t v7 = v13;
          }
          float v10 = *v8;
        }
        while (*v8 <= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

void xgboost_old::learner::LambdaRankObjMAP::GetLambdaWeight(uint64_t a1, uint64_t *a2, void *a3)
{
  std::string __p = 0;
  float v34 = 0;
  uint64_t v35 = 0;
  std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    uint64_t v8 = v7 / 12;
    uint64_t v9 = (char *)__p;
    if ((unint64_t)(v8 + 1) > 2) {
      uint64_t v10 = v8 + 1;
    }
    else {
      uint64_t v10 = 2;
    }
    float v11 = (float *)(v6 + 4);
    float32x2_t v12 = 0;
    float v13 = 0.0;
    unint64_t v14 = 1;
    int32x2_t v15 = 0;
    do
    {
      if (*v11 > 0.0)
      {
        *(float *)v15.i32 = *(float *)v15.i32 + 1.0;
        v5.f32[0] = (float)v14;
        float v13 = v13 + (float)(*(float *)v15.i32 / (float)v14);
        float32x2_t v5 = vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32(v15, 0), (float32x2_t)0x3F800000BF800000), (float32x2_t)vdup_lane_s32((int32x2_t)v5, 0));
        float32x2_t v12 = vadd_f32(v12, v5);
      }
      *(float *)uint64_t v9 = v13;
      *(float32x2_t *)(v9 + 4) = v12;
      *((_DWORD *)v9 + 3) = v15.i32[0];
      ++v14;
      v9 += 16;
      v11 += 3;
    }
    while (v10 != v14);
  }
  uint64_t v16 = a3[1] - *a3;
  if (v16)
  {
    unint64_t v17 = v16 / 12;
    float v18 = (float *)__p;
    float v19 = (float *)(v34 - 4);
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    float v20 = (float *)(*a3 + 8);
    do
    {
      int v21 = *((_DWORD *)v20 - 2);
      int v22 = *((_DWORD *)v20 - 1);
      float v23 = 0.0;
      if (v21 != v22 && *v19 != 0.0)
      {
        if (v21 >= v22) {
          int v24 = *((_DWORD *)v20 - 1);
        }
        else {
          int v24 = *((_DWORD *)v20 - 2);
        }
        if (v21 <= v22) {
          int v21 = *((_DWORD *)v20 - 1);
        }
        float v25 = v18[4 * v21];
        if (v24) {
          float v25 = v25 - v18[4 * v24 - 4];
        }
        float v23 = 0.0;
        if (*(float *)(v6 + 12 * v24 + 4) <= 0.0) {
          float v26 = 0.0;
        }
        else {
          float v26 = 1.0;
        }
        if (*(float *)(v6 + 12 * v21 + 4) <= 0.0) {
          float v27 = 0.0;
        }
        else {
          float v27 = 1.0;
        }
        if (v26 != v27)
        {
          uint64_t v28 = v21 - 1;
          if (v26 >= v27)
          {
            float v30 = v18[4 * v28 + 1] - v18[4 * v24 + 1];
            float v31 = v18[4 * v21 + 3];
            int v24 = v21;
          }
          else
          {
            float v29 = &v18[4 * v24];
            float v30 = v18[4 * v28 + 2] - v29[2];
            float v31 = v29[3] + 1.0;
          }
          float v32 = (float)((float)((float)(v30 + 0.0) + (float)(v31 / (float)(v24 + 1))) - v25) / *v19;
          if (v32 >= 0.0) {
            float v23 = (float)((float)((float)(v30 + 0.0) + (float)(v31 / (float)(v24 + 1))) - v25) / *v19;
          }
          else {
            float v23 = -v32;
          }
        }
      }
      *float v20 = v23;
      v20 += 3;
      --v17;
    }
    while (v17);
  }
  if (__p)
  {
    float v34 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2244FF14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<std::pair<std::string,turi::fileio::file_status>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100]((void *)a1, v12);
    float v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    int32x2_t v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*,0>(__str, v15, v9);
    float v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(v8, (long long *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*,0>(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_2244FF2A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2244FF2A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::function<void ()(std::vector<turi::flexible_type> const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<void ()(std::vector<turi::flexible_type> &&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<void ()(turi::sframe_rows const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  uint64_t v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    float v3 = result;
    uint64_t v4 = (void *)result[3];
    float32x2_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2244FF66C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::swap[abi:ne180100](void *result, void *a2)
{
  uint64_t v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    float v3 = result;
    uint64_t v4 = (void *)result[3];
    float32x2_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2244FF8D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(turi::sframe_rows const&)>::swap[abi:ne180100](void *result, void *a2)
{
  uint64_t v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    float v3 = result;
    uint64_t v4 = (void *)result[3];
    float32x2_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2244FFB44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

std::string *turi::supervised::xgboost::metric_tracker::metric_tracker(std::string *this, long long **a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[1].__r_.__value_.__l.__size_;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[2].__r_.__value_.__l.__size_;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = (std::vector<std::string> *)&this[3];
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  turi::supervised::supervised_learning_model_base::get_tracking_metrics(a2, &v22);
  std::vector<std::string>::__vdeallocate(v4);
  this[3] = v22;
  memset(&v22, 0, sizeof(v22));
  *(void *)&long long v21 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  std::string::pointer data = this[3].__r_.__value_.__l.__data_;
  for (std::string::size_type i = this[3].__r_.__value_.__l.__size_; data != (std::string::pointer)i; data += 24)
  {
    if (data[23] < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)data, *((void *)data + 1));
    }
    else
    {
      long long v7 = *(_OWORD *)data;
      v20.__r_.__value_.__r.__words[2] = *((void *)data + 2);
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
    }
    unint64_t v8 = turi::supervised::xgboost::xgboost_model::num_classes((turi::supervised::xgboost::xgboost_model *)a2);
    ((void (*)(long long *__return_ptr, std::string *, unint64_t))turi::supervised::xgboost::get_fast_evaluator)(&v21, &v20, v8);
    std::string::size_type size = (_OWORD *)this->__r_.__value_.__l.__size_;
    unint64_t v9 = this->__r_.__value_.__r.__words[2];
    if ((unint64_t)size >= v9)
    {
      uint64_t v12 = (uint64_t)((uint64_t)size - this->__r_.__value_.__r.__words[0]) >> 4;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - this->__r_.__value_.__r.__words[0];
      uint64_t v14 = v13 >> 3;
      if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      int v24 = &this->__r_.__value_.__s.__data_[16];
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&this->__r_.__value_.__r.__words[2], v15);
      uint64_t v17 = &v16[16 * v12];
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      v22.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
      float v23 = &v16[16 * v18];
      *(_OWORD *)uint64_t v17 = v21;
      long long v21 = 0uLL;
      v22.__r_.__value_.__r.__words[2] = (std::string::size_type)(v17 + 16);
      std::vector<std::shared_ptr<xgboost_old::learner::IEvaluator>>::__swap_out_circular_buffer((uint64_t *)this, &v22);
      uint64_t v11 = (_OWORD *)this->__r_.__value_.__l.__size_;
      std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&v22.__r_.__value_.__l.__data_);
    }
    else
    {
      *std::string::size_type size = v21;
      uint64_t v11 = size + 1;
      this->__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    }
    this->__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  return this;
}

void sub_2244FFD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v21, *(char **)(v20 + 56));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a10, *(char **)(v20 + 32));
  a18 = v20;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<xgboost_old::learner::IEvaluator>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<xgboost_old::learner::IEvaluator>>,std::reverse_iterator<std::shared_ptr<xgboost_old::learner::IEvaluator>*>,std::reverse_iterator<std::shared_ptr<xgboost_old::learner::IEvaluator>*>,std::reverse_iterator<std::shared_ptr<xgboost_old::learner::IEvaluator>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<xgboost_old::learner::IEvaluator>>,std::reverse_iterator<std::shared_ptr<xgboost_old::learner::IEvaluator>*>,std::reverse_iterator<std::shared_ptr<xgboost_old::learner::IEvaluator>*>,std::reverse_iterator<std::shared_ptr<xgboost_old::learner::IEvaluator>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost_old::learner::IEvaluator>>,std::reverse_iterator<std::shared_ptr<xgboost_old::learner::IEvaluator>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<xgboost_old::learner::IEvaluator>>,std::reverse_iterator<std::shared_ptr<xgboost_old::learner::IEvaluator>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

turi::thread_pool *xgboost_old::learner::BoostLearner::PredictRaw(float *a1, uint64_t a2, void *a3, uint64_t a4, float a5)
{
  float v24 = a5;
  uint64_t v10 = *((void *)a1 + 26);
  uint64_t v11 = (**(uint64_t (***)(uint64_t))a2)(a2);
  uint64_t v12 = *((void *)a1 + 43);
  uint64_t v13 = *((void *)a1 + 44) - v12;
  if (v13)
  {
    uint64_t v14 = v13 / 24;
    if ((unint64_t)(v13 / 24) <= 1) {
      uint64_t v14 = 1;
    }
    long long v15 = (uint64_t *)(v12 + 8);
    while (1)
    {
      BOOL v16 = *(v15 - 1) == a2 && *(void *)(a2 + 176) == (void)a1;
      if (v16 && v15[1] == *(void *)(a2 + 16)) {
        break;
      }
      v15 += 3;
      if (!--v14) {
        goto LABEL_12;
      }
    }
    uint64_t v17 = *v15;
  }
  else
  {
LABEL_12:
    uint64_t v17 = -1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(void *)v10 + 64))(v10, v11, v17, a2 + 16, a3, a4);
  unint64_t v19 = ((a3[1] - *a3) >> 2);
  if (a5 != 1.0)
  {
    std::string v22 = a3;
    float v23 = &v24;
    turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(0, v19, (uint64_t)&v22);
  }
  uint64_t v20 = *(void *)(a2 + 160) - *(void *)(a2 + 152);
  if (v20)
  {
    xgboost_old::utils::Check(a3[1] - *a3 == v20, "base_margin.size does not match with prediction size", v18);
    std::string v22 = a3;
    float v23 = (float *)a2;
    return turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(0, v19, (uint64_t)&v22);
  }
  else
  {
    std::string v22 = a3;
    float v23 = a1;
    return turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(0, v19, (uint64_t)&v22);
  }
}

turi::thread_pool *turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v13 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v13);
    double v14 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v15 = (unint64_t)((double)(unint64_t)a1 + v14 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v15 = a2;
    }
    void v16[2] = (unint64_t)((double)(unint64_t)a1 + v14 * (double)0);
    void v16[3] = v15;
    v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v16[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v17, v16);
  }
  unint64_t v10 = a2 - (void)a1;
  if (a2 > (unint64_t)a1)
  {
    uint64_t v11 = *(float **)(a3 + 8);
    uint64_t v12 = (float *)(**(void **)a3 + 4 * (void)a1);
    do
    {
      *uint64_t v12 = *v11 * *v12;
      ++v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_2245001FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    double v14 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v18, v14);
    double v15 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v16 = (unint64_t)((double)(unint64_t)a1 + v15 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v16 = a2;
    }
    v17[2] = (unint64_t)((double)(unint64_t)a1 + v15 * (double)0);
    v17[3] = v16;
    v17[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2})::stored_vtable
           + 1;
    v17[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v18, v17);
  }
  unint64_t v10 = a2 - (void)a1;
  if (a2 > (unint64_t)a1)
  {
    uint64_t v11 = (float *)(*(void *)(*(void *)(a3 + 8) + 152) + 4 * (void)a1);
    uint64_t v12 = (float *)(**(void **)a3 + 4 * (void)a1);
    do
    {
      float v13 = *v11++;
      *uint64_t v12 = v13 + *v12;
      ++v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_224500390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    float v13 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v13);
    double v14 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v15 = (unint64_t)((double)(unint64_t)a1 + v14 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v15 = a2;
    }
    void v16[2] = (unint64_t)((double)(unint64_t)a1 + v14 * (double)0);
    void v16[3] = v15;
    v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>(xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3})::stored_vtable
           + 1;
    v16[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v17, v16);
  }
  unint64_t v10 = a2 - (void)a1;
  if (a2 > (unint64_t)a1)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = (float *)(**(void **)a3 + 4 * (void)a1);
    do
    {
      *uint64_t v12 = *(float *)(v11 + 72) + *v12;
      ++v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_22450051C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710F60 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x8000000224710F60 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *a1)
{
  unint64_t v2 = a1[1];
  unint64_t v1 = a1[2];
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    long long v5 = *(float **)(*a1 + 8);
    uint64_t v6 = (float *)(**(void **)*a1 + 4 * v2);
    do
    {
      float result = *v5 * *v6;
      *v6++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      float result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710FF5 & 0x7FFFFFFFFFFFFFFFLL)
        || (float result = strcmp((const char *)result, (const char *)(0x8000000224710FF5 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(void *a1)
{
  unint64_t v2 = a1[1];
  unint64_t v1 = a1[2];
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    long long v5 = (float *)(**(void **)*a1 + 4 * v2);
    uint64_t v6 = (float *)(*(void *)(*(void *)(*a1 + 8) + 152) + 4 * v2);
    do
    {
      float v7 = *v6++;
      float result = v7 + *v5;
      *v5++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      float result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000022471108BLL & 0x7FFFFFFFFFFFFFFFLL)
        || (float result = strcmp((const char *)result, (const char *)(0x800000022471108BLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3} const&)::{lambda(void)#1},void>::invoke(void *a1)
{
  unint64_t v2 = a1[1];
  unint64_t v1 = a1[2];
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    uint64_t v5 = *(void *)(*a1 + 8);
    uint64_t v6 = (float *)(**(void **)*a1 + 4 * v2);
    do
    {
      float result = *(float *)(v5 + 72) + *v6;
      *v6++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long>&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__find_equal<std::pair<std::string,unsigned long>>((uint64_t)a1, &v12, a2);
  float v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    float v7 = operator new(0x48uLL);
    BOOL v9 = *a4;
    long long v10 = **a4;
    v7[6] = *((void *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)BOOL v9 = 0;
    v7[7] = *((void *)v9 + 3);
    *((_DWORD *)v7 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__find_equal<std::pair<std::string,unsigned long>>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        BOOL v9 = (const void **)(v4 + 32);
        if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))break; {
        uint64_t v4 = *v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v5 = *((char *)a3 + 23);
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *a2;
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  if (v5 >= 0) {
    long long v10 = a3;
  }
  else {
    long long v10 = *a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  return !v16 && a2[3] < a3[3];
}

uint64_t std::map<std::pair<std::string,unsigned long>,float>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__find_equal<std::pair<std::string,unsigned long>>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 64;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__count_unique<std::pair<std::string,unsigned long>>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

__n128 std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  *(void *)unint64_t v8 = *(void *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v8 + 8) = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA) + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<std::string>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    size_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      size_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    float v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    size_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0xFF0uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_224500EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *turi::supervised::xgboost::early_stopping_checkpointer::get_model_at_iteration@<X0>(void *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = this[1];
  if (this[2] == v3) {
    goto LABEL_12;
  }
  unint64_t v4 = this[4];
  uint64_t v5 = (void *)(v3 + 8 * (v4 / 0xAA));
  uint64_t v6 = (void *)(*v5 + 24 * (v4 % 0xAA));
  unint64_t v7 = this[5] + v4;
  unint64_t v8 = v7 / 0xAA;
  unint64_t v9 = v7 % 0xAA;
  unint64_t v10 = *(void *)(v3 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  if (v6 != (void *)v10)
  {
    while (*v6 != a2)
    {
      v6 += 3;
      if ((void *)((char *)v6 - *v5) == (void *)4080)
      {
        uint64_t v11 = (void *)v5[1];
        ++v5;
        uint64_t v6 = v11;
      }
      if (v6 == (void *)v10)
      {
        uint64_t v6 = (void *)v10;
        break;
      }
    }
  }
  if (v6 == (void *)(*(void *)(v3 + 8 * v8) + 24 * v9))
  {
LABEL_12:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "Cannot find model at given iteration";
    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
  }
  uint64_t v12 = v6[2];
  *a3 = v6[1];
  a3[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t turi::supervised::xgboost::ArcStreamOutAdapter::Read(turi::supervised::xgboost::ArcStreamOutAdapter *this, void *a2, const char *a3)
{
  return 0;
}

void *turi::supervised::xgboost::ArcStreamOutAdapter::Write(turi::supervised::xgboost::ArcStreamOutAdapter *this, const void *__src, size_t __n)
{
  uint64_t v5 = *((void *)this + 1);
  if (*(void *)v5)
  {
    return (void *)std::ostream::write();
  }
  else
  {
    size_t v7 = *(void *)(v5 + 40);
    if (*(void *)(v5 + 32) + __n > v7)
    {
      size_t v9 = 2 * (v7 + __n);
      *(void *)(v5 + 40) = v9;
      unint64_t v10 = *(char ***)(v5 + 16);
      if (v10)
      {
        unint64_t v8 = *v10;
        size_t v11 = v10[1] - *v10;
        BOOL v12 = v9 >= v11;
        std::vector<char>::size_type v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*(std::vector<char> **)(v5 + 16), v13);
          unint64_t v8 = **(char ***)(v5 + 16);
        }
        else if (!v12)
        {
          v10[1] = &v8[v9];
        }
      }
      else
      {
        unint64_t v8 = (char *)malloc_type_realloc(*(void **)(v5 + 24), v9, 0xF6EA6B1uLL);
      }
      *(void *)(v5 + 24) = v8;
    }
    else
    {
      unint64_t v8 = *(char **)(v5 + 24);
    }
    __n128 result = memcpy(&v8[*(void *)(v5 + 32)], __src, __n);
    *(void *)(v5 + 32) += __n;
  }
  return result;
}

uint64_t turi::supervised::xgboost::ArcStreamInAdapter::Read(turi::supervised::xgboost::ArcStreamInAdapter *this, void *__dst, size_t __n)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    memcpy(__dst, (const void *)(v5 + *(void *)(v4 + 24)), __n);
    *(void *)(v4 + 24) += __n;
  }
  else
  {
    std::istream::read();
  }
  return 1;
}

uint64_t turi::supervised::xgboost::ArcStreamInAdapter::Write(turi::supervised::xgboost::ArcStreamInAdapter *this, const void *a2, const char *a3)
{
  return xgboost_old::utils::Assert(0, "ArcStreamInAdapter: write not implemented", a3);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  unint64_t v2 = operator new(0x188uLL);
  __n128 result = _ZNSt3__120__shared_ptr_emplaceIN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_2245011E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D784B10;
  xgboost_old::learner::BoostLearner::BoostLearner((xgboost_old::learner::BoostLearner *)(a1 + 3));
  return a1;
}

void sub_22450123C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost_old::learner::BoostLearner>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::BoostLearner>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::BoostLearner>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalLogLoss>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalLogLoss>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::EvalLogLoss>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalMultiLogLoss>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalMultiLogLoss>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::EvalMultiLogLoss>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalAuc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalAuc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::EvalAuc>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalError>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalError>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalError>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

float turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalError>::Eval(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  return 1.0 - xgboost_old::learner::EvalEWiseBase<xgboost_old::learner::EvalError>::Eval(a1, a2, a3, a4);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalMatchError>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalMatchError>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalMatchError>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

float turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalMatchError>::Eval(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  return 1.0 - xgboost_old::learner::EvalMClassBase<xgboost_old::learner::EvalMatchError>::Eval(a1, a2, a3, a4);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalRMSE>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalRMSE>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::EvalRMSE>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::EvalMaxError>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::EvalMaxError>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::EvalMaxError>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

float turi::supervised::xgboost::EvalMaxError::Eval(turi::thread *a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = *(void *)(a3 + 72) - *(void *)(a3 + 64);
  unint64_t v8 = turi::thread::cpu_count(a1);
  LODWORD(v15[0]) = 0;
  std::vector<float>::vector(&__p, v8, v15);
  v15[0] = a3;
  v15[1] = a2;
  v15[2] = &__p;
  turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(0, (v7 >> 2), v15);
  size_t v9 = __p;
  float v10 = *(float *)__p;
  if (__p != v17)
  {
    size_t v11 = (float *)__p;
    do
    {
      float v12 = *v11++;
      float v13 = v12;
      if (v10 < v12) {
        float v10 = v13;
      }
    }
    while (v11 != v17);
  }
  *(float *)uint64_t v15 = v10;
  if (a4)
  {
    rabit::engine::Allreduce_((uint64_t)v15, 4, 1, (uint64_t)rabit::op::Reducer<rabit::op::Max,float>, 6, 0, 0, 0);
    float v10 = *(float *)v15;
    size_t v9 = __p;
  }
  if (v9)
  {
    uint64_t v17 = v9;
    operator delete(v9);
  }
  return v10;
}

void sub_22450186C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *turi::supervised::xgboost::EvalMaxError::Name(turi::supervised::xgboost::EvalMaxError *this)
{
  return "max_error";
}

turi::thread_pool *turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v21 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  __n128 result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v16 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v16);
    double v17 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v18 = (unint64_t)((double)v5 + v17 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v18 = a2;
    }
    v19[2] = (unint64_t)((double)v5 + v17 * (double)0);
    void v19[3] = v18;
    v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v19[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v20, v19);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v10 = *(void *)(*a3 + 112);
      if (*(void *)(*a3 + 120) == v10) {
        float v11 = 1.0;
      }
      else {
        float v11 = *(float *)(v10 + 4 * v5);
      }
      float v12 = (void *)a3[2];
      float v13 = v11 * vabds_f32(*(float *)(*(void *)(*a3 + 64) + 4 * v5), *(float *)(*(void *)a3[1] + 4 * v5));
      tls_std::string::pointer data = (turi::thread *)turi::thread::get_tls_data(result);
      if (v13 < *(float *)(*v12 + 4 * *(void *)tls_data)) {
        float v13 = *(float *)(*v12 + 4 * *(void *)tls_data);
      }
      uint64_t v15 = (void *)a3[2];
      __n128 result = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      *(float *)(*v15 + 4 * *(void *)result) = v13;
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_224501A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224716792 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x8000000224716792 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

turi::thread *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(turi::thread *result)
{
  unint64_t v1 = *((void *)result + 1);
  if (v1 < *((void *)result + 2))
  {
    unint64_t v2 = result;
    do
    {
      uint64_t v3 = *(void **)v2;
      uint64_t v4 = **(void ***)v2;
      uint64_t v5 = v4[14];
      if (v4[15] == v5) {
        float v6 = 1.0;
      }
      else {
        float v6 = *(float *)(v5 + 4 * v1);
      }
      unint64_t v7 = (void *)v3[2];
      float v8 = v6 * vabds_f32(*(float *)(v4[8] + 4 * v1), *(float *)(*(void *)v3[1] + 4 * v1));
      tls_std::string::pointer data = (turi::thread *)turi::thread::get_tls_data(result);
      if (v8 < *(float *)(*v7 + 4 * *(void *)tls_data)) {
        float v8 = *(float *)(*v7 + 4 * *(void *)tls_data);
      }
      uint64_t v10 = (void *)v3[2];
      __n128 result = (turi::thread *)turi::thread::get_tls_data(tls_data);
      *(float *)(*v10 + 4 * *(void *)result) = v8;
      ++v1;
    }
    while (v1 < *((void *)v2 + 2));
  }
  return result;
}

turi::thread_pool *turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  unint64_t v9 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
  double v8 = (double)(unint64_t)((a2 - a1) >> 2) / (double)v9;
  v7[0] = &v11;
  v7[1] = (uint64_t *)&v8;
  void v7[2] = (uint64_t *)&v9;
  v7[3] = &v10;
  void v7[4] = a3;
  return turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(0, v9, v7);
}

turi::thread_pool *turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  __n128 result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    void v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    uint64_t v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<float const*> const&)::{lambda(void)#1}>(std::__wrap_iter<float const*>)::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      __n128 result = (turi::thread_pool *)turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_224501DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  v27[4] = *MEMORY[0x263EF8340];
  double v3 = *(double *)a1[1];
  uint64_t v4 = **a1;
  if (*a1[2] - 1 == a2) {
    unint64_t v5 = (float *)*a1[3];
  }
  else {
    unint64_t v5 = (float *)(v4 + 4 * (uint64_t)(v3 * (double)(a2 + 1)));
  }
  (*(void (**)(void *__return_ptr))(*a1[4] + 32))(v24);
  for (std::string::size_type i = (float *)(v4 + 4 * (uint64_t)(v3 * (double)a2)); i != v5; ++i)
  {
    int v22 = 0;
    char v23 = 1;
    double v21 = *i;
    if (!v26) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, double *))(*(void *)v26 + 48))(v26, &v21);
    switch(v23)
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v7 = v21;
          if (v21 != 0.0)
          {
            if (*(char *)(*(void *)&v21 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v21 + 8));
            }
            double v8 = v7;
            uint64_t v9 = 0x1012C404EF22A49;
            goto LABEL_37;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v16 = v21;
          if (v21 != 0.0)
          {
            double v17 = *(void **)(*(void *)&v21 + 8);
            if (v17)
            {
              *(void *)(*(void *)&v21 + 16) = v17;
              operator delete(v17);
            }
            double v8 = v16;
            uint64_t v9 = 0x1080C409938AC02;
            goto LABEL_37;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v10 = v21;
          if (v21 != 0.0)
          {
            int64_t v20 = (void **)(*(void *)&v21 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
            goto LABEL_32;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v10 = v21;
          if (v21 != 0.0)
          {
            int64_t v20 = (void **)(*(void *)&v21 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v20);
LABEL_32:
            double v8 = v10;
            uint64_t v9 = 0x1020C405E66F15BLL;
            goto LABEL_37;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v18 = v21;
          if (v21 != 0.0)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v21 + 16));
            double v8 = v18;
            unsigned int v15 = -235920773;
            goto LABEL_36;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v11 = v21;
          if (v21 != 0.0)
          {
            unint64_t v12 = *(void **)(*(void *)&v21 + 48);
            if (v12)
            {
              *(void *)(*(void *)&v21 + 56) = v12;
              operator delete(v12);
            }
            float v13 = *(void **)(*(void *)&v11 + 24);
            if (v13)
            {
              *(void *)(*(void *)&v11 + 32) = v13;
              operator delete(v13);
            }
            BOOL v14 = *(std::__shared_weak_count **)(*(void *)&v11 + 16);
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            double v8 = v11;
            unsigned int v15 = 2071181815;
LABEL_36:
            uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_37:
            MEMORY[0x22A614FA0](*(void *)&v8, v9);
          }
        }
        break;
      default:
        continue;
    }
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v25);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v24);
}

void sub_22450211C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, char a14, char a15)
{
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<float const*> const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224716834 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x8000000224716834 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<float const*> const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    unint64_t v2 = result;
    do
      __n128 result = (uint64_t ***)turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2245024FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2245026FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2245028FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16v"
                                        "ectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_"
                                        "metadataEEEE3$_5EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16vectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_metadataEEEE3$_5EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

double boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5 const&)::{lambda(void)#1},void>::invoke(uint64_t ***a1, double result)
{
  unint64_t v2 = (unint64_t)a1[1];
  unint64_t v3 = (unint64_t)a1[2];
  if (v2 < v3)
  {
    uint64_t v4 = ***a1;
    uint64_t v5 = *(*a1)[3];
    unint64_t v6 = *(void *)*(*a1)[2];
    uint64_t v7 = *(*a1)[1];
    do
    {
      double v8 = (float *)(v5 + 4 * v2 * v4);
      if (v6 >= 2)
      {
        uint64_t v9 = v8 + 1;
        float v10 = *v8;
        uint64_t v11 = 4 * v6 - 4;
        unint64_t v12 = v8 + 1;
        do
        {
          float v13 = *v12++;
          float v14 = v13;
          if (v10 < v13)
          {
            float v10 = v14;
            double v8 = v9;
          }
          uint64_t v9 = v12;
          v11 -= 4;
        }
        while (v11);
      }
      __n128 result = *v8;
      *(double *)(v7 + 8 * v2++) = result;
    }
    while (v2 != v3);
  }
  return result;
}

turi::thread_pool *turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  unint64_t v9 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
  double v8 = (double)(unint64_t)((a2 - a1) >> 3) / (double)v9;
  v7[0] = &v11;
  v7[1] = (uint64_t *)&v8;
  void v7[2] = (uint64_t *)&v9;
  v7[3] = &v10;
  void v7[4] = a3;
  return turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(0, v9, v7);
}

turi::thread_pool *turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  __n128 result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    void v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    uint64_t v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<double *> const&)::{lambda(void)#1}>(std::__wrap_iter<double *>)::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      __n128 result = (turi::thread_pool *)turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_224502D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  v27[4] = *MEMORY[0x263EF8340];
  double v3 = *(double *)a1[1];
  uint64_t v4 = **a1;
  if (*a1[2] - 1 == a2) {
    unint64_t v5 = (atomic_ullong **)*a1[3];
  }
  else {
    unint64_t v5 = (atomic_ullong **)(v4 + 8 * (uint64_t)(v3 * (double)(a2 + 1)));
  }
  (*(void (**)(void *__return_ptr))(*a1[4] + 32))(v24);
  for (std::string::size_type i = (atomic_ullong **)(v4 + 8 * (uint64_t)(v3 * (double)a2)); i != v5; ++i)
  {
    int v22 = 0;
    char v23 = 1;
    double v21 = *i;
    if (!v26) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v26 + 48))(v26, &v21);
    switch(v23)
    {
      case 2:
        if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v7 = v21;
          if (v21)
          {
            if (*((char *)v21 + 31) < 0) {
              operator delete((void *)v21[1]);
            }
            double v8 = v7;
            uint64_t v9 = 0x1012C404EF22A49;
            goto LABEL_37;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v16 = v21;
          if (v21)
          {
            double v17 = (void *)v21[1];
            if (v17)
            {
              void v21[2] = (atomic_ullong)v17;
              operator delete(v17);
            }
            double v8 = v16;
            uint64_t v9 = 0x1080C409938AC02;
            goto LABEL_37;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v10 = v21;
          if (v21)
          {
            int64_t v20 = (void **)(v21 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
            goto LABEL_32;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v10 = v21;
          if (v21)
          {
            int64_t v20 = (void **)(v21 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v20);
LABEL_32:
            double v8 = v10;
            uint64_t v9 = 0x1020C405E66F15BLL;
            goto LABEL_37;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v18 = v21;
          if (v21)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
            double v8 = v18;
            unsigned int v15 = -235920773;
            goto LABEL_36;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v11 = v21;
          if (v21)
          {
            unint64_t v12 = (void *)v21[6];
            if (v12)
            {
              v21[7] = (atomic_ullong)v12;
              operator delete(v12);
            }
            float v13 = (void *)v11[3];
            if (v13)
            {
              v11[4] = (atomic_ullong)v13;
              operator delete(v13);
            }
            float v14 = (std::__shared_weak_count *)v11[2];
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            double v8 = v11;
            unsigned int v15 = 2071181815;
LABEL_36:
            uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_37:
            MEMORY[0x22A614FA0](v8, v9);
          }
        }
        break;
      default:
        continue;
    }
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v25);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v24);
}

void sub_224503078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, char a14, char a15)
{
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<double *> const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002247169A3 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002247169A3 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<double *> const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    unint64_t v2 = result;
    do
      __n128 result = (uint64_t ***)turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16v"
                                        "ectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_"
                                        "metadataEEEE3$_7EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16vectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_metadataEEEE3$_7EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7 const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = **(void **)(*result + 24);
    double v3 = **(void ***)(*result + 16);
    uint64_t v4 = *(void **)*result;
    uint64_t v5 = **(void **)(*result + 8);
    do
    {
      unint64_t v6 = (float *)(v2 + 4 * *v4 * v1);
      if (*v3 >= 2uLL)
      {
        double v8 = v6 + 1;
        float v9 = *v6;
        uint64_t v10 = 4 * *v3 - 4;
        uint64_t v7 = (float *)(v2 + 4 * *v4 * v1);
        double v11 = v6 + 1;
        do
        {
          float v12 = *v11++;
          float v13 = v12;
          if (v9 < v12)
          {
            float v9 = v13;
            uint64_t v7 = v8;
          }
          double v8 = v11;
          v10 -= 4;
        }
        while (v10);
      }
      else
      {
        uint64_t v7 = (float *)(v2 + 4 * *v4 * v1);
      }
      *(void *)(v5 + 8 * v1++) = v7 - v6;
    }
    while (v1 < result[2]);
  }
  return result;
}

void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224503590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9::operator()(void **a1, uint64_t a2)
{
  uint64_t v19[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(*(void *)**a1 + 32))(v17);
  uint64_t v4 = *a1[1];
  unint64_t v5 = *a1[2];
  unint64_t v6 = *a1[3];
  *(void *)double v16 = 0;
  std::vector<double>::vector(__p, v6, v16);
  uint64_t v7 = *a1[3];
  unint64_t v8 = v7 * (v4 * a2 / v5);
  if (v8 != v7 * ((v4 + v4 * a2) / v5))
  {
    uint64_t v9 = *a1[4] + 4 * v8;
    if (v7)
    {
      uint64_t v10 = (double *)__p[0];
      uint64_t v11 = 4 * v7;
      float v12 = (float *)v9;
      do
      {
        float v13 = *v12++;
        *v10++ = v13;
        v11 -= 4;
      }
      while (v11);
    }
    *(void *)&void v16[5] = 0x300000000000000;
    *(void *)double v16 = 0;
    operator new();
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v19);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v18);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v17);
}

void sub_224503DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, __int16 a16, uint64_t a17)
{
  MEMORY[0x22A614FA0](v17, 0x1012C404EF22A49);
  switch(a15)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = a13;
        if (a13)
        {
          if (*(char *)(a13 + 31) < 0) {
            operator delete(*(void **)(a13 + 8));
          }
          MEMORY[0x22A614FA0](v19, 0x1012C404EF22A49);
        }
      }
      goto LABEL_25;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) == 1) {
        turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9::operator()(&a13);
      }
      goto LABEL_25;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_25;
      }
      uint64_t v20 = a13;
      if (!a13) {
        goto LABEL_24;
      }
      a12 = a13 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_25;
      }
      uint64_t v20 = a13;
      if (!a13) {
        goto LABEL_24;
      }
      a12 = a13 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_18:
      double v21 = (void *)v20;
      uint64_t v23 = 0x1020C405E66F15BLL;
      goto LABEL_23;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_25;
      }
      uint64_t v24 = a13;
      if (!a13) {
        goto LABEL_24;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a13 + 16));
      double v21 = (void *)v24;
      unsigned int v22 = -235920773;
      goto LABEL_22;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_25;
      }
      if (!a13) {
        goto LABEL_24;
      }
      double v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a13);
      unsigned int v22 = 2071181815;
LABEL_22:
      uint64_t v23 = v22 | 0x1030C4000000000;
LABEL_23:
      MEMORY[0x22A614FA0](v21, v23);
LABEL_24:
      a13 = 0;
LABEL_25:
      if (__p) {
        operator delete(__p);
      }
      turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a17);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_25;
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16v"
                                        "ectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_"
                                        "metadataEEEE3$_9EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16vectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_metadataEEEE3$_9EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9 const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
      __n128 result = turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9::operator()((void **)*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void *turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator()(uint64_t a1, unint64_t a2)
{
  v99[4] = *MEMORY[0x263EF8340];
  turi::sframe::get_output_iterator(*(size_t **)a1, a2, (uint64_t)v96);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v5 = **(void **)(a1 + 16);
  std::vector<turi::flexible_type>::vector(v94, 3uLL);
  std::vector<int>::vector(&v93, **(void **)(a1 + 24));
  std::vector<float>::vector(__p, 2uLL);
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v90 = (v4 + v4 * a2) / v5;
  if (v6 < v90)
  {
    do
    {
      std::vector<int>::pointer begin = v93.__begin_;
      std::vector<int>::pointer end = v93.__end_;
      if (v93.__begin_ != v93.__end_)
      {
        int v9 = 0;
        std::vector<int>::pointer v10 = v93.__begin_;
        do
          *v10++ = v9++;
        while (v10 != end);
      }
      uint64_t v91 = 0;
      uint64_t v11 = *(void **)(a1 + 32);
      unint64_t v12 = **(void **)(a1 + 40) * v6;
      float v13 = *(void **)(a1 + 24);
      uint64_t v91 = *v11 + 4 * v12;
      if (*v13 == 2)
      {
        float v14 = *(float *)(*v11 + 4 * v12);
        unsigned int v15 = (float *)__p[0];
        *((float *)__p[0] + 1) = v14;
        float v16 = 1.0 - v14;
        if (**(unsigned char **)(a1 + 48) == 5) {
          float v16 = 0.0;
        }
        *unsigned int v15 = v16;
        uint64_t v91 = (uint64_t)v15;
      }
      uint64_t v17 = **(void **)(a1 + 56);
      uint64_t v95 = &v91;
      if (v17)
      {
        if (v17 >= 2)
        {
          unint64_t v18 = (unint64_t)(v17 - 2) >> 1;
          unint64_t v19 = v18 + 1;
          uint64_t v20 = &begin[v18];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator() const(unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v95, v17, v20--);
            --v19;
          }
          while (v19);
        }
        double v21 = &begin[v17];
        if (v21 != end)
        {
          std::vector<int>::pointer v22 = &begin[v17];
          do
          {
            uint64_t v23 = *v22;
            uint64_t v24 = *begin;
            if (*(float *)(v91 + 4 * v23) > *(float *)(v91 + 4 * v24))
            {
              void *v22 = v24;
              long long *begin = v23;
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator() const(unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v95, v17, begin);
            }
            ++v22;
          }
          while (v22 != end);
        }
        if (v17 >= 2)
        {
          uint64_t v25 = v17 & 0x3FFFFFFFFFFFFFFFLL;
          do
          {
            uint64_t v26 = 0;
            int v27 = *begin;
            uint64_t v28 = v95;
            std::vector<int>::pointer v29 = begin;
            do
            {
              std::vector<int>::pointer v30 = v29;
              v29 += v26 + 1;
              uint64_t v31 = 2 * v26;
              uint64_t v26 = (2 * v26) | 1;
              uint64_t v32 = v31 + 2;
              if (v32 < v25 && *(float *)(*v28 + 4 * *v29) > *(float *)(*v28 + 4 * v29[1]))
              {
                ++v29;
                uint64_t v26 = v32;
              }
              *std::vector<int>::pointer v30 = *v29;
            }
            while (v26 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
            if (v29 == --v21)
            {
              *std::vector<int>::pointer v29 = v27;
            }
            else
            {
              *std::vector<int>::pointer v29 = *v21;
              int *v21 = v27;
              uint64_t v33 = (char *)v29 - (char *)begin + 4;
              if (v33 >= 5)
              {
                unint64_t v34 = (((unint64_t)v33 >> 2) - 2) >> 1;
                uint64_t v35 = &begin[v34];
                uint64_t v36 = *v35;
                uint64_t v37 = *v29;
                uint64_t v38 = *v28;
                float v39 = *(float *)(v38 + 4 * v37);
                if (*(float *)(v38 + 4 * v36) > v39)
                {
                  do
                  {
                    uint64_t v40 = v35;
                    *std::vector<int>::pointer v29 = v36;
                    if (!v34) {
                      break;
                    }
                    unint64_t v34 = (v34 - 1) >> 1;
                    uint64_t v35 = &begin[v34];
                    uint64_t v36 = *v35;
                    std::vector<int>::pointer v29 = v40;
                  }
                  while (*(float *)(v38 + 4 * v36) > v39);
                  *uint64_t v40 = v37;
                }
              }
            }
            BOOL v41 = v25-- <= 2;
          }
          while (!v41);
        }
      }
      if (**(void **)(a1 + 56))
      {
        unint64_t v42 = 0;
        do
        {
          uint64_t v43 = v93.__begin_[v42];
          float v44 = *(float *)(v91 + 4 * v43);
          uint64_t v45 = v94[0];
          switch(*(unsigned char *)(v94[0] + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v94[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v46 = *(atomic_uint ***)v45;
                if (!*(void *)v45) {
                  goto LABEL_68;
                }
                if (*((char *)v46 + 31) < 0) {
                  operator delete(v46[1]);
                }
                uint64_t v47 = v46;
                uint64_t v48 = 0x1012C404EF22A49;
                goto LABEL_67;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v94[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                long long v55 = *(atomic_uint ***)v45;
                if (!*(void *)v45) {
                  goto LABEL_68;
                }
                float v56 = v55[1];
                if (v56)
                {
                  v55[2] = v56;
                  operator delete(v56);
                }
                uint64_t v47 = v55;
                uint64_t v48 = 0x1080C409938AC02;
                goto LABEL_67;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v94[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v49 = *(atomic_uint ***)v45;
                if (!*(void *)v45) {
                  goto LABEL_68;
                }
                uint64_t v95 = (uint64_t *)(v49 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                goto LABEL_62;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v94[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v49 = *(atomic_uint ***)v45;
                if (!*(void *)v45) {
                  goto LABEL_68;
                }
                uint64_t v95 = (uint64_t *)(v49 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
LABEL_62:
                uint64_t v47 = v49;
                uint64_t v48 = 0x1020C405E66F15BLL;
                goto LABEL_67;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v94[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                float v57 = *(atomic_uint ***)v45;
                if (!*(void *)v45) {
                  goto LABEL_68;
                }
                boost::detail::shared_count::~shared_count(v57 + 2);
                uint64_t v47 = v57;
                unsigned int v54 = -235920773;
                goto LABEL_66;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v94[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v50 = *(atomic_uint ***)v45;
                if (*(void *)v45)
                {
                  float v51 = v50[6];
                  if (v51)
                  {
                    v50[7] = v51;
                    operator delete(v51);
                  }
                  uint64_t v52 = v50[3];
                  if (v52)
                  {
                    v50[4] = v52;
                    operator delete(v52);
                  }
                  float v53 = (std::__shared_weak_count *)v50[2];
                  if (v53) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
                  }
                  uint64_t v47 = v50;
                  unsigned int v54 = 2071181815;
LABEL_66:
                  uint64_t v48 = v54 | 0x1030C4000000000;
LABEL_67:
                  MEMORY[0x22A614FA0](v47, v48);
                }
LABEL_68:
                *(void *)uint64_t v45 = 0;
              }
              break;
            default:
              break;
          }
          *(_DWORD *)(v45 + 8) = 0;
          *(unsigned char *)(v45 + 12) = 0;
          *(void *)uint64_t v45 = v6;
          uint64_t v58 = *(void *)(**(void **)(a1 + 64) + 80) + 16 * v43;
          uint64_t v59 = v94[0];
          uint64_t v60 = v94[0] + 16;
          if (v58 != v94[0] + 16)
          {
            switch(*(unsigned char *)(v94[0] + 28))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v60, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v61 = *(atomic_ullong *volatile *)v60;
                  if (!*(void *)v60) {
                    goto LABEL_102;
                  }
                  if (*((char *)v61 + 31) < 0) {
                    operator delete((void *)v61[1]);
                  }
                  atomic_ullong *volatile v62 = v61;
                  uint64_t v63 = 0x1012C404EF22A49;
                  goto LABEL_101;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v60, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v70 = *(atomic_ullong *volatile *)v60;
                  if (!*(void *)v60) {
                    goto LABEL_102;
                  }
                  long long v71 = (void *)v70[1];
                  if (v71)
                  {
                    void v70[2] = (atomic_ullong)v71;
                    operator delete(v71);
                  }
                  atomic_ullong *volatile v62 = v70;
                  uint64_t v63 = 0x1080C409938AC02;
                  goto LABEL_101;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v60, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v64 = *(atomic_ullong *volatile *)v60;
                  if (!*(void *)v60) {
                    goto LABEL_102;
                  }
                  uint64_t v95 = v64 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                  goto LABEL_96;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v60, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v64 = *(atomic_ullong *volatile *)v60;
                  if (!*(void *)v60) {
                    goto LABEL_102;
                  }
                  uint64_t v95 = v64 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
LABEL_96:
                  atomic_ullong *volatile v62 = v64;
                  uint64_t v63 = 0x1020C405E66F15BLL;
                  goto LABEL_101;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v60, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)v60;
                  if (!*(void *)v60) {
                    goto LABEL_102;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v72 + 2);
                  atomic_ullong *volatile v62 = v72;
                  unsigned int v69 = -235920773;
                  goto LABEL_100;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v60, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v65 = *(atomic_ullong *volatile *)v60;
                  if (*(void *)v60)
                  {
                    uint64_t v66 = (void *)v65[6];
                    if (v66)
                    {
                      v65[7] = (atomic_ullong)v66;
                      operator delete(v66);
                    }
                    unsigned int v67 = (void *)v65[3];
                    if (v67)
                    {
                      v65[4] = (atomic_ullong)v67;
                      operator delete(v67);
                    }
                    float v68 = (std::__shared_weak_count *)v65[2];
                    if (v68) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v68);
                    }
                    atomic_ullong *volatile v62 = v65;
                    unsigned int v69 = 2071181815;
LABEL_100:
                    uint64_t v63 = v69 | 0x1030C4000000000;
LABEL_101:
                    MEMORY[0x22A614FA0](v62, v63);
                  }
LABEL_102:
                  *(void *)uint64_t v60 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v73 = *(void *)v58;
            *(void *)(v60 + 5) = *(void *)(v58 + 5);
            *(void *)uint64_t v60 = v73;
            LODWORD(v73) = *(unsigned __int8 *)(v58 + 12);
            *(unsigned char *)(v59 + 28) = v73;
            BOOL v41 = v73 > 9;
            int v74 = (1 << v73) & 0x33C;
            if (!v41 && v74 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v60, 1uLL);
            }
          }
          if (**(unsigned char **)(a1 + 48) == 6) {
            float v44 = (float)v42;
          }
          uint64_t v76 = v94[0];
          switch(*(unsigned char *)(v94[0] + 44))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v94[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v77 = *(void *)(v76 + 32);
                if (!v77) {
                  goto LABEL_142;
                }
                if (*(char *)(v77 + 31) < 0) {
                  operator delete(*(void **)(v77 + 8));
                }
                uint64_t v78 = (void *)v77;
                uint64_t v79 = 0x1012C404EF22A49;
                goto LABEL_141;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v94[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                long long v86 = *(void **)(v76 + 32);
                if (!v86) {
                  goto LABEL_142;
                }
                unsigned int v87 = (void *)v86[1];
                if (v87)
                {
                  v86[2] = v87;
                  operator delete(v87);
                }
                uint64_t v78 = v86;
                uint64_t v79 = 0x1080C409938AC02;
                goto LABEL_141;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v94[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v80 = *(void **)(v76 + 32);
                if (!v80) {
                  goto LABEL_142;
                }
                uint64_t v95 = v80 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                goto LABEL_136;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v94[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v80 = *(void **)(v76 + 32);
                if (!v80) {
                  goto LABEL_142;
                }
                uint64_t v95 = v80 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
LABEL_136:
                uint64_t v78 = v80;
                uint64_t v79 = 0x1020C405E66F15BLL;
                goto LABEL_141;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v94[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v88 = *(void *)(v76 + 32);
                if (!v88) {
                  goto LABEL_142;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)(v88 + 16));
                uint64_t v78 = (void *)v88;
                unsigned int v85 = -235920773;
                goto LABEL_140;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v94[0] + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                double v81 = *(void **)(v76 + 32);
                if (v81)
                {
                  float v82 = (void *)v81[6];
                  if (v82)
                  {
                    v81[7] = v82;
                    operator delete(v82);
                  }
                  uint64_t v83 = (void *)v81[3];
                  if (v83)
                  {
                    v81[4] = v83;
                    operator delete(v83);
                  }
                  unint64_t v84 = (std::__shared_weak_count *)v81[2];
                  if (v84) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
                  }
                  uint64_t v78 = v81;
                  unsigned int v85 = 2071181815;
LABEL_140:
                  uint64_t v79 = v85 | 0x1030C4000000000;
LABEL_141:
                  MEMORY[0x22A614FA0](v78, v79);
                }
LABEL_142:
                *(void *)(v76 + 32) = 0;
              }
              break;
            default:
              break;
          }
          *(_DWORD *)(v76 + 40) = 0;
          *(unsigned char *)(v76 + 44) = 1;
          *(double *)(v76 + 32) = v44;
          if (!v97) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *))(*(void *)v97 + 48))(v97, v94);
          ++v42;
        }
        while (v42 < **(void **)(a1 + 56));
      }
      ++v6;
    }
    while (v6 != v90);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v93.__begin_)
  {
    v93.__end_ = v93.__begin_;
    operator delete(v93.__begin_);
  }
  v93.__begin_ = (std::vector<int>::pointer)v94;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v99);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v98);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v96);
}

void sub_224504C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char *__p, char *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
  {
    a15 = __p;
    operator delete(__p);
  }
  std::string __p = &a17;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a21);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_224504D5C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator() const(unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t **a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 | 1;
      uint64_t v7 = (int *)(result + 4 * (v5 | 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = **a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      float v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6) {
            break;
          }
          uint64_t v13 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (int *)(result + 4 * v6);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v14;
          }
          uint64_t v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost25transform_prediction_topkERKNSt3"
                                        "__16vectorIfNS3_9allocatorIfEEEERKNS3_12basic_stringIcNS3_11char_traitsIcEENS5_I"
                                        "cEEEEmmNS3_10shared_ptrINS_11ml_metadataEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost25transform_prediction_topkERKNSt3__16vectorIfNS3_9allocatorIfEEEERKNS3_12basic_stringIcNS3_11char_traitsIcEENS5_IcEEEEmmNS3_10shared_ptrINS_11ml_metadataEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
      __n128 result = turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::shared_ptr<xgboost_old::learner::BoostLearner>::shared_ptr[abi:ne180100]<xgboost_old::learner::BoostLearner,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224504FA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<xgboost_old::learner::BoostLearner>::shared_ptr[abi:ne180100]<xgboost_old::learner::BoostLearner,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<xgboost_old::learner::BoostLearner *,std::shared_ptr<xgboost_old::learner::BoostLearner>::__shared_ptr_default_delete<xgboost_old::learner::BoostLearner,xgboost_old::learner::BoostLearner>,std::allocator<xgboost_old::learner::BoostLearner>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost_old::learner::BoostLearner *,std::shared_ptr<xgboost_old::learner::BoostLearner>::__shared_ptr_default_delete<xgboost_old::learner::BoostLearner,xgboost_old::learner::BoostLearner>,std::allocator<xgboost_old::learner::BoostLearner>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::allocate_shared[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,std::allocator<turi::supervised::xgboost::DMatrixMLData>,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xE8uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::__shared_ptr_emplace[abi:ne180100]<turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,std::allocator<turi::supervised::xgboost::DMatrixMLData>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_22450509C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::__shared_ptr_emplace[abi:ne180100]<turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,std::allocator<turi::supervised::xgboost::DMatrixMLData>,0>(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D784FC0;
  std::allocator<turi::supervised::xgboost::DMatrixMLData>::construct[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_224505118(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D784FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t std::allocator<turi::supervised::xgboost::DMatrixMLData>::construct[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  void v21[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v21, 0, 13);
  if (v21 != (atomic_ullong **)a4)
  {
    *(atomic_ullong **)((char *)v21 + 5) = *(atomic_ullong **)(a4 + 5);
    v21[0] = *(atomic_ullong **)a4;
    BYTE4(v21[1]) = *(unsigned char *)(a4 + 12);
    if (BYTE4(v21[1]) <= 9u && ((1 << SBYTE4(v21[1])) & 0x33C) != 0) {
      atomic_fetch_add(v21[0], 1uLL);
    }
  }
  uint64_t result = turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(a2, a3, v21, *a5, *a6);
  switch(BYTE4(v21[1]))
  {
    case 2:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v21[0];
        if (v21[0])
        {
          if (*((char *)v21[0] + 31) < 0) {
            operator delete(*((void **)v21[0] + 1));
          }
          uint64_t v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v21[0];
        if (v21[0])
        {
          float v12 = (void *)v21[0][1];
          if (v12)
          {
            v21[0][2] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v9 = v11;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = v21[0];
        if (v21[0])
        {
          uint64_t v20 = (void **)(v21[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
          goto LABEL_24;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = v21[0];
        if (v21[0])
        {
          uint64_t v20 = (void **)(v21[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v20);
LABEL_24:
          uint64_t v9 = v13;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v19 = v21[0];
        if (v21[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v21[0] + 2);
          uint64_t v9 = v19;
          unsigned int v18 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = v21[0];
        if (v21[0])
        {
          unsigned int v15 = (void *)v21[0][6];
          if (v15)
          {
            v21[0][7] = (atomic_ullong)v15;
            operator delete(v15);
          }
          float v16 = (void *)v14[3];
          if (v16)
          {
            uint64_t v14[4] = (atomic_ullong)v16;
            operator delete(v16);
          }
          uint64_t v17 = (std::__shared_weak_count *)v14[2];
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          uint64_t v9 = v14;
          unsigned int v18 = 2071181815;
LABEL_37:
          uint64_t v10 = v18 | 0x1030C4000000000;
LABEL_38:
          uint64_t result = MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_22450544C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<turi::supervised::xgboost::metric_tracker>::shared_ptr[abi:ne180100]<turi::supervised::xgboost::metric_tracker,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224505584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<turi::supervised::xgboost::metric_tracker>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::xgboost::metric_tracker *,std::shared_ptr<turi::supervised::xgboost::metric_tracker>::__shared_ptr_default_delete<turi::supervised::xgboost::metric_tracker,turi::supervised::xgboost::metric_tracker>,std::allocator<turi::supervised::xgboost::metric_tracker>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::supervised::xgboost::metric_tracker>::operator()[abi:ne180100](a1 + 24, *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::supervised::xgboost::metric_tracker *,std::shared_ptr<turi::supervised::xgboost::metric_tracker>::__shared_ptr_default_delete<turi::supervised::xgboost::metric_tracker,turi::supervised::xgboost::metric_tracker>,std::allocator<turi::supervised::xgboost::metric_tracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::supervised::xgboost::metric_tracker>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 72);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a2 + 48, *(char **)(a2 + 56));
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a2 + 24, *(char **)(a2 + 32));
    uint64_t v4 = (void **)a2;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x22A614FA0](a2, 0x1020C405879664BLL);
  }
  return result;
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::early_stopping_checkpointer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D785088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::early_stopping_checkpointer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D785088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::early_stopping_checkpointer>::__on_zero_shared(uint64_t a1)
{
  return std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::~deque[abi:ne180100]((void *)(a1 + 24));
}

uint64_t std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  double v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    double v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 16);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      double v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      double v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    unsigned int v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

void std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D7850D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7850D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3)
{
}

void sub_224505A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

file_logger *OUTLINED_FUNCTION_31(file_logger *a1, uint64_t a2, const char *a3, const char *a4)
{
  return file_logger::start_stream(a1, 6, a3, a4, 417, 1);
}

void turi::supervised::xgboost::MakeColPage(turi::thread *a1, turi::supervised::xgboost::SFrameSparsePage **a2, unint64_t a3, turi::supervised::xgboost::SFrameSparsePage *a4)
{
  v100[24] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v95 = a4;
  int v7 = turi::thread::cpu_count(a1);
  uint64_t v8 = *((void *)a1 + 1);
  uint64_t v93 = 0;
  uint64_t v94 = v8;
  uint64_t v88 = a4;
  uint64_t v89 = (uint64_t)a4 + 48;
  unint64_t v90 = &v91;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  std::vector<std::vector<unsigned long>>::resize(&v91, v7);
  uint64_t v10 = v91;
  if (v92 != v91)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      std::vector<unsigned long>::resize(v10 + v11, a3);
      uint64_t v10 = *v90;
      uint64_t v13 = *v90 + v11;
      unint64_t v9 = *(void **)v13;
      uint64_t v14 = *(void *)(v13 + 8) - *(void *)v13;
      if (v14 >= 1) {
        bzero(v9, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
      }
      ++v12;
      v11 += 24;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v90[1] - v10) >> 3));
  }
  unint64_t v15 = *(unsigned int *)a1;
  unint64_t v84 = a2;
  unsigned int v85 = a1;
  long long v86 = &v88;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v9);
  uint64_t v17 = (turi::thread *)turi::thread_pool::size(instance);
  tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v17);
  if (!*((unsigned char *)tls_data + 8) && (unint64_t)v17 > 1)
  {
    unint64_t v19 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v100, v19);
    double v20 = (double)v15 / (double)(unint64_t)v17;
    unint64_t v98 = (unint64_t)(v20 * (double)0 + 0.0);
    unint64_t v99 = (unint64_t)(v20 * (double)1uLL + 0.0);
    uint64_t v96 = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0 const&)::{lambda(void)#1}>(turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0)::stored_vtable
        + 1;
    uint64_t v97 = &v84;
    turi::parallel_task_queue::launch((uint64_t)v100, &v96);
  }
  if (v15)
  {
    unint64_t v21 = 0;
    do
    {
      if ((*(void *)((char *)*v84 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v21))
      {
        tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
        uint64_t v22 = *((void *)v85 + 2);
        uint64_t v23 = *(void *)(v22 + 8 * v21++);
        uint64_t v24 = *(void *)(v22 + 8 * v21);
        uint64_t v25 = (v24 - v23);
        if (v24 != v23)
        {
          uint64_t v26 = (unsigned int *)(*((void *)v85 + 3) + 8 * v23);
          int v27 = *(_DWORD *)tls_data;
          do
          {
            unsigned int v29 = *v26;
            v26 += 2;
            uint64_t v28 = v29;
            std::vector<int>::pointer v30 = (uint64_t *)(*(void *)v86[2] + 24 * v27);
            uint64_t v31 = *v30;
            if (v29 >= (unint64_t)((v30[1] - *v30) >> 3))
            {
              v100[0] = 0;
              std::vector<unsigned long>::resize((uint64_t)v30, v28 + 1, v100);
              uint64_t v31 = *v30;
            }
            ++*(void *)(v31 + 8 * v28);
            --v25;
          }
          while (v25);
        }
      }
      else
      {
        ++v21;
      }
    }
    while (v21 != v15);
  }
  uint64_t v32 = v90;
  uint64_t v33 = v90[1];
  if (v33 == *v90)
  {
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v33 - *v90) >> 3);
  }
  else
  {
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v33 = *v90;
    do
    {
      unint64_t v36 = (uint64_t)(*(void *)(v33 + v34 + 8) - *(void *)(v33 + v34)) >> 3;
      if (v36 >= (uint64_t)(*((void *)v88 + 1) - *(void *)v88) >> 3)
      {
        std::vector<unsigned long>::resize((uint64_t)v88, v36 + 1);
        uint64_t v32 = v90;
        uint64_t v33 = *v90;
      }
      ++v35;
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v32[1] - v33) >> 3);
      v34 += 24;
    }
    while (v35 < v37);
  }
  uint64_t v38 = *(void *)v88;
  uint64_t v39 = *((void *)v88 + 1) - *(void *)v88;
  if ((unint64_t)v39 < 9)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unint64_t v40 = 0;
    unint64_t v41 = 0;
    unint64_t v42 = v39 >> 3;
    if (v42 <= 2) {
      unint64_t v42 = 2;
    }
    uint64_t v43 = (void *)(v33 + 8);
    uint64_t v44 = 1;
    do
    {
      unint64_t v45 = v44;
      unint64_t v46 = v43;
      for (unint64_t i = v37; i; --i)
      {
        uint64_t v48 = *(v46 - 1);
        if (v41 < (*v46 - v48) >> 3)
        {
          uint64_t v49 = *(void *)(v48 + 8 * v41);
          *(void *)(v48 + 8 * v41) = v40;
          v40 += v49;
        }
        v46 += 3;
      }
      *(void *)(v38 + 8 * v45) = v40;
      uint64_t v44 = v45 + 1;
      unint64_t v41 = v45;
    }
    while (v45 + 1 != v42);
  }
  std::vector<xgboost_old::SparseBatch::Entry>::resize(v89, v40);
  unint64_t v84 = a2;
  unsigned int v85 = a1;
  long long v86 = &v88;
  unsigned int v87 = &v94;
  float v51 = (turi::thread_pool *)turi::thread_pool::get_instance(v50);
  uint64_t v52 = (turi::thread *)turi::thread_pool::size(v51);
  float v53 = (turi::thread_pool *)turi::thread::get_tls_data(v52);
  if (!*((unsigned char *)v53 + 8) && (unint64_t)v52 > 1)
  {
    unsigned int v54 = (turi::thread_pool *)turi::thread_pool::get_instance(v53);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v100, v54);
    double v55 = (double)v15 / (double)(unint64_t)v52;
    unint64_t v98 = (unint64_t)(v55 * (double)0 + 0.0);
    unint64_t v99 = (unint64_t)(v55 * (double)1uLL + 0.0);
    uint64_t v96 = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1 const&)::{lambda(void)#1}>(turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1)::stored_vtable
        + 1;
    uint64_t v97 = &v84;
    turi::parallel_task_queue::launch((uint64_t)v100, &v96);
  }
  if (v15)
  {
    unint64_t v56 = 0;
    do
    {
      if ((*(void *)((char *)*v84 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v56))
      {
        float v53 = (turi::thread_pool *)turi::thread::get_tls_data(v53);
        uint64_t v57 = *((void *)v85 + 2);
        uint64_t v58 = *(void *)(v57 + 8 * v56);
        unint64_t v59 = v56 + 1;
        uint64_t v60 = *(void *)(v57 + 8 * (v56 + 1)) - v58;
        if (v60)
        {
          atomic_ullong *volatile v61 = (int *)v87;
          uint64_t v62 = *(void *)(*(void *)v86[2] + 24 * *(int *)v53);
          uint64_t v63 = *(void *)v86[1];
          atomic_ullong *volatile v64 = (int *)(*((void *)v85 + 3) + 8 * v58 + 4);
          do
          {
            uint64_t v65 = *(v64 - 1);
            int v66 = *v64;
            int v67 = *v61;
            uint64_t v68 = *(void *)(v62 + 8 * v65);
            float v53 = (turi::thread_pool *)(v68 + 1);
            *(void *)(v62 + 8 * v65) = v68 + 1;
            LODWORD(v65) = v67 + v56;
            unsigned int v69 = (_DWORD *)(v63 + 8 * v68);
            _DWORD *v69 = v65;
            v69[1] = v66;
            v64 += 2;
            --v60;
          }
          while (v60);
        }
      }
      else
      {
        unint64_t v59 = v56 + 1;
      }
      unint64_t v56 = v59;
    }
    while (v59 != v15);
  }
  unint64_t v84 = &v95;
  atomic_ullong *volatile v70 = (turi::thread_pool *)turi::thread_pool::get_instance(v53);
  long long v71 = (turi::thread *)turi::thread_pool::size(v70);
  atomic_ullong *volatile v72 = (turi::thread_pool *)turi::thread::get_tls_data(v71);
  if (!*((unsigned char *)v72 + 8) && (unint64_t)v71 > 1)
  {
    uint64_t v73 = (turi::thread_pool *)turi::thread_pool::get_instance(v72);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v100, v73);
    double v74 = (double)a3 / (double)(unint64_t)v71;
    unint64_t v98 = (unint64_t)(v74 * (double)0 + 0.0);
    unint64_t v99 = (unint64_t)(v74 * (double)1uLL + 0.0);
    uint64_t v96 = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2 const&)::{lambda(void)#1}>(turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2)::stored_vtable
        + 1;
    uint64_t v97 = &v84;
    turi::parallel_task_queue::launch((uint64_t)v100, &v96);
  }
  if (a3)
  {
    uint64_t v75 = 0;
    uint64_t v76 = 8 * a3;
    do
    {
      uint64_t v77 = *v84;
      uint64_t v78 = (unint64_t *)(*(void *)*v84 + v75);
      unint64_t v79 = *v78;
      unint64_t v80 = v78[1];
      if (v79 < v80)
      {
        float v82 = (char *)v77 + 48;
        uint64_t v81 = *((void *)v77 + 6);
        if (*((void *)v82 + 1) == v81) {
          uint64_t v81 = 0;
        }
        v100[0] = (void **)xgboost_old::SparseBatch::Entry::CmpValue;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v81 + 8 * v79, (char *)(v81 + 8 * v80), (uint64_t (**)(uint64_t *, uint64_t *))v100, 126 - 2 * __clz((uint64_t)(8 * v80 - 8 * v79) >> 3), 1);
      }
      v75 += 8;
    }
    while (v76 != v75);
  }
  turi::supervised::xgboost::SFrameSparsePage::save((uint64_t)v95);
  turi::supervised::xgboost::SFrameSparsePage::unload(v95);
  v100[0] = (void **)&v91;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v100);
}

void sub_22450618C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a23 = a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::SFrameSparsePage::save(uint64_t this)
{
  *(void *)&long long v10 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(this + 96)) {
    turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v1 = this;
  if (!*(unsigned char *)(this + 400))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "index");
    std::string::basic_string[abi:ne180100]<0>(v9, "value");
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    int v7 = 0;
    unint64_t v5 = (std::string *)operator new(0x30uLL);
    uint64_t v6 = v5;
    int v7 = v5 + 2;
    uint64_t v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v7, &v8, &v10, v5);
    uint64_t v2 = operator new(2uLL);
    v4[0] = v2;
    _WORD *v2 = 256;
    v4[1] = v2 + 1;
    void v4[2] = v2 + 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    turi::sframe::open_for_write(v1 + 104, &v5, v4, &__p, 1, 1);
  }
  return this;
}

void sub_2245064CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, char *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15)
  {
    a16 = a15;
    operator delete(a15);
  }
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  uint64_t v33 = 0;
  while (1)
  {
    if (*(&a32 + v33) < 0) {
      operator delete(*(void **)((char *)&a27 + v33));
    }
    v33 -= 24;
    if (v33 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void turi::supervised::xgboost::SFrameSparsePage::unload(turi::supervised::xgboost::SFrameSparsePage *this)
{
  if (!*((unsigned char *)this + 400)) {
    turi::supervised::xgboost::SFrameSparsePage::unload(void)::{lambda(void)#1}::operator()();
  }
  *((void *)this + 7) = *((void *)this + 6);
  std::vector<xgboost_old::SparseBatch::Entry>::shrink_to_fit((uint64_t)this + 48);
  *((void *)this + 1) = *(void *)this;
  std::vector<unsigned long>::shrink_to_fit((uint64_t)this);
  *((unsigned char *)this + 96) = 0;
}

uint64_t turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 8) = -21760;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)a1 = &unk_26D785158;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *a2;
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = *a2;
  }
  *(void *)(a1 + 16) = a2[3] - a2[2];
  *(void *)(a1 + 24) = *(void *)(v10 + 64);
  v69[0] = 0;
  v69[1] = 0;
  uint64_t v68 = v69;
  BOOL v67 = 0;
  unsigned int v11 = a3[12];
  if (v11 < 0xA)
  {
    BOOL v67 = v11 != 7;
    int v12 = *((unsigned __int8 *)a2 + 48);
    if (*((unsigned char *)a2 + 48))
    {
      unsigned int v13 = *(_DWORD *)(*(void *)(v9 + 24) + 24);
      BOOL v14 = v13 > 6;
      unsigned int v15 = (0x4Au >> v13) & 1;
      if (v14) {
        LOBYTE(v15) = 0;
      }
    }
    else
    {
      LOBYTE(v15) = 0;
    }
    char v66 = v15;
    if (v11 != 7)
    {
      uint64_t v16 = *(void *)(*(void *)a3 + 8);
      uint64_t v17 = *(void *)(*(void *)a3 + 16);
      if (v16 != v17)
      {
        do
        {
          unint64_t v65 = 0;
          unint64_t v65 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(*(void ***)(*(void *)(v9 + 24) + 32), (atomic_ullong **)v16);
          double v18 = *(double *)(v16 + 16);
          v70.__locale_ = (std::locale::__imp *)&v65;
          unint64_t v19 = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v68, &v65, (uint64_t)&std::piecewise_construct, &v70);
          float v20 = v18;
          *((float *)v19 + 10) = v20;
          v16 += 32;
        }
        while (v16 != v17);
        int v12 = *((unsigned __int8 *)a2 + 48);
      }
    }
    if (v12)
    {
      std::vector<float>::resize(a1 + 80, a2[3] - a2[2]);
      if (v67) {
        std::vector<float>::resize(a1 + 128, a2[3] - a2[2]);
      }
      uint64_t v21 = *(void *)(*a2 + 24);
      unsigned int v22 = *(_DWORD *)(v21 + 24);
      BOOL v14 = v22 > 6;
      int v23 = (1 << v22) & 0x5A;
      if (v14 || v23 == 0) {
        uint64_t v25 = *(void *)(v21 + 72);
      }
      else {
        uint64_t v25 = *(void *)(*(void *)(v21 + 32) + 104);
      }
      *(void *)(a1 + 200) = v25;
      uint64_t v26 = operator new(0x30uLL);
      *uint64_t v26 = &unk_26D785410;
      v26[1] = a2;
      void v26[2] = &v66;
      void v26[3] = a1;
      v26[4] = &v67;
      v26[5] = &v68;
      long long v71 = v26;
      turi::in_parallel((turi::thread_pool *)&v70);
      std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v70);
    }
    int v27 = getenv("TURI_MEMORY_LIMIT_IN_MB");
    if (v27) {
      atoi(v27);
    }
    else {
      total_mem();
    }
    if (a5)
    {
      uint64_t v28 = (cppipc *)global_logger();
      if (*((int *)v28 + 169) <= 2)
      {
        if (cppipc::must_cancel(v28)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        unsigned int v29 = (file_logger *)global_logger();
        started = file_logger::start_stream(v29, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 737, 1);
        uint64_t v31 = pthread_getspecific(*((void *)started + 74));
        if (v31 && *((unsigned char *)v31 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"Fixed number of batches: ", 25);
        }
        uint64_t v32 = file_logger::operator<<<unsigned long>((uint64_t)started);
        uint64_t v33 = pthread_getspecific(*(void *)(v32 + 592));
        if (v33 && *((unsigned char *)v33 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33 + 2, (uint64_t)" Max row per batch: ", 20);
        }
        uint64_t v34 = file_logger::operator<<<unsigned long>(v32);
        uint64_t v28 = (cppipc *)pthread_getspecific(*(void *)(v34 + 592));
        if (v28 && *((unsigned char *)v28 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*((void *)v28 + 2) - 24) + 16));
          unint64_t v35 = std::locale::use_facet(&v70, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
          std::locale::~locale(&v70);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v34);
          if (*(_DWORD *)(v34 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      goto LABEL_77;
    }
    unint64_t v37 = (int *)global_logger();
    if (v37[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v37)) {
        goto LABEL_80;
      }
      uint64_t v38 = (file_logger *)global_logger();
      uint64_t v39 = file_logger::start_stream(v38, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 728, 1);
      unint64_t v40 = pthread_getspecific(*((void *)v39 + 74));
      if (v40 && *((unsigned char *)v40 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)"Auto tune batch size... Memory limit (MB): ", 43);
      }
      uint64_t v41 = file_logger::operator<<<unsigned long>((uint64_t)v39);
      unint64_t v42 = pthread_getspecific(*(void *)(v41 + 592));
      if (v42 && *((unsigned char *)v42 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)"MB", 2);
      }
      uint64_t v43 = pthread_getspecific(*(void *)(v41 + 592));
      if (v43)
      {
        if (*((unsigned char *)v43 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(v43[2] - 24) + 16));
          uint64_t v44 = std::locale::use_facet(&v70, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
          std::locale::~locale(&v70);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v41);
          if (*(_DWORD *)(v41 + 600) == 7) {
            goto LABEL_82;
          }
        }
      }
    }
    unint64_t v45 = (int *)global_logger();
    if (v45[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v45)) {
        goto LABEL_80;
      }
      unint64_t v46 = (file_logger *)global_logger();
      uint64_t v47 = file_logger::start_stream(v46, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 730, 1);
      uint64_t v48 = pthread_getspecific(*((void *)v47 + 74));
      if (v48 && *((unsigned char *)v48 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48 + 2, (uint64_t)" Max cache per batch: ", 22);
      }
      uint64_t v49 = file_logger::operator<<<float>((uint64_t)v47);
      uint64_t v50 = pthread_getspecific(*(void *)(v49 + 592));
      if (v50 && *((unsigned char *)v50 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50 + 2, (uint64_t)"MB", 2);
      }
      float v51 = pthread_getspecific(*(void *)(v49 + 592));
      if (v51 && *((unsigned char *)v51 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51 + 2, (uint64_t)" Max row size: ", 15);
      }
      uint64_t v52 = file_logger::operator<<<unsigned long>(v49);
      float v53 = pthread_getspecific(*(void *)(v52 + 592));
      if (v53 && *((unsigned char *)v53 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)"B", 1);
      }
      unsigned int v54 = pthread_getspecific(*(void *)(v52 + 592));
      if (v54)
      {
        if (*((unsigned char *)v54 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(v54[2] - 24) + 16));
          double v55 = std::locale::use_facet(&v70, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
          std::locale::~locale(&v70);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v52);
          if (*(_DWORD *)(v52 + 600) == 7) {
            goto LABEL_82;
          }
        }
      }
    }
    uint64_t v28 = (cppipc *)global_logger();
    if (*((int *)v28 + 169) > 2) {
      goto LABEL_77;
    }
    if (!cppipc::must_cancel(v28))
    {
      unint64_t v56 = (file_logger *)global_logger();
      uint64_t v57 = file_logger::start_stream(v56, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 732, 1);
      uint64_t v58 = pthread_getspecific(*((void *)v57 + 74));
      if (v58 && *((unsigned char *)v58 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58 + 2, (uint64_t)"Number of batches: ", 19);
      }
      uint64_t v59 = file_logger::operator<<<unsigned long>((uint64_t)v57);
      uint64_t v60 = pthread_getspecific(*(void *)(v59 + 592));
      if (v60 && *((unsigned char *)v60 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60 + 2, (uint64_t)" Max row per batch: ", 20);
      }
      uint64_t v61 = file_logger::operator<<<unsigned long>(v59);
      uint64_t v28 = (cppipc *)pthread_getspecific(*(void *)(v61 + 592));
      if (!v28
        || !*((unsigned char *)v28 + 280)
        || (std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*((void *)v28 + 2) - 24) + 16)),
            uint64_t v62 = std::locale::use_facet(&v70, MEMORY[0x263F8C108]),
            ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10),
            std::locale::~locale(&v70),
            std::ostream::put(),
            std::ostream::flush(),
            file_logger::stream_flush((file_logger *)v61),
            *(_DWORD *)(v61 + 600) != 7))
      {
LABEL_77:
        turi::thread::cpu_count(v28);
        operator new();
      }
LABEL_82:
      __print_back_trace();
      atomic_ullong *volatile v64 = __cxa_allocate_exception(8uLL);
      *atomic_ullong *volatile v64 = "LOG_FATAL encountered";
      __cxa_throw(v64, MEMORY[0x263F8C1D8], 0);
    }
LABEL_80:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  uint64_t result = turi::flexible_type_fail(0);
  __break(1u);
  return result;
}

void sub_224507694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, uint64_t a17, std::locale a18)
{
  std::locale::~locale(&a18);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a14, a15);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  xgboost_old::learner::DMatrix::~DMatrix(v18);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData(turi::supervised::xgboost::DMatrixMLData *this)
{
  *(void *)this = &unk_26D785158;
  uint64_t v2 = *((void *)this + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  }
  xgboost_old::learner::DMatrix::~DMatrix(this);
}

{
  uint64_t vars8;

  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::supervised::xgboost::DMatrixMLData::fmat(turi::supervised::xgboost::DMatrixMLData *this)
{
  return *((void *)this + 24);
}

void turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"in_memory", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 286, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224507930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, void **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  char v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    void v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    uint64_t v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      uint64_t result = (turi::thread_pool *)turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_224507B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}::operator()(void **a1, unint64_t a2)
{
  v45[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)*a1;
  turi::sframe::get_output_iterator(*a1 + 13, a2, (uint64_t)v42);
  uint64_t v6 = *(void *)(v4 + 48);
  uint64_t v5 = *(void *)(v4 + 56);
  unint64_t v7 = *a1[1];
  std::vector<turi::flexible_type>::vector(v40, 2uLL);
  unint64_t v8 = ((v5 - v6) >> 3) * a2;
  unint64_t v9 = (v8 + ((v5 - v6) >> 3)) / v7;
  unint64_t v10 = v8 / v7;
  if (v10 < v9)
  {
    do
    {
      uint64_t v11 = *(void *)(v4 + 48);
      uint64_t v12 = v40[0];
      switch(*(unsigned char *)(v40[0] + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v40[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v13 = *(atomic_uint ***)v12;
            if (!*(void *)v12) {
              goto LABEL_34;
            }
            if (*((char *)v13 + 31) < 0) {
              operator delete(v13[1]);
            }
            BOOL v14 = v13;
            uint64_t v15 = 0x1012C404EF22A49;
            goto LABEL_33;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v40[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v22 = *(atomic_uint ***)v12;
            if (!*(void *)v12) {
              goto LABEL_34;
            }
            int v23 = v22[1];
            if (v23)
            {
              v22[2] = v23;
              operator delete(v23);
            }
            BOOL v14 = v22;
            uint64_t v15 = 0x1080C409938AC02;
            goto LABEL_33;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v40[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v16 = *(atomic_uint ***)v12;
            if (!*(void *)v12) {
              goto LABEL_34;
            }
            uint64_t v41 = (void **)(v16 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
            goto LABEL_28;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v40[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v16 = *(atomic_uint ***)v12;
            if (!*(void *)v12) {
              goto LABEL_34;
            }
            uint64_t v41 = (void **)(v16 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_28:
            BOOL v14 = v16;
            uint64_t v15 = 0x1020C405E66F15BLL;
            goto LABEL_33;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v40[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v24 = *(atomic_uint ***)v12;
            if (!*(void *)v12) {
              goto LABEL_34;
            }
            boost::detail::shared_count::~shared_count(v24 + 2);
            BOOL v14 = v24;
            unsigned int v21 = -235920773;
            goto LABEL_32;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v40[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v17 = *(atomic_uint ***)v12;
            if (*(void *)v12)
            {
              double v18 = v17[6];
              if (v18)
              {
                v17[7] = v18;
                operator delete(v18);
              }
              unint64_t v19 = v17[3];
              if (v19)
              {
                void v17[4] = v19;
                operator delete(v19);
              }
              float v20 = (std::__shared_weak_count *)v17[2];
              if (v20) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v20);
              }
              BOOL v14 = v17;
              unsigned int v21 = 2071181815;
LABEL_32:
              uint64_t v15 = v21 | 0x1030C4000000000;
LABEL_33:
              MEMORY[0x22A614FA0](v14, v15);
            }
LABEL_34:
            *(void *)uint64_t v12 = 0;
          }
          break;
        default:
          break;
      }
      *(void *)uint64_t v12 = 0;
      *(_DWORD *)(v12 + 8) = 0;
      *(unsigned char *)(v12 + 12) = 0;
      *(void *)uint64_t v12 = *(unsigned int *)(v11 + 8 * v10);
      uint64_t v25 = *(void *)(v4 + 48);
      uint64_t v26 = v40[0];
      switch(*(unsigned char *)(v40[0] + 28))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40[0] + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v27 = *(void *)(v26 + 16);
            if (!v27) {
              goto LABEL_67;
            }
            if (*(char *)(v27 + 31) < 0) {
              operator delete(*(void **)(v27 + 8));
            }
            uint64_t v28 = (void *)v27;
            uint64_t v29 = 0x1012C404EF22A49;
            goto LABEL_66;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40[0] + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v36 = *(void **)(v26 + 16);
            if (!v36) {
              goto LABEL_67;
            }
            unint64_t v37 = (void *)v36[1];
            if (v37)
            {
              v36[2] = v37;
              operator delete(v37);
            }
            uint64_t v28 = v36;
            uint64_t v29 = 0x1080C409938AC02;
            goto LABEL_66;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40[0] + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v30 = *(void *)(v26 + 16);
            if (!v30) {
              goto LABEL_67;
            }
            uint64_t v41 = (void **)(v30 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
            goto LABEL_61;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40[0] + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v30 = *(void *)(v26 + 16);
            if (!v30) {
              goto LABEL_67;
            }
            uint64_t v41 = (void **)(v30 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_61:
            uint64_t v28 = (void *)v30;
            uint64_t v29 = 0x1020C405E66F15BLL;
            goto LABEL_66;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40[0] + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v38 = *(void *)(v26 + 16);
            if (!v38) {
              goto LABEL_67;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(v38 + 16));
            uint64_t v28 = (void *)v38;
            unsigned int v35 = -235920773;
            goto LABEL_65;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v40[0] + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v31 = *(void **)(v26 + 16);
            if (v31)
            {
              uint64_t v32 = (void *)v31[6];
              if (v32)
              {
                v31[7] = v32;
                operator delete(v32);
              }
              uint64_t v33 = (void *)v31[3];
              if (v33)
              {
                v31[4] = v33;
                operator delete(v33);
              }
              uint64_t v34 = (std::__shared_weak_count *)v31[2];
              if (v34) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              }
              uint64_t v28 = v31;
              unsigned int v35 = 2071181815;
LABEL_65:
              uint64_t v29 = v35 | 0x1030C4000000000;
LABEL_66:
              MEMORY[0x22A614FA0](v28, v29);
            }
LABEL_67:
            *(void *)(v26 + 16) = 0;
          }
          break;
        default:
          break;
      }
      *(void *)(v26 + 16) = 0;
      *(_DWORD *)(v26 + 24) = 0;
      *(unsigned char *)(v26 + 28) = 1;
      *(double *)(v26 + 16) = *(float *)(v25 + 8 * v10 + 4);
      if (!v43) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v43 + 48))(v43, v40);
      ++v10;
    }
    while (v10 != v9);
  }
  uint64_t v41 = (void **)v40;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v45);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v44);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v42);
}

void sub_224508080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002247171EBLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002247171EBLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
      uint64_t result = turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}::operator()((void **)*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::supervised::xgboost::SFrameSparsePage::unload(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_saved", 8);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 277, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::unload(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2245082E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::SparseBatch::Entry>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  long long v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  char v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
  uint64_t v4 = *(char **)a1;
  unint64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  uint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
  uint64_t v4 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

turi::supervised::xgboost::MLDataBatchIterator *turi::supervised::xgboost::MLDataBatchIterator::MLDataBatchIterator(turi::supervised::xgboost::MLDataBatchIterator *this, const turi::ml_data *a2, unint64_t a3, unint64_t a4)
{
  *(void *)this = &unk_26D7851B8;
  unint64_t v8 = (turi::supervised::xgboost::MLDataBatchIterator *)((char *)this + 8);
  turi::ml_data::ml_data((turi::supervised::xgboost::MLDataBatchIterator *)((char *)this + 8), a2);
  *((_OWORD *)this + 14) = 0u;
  if (a3 <= 1) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = a3;
  }
  *((_OWORD *)this + 15) = 0uLL;
  *((_OWORD *)this + 16) = 0uLL;
  *((void *)this + 25) = v9;
  *((void *)this + 26) = a4;
  *((void *)this + 27) = (~*((void *)a2 + 2) + v9 + *((void *)a2 + 3)) / v9;
  std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::resize((uint64_t *)this + 31, a4);
  if (*((void *)this + 26))
  {
    unint64_t v10 = 0;
    do
    {
      turi::ml_data::get_iterator(v8, 0, 1uLL, (uint64_t)v12);
      std::vector<turi::ml_data_iterator>::push_back[abi:ne180100]((uint64_t *)this + 28, (uint64_t)v12);
      turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v12);
      ++v10;
    }
    while (v10 < *((void *)this + 26));
  }
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  return this;
}

void sub_2245085C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<turi::ml_data_iterator>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::ml_data::~ml_data(v2);
  _Unwind_Resume(a1);
}

void std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<turi::ml_data_iterator>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0xB60B60B60B60B6) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x5B05B05B05B05BLL) {
      unint64_t v12 = 0xB60B60B60B60B6;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::ml_data_iterator>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = v13;
    uint64_t v15 = &v13[360 * v9];
    uint64_t v17 = &v13[360 * v12];
    turi::ml_data_iterator::ml_data_iterator((uint64_t)v15, a2);
    uint64_t v16 = v15 + 360;
    std::vector<turi::ml_data_iterator>::__swap_out_circular_buffer(a1, &v14);
    uint64_t v8 = a1[1];
    std::__split_buffer<turi::ml_data_iterator>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    turi::ml_data_iterator::ml_data_iterator(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 360;
    a1[1] = v7 + 360;
  }
  a1[1] = v8;
}

void sub_2245087CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::ml_data_iterator>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::MLDataBatchIterator::BeforeFirst(uint64_t this)
{
  *(void *)(this + 272) = 0;
  return this;
}

BOOL turi::supervised::xgboost::MLDataBatchIterator::Next(turi::supervised::xgboost::MLDataBatchIterator *this)
{
  uint64_t v1 = *((void *)this + 34);
  uint64_t v2 = *((void *)this + 4) - *((void *)this + 3);
  if (v1 != v2)
  {
    if (*((void *)this + 27) == 1 && *((void *)this + 35)) {
      *((void *)this + 34) = v2;
    }
    else {
      turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(this);
    }
  }
  return v1 != v2;
}

uint64_t turi::supervised::xgboost::MLDataBatchIterator::Value(turi::supervised::xgboost::MLDataBatchIterator *this)
{
  return (uint64_t)this + 280;
}

void turi::supervised::xgboost::MLDataBatchIterator::~MLDataBatchIterator(turi::supervised::xgboost::MLDataBatchIterator *this)
{
  turi::supervised::xgboost::MLDataBatchIterator::~MLDataBatchIterator(this);
  JUMPOUT(0x22A614FA0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  std::__shared_weak_count *v5;
  void **v6;

  *(void *)this = &unk_26D7851B8;
  unint64_t v6 = (void **)((char *)this + 248);
  std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 224);
  std::vector<turi::ml_data_iterator>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v6 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v6 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void **std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)((char *)v7 + 48 * a2);
      uint64_t v14 = 48 * a2;
      do
      {
        uint64_t result = (void **)turi::supervised::xgboost::MLDataBatchIterator::RowBlock::RowBlock(v7);
        unint64_t v7 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)((char *)v7 + 48);
        v14 -= 48;
      }
      while (v14);
      unint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    unsigned int v22 = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = &v12[48 * v8];
    v19[0] = v12;
    v19[1] = v15;
    float v20 = v15;
    unsigned int v21 = &v12[48 * v11];
    uint64_t v16 = 3 * a2;
    uint64_t v17 = &v15[48 * a2];
    uint64_t v18 = 16 * v16;
    do
    {
      turi::supervised::xgboost::MLDataBatchIterator::RowBlock::RowBlock((turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)v15);
      v15 += 48;
      v18 -= 48;
    }
    while (v18);
    float v20 = v17;
    std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::~__split_buffer(v19);
  }
  return result;
}

void sub_2245089CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

turi::supervised::xgboost::MLDataBatchIterator::RowBlock *turi::supervised::xgboost::MLDataBatchIterator::RowBlock::RowBlock(turi::supervised::xgboost::MLDataBatchIterator::RowBlock *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock::Reset(this);
  return this;
}

void sub_224508AA4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock::RowBlock(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::MLDataBatchIterator::RowBlock::Reset(turi::supervised::xgboost::MLDataBatchIterator::RowBlock *this)
{
  std::vector<unsigned long>::resize((uint64_t)this, 1uLL);
  **(void **)this = 0;
  *((void *)this + 4) = *((void *)this + 3);
  std::vector<xgboost_old::SparseBatch::Entry>::shrink_to_fit((uint64_t)this + 24);
  std::vector<unsigned long>::shrink_to_fit((uint64_t)this);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100](v4, i - 48);
  }
}

__n128 turi::ml_data_iterator::ml_data_iterator(uint64_t a1, uint64_t a2)
{
  turi::ml_data::ml_data(a1, a2);
  *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 208) = 0;
  *(_OWORD *)(v3 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(v3 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(v3 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(v3 + 256) = 0;
  *(void *)(v3 + 264) = 0;
  *(void *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(v3 + 264) = *(void *)(a2 + 264);
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  long long v4 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(v3 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v3 + 288) = v4;
  *(_OWORD *)(v3 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  long long v5 = *(_OWORD *)(a2 + 320);
  *(_WORD *)(v3 + 336) = *(_WORD *)(a2 + 336);
  *(_OWORD *)(v3 + 320) = v5;
  __n128 result = *(__n128 *)(a2 + 344);
  *(__n128 *)(v3 + 344) = result;
  return result;
}

__n128 turi::ml_data::ml_data(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v2 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v3 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a1 + 128) = v3;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  __n128 result = *(__n128 *)(a2 + 176);
  *(__n128 *)(a1 + 176) = result;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  return result;
}

void std::vector<turi::ml_data_iterator>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 360;
    turi::ml_data_iterator::ml_data_iterator(v6 - 360, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::ml_data_iterator>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB60B60B60B60B7) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(360 * a2);
}

uint64_t std::__split_buffer<turi::ml_data_iterator>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 360;
    turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)(i - 360));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::ml_data_iterator>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)(v4 - 360));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(turi::supervised::xgboost::MLDataBatchIterator *this)
{
  long long v2 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)*((void *)this + 31);
  uint64_t v3 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)*((void *)this + 32);
  if (v2 != v3)
  {
    do
    {
      turi::supervised::xgboost::MLDataBatchIterator::RowBlock::Reset(v2);
      long long v2 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)((char *)v2 + 48);
    }
    while (v2 != v3);
    uint64_t v4 = (void **)*((void *)this + 31);
    uint64_t v5 = (void **)*((void *)this + 32);
    while (v4 != v5)
    {
      std::vector<unsigned long>::reserve(v4, *((void *)this + 25) / *((void *)this + 26));
      std::vector<turi::ml_data_internal::entry_value>::reserve(v4 + 3, *((void *)this + 6) * *((void *)this + 25) / *((void *)this + 26));
      v4 += 6;
    }
  }
  uint64_t v33 = *((void *)this + 34);
  unint64_t v6 = *((void *)this + 26);
  unint64_t v7 = *((void *)this + 25) + v33;
  uint64_t v8 = *((void *)this + 3);
  if (*((void *)this + 4) - v8 < v7) {
    unint64_t v7 = *((void *)this + 4) - v8;
  }
  void v31[2] = (void **)this;
  unint64_t v32 = v7;
  v31[0] = (void **)&v32;
  v31[1] = (void **)&v33;
  turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(0, v6, (uint64_t)v31);
  uint64_t v10 = *((void *)this + 31);
  uint64_t v9 = *((void *)this + 32);
  if (v10 == v9)
  {
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v12 = *((void *)this + 31);
    do
    {
      v11 += (uint64_t)(*(void *)(v12 + 32) - *(void *)(v12 + 24)) >> 3;
      v12 += 48;
    }
    while (v12 != v9);
  }
  std::vector<turi::ml_data_internal::entry_value>::reserve((void **)(v10 + 24), v11);
  if (*((void *)this + 26) >= 2uLL)
  {
    unint64_t v14 = 1;
    do
    {
      uint64_t v15 = *((void *)this + 31);
      uint64_t v16 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)(v15 + 48 * v14);
      uint64_t v18 = *(void *)(v10 + 24);
      uint64_t v17 = *(void *)(v10 + 32);
      *(void *)(v10 + 8) -= 8;
      unint64_t v19 = *(uint64_t **)v16;
      float v20 = (uint64_t *)*((void *)v16 + 1);
      v31[0] = (void **)v10;
      if (v19 != v20)
      {
        uint64_t v21 = (v17 - v18) >> 3;
        do
        {
          uint64_t v22 = *v19++;
          uint64_t v34 = v22 + v21;
          std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)v31, &v34);
        }
        while (v19 != v20);
      }
      uint64_t v23 = v15 + 48 * v14;
      uint64_t v24 = *(void **)(v23 + 24);
      uint64_t v25 = *(void **)(v23 + 32);
      v31[0] = (void **)(v10 + 24);
      while (v24 != v25)
        std::back_insert_iterator<std::vector<xgboost_old::SparseBatch::Entry>>::operator=[abi:ne180100](v31, v24++);
      turi::supervised::xgboost::MLDataBatchIterator::RowBlock::Reset(v16);
      ++v14;
    }
    while (v14 < *((void *)this + 26));
  }
  *((void *)this + 36) = v33;
  uint64_t v26 = *(void **)v10;
  uint64_t v27 = *(void *)(v10 + 8) - *(void *)v10;
  if (!v27) {
    uint64_t v26 = 0;
  }
  *((void *)this + 37) = v26;
  if (*(void *)(v10 + 32) == *(void *)(v10 + 24)) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(void *)(v10 + 24);
  }
  *((void *)this + 38) = v28;
  uint64_t v29 = (v27 >> 3) - 1;
  *((void *)this + 34) = v32;
  *((void *)this + 35) = v29;
  return xgboost_old::utils::Assert(v29 != 0, "MLDataBatchIterator", v13, v31[0]);
}

void turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    void v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    uint64_t v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_22450942C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = **(void **)a1 - v4;
  unint64_t v6 = *(void *)(v3 + 208);
  unint64_t v7 = v5 * a2 / v6 + v4;
  unint64_t v8 = (v5 + v5 * a2) / v6 + v4;
  uint64_t v28 = v3;
  uint64_t v9 = *(void *)(v3 + 224);
  uint64_t v10 = (turi::ml_data_iterator *)(v9 + 360 * a2);
  turi::ml_data_iterator::seek(v10, v7);
  unint64_t v27 = v8;
  if (v7 < v8)
  {
    uint64_t v11 = *(void *)(v28 + 248) + 48 * a2;
    uint64_t v12 = v9 + 360 * a2;
    long long v13 = (unsigned char *)(v12 + 336);
    uint64_t v24 = (unsigned char *)(v12 + 192);
    unint64_t v14 = (void *)(v12 + 320);
    uint64_t v15 = (unsigned char *)(v12 + 194);
    uint64_t v16 = (void *)(v12 + 200);
    uint64_t v17 = (uint64_t *)(v12 + 288);
    uint64_t v18 = (void *)(v12 + 296);
    unint64_t v19 = (uint64_t *)(v12 + 328);
    uint64_t v25 = (void *)(v12 + 280);
    uint64_t v26 = v12 + 304;
    do
    {
      turi::supervised::xgboost::MLDataBatchIterator::FetchSingleRow(v28, (uint64_t)v10, v11);
      if (*v13 || *v24)
      {
        float v20 = (void *)(*(void *)(*(void *)v26 + 96) + 8 * *v14);
        if (*v15) {
          float v20 = v16;
        }
        *v14 += *v20;
      }
      uint64_t v21 = *v17 + 1;
      *uint64_t v17 = v21;
      uint64_t v22 = *((void *)v10 + 16);
      uint64_t v23 = v21 - v22 * *v18;
      *unint64_t v19 = v23;
      if (v23 == v22 && v21 != *v25) {
        turi::ml_data_iterator::load_next_block(v10);
      }
      ++v7;
    }
    while (v7 != v27);
  }
}

void turi::supervised::xgboost::MLDataBatchIterator::FetchSingleRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 336))
  {
    uint64_t v113 = *(void *)(a2 + 304);
    uint64_t v112 = *(void *)(v113 + 56);
    if (v112)
    {
      uint64_t v4 = 0;
      uint64_t v5 = (double *)(*(void *)(v113 + 96) + 8 * *(void *)(a2 + 320) + 8 * (*(unsigned char *)(v113 + 18) == 0));
      uint64_t v114 = a3 + 40;
      long long v115 = (void **)(a3 + 24);
      while (2)
      {
        uint64_t v6 = *(void *)(*(void *)(v113 + 72) + 16 * v4);
        unint64_t v7 = *(void *)(v6 + 64);
        uint64_t v8 = *(void *)(v6 + 104);
        uint64_t v9 = v5;
        switch(*(_DWORD *)(v6 + 24))
        {
          case 0:
            uint64_t v9 = v5 + 1;
            if (!v7) {
              goto LABEL_128;
            }
            float v10 = *v5;
            uint64_t v12 = *(float **)(a3 + 32);
            unint64_t v11 = *(void *)(a3 + 40);
            if ((unint64_t)v12 < v11)
            {
              *(_DWORD *)uint64_t v12 = v8;
              v12[1] = v10;
              goto LABEL_11;
            }
            long long v86 = (float *)*v115;
            uint64_t v87 = ((char *)v12 - (unsigned char *)*v115) >> 3;
            unint64_t v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 61) {
              goto LABEL_146;
            }
            uint64_t v89 = v11 - (void)v86;
            if (v89 >> 2 > v88) {
              unint64_t v88 = v89 >> 2;
            }
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v88;
            }
            if (v90)
            {
              uint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v90);
              long long v86 = *(float **)(a3 + 24);
              uint64_t v12 = *(float **)(a3 + 32);
            }
            else
            {
              uint64_t v91 = 0;
            }
            uint64_t v95 = &v91[8 * v87];
            *(_DWORD *)uint64_t v95 = v8;
            *((float *)v95 + 1) = v10;
            uint64_t v96 = v95;
            if (v12 == v86) {
              goto LABEL_125;
            }
            do
            {
              uint64_t v97 = *((void *)v12 - 1);
              v12 -= 2;
              *((void *)v96 - 1) = v97;
              v96 -= 8;
            }
            while (v12 != v86);
            goto LABEL_124;
          case 1:
            uint64_t v9 = v5 + 1;
            if (*(void *)v5 >= v7) {
              goto LABEL_128;
            }
            int v13 = *(void *)v5 + v8;
            uint64_t v12 = *(float **)(a3 + 32);
            unint64_t v14 = *(void *)(a3 + 40);
            if ((unint64_t)v12 >= v14)
            {
              long long v86 = (float *)*v115;
              uint64_t v92 = ((char *)v12 - (unsigned char *)*v115) >> 3;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61) {
LABEL_146:
              }
                std::vector<float>::__throw_length_error[abi:ne180100]();
              uint64_t v94 = v14 - (void)v86;
              if (v94 >> 2 > v93) {
                unint64_t v93 = v94 >> 2;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v90 = v93;
              }
              if (v90)
              {
                uint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v90);
                long long v86 = *(float **)(a3 + 24);
                uint64_t v12 = *(float **)(a3 + 32);
              }
              else
              {
                uint64_t v91 = 0;
              }
              uint64_t v95 = &v91[8 * v92];
              *(_DWORD *)uint64_t v95 = v13;
              *((_DWORD *)v95 + 1) = 1065353216;
              uint64_t v96 = v95;
              if (v12 != v86)
              {
                do
                {
                  uint64_t v98 = *((void *)v12 - 1);
                  v12 -= 2;
                  *((void *)v96 - 1) = v98;
                  v96 -= 8;
                }
                while (v12 != v86);
LABEL_124:
                long long v86 = (float *)*v115;
              }
LABEL_125:
              uint64_t v15 = v95 + 8;
              *(void *)(a3 + 24) = v96;
              *(void *)(a3 + 32) = v95 + 8;
              *(void *)(a3 + 40) = &v91[8 * v90];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v12 = v13;
              v12[1] = 1.0;
LABEL_11:
              uint64_t v15 = (char *)(v12 + 2);
            }
            *(void *)(a3 + 32) = v15;
LABEL_128:
            ++v4;
            uint64_t v5 = v9;
            if (v4 == v112) {
              break;
            }
            continue;
          case 2:
            uint64_t v16 = *(void *)(v6 + 72);
            if (!v16) {
              goto LABEL_100;
            }
            unint64_t v17 = 0;
            uint64_t v9 = v5;
            do
            {
              double v18 = *v9++;
              double v19 = v18;
              if (v17 < v7)
              {
                int v20 = v17 + v8;
                float v21 = v19;
                uint64_t v23 = *(float **)(a3 + 32);
                unint64_t v22 = *(void *)(a3 + 40);
                if ((unint64_t)v23 >= v22)
                {
                  uint64_t v25 = (float *)*v115;
                  uint64_t v26 = ((char *)v23 - (unsigned char *)*v115) >> 3;
                  unint64_t v27 = v26 + 1;
                  if ((unint64_t)(v26 + 1) >> 61) {
                    goto LABEL_146;
                  }
                  uint64_t v28 = v22 - (void)v25;
                  if (v28 >> 2 > v27) {
                    unint64_t v27 = v28 >> 2;
                  }
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v29 = v27;
                  }
                  if (v29)
                  {
                    uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v29);
                    uint64_t v25 = *(float **)(a3 + 24);
                    uint64_t v23 = *(float **)(a3 + 32);
                  }
                  else
                  {
                    uint64_t v30 = 0;
                  }
                  uint64_t v31 = (float *)&v30[8 * v26];
                  *(_DWORD *)uint64_t v31 = v20;
                  v31[1] = v21;
                  unint64_t v32 = v31;
                  if (v23 != v25)
                  {
                    do
                    {
                      uint64_t v33 = *((void *)v23 - 1);
                      v23 -= 2;
                      *((void *)v32 - 1) = v33;
                      v32 -= 2;
                    }
                    while (v23 != v25);
                    uint64_t v25 = (float *)*v115;
                  }
                  uint64_t v24 = v31 + 2;
                  *(void *)(a3 + 24) = v32;
                  *(void *)(a3 + 32) = v31 + 2;
                  *(void *)(a3 + 40) = &v30[8 * v29];
                  if (v25) {
                    operator delete(v25);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v23 = v20;
                  v23[1] = v21;
                  uint64_t v24 = v23 + 2;
                }
                *(void *)(a3 + 32) = v24;
              }
              ++v17;
            }
            while (v17 != v16);
            goto LABEL_128;
          case 3:
            double v34 = *v5;
            uint64_t v9 = v5 + 1;
            if (!*(void *)v5) {
              goto LABEL_128;
            }
            uint64_t v35 = 0;
            do
            {
              if (*(void *)v9 < v7)
              {
                int v36 = *(void *)v9 + v8;
                uint64_t v38 = *(char **)(a3 + 32);
                unint64_t v37 = *(void *)(a3 + 40);
                if ((unint64_t)v38 >= v37)
                {
                  unint64_t v40 = (char *)*v115;
                  uint64_t v41 = (v38 - (unsigned char *)*v115) >> 3;
                  unint64_t v42 = v41 + 1;
                  if ((unint64_t)(v41 + 1) >> 61) {
                    goto LABEL_146;
                  }
                  uint64_t v43 = v37 - (void)v40;
                  if (v43 >> 2 > v42) {
                    unint64_t v42 = v43 >> 2;
                  }
                  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v44 = v42;
                  }
                  if (v44)
                  {
                    unint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v44);
                    unint64_t v40 = *(char **)(a3 + 24);
                    uint64_t v38 = *(char **)(a3 + 32);
                  }
                  else
                  {
                    unint64_t v45 = 0;
                  }
                  unint64_t v46 = &v45[8 * v41];
                  *(_DWORD *)unint64_t v46 = v36;
                  *((_DWORD *)v46 + 1) = 1065353216;
                  uint64_t v47 = v46;
                  if (v38 != v40)
                  {
                    do
                    {
                      uint64_t v48 = *((void *)v38 - 1);
                      v38 -= 8;
                      *((void *)v47 - 1) = v48;
                      v47 -= 8;
                    }
                    while (v38 != v40);
                    unint64_t v40 = (char *)*v115;
                  }
                  uint64_t v39 = v46 + 8;
                  *(void *)(a3 + 24) = v47;
                  *(void *)(a3 + 32) = v46 + 8;
                  *(void *)(a3 + 40) = &v45[8 * v44];
                  if (v40) {
                    operator delete(v40);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v38 = v36;
                  *((_DWORD *)v38 + 1) = 1065353216;
                  uint64_t v39 = v38 + 8;
                }
                *(void *)(a3 + 32) = v39;
              }
              ++v35;
              ++v9;
            }
            while (v35 != *(void *)&v34);
            goto LABEL_128;
          case 4:
            uint64_t v9 = v5 + 1;
            double v49 = *v5;
            if (!*(void *)v5) {
              goto LABEL_128;
            }
            uint64_t v50 = 0;
            float v51 = v5;
            do
            {
              double v52 = v51[2];
              v51 += 2;
              double v53 = v52;
              if (*(void *)v9 < v7)
              {
                int v54 = *(void *)v9 + v8;
                float v55 = v53;
                uint64_t v57 = *(float **)(a3 + 32);
                unint64_t v56 = *(void *)(a3 + 40);
                if ((unint64_t)v57 >= v56)
                {
                  uint64_t v59 = (float *)*v115;
                  uint64_t v60 = ((char *)v57 - (unsigned char *)*v115) >> 3;
                  unint64_t v61 = v60 + 1;
                  if ((unint64_t)(v60 + 1) >> 61) {
                    goto LABEL_146;
                  }
                  uint64_t v62 = v56 - (void)v59;
                  if (v62 >> 2 > v61) {
                    unint64_t v61 = v62 >> 2;
                  }
                  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v63 = v61;
                  }
                  if (v63)
                  {
                    atomic_ullong *volatile v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v63);
                    uint64_t v59 = *(float **)(a3 + 24);
                    uint64_t v57 = *(float **)(a3 + 32);
                  }
                  else
                  {
                    atomic_ullong *volatile v64 = 0;
                  }
                  unint64_t v65 = (float *)&v64[8 * v60];
                  *(_DWORD *)unint64_t v65 = v54;
                  v65[1] = v55;
                  char v66 = v65;
                  if (v57 != v59)
                  {
                    do
                    {
                      uint64_t v67 = *((void *)v57 - 1);
                      v57 -= 2;
                      *((void *)v66 - 1) = v67;
                      v66 -= 2;
                    }
                    while (v57 != v59);
                    uint64_t v59 = (float *)*v115;
                  }
                  uint64_t v58 = v65 + 2;
                  *(void *)(a3 + 24) = v66;
                  *(void *)(a3 + 32) = v65 + 2;
                  *(void *)(a3 + 40) = &v64[8 * v63];
                  if (v59) {
                    operator delete(v59);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v57 = v54;
                  v57[1] = v55;
                  uint64_t v58 = v57 + 2;
                }
                *(void *)(a3 + 32) = v58;
              }
              ++v50;
              uint64_t v9 = v5 + 3;
              uint64_t v5 = v51;
            }
            while (v50 != *(void *)&v49);
            goto LABEL_128;
          case 5:
          case 6:
            goto LABEL_128;
          case 7:
            uint64_t v68 = *(void *)(v6 + 72);
            if (!v68) {
              goto LABEL_100;
            }
            unint64_t v69 = 0;
            uint64_t v9 = v5;
            do
            {
              double v70 = *v9++;
              double v71 = v70;
              if (v69 < v7)
              {
                int v72 = v69 + v8;
                float v73 = v71;
                uint64_t v75 = *(float **)(a3 + 32);
                unint64_t v74 = *(void *)(a3 + 40);
                if ((unint64_t)v75 >= v74)
                {
                  uint64_t v77 = (float *)*v115;
                  uint64_t v78 = ((char *)v75 - (unsigned char *)*v115) >> 3;
                  unint64_t v79 = v78 + 1;
                  if ((unint64_t)(v78 + 1) >> 61) {
                    goto LABEL_146;
                  }
                  uint64_t v80 = v74 - (void)v77;
                  if (v80 >> 2 > v79) {
                    unint64_t v79 = v80 >> 2;
                  }
                  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v81 = v79;
                  }
                  if (v81)
                  {
                    float v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v81);
                    uint64_t v77 = *(float **)(a3 + 24);
                    uint64_t v75 = *(float **)(a3 + 32);
                  }
                  else
                  {
                    float v82 = 0;
                  }
                  uint64_t v83 = (float *)&v82[8 * v78];
                  *(_DWORD *)uint64_t v83 = v72;
                  v83[1] = v73;
                  unint64_t v84 = v83;
                  if (v75 != v77)
                  {
                    do
                    {
                      uint64_t v85 = *((void *)v75 - 1);
                      v75 -= 2;
                      *((void *)v84 - 1) = v85;
                      v84 -= 2;
                    }
                    while (v75 != v77);
                    uint64_t v77 = (float *)*v115;
                  }
                  uint64_t v76 = v83 + 2;
                  *(void *)(a3 + 24) = v84;
                  *(void *)(a3 + 32) = v83 + 2;
                  *(void *)(a3 + 40) = &v82[8 * v81];
                  if (v77) {
                    operator delete(v77);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v75 = v72;
                  v75[1] = v73;
                  uint64_t v76 = v75 + 2;
                }
                *(void *)(a3 + 32) = v76;
              }
              ++v69;
            }
            while (v69 != v68);
            goto LABEL_128;
          default:
LABEL_100:
            uint64_t v9 = v5;
            goto LABEL_128;
        }
        break;
      }
    }
  }
  unint64_t v99 = *(void *)(a3 + 16);
  uint64_t v100 = (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3;
  uint64_t v101 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v101 >= v99)
  {
    uint64_t v103 = *(uint64_t **)a3;
    uint64_t v104 = ((uint64_t)v101 - *(void *)a3) >> 3;
    unint64_t v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v106 = v99 - (void)v103;
    if (v106 >> 2 > v105) {
      unint64_t v105 = v106 >> 2;
    }
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v107 = v105;
    }
    if (v107)
    {
      uint64_t v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3 + 16, v107);
      uint64_t v103 = *(uint64_t **)a3;
      uint64_t v101 = *(uint64_t **)(a3 + 8);
    }
    else
    {
      uint64_t v108 = 0;
    }
    unsigned int v109 = (uint64_t *)&v108[8 * v104];
    uint64_t v110 = &v108[8 * v107];
    *unsigned int v109 = v100;
    uint64_t v102 = v109 + 1;
    while (v101 != v103)
    {
      uint64_t v111 = *--v101;
      *--unsigned int v109 = v111;
    }
    *(void *)a3 = v109;
    *(void *)(a3 + 8) = v102;
    *(void *)(a3 + 16) = v110;
    if (v103) {
      operator delete(v103);
    }
  }
  else
  {
    uint64_t *v101 = v100;
    uint64_t v102 = v101 + 1;
  }
  *(void *)(a3 + 8) = v102;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224717279 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x8000000224717279 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  for (unint64_t i = a1[1]; i < a1[2]; ++i)
    turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}::operator()(*a1, i);
}

void ***std::back_insert_iterator<std::vector<xgboost_old::SparseBatch::Entry>>::operator=[abi:ne180100](void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  long long v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    unint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = *a2;
    float v10 = v16 + 8;
    double v19 = (char *)*v4;
    double v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      double v18 = (char *)*v4;
    }
    *uint64_t v4 = v16;
    v4[1] = v10;
    void v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *long long v5 = *a2;
    float v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::DiskPagedFMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26D785238;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  turi::supervised::xgboost::ColBatchIter::ColBatchIter((turi::supervised::xgboost::ColBatchIter *)(a1 + 104));
  *(void *)(a1 + 272) = a4;
  *(void *)(a1 + 16) = a2;
  return a1;
}

void sub_22450A060(_Unwind_Exception *a1)
{
  long long v5 = *(void **)(v1 + 80);
  if (v5)
  {
    *(void *)(v1 + 88) = v5;
    operator delete(v5);
  }
  turi::supervised::xgboost::DiskPagedFMatrix::DiskPagedFMatrix(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::RowIterator(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  return *((void *)this + 2);
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::ColIterator(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  uint64_t v2 = (*(uint64_t (**)(turi::supervised::xgboost::DiskPagedFMatrix *))(*(void *)this + 40))(this);
  uint64_t v4 = (void **)((char *)this + 80);
  uint64_t v3 = (char *)*((void *)this + 10);
  *((void *)this + 11) = v3;
  if (v2)
  {
    uint64_t v5 = v2;
    uint64_t v6 = 0;
    uint64_t v7 = (void *)((char *)this + 96);
    do
    {
      if ((unint64_t)v3 >= *v7)
      {
        unint64_t v8 = (char *)*v4;
        uint64_t v9 = (v3 - (unsigned char *)*v4) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = *v7 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 96, v12);
          unint64_t v8 = (char *)*((void *)this + 10);
          uint64_t v3 = (char *)*((void *)this + 11);
        }
        else
        {
          uint64_t v13 = 0;
        }
        unint64_t v14 = &v13[4 * v9];
        *(_DWORD *)unint64_t v14 = v6;
        uint64_t v15 = v14 + 4;
        while (v3 != v8)
        {
          int v16 = *((_DWORD *)v3 - 1);
          v3 -= 4;
          *((_DWORD *)v14 - 1) = v16;
          v14 -= 4;
        }
        *((void *)this + 10) = v14;
        *((void *)this + 11) = v15;
        *((void *)this + 12) = &v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
        uint64_t v3 = v15;
      }
      else
      {
        *(_DWORD *)uint64_t v3 = v6;
        v3 += 4;
      }
      *((void *)this + 11) = v3;
      ++v6;
    }
    while (v6 != v5);
    unint64_t v17 = (char *)*v4;
  }
  else
  {
    unint64_t v17 = v3;
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + 144, v17, (uint64_t)v3, (v3 - v17) >> 2);
  turi::supervised::xgboost::ColBatchIter::BeforeFirst((turi::supervised::xgboost::DiskPagedFMatrix *)((char *)this + 104));
  return (uint64_t)this + 104;
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::ColIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v6 = (void **)(a1 + 80);
  uint64_t v5 = *(char **)(a1 + 80);
  *(void *)(a1 + 88) = v5;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7 == *a2)
  {
    unint64_t v22 = v5;
  }
  else
  {
    unint64_t v9 = v4;
    unint64_t v10 = 0;
    uint64_t v11 = (void *)(a1 + 96);
    do
    {
      unint64_t v12 = *(unsigned int *)(v8 + 4 * v10);
      if (v9 > v12)
      {
        if ((unint64_t)v5 >= *v11)
        {
          unint64_t v14 = (char *)*v6;
          uint64_t v15 = (v5 - (unsigned char *)*v6) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = *v11 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v18);
            unint64_t v14 = *(char **)(a1 + 80);
            uint64_t v5 = *(char **)(a1 + 88);
            LODWORD(v12) = *(_DWORD *)(v8 + 4 * v10);
          }
          else
          {
            double v19 = 0;
          }
          uint64_t v20 = &v19[4 * v15];
          *(_DWORD *)uint64_t v20 = v12;
          uint64_t v13 = v20 + 4;
          while (v5 != v14)
          {
            int v21 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *(void *)(a1 + 80) = v20;
          *(void *)(a1 + 88) = v13;
          *(void *)(a1 + 96) = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v5 = v12;
          uint64_t v13 = v5 + 4;
        }
        *(void *)(a1 + 88) = v13;
        uint64_t v8 = *a2;
        uint64_t v7 = a2[1];
        uint64_t v5 = v13;
      }
      ++v10;
    }
    while (v10 < (v7 - v8) >> 2);
    unint64_t v22 = (char *)*v6;
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), v22, (uint64_t)v5, (v5 - v22) >> 2);
  turi::supervised::xgboost::ColBatchIter::BeforeFirst((turi::supervised::xgboost::ColBatchIter *)(a1 + 104));
  return a1 + 104;
}

void turi::supervised::xgboost::DiskPagedFMatrix::InitColAccess(std::vector<unsigned int> *a1, uint64_t a2, float a3)
{
  if ((*((uint64_t (**)(std::vector<unsigned int> *))a1->__begin_ + 4))(a1)) {
    return;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  int v7 = v6 & 0x3F;
  if (v6 > 0x3F || v7 != 0)
  {
    int v9 = 0;
    unint64_t v10 = *(void **)a2;
    uint64_t v11 = *(void *)a2 + 8 * (v6 >> 6);
    do
    {
      if (((*v10 >> v9) & 1) == 0) {
        turi::supervised::xgboost::DiskPagedFMatrix::InitColAccess(std::vector<BOOL> const&,float,unsigned long)::{lambda(void)#1}::operator()();
      }
      v10 += v9 == 63;
      if (v9 == 63) {
        int v9 = 0;
      }
      else {
        ++v9;
      }
    }
    while (v9 != v7 || v10 != (void *)v11);
  }
  turi::supervised::xgboost::DiskPagedFMatrix::InitColData(a1, a3);
  unint64_t v12 = (*((uint64_t (**)(std::vector<unsigned int> *))a1->__begin_ + 5))(a1);
  float v51 = 0;
  double v52 = 0;
  double v53 = 0;
  if (v12)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      float v14 = (*((float (**)(std::vector<unsigned int> *, uint64_t))a1->__begin_ + 7))(a1, i);
      float v15 = v14;
      unint64_t v16 = v52;
      if (v52 >= v53)
      {
        unint64_t v18 = v51;
        uint64_t v19 = v52 - v51;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)v53 - (char *)v51;
        if (((char *)v53 - (char *)v51) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v53, v22);
          unint64_t v18 = v51;
          unint64_t v16 = v52;
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v24 = (float *)&v23[4 * v19];
        *uint64_t v24 = v15;
        uint64_t v17 = v24 + 1;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16-- - 1);
          *((_DWORD *)v24-- - 1) = v25;
        }
        float v51 = v24;
        double v52 = v17;
        double v53 = (float *)&v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        float *v52 = v14;
        uint64_t v17 = v16 + 1;
      }
      double v52 = v17;
    }
  }
  std::__sort<std::__less<float,float> &,float *>();
  uint64_t v26 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v26 = 0;
  *(uint64x2_t *)(v26 + 8) = vshlq_u64((uint64x2_t)vdupq_n_s64(v12), (uint64x2_t)xmmword_2247171B0);
  *((void *)v26 + 3) = (3 * v12) >> 2;
  *((void *)v26 + 4) = v12 - 1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Feature density quantile (0%, 25%, 50%, 100%): ", 47);
  for (uint64_t j = 0; j != 40; j += 8)
  {
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
  }
  unint64_t v29 = (int *)global_logger();
  if (v29[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v29)) {
      goto LABEL_55;
    }
    uint64_t v30 = (file_logger *)global_logger();
    started = file_logger::start_stream(v30, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "InitColAccess", 556, 1);
    unint64_t v32 = pthread_getspecific(*((void *)started + 74));
    if (v32 && *((unsigned char *)v32 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32 + 2, (uint64_t)"Number of features after expand: ", 33);
    }
    uint64_t v33 = file_logger::operator<<<unsigned long>((uint64_t)started);
    double v34 = pthread_getspecific(*(void *)(v33 + 592));
    if (v34)
    {
      if (*((unsigned char *)v34 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(v34[2] - 24) + 16));
        uint64_t v35 = std::locale::use_facet(&v54, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
        std::locale::~locale(&v54);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v33);
        if (*(_DWORD *)(v33 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  int v36 = (int *)global_logger();
  if (v36[169] <= 2)
  {
    if (!cppipc::must_cancel((cppipc *)v36))
    {
      unint64_t v37 = (file_logger *)global_logger();
      uint64_t v38 = file_logger::start_stream(v37, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "InitColAccess", 558, 1);
      std::stringbuf::str();
      uint64_t v39 = file_logger::operator<<<std::string>((uint64_t)v38, (uint64_t)&__p);
      unint64_t v40 = pthread_getspecific(*(void *)(v39 + 592));
      if (v40)
      {
        if (*((unsigned char *)v40 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(v40[2] - 24) + 16));
          uint64_t v41 = std::locale::use_facet(&v54, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
          std::locale::~locale(&v54);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v39);
          if (*(_DWORD *)(v39 + 600) == 7)
          {
            __print_back_trace();
            unint64_t v44 = __cxa_allocate_exception(8uLL);
            void *v44 = "LOG_FATAL encountered";
            __cxa_throw(v44, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (v46 < 0) {
        operator delete(__p);
      }
      goto LABEL_49;
    }
LABEL_55:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_49:
  v47[0] = *MEMORY[0x263F8C2B8];
  uint64_t v42 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v47 + *(void *)(v47[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v48[0] = v42;
  v48[1] = MEMORY[0x263F8C318] + 16;
  if (v49 < 0) {
    operator delete((void *)v48[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](&v50);
  operator delete(v26);
  if (v51)
  {
    double v52 = v51;
    operator delete(v51);
  }
}

void sub_22450AA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::locale::~locale((std::locale *)(v16 - 88));
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  operator delete(v15);
  unint64_t v18 = *(void **)(v16 - 112);
  if (v18)
  {
    *(void *)(v16 - 104) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

BOOL turi::supervised::xgboost::DiskPagedFMatrix::HaveColAccess(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  return *((void *)this + 8) != *((void *)this + 7);
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::NumCol(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  uint64_t v2 = (*(uint64_t (**)(turi::supervised::xgboost::DiskPagedFMatrix *))(*(void *)this + 32))(this);
  xgboost_old::utils::Check(v2, "NumCol:need column access", v3);
  return (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3;
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::GetColSize(turi::supervised::xgboost::DiskPagedFMatrix *this, uint64_t a2)
{
  return *(void *)(*((void *)this + 7) + 8 * a2);
}

float turi::supervised::xgboost::DiskPagedFMatrix::GetColDensity(turi::supervised::xgboost::DiskPagedFMatrix *this, uint64_t a2)
{
  return 1.0
       - (float)((float)(unint64_t)(*((void *)this + 6) - *(void *)(*((void *)this + 7) + 8 * a2))
               / (float)*((unint64_t *)this + 6));
}

void turi::supervised::xgboost::DiskPagedFMatrix::~DiskPagedFMatrix(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  turi::supervised::xgboost::DiskPagedFMatrix::~DiskPagedFMatrix(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = &unk_26D785238;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  turi::supervised::xgboost::ColBatchIter::~ColBatchIter((turi::thread_pool **)this + 13);
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
}

turi::supervised::xgboost::ColBatchIter *turi::supervised::xgboost::ColBatchIter::ColBatchIter(turi::supervised::xgboost::ColBatchIter *this)
{
  *((void *)this + 2) = 2;
  uint64_t v2 = (unint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 88) = 0u;
  *(void *)this = &unk_26D7852B8;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 8) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 13) = 0;
  unint64_t v3 = (unint64_t)turi::thread::cpu_count(this) >> 1;
  if (v3 <= 2) {
    unint64_t v3 = 2;
  }
  unint64_t *v2 = v3;
  std::allocate_shared[abi:ne180100]<turi::thread_pool,std::allocator<turi::thread_pool>,unsigned long &,void>(v2, &v7);
  long long v4 = v7;
  long long v7 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  return this;
}

void sub_22450AC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  unint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 128) = v12;
    operator delete(v12);
  }
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v9 + 64);
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v13 = *(void **)(v9 + 40);
  if (v13)
  {
    *(void *)(v9 + 48) = v13;
    operator delete(v13);
  }
  float v14 = *(std::__shared_weak_count **)(v9 + 32);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::ColBatchIter::BeforeFirst(turi::supervised::xgboost::ColBatchIter *this)
{
  if (!*((unsigned char *)this + 8)) {
    turi::supervised::xgboost::ColBatchIter::BeforeFirst(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (char *)*((void *)this + 8);
  unint64_t v3 = (char *)*((void *)this + 9);
  if (v2 != v3)
  {
    long long v4 = (char *)this + 40;
    do
    {
      turi::supervised::xgboost::SFrameSparsePage::unload((turi::supervised::xgboost::SFrameSparsePage *)v2);
      if (v2 + 72 != v4) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v2 + 72, *((char **)this + 5), *((void *)this + 6), (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2);
      }
      v2 += 408;
    }
    while (v2 != v3);
  }
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)this + 11);
  unint64_t v5 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3);
  uint64_t v6 = 0;
  long long v7 = 0;
  std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::resize((uint64_t *)this + 11, v5, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *((void *)this + 14) = 0;
}

void sub_22450ADA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL turi::supervised::xgboost::ColBatchIter::Next(turi::supervised::xgboost::ColBatchIter *this)
{
  if (!*((unsigned char *)this + 8)) {
    turi::supervised::xgboost::ColBatchIter::Next(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = *((void *)this + 14);
  uint64_t v3 = *((void *)this + 8);
  unint64_t v4 = 0xFAFAFAFAFAFAFAFBLL * ((*((void *)this + 9) - v3) >> 3);
  if (v2 != v4)
  {
    if (v2)
    {
      turi::supervised::xgboost::SFrameSparsePage::unload((turi::supervised::xgboost::SFrameSparsePage *)(v3 + 408 * v2 - 408));
      uint64_t v5 = *((void *)this + 14);
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(turi::supervised::xgboost::ColBatchIter::PageLoader **)(*((void *)this + 11) + 16 * v5);
    if (!v6) {
      operator new();
    }
    turi::supervised::xgboost::ColBatchIter::PageLoader::wait(v6);
    unint64_t v7 = *((void *)this + 2);
    if (v7)
    {
      for (unint64_t i = 1; i <= v7; ++i)
      {
        unint64_t v9 = i + *((void *)this + 14);
        if (v9 < 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3)
          && !*(void *)(*((void *)this + 11) + 16 * v9))
        {
          operator new();
        }
      }
    }
    unint64_t v10 = (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2;
    *(void *)&long long v26 = 0;
    DWORD2(v26) = 0;
    std::vector<xgboost_old::SparseBatch::Inst>::resize((uint64_t)this + 120, v10, &v26);
    uint64_t v11 = *((void *)this + 14);
    uint64_t v12 = *((void *)this + 6);
    if (v12 == *((void *)this + 5))
    {
      uint64_t v22 = 0;
      uint64_t v21 = *((void *)this + 6);
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      float v15 = (void *)(*((void *)this + 8) + 408 * v11);
      uint64_t v16 = v15 + 6;
      do
      {
        if (v15[7] == *v16) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = *v16;
        }
        uint64_t v18 = *v15 + 8 * v14;
        uint64_t v19 = v17 + 8 * *(void *)v18;
        ++v14;
        LODWORD(v18) = *(_DWORD *)(v18 + 8) - *(void *)v18;
        uint64_t v20 = *((void *)this + 15) + v13;
        *(void *)uint64_t v20 = v19;
        *(_DWORD *)(v20 + 8) = v18;
        uint64_t v21 = *((void *)this + 5);
        uint64_t v12 = *((void *)this + 6);
        v13 += 16;
      }
      while (v14 < (v12 - v21) >> 2);
      uint64_t v22 = (v12 - v21) >> 2;
    }
    if (v12 == v21) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v21;
    }
    *((void *)this + 18) = v22;
    *((void *)this + 19) = v23;
    if (*((void *)this + 16) == *((void *)this + 15)) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *((void *)this + 15);
    }
    *((void *)this + 20) = v24;
    *((void *)this + 14) = v11 + 1;
  }
  return v2 != v4;
}

void sub_22450B040(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A0C406080217BLL);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::ColBatchIter::Value(turi::supervised::xgboost::ColBatchIter *this)
{
  if (!*((unsigned char *)this + 8)) {
    turi::supervised::xgboost::ColBatchIter::Value(void)const::{lambda(void)#1}::operator()();
  }
  return (uint64_t)this + 144;
}

void turi::supervised::xgboost::ColBatchIter::~ColBatchIter(turi::thread_pool **this)
{
  turi::supervised::xgboost::ColBatchIter::~ColBatchIter(this);
  JUMPOUT(0x22A614FA0);
}

{
  turi::thread_pool *v2;
  turi::thread_pool *v3;
  std::__shared_weak_count *v4;
  void **v5;

  *this = (turi::thread_pool *)&unk_26D7852B8;
  turi::supervised::xgboost::ColBatchIter::Clear((turi::supervised::xgboost::ColBatchIter *)this);
  turi::thread_pool::join(this[3]);
  uint64_t v2 = this[15];
  if (v2)
  {
    this[16] = v2;
    operator delete(v2);
  }
  uint64_t v5 = (void **)(this + 11);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(this + 8);
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = this[5];
  if (v3)
  {
    this[6] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)this[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *std::allocate_shared[abi:ne180100]<turi::thread_pool,std::allocator<turi::thread_pool>,unsigned long &,void>@<X0>(unint64_t *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x238uLL);
  __n128 result = std::__shared_ptr_emplace<turi::thread_pool>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<turi::thread_pool>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22450B120(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::thread_pool>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<turi::thread_pool>,0>(void *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D75C280;
  turi::thread_pool::thread_pool((turi::thread_pool *)(a1 + 3), *a2, 0);
  return a1;
}

void sub_22450B184(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 408;
        std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  turi::sframe::~sframe((turi::sframe *)(a2 + 104));
  uint64_t v3 = *(void **)(a2 + 72);
  if (v3)
  {
    *(void *)(a2 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(void *)(a2 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a2 + 24);
  if (v5)
  {
    *(void *)(a2 + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v6;
    operator delete(v6);
  }
}

void turi::supervised::xgboost::SFrameSparsePage::~SFrameSparsePage(turi::supervised::xgboost::SFrameSparsePage *this)
{
  turi::sframe::~sframe((turi::supervised::xgboost::SFrameSparsePage *)((char *)this + 104));
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
  }
}

void turi::supervised::xgboost::ColBatchIter::BeforeFirst(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_inited", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 382, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::ColBatchIter::BeforeFirst(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22450B418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::resize(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v7 = *a1 + 16 * a2;
      while (v4 != v7)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v4 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v4 -= 16;
      }
      a1[1] = v7;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__append(a1, v6, a3);
  }
}

void **std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__append(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  __n128 result = (void **)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(result - 1);
  if (a2 <= (v8 - (uint64_t)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = &v9[2 * a2];
      do
      {
        void *v9 = *a3;
        uint64_t v17 = a3[1];
        v9[1] = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        v9 += 2;
      }
      while (v9 != v16);
      unint64_t v9 = v16;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    uint64_t v10 = (uint64_t)v9 - *a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - *a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    void v21[4] = result;
    if (v14) {
      float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v14);
    }
    else {
      float v15 = 0;
    }
    uint64_t v18 = &v15[16 * v12];
    v21[0] = v15;
    v21[1] = v18;
    uint64_t v21[3] = &v15[16 * v14];
    uint64_t v19 = &v18[16 * a2];
    do
    {
      *(void *)uint64_t v18 = *a3;
      uint64_t v20 = a3[1];
      *((void *)v18 + 1) = v20;
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      v18 += 16;
    }
    while (v18 != v19);
    void v21[2] = v19;
    std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__swap_out_circular_buffer(a1, v21);
    return std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v21);
  }
  return result;
}

void sub_22450B6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>,std::reverse_iterator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>*>,std::reverse_iterator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>*>,std::reverse_iterator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>,std::reverse_iterator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>*>,std::reverse_iterator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>*>,std::reverse_iterator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>,std::reverse_iterator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>,std::reverse_iterator<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::supervised::xgboost::ColBatchIter::Next(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_inited", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 392, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::ColBatchIter::Next(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22450B938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::reset[abi:ne180100]<turi::supervised::xgboost::ColBatchIter::PageLoader,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::shared_ptr[abi:ne180100]<turi::supervised::xgboost::ColBatchIter::PageLoader,void>(&v2, a2);
}

uint64_t turi::supervised::xgboost::ColBatchIter::PageLoader::wait(turi::supervised::xgboost::ColBatchIter::PageLoader *this)
{
  unint64_t v11 = (pthread_mutex_t *)((char *)this + 56);
  char v12 = 1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  while (!*((unsigned char *)this + 128))
  {
    uint64_t v2 = pthread_cond_wait((pthread_cond_t *)((char *)this + 8), v11);
    assert_msg(v2 == 0, (uint64_t)"Condition variable wait error %d", v3, v4, v5, v6, v7, v8, v2);
    uint64_t v13 = 0;
    char v12 = 1;
    char v14 = 0;
    std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v13);
  }
  if (*((void *)this + 15))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "Canceled by user";
    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
  }
  return std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
}

void sub_22450BB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::shared_ptr[abi:ne180100]<turi::supervised::xgboost::ColBatchIter::PageLoader,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22450BC00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::reset[abi:ne180100]((turi::supervised::xgboost::ColBatchIter::PageLoader **)va, 0);
  _Unwind_Resume(a1);
}

turi::supervised::xgboost::ColBatchIter::PageLoader *std::__shared_ptr_pointer<turi::supervised::xgboost::ColBatchIter::PageLoader *,std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::__shared_ptr_default_delete<turi::supervised::xgboost::ColBatchIter::PageLoader,turi::supervised::xgboost::ColBatchIter::PageLoader>,std::allocator<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(turi::supervised::xgboost::ColBatchIter::PageLoader **)(a1 + 24);
  if (result)
  {
    turi::supervised::xgboost::ColBatchIter::PageLoader::~PageLoader(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::xgboost::ColBatchIter::PageLoader *,std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::__shared_ptr_default_delete<turi::supervised::xgboost::ColBatchIter::PageLoader,turi::supervised::xgboost::ColBatchIter::PageLoader>,std::allocator<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::supervised::xgboost::ColBatchIter::PageLoader::~PageLoader(turi::supervised::xgboost::ColBatchIter::PageLoader *this)
{
}

void sub_22450BCE4(void *a1)
{
}

turi::supervised::xgboost::ColBatchIter::PageLoader *std::unique_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::reset[abi:ne180100](turi::supervised::xgboost::ColBatchIter::PageLoader **a1, turi::supervised::xgboost::ColBatchIter::PageLoader *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::supervised::xgboost::ColBatchIter::PageLoader::~PageLoader(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

turi::supervised::xgboost::ColBatchIter::PageLoader *turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::ColBatchIter::PageLoader *this, turi::supervised::xgboost::SFrameSparsePage *a2, turi::thread_pool *a3)
{
  *(void *)this = a2;
  uint64_t v5 = (pthread_mutex_t *)((char *)this + 56);
  turi::conditional::conditional((pthread_cond_t *)((char *)this + 8));
  uint64_t v6 = pthread_mutex_init(v5, 0);
  assert_msg(v6 == 0, (uint64_t)"Mutex create error %d", v7, v8, v9, v10, v11, v12, v6);
  *((void *)this + std::exception_ptr::~exception_ptr((std::exception_ptr *)this + 15) = 0;
  *((unsigned char *)this + 128) = 0;
  v14[0] = (uint64_t)boost::function0<void>::assign_to<turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::SFrameSparsePage &,turi::thread_pool &)::{lambda(void)#1}>(turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::SFrameSparsePage &,turi::thread_pool &)::{lambda(void)#1})::stored_vtable
         + 1;
  v14[1] = (uint64_t)this;
  turi::thread_pool::launch((uint64_t)a3, (uint64_t)v14, -1);
  boost::function0<void>::~function0(v14);
  return this;
}

void sub_22450BDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::function0<void>::~function0((uint64_t *)va);
  std::exception_ptr::~exception_ptr(v5);
  turi::mutex::~mutex(v4);
  turi::conditional::~conditional(v3);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::SFrameSparsePage &,turi::thread_pool &)::{lambda(void)#1}>::manage(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        a2[4] = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002247174A0 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002247174A0 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    *(void *)a2 = *(void *)result;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::SFrameSparsePage &,turi::thread_pool &)::{lambda(void)#1},void>::invoke(turi::supervised::xgboost::SFrameSparsePage ***a1)
{
}

void sub_22450BF00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  std::exception_ptr::operator=(v10 + 15, &a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x22450BEE8);
}

void turi::supervised::xgboost::SFrameSparsePage::load(turi::supervised::xgboost::SFrameSparsePage *this)
{
  if (*((unsigned char *)this + 400))
  {
    uint64_t v1 = this;
    if (!*((unsigned char *)this + 96))
    {
      uint64_t v2 = *(void **)this;
      if (*(void *)this == *((void *)this + 1))
      {
        uint64_t v3 = (char *)this + 48;
        if (*((void *)this + 6) == *((void *)this + 7))
        {
          uint64_t v5 = (char *)this + 16;
          unint64_t v4 = *((void *)this + 2);
          *((unsigned char *)this + 96) = 1;
          if ((unint64_t)v2 >= v4)
          {
            uint64_t v7 = v4 - (void)v2;
            uint64_t v8 = v7 >> 2;
            if ((unint64_t)(v7 >> 2) <= 1) {
              uint64_t v8 = 1;
            }
            if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v9 = v8;
            }
            uint64_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 16, v9);
            uint64_t v11 = *(char **)v1;
            uint64_t v12 = (char *)*((void *)v1 + 1);
            char v14 = &v10[v13];
            *uint64_t v10 = 0;
            uint64_t v6 = (char *)(v10 + 1);
            while (v12 != v11)
            {
              uint64_t v15 = *((void *)v12 - 1);
              v12 -= 8;
              *--uint64_t v10 = v15;
            }
            *(void *)uint64_t v1 = v10;
            *((void *)v1 + 1) = v6;
            *((void *)v1 + 2) = v14;
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            void *v2 = 0;
            uint64_t v6 = (char *)(v2 + 1);
          }
          *((void *)v1 + 1) = v6;
          uint64_t v16 = (_DWORD *)*((void *)v1 + 9);
          uint64_t v17 = (_DWORD *)*((void *)v1 + 10);
          uint64_t v47 = v1;
          for (i = 0; v16 != v17; uint64_t v6 = v23)
          {
            unint64_t v19 = *((void *)v1 + 2);
            uint64_t v20 = *(void *)(*((void *)v1 + 3) + 8 * (*v16 + 1))
                - *(void *)(*((void *)v1 + 3) + 8 * *v16);
            uint64_t v21 = (void **)v1;
            uint64_t v22 = *((void *)v6 - 1) + v20;
            if ((unint64_t)v6 >= v19)
            {
              uint64_t v24 = (char *)*v21;
              uint64_t v25 = (v6 - (unsigned char *)*v21) >> 3;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v27 = v19 - (void)v24;
              if (v27 >> 2 > v26) {
                unint64_t v26 = v27 >> 2;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v5, v28);
                uint64_t v24 = *(char **)v47;
                uint64_t v6 = (char *)*((void *)v47 + 1);
              }
              else
              {
                unint64_t v29 = 0;
              }
              uint64_t v30 = &v29[8 * v25];
              *(void *)uint64_t v30 = v22;
              uint64_t v23 = v30 + 8;
              if (v6 == v24)
              {
                uint64_t v1 = v47;
              }
              else
              {
                uint64_t v1 = v47;
                do
                {
                  uint64_t v31 = *((void *)v6 - 1);
                  v6 -= 8;
                  *((void *)v30 - 1) = v31;
                  v30 -= 8;
                }
                while (v6 != v24);
              }
              *(void *)uint64_t v1 = v30;
              *((void *)v1 + 1) = v23;
              *((void *)v1 + 2) = &v29[8 * v28];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(void *)uint64_t v6 = v22;
              uint64_t v23 = v6 + 8;
              uint64_t v1 = (turi::supervised::xgboost::SFrameSparsePage *)v21;
            }
            *((void *)v1 + 1) = v23;
            i += v20;
            ++v16;
          }
          std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v3, i);
          std::string __p = 0;
          char v49 = 0;
          unint64_t v50 = 0;
          if (*((void *)v1 + 10) == *((void *)v1 + 9))
          {
            unint64_t v32 = 0;
            uint64_t v44 = 0;
          }
          else
          {
            unint64_t v32 = 0;
            unint64_t v33 = 0;
            do
            {
              if ((unint64_t)v32 >= v50)
              {
                double v34 = __p;
                uint64_t v35 = v32 - __p;
                unint64_t v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v37 = v50 - (void)__p;
                if ((uint64_t)(v50 - (void)__p) >> 2 > v36) {
                  unint64_t v36 = v37 >> 2;
                }
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v36;
                }
                if (v38)
                {
                  unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v50, v38);
                  uint64_t v40 = v39;
                  double v34 = __p;
                  unint64_t v32 = v49;
                }
                else
                {
                  uint64_t v40 = 0;
                }
                uint64_t v41 = (unint64_t *)(v38 + 8 * v35);
                *uint64_t v41 = v33;
                uint64_t v42 = (uint64_t *)(v41 + 1);
                while (v32 != v34)
                {
                  unint64_t v43 = *--v32;
                  *--uint64_t v41 = v43;
                }
                std::string __p = (uint64_t *)v41;
                unint64_t v50 = v38 + 8 * v40;
                if (v34) {
                  operator delete(v34);
                }
                unint64_t v32 = v42;
              }
              else
              {
                *v32++ = v33;
              }
              char v49 = v32;
              ++v33;
            }
            while (v33 < (uint64_t)(*((void *)v1 + 10) - *((void *)v1 + 9)) >> 2);
            uint64_t v44 = (uint64_t)__p;
          }
          unint64_t v45 = 126 - 2 * __clz(((uint64_t)v32 - v44) >> 3);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
          if (v32 == (uint64_t *)v44) {
            uint64_t v46 = 0;
          }
          else {
            uint64_t v46 = v45;
          }
          std::__introsort<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(v44, v32, (uint64_t *)&__str, v46, 1);
          turi::sframe::get_reader((turi::supervised::xgboost::SFrameSparsePage *)((char *)v1 + 104));
        }
        turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#4}::operator()();
      }
      turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#3}::operator()();
    }
    turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#2}::operator()();
  }
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#1}::operator()();
}

void sub_22450C8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, boost::detail::shared_count *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 - 136) = &a16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 136));
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::ColBatchIter::PageLoader::signal_done(turi::supervised::xgboost::ColBatchIter::PageLoader *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  *((unsigned char *)this + 128) = 1;
  uint64_t v3 = pthread_cond_signal((pthread_cond_t *)((char *)this + 8));
  assert_msg(v3 == 0, (uint64_t)"Condition variable signal error %d", v4, v5, v6, v7, v8, v9, v3);
  return pthread_mutex_unlock(v2);
}

void sub_22450CB28(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_saved", 8);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 227, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22450CC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(in_memory)", 12);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 228, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22450CE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"offset.empty()", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 229, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22450D03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"data.empty()", 12);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 230, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22450D23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *v11;
          if (*(_DWORD *)(*(void *)(*a3 + 72) + 4 * v22) < *(_DWORD *)(*(void *)(*a3 + 72) + 4 * *v11))
          {
            uint64_t *v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, v11 + 1, a2 - 1, (uint64_t)a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, v11 + 1, v11 + 2, a2 - 1, (uint64_t)a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, (uint64_t)a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, &v11[v15 >> 1], a2 - 1, (uint64_t)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11 + 1, v17 - 1, a2 - 2, (uint64_t)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11 + 2, &v11[v16 + 1], a2 - 3, (uint64_t)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v17 - 1, v17, &v11[v16 + 1], (uint64_t)a3);
      uint64_t v18 = *v11;
      uint64_t *v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(&v11[v15 >> 1], v11, a2 - 1, (uint64_t)a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(_DWORD *)(*(void *)(*a3 + 72) + 4 * *(v11 - 1)) >= *(_DWORD *)(*(void *)(*a3 + 72) + 4 * *v11))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &>(v11, a2, (uint64_t)a3);
      uint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &>(v11, a2, (uint64_t)a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, v19, (uint64_t)a3);
    uint64_t v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v19 + 1, a2, (uint64_t)a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, a2, (uint64_t)a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v11, a2, (uint64_t)a3);
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(*(void *)a3 + 72);
      char v6 = result;
      do
      {
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        char v6 = v3;
        unsigned int v9 = *(_DWORD *)(v5 + 4 * v7);
        if (v9 < *(_DWORD *)(v5 + 4 * v8))
        {
          uint64_t v10 = v4;
          while (1)
          {
            *(uint64_t *)((char *)result + v10 + 8) = v8;
            if (!v10) {
              break;
            }
            uint64_t v8 = *(uint64_t *)((char *)result + v10 - 8);
            v10 -= 8;
            if (v9 >= *(_DWORD *)(v5 + 4 * v8))
            {
              uint64_t v11 = (uint64_t *)((char *)result + v10 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          uint64_t *v11 = v7;
        }
        uint64_t v3 = v6 + 1;
        v4 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(void *result, void *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = *(void *)(*(void *)a3 + 72);
      do
      {
        uint64_t v6 = *result;
        uint64_t v5 = result[1];
        uint64_t result = v3;
        unsigned int v7 = *(_DWORD *)(v4 + 4 * v5);
        if (v7 < *(_DWORD *)(v4 + 4 * v6))
        {
          uint64_t v8 = result;
          do
          {
            void *v8 = v6;
            uint64_t v6 = *(v8 - 2);
            --v8;
          }
          while (v7 < *(_DWORD *)(v4 + 4 * v6));
          void *v8 = v5;
        }
        uint64_t v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*(void *)a4 + 72);
  unsigned int v7 = *(_DWORD *)(v6 + 4 * *a2);
  unsigned int v8 = *(_DWORD *)(v6 + 4 * *a1);
  uint64_t v9 = *a3;
  unsigned int v10 = *(_DWORD *)(v6 + 4 * *a3);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(_DWORD *)(v6 + 4 * *a3) >= v8) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v11 = *a1;
    if (*(_DWORD *)(v6 + 4 * *a2) >= *(_DWORD *)(v6 + 4 * *a1)) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*(void *)a3 + 72);
  unsigned int v5 = *(_DWORD *)(v4 + 4 * *a1);
  if (v5 >= *(_DWORD *)(v4 + 4 * *(a2 - 1)))
  {
    unsigned int v8 = a1 + 1;
    do
    {
      uint64_t v6 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
    }
    while (v5 >= *(_DWORD *)(v4 + 4 * *v6));
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(_DWORD *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      uint64_t v9 = *--a2;
    while (v5 < *(_DWORD *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    uint64_t v10 = *v6;
    uint64_t v11 = *a2;
    do
    {
      *uint64_t v6 = v11;
      *a2 = v10;
      do
      {
        uint64_t v12 = v6[1];
        ++v6;
        uint64_t v10 = v12;
      }
      while (v5 >= *(_DWORD *)(v4 + 4 * v12));
      do
      {
        uint64_t v13 = *--a2;
        uint64_t v11 = v13;
      }
      while (v5 < *(_DWORD *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v3;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*(void *)a3 + 72);
  unsigned int v6 = *(_DWORD *)(v5 + 4 * *a1);
  do
    uint64_t v7 = a1[++v3];
  while (*(_DWORD *)(v5 + 4 * v7) < v6);
  unsigned int v8 = &a1[v3];
  uint64_t v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      uint64_t v11 = *--a2;
    }
    while (*(_DWORD *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      uint64_t v10 = *--a2;
    while (*(_DWORD *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = &a1[v3];
    uint64_t v14 = a2;
    do
    {
      *uint64_t v13 = v12;
      *uint64_t v14 = v7;
      do
      {
        uint64_t v15 = v13[1];
        ++v13;
        uint64_t v7 = v15;
      }
      while (*(_DWORD *)(v5 + 4 * v15) < v6);
      do
      {
        uint64_t v16 = *--v14;
        uint64_t v12 = v16;
      }
      while (*(_DWORD *)(v5 + 4 * v16) >= v6);
    }
    while (v13 < v14);
    uint64_t v9 = v13 - 1;
  }
  if (v9 != a1) {
    *a1 = *v9;
  }
  uint64_t *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(_DWORD *)(*(void *)(*(void *)a3 + 72) + 4 * v8) < *(_DWORD *)(*(void *)(*(void *)a3 + 72)
                                                                               + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *(void *)(*(void *)a3 + 72);
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    unsigned int v17 = *(_DWORD *)(v13 + 4 * *v11);
    if (v17 < *(_DWORD *)(v13 + 4 * *v10))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 8;
        if (v18 == 8) {
          break;
        }
        uint64_t v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 >= *(_DWORD *)(v13 + 4 * v16))
        {
          char v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      char v20 = a1;
LABEL_12:
      *char v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a5);
  uint64_t v11 = *a3;
  uint64_t v12 = *(void *)(*(void *)a5 + 72);
  if (*(_DWORD *)(v12 + 4 * *a4) < *(_DWORD *)(v12 + 4 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    uint64_t v13 = *a2;
    if (*(_DWORD *)(v12 + 4 * *a3) < *(_DWORD *)(v12 + 4 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = *a1;
      if (*(_DWORD *)(v12 + 4 * *a2) < *(_DWORD *)(v12 + 4 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a4, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = *(void *)(*(void *)a6 + 72);
  if (*(_DWORD *)(v14 + 4 * *a5) < *(_DWORD *)(v14 + 4 * *a4))
  {
    *a4 = *a5;
    *a5 = v13;
    uint64_t v15 = *a3;
    if (*(_DWORD *)(v14 + 4 * *a4) < *(_DWORD *)(v14 + 4 * *a3))
    {
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      if (*(_DWORD *)(v14 + 4 * *a3) < *(_DWORD *)(v14 + 4 * *a2))
      {
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *a1;
        if (*(_DWORD *)(v14 + 4 * *a2) < *(_DWORD *)(v14 + 4 * *a1))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        if (*(_DWORD *)(*(void *)(*a4 + 72) + 4 * *v14) < *(_DWORD *)(*(void *)(*a4 + 72) + 4 * *a1))
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 1;
      do
      {
        uint64_t v18 = *a1;
        uint64_t v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a4, v16);
        if (v17 == v19)
        {
          *uint64_t v19 = v18;
        }
        else
        {
          *uint64_t v19 = *v17;
          *uint64_t v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)(v19 + 1), (uint64_t)a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (uint64_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      uint64_t v10 = *v8;
      if (v9 >= a3)
      {
        uint64_t v11 = *(void *)(*(void *)a2 + 72);
      }
      else
      {
        uint64_t v11 = *(void *)(*(void *)a2 + 72);
        if (*(_DWORD *)(v11 + 4 * v10) < *(_DWORD *)(v11 + 4 * v8[1]))
        {
          uint64_t v10 = v8[1];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      uint64_t v12 = *a4;
      unsigned int v13 = *(_DWORD *)(v11 + 4 * *a4);
      if (*(_DWORD *)(v11 + 4 * v10) >= v13)
      {
        do
        {
          uint64_t v14 = v8;
          *a4 = v10;
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = (2 * v7) | 1;
          uint64_t v8 = (uint64_t *)(result + 8 * v15);
          uint64_t v16 = 2 * v7 + 2;
          uint64_t v10 = *v8;
          if (v16 < a3 && *(_DWORD *)(v11 + 4 * v10) < *(_DWORD *)(v11 + 4 * v8[1]))
          {
            uint64_t v10 = v8[1];
            ++v8;
            uint64_t v15 = v16;
          }
          a4 = v14;
          uint64_t v7 = v15;
        }
        while (*(_DWORD *)(v11 + 4 * v10) >= v13);
        *uint64_t v14 = v12;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = &a1[v3];
    uint64_t v10 = v7[1];
    uint64_t v8 = v7 + 1;
    uint64_t v9 = v10;
    uint64_t v11 = (2 * v3) | 1;
    uint64_t v12 = 2 * v3 + 2;
    if (v12 < a3 && *(_DWORD *)(*(void *)(v6 + 72) + 4 * v9) < *(_DWORD *)(*(void *)(v6 + 72) + 4 * v8[1]))
    {
      uint64_t v9 = v8[1];
      ++v8;
      uint64_t v11 = v12;
    }
    *a1 = v9;
    a1 = v8;
    uint64_t v3 = v11;
  }
  while (v11 <= v5);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    uint64_t v10 = *(void *)(*(void *)a3 + 72);
    unsigned int v11 = *(_DWORD *)(v10 + 4 * v9);
    if (*(_DWORD *)(v10 + 4 * *v5) < v11)
    {
      do
      {
        uint64_t v12 = v5;
        void *v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v12;
      }
      while (*(_DWORD *)(v10 + 4 * *v5) < v11);
      *uint64_t v12 = v8;
    }
  }
  return result;
}

void turi::supervised::xgboost::ColBatchIter::Value(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_inited", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 426, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::ColBatchIter::Value(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22450E1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::ColBatchIter::Clear(turi::supervised::xgboost::ColBatchIter *this)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)this + 11);
  *((void *)this + 6) = *((void *)this + 5);
  *((void *)this + 16) = *((void *)this + 15);
  uint64_t v3 = *((void *)this + 8);
  for (uint64_t i = *((void *)this + 9);
        i != v3;
        std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100]((uint64_t)this + 80, i))
  {
    i -= 408;
  }
  *((void *)this + 9) = v3;
}

void turi::supervised::xgboost::DiskPagedFMatrix::InitColAccess(std::vector<BOOL> const&,float,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"std::all_of(enabled.begin(), enabled.end(), [](BOOL x) { return x; })",
         69);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 544, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised::xgboost::DiskPagedFMatrix::InitColAccess(std::vector<BOOL> const&,float,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22450E4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::DiskPagedFMatrix::InitColData(std::vector<unsigned int> *this, float a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  unint64_t v4 = this + 1;
  this[1].__end_ = this[1].__begin_;
  std::vector<int>::reserve(this + 1, *(void *)this->__end_);
  this[2].__end_cap_.__value_ = this[2].__end_;
  unint64_t v5 = *((void *)this->__end_ + 1);
  v42[0].__locale_ = 0;
  std::vector<unsigned long>::resize((uint64_t)&this[2].__end_, v5, v42);
  long long v40 = 0uLL;
  uint64_t v41 = 0;
  (*(void (**)(unsigned int *))(*(void *)this->__end_cap_.__value_ + 16))(this->__end_cap_.__value_);
  uint64_t v6 = 0;
  while ((*(unsigned int (**)(unsigned int *))(*(void *)this->__end_cap_.__value_ + 24))(this->__end_cap_.__value_))
  {
    char v7 = (int *)global_logger();
    ++v6;
    if (v7[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v7)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "InitColData", 613, 1);
      uint64_t v10 = pthread_getspecific(*((void *)started + 74));
      if (v10 && *((unsigned char *)v10 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Create disk column page ", 24);
      }
      uint64_t v11 = file_logger::operator<<<unsigned long>((uint64_t)started);
      uint64_t v12 = pthread_getspecific(*(void *)(v11 + 592));
      if (v12 && *((unsigned char *)v12 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"/", 1);
      }
      uint64_t v13 = file_logger::operator<<<unsigned long>(v11);
      uint64_t v14 = pthread_getspecific(*(void *)(v13 + 592));
      if (v14)
      {
        if (*((unsigned char *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
          uint64_t v15 = std::locale::use_facet(v42, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale(v42);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v13);
          if (*(_DWORD *)(v13 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    uint64_t v16 = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(void *)this->__end_cap_.__value_ + 32))(this->__end_cap_.__value_);
    unint64_t v17 = v16[1];
    turi::dense_bitset::dense_bitset((turi::dense_bitset *)v39, *v16);
    if (*v16)
    {
      unint64_t v18 = 0;
      do
      {
        if (a2 == 1.0 || (double)rand() * 4.65661287e-10 < a2)
        {
          atomic_fetch_or((atomic_ullong *volatile)v39[0] + (v18 >> 6), 1 << v18);
          unsigned int v19 = v18 + v17;
          std::vector<unsigned int>::pointer end = this[1].__end_;
          value = this[1].__end_cap_.__value_;
          if (end >= value)
          {
            std::vector<unsigned int>::pointer begin = v4->__begin_;
            uint64_t v24 = end - v4->__begin_;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = (char *)value - (char *)begin;
            if (v26 >> 1 > v25) {
              unint64_t v25 = v26 >> 1;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&this[1].__end_cap_, v27);
              std::vector<unsigned int>::pointer begin = this[1].__begin_;
              std::vector<unsigned int>::pointer end = this[1].__end_;
            }
            else
            {
              unint64_t v28 = 0;
            }
            unint64_t v29 = (unsigned int *)&v28[4 * v24];
            *unint64_t v29 = v19;
            uint64_t v22 = v29 + 1;
            while (end != begin)
            {
              unsigned int v30 = *--end;
              *--unint64_t v29 = v30;
            }
            this[1].__begin_ = v29;
            this[1].__end_ = v22;
            this[1].__end_cap_.__value_ = (unsigned int *)&v28[4 * v27];
            if (begin) {
              operator delete(begin);
            }
          }
          else
          {
            std::string *end = v19;
            uint64_t v22 = end + 1;
          }
          this[1].__end_ = v22;
        }
        ++v18;
      }
      while (v18 < *v16);
    }
    uint64_t v49 = 0;
    long long v47 = 0u;
    memset(v48, 0, sizeof(v48));
    *(_OWORD *)unint64_t v45 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v43 = 0u;
    long long v44 = 0u;
    *(_OWORD *)&v42[0].__locale_ = 0u;
    v48[0] = 1;
    turi::sframe::sframe((turi::sframe *)&v48[8]);
    LOBYTE(v49) = 0;
    uint64_t v31 = *((void *)&v40 + 1);
    if (*((void *)&v40 + 1) >= (unint64_t)v41)
    {
      uint64_t v32 = std::vector<turi::supervised::xgboost::SFrameSparsePage>::__push_back_slow_path<turi::supervised::xgboost::SFrameSparsePage>((uint64_t *)&v40, (uint64_t)v42);
    }
    else
    {
      turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage(*((uint64_t *)&v40 + 1), (uint64_t)v42);
      uint64_t v32 = v31 + 408;
    }
    *((void *)&v40 + 1) = v32;
    turi::sframe::~sframe((turi::sframe *)&v48[8]);
    if (__p[1])
    {
      *(void **)&long long v47 = __p[1];
      operator delete(__p[1]);
    }
    if (v45[0])
    {
      v45[1] = v45[0];
      operator delete(v45[0]);
    }
    if (v43[1])
    {
      *(void **)&long long v44 = v43[1];
      operator delete(v43[1]);
    }
    if (v42[0].__locale_)
    {
      v42[1] = v42[0];
      operator delete(v42[0].__locale_);
    }
    uint64_t v33 = *((void *)&v40 + 1);
    turi::supervised::xgboost::MakeColPage((turi::thread *)v16, (turi::supervised::xgboost::SFrameSparsePage **)v39, *((void *)this->__end_ + 1), (turi::supervised::xgboost::SFrameSparsePage *)(*((void *)&v40 + 1) - 408));
    std::vector<unsigned int>::pointer v34 = this->__end_;
    if (*((void *)v34 + 1))
    {
      unint64_t v35 = 0;
      uint64_t v36 = *(void *)(v33 - 384);
      std::vector<unsigned int>::pointer v37 = this[2].__end_;
      do
      {
        *(void *)&v37[2 * v35] += *(void *)(v36 + 8 * v35 + 8) - *(void *)(v36 + 8 * v35);
        ++v35;
      }
      while (v35 < *((void *)v34 + 1));
    }
    free(v39[0]);
  }
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__vdeallocate((void **)&this[7].__begin_);
  *(_OWORD *)&this[7].__begin_ = v40;
  this[7].__end_cap_.__value_ = v41;
  uint64_t v41 = 0;
  long long v40 = 0uLL;
  LOBYTE(this[4].__end_cap_.__value_) = 1;
  this[2].__begin_ = (std::vector<unsigned int>::pointer)(this[1].__end_ - this[1].__begin_);
  v42[0].__locale_ = (std::locale::__imp *)&v40;
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
}

void sub_22450EB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  a12 = &a15;
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::supervised::xgboost::SFrameSparsePage>::__push_back_slow_path<turi::supervised::xgboost::SFrameSparsePage>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xA0A0A0A0A0A0A0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x50505050505050) {
    unint64_t v9 = 0xA0A0A0A0A0A0A0;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised::xgboost::SFrameSparsePage>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[408 * v4];
  uint64_t v16 = &v10[408 * v9];
  turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage((uint64_t)v14, a2);
  uint64_t v15 = v14 + 408;
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::~__split_buffer(&v13);
  return v11;
}

void sub_22450ED24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  turi::sframe::sframe((turi::sframe *)(a1 + 104), a2 + 104);
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  return a1;
}

void sub_22450EE18(_Unwind_Exception *exception_object)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v8;
    operator delete(v8);
  }
  unint64_t v9 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<turi::supervised::xgboost::SFrameSparsePage>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>((uint64_t)(a1 + 2), a1[1], (const turi::supervised::xgboost::SFrameSparsePage *)a1[1], *a1, (const turi::supervised::xgboost::SFrameSparsePage *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised::xgboost::SFrameSparsePage>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xA0A0A0A0A0A0A1) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(408 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>(uint64_t a1, uint64_t a2, const turi::supervised::xgboost::SFrameSparsePage *a3, uint64_t a4, const turi::supervised::xgboost::SFrameSparsePage *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (const turi::supervised::xgboost::SFrameSparsePage *)((char *)v9 - 408);
      turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage((turi::supervised::xgboost::SFrameSparsePage *)(v7 - 408), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 408;
      *((void *)&v15 + 1) -= 408;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_22450EFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

turi::supervised::xgboost::SFrameSparsePage *turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage(turi::supervised::xgboost::SFrameSparsePage *this, const turi::supervised::xgboost::SFrameSparsePage *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this, *(const void **)a2, *((void *)a2 + 1), (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  turi::sframe::sframe((turi::supervised::xgboost::SFrameSparsePage *)((char *)this + 104), (const turi::supervised::xgboost::SFrameSparsePage *)((char *)a2 + 104));
  *((unsigned char *)this + 400) = *((unsigned char *)a2 + 400);
  return this;
}

void sub_22450F0B4(_Unwind_Exception *exception_object)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v8;
    operator delete(v8);
  }
  unint64_t v9 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100](v3, v1);
      v1 += 408;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 408;
    std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100](v4, i - 408);
  }
}

void std::vector<turi::supervised::xgboost::SFrameSparsePage>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 408;
        std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8Row"
                                        "BatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8RowBatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0 const&)::{lambda(void)#1},void>::invoke(void *tls_data)
{
  unint64_t v1 = tls_data[1];
  if (v1 < tls_data[2])
  {
    uint64_t v2 = tls_data;
    do
    {
      uint64_t v3 = (void **)*v2;
      if ((*(void *)(**(void **)*v2 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1))
      {
        tls_std::string::pointer data = turi::thread::get_tls_data((turi::thread *)tls_data);
        uint64_t v4 = v3[1];
        uint64_t v5 = v4[2];
        uint64_t v6 = *(void *)(v5 + 8 * v1++);
        uint64_t v7 = *(void *)(v5 + 8 * v1);
        uint64_t v8 = (v7 - v6);
        if (v7 != v6)
        {
          unint64_t v9 = (unsigned int *)(v4[3] + 8 * v6);
          int v10 = *(_DWORD *)tls_data;
          do
          {
            unsigned int v12 = *v9;
            v9 += 2;
            uint64_t v11 = v12;
            char v13 = (uint64_t *)(*(void *)v3[2][2] + 24 * v10);
            uint64_t v14 = *v13;
            if (v12 >= (unint64_t)((v13[1] - *v13) >> 3))
            {
              uint64_t v15 = 0;
              std::vector<unsigned long>::resize((uint64_t)v13, v11 + 1, &v15);
              uint64_t v14 = *v13;
            }
            ++*(void *)(v14 + 8 * v11);
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        ++v1;
      }
    }
    while (v1 < v2[2]);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8Row"
                                        "BatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8RowBatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1 const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = (void **)*v2;
      if ((*(void *)(**(void **)*v2 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1))
      {
        uint64_t result = turi::thread::get_tls_data((turi::thread *)result);
        uint64_t v4 = v3[1];
        uint64_t v5 = v4[2];
        uint64_t v6 = *(void *)(v5 + 8 * v1);
        unint64_t v7 = v1 + 1;
        uint64_t v8 = *(void *)(v5 + 8 * (v1 + 1)) - v6;
        if (v8)
        {
          uint64_t v9 = v4[3];
          int v10 = v3[3];
          uint64_t v11 = *(void *)(*(void *)v3[2][2] + 24 * *(int *)result);
          uint64_t v12 = *(void *)v3[2][1];
          char v13 = (int *)(v9 + 8 * v6 + 4);
          do
          {
            uint64_t v14 = *(v13 - 1);
            int v15 = *v10 + v1;
            uint64_t v16 = *(void *)(v11 + 8 * v14);
            *(void *)(v11 + 8 * v14) = v16 + 1;
            int v17 = *v13;
            v13 += 2;
            unint64_t v18 = (_DWORD *)(v12 + 8 * v16);
            *unint64_t v18 = v15;
            v18[1] = v17;
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        unint64_t v7 = v1 + 1;
      }
      unint64_t v1 = v7;
    }
    while (v7 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8Row"
                                        "BatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_2EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8RowBatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_2EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 8);
  unint64_t v1 = *(void *)(result + 16);
  if (v2 < v1)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = ***(void ****)v3;
      long long v5 = (unint64_t *)(*v4 + 8 * v2);
      unint64_t v6 = *v5;
      unint64_t v7 = v5[1];
      if (v6 < v7)
      {
        uint64_t v9 = v4 + 6;
        uint64_t v8 = v4[6];
        if (v9[1] == v8) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = v8;
        }
        uint64_t v11 = xgboost_old::SparseBatch::Entry::CmpValue;
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v10 + 8 * v6, (char *)(v10 + 8 * v7), (uint64_t (**)(uint64_t *, uint64_t *))&v11, 126 - 2 * __clz((uint64_t)(8 * v7 - 8 * v6) >> 3), 1);
        unint64_t v1 = *(void *)(v3 + 16);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return result;
}

void std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = &unk_26D785410;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D785410;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v39 = 0;
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 8), v4, v5, (uint64_t)v26);
  uint64_t v7 = v32;
  if (v32 != v31)
  {
    uint64_t v8 = (void *)(v6 + 80);
    uint64_t v9 = (void *)(v6 + 128);
    do
    {
      int v10 = *(unsigned __int8 *)(v34 + 17);
      if (!**(unsigned char **)(a1 + 16))
      {
        double v13 = 1.0;
        if (*(unsigned char *)(v34 + 16)) {
          BOOL v14 = v10 == 0;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14)
        {
          int v15 = (void *)(v34 + 24);
          if (!*(unsigned char *)(v34 + 18)) {
            int v15 = (void *)(*(void *)(v34 + 96) + 8 * v35);
          }
          double v13 = *(double *)(*(void *)(v34 + 96) + 8 * v35 + 8 * *v15 - 8);
        }
        float v16 = v13;
        uint64_t v17 = v7 - v38;
        unint64_t v18 = v8;
        goto LABEL_31;
      }
      if (*(unsigned char *)(v34 + 16)) {
        BOOL v11 = v10 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        unint64_t v12 = 0;
      }
      else
      {
        unsigned int v19 = (void *)(v34 + 24);
        if (!*(unsigned char *)(v34 + 18)) {
          unsigned int v19 = (void *)(*(void *)(v34 + 96) + 8 * v35);
        }
        unint64_t v12 = *(void *)(*(void *)(v34 + 96) + 8 * v35 + 8 * *v19 - 8);
      }
      unint64_t v39 = v12;
      uint64_t v17 = v7 - v38;
      *(float *)(*v8 + 4 * (v7 - v3turi::conditional::~conditional((pthread_cond_t *)((char *)this + 8)) = (float)v12;
      if (**(unsigned char **)(a1 + 32))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        BOOL v21 = *(void **)(v20 + 8);
        float v16 = 1.0;
        if (!v21) {
          goto LABEL_30;
        }
        while (1)
        {
          unint64_t v22 = v21[4];
          if (v12 >= v22)
          {
            if (v22 >= v12)
            {
              float v16 = *(float *)std::map<unsigned long,turi::flexible_type>::at(v20, &v39);
              uint64_t v7 = v32;
              uint64_t v17 = v32 - v38;
LABEL_30:
              unint64_t v18 = v9;
LABEL_31:
              *(float *)(*v18 + 4 * v17) = v16;
              break;
            }
            ++v21;
          }
          BOOL v21 = (void *)*v21;
          if (!v21) {
            goto LABEL_30;
          }
        }
      }
      if (v37 | v28)
      {
        uint64_t v23 = (uint64_t *)(*(void *)(v34 + 96) + 8 * v35);
        if (v29) {
          uint64_t v23 = &v30;
        }
        v35 += *v23;
      }
      ++v7;
      uint64_t v24 = v31;
      uint64_t v32 = v7;
      uint64_t v36 = v7 - v27 * v33;
      if (v36 == v27 && v7 != v31)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v26);
        uint64_t v24 = v31;
        uint64_t v7 = v32;
      }
    }
    while (v7 != v24);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v26);
}

void sub_22450FA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

turi::model_base *turi::model_base::model_base(turi::model_base *this, const turi::model_base *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26D77BCA0;
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t *)this + 4, (const void ***)a2 + 4);
  std::map<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::map[abi:ne180100]((uint64_t *)this + 7, (const void ***)a2 + 7);
  std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::map[abi:ne180100]((uint64_t *)this + 10, (const void ***)a2 + 10);
  std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::map[abi:ne180100]((uint64_t *)this + 13, (const void ***)a2 + 13);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 128), *((long long **)a2 + 16), *((long long **)a2 + 17), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3));
  std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::map[abi:ne180100]((uint64_t *)this + 19, (const void ***)a2 + 19);
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 176), *((long long **)a2 + 22), *((long long **)a2 + 23), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 3));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 25, (const void ***)a2 + 25);
  return this;
}

void sub_22450FBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy(v7, *((void **)v2 + 20));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy(v6, *((void **)v2 + 14));
  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy(v5, *((void **)v2 + 11));
  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(v4, *((void **)v2 + 8));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v3, *((void **)v2 + 5));
  cppipc::ipc_object_base::~ipc_object_base(v2);
  _Unwind_Resume(a1);
}

void sub_22450FC80()
{
}

void sub_22450FC88()
{
}

void sub_22450FC90()
{
}

uint64_t *std::map<std::string,std::vector<std::string>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_22450FCD8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::map<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_22450FE54(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__construct_node<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_22450FFD0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__construct_node<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void CoreML::validate<(MLModelType)401>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v4 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v53);
  CoreML::validateDescriptionsAreAllVectorizableTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 2), (uint64_t)__p);
  uint64_t v53 = *(void *)__p;
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  long long v54 = *(_OWORD *)&__p[8];
  uint64_t v55 = v52;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v53);
  if (!v5) {
    goto LABEL_60;
  }
  if (*(_DWORD *)(a1 + 44) == 401) {
    uint64_t v6 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v6 = CoreML::Specification::SupportVectorClassifier::default_instance((CoreML::Specification::SupportVectorClassifier *)v5);
  }
  CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::SupportVectorClassifier>(a1, (uint64_t)v6, 0, 0, (uint64_t)__p);
  uint64_t v53 = *(void *)__p;
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  long long v54 = *(_OWORD *)&__p[8];
  uint64_t v55 = v52;
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v53);
  if (!v7) {
    goto LABEL_60;
  }
  if (*(_DWORD *)(a1 + 44) == 401) {
    uint64_t v8 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v8 = CoreML::Specification::SupportVectorClassifier::default_instance((CoreML::Specification::SupportVectorClassifier *)v7);
  }
  if (v8[17]) {
    BOOL v9 = (CoreML *)v8[17];
  }
  else {
    BOOL v9 = (CoreML *)&CoreML::Specification::_Kernel_default_instance_;
  }
  CoreML::validateKernel(v9, (CoreML::Result *)__p);
  uint64_t v53 = *(void *)__p;
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  long long v54 = *(_OWORD *)&__p[8];
  uint64_t v55 = v52;
  if (!CoreML::Result::good((CoreML::Result *)&v53)) {
    goto LABEL_60;
  }
  int v10 = *((_DWORD *)v8 + 42);
  switch(v10)
  {
    case 0:
      std::string::basic_string[abi:ne180100]<0>(__p, "Int64 class labels must be supplied for SVM classifier.");
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_51:
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_61;
      }
      uint64_t v30 = *(void **)__p;
      goto LABEL_92;
    case 100:
      uint64_t v11 = (int *)(v8[19] + 24);
      goto LABEL_27;
    case 101:
      uint64_t v11 = (int *)(v8[19] + 16);
LABEL_27:
      int v12 = *v11;
      goto LABEL_30;
  }
  int v12 = 0;
LABEL_30:
  uint64_t v13 = *((unsigned int *)v8 + 12);
  if (v13 != v12 - 1)
  {
    std::to_string(&v48, v12 - 1);
    uint64_t v20 = std::string::insert(&v48, 0, "coefficient array must be size numberOfClasses - 1 (");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unint64_t v22 = std::string::append(&v49, "). Instead it is size ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, *((_DWORD *)v8 + 12));
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v47;
    }
    else {
      uint64_t v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    goto LABEL_82;
  }
  int v14 = *((_DWORD *)v8 + 41);
  if (v14 != 4 && v14 != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Must specify sparse or dense support vectors");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_51;
  }
  if (*((_DWORD *)v8 + 4) != v12)
  {
    std::to_string(&v48, v12);
    uint64_t v26 = std::string::insert(&v48, 0, "numberOfSupportVectoresPerClass array must be size numberOfClasses ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    unsigned __int8 v28 = std::string::append(&v49, " instead it is size ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, *((_DWORD *)v8 + 4));
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v47;
    }
    else {
      uint64_t v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    goto LABEL_82;
  }
  int v15 = *(_DWORD *)(v8[18] + 24);
  if (v12 < 1)
  {
    int v16 = 0;
  }
  else
  {
    int v16 = 0;
    uint64_t v17 = v12;
    unint64_t v18 = (int *)(v8[3] + 8);
    do
    {
      int v19 = *v18++;
      v16 += v19;
      --v17;
    }
    while (v17);
  }
  if (v15 != v16)
  {
    std::to_string(&v48, v16);
    uint64_t v34 = std::string::insert(&v48, 0, "sum of numberOfSupportVectorsPerClass ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    uint64_t v36 = std::string::append(&v49, " must sum to total number of support vectors ");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, v15);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v47;
    }
    else {
      uint64_t v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    goto LABEL_82;
  }
  if (v12 >= 2)
  {
    uint64_t v31 = 0;
    while (*(_DWORD *)(*(void *)(v8[7] + 8 + 8 * v31) + 16) == v15)
    {
      if (v13 == ++v31) {
        goto LABEL_59;
      }
    }
    std::to_string(&v48, *(_DWORD *)(v8[18] + 24));
    uint64_t v41 = std::string::insert(&v48, 0, "Incorrect number of coefficients: There should be ");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    unint64_t v43 = std::string::append(&v49, " not ");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, *(_DWORD *)(*(void *)(v8[7] + 8 * v31 + 8) + 16));
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v47;
    }
    else {
      uint64_t v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
LABEL_82:
    unint64_t v45 = std::string::append(&v50, (const std::string::value_type *)v24, size);
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v45->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v30 = (void *)v48.__r_.__value_.__r.__words[0];
      goto LABEL_92;
    }
    goto LABEL_61;
  }
LABEL_59:
  int v32 = *((_DWORD *)v8 + 22);
  int v33 = *((_DWORD *)v8 + 28);
  if (!(v32 | v33))
  {
LABEL_60:
    *(void *)a2 = v53;
    *(_OWORD *)(a2 + 8) = v54;
    *(void *)(a2 + 24) = v55;
    long long v54 = 0uLL;
    uint64_t v55 = 0;
    goto LABEL_61;
  }
  int v38 = v13 * v12 + ((int)v13 * v12 < 0);
  if (v32 != v33)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "probA and probB must be same size");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_51;
  }
  if (v32 == v38 >> 1) {
    goto LABEL_60;
  }
  std::to_string(&v50, v38 >> 1);
  unint64_t v39 = std::string::insert(&v50, 0, "Expected length of probA is number of class pairs: ");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v39->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v30 = (void *)v50.__r_.__value_.__r.__words[0];
LABEL_92:
    operator delete(v30);
  }
LABEL_61:
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
}

void sub_2245107DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v40 - 49) < 0) {
    operator delete(*(void **)(v40 - 72));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::SupportVectorClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7 = *(_DWORD *)(a2 + 168);
  if (!v7)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
LABEL_15:
    if (*(void *)(a1 + 16)) {
      BOOL v9 = *(CoreML **)(a1 + 16);
    }
    else {
      BOOL v9 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    }
    CoreML::validateFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p))
    {
      *(void *)a5 = __p;
      *(_OWORD *)(a5 + 8) = v12;
      *(void *)(a5 + 24) = v13;
      return;
    }
    CoreML::validateClassifierFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)a4, a5);
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      return;
    }
    int v10 = (void *)v12;
    goto LABEL_27;
  }
  if (v7 == 100)
  {
    if ((a3 & 1) == 0 && !*(_DWORD *)(*(void *)(a2 + 152) + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    if (*((_DWORD *)CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)a1) + 4))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v7 != 101)
  {
LABEL_14:
    a4 = 0;
    goto LABEL_15;
  }
  if ((a3 & 1) == 0 && !*(_DWORD *)(*(void *)(a2 + 152) + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    CoreML::Result::Result((_DWORD *)a5, 13);
    goto LABEL_25;
  }
  if (!*((_DWORD *)CoreML::Specification::StringVector::default_instance((CoreML::Specification::StringVector *)a1) + 6))
  {
    a4 = 1;
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
  CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_25:
  if ((SHIBYTE(v12) & 0x80000000) == 0) {
    return;
  }
  int v10 = __p;
LABEL_27:
  operator delete(v10);
}

void sub_224510AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateKernel(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  switch(*((_DWORD *)this + 7))
  {
    case 1:
      goto LABEL_12;
    case 2:
      uint64_t v4 = (uint64_t *)*((void *)this + 2);
      goto LABEL_10;
    case 3:
      uint64_t v5 = *((void *)this + 2);
      if (*(double *)(v5 + 24) < 0.0) {
        goto LABEL_11;
      }
      if ((*(_DWORD *)(v5 + 32) & 0x80000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Degree must be greater than or equal to zero");
        CoreML::Result::Result(a2, 13);
      }
      else
      {
        uint64_t v4 = CoreML::Specification::RBFKernel::default_instance(this);
LABEL_10:
        if (*((double *)v4 + 2) >= 0.0)
        {
LABEL_12:
          CoreML::Result::Result(a2);
          return;
        }
LABEL_11:
        std::string::basic_string[abi:ne180100]<0>(__p, "Gamma must be greater than or equal to zero");
        CoreML::Result::Result(a2, 13);
      }
LABEL_16:
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      return;
    case 4:
      if (*(double *)(*((void *)this + 2) + 16) < 0.0) {
        goto LABEL_11;
      }
      goto LABEL_12;
    default:
      std::string::basic_string[abi:ne180100]<0>(__p, "You must specify a supported kernel type");
      CoreML::Result::Result(a2, 13);
      goto LABEL_16;
  }
}

void sub_224510CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)301>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v13);
  if (*(void *)(a1 + 16)) {
    uint64_t v4 = *(CoreML **)(a1 + 16);
  }
  else {
    uint64_t v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::validateDescriptionsAreAllVectorizableTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 16, (uint64_t)&v10);
  uint64_t v13 = v10;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v11;
  uint64_t v15 = v12;
  if (!CoreML::Result::good((CoreML::Result *)&v13)) {
    goto LABEL_24;
  }
  CoreML::validateRegressorInterface(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&v10);
  uint64_t v13 = v10;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v11;
  uint64_t v15 = v12;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v13);
  if (!v5) {
    goto LABEL_24;
  }
  if (*(_DWORD *)(a1 + 44) == 301) {
    uint64_t v6 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v6 = CoreML::Specification::SupportVectorRegressor::default_instance((CoreML::Specification::SupportVectorRegressor *)v5);
  }
  if (v6[2]) {
    char v7 = (CoreML *)v6[2];
  }
  else {
    char v7 = (CoreML *)&CoreML::Specification::_Kernel_default_instance_;
  }
  CoreML::validateKernel(v7, (CoreML::Result *)&v10);
  uint64_t v13 = v10;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v11;
  uint64_t v15 = v12;
  if (!CoreML::Result::good((CoreML::Result *)&v13)) {
    goto LABEL_24;
  }
  int v8 = *((_DWORD *)v6 + 13);
  if (v8 == 3 || v8 == 2)
  {
    BOOL v9 = (uint64_t *)v6[3];
    if (!v9) {
      BOOL v9 = &CoreML::Specification::_Coefficients_default_instance_;
    }
    if (*((_DWORD *)v9 + 4) == *(_DWORD *)(v6[5] + 24))
    {
LABEL_24:
      *(void *)a2 = v13;
      *(_OWORD *)(a2 + 8) = __p;
      *(void *)(a2 + 24) = v15;
      long long __p = 0uLL;
      uint64_t v15 = 0;
      goto LABEL_25;
    }
    std::string::basic_string[abi:ne180100]<0>(&v10, "The number of coefficients must match the number of support vectors.");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "Must specify sparse or dense support vectors");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10);
  }
LABEL_25:
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
}

void sub_224510EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void turi::indexed_column_groupby::indexed_column_groupby(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  a1[3] = a1 + 4;
  a1[5] = 0;
  (*(void (**)(void))(*(void *)*a2 + 24))();
  turi::sarray<turi::flexible_type>::get_reader(*a2);
}

void sub_2245118D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(v43, *(void **)(a11 + 32));
  unint64_t v45 = *(void **)a11;
  if (*(void *)a11)
  {
    *(void *)(a11 + 8) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

void *turi::indexed_column_groupby::dest_group(void *this, unint64_t a2)
{
  unint64_t v2 = (void *)this[4];
  if (v2)
  {
    uint64_t v3 = this + 4;
    do
    {
      unint64_t v4 = v2[4];
      BOOL v5 = v4 >= a2;
      if (v4 >= a2) {
        uint64_t v6 = v2;
      }
      else {
        uint64_t v6 = v2 + 1;
      }
      if (v5) {
        uint64_t v3 = v2;
      }
      unint64_t v2 = (void *)*v6;
    }
    while (*v6);
    if (v3 != this + 4)
    {
      unint64_t v7 = v3[4];
      int v8 = v3 + 5;
      if (v7 <= a2) {
        return v8;
      }
    }
  }
  return this;
}

void turi::recsys::precision_and_recall(unint64_t **a1@<X0>, unint64_t **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a2 == a2[1])
  {
    unint64_t v40 = (a3[1] - *a3) >> 3;
    long long v41 = 0uLL;
    std::vector<std::pair<double,double>>::vector(a4, v40, &v41);
  }
  else
  {
    std::vector<std::pair<unsigned long,unsigned long>>::vector(&v41, (a3[1] - *a3) >> 3);
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v10 = v41;
    uint64_t v11 = v9 - *a3;
    if (v9 != *a3)
    {
      uint64_t v12 = 0;
      unint64_t v13 = v11 >> 3;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      int v14 = (void *)(v41 + 8);
      do
      {
        *(v14 - 1) = *(void *)(v8 + 8 * v12);
        *int v14 = v12++;
        v14 += 2;
      }
      while (v13 != v12);
    }
    unint64_t v15 = 126 - 2 * __clz((*((void *)&v41 + 1) - v10) >> 4);
    if (*((void *)&v41 + 1) == v10) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>(v10, *((unint64_t **)&v41 + 1), (uint64_t)&v42, v16, 1);
    std::vector<std::pair<double,double>>::vector(a4, (a3[1] - *a3) >> 3);
    uint64_t v17 = a1[1];
    if (*a1 != v17)
    {
      unint64_t v18 = *a1 + 1;
      while (v18 != v17)
      {
        unint64_t v20 = *(v18 - 1);
        unint64_t v19 = *v18++;
        if (v19 < v20)
        {
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
          break;
        }
      }
    }
    unint64_t v22 = (uint64_t *)*((void *)&v41 + 1);
    long long v21 = (uint64_t *)v41;
    if ((void)v41 != *((void *)&v41 + 1))
    {
      long long v23 = *a2;
      do
      {
        uint64_t v24 = v21[1];
        if (a2[1] - v23 >= (unint64_t)*v21) {
          uint64_t v25 = *v21;
        }
        else {
          uint64_t v25 = a2[1] - v23;
        }
        std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
        uint64_t v26 = *a1;
        long long v27 = a1[1];
        long long v23 = *a2;
        unint64_t v28 = 0;
        if (v25) {
          BOOL v29 = v27 == v26;
        }
        else {
          BOOL v29 = 1;
        }
        if (!v29)
        {
          uint64_t v30 = *a2;
          uint64_t v31 = *a1;
          do
          {
            unint64_t v32 = *v31;
            unint64_t v33 = *v30;
            uint64_t v34 = v31 + 1;
            if (*v30 < *v31) {
              unint64_t v35 = v28;
            }
            else {
              unint64_t v35 = v28 + 1;
            }
            if (*v30 >= *v31) {
              ++v31;
            }
            if (v32 < v33) {
              uint64_t v31 = v34;
            }
            else {
              unint64_t v28 = v35;
            }
            if (v32 >= v33) {
              ++v30;
            }
          }
          while (v31 != v27 && v30 != &v23[v25]);
        }
        double v36 = (double)v28;
        if (v25) {
          double v37 = v36 / (double)(unint64_t)v25;
        }
        else {
          double v37 = 0.0;
        }
        if (v26 == v27) {
          double v38 = 1.0;
        }
        else {
          double v38 = v36 / (double)(unint64_t)(v27 - v26);
        }
        unint64_t v39 = (double *)(*a4 + 16 * v24);
        *unint64_t v39 = v37;
        v39[1] = v38;
        v21 += 2;
      }
      while (v21 != v22);
      long long v21 = (uint64_t *)v41;
    }
    if (v21)
    {
      *((void *)&v41 + 1) = v21;
      operator delete(v21);
    }
  }
}

void sub_224511DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<double,double>>::vector(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_OWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_224511E4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<double,double>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_224511EC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::validate<(MLModelType)602>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v25[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 16)) {
    unint64_t v4 = *(uint64_t **)(a1 + 16);
  }
  else {
    unint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v18);
  CoreML::validateModelDescription((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v23);
  unint64_t v18 = v23;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_OWORD *)long long __p = *(_OWORD *)v24;
  *(void *)&__p[16] = *(void *)&v24[16];
  if (CoreML::Result::good((CoreML::Result *)&v18))
  {
    BOOL v5 = operator new(0x10uLL);
    unint64_t v15 = v5;
    *BOOL v5 = xmmword_2247177F0;
    uint64_t v16 = v5 + 1;
    uint64_t v17 = v5 + 1;
    CoreML::Result::Result((CoreML::Result *)&v23);
    if (*((int *)v4 + 6) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        CoreML::validateSchemaTypes((int **)&v15, *(void *)(v4[4] + 8 * v6 + 8), (CoreML::Result *)&v20);
        long long v23 = v20;
        if ((v24[23] & 0x80000000) != 0) {
          operator delete(*(void **)v24);
        }
        *(_OWORD *)uint64_t v24 = v21;
        *(void *)&v24[16] = v22;
        if (!CoreML::Result::good((CoreML::Result *)&v23)) {
          break;
        }
        ++v6;
      }
      while (v6 < *((int *)v4 + 6));
    }
    uint64_t v7 = *(void *)v24;
    v25[0] = *(void *)&v24[8];
    *(void *)((char *)v25 + 7) = *(void *)&v24[15];
    char v8 = v24[23];
    unint64_t v18 = v23;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)long long __p = v7;
    *(void *)&__p[8] = v25[0];
    *(void *)&__p[15] = *(void *)((char *)v25 + 7);
    __p[23] = v8;
    if (v15)
    {
      uint64_t v16 = v15;
      operator delete(v15);
    }
    if (CoreML::Result::good((CoreML::Result *)&v18))
    {
      uint64_t v9 = operator new(4uLL);
      unint64_t v20 = v9;
      _DWORD *v9 = 5;
      *(void *)&long long v21 = v9 + 1;
      *((void *)&v21 + 1) = v9 + 1;
      CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 5), 1, (int **)&v20, (uint64_t)&v23);
      unint64_t v18 = v23;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      *(_OWORD *)long long __p = *(_OWORD *)v24;
      *(void *)&__p[16] = *(void *)&v24[16];
      v24[23] = 0;
      v24[0] = 0;
      if (v20)
      {
        *(void *)&long long v21 = v20;
        operator delete(v20);
      }
      uint64_t v10 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v18);
      if (v10)
      {
        uint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = *(_DWORD *)(a1 + 44) == 602
              ? *(int **)(a1 + 32)
              : (int *)CoreML::Specification::FeatureVectorizer::default_instance((CoreML::Specification::FeatureVectorizer *)v10);
          if (v11 >= v12[6]) {
            break;
          }
          if (*(_DWORD *)(a1 + 44) == 602) {
            uint64_t v10 = *(uint64_t **)(a1 + 32);
          }
          else {
            uint64_t v10 = CoreML::Specification::FeatureVectorizer::default_instance((CoreML::Specification::FeatureVectorizer *)v12);
          }
          if (!*(void *)(*(void *)(v10[4] + 8 * v11++ + 8) + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(&v23, "Dimension size must be greater tha zero.");
            CoreML::Result::Result((_DWORD *)a2, 13);
            if ((v24[15] & 0x80000000) != 0) {
              operator delete(v23);
            }
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            return result;
          }
        }
      }
    }
  }
  *(void *)a2 = v18;
  double result = *(double *)__p;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
  *(void *)(a2 + 24) = *(void *)&__p[16];
  return result;
}

void sub_2245121E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::Result::Result(CoreML::Result *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "not an error");
  *(void *)this = 0;
  std::operator+<char>();
  if (v4 < 0) {
    operator delete(__p);
  }
  return this;
}

void sub_2245122E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *CoreML::Result::Result(_DWORD *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  std::operator+<char>();
  return a1;
}

_DWORD *CoreML::Result::Result(_DWORD *a1, int a2)
{
  *a1 = a2;
  a1[1] = 0;
  std::operator+<char>();
  return a1;
}

BOOL CoreML::Result::good(CoreML::Result *this)
{
  return (*(_DWORD *)this & 0xFFFFFFEF) == 0;
}

uint64_t CoreML::Result::featureTypeInvariantError@<X0>(uint64_t *a1@<X0>, CoreML::FeatureType *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Feature type invariant violation. Expected feature type ", 56);
  CoreML::FeatureType::toString(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" to be one of: ", 15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      CoreML::FeatureType::toString((CoreML::FeatureType *)(v9 + v10), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &__p;
      }
      else {
        uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v12, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v9 = *a1;
      unint64_t v14 = (a1[1] - *a1) >> 4;
      if (v11 != v14 - 1)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
        uint64_t v9 = *a1;
        unint64_t v14 = (a1[1] - *a1) >> 4;
      }
      ++v11;
      v10 += 16;
    }
    while (v11 < v14);
  }
  std::stringbuf::str();
  unint64_t v15 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v15);
  }
  *(_OWORD *)unint64_t v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(a3 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
  *(_DWORD *)a3 = 2;
  v19[0] = *MEMORY[0x263F8C2B8];
  uint64_t v16 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v20[0] = v16;
  v20[1] = MEMORY[0x263F8C318] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v22);
}

void sub_224512630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::batch_size(turi::visualization *this, const turi::gl_sarray *a2)
{
  return 5000000;
}

uint64_t turi::visualization::batch_size(turi::visualization *this, const turi::gl_sarray *a2, const turi::gl_sarray *a3)
{
  return 2500000;
}

unint64_t turi::visualization::batch_size(turi::visualization *this, const turi::gl_sframe *a2)
{
  (*(void (**)(void *__return_ptr))(*(void *)this + 24))(v5);
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - v5[0]) >> 3);
  uint64_t v6 = (void **)v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (v2 <= 1) {
    unint64_t v3 = 1;
  }
  else {
    unint64_t v3 = v2;
  }
  return 0x4C4B40 / v3;
}

uint64_t turi::visualization::boxes_and_whiskers_result::vega_column_data(turi::visualization::boxes_and_whiskers_result *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
  turi::visualization::groupby_result<turi::groupby_operators::quantile>::get_grouped((uint64_t)this + 8, (uint64_t)v20);
  unint64_t v2 = v21;
  if (v21)
  {
    uint64_t v3 = 0;
    do
    {
      if (*((unsigned char *)v2 + 28) != 7)
      {
        uint64_t v4 = v2[2];
        uint64_t v5 = v2[4];
        uint64_t v6 = *(uint64_t **)(v5 + 8);
        uint64_t v7 = *(uint64_t **)(v5 + 16);
        if (v6 == v7) {
          goto LABEL_8;
        }
        char v8 = 1;
        do
        {
          uint64_t v9 = *v6++;
          v8 &= (v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        }
        while (v6 != v7);
        if (v8)
        {
LABEL_8:
          if (v3) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",", 1);
          }
          uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"{\"", 2);
          if (byte_268088DBF >= 0) {
            unint64_t v11 = &x_name;
          }
          else {
            unint64_t v11 = (uint64_t *)x_name;
          }
          if (byte_268088DBF >= 0) {
            uint64_t v12 = byte_268088DBF;
          }
          else {
            uint64_t v12 = unk_268088DB0;
          }
          std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\": ", 3);
          turi::visualization::extra_label_escape((uint64_t *)(v4 + 8), 1, (uint64_t)__p);
          if ((v19 & 0x80u) == 0) {
            unint64_t v14 = __p;
          }
          else {
            unint64_t v14 = (void **)__p[0];
          }
          if ((v19 & 0x80u) == 0) {
            uint64_t v15 = v19;
          }
          else {
            uint64_t v15 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v14, v15);
          if ((char)v19 < 0) {
            operator delete(__p[0]);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"min\": ", 8);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"lower quartile\": ", 19);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"median\": ", 11);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"upper quartile\": ", 19);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"max\": ", 8);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"}", 1);
          ++v3;
        }
      }
      unint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  std::stringbuf::str();
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v20);
  v22[0] = *MEMORY[0x263F8C2B8];
  uint64_t v16 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v23[0] = v16;
  v23[1] = MEMORY[0x263F8C318] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v25);
}

void sub_224512A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

double turi::visualization::groupby_result<turi::groupby_operators::quantile>::get_grouped@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v4[2] = *MEMORY[0x263EF8340];
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    turi::groupby_operators::quantile::emit((turi::groupby_operators::quantile *)(v3 + 32), (uint64_t)v4);
  }
  return result;
}

void sub_224512D20(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void turi::visualization::plot_boxes_and_whiskers(turi::visualization *this@<X0>, const turi::gl_sarray *a2@<X1>, const turi::gl_sarray *a3@<X2>, const turi::flexible_type *a4@<X3>, const turi::flexible_type *a5@<X4>, void *a6@<X8>)
{
  turi::visualization::boxes_and_whiskers_spec(a3, a4, a5, &v26);
  double v25 = (double)(unint64_t)turi::gl_sarray::size(this);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v19);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v24 = 0;
  uint64_t v23 = 0;
  v18[0] = &unk_26D785518;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v16);
  turi::gl_sframe::operator[]((uint64_t)v16, (uint64_t)&x_name, (turi::gl_sarray *)v13);
  turi::gl_sarray_reference::operator=((uint64_t)v13, (uint64_t)this);
  *(void *)&v13[0] = &unk_26D759E80;
  if (v15 < 0) {
    operator delete(__p);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v13);
  turi::gl_sframe::operator[]((uint64_t)v16, (uint64_t)y_name, (turi::gl_sarray *)v13);
  turi::gl_sarray_reference::operator=((uint64_t)v13, (uint64_t)a2);
  *(void *)&v13[0] = &unk_26D759E80;
  if (v15 < 0) {
    operator delete(__p);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v13);
  uint64_t v11 = turi::visualization::batch_size(this, a2, v10);
  turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::init((uint64_t)v18, (uint64_t)v16, v11);
  std::allocate_shared[abi:ne180100]<turi::visualization::boxes_and_whiskers,std::allocator<turi::visualization::boxes_and_whiskers>,turi::visualization::boxes_and_whiskers&,void>((uint64_t)v18, &v12);
  v13[0] = v12;
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>((uint64_t)&v26, (uint64_t *)v13, &v25, a6);
  if (*((void *)&v13[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13[0] + 1));
  }
  v16[0] = &unk_26D759E10;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  v18[0] = &unk_26D7855D8;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  unsigned __int8 v19 = &unk_26D759E10;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_2245130C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, ...)
{
  va_start(va, a15);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  turi::visualization::boxes_and_whiskers::~boxes_and_whiskers((turi::visualization::boxes_and_whiskers *)va);
  if (*(char *)(v15 - 73) < 0) {
    operator delete(*(void **)(v15 - 96));
  }
  _Unwind_Resume(a1);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = "Transformer is already initialized.";
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v6 = &v7;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v6);
  }
  *(void *)(a1 + 8) = a3;
  turi::gl_sframe::operator=(a1 + 16, a2);
  uint64_t v4 = (char *)operator new(0x60uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_26D785710;
  *(_OWORD *)(v4 + 72) = 0u;
  *((void *)v4 + 11) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  v4[88] = 7;
  *((void *)v4 + 3) = &unk_26D785490;
  *((void *)v4 + 4) = &unk_26D7854B8;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v4 + 24;
  *(void *)(a1 + 48) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
}

void turi::visualization::boxes_and_whiskers::~boxes_and_whiskers(turi::visualization::boxes_and_whiskers *this)
{
  *(void *)this = &unk_26D7855D8;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 2) = &unk_26D759E10;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D7855D8;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 2) = &unk_26D759E10;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::visualization::boxes_and_whiskers_result::~boxes_and_whiskers_result(turi::visualization::boxes_and_whiskers_result *this)
{
  *((void *)this + 1) = &unk_26D7856E8;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::~__hash_table((uint64_t)this + 16);
}

{
  uint64_t vars8;

  *((void *)this + 1) = &unk_26D7856E8;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::~__hash_table((uint64_t)this + 16);
  JUMPOUT(0x22A614FA0);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14[4] = *(void ***)MEMORY[0x263EF8340];
  v14[0] = (void **)"Transformer must be initialized before performing this operation.";
  if (!*(unsigned char *)(a1 + 64))
  {
    v13[0] = (const char **)v14;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(v13);
  }
  uint64_t v4 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    *a2 = *(void *)(a1 + 40);
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v4);
    uint64_t v7 = turi::thread_pool::size(instance);
    char v8 = *(char **)(a1 + 56);
    uint64_t v9 = turi::gl_sframe::size((turi::gl_sframe *)(a1 + 16));
    if ((unint64_t)(v9 - *(void *)(a1 + 56)) >= *(void *)(a1 + 8)) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v10 = v9 - *(void *)(a1 + 56);
    }
    (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(v13, a1, v7);
    uint64_t v11 = (void **)operator new(0x28uLL);
    uint64_t *v11 = &unk_26D785640;
    v11[1] = v13;
    v11[2] = (void *)(a1 + 16);
    void v11[3] = (void *)v10;
    v11[4] = v8;
    void v14[3] = v11;
    turi::in_parallel((turi::thread_pool *)v14);
    std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v14);
    (*(void (**)(uint64_t, const char ***))(*(void *)a1 + 72))(a1, v13);
    *(void *)(a1 + 56) = &v8[v10];
    uint64_t v12 = *(void *)(a1 + 48);
    *a2 = *(void *)(a1 + 40);
    a2[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    v14[0] = (void **)v13;
    std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](v14);
  }
}

void sub_2245135FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::eof(uint64_t a1)
{
  uint64_t v4 = "Transformer must be initialized before performing this operation.";
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = &v4;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v3);
  }
  uint64_t v1 = *(void *)(a1 + 56);
  return v1 == turi::gl_sframe::size((turi::gl_sframe *)(a1 + 16));
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get_total_rows(uint64_t a1)
{
  uint64_t v4 = "Transformer must be initialized before performing this operation.";
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = &v4;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v3);
  }
  uint64_t v1 = (turi::gl_sframe *)(a1 + 16);
  return turi::gl_sframe::size(v1);
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get_rows_processed(uint64_t a1)
{
  uint64_t v3 = "Transformer must be initialized before performing this operation.";
  if (!*(unsigned char *)(a1 + 64))
  {
    unint64_t v2 = &v3;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v2);
  }
  return *(void *)(a1 + 56);
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get_current@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)a2 = &unk_26D7856C0;
  *(void *)(a2 + 8) = &unk_26D7856E8;
  uint64_t result = std::unordered_map<turi::flexible_type,turi::groupby_operators::quantile>::unordered_map(a2 + 16, v3 + 16);
  uint64_t v5 = *(void *)(v3 + 56);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(v3 + 64);
  *(void *)(a2 + 56) = v5;
  *(void *)a2 = &unk_26D785490;
  *(void *)(a2 + 8) = &unk_26D7854B8;
  return result;
}

void *turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::split_input@<X0>(unint64_t a1@<X1>, void *a2@<X8>)
{
  return std::vector<turi::visualization::boxes_and_whiskers_result>::vector(a2, a1);
}

unsigned __int8 *turi::visualization::groupby<turi::visualization::boxes_and_whiskers_result>::merge_results(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = turi::visualization::groupby_result<turi::groupby_operators::quantile>::combine((unsigned __int8 *)(*((void *)v4 + 5) + 8), v2 + 8);
      v2 += 72;
    }
    while (v2 != v3);
  }
  return result;
}

void std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D785640;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D785640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  return turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t result, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 3);
  if (v2 > a2)
  {
    unint64_t v4 = *(void *)(result + 16);
    unint64_t v5 = v4 / v2;
    uint64_t v6 = *(void *)(result + 24);
    unint64_t v7 = v6 + v4 / v2 * a2;
    unint64_t v8 = v6 + v4;
    unint64_t v9 = v7 + v5;
    if (v2 - 1 == a2) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = v9;
    }
    turi::gl_sframe::range_iterator(*(turi::gl_sframe **)(result + 8), v7, v10);
  }
  return result;
}

void sub_224513DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *turi::visualization::groupby_result<turi::groupby_operators::quantile>::update_or_combine<turi::flexible_type>(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = (void *)(a1 + 8);
  __n128 result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((void *)(a1 + 8), a2);
  if (!result)
  {
    if (*(void *)(a1 + 32) > 0x3E7uLL)
    {
      ++*(void *)(a1 + 48);
      return result;
    }
    (**(void (***)(uint64_t, unsigned __int8 *))a1)(a1, a2);
    __n128 result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(v4, a2);
    if (!result) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  uint64_t v6 = *(uint64_t (**)(void))(*((void *)result + 4) + 16);
  return (unsigned __int8 *)v6();
}

void std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 72;
      unint64_t v7 = v4 - 72;
      unint64_t v8 = v4 - 72;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 72;
        (*v9)(v7);
        v6 -= 72;
        BOOL v10 = v7 == v2;
        unint64_t v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::visualization::groupby_result<turi::groupby_operators::quantile>::insert_category(uint64_t a1, unsigned __int8 *a2)
{
  long long v14 = 0u;
  long long v13 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  uint64_t v6 = &unk_26D76BAC0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch((uint64_t)v10, 0.005);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,turi::groupby_operators::quantile>(a1 + 8, a2, (uint64_t *)a2, (uint64_t)&v6);
  uint64_t v6 = &unk_26D76BAC0;
  if (__p[1])
  {
    *(void **)&long long v13 = __p[1];
    operator delete(__p[1]);
  }
  uint64_t v15 = (void **)&v11;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v15 = (void **)&v10[1] + 1;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (v7)
  {
    unint64_t v8 = v7;
    operator delete(v7);
  }
  unint64_t v4 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((void *)(a1 + 8), a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (*(uint64_t (**)(void))(*((void *)v4 + 4) + 112))();
}

void sub_2245141A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12)
{
}

uint64_t std::unordered_map<turi::flexible_type,turi::groupby_operators::quantile>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::groupby_operators::quantile> const&>(a1, i + 16, (uint64_t *)i + 2);
  return a1;
}

void sub_224514234(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::groupby_operators::quantile> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unint64_t v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__construct_node_hash<std::pair<turi::flexible_type const,turi::groupby_operators::quantile> const&>(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_2245144AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__construct_node_hash<std::pair<turi::flexible_type const,turi::groupby_operators::quantile> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0xD0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_224514524(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  if (a2 != (uint64_t *)a1)
  {
    uint64_t v3 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v3;
    LODWORD(v3) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(a1 + 12) = v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL);
    }
  }
  turi::groupby_operators::quantile::quantile((turi::groupby_operators::quantile *)(a1 + 16), (const turi::groupby_operators::quantile *)(a2 + 2));
  return a1;
}

void sub_2245145C0(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

turi::groupby_operators::quantile *turi::groupby_operators::quantile::quantile(turi::groupby_operators::quantile *this, const turi::groupby_operators::quantile *a2)
{
  *(void *)this = &unk_26D76BAC0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 1, *((const void **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  long long v4 = *((_OWORD *)a2 + 2);
  uint64_t v5 = *((void *)a2 + 6);
  *((void *)this + 7) = 0;
  *((void *)this + 6) = v5;
  *((_OWORD *)this + 2) = v4;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>((void *)this + 7, *((void *)a2 + 7), *((void *)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
  long long v6 = *((_OWORD *)a2 + 5);
  long long v7 = *((_OWORD *)a2 + 6);
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 5) = v6;
  *((_OWORD *)this + 6) = v7;
  *((void *)this + std::exception_ptr::~exception_ptr((std::exception_ptr *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>((void *)this + 14, *((void *)a2 + 14), *((void *)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>((void *)this + 17, *((const void **)a2 + 17), *((void *)a2 + 18), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 3));
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  return this;
}

void sub_2245147A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::~pair(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D76BAC0;
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  BOOL v17 = (void **)(a1 + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  BOOL v17 = (void **)(a1 + 72);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_36;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_36;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          BOOL v17 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          BOOL v17 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_22:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_36;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_35;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          long long v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          unint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          float v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          atomic_ullong *volatile v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_35:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_36:
          MEMORY[0x22A614FA0](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,turi::groupby_operators::quantile>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v9 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  BOOL v17 = operator new(0xD0uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *BOOL v17 = 0;
  v17[1] = v10;
  std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]<turi::flexible_type const&,turi::groupby_operators::quantile,0>((uint64_t)(v17 + 2), a3, a4);
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  char v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *char v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11) {
          v25 %= v11;
        }
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_224514DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]<turi::flexible_type const&,turi::groupby_operators::quantile,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  if (a2 != (uint64_t *)a1)
  {
    uint64_t v3 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v3;
    LODWORD(v3) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(a1 + 12) = v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL);
    }
  }
  *(void *)(a1 + 16) = &unk_26D76BAC0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a1 + 40) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = *(void *)(a3 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 32);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 56);
  *(void *)(a1 + 88) = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  long long v8 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 112) = v8;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a3 + 112);
  *(void *)(a1 + 144) = *(void *)(a3 + 128);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  __n128 result = *(__n128 *)(a3 + 136);
  *(__n128 *)(a1 + 152) = result;
  *(void *)(a1 + 168) = *(void *)(a3 + 152);
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = 0;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a3 + 160);
  return result;
}

void *std::vector<turi::visualization::boxes_and_whiskers_result>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::object_detection::average_precision_calculator::class_data>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 72 * a2;
    uint64_t v6 = 72 * a2;
    uint64_t v7 = v4;
    do
    {
      *(_OWORD *)(v7 + 32) = 0uLL;
      *(_OWORD *)(v7 + 48) = 0uLL;
      *(void *)(v7 + 64) = 0;
      *(_OWORD *)(v7 + 16) = 0uLL;
      *(_DWORD *)(v7 + 48) = 1065353216;
      *(unsigned char *)(v7 + 64) = 7;
      *(void *)uint64_t v7 = &unk_26D785490;
      *(void *)(v7 + 8) = &unk_26D7854B8;
      v7 += 72;
      v4 += 72;
      v6 -= 72;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_224514FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

unsigned __int8 *turi::visualization::groupby_result<turi::groupby_operators::quantile>::combine(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t)result;
  if (result[56] == 7) {
    result[56] = *(unsigned char *)(a2 + 56);
  }
  for (uint64_t i = *(unsigned __int8 **)(a2 + 24); i; uint64_t i = *(unsigned __int8 **)i)
    __n128 result = turi::visualization::groupby_result<turi::groupby_operators::quantile>::update_or_combine<turi::groupby_operators::quantile>(v2, i + 16, (uint64_t)(i + 32));
  return result;
}

unsigned __int8 *turi::visualization::groupby_result<turi::groupby_operators::quantile>::update_or_combine<turi::groupby_operators::quantile>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a1 + 8);
  __n128 result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((void *)(a1 + 8), a2);
  if (result)
  {
    long long v8 = result;
    (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
    unint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*((void *)v8 + 4) + 32);
    unint64_t v10 = v8 + 32;
  }
  else
  {
    if (*(void *)(a1 + 32) > 0x3E7uLL)
    {
      ++*(void *)(a1 + 48);
      return result;
    }
    (**(void (***)(uint64_t, unsigned __int8 *))a1)(a1, a2);
    unint64_t v11 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(v6, a2);
    if (!v11) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint8x8_t v12 = v11;
    (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
    unint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*((void *)v12 + 4) + 32);
    unint64_t v10 = v12 + 32;
  }
  return (unsigned __int8 *)v9(v10, a3);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,turi::flexible_type>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v9 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  BOOL v17 = operator new(0x30uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *BOOL v17 = 0;
  v17[1] = v10;
  std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type const&,turi::flexible_type,0>((uint64_t)(v17 + 2), a3, a4);
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  char v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *char v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11) {
          v25 %= v11;
        }
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_2245153F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type const&,turi::flexible_type,0>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)__n128 result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = 0;
  if (a2 != (uint64_t *)result)
  {
    uint64_t v3 = *a2;
    *(void *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)__n128 result = v3;
    LODWORD(v3) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(result + 12) = v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
    }
  }
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 0;
  uint64_t v7 = *a3;
  *(void *)(result + 21) = *(uint64_t *)((char *)a3 + 5);
  *(void *)(result + 16) = v7;
  *(unsigned char *)(result + 28) = *((unsigned char *)a3 + 12);
  *((unsigned char *)a3 + 12) = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D785710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D785710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<turi::visualization::boxes_and_whiskers,std::allocator<turi::visualization::boxes_and_whiskers>,turi::visualization::boxes_and_whiskers&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  BOOL v4 = operator new(0x60uLL);
  __n128 result = std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::boxes_and_whiskers&,std::allocator<turi::visualization::boxes_and_whiskers>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224515574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::boxes_and_whiskers&,std::allocator<turi::visualization::boxes_and_whiskers>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D785760;
  std::allocator<turi::visualization::boxes_and_whiskers>::construct[abi:ne180100]<turi::visualization::boxes_and_whiskers,turi::visualization::boxes_and_whiskers&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2245155E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D785760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D785760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<turi::visualization::boxes_and_whiskers>::construct[abi:ne180100]<turi::visualization::boxes_and_whiskers,turi::visualization::boxes_and_whiskers&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)a2 = &unk_26D7855D8;
  *(void *)(a2 + 8) = v5;
  uint64_t result = turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a2 + 16), (const turi::gl_sframe *)(a3 + 16));
  uint64_t v7 = *(void *)(a3 + 48);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a2 + 48) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a3 + 56);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
  *(void *)(a2 + 56) = v8;
  *(void *)a2 = &unk_26D785518;
  return result;
}

void std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>(uint64_t a1@<X1>, uint64_t *a2@<X2>, double *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x140uLL);
  std::__shared_ptr_emplace<turi::visualization::Plot>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,std::allocator<turi::visualization::Plot>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_2245157A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::visualization::Plot>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,std::allocator<turi::visualization::Plot>,0>(void *a1, uint64_t a2, uint64_t *a3, double *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D755538;
  std::allocator<turi::visualization::Plot>::construct[abi:ne180100]<turi::visualization::Plot,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_224515818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::visualization::Plot>::construct[abi:ne180100]<turi::visualization::Plot,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double *a5)
{
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::visualization::Plot::Plot(a2, a3, &v6, *a5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_22451588C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *turi::visualization::categorical_heatmap::split_input@<X0>(unint64_t a1@<X1>, void *a2@<X8>)
{
  return std::vector<turi::visualization::categorical_heatmap_result>::vector(a2, a1);
}

uint64_t turi::visualization::categorical_heatmap::merge_results(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)(v4 + 40) + 8) + 32))();
      v2 += 56;
    }
    while (v2 != v3);
  }
  return result;
}

void turi::visualization::categorical_heatmap_result::vega_column_data(turi::visualization::categorical_heatmap_result *this)
{
  v58[19] = *MEMORY[0x263EF8340];
  (*(void (**)(std::string *__return_ptr))(*((void *)this + 1) + 40))(&v54);
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v50, *(uint64_t **)(v54.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v54.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(void *)(v54.__r_.__value_.__r.__words[0] + 16) - *(void *)(v54.__r_.__value_.__r.__words[0] + 8)) >> 5);
  switch(v54.__r_.__value_.__s.__data_[12])
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v54.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v1 = v54.__r_.__value_.__r.__words[0];
        if (v54.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v54.__r_.__value_.__r.__words[0] + 31) < 0) {
            operator delete(*(void **)(v54.__r_.__value_.__r.__words[0] + 8));
          }
          uint64_t v2 = (void *)v1;
          uint64_t v3 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v54.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v4 = v54.__r_.__value_.__r.__words[0];
        if (v54.__r_.__value_.__r.__words[0])
        {
          uint64_t v5 = *(void **)(v54.__r_.__value_.__r.__words[0] + 8);
          if (v5)
          {
            *(void *)(v54.__r_.__value_.__r.__words[0] + 16) = v5;
            operator delete(v5);
          }
          uint64_t v2 = (void *)v4;
          uint64_t v3 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v54.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v6 = v54.__r_.__value_.__r.__words[0];
        if (v54.__r_.__value_.__r.__words[0])
        {
          *(void *)&v38[0] = v54.__r_.__value_.__r.__words[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v54.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v6 = v54.__r_.__value_.__r.__words[0];
        if (v54.__r_.__value_.__r.__words[0])
        {
          *(void *)&v38[0] = v54.__r_.__value_.__r.__words[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
LABEL_18:
          uint64_t v2 = (void *)v6;
          uint64_t v3 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v54.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
        if (v54.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v54.__r_.__value_.__r.__words[0] + 16));
          uint64_t v2 = (void *)v12;
          unsigned int v11 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v54.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = (void *)v54.__r_.__value_.__r.__words[0];
        if (v54.__r_.__value_.__r.__words[0])
        {
          uint64_t v8 = *(void **)(v54.__r_.__value_.__r.__words[0] + 48);
          if (v8)
          {
            *(void *)(v54.__r_.__value_.__r.__words[0] + 56) = v8;
            operator delete(v8);
          }
          unint64_t v9 = (void *)v7[3];
          if (v9)
          {
            void v7[4] = v9;
            operator delete(v9);
          }
          unint64_t v10 = (std::__shared_weak_count *)v7[2];
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
          uint64_t v2 = v7;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v3 = v11 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v2, v3);
        }
      }
      break;
    default:
      break;
  }
  std::string v47 = 0;
  std::string v48 = 0;
  unint64_t v49 = 0;
  long long v44 = 0;
  unint64_t v45 = 0;
  unint64_t v46 = 0;
  v43[0] = 0;
  v43[1] = 0;
  v41[1] = 0;
  char v42 = v43;
  unint64_t v40 = v41;
  v41[0] = 0;
  memset(v38, 0, sizeof(v38));
  int v39 = 1065353216;
  if (v51 != v50)
  {
    uint64_t v13 = 0;
    if ((unint64_t)((v51 - v50) >> 5) <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (v51 - v50) >> 5;
    }
    do
    {
      uint64_t v15 = *(void *)(v50 + v13);
      uint64_t v16 = *(void *)(v50 + v13 + 16);
      memset(&v54, 0, sizeof(v54));
      memset(&v37, 0, sizeof(v37));
      BOOL v17 = *(unsigned char **)(v15 + 8);
      if (v17[12] == 7) {
        MEMORY[0x22A614700](&v54, "(null)");
      }
      else {
        std::string::operator=(&v54, (const std::string *)(*(void *)v17 + 8));
      }
      uint64_t v18 = *(void *)(v15 + 8);
      if (*(unsigned char *)(v18 + 28) == 7) {
        MEMORY[0x22A614700](&v37, "(null)");
      }
      else {
        std::string::operator=(&v37, (const std::string *)(*(void *)(v18 + 16) + 8));
      }
      if (v43 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v42, (const void **)&v54.__r_.__value_.__l.__data_))
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v42, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&v54);
        float v19 = v48;
        if ((unint64_t)v48 >= v49)
        {
          unint64_t v21 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v47, (long long *)&v54);
        }
        else
        {
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v48, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v20 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
            v48->__r_.__value_.__r.__words[2] = v54.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          }
          unint64_t v21 = v19 + 1;
        }
        std::string v48 = v21;
      }
      if (v41 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v40, (const void **)&v37.__r_.__value_.__l.__data_))
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v40, (const void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&v37);
        unint64_t v22 = v45;
        if ((unint64_t)v45 >= v46)
        {
          char v24 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v44, (long long *)&v37);
        }
        else
        {
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v45, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v23 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
            v45->__r_.__value_.__r.__words[2] = v37.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          }
          char v24 = v22 + 1;
        }
        unint64_t v45 = v24;
      }
      uint64_t v53 = &v54;
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v38, (unsigned __int8 *)&v54, (uint64_t)&std::piecewise_construct, (long long **)&v53);
      uint64_t v53 = &v37;
      *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v25 + 40), (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (long long **)&v53)+ 5) = v16;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      v13 += 32;
      --v14;
    }
    while (v14);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v54);
  std::string v26 = (unsigned __int8 *)v47;
  double v36 = v48;
  if (v47 != v48)
  {
    uint64_t v27 = 0;
    do
    {
      BOOL v29 = v44;
      char v28 = v45;
      while (v29 != (unsigned __int8 *)v28)
      {
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v38, v26, (uint64_t)&std::piecewise_construct, (long long **)&v37);
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v30 + 40), v29, (uint64_t)&std::piecewise_construct, (long long **)&v37);
        if (v27) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54.__r_.__value_.__r.__words[2], (uint64_t)"{\"x\": ", 6);
        turi::visualization::extra_label_escape((uint64_t *)v26, 1, (uint64_t)&v37);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &v37;
        }
        else {
          uint64_t v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v37.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54.__r_.__value_.__r.__words[2], (uint64_t)v31, size);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54.__r_.__value_.__r.__words[2], (uint64_t)", \"y\": ", 7);
        turi::visualization::extra_label_escape((uint64_t *)v29, 1, (uint64_t)&v37);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v33 = &v37;
        }
        else {
          unint64_t v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v34 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v34 = v37.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54.__r_.__value_.__r.__words[2], (uint64_t)v33, v34);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54.__r_.__value_.__r.__words[2], (uint64_t)", \"count\": ", 11);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54.__r_.__value_.__r.__words[2], (uint64_t)"}", 1);
        ++v27;
        v29 += 24;
      }
      v26 += 24;
    }
    while (v26 != (unsigned __int8 *)v36);
  }
  std::stringbuf::str();
  v54.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
  std::string::size_type v35 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + *(void *)(v54.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v54.__r_.__value_.__r.__words[2] = v35;
  uint64_t v55 = MEMORY[0x263F8C318] + 16;
  if (v57 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](v58);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::~__hash_table((uint64_t)v38);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v40, v41[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v42, v43[0]);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
}

void sub_2245160D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25,uint64_t a26,char a27,char *a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,int a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  a41 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a41 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a41 = &a36;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::plot_categorical_heatmap@<X0>(turi::visualization *this@<X0>, const turi::gl_sarray *a2@<X1>, const turi::gl_sarray *a3@<X2>, const turi::flexible_type *a4@<X3>, const turi::flexible_type *a5@<X4>, void *a6@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v35);
  turi::visualization::categorical_heatmap_spec(a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  double v32 = (double)(unint64_t)turi::gl_sarray::size(this);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D785930;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&__p.__r_.__value_.__r.__words[2]);
  uint64_t v28 = 0;
  BOOL v29 = 0;
  char v31 = 0;
  uint64_t v30 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7857B0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v24);
  std::string::basic_string[abi:ne180100]<0>(v19, "x");
  turi::gl_sframe::operator[]((uint64_t)v24, (uint64_t)v19, (turi::gl_sarray *)v21);
  turi::gl_sarray_reference::operator=((uint64_t)v21, (uint64_t)this);
  *(void *)&v21[0] = &unk_26D759E80;
  if (v23 < 0) {
    operator delete(v22);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v21);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "y");
  turi::gl_sframe::operator[]((uint64_t)v24, (uint64_t)v19, (turi::gl_sarray *)v21);
  turi::gl_sarray_reference::operator=((uint64_t)v21, (uint64_t)a2);
  *(void *)&v21[0] = &unk_26D759E80;
  if (v23 < 0) {
    operator delete(v22);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v21);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  uint64_t v16 = turi::visualization::batch_size(this, a2, v15);
  turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::init((uint64_t)&__p, (uint64_t)v24, v16);
  std::allocate_shared[abi:ne180100]<turi::visualization::categorical_heatmap,std::allocator<turi::visualization::categorical_heatmap>,turi::visualization::categorical_heatmap&,void>((uint64_t)&__p, v19);
  v21[0] = *(_OWORD *)v19;
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>((uint64_t)&v33, (uint64_t *)v21, &v32, a6);
  if (*((void *)&v21[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21[0] + 1));
  }
  v24[0] = &unk_26D759E10;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D785930;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_26D759E10;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  v35[0] = *MEMORY[0x263F8C2B8];
  uint64_t v17 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v35 + *(void *)(v35[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v36[0] = v17;
  v36[1] = MEMORY[0x263F8C318] + 16;
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v38);
}

void sub_224516664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  turi::visualization::categorical_heatmap::~categorical_heatmap((turi::visualization::categorical_heatmap *)&a29);
  if (a47 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = "Transformer is already initialized.";
  if (*(unsigned char *)(a1 + 64))
  {
    std::string::size_type v6 = &v7;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v6);
  }
  *(void *)(a1 + 8) = a3;
  turi::gl_sframe::operator=(a1 + 16, a2);
  std::string::size_type v4 = (char *)operator new(0x50uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)std::string::size_type v4 = &unk_26D785998;
  *((void *)v4 + 9) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((void *)v4 + 3) = &unk_26D785848;
  *((void *)v4 + 4) = &unk_26D785870;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v4 + 24;
  *(void *)(a1 + 48) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
}

void turi::visualization::categorical_heatmap::~categorical_heatmap(turi::visualization::categorical_heatmap *this)
{
  *(void *)this = &unk_26D785930;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 2) = &unk_26D759E10;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D785930;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 2) = &unk_26D759E10;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14[4] = *(void ***)MEMORY[0x263EF8340];
  v14[0] = (void **)"Transformer must be initialized before performing this operation.";
  if (!*(unsigned char *)(a1 + 64))
  {
    v13[0] = (const char **)v14;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(v13);
  }
  std::string::size_type v4 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    *a2 = *(void *)(a1 + 40);
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v4);
    uint64_t v7 = turi::thread_pool::size(instance);
    uint64_t v8 = *(char **)(a1 + 56);
    uint64_t v9 = turi::gl_sframe::size((turi::gl_sframe *)(a1 + 16));
    if ((unint64_t)(v9 - *(void *)(a1 + 56)) >= *(void *)(a1 + 8)) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v10 = v9 - *(void *)(a1 + 56);
    }
    (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(v13, a1, v7);
    unsigned int v11 = (void **)operator new(0x28uLL);
    unsigned __int8 *v11 = &unk_26D785A38;
    v11[1] = v13;
    v11[2] = (void *)(a1 + 16);
    void v11[3] = (void *)v10;
    v11[4] = v8;
    void v14[3] = v11;
    turi::in_parallel((turi::thread_pool *)v14);
    std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v14);
    (*(void (**)(uint64_t, const char ***))(*(void *)a1 + 72))(a1, v13);
    *(void *)(a1 + 56) = &v8[v10];
    uint64_t v12 = *(void *)(a1 + 48);
    *a2 = *(void *)(a1 + 40);
    a2[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    v14[0] = (void **)v13;
    std::vector<turi::visualization::categorical_heatmap_result>::__destroy_vector::operator()[abi:ne180100](v14);
  }
}

void sub_224516B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::visualization::categorical_heatmap_result>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get_current@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *a2 = &unk_26D7856C0;
  a2[1] = &unk_26D76BD90;
  uint64_t result = std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)(a2 + 2), v3 + 16);
  *a2 = &unk_26D785848;
  a2[1] = &unk_26D785870;
  return result;
}

void turi::visualization::categorical_heatmap_result::~categorical_heatmap_result(turi::visualization::categorical_heatmap_result *this)
{
  *((void *)this + 1) = &unk_26D76BD90;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 16);
}

{
  uint64_t vars8;

  *((void *)this + 1) = &unk_26D76BD90;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 16);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'turi::visualization::categorical_heatmap_result::~categorical_heatmap_result(turi::visualization::categorical_heatmap_result *this)
{
  *(void *)this = &unk_26D76BD90;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D76BD90;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x22A614FA0);
}

void *turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::split_input@<X0>(unint64_t a1@<X1>, void *a2@<X8>)
{
  return std::vector<turi::visualization::categorical_heatmap_result>::vector(a2, a1);
}

void *std::vector<turi::visualization::categorical_heatmap_result>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = 56 * a2;
    uint64_t v6 = v4 + 56 * a2;
    uint64_t v7 = v4;
    do
    {
      *(void *)(v7 + 48) = 0;
      *(_OWORD *)(v7 + 16) = 0uLL;
      *(_OWORD *)(v7 + 32) = 0uLL;
      *(_DWORD *)(v7 + 48) = 1065353216;
      *(void *)uint64_t v7 = &unk_26D785848;
      *(void *)(v7 + 8) = &unk_26D785870;
      v7 += 56;
      v4 += 56;
      v5 -= 56;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_224516DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<turi::visualization::categorical_heatmap_result>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  std::string::size_type v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 56;
      uint64_t v7 = v4 - 56;
      uint64_t v8 = v4 - 56;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 56;
        (*v9)(v7);
        v6 -= 56;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,long long>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,long long>>,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *char v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_224517224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2245172D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,long long>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<turi::visualization::categorical_heatmap_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D785998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::categorical_heatmap_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D785998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::categorical_heatmap_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<turi::visualization::categorical_heatmap,std::allocator<turi::visualization::categorical_heatmap>,turi::visualization::categorical_heatmap&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x60uLL);
  double result = std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::categorical_heatmap&,std::allocator<turi::visualization::categorical_heatmap>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224517428(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::categorical_heatmap&,std::allocator<turi::visualization::categorical_heatmap>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7859E8;
  std::allocator<turi::visualization::categorical_heatmap>::construct[abi:ne180100]<turi::visualization::categorical_heatmap,turi::visualization::categorical_heatmap&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_224517498(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7859E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7859E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<turi::visualization::categorical_heatmap>::construct[abi:ne180100]<turi::visualization::categorical_heatmap,turi::visualization::categorical_heatmap&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)a2 = &unk_26D785930;
  *(void *)(a2 + 8) = v5;
  uint64_t result = turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a2 + 16), (const turi::gl_sframe *)(a3 + 16));
  uint64_t v7 = *(void *)(a3 + 48);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a2 + 48) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a3 + 56);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
  *(void *)(a2 + 56) = v8;
  *(void *)a2 = &unk_26D7857B0;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D785A38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D785A38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  return turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(a1 + 8, *a2);
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t result, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 3);
  if (v2 > a2)
  {
    unint64_t v4 = *(void *)(result + 16);
    unint64_t v5 = v4 / v2;
    uint64_t v6 = *(void *)(result + 24);
    unint64_t v7 = v6 + v4 / v2 * a2;
    unint64_t v8 = v6 + v4;
    unint64_t v9 = v7 + v5;
    if (v2 - 1 == a2) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = v9;
    }
    turi::gl_sframe::range_iterator(*(turi::gl_sframe **)(result + 8), v7, v10);
  }
  return result;
}

void sub_224517FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, void *a20,int a21,char a22)
{
  MEMORY[0x22A614FA0](v22, 0x1012C404EF22A49);
  a19 = (void **)&a15;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a19);
  switch(a22)
  {
    case 2:
      if (atomic_fetch_add(a20, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v24 = a20;
        if (a20)
        {
          if (*((char *)a20 + 31) < 0) {
            operator delete((void *)a20[1]);
          }
          MEMORY[0x22A614FA0](v24, 0x1012C404EF22A49);
        }
      }
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      unint64_t v25 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      std::string v26 = (void *)a20[1];
      if (v26)
      {
        a20[2] = v26;
        operator delete(v26);
      }
      uint64_t v27 = v25;
      uint64_t v28 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      BOOL v29 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      a19 = (void **)(a20 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a19);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      BOOL v29 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      a19 = (void **)(a20 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a19);
LABEL_18:
      uint64_t v27 = v29;
      uint64_t v28 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v30 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)a20 + 2);
      uint64_t v27 = v30;
      unsigned int v31 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!a20) {
        goto LABEL_27;
      }
      uint64_t v27 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a20);
      unsigned int v31 = 2071181815;
LABEL_25:
      uint64_t v28 = v31 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v27, v28);
LABEL_27:
      a20 = 0;
LABEL_28:
      if (a14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a14);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void turi::visualization::plot_columnwise_summary(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (int *)global_logger();
  if (v4[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/columnwise_summary.cpp", "plot_columnwise_summary", 9, 1);
    unint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Materializing SFrame", 20);
    }
    unint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        unint64_t v9 = std::locale::use_facet(&v120, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v120);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  (*(void (**)(void))(*(void *)*a1 + 296))(*a1);
  if (!(*(uint64_t (**)(void))(*(void *)*a1 + 64))()) {
    turi::visualization::plot_columnwise_summary(std::shared_ptr<turi::unity_sframe_base>)::$_0::operator()();
  }
  uint64_t v98 = a2;
  unsigned int v117 = 0;
  std::vector<unsigned int> v118 = 0;
  unint64_t v119 = 0;
  uint64_t v114 = 0;
  long long v115 = 0;
  unint64_t v116 = 0;
  (*(void (**)(std::locale *__return_ptr))(*(void *)*a1 + 128))(&v120);
  locale = v120.__locale_;
  uint64_t v11 = v121;
  if (v120.__locale_ != v121)
  {
    unint64_t v12 = 0;
    char v13 = 0;
    char v14 = 0;
    do
    {
      (*(void (**)(std::locale **__return_ptr))(*(void *)*a1 + 192))(&v109);
      if ((v12 < 0x32) | v14 & 1)
      {
        if ((*((unsigned int (**)(std::locale *))v109->__locale_ + 14))(v109) > 2)
        {
          if ((v13 & 1) == 0)
          {
            uint64_t v22 = (int *)global_logger();
            if (v22[169] <= 4)
            {
              if (cppipc::must_cancel((cppipc *)v22)) {
LABEL_181:
              }
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              char v23 = (file_logger *)global_logger();
              unint64_t v24 = file_logger::start_stream(v23, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/columnwise_summary.cpp", "plot_columnwise_summary", 53, 1);
              unint64_t v25 = pthread_getspecific(*((void *)v24 + 74));
              if (v25 && *((unsigned char *)v25 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Warning: Skipping column '", 26);
              }
              if (*((char *)locale + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)locale, *((void *)locale + 1));
              }
              else
              {
                long long v26 = *(_OWORD *)locale;
                v112.__r_.__value_.__r.__words[2] = *((void *)locale + 2);
                *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v26;
              }
              uint64_t v42 = file_logger::operator<<<std::string>((uint64_t)v24, (uint64_t)&v112);
              uint64_t v43 = pthread_getspecific(*(void *)(v42 + 592));
              if (v43 && *((unsigned char *)v43 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)"'. Unable to show columns of type '", 35);
              }
              unsigned int v44 = (*((uint64_t (**)(std::locale *))v109->__locale_ + 14))(v109);
              unint64_t v45 = "undefined";
              if (v44 <= 9) {
                unint64_t v45 = off_2646D7D58[v44];
              }
              unint64_t v46 = (char *)pthread_getspecific(*(void *)(v42 + 592));
              if (v46)
              {
                if (v46[280])
                {
                  std::string v47 = v46 + 16;
                  size_t v48 = strlen(v45);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v45, v48);
                  size_t v49 = strlen(v45);
                  if (v49)
                  {
                    if (v45[v49 - 1] == 10) {
                      file_logger::stream_flush((file_logger *)v42);
                    }
                  }
                }
              }
              uint64_t v50 = pthread_getspecific(*(void *)(v42 + 592));
              if (v50 && *((unsigned char *)v50 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50 + 2, (uint64_t)"'; only [int, float, str] can be shown.",
              }
                  39);
              uint64_t v51 = pthread_getspecific(*(void *)(v42 + 592));
              if (v51)
              {
                if (*((unsigned char *)v51 + 280))
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(v51[2] - 24) + 16));
                  uint64_t v52 = std::locale::use_facet((const std::locale *)&v102, MEMORY[0x263F8C108]);
                  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
                  std::locale::~locale((std::locale *)&v102);
                  std::ostream::put();
                  std::ostream::flush();
                  file_logger::stream_flush((file_logger *)v42);
                  if (*(_DWORD *)(v42 + 600) == 7) {
                    goto LABEL_188;
                  }
                }
              }
              uint64_t v53 = pthread_getspecific(*(void *)(v42 + 592));
              if (v53 && *((unsigned char *)v53 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)"Further warnings of unsupported type will be suppressed.", 56);
              }
              std::string v54 = pthread_getspecific(*(void *)(v42 + 592));
              if (v54)
              {
                if (*((unsigned char *)v54 + 280))
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(v54[2] - 24) + 16));
                  uint64_t v55 = std::locale::use_facet((const std::locale *)&v102, MEMORY[0x263F8C108]);
                  ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
                  std::locale::~locale((std::locale *)&v102);
                  std::ostream::put();
                  std::ostream::flush();
                  file_logger::stream_flush((file_logger *)v42);
                  if (*(_DWORD *)(v42 + 600) == 7)
                  {
LABEL_188:
                    __print_back_trace();
                    uint64_t v96 = __cxa_allocate_exception(8uLL);
                    void *v96 = "LOG_FATAL encountered";
                    __cxa_throw(v96, MEMORY[0x263F8C1D8], 0);
                  }
                }
              }
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
            }
          }
          char v13 = 1;
        }
        else
        {
          uint64_t v15 = v115;
          if ((unint64_t)v115 >= v116)
          {
            uint64_t v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v114, (long long *)locale);
          }
          else
          {
            if (*((char *)locale + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v115, *(const std::string::value_type **)locale, *((void *)locale + 1));
            }
            else
            {
              long long v16 = *(_OWORD *)locale;
              v115->__r_.__value_.__r.__words[2] = *((void *)locale + 2);
              *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
            }
            uint64_t v27 = v15 + 1;
          }
          ++v12;
          long long v115 = v27;
        }
      }
      else
      {
        float v17 = (int *)global_logger();
        if (v17[169] <= 4)
        {
          if (cppipc::must_cancel((cppipc *)v17)) {
            goto LABEL_181;
          }
          float v18 = (file_logger *)global_logger();
          BOOL v19 = file_logger::start_stream(v18, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/columnwise_summary.cpp", "plot_columnwise_summary", 30, 1);
          unint64_t v20 = pthread_getspecific(*((void *)v19 + 74));
          if (v20 && *((unsigned char *)v20 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)"Warning: Skipping column '", 26);
          }
          if (*((char *)locale + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)locale, *((void *)locale + 1));
          }
          else
          {
            long long v21 = *(_OWORD *)locale;
            v113.__r_.__value_.__r.__words[2] = *((void *)locale + 2);
            *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v21;
          }
          uint64_t v28 = file_logger::operator<<<std::string>((uint64_t)v19, (uint64_t)&v113);
          BOOL v29 = pthread_getspecific(*(void *)(v28 + 592));
          if (v29 && *((unsigned char *)v29 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"' [", 3);
          }
          unsigned int v30 = (*((uint64_t (**)(std::locale *))v109->__locale_ + 14))(v109);
          unsigned int v31 = "undefined";
          if (v30 <= 9) {
            unsigned int v31 = off_2646D7D58[v30];
          }
          double v32 = (char *)pthread_getspecific(*(void *)(v28 + 592));
          if (v32)
          {
            if (v32[280])
            {
              unint64_t v33 = v32 + 16;
              size_t v34 = strlen(v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v31, v34);
              size_t v35 = strlen(v31);
              if (v35)
              {
                if (v31[v35 - 1] == 10) {
                  file_logger::stream_flush((file_logger *)v28);
                }
              }
            }
          }
          double v36 = pthread_getspecific(*(void *)(v28 + 592));
          if (v36 && *((unsigned char *)v36 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36 + 2, (uint64_t)"]. Unable to show more than 50 columns.", 39);
          }
          char v37 = pthread_getspecific(*(void *)(v28 + 592));
          if (v37)
          {
            if (*((unsigned char *)v37 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(v37[2] - 24) + 16));
              uint64_t v38 = std::locale::use_facet((const std::locale *)&v102, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
              std::locale::~locale((std::locale *)&v102);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v28);
              if (*(_DWORD *)(v28 + 600) == 7) {
                goto LABEL_182;
              }
            }
          }
          int v39 = pthread_getspecific(*(void *)(v28 + 592));
          if (v39 && *((unsigned char *)v39 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39 + 2, (uint64_t)"Further warnings of more than 50 columns will be suppressed.", 60);
          }
          unint64_t v40 = pthread_getspecific(*(void *)(v28 + 592));
          if (v40)
          {
            if (*((unsigned char *)v40 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(v40[2] - 24) + 16));
              long long v41 = std::locale::use_facet((const std::locale *)&v102, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
              std::locale::~locale((std::locale *)&v102);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v28);
              if (*(_DWORD *)(v28 + 600) == 7)
              {
LABEL_182:
                __print_back_trace();
                uint64_t v95 = __cxa_allocate_exception(8uLL);
                void *v95 = "LOG_FATAL encountered";
                __cxa_throw(v95, MEMORY[0x263F8C1D8], 0);
              }
            }
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
        }
        char v14 = 1;
      }
      if (v110) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v110);
      }
      locale = (std::locale::__imp *)((char *)locale + 24);
    }
    while (locale != v11);
  }
  unsigned int v109 = &v120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 184))(&v107);
  turi::gl_sframe::gl_sframe(&v109, &v107);
  if (v108) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
  }
  unint64_t v57 = turi::visualization::batch_size((turi::visualization *)&v109, v56);
  uint64_t v58 = v114;
  uint64_t v59 = v115;
  if (v114 != v115)
  {
    unint64_t v60 = v57;
    while (1)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 192))(&v102);
      int v61 = (*(uint64_t (**)(std::string::size_type))(*(void *)v102.__r_.__value_.__l.__data_ + 112))(v102.__r_.__value_.__r.__words[0]);
      if (!v61) {
        break;
      }
      if (v61 == 1)
      {
        _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization9histogramIdEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v106);
        uint64_t v70 = v106;
        long long v104 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
        if (v102.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v102.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        turi::gl_sarray::gl_sarray(&v120, &v104);
        (*(void (**)(uint64_t, std::locale *, unint64_t))(*(void *)v70 + 80))(v70, &v120, v60);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v120);
        if (*((void *)&v104 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v104 + 1));
        }
        long long v63 = v106;
        uint64_t v64 = *((void *)&v106 + 1);
        if (*((void *)&v106 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v106 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v65 = v118;
        if ((unint64_t)v118 < v119) {
          goto LABEL_131;
        }
        long long v99 = v63;
        uint64_t v66 = (v118 - v117) >> 4;
        unint64_t v71 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = v119 - (void)v117;
        if ((uint64_t)(v119 - (void)v117) >> 3 > v71) {
          unint64_t v71 = v72 >> 3;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v71;
        }
LABEL_138:
        size_t v124 = &v119;
        uint64_t v77 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v119, v69);
        uint64_t v78 = (std::locale::__imp *)((char *)v77 + 16 * v66);
        v120.__locale_ = v77;
        uint64_t v121 = v78;
        long long v123 = (char *)v77 + 16 * v79;
        *(_OWORD *)uint64_t v78 = v99;
        uint64_t v122 = (char *)v78 + 16;
        std::vector<std::shared_ptr<turi::visualization::transformation_base>>::__swap_out_circular_buffer((uint64_t *)&v117, &v120);
        unint64_t v74 = v118;
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&v120.__locale_);
        goto LABEL_139;
      }
      if (v61 == 2)
      {
        _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization14item_frequencyENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v106);
        uint64_t v62 = v106;
        long long v103 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
        if (v102.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v102.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        turi::gl_sarray::gl_sarray(&v120, &v103);
        (*(void (**)(uint64_t, std::locale *, unint64_t))(*(void *)v62 + 80))(v62, &v120, v60);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v120);
        if (*((void *)&v103 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
        }
        long long v63 = v106;
        uint64_t v64 = *((void *)&v106 + 1);
        if (*((void *)&v106 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v106 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v65 = v118;
        if ((unint64_t)v118 >= v119)
        {
          long long v99 = v63;
          uint64_t v66 = (v118 - v117) >> 4;
          unint64_t v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v68 = v119 - (void)v117;
          if ((uint64_t)(v119 - (void)v117) >> 3 > v67) {
            unint64_t v67 = v68 >> 3;
          }
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v69 = v67;
          }
          goto LABEL_138;
        }
LABEL_131:
        *(void *)unint64_t v65 = v63;
        *((void *)v65 + 1) = v64;
        unint64_t v74 = v65 + 16;
LABEL_139:
        std::vector<unsigned int> v118 = v74;
        if (*((void *)&v106 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v106 + 1));
        }
      }
      if (v102.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__r_.__value_.__l.__size_);
      }
      if (++v58 == v59) {
        goto LABEL_144;
      }
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization9histogramIxEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v106);
    uint64_t v73 = v106;
    long long v105 = *(_OWORD *)&v102.__r_.__value_.__l.__data_;
    if (v102.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v102.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    turi::gl_sarray::gl_sarray(&v120, &v105);
    (*(void (**)(uint64_t, std::locale *, unint64_t))(*(void *)v73 + 80))(v73, &v120, v60);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v120);
    if (*((void *)&v105 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v105 + 1));
    }
    long long v63 = v106;
    uint64_t v64 = *((void *)&v106 + 1);
    if (*((void *)&v106 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v106 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v65 = v118;
    if ((unint64_t)v118 < v119) {
      goto LABEL_131;
    }
    long long v99 = v63;
    uint64_t v66 = (v118 - v117) >> 4;
    unint64_t v75 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v76 = v119 - (void)v117;
    if ((uint64_t)(v119 - (void)v117) >> 3 > v75) {
      unint64_t v75 = v76 >> 3;
    }
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v69 = v75;
    }
    goto LABEL_138;
  }
LABEL_144:
  if (v118 == v117) {
    turi::visualization::plot_columnwise_summary(std::shared_ptr<turi::unity_sframe_base>)::$_1::operator()();
  }
  v120.__locale_ = 0;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  if (v115 != v114)
  {
    unint64_t v80 = 0;
    do
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 192))(&v102);
      char v81 = (*(uint64_t (**)(std::string::size_type))(*(void *)v102.__r_.__value_.__l.__data_ + 112))(v102.__r_.__value_.__r.__words[0]);
      char v82 = v81;
      uint64_t v83 = v121;
      if (v121 >= (std::locale::__imp *)v122)
      {
        uint64_t v85 = v120.__locale_;
        int64_t v86 = v121 - v120.__locale_;
        int64_t v87 = v121 - v120.__locale_ + 1;
        if (v87 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v88 = v122 - (char *)v120.__locale_;
        if (2 * (v122 - (char *)v120.__locale_) > (unint64_t)v87) {
          int64_t v87 = 2 * v88;
        }
        if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v89 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v89 = v87;
        }
        if (v89) {
          unint64_t v90 = (std::locale::__imp *)operator new(v89);
        }
        else {
          unint64_t v90 = 0;
        }
        uint64_t v91 = (std::locale::__imp *)((char *)v90 + v86);
        uint64_t v92 = (char *)v90 + v86;
        unsigned char *v92 = v82;
        unint64_t v84 = (std::locale::__imp *)(v92 + 1);
        if (v83 != v85)
        {
          unint64_t v93 = (char *)v83 + ~(unint64_t)v85;
          do
          {
            char v94 = *((unsigned char *)v83 - 1);
            uint64_t v83 = (std::locale::__imp *)((char *)v83 - 1);
            (v93--)[(void)v90] = v94;
          }
          while (v83 != v85);
          uint64_t v91 = v90;
        }
        v120.__locale_ = v91;
        uint64_t v121 = v84;
        uint64_t v122 = (char *)v90 + v89;
        if (v85) {
          operator delete(v85);
        }
      }
      else
      {
        *(unsigned char *)uint64_t v121 = v81;
        unint64_t v84 = (std::locale::__imp *)((char *)v83 + 1);
      }
      uint64_t v121 = v84;
      if (v102.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__r_.__value_.__l.__size_);
      }
      ++v80;
    }
    while (v80 < 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (char *)v114) >> 3));
  }
  v102.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void))(*(void *)*a1 + 64))();
  std::allocate_shared[abi:ne180100]<turi::visualization::summary_view_transformation,std::allocator<turi::visualization::summary_view_transformation>,turi::visualization::transformation_collection &,std::vector<std::string> &,std::vector<turi::flex_type_enum> &,unsigned long,void>((uint64_t)&v117, (long long **)&v114, (uint64_t)&v120, &v102, &v106);
  turi::visualization::summary_view_spec((turi::visualization *)((v118 - v117) >> 4), &v102);
  long long v101 = v106;
  if (*((void *)&v106 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v106 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v100 = ((v118 - v117) >> 4) * (*(uint64_t (**)(void))(*(void *)*a1 + 64))();
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,unsigned long,void>((uint64_t)&v102, (uint64_t *)&v101, (unint64_t *)&v100, v98);
  if (*((void *)&v101 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v101 + 1));
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v106 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v106 + 1));
  }
  if (v120.__locale_)
  {
    uint64_t v121 = v120.__locale_;
    operator delete(v120.__locale_);
  }
  unsigned int v109 = (std::locale *)&unk_26D759E10;
  if (v111) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v111);
  }
  v120.__locale_ = (std::locale::__imp *)&v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  v120.__locale_ = (std::locale::__imp *)&v117;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
}