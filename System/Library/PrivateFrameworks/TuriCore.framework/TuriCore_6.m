void *turi::sframe_iterator::operator*(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  atomic_ullong *volatile v8;
  atomic_ullong *volatile v9;
  uint64_t v10;
  atomic_ullong *volatile v11;
  void *v12;
  atomic_ullong *volatile v13;
  atomic_ullong *volatile v14;
  unsigned int v15;
  atomic_ullong *volatile v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  void **v25;

  if (*(void *)(*a1 + 8) != *(void *)*a1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = a1[1];
      v6 = (uint64_t *)(v5 + v2 + 16);
      v7 = a1[7] + v3;
      if (v6 != (uint64_t *)v7)
      {
        switch(*(unsigned char *)(v7 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v8 = *(atomic_ullong *volatile *)v7;
              if (!*(void *)v7) {
                goto LABEL_36;
              }
              if (*((char *)v8 + 31) < 0) {
                operator delete((void *)v8[1]);
              }
              v9 = v8;
              v10 = 0x1012C404EF22A49;
              goto LABEL_35;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v11 = *(atomic_ullong *volatile *)v7;
              if (!*(void *)v7) {
                goto LABEL_36;
              }
              v12 = (void *)v11[1];
              if (v12)
              {
                v11[2] = (atomic_ullong)v12;
                operator delete(v12);
              }
              v9 = v11;
              v10 = 0x1080C409938AC02;
              goto LABEL_35;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v13 = *(atomic_ullong *volatile *)v7;
              if (!*(void *)v7) {
                goto LABEL_36;
              }
              v25 = (void **)(v13 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v25);
              goto LABEL_21;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v13 = *(atomic_ullong *volatile *)v7;
              if (!*(void *)v7) {
                goto LABEL_36;
              }
              v25 = (void **)(v13 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v25);
LABEL_21:
              v9 = v13;
              v10 = 0x1020C405E66F15BLL;
              goto LABEL_35;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v14 = *(atomic_ullong *volatile *)v7;
              if (!*(void *)v7) {
                goto LABEL_36;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v14 + 2);
              v9 = v14;
              v15 = -235920773;
              goto LABEL_34;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v16 = *(atomic_ullong *volatile *)v7;
              if (*(void *)v7)
              {
                v17 = (void *)v16[6];
                if (v17)
                {
                  v16[7] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                v18 = (void *)v16[3];
                if (v18)
                {
                  v16[4] = (atomic_ullong)v18;
                  operator delete(v18);
                }
                v19 = (std::__shared_weak_count *)v16[2];
                if (v19) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                }
                v9 = v16;
                v15 = 2071181815;
LABEL_34:
                v10 = v15 | 0x1030C4000000000;
LABEL_35:
                MEMORY[0x22A614FA0](v9, v10);
              }
LABEL_36:
              *(void *)v7 = 0;
            }
            break;
          default:
            break;
        }
        v20 = *v6;
        *(void *)(v7 + 5) = *(void *)(v5 + v2 + 21);
        *(void *)v7 = v20;
        LODWORD(v20) = *(unsigned __int8 *)(v5 + v2 + 28);
        *(unsigned char *)(v7 + 12) = v20;
        v21 = v20 > 9;
        v22 = (1 << v20) & 0x33C;
        if (!v21 && v22 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v7, 1uLL);
        }
      }
      ++v4;
      v3 += 16;
      v2 += 48;
    }
    while (v4 < (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 4);
  }
  return a1 + 7;
}

void turi::sframe_iterator::~sframe_iterator(turi::sframe_iterator *this)
{
  v2 = (void **)((char *)this + 56);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 8);
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v4 - 48);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  v11 = a2 - 2;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (uint64_t)a2 - v12;
    unint64_t v16 = (uint64_t)((uint64_t)a2 - v12) >> 4;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v24 = *(void *)(a3 + 24);
          if (!v24) {
            goto LABEL_48;
          }
          result = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v24 + 48))(v24, a2 - 2, v12);
          if (result)
          {
            long long v27 = *(_OWORD *)v12;
            uint64_t v25 = *v11;
            *(void *)(v12 + 5) = *(uint64_t *)((char *)a2 - 11);
            *(void *)unint64_t v12 = v25;
            uint64_t *v11 = v27;
            *(uint64_t *)((char *)a2 - 11) = *(void *)((char *)&v27 + 5);
          }
          break;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)v12, (long long *)(v12 + 16), a2 - 2, a3);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v12, v12 + 16, (void *)(v12 + 32), a2 - 2, a3);
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v12, v12 + 16, (void *)(v12 + 32), (void *)(v12 + 48), a2 - 2, a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 383) {
      break;
    }
    if (v14 == 1)
    {
      if ((uint64_t *)v12 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,turi::flexible_type*>((uint64_t *)v12, a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = v12 + 16 * (v16 >> 1);
    if ((unint64_t)v15 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)v12, (long long *)(v12 + 16 * (v16 >> 1)), a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)(v12 + 16), (long long *)(v18 - 16), a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)(v12 + 32), (long long *)(v12 + 16 + 16 * v17), a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)(v18 - 16), (long long *)v18, (void *)(v12 + 16 + 16 * v17), a3);
      long long v26 = *(_OWORD *)v12;
      uint64_t v19 = *(void *)v18;
      *(void *)(v12 + 5) = *(void *)(v18 + 5);
      *(void *)unint64_t v12 = v19;
      *(void *)(v18 + 5) = *(void *)((char *)&v26 + 5);
      *(void *)unint64_t v18 = v26;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)(v12 + 16 * (v16 >> 1)), (long long *)v12, a2 - 2, a3);
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v20 = *(void *)(a3 + 24);
    if (!v20) {
LABEL_48:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    if (((*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)v20 + 48))(v20, v12 - 16, v12) & 1) == 0)
    {
      result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::flexible_type *,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &>(v12, a2, a3);
      unint64_t v12 = result;
      goto LABEL_20;
    }
LABEL_15:
    v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::flexible_type *,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &>((atomic_ullong *volatile *)v12, a2, a3);
    if ((v22 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v12, (uint64_t)v21, a3);
    unint64_t v12 = (unint64_t)(v21 + 2);
    result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((uint64_t)(v21 + 2), (uint64_t)a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = (uint64_t *)v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v23)
    {
LABEL_18:
      result = std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,false>(v10, v21, a3, -v14, a5 & 1);
      unint64_t v12 = (unint64_t)(v21 + 2);
LABEL_20:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v12, a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v12, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if ((void *)result != a2)
  {
    uint64_t v4 = result;
    char v5 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v7 = 0;
      v8 = (void *)result;
      do
      {
        uint64_t v9 = *(void *)(a3 + 24);
        if (!v9) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        unint64_t v10 = v5;
        result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v9 + 48))(v9, v5, v8);
        if (result)
        {
          *(void *)&v53[5] = *(void *)((char *)v10 + 5);
          *(void *)v53 = *v10;
          v53[12] = *((unsigned char *)v8 + 28);
          *((unsigned char *)v8 + 28) = 0;
          uint64_t v11 = v7;
          while (1)
          {
            uint64_t v12 = v4 + v11;
            uint64_t v13 = (atomic_ullong *volatile *)(v4 + v11 + 16);
            switch(*(unsigned char *)(v4 + v11 + 28))
            {
              case 2:
                if (atomic_fetch_add(*v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v14 = *v13;
                  if (!*v13) {
                    goto LABEL_39;
                  }
                  if (*((char *)v14 + 31) < 0) {
                    operator delete((void *)v14[1]);
                  }
                  atomic_ullong *volatile v15 = v14;
                  uint64_t v16 = 0x1012C404EF22A49;
                  goto LABEL_38;
                }
                break;
              case 3:
                if (atomic_fetch_add(*v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v23 = *v13;
                  if (!*v13) {
                    goto LABEL_39;
                  }
                  uint64_t v24 = (void *)v23[1];
                  if (v24)
                  {
                    v23[2] = (atomic_ullong)v24;
                    operator delete(v24);
                  }
                  atomic_ullong *volatile v15 = v23;
                  uint64_t v16 = 0x1080C409938AC02;
                  goto LABEL_38;
                }
                break;
              case 4:
                if (atomic_fetch_add(*v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v17 = *v13;
                  if (!*v13) {
                    goto LABEL_39;
                  }
                  v52 = (void **)(v17 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v52);
                  goto LABEL_33;
                }
                break;
              case 5:
                if (atomic_fetch_add(*v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v17 = *v13;
                  if (!*v13) {
                    goto LABEL_39;
                  }
                  v52 = (void **)(v17 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v52);
LABEL_33:
                  atomic_ullong *volatile v15 = v17;
                  uint64_t v16 = 0x1020C405E66F15BLL;
                  goto LABEL_38;
                }
                break;
              case 8:
                if (atomic_fetch_add(*v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v25 = *v13;
                  if (!*v13) {
                    goto LABEL_39;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v25 + 2);
                  atomic_ullong *volatile v15 = v25;
                  unsigned int v22 = -235920773;
                  goto LABEL_37;
                }
                break;
              case 9:
                if (atomic_fetch_add(*v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v18 = *v13;
                  if (*v13)
                  {
                    uint64_t v19 = (void *)v18[6];
                    if (v19)
                    {
                      v18[7] = (atomic_ullong)v19;
                      operator delete(v19);
                    }
                    uint64_t v20 = (void *)v18[3];
                    if (v20)
                    {
                      v18[4] = (atomic_ullong)v20;
                      operator delete(v20);
                    }
                    v21 = (std::__shared_weak_count *)v18[2];
                    if (v21) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                    }
                    atomic_ullong *volatile v15 = v18;
                    unsigned int v22 = 2071181815;
LABEL_37:
                    uint64_t v16 = v22 | 0x1030C4000000000;
LABEL_38:
                    result = MEMORY[0x22A614FA0](v15, v16);
                  }
LABEL_39:
                  *uint64_t v13 = 0;
                }
                break;
              default:
                break;
            }
            *(void *)(v4 + v11 + 21) = *(void *)(v12 + 5);
            *uint64_t v13 = *(atomic_ullong *volatile *)v12;
            *(unsigned char *)(v12 + 28) = *(unsigned char *)(v12 + 12);
            *(unsigned char *)(v12 + 12) = 0;
            if (!v11) {
              break;
            }
            uint64_t v26 = *(void *)(a3 + 24);
            if (!v26) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            result = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v26 + 48))(v26, v53, v4 + v11 - 16);
            v11 -= 16;
            if ((result & 1) == 0)
            {
              uint64_t v27 = v4 + v11 + 16;
              goto LABEL_45;
            }
          }
          uint64_t v27 = v4;
LABEL_45:
          if (v53 == (unsigned char *)v27)
          {
            switch(v53[12])
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v40 = *(void **)v53;
                  if (*(void *)v53)
                  {
                    if (*(char *)(*(void *)v53 + 31) < 0) {
                      operator delete(*(void **)(*(void *)v53 + 8));
                    }
                    v41 = v40;
                    uint64_t v42 = 0x1012C404EF22A49;
                    goto LABEL_113;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v49 = *(void **)v53;
                  if (*(void *)v53)
                  {
                    v50 = *(void **)(*(void *)v53 + 8);
                    if (v50)
                    {
                      *(void *)(*(void *)v53 + 16) = v50;
                      operator delete(v50);
                    }
                    v41 = v49;
                    uint64_t v42 = 0x1080C409938AC02;
                    goto LABEL_113;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v43 = *(void **)v53;
                  if (*(void *)v53)
                  {
                    v52 = (void **)(*(void *)v53 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v52);
                    goto LABEL_108;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v43 = *(void **)v53;
                  if (*(void *)v53)
                  {
                    v52 = (void **)(*(void *)v53 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v52);
LABEL_108:
                    v41 = v43;
                    uint64_t v42 = 0x1020C405E66F15BLL;
                    goto LABEL_113;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v51 = *(void **)v53;
                  if (*(void *)v53)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v53 + 16));
                    v41 = v51;
                    unsigned int v48 = -235920773;
                    goto LABEL_112;
                  }
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v44 = *(void **)v53;
                  if (*(void *)v53)
                  {
                    v45 = *(void **)(*(void *)v53 + 48);
                    if (v45)
                    {
                      *(void *)(*(void *)v53 + 56) = v45;
                      operator delete(v45);
                    }
                    v46 = (void *)v44[3];
                    if (v46)
                    {
                      v44[4] = v46;
                      operator delete(v46);
                    }
                    v47 = (std::__shared_weak_count *)v44[2];
                    if (v47) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                    }
                    v41 = v44;
                    unsigned int v48 = 2071181815;
LABEL_112:
                    uint64_t v42 = v48 | 0x1030C4000000000;
LABEL_113:
                    result = MEMORY[0x22A614FA0](v41, v42);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
            switch(*(unsigned char *)(v27 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v28 = *(atomic_ullong *volatile *)v27;
                  if (!*(void *)v27) {
                    goto LABEL_78;
                  }
                  if (*((char *)v28 + 31) < 0) {
                    operator delete((void *)v28[1]);
                  }
                  atomic_ullong *volatile v29 = v28;
                  uint64_t v30 = 0x1012C404EF22A49;
                  goto LABEL_77;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v37 = *(atomic_ullong *volatile *)v27;
                  if (!*(void *)v27) {
                    goto LABEL_78;
                  }
                  v38 = (void *)v37[1];
                  if (v38)
                  {
                    v37[2] = (atomic_ullong)v38;
                    operator delete(v38);
                  }
                  atomic_ullong *volatile v29 = v37;
                  uint64_t v30 = 0x1080C409938AC02;
                  goto LABEL_77;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)v27;
                  if (!*(void *)v27) {
                    goto LABEL_78;
                  }
                  v52 = (void **)(v31 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v52);
                  goto LABEL_72;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)v27;
                  if (!*(void *)v27) {
                    goto LABEL_78;
                  }
                  v52 = (void **)(v31 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v52);
LABEL_72:
                  atomic_ullong *volatile v29 = v31;
                  uint64_t v30 = 0x1020C405E66F15BLL;
                  goto LABEL_77;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v27;
                  if (!*(void *)v27) {
                    goto LABEL_78;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v39 + 2);
                  atomic_ullong *volatile v29 = v39;
                  unsigned int v36 = -235920773;
                  goto LABEL_76;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v32 = *(atomic_ullong *volatile *)v27;
                  if (*(void *)v27)
                  {
                    v33 = (void *)v32[6];
                    if (v33)
                    {
                      v32[7] = (atomic_ullong)v33;
                      operator delete(v33);
                    }
                    v34 = (void *)v32[3];
                    if (v34)
                    {
                      v32[4] = (atomic_ullong)v34;
                      operator delete(v34);
                    }
                    v35 = (std::__shared_weak_count *)v32[2];
                    if (v35) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
                    }
                    atomic_ullong *volatile v29 = v32;
                    unsigned int v36 = 2071181815;
LABEL_76:
                    uint64_t v30 = v36 | 0x1030C4000000000;
LABEL_77:
                    result = MEMORY[0x22A614FA0](v29, v30);
                  }
LABEL_78:
                  *(void *)uint64_t v27 = 0;
                }
                break;
              default:
                break;
            }
            *(void *)(v27 + 5) = *(void *)&v53[5];
            *(void *)uint64_t v27 = *(void *)v53;
            *(unsigned char *)(v27 + 12) = v53[12];
          }
        }
        char v5 = v10 + 2;
        v7 += 16;
        v8 = v10;
      }
      while (v10 + 2 != a2);
    }
  }
  return result;
}

void sub_2240AC020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v7 = result - 16;
      do
      {
        uint64_t v8 = *(void *)(a3 + 24);
        if (!v8) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v9 = v5;
        result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v8 + 48))(v8, v5, v4);
        if (result)
        {
          *(void *)&v51[5] = *(void *)((char *)v9 + 5);
          *(void *)v51 = *v9;
          v51[12] = *((unsigned char *)v4 + 28);
          *((unsigned char *)v4 + 28) = 0;
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = (atomic_ullong *volatile *)(v10 + 32);
            switch(*(unsigned char *)(v10 + 44))
            {
              case 2:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v12 = *v11;
                  if (!*v11) {
                    goto LABEL_39;
                  }
                  if (*((char *)v12 + 31) < 0) {
                    operator delete((void *)v12[1]);
                  }
                  atomic_ullong *volatile v13 = v12;
                  uint64_t v14 = 0x1012C404EF22A49;
                  goto LABEL_38;
                }
                break;
              case 3:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v21 = *v11;
                  if (!*v11) {
                    goto LABEL_39;
                  }
                  unsigned int v22 = (void *)v21[1];
                  if (v22)
                  {
                    v21[2] = (atomic_ullong)v22;
                    operator delete(v22);
                  }
                  atomic_ullong *volatile v13 = v21;
                  uint64_t v14 = 0x1080C409938AC02;
                  goto LABEL_38;
                }
                break;
              case 4:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v15 = *v11;
                  if (!*v11) {
                    goto LABEL_39;
                  }
                  v50 = (void **)(v15 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
                  goto LABEL_33;
                }
                break;
              case 5:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v15 = *v11;
                  if (!*v11) {
                    goto LABEL_39;
                  }
                  v50 = (void **)(v15 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_33:
                  atomic_ullong *volatile v13 = v15;
                  uint64_t v14 = 0x1020C405E66F15BLL;
                  goto LABEL_38;
                }
                break;
              case 8:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v23 = *v11;
                  if (!*v11) {
                    goto LABEL_39;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v23 + 2);
                  atomic_ullong *volatile v13 = v23;
                  unsigned int v20 = -235920773;
                  goto LABEL_37;
                }
                break;
              case 9:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v16 = *v11;
                  if (*v11)
                  {
                    atomic_ullong *volatile v17 = (void *)v16[6];
                    if (v17)
                    {
                      v16[7] = (atomic_ullong)v17;
                      operator delete(v17);
                    }
                    atomic_ullong *volatile v18 = (void *)v16[3];
                    if (v18)
                    {
                      v16[4] = (atomic_ullong)v18;
                      operator delete(v18);
                    }
                    uint64_t v19 = (std::__shared_weak_count *)v16[2];
                    if (v19) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                    }
                    atomic_ullong *volatile v13 = v16;
                    unsigned int v20 = 2071181815;
LABEL_37:
                    uint64_t v14 = v20 | 0x1030C4000000000;
LABEL_38:
                    MEMORY[0x22A614FA0](v13, v14);
                  }
LABEL_39:
                  atomic_ullong *volatile *v11 = 0;
                }
                break;
              default:
                break;
            }
            *(void *)(v10 + 37) = *(void *)(v10 + 21);
            atomic_ullong *volatile *v11 = *(atomic_ullong *volatile *)(v10 + 16);
            *(unsigned char *)(v10 + 44) = *(unsigned char *)(v10 + 28);
            *(unsigned char *)(v10 + 28) = 0;
            uint64_t v24 = *(void *)(a3 + 24);
            if (!v24) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            result = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v24 + 48))(v24, v51, v10);
            v10 -= 16;
          }
          while ((result & 1) != 0);
          atomic_ullong *volatile v25 = (atomic_ullong *volatile *)(v10 + 32);
          if ((unsigned char *)(v10 + 32) == v51)
          {
            switch(v51[12])
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v38 = *(void **)v51;
                  if (*(void *)v51)
                  {
                    if (*(char *)(*(void *)v51 + 31) < 0) {
                      operator delete(*(void **)(*(void *)v51 + 8));
                    }
                    atomic_ullong *volatile v39 = v38;
                    uint64_t v40 = 0x1012C404EF22A49;
                    goto LABEL_110;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v47 = *(void **)v51;
                  if (*(void *)v51)
                  {
                    unsigned int v48 = *(void **)(*(void *)v51 + 8);
                    if (v48)
                    {
                      *(void *)(*(void *)v51 + 16) = v48;
                      operator delete(v48);
                    }
                    atomic_ullong *volatile v39 = v47;
                    uint64_t v40 = 0x1080C409938AC02;
                    goto LABEL_110;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v41 = *(void **)v51;
                  if (*(void *)v51)
                  {
                    v50 = (void **)(*(void *)v51 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
                    goto LABEL_105;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v41 = *(void **)v51;
                  if (*(void *)v51)
                  {
                    v50 = (void **)(*(void *)v51 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_105:
                    atomic_ullong *volatile v39 = v41;
                    uint64_t v40 = 0x1020C405E66F15BLL;
                    goto LABEL_110;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v49 = *(void **)v51;
                  if (*(void *)v51)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v51 + 16));
                    atomic_ullong *volatile v39 = v49;
                    unsigned int v46 = -235920773;
                    goto LABEL_109;
                  }
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v42 = *(void **)v51;
                  if (*(void *)v51)
                  {
                    v43 = *(void **)(*(void *)v51 + 48);
                    if (v43)
                    {
                      *(void *)(*(void *)v51 + 56) = v43;
                      operator delete(v43);
                    }
                    v44 = (void *)v42[3];
                    if (v44)
                    {
                      v42[4] = v44;
                      operator delete(v44);
                    }
                    v45 = (std::__shared_weak_count *)v42[2];
                    if (v45) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
                    }
                    atomic_ullong *volatile v39 = v42;
                    unsigned int v46 = 2071181815;
LABEL_109:
                    uint64_t v40 = v46 | 0x1030C4000000000;
LABEL_110:
                    result = MEMORY[0x22A614FA0](v39, v40);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
            switch(*(unsigned char *)(v10 + 44))
            {
              case 2:
                if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v26 = *v25;
                  if (!*v25) {
                    goto LABEL_75;
                  }
                  if (*((char *)v26 + 31) < 0) {
                    operator delete((void *)v26[1]);
                  }
                  atomic_ullong *volatile v27 = v26;
                  uint64_t v28 = 0x1012C404EF22A49;
                  goto LABEL_74;
                }
                break;
              case 3:
                if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v35 = *v25;
                  if (!*v25) {
                    goto LABEL_75;
                  }
                  unsigned int v36 = (void *)v35[1];
                  if (v36)
                  {
                    v35[2] = (atomic_ullong)v36;
                    operator delete(v36);
                  }
                  atomic_ullong *volatile v27 = v35;
                  uint64_t v28 = 0x1080C409938AC02;
                  goto LABEL_74;
                }
                break;
              case 4:
                if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v29 = *v25;
                  if (!*v25) {
                    goto LABEL_75;
                  }
                  v50 = (void **)(v29 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
                  goto LABEL_69;
                }
                break;
              case 5:
                if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v29 = *v25;
                  if (!*v25) {
                    goto LABEL_75;
                  }
                  v50 = (void **)(v29 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_69:
                  atomic_ullong *volatile v27 = v29;
                  uint64_t v28 = 0x1020C405E66F15BLL;
                  goto LABEL_74;
                }
                break;
              case 8:
                if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v37 = *v25;
                  if (!*v25) {
                    goto LABEL_75;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v37 + 2);
                  atomic_ullong *volatile v27 = v37;
                  unsigned int v34 = -235920773;
                  goto LABEL_73;
                }
                break;
              case 9:
                if (atomic_fetch_add(*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v30 = *v25;
                  if (*v25)
                  {
                    atomic_ullong *volatile v31 = (void *)v30[6];
                    if (v31)
                    {
                      v30[7] = (atomic_ullong)v31;
                      operator delete(v31);
                    }
                    atomic_ullong *volatile v32 = (void *)v30[3];
                    if (v32)
                    {
                      v30[4] = (atomic_ullong)v32;
                      operator delete(v32);
                    }
                    v33 = (std::__shared_weak_count *)v30[2];
                    if (v33) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                    }
                    atomic_ullong *volatile v27 = v30;
                    unsigned int v34 = 2071181815;
LABEL_73:
                    uint64_t v28 = v34 | 0x1030C4000000000;
LABEL_74:
                    result = MEMORY[0x22A614FA0](v27, v28);
                  }
LABEL_75:
                  *atomic_ullong *volatile v25 = 0;
                }
                break;
              default:
                break;
            }
            *(void *)(v10 + 37) = *(void *)&v51[5];
            *atomic_ullong *volatile v25 = *(atomic_ullong *volatile *)v51;
            *(unsigned char *)(v10 + 44) = v51[12];
          }
        }
        char v5 = v9 + 2;
        v7 += 16;
        uint64_t v4 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

void sub_2240AC8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(long long *a1, long long *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 24);
  if (!v5) {
    goto LABEL_17;
  }
  char v9 = (*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)v5 + 48))(v5, a2, a1);
  uint64_t v10 = *(void *)(a4 + 24);
  if ((v9 & 1) == 0)
  {
    if (v10)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, long long *))(*(void *)v10 + 48))(v10, a3, a2);
      if (!result) {
        return result;
      }
      long long v20 = *a2;
      uint64_t v13 = *(void *)((char *)a3 + 5);
      *(void *)a2 = *a3;
      *(void *)((char *)a2 + 5) = v13;
      *(void *)((char *)a3 + 5) = *(void *)((char *)&v20 + 5);
      *a3 = v20;
      uint64_t v14 = *(void *)(a4 + 24);
      if (v14)
      {
        if (!(*(unsigned int (**)(uint64_t, long long *, long long *))(*(void *)v14 + 48))(v14, a2, a1)) {
          return 1;
        }
        long long v21 = *a1;
        uint64_t v15 = *(void *)((char *)a2 + 5);
        *(void *)a1 = *(void *)a2;
        *(void *)((char *)a1 + 5) = v15;
        *(void *)((char *)a2 + 5) = *(void *)((char *)&v21 + 5);
        *(void *)a2 = v21;
        return 2;
      }
    }
LABEL_17:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (!v10) {
    goto LABEL_17;
  }
  if (!(*(unsigned int (**)(uint64_t, void *, long long *))(*(void *)v10 + 48))(v10, a3, a2))
  {
    long long v22 = *a1;
    uint64_t v16 = *(void *)((char *)a2 + 5);
    *(void *)a1 = *(void *)a2;
    *(void *)((char *)a1 + 5) = v16;
    *(void *)((char *)a2 + 5) = *(void *)((char *)&v22 + 5);
    *(void *)a2 = v22;
    uint64_t v17 = *(void *)(a4 + 24);
    if (v17)
    {
      if (!(*(unsigned int (**)(uint64_t, void *, long long *))(*(void *)v17 + 48))(v17, a3, a2)) {
        return 1;
      }
      long long v23 = *a2;
      uint64_t v18 = *(void *)((char *)a3 + 5);
      *(void *)a2 = *a3;
      *(void *)((char *)a2 + 5) = v18;
      *(void *)((char *)a3 + 5) = *(void *)((char *)&v23 + 5);
      *a3 = v23;
      return 2;
    }
    goto LABEL_17;
  }
  long long v19 = *a1;
  uint64_t v11 = *(void *)((char *)a3 + 5);
  *(void *)a1 = *a3;
  *(void *)((char *)a1 + 5) = v11;
  *(void *)((char *)a3 + 5) = *(void *)((char *)&v19 + 5);
  *a3 = v19;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::flexible_type *,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &>(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  *(void *)&v57[5] = *(void *)(a1 + 5);
  *(void *)v57 = *(void *)a1;
  v57[12] = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 12) = 0;
  uint64_t v4 = *(void *)(a3 + 24);
  if (!v4) {
    goto LABEL_92;
  }
  char v6 = a2;
  if ((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v4 + 48))(v4, v57, a2 - 2))
  {
    unint64_t v7 = a1;
    while (1)
    {
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        break;
      }
      v7 += 16;
      if ((*(uint64_t (**)(uint64_t, unsigned char *, unint64_t))(*(void *)v8 + 48))(v8, v57, v7)) {
        goto LABEL_11;
      }
    }
LABEL_92:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v9 = a1 + 16;
  do
  {
    unint64_t v7 = v9;
    if (v9 >= (unint64_t)v6) {
      break;
    }
    uint64_t v10 = *(void *)(a3 + 24);
    if (!v10) {
      goto LABEL_92;
    }
    int v11 = (*(uint64_t (**)(uint64_t, unsigned char *, unint64_t))(*(void *)v10 + 48))(v10, v57, v9);
    unint64_t v9 = v7 + 16;
  }
  while (!v11);
LABEL_11:
  if (v7 < (unint64_t)v6)
  {
    do
    {
      uint64_t v12 = *(void *)(a3 + 24);
      if (!v12) {
        goto LABEL_92;
      }
      v6 -= 2;
    }
    while (((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v12 + 48))(v12, v57, v6) & 1) != 0);
  }
LABEL_20:
  if (v7 < (unint64_t)v6)
  {
    long long v58 = *(_OWORD *)v7;
    uint64_t v13 = *v6;
    *(void *)(v7 + 5) = *(uint64_t *)((char *)v6 + 5);
    *(void *)unint64_t v7 = v13;
    uint64_t v14 = v58;
    *(uint64_t *)((char *)v6 + 5) = *(void *)((char *)&v58 + 5);
    *char v6 = v14;
    do
    {
      uint64_t v15 = *(void *)(a3 + 24);
      if (!v15) {
        goto LABEL_92;
      }
      v7 += 16;
    }
    while (!(*(unsigned int (**)(uint64_t, unsigned char *, unint64_t))(*(void *)v15 + 48))(v15, v57, v7));
    while (1)
    {
      uint64_t v16 = *(void *)(a3 + 24);
      if (!v16) {
        goto LABEL_92;
      }
      v6 -= 2;
      if (((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v16 + 48))(v16, v57, v6) & 1) == 0) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v17 = (atomic_ullong *volatile *)(v7 - 16);
  if (v7 - 16 != a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v18 = *(void *)a1;
          if (!*(void *)a1) {
            goto LABEL_54;
          }
          if (*(char *)(v18 + 31) < 0) {
            operator delete(*(void **)(v18 + 8));
          }
          atomic_ullong *volatile v19 = (atomic_ullong *volatile)v18;
          uint64_t v20 = 0x1012C404EF22A49;
          goto LABEL_53;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v27 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_54;
          }
          uint64_t v28 = (void *)v27[1];
          if (v28)
          {
            v27[2] = (atomic_ullong)v28;
            operator delete(v28);
          }
          atomic_ullong *volatile v19 = v27;
          uint64_t v20 = 0x1080C409938AC02;
          goto LABEL_53;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_54;
          }
          *(void *)&long long v58 = v21 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
          goto LABEL_48;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_54;
          }
          *(void *)&long long v58 = v21 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
LABEL_48:
          atomic_ullong *volatile v19 = v21;
          uint64_t v20 = 0x1020C405E66F15BLL;
          goto LABEL_53;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v29 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_54;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v29 + 2);
          atomic_ullong *volatile v19 = v29;
          unsigned int v26 = -235920773;
          goto LABEL_52;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            long long v23 = (void *)v22[6];
            if (v23)
            {
              v22[7] = (atomic_ullong)v23;
              operator delete(v23);
            }
            uint64_t v24 = (void *)v22[3];
            if (v24)
            {
              v22[4] = (atomic_ullong)v24;
              operator delete(v24);
            }
            atomic_ullong *volatile v25 = (std::__shared_weak_count *)v22[2];
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
            atomic_ullong *volatile v19 = v22;
            unsigned int v26 = 2071181815;
LABEL_52:
            uint64_t v20 = v26 | 0x1030C4000000000;
LABEL_53:
            MEMORY[0x22A614FA0](v19, v20);
          }
LABEL_54:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    atomic_ullong *volatile v30 = *v17;
    *(void *)(a1 + 5) = *(void *)(v7 - 11);
    *(void *)a1 = v30;
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(v7 - 4);
    *(unsigned char *)(v7 - 4) = 0;
  }
  if (v57 == (unsigned char *)v17)
  {
    switch(v57[12])
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v57, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v45 = *(void **)v57;
          if (*(void *)v57)
          {
            if (*(char *)(*(void *)v57 + 31) < 0) {
              operator delete(*(void **)(*(void *)v57 + 8));
            }
            unsigned int v46 = v45;
            uint64_t v47 = 0x1012C404EF22A49;
            goto LABEL_124;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v57, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v54 = *(void **)v57;
          if (*(void *)v57)
          {
            v55 = *(void **)(*(void *)v57 + 8);
            if (v55)
            {
              *(void *)(*(void *)v57 + 16) = v55;
              operator delete(v55);
            }
            unsigned int v46 = v54;
            uint64_t v47 = 0x1080C409938AC02;
            goto LABEL_124;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v57, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unsigned int v48 = *(void **)v57;
          if (*(void *)v57)
          {
            *(void *)&long long v58 = *(void *)v57 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
            goto LABEL_119;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v57, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unsigned int v48 = *(void **)v57;
          if (*(void *)v57)
          {
            *(void *)&long long v58 = *(void *)v57 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
LABEL_119:
            unsigned int v46 = v48;
            uint64_t v47 = 0x1020C405E66F15BLL;
            goto LABEL_124;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v57, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v56 = *(void **)v57;
          if (*(void *)v57)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v57 + 16));
            unsigned int v46 = v56;
            unsigned int v53 = -235920773;
            goto LABEL_123;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v57, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v49 = *(void **)v57;
          if (*(void *)v57)
          {
            v50 = *(void **)(*(void *)v57 + 48);
            if (v50)
            {
              *(void *)(*(void *)v57 + 56) = v50;
              operator delete(v50);
            }
            v51 = (void *)v49[3];
            if (v51)
            {
              v49[4] = v51;
              operator delete(v51);
            }
            uint64_t v52 = (std::__shared_weak_count *)v49[2];
            if (v52) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v52);
            }
            unsigned int v46 = v49;
            unsigned int v53 = 2071181815;
LABEL_123:
            uint64_t v47 = v53 | 0x1030C4000000000;
LABEL_124:
            MEMORY[0x22A614FA0](v46, v47);
          }
        }
        break;
      default:
        return v7;
    }
  }
  else
  {
    switch(*(unsigned char *)(v7 - 4))
    {
      case 2:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v31 = *v17;
          if (!*v17) {
            goto LABEL_89;
          }
          if (*((char *)v31 + 31) < 0) {
            operator delete((void *)v31[1]);
          }
          atomic_ullong *volatile v32 = v31;
          uint64_t v33 = 0x1012C404EF22A49;
          goto LABEL_88;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v40 = *v17;
          if (!*v17) {
            goto LABEL_89;
          }
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = (atomic_ullong)v41;
            operator delete(v41);
          }
          atomic_ullong *volatile v32 = v40;
          uint64_t v33 = 0x1080C409938AC02;
          goto LABEL_88;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v34 = *v17;
          if (!*v17) {
            goto LABEL_89;
          }
          *(void *)&long long v58 = v34 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
          goto LABEL_83;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v34 = *v17;
          if (!*v17) {
            goto LABEL_89;
          }
          *(void *)&long long v58 = v34 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
LABEL_83:
          atomic_ullong *volatile v32 = v34;
          uint64_t v33 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v42 = *v17;
          if (!*v17) {
            goto LABEL_89;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v42 + 2);
          atomic_ullong *volatile v32 = v42;
          unsigned int v39 = -235920773;
          goto LABEL_87;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v35 = *v17;
          if (*v17)
          {
            unsigned int v36 = (void *)v35[6];
            if (v36)
            {
              v35[7] = (atomic_ullong)v36;
              operator delete(v36);
            }
            atomic_ullong *volatile v37 = (void *)v35[3];
            if (v37)
            {
              v35[4] = (atomic_ullong)v37;
              operator delete(v37);
            }
            v38 = (std::__shared_weak_count *)v35[2];
            if (v38) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            }
            atomic_ullong *volatile v32 = v35;
            unsigned int v39 = 2071181815;
LABEL_87:
            uint64_t v33 = v39 | 0x1030C4000000000;
LABEL_88:
            MEMORY[0x22A614FA0](v32, v33);
          }
LABEL_89:
          *uint64_t v17 = 0;
        }
        break;
      default:
        break;
    }
    v43 = *(atomic_ullong **)v57;
    *(void *)(v7 - 11) = *(void *)&v57[5];
    *uint64_t v17 = v43;
    *(unsigned char *)(v7 - 4) = v57[12];
  }
  return v7;
}

void sub_2240AD558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  switch(a11)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
        goto LABEL_27;
      }
      if (*(char *)(a9 + 31) < 0) {
        operator delete(*(void **)(a9 + 8));
      }
      uint64_t v13 = (void *)a9;
      uint64_t v14 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
        goto LABEL_27;
      }
      uint64_t v17 = *(void **)(a9 + 8);
      if (v17)
      {
        *(void *)(a9 + 16) = v17;
        operator delete(v17);
      }
      uint64_t v13 = (void *)a9;
      uint64_t v14 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v15 = a9;
      if (!a9) {
        goto LABEL_27;
      }
      a12 = a9 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v15 = a9;
      if (!a9) {
        goto LABEL_27;
      }
      a12 = a9 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_21:
      uint64_t v13 = (void *)v15;
      uint64_t v14 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a9 + 16));
      uint64_t v13 = (void *)a9;
      unsigned int v16 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
        goto LABEL_27;
      }
      uint64_t v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a9);
      unsigned int v16 = 2071181815;
LABEL_25:
      uint64_t v14 = v16 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v13, v14);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

atomic_ullong *volatile *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::flexible_type *,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &>(atomic_ullong *volatile *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  *(atomic_ullong **)&v58[5] = *(atomic_ullong *volatile *)((char *)a1 + 5);
  *(atomic_ullong **)long long v58 = *a1;
  v58[12] = *((unsigned char *)a1 + 12);
  *((unsigned char *)a1 + 12) = 0;
  do
  {
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      goto LABEL_123;
    }
    char v8 = (*(uint64_t (**)(uint64_t, atomic_ullong *volatile *, unsigned char *))(*(void *)v7 + 48))(v7, &a1[v6 + 2], v58);
    v6 += 2;
  }
  while ((v8 & 1) != 0);
  unint64_t v9 = (unint64_t)&a1[v6];
  if (v6 != 2)
  {
    while (1)
    {
      uint64_t v10 = *(void *)(a3 + 24);
      if (!v10) {
        break;
      }
      a2 -= 2;
      if ((*(unsigned int (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v10 + 48))(v10, a2, v58)) {
        goto LABEL_11;
      }
    }
LABEL_123:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  do
  {
    if (v9 >= (unint64_t)a2) {
      break;
    }
    uint64_t v11 = *(void *)(a3 + 24);
    if (!v11) {
      goto LABEL_123;
    }
    a2 -= 2;
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v11 + 48))(v11, a2, v58) & 1) == 0);
LABEL_11:
  unint64_t v12 = (unint64_t)&a1[v6];
  if (v9 < (unint64_t)a2)
  {
    uint64_t v13 = a2;
    do
    {
      long long v59 = *(_OWORD *)v12;
      uint64_t v14 = *v13;
      *(void *)(v12 + 5) = *(uint64_t *)((char *)v13 + 5);
      *(void *)unint64_t v12 = v14;
      uint64_t v15 = v59;
      *(uint64_t *)((char *)v13 + 5) = *(void *)((char *)&v59 + 5);
      *uint64_t v13 = v15;
      do
      {
        uint64_t v16 = *(void *)(a3 + 24);
        if (!v16) {
LABEL_90:
        }
          std::__throw_bad_function_call[abi:ne180100]();
        v12 += 16;
      }
      while (((*(uint64_t (**)(uint64_t, unint64_t, unsigned char *))(*(void *)v16 + 48))(v16, v12, v58) & 1) != 0);
      do
      {
        uint64_t v17 = *(void *)(a3 + 24);
        if (!v17) {
          goto LABEL_90;
        }
        v13 -= 2;
      }
      while (!(*(unsigned int (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v17 + 48))(v17, v13, v58));
    }
    while (v12 < (unint64_t)v13);
  }
  uint64_t v18 = (atomic_ullong *volatile *)(v12 - 16);
  if ((atomic_ullong *volatile *)(v12 - 16) != a1)
  {
    switch(*((unsigned char *)a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v19 = *a1;
          if (!*a1) {
            goto LABEL_52;
          }
          if (*((char *)v19 + 31) < 0) {
            operator delete((void *)v19[1]);
          }
          atomic_ullong *volatile v20 = v19;
          uint64_t v21 = 0x1012C404EF22A49;
          goto LABEL_51;
        }
        break;
      case 3:
        if (atomic_fetch_add(*a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v28 = *a1;
          if (!*a1) {
            goto LABEL_52;
          }
          atomic_ullong *volatile v29 = (void *)v28[1];
          if (v29)
          {
            v28[2] = (atomic_ullong)v29;
            operator delete(v29);
          }
          atomic_ullong *volatile v20 = v28;
          uint64_t v21 = 0x1080C409938AC02;
          goto LABEL_51;
        }
        break;
      case 4:
        if (atomic_fetch_add(*a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v22 = *a1;
          if (!*a1) {
            goto LABEL_52;
          }
          *(void *)&long long v59 = v22 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          goto LABEL_46;
        }
        break;
      case 5:
        if (atomic_fetch_add(*a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v22 = *a1;
          if (!*a1) {
            goto LABEL_52;
          }
          *(void *)&long long v59 = v22 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
LABEL_46:
          atomic_ullong *volatile v20 = v22;
          uint64_t v21 = 0x1020C405E66F15BLL;
          goto LABEL_51;
        }
        break;
      case 8:
        if (atomic_fetch_add(*a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v30 = *a1;
          if (!*a1) {
            goto LABEL_52;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v30 + 2);
          atomic_ullong *volatile v20 = v30;
          unsigned int v27 = -235920773;
          goto LABEL_50;
        }
        break;
      case 9:
        if (atomic_fetch_add(*a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v23 = *a1;
          if (*a1)
          {
            uint64_t v24 = (void *)v23[6];
            if (v24)
            {
              v23[7] = (atomic_ullong)v24;
              operator delete(v24);
            }
            atomic_ullong *volatile v25 = (void *)v23[3];
            if (v25)
            {
              v23[4] = (atomic_ullong)v25;
              operator delete(v25);
            }
            unsigned int v26 = (std::__shared_weak_count *)v23[2];
            if (v26) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
            atomic_ullong *volatile v20 = v23;
            unsigned int v27 = 2071181815;
LABEL_50:
            uint64_t v21 = v27 | 0x1030C4000000000;
LABEL_51:
            MEMORY[0x22A614FA0](v20, v21);
          }
LABEL_52:
          *a1 = 0;
        }
        break;
      default:
        break;
    }
    atomic_ullong *volatile v31 = *v18;
    *(atomic_ullong *volatile *)((char *)a1 + 5) = *(atomic_ullong *volatile *)(v12 - 11);
    *a1 = v31;
    *((unsigned char *)a1 + 12) = *(unsigned char *)(v12 - 4);
    *(unsigned char *)(v12 - 4) = 0;
  }
  if (v58 == (unsigned char *)v18)
  {
    switch(v58[12])
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unsigned int v46 = *(void **)v58;
          if (*(void *)v58)
          {
            if (*(char *)(*(void *)v58 + 31) < 0) {
              operator delete(*(void **)(*(void *)v58 + 8));
            }
            uint64_t v47 = v46;
            uint64_t v48 = 0x1012C404EF22A49;
            goto LABEL_122;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v55 = *(void **)v58;
          if (*(void *)v58)
          {
            v56 = *(void **)(*(void *)v58 + 8);
            if (v56)
            {
              *(void *)(*(void *)v58 + 16) = v56;
              operator delete(v56);
            }
            uint64_t v47 = v55;
            uint64_t v48 = 0x1080C409938AC02;
            goto LABEL_122;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v49 = *(void **)v58;
          if (*(void *)v58)
          {
            *(void *)&long long v59 = *(void *)v58 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
            goto LABEL_117;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v49 = *(void **)v58;
          if (*(void *)v58)
          {
            *(void *)&long long v59 = *(void *)v58 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
LABEL_117:
            uint64_t v47 = v49;
            uint64_t v48 = 0x1020C405E66F15BLL;
            goto LABEL_122;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v57 = *(void **)v58;
          if (*(void *)v58)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v58 + 16));
            uint64_t v47 = v57;
            unsigned int v54 = -235920773;
            goto LABEL_121;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v50 = *(void **)v58;
          if (*(void *)v58)
          {
            v51 = *(void **)(*(void *)v58 + 48);
            if (v51)
            {
              *(void *)(*(void *)v58 + 56) = v51;
              operator delete(v51);
            }
            uint64_t v52 = (void *)v50[3];
            if (v52)
            {
              v50[4] = v52;
              operator delete(v52);
            }
            unsigned int v53 = (std::__shared_weak_count *)v50[2];
            if (v53) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v53);
            }
            uint64_t v47 = v50;
            unsigned int v54 = 2071181815;
LABEL_121:
            uint64_t v48 = v54 | 0x1030C4000000000;
LABEL_122:
            MEMORY[0x22A614FA0](v47, v48);
          }
        }
        break;
      default:
        return v18;
    }
  }
  else
  {
    switch(*(unsigned char *)(v12 - 4))
    {
      case 2:
        if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v32 = *v18;
          if (!*v18) {
            goto LABEL_87;
          }
          if (*((char *)v32 + 31) < 0) {
            operator delete((void *)v32[1]);
          }
          atomic_ullong *volatile v33 = v32;
          uint64_t v34 = 0x1012C404EF22A49;
          goto LABEL_86;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v41 = *v18;
          if (!*v18) {
            goto LABEL_87;
          }
          atomic_ullong *volatile v42 = (void *)v41[1];
          if (v42)
          {
            v41[2] = (atomic_ullong)v42;
            operator delete(v42);
          }
          atomic_ullong *volatile v33 = v41;
          uint64_t v34 = 0x1080C409938AC02;
          goto LABEL_86;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v35 = *v18;
          if (!*v18) {
            goto LABEL_87;
          }
          *(void *)&long long v59 = v35 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          goto LABEL_81;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v35 = *v18;
          if (!*v18) {
            goto LABEL_87;
          }
          *(void *)&long long v59 = v35 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
LABEL_81:
          atomic_ullong *volatile v33 = v35;
          uint64_t v34 = 0x1020C405E66F15BLL;
          goto LABEL_86;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v43 = *v18;
          if (!*v18) {
            goto LABEL_87;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v43 + 2);
          atomic_ullong *volatile v33 = v43;
          unsigned int v40 = -235920773;
          goto LABEL_85;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v36 = *v18;
          if (*v18)
          {
            atomic_ullong *volatile v37 = (void *)v36[6];
            if (v37)
            {
              v36[7] = (atomic_ullong)v37;
              operator delete(v37);
            }
            v38 = (void *)v36[3];
            if (v38)
            {
              v36[4] = (atomic_ullong)v38;
              operator delete(v38);
            }
            unsigned int v39 = (std::__shared_weak_count *)v36[2];
            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
            atomic_ullong *volatile v33 = v36;
            unsigned int v40 = 2071181815;
LABEL_85:
            uint64_t v34 = v40 | 0x1030C4000000000;
LABEL_86:
            MEMORY[0x22A614FA0](v33, v34);
          }
LABEL_87:
          *uint64_t v18 = 0;
        }
        break;
      default:
        break;
    }
    v44 = *(atomic_ullong **)v58;
    *(void *)(v12 - 11) = *(void *)&v58[5];
    *uint64_t v18 = v44;
    *(unsigned char *)(v12 - 4) = v58[12];
  }
  return v18;
}

void sub_2240ADF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12)
{
  switch(a11)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
        goto LABEL_27;
      }
      if (*(char *)(a9 + 31) < 0) {
        operator delete(*(void **)(a9 + 8));
      }
      uint64_t v13 = (void *)a9;
      uint64_t v14 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
        goto LABEL_27;
      }
      uint64_t v17 = *(void **)(a9 + 8);
      if (v17)
      {
        *(void *)(a9 + 16) = v17;
        operator delete(v17);
      }
      uint64_t v13 = (void *)a9;
      uint64_t v14 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v15 = a9;
      if (!a9) {
        goto LABEL_27;
      }
      a12 = a9 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v15 = a9;
      if (!a9) {
        goto LABEL_27;
      }
      a12 = a9 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_21:
      uint64_t v13 = (void *)v15;
      uint64_t v14 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a9 + 16));
      uint64_t v13 = (void *)a9;
      unsigned int v16 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a9, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a9) {
        goto LABEL_27;
      }
      uint64_t v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a9);
      unsigned int v16 = 2071181815;
LABEL_25:
      uint64_t v14 = v16 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v13, v14);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      unint64_t v9 = (void *)(a2 - 16);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, a2 - 16, a1))
      {
        long long v62 = *(_OWORD *)a1;
        uint64_t v10 = *(void *)((char *)v9 + 5);
        *(void *)a1 = *v9;
        *(void *)(a1 + 5) = v10;
        *(void *)((char *)v9 + 5) = *(void *)((char *)&v62 + 5);
        *unint64_t v9 = v62;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)a1, (long long *)(a1 + 16), (void *)(a2 - 16), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(a1, a1 + 16, (void *)(a1 + 32), (void *)(a2 - 16), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(a1, a1 + 16, (void *)(a1 + 32), (void *)(a1 + 48), (void *)(a2 - 16), a3);
      return 1;
    default:
      uint64_t v11 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)a1, (long long *)(a1 + 16), (void *)(a1 + 32), a3);
      uint64_t v12 = a1 + 48;
      if (a1 + 48 == v4) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      uint64_t v59 = v4;
      break;
  }
  while (1)
  {
    uint64_t v15 = *(void *)(a3 + 24);
    if (!v15) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48))(v15, v12, v11))
    {
      int v60 = v14;
      *(void *)((char *)&v62 + 5) = *(void *)(v12 + 5);
      *(void *)&long long v62 = *(void *)v12;
      BYTE12(v62) = *(unsigned char *)(v12 + 12);
      *(unsigned char *)(v12 + 12) = 0;
      uint64_t v16 = v13;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (atomic_ullong *volatile *)(a1 + v16 + 48);
        atomic_ullong *volatile v19 = (atomic_ullong *volatile *)(a1 + v16 + 32);
        if (v19 != v18)
        {
          switch(*(unsigned char *)(v17 + 60))
          {
            case 2:
              if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v20 = *v18;
                if (!*v18) {
                  goto LABEL_45;
                }
                if (*((char *)v20 + 31) < 0) {
                  operator delete((void *)v20[1]);
                }
                atomic_ullong *volatile v21 = v20;
                uint64_t v22 = 0x1012C404EF22A49;
                goto LABEL_44;
              }
              break;
            case 3:
              if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v29 = *v18;
                if (!*v18) {
                  goto LABEL_45;
                }
                atomic_ullong *volatile v30 = (void *)v29[1];
                if (v30)
                {
                  v29[2] = (atomic_ullong)v30;
                  operator delete(v30);
                }
                atomic_ullong *volatile v21 = v29;
                uint64_t v22 = 0x1080C409938AC02;
                goto LABEL_44;
              }
              break;
            case 4:
              if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v23 = *v18;
                if (!*v18) {
                  goto LABEL_45;
                }
                v61 = (void **)(v23 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
                goto LABEL_39;
              }
              break;
            case 5:
              if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v23 = *v18;
                if (!*v18) {
                  goto LABEL_45;
                }
                v61 = (void **)(v23 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_39:
                atomic_ullong *volatile v21 = v23;
                uint64_t v22 = 0x1020C405E66F15BLL;
                goto LABEL_44;
              }
              break;
            case 8:
              if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v31 = *v18;
                if (!*v18) {
                  goto LABEL_45;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v31 + 2);
                atomic_ullong *volatile v21 = v31;
                unsigned int v28 = -235920773;
                goto LABEL_43;
              }
              break;
            case 9:
              if (atomic_fetch_add(*v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v24 = *v18;
                if (*v18)
                {
                  atomic_ullong *volatile v25 = (void *)v24[6];
                  if (v25)
                  {
                    v24[7] = (atomic_ullong)v25;
                    operator delete(v25);
                  }
                  unsigned int v26 = (void *)v24[3];
                  if (v26)
                  {
                    v24[4] = (atomic_ullong)v26;
                    operator delete(v26);
                  }
                  unsigned int v27 = (std::__shared_weak_count *)v24[2];
                  if (v27) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                  }
                  atomic_ullong *volatile v21 = v24;
                  unsigned int v28 = 2071181815;
LABEL_43:
                  uint64_t v22 = v28 | 0x1030C4000000000;
LABEL_44:
                  MEMORY[0x22A614FA0](v21, v22);
                }
LABEL_45:
                *uint64_t v18 = 0;
              }
              break;
            default:
              break;
          }
          *(void *)(a1 + v16 + 53) = *(void *)(a1 + v16 + 37);
          *uint64_t v18 = *v19;
          *(unsigned char *)(v17 + 60) = *(unsigned char *)(a1 + v16 + 44);
          *(unsigned char *)(a1 + v16 + 44) = 0;
        }
        if (v16 == -32) {
          break;
        }
        uint64_t v32 = *(void *)(a3 + 24);
        if (!v32) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        char v33 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v32 + 48))(v32, &v62, a1 + v16 + 16);
        v16 -= 16;
        if ((v33 & 1) == 0)
        {
          uint64_t v34 = a1 + v16 + 48;
          goto LABEL_52;
        }
      }
      uint64_t v34 = a1;
LABEL_52:
      if (&v62 == (long long *)v34)
      {
        int v14 = v60 + 1;
        switch(BYTE12(v62))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v47 = (void *)v62;
              if ((void)v62)
              {
                if (*(char *)(v62 + 31) < 0) {
                  operator delete(*(void **)(v62 + 8));
                }
                uint64_t v48 = v47;
                uint64_t v49 = 0x1012C404EF22A49;
                goto LABEL_121;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v56 = (void *)v62;
              if ((void)v62)
              {
                v57 = *(void **)(v62 + 8);
                if (v57)
                {
                  *(void *)(v62 + 16) = v57;
                  operator delete(v57);
                }
                uint64_t v48 = v56;
                uint64_t v49 = 0x1080C409938AC02;
                goto LABEL_121;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v50 = (void *)v62;
              if ((void)v62)
              {
                v61 = (void **)(v62 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
                goto LABEL_116;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v50 = (void *)v62;
              if ((void)v62)
              {
                v61 = (void **)(v62 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_116:
                uint64_t v48 = v50;
                uint64_t v49 = 0x1020C405E66F15BLL;
                goto LABEL_121;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              long long v58 = (void *)v62;
              if ((void)v62)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(v62 + 16));
                uint64_t v48 = v58;
                unsigned int v55 = -235920773;
                goto LABEL_120;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v51 = (void *)v62;
              if ((void)v62)
              {
                uint64_t v52 = *(void **)(v62 + 48);
                if (v52)
                {
                  *(void *)(v62 + 56) = v52;
                  operator delete(v52);
                }
                unsigned int v53 = (void *)v51[3];
                if (v53)
                {
                  v51[4] = v53;
                  operator delete(v53);
                }
                unsigned int v54 = (std::__shared_weak_count *)v51[2];
                if (v54) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                }
                uint64_t v48 = v51;
                unsigned int v55 = 2071181815;
LABEL_120:
                uint64_t v49 = v55 | 0x1030C4000000000;
LABEL_121:
                MEMORY[0x22A614FA0](v48, v49);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*(unsigned char *)(v34 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v34;
              if (!*(void *)v34) {
                goto LABEL_85;
              }
              if (*((char *)v35 + 31) < 0) {
                operator delete((void *)v35[1]);
              }
              atomic_ullong *volatile v36 = v35;
              uint64_t v37 = 0x1012C404EF22A49;
              goto LABEL_84;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v44 = *(atomic_ullong *volatile *)v34;
              if (!*(void *)v34) {
                goto LABEL_85;
              }
              v45 = (void *)v44[1];
              if (v45)
              {
                v44[2] = (atomic_ullong)v45;
                operator delete(v45);
              }
              atomic_ullong *volatile v36 = v44;
              uint64_t v37 = 0x1080C409938AC02;
              goto LABEL_84;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v34;
              if (!*(void *)v34) {
                goto LABEL_85;
              }
              v61 = (void **)(v38 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
              goto LABEL_79;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v34;
              if (!*(void *)v34) {
                goto LABEL_85;
              }
              v61 = (void **)(v38 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_79:
              atomic_ullong *volatile v36 = v38;
              uint64_t v37 = 0x1020C405E66F15BLL;
              goto LABEL_84;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v46 = *(atomic_ullong *volatile *)v34;
              if (!*(void *)v34) {
                goto LABEL_85;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v46 + 2);
              atomic_ullong *volatile v36 = v46;
              unsigned int v43 = -235920773;
              goto LABEL_83;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v34;
              if (*(void *)v34)
              {
                unsigned int v40 = (void *)v39[6];
                if (v40)
                {
                  v39[7] = (atomic_ullong)v40;
                  operator delete(v40);
                }
                atomic_ullong *volatile v41 = (void *)v39[3];
                if (v41)
                {
                  v39[4] = (atomic_ullong)v41;
                  operator delete(v41);
                }
                atomic_ullong *volatile v42 = (std::__shared_weak_count *)v39[2];
                if (v42) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
                }
                atomic_ullong *volatile v36 = v39;
                unsigned int v43 = 2071181815;
LABEL_83:
                uint64_t v37 = v43 | 0x1030C4000000000;
LABEL_84:
                MEMORY[0x22A614FA0](v36, v37);
              }
LABEL_85:
              *(void *)uint64_t v34 = 0;
            }
            break;
          default:
            break;
        }
        *(void *)(v34 + 5) = *(void *)((char *)&v62 + 5);
        *(void *)uint64_t v34 = v62;
        *(unsigned char *)(v34 + 12) = BYTE12(v62);
        int v14 = v60 + 1;
      }
      uint64_t v4 = v59;
      if (v14 == 8) {
        return v12 + 16 == v59;
      }
    }
    uint64_t v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 == v4) {
      return 1;
    }
  }
}

void sub_2240AE998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((long long *)a1, (long long *)a2, a3, a5);
  uint64_t v10 = *(void *)(a5 + 24);
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v10 + 48))(v10, a4, a3);
  if (!result) {
    return result;
  }
  long long v17 = *(_OWORD *)a3;
  uint64_t v12 = *(void *)((char *)a4 + 5);
  *a3 = *a4;
  *(void *)((char *)a3 + 5) = v12;
  *(void *)((char *)a4 + 5) = *(void *)((char *)&v17 + 5);
  *a4 = v17;
  uint64_t v13 = *(void *)(a5 + 24);
  if (!v13) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v13 + 48))(v13, a3, a2);
  if (!result) {
    return result;
  }
  long long v18 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)((char *)a3 + 5);
  *(void *)a2 = *a3;
  *(void *)(a2 + 5) = v14;
  *(void *)((char *)a3 + 5) = *(void *)((char *)&v18 + 5);
  *a3 = v18;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
LABEL_9:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48))(v15, a2, a1);
  if (result)
  {
    long long v19 = *(_OWORD *)a1;
    uint64_t v16 = *(void *)(a2 + 5);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 5) = v16;
    *(void *)(a2 + 5) = *(void *)((char *)&v19 + 5);
    *(void *)a2 = v19;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(a1, a2, a3, a4, a6);
  uint64_t v12 = *(void *)(a6 + 24);
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v12 + 48))(v12, a5, a4);
  if (!result) {
    return result;
  }
  long long v21 = *(_OWORD *)a4;
  uint64_t v14 = *(void *)((char *)a5 + 5);
  *a4 = *a5;
  *(void *)((char *)a4 + 5) = v14;
  *(void *)((char *)a5 + 5) = *(void *)((char *)&v21 + 5);
  *a5 = v21;
  uint64_t v15 = *(void *)(a6 + 24);
  if (!v15) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v15 + 48))(v15, a4, a3);
  if (!result) {
    return result;
  }
  long long v22 = *(_OWORD *)a3;
  uint64_t v16 = *(void *)((char *)a4 + 5);
  *a3 = *a4;
  *(void *)((char *)a3 + 5) = v16;
  *(void *)((char *)a4 + 5) = *(void *)((char *)&v22 + 5);
  *a4 = v22;
  uint64_t v17 = *(void *)(a6 + 24);
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v17 + 48))(v17, a3, a2);
  if (!result) {
    return result;
  }
  long long v23 = *(_OWORD *)a2;
  uint64_t v18 = *(void *)((char *)a3 + 5);
  *(void *)a2 = *a3;
  *(void *)(a2 + 5) = v18;
  *(void *)((char *)a3 + 5) = *(void *)((char *)&v23 + 5);
  *a3 = v23;
  uint64_t v19 = *(void *)(a6 + 24);
  if (!v19) {
LABEL_11:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 48))(v19, a2, a1);
  if (result)
  {
    long long v24 = *(_OWORD *)a1;
    uint64_t v20 = *(void *)(a2 + 5);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 5) = v20;
    *(void *)(a2 + 5) = *(void *)((char *)&v24 + 5);
    *(void *)a2 = v24;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,turi::flexible_type*>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        uint64_t v15 = *(void *)(a4 + 24);
        if (!v15) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, v14, a1))
        {
          long long v20 = *(_OWORD *)v14;
          uint64_t v16 = *(uint64_t *)((char *)a1 + 5);
          *(void *)uint64_t v14 = *a1;
          *(void *)(v14 + 5) = v16;
          *(uint64_t *)((char *)a1 + 5) = *(void *)((char *)&v20 + 5);
          *a1 = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      unint64_t v17 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(a1, v6, a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  uint64_t v5 = a4;
  uint64_t v6 = result;
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - result) >> 4) {
    return result;
  }
  uint64_t v10 = ((uint64_t)a4 - result) >> 3;
  uint64_t v11 = v10 + 1;
  uint64_t v12 = result + 16 * (v10 + 1);
  uint64_t v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    uint64_t v14 = *(void *)(a2 + 24);
    if (!v14) {
      goto LABEL_111;
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 48))(v14, v12, v12 + 16))
    {
      v12 += 16;
      uint64_t v11 = v13;
    }
  }
  uint64_t v15 = *(void *)(a2 + 24);
  if (!v15) {
LABEL_111:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 48))(v15, v12, v5);
  if ((result & 1) == 0)
  {
    *(void *)&v51[5] = *(uint64_t *)((char *)v5 + 5);
    *(void *)v51 = *v5;
    v51[12] = *((unsigned char *)v5 + 12);
    *((unsigned char *)v5 + 12) = 0;
    do
    {
      uint64_t v16 = v12;
      if ((uint64_t *)v12 != v5)
      {
        switch(*((unsigned char *)v5 + 12))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v17 = *v5;
              if (!*v5) {
                goto LABEL_43;
              }
              if (*(char *)(v17 + 31) < 0) {
                operator delete(*(void **)(v17 + 8));
              }
              atomic_ullong *volatile v18 = (atomic_ullong *volatile)v17;
              uint64_t v19 = 0x1012C404EF22A49;
              goto LABEL_42;
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v26 = (atomic_ullong *volatile)*v5;
              if (!*v5) {
                goto LABEL_43;
              }
              unsigned int v27 = (void *)v26[1];
              if (v27)
              {
                v26[2] = (atomic_ullong)v27;
                operator delete(v27);
              }
              atomic_ullong *volatile v18 = v26;
              uint64_t v19 = 0x1080C409938AC02;
              goto LABEL_42;
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v20 = (atomic_ullong *volatile)*v5;
              if (!*v5) {
                goto LABEL_43;
              }
              v50 = (void **)(v20 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
              goto LABEL_37;
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v20 = (atomic_ullong *volatile)*v5;
              if (!*v5) {
                goto LABEL_43;
              }
              v50 = (void **)(v20 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_37:
              atomic_ullong *volatile v18 = v20;
              uint64_t v19 = 0x1020C405E66F15BLL;
              goto LABEL_42;
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v28 = (atomic_ullong *volatile)*v5;
              if (!*v5) {
                goto LABEL_43;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v28 + 2);
              atomic_ullong *volatile v18 = v28;
              unsigned int v25 = -235920773;
              goto LABEL_41;
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v21 = (atomic_ullong *volatile)*v5;
              if (*v5)
              {
                long long v22 = (void *)v21[6];
                if (v22)
                {
                  v21[7] = (atomic_ullong)v22;
                  operator delete(v22);
                }
                long long v23 = (void *)v21[3];
                if (v23)
                {
                  v21[4] = (atomic_ullong)v23;
                  operator delete(v23);
                }
                long long v24 = (std::__shared_weak_count *)v21[2];
                if (v24) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
                }
                atomic_ullong *volatile v18 = v21;
                unsigned int v25 = 2071181815;
LABEL_41:
                uint64_t v19 = v25 | 0x1030C4000000000;
LABEL_42:
                uint64_t result = MEMORY[0x22A614FA0](v18, v19);
              }
LABEL_43:
              uint64_t *v5 = 0;
            }
            break;
          default:
            break;
        }
        atomic_ullong *volatile v29 = *(atomic_ullong *volatile *)v16;
        *(uint64_t *)((char *)v5 + 5) = *(void *)(v16 + 5);
        uint64_t *v5 = (uint64_t)v29;
        *((unsigned char *)v5 + 12) = *(unsigned char *)(v16 + 12);
        *(unsigned char *)(v16 + 12) = 0;
      }
      if (v7 < v11) {
        break;
      }
      uint64_t v30 = (2 * v11) | 1;
      uint64_t v12 = v6 + 16 * v30;
      uint64_t v11 = 2 * v11 + 2;
      if (v11 >= a3)
      {
        uint64_t v11 = v30;
      }
      else
      {
        uint64_t v31 = *(void *)(a2 + 24);
        if (!v31) {
          goto LABEL_110;
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31 + 48))(v31, v6 + 16 * v30, v12 + 16))
        {
          v12 += 16;
        }
        else
        {
          uint64_t v11 = v30;
        }
      }
      uint64_t v32 = *(void *)(a2 + 24);
      if (!v32) {
LABEL_110:
      }
        std::__throw_bad_function_call[abi:ne180100]();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v32 + 48))(v32, v12, v51);
      uint64_t v5 = (uint64_t *)v16;
    }
    while (!result);
    if (v51 == (unsigned char *)v16)
    {
      switch(v51[12])
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v42 = *(void **)v51;
            if (*(void *)v51)
            {
              if (*(char *)(*(void *)v51 + 31) < 0) {
                operator delete(*(void **)(*(void *)v51 + 8));
              }
              unsigned int v43 = v42;
              uint64_t v44 = 0x1012C404EF22A49;
              goto LABEL_109;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v47 = *(void **)v51;
            if (*(void *)v51)
            {
              uint64_t v48 = *(void **)(*(void *)v51 + 8);
              if (v48)
              {
                *(void *)(*(void *)v51 + 16) = v48;
                operator delete(v48);
              }
              unsigned int v43 = v47;
              uint64_t v44 = 0x1080C409938AC02;
              goto LABEL_109;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            v45 = *(void **)v51;
            if (*(void *)v51)
            {
              v50 = (void **)(*(void *)v51 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
              goto LABEL_104;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            v45 = *(void **)v51;
            if (*(void *)v51)
            {
              v50 = (void **)(*(void *)v51 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_104:
              unsigned int v43 = v45;
              uint64_t v44 = 0x1020C405E66F15BLL;
              goto LABEL_109;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v49 = *(void **)v51;
            if (*(void *)v51)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v51 + 16));
              unsigned int v43 = v49;
              unsigned int v46 = -235920773;
              goto LABEL_108;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v51, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t result = *(void *)v51;
            if (*(void *)v51)
            {
              unsigned int v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v51);
              unsigned int v46 = 2071181815;
LABEL_108:
              uint64_t v44 = v46 | 0x1030C4000000000;
LABEL_109:
              uint64_t result = MEMORY[0x22A614FA0](v43, v44);
            }
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(*(unsigned char *)(v16 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)v16;
            if (!*(void *)v16) {
              goto LABEL_81;
            }
            if (*((char *)v33 + 31) < 0) {
              operator delete((void *)v33[1]);
            }
            uint64_t v34 = v33;
            uint64_t v35 = 0x1012C404EF22A49;
            goto LABEL_80;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v16;
            if (!*(void *)v16) {
              goto LABEL_81;
            }
            atomic_ullong *volatile v39 = (void *)v38[1];
            if (v39)
            {
              v38[2] = (atomic_ullong)v39;
              operator delete(v39);
            }
            uint64_t v34 = v38;
            uint64_t v35 = 0x1080C409938AC02;
            goto LABEL_80;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)v16;
            if (!*(void *)v16) {
              goto LABEL_81;
            }
            v50 = (void **)(v36 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
            goto LABEL_75;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)v16;
            if (!*(void *)v16) {
              goto LABEL_81;
            }
            v50 = (void **)(v36 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_75:
            uint64_t v34 = v36;
            uint64_t v35 = 0x1020C405E66F15BLL;
            goto LABEL_80;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v40 = *(atomic_ullong *volatile *)v16;
            if (!*(void *)v16) {
              goto LABEL_81;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v40 + 2);
            uint64_t v34 = v40;
            unsigned int v37 = -235920773;
            goto LABEL_79;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t result = *(void *)v16;
            if (*(void *)v16)
            {
              uint64_t v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)result);
              unsigned int v37 = 2071181815;
LABEL_79:
              uint64_t v35 = v37 | 0x1030C4000000000;
LABEL_80:
              uint64_t result = MEMORY[0x22A614FA0](v34, v35);
            }
LABEL_81:
            *(void *)uint64_t v16 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v41 = *(void *)v51;
      *(void *)(v16 + 5) = *(void *)&v51[5];
      *(void *)uint64_t v16 = v41;
      *(unsigned char *)(v16 + 12) = v51[12];
    }
  }
  return result;
}

void sub_2240AF840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v13 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      if (*(char *)(a10 + 31) < 0) {
        operator delete(*(void **)(a10 + 8));
      }
      uint64_t v14 = (void *)v13;
      uint64_t v15 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v18 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      uint64_t v19 = *(void **)(a10 + 8);
      if (v19)
      {
        *(void *)(a10 + 16) = v19;
        operator delete(v19);
      }
      uint64_t v14 = (void *)v18;
      uint64_t v15 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v16 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      a9 = a10 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v16 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      a9 = a10 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
LABEL_21:
      uint64_t v14 = (void *)v16;
      uint64_t v15 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a10 + 16));
      uint64_t v14 = (void *)v20;
      unsigned int v17 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a10) {
        goto LABEL_27;
      }
      uint64_t v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a10);
      unsigned int v17 = 2071181815;
LABEL_25:
      uint64_t v15 = v17 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v14, v15);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

atomic_ullong *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(atomic_ullong *volatile result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = (uint64_t)result;
    atomic_ullong *volatile v7 = (atomic_ullong *volatile)*result;
    int v8 = *((_DWORD *)result + 2);
    char v9 = *((unsigned char *)result + 12);
    *((unsigned char *)result + 12) = 0;
    uint64_t result = (atomic_ullong *volatile)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>((uint64_t)result, a3, a4);
    atomic_ullong *volatile v10 = result;
    if (result == (atomic_ullong *volatile)(a2 - 16))
    {
      switch(*((unsigned char *)result + 12))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong v14 = *result;
            if (!*result) {
              goto LABEL_57;
            }
            if (*(char *)(v14 + 31) < 0) {
              operator delete(*(void **)(v14 + 8));
            }
            uint64_t v15 = (void *)v14;
            uint64_t v16 = 0x1012C404EF22A49;
            goto LABEL_56;
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v24 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_57;
            }
            unsigned int v25 = (void *)v24[1];
            if (v25)
            {
              v24[2] = (atomic_ullong)v25;
              operator delete(v25);
            }
            uint64_t v15 = v24;
            uint64_t v16 = 0x1080C409938AC02;
            goto LABEL_56;
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v26 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_57;
            }
            atomic_ullong *volatile v29 = (void **)(v26 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v29);
            goto LABEL_48;
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v26 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_57;
            }
            atomic_ullong *volatile v29 = (void **)(v26 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v29);
LABEL_48:
            uint64_t v15 = v26;
            uint64_t v16 = 0x1020C405E66F15BLL;
            goto LABEL_56;
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_57;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v27 + 2);
            uint64_t v15 = v27;
            unsigned int v28 = -235920773;
            goto LABEL_55;
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t result = (atomic_ullong *volatile)*result;
            if (*v10)
            {
              uint64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(result);
              unsigned int v28 = 2071181815;
LABEL_55:
              uint64_t v16 = v28 | 0x1030C4000000000;
LABEL_56:
              uint64_t result = (atomic_ullong *volatile)MEMORY[0x22A614FA0](v15, v16);
            }
LABEL_57:
            *atomic_ullong *volatile v10 = 0;
          }
          break;
        default:
          break;
      }
      *atomic_ullong *volatile v10 = (atomic_ullong)v7;
      *((_DWORD *)v10 + 2) = v8;
      *((unsigned char *)v10 + 12) = v9;
    }
    else
    {
      switch(*((unsigned char *)result + 12))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v11 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_35;
            }
            if (*((char *)v11 + 31) < 0) {
              operator delete((void *)v11[1]);
            }
            uint64_t v12 = v11;
            uint64_t v13 = 0x1012C404EF22A49;
            goto LABEL_34;
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v17 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_35;
            }
            uint64_t v18 = (void *)v17[1];
            if (v18)
            {
              v17[2] = (atomic_ullong)v18;
              operator delete(v18);
            }
            uint64_t v12 = v17;
            uint64_t v13 = 0x1080C409938AC02;
            goto LABEL_34;
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v19 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_35;
            }
            atomic_ullong *volatile v29 = (void **)(v19 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v29);
            goto LABEL_26;
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v19 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_35;
            }
            atomic_ullong *volatile v29 = (void **)(v19 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v29);
LABEL_26:
            uint64_t v12 = v19;
            uint64_t v13 = 0x1020C405E66F15BLL;
            goto LABEL_34;
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v20 = (atomic_ullong *volatile)*result;
            if (!*result) {
              goto LABEL_35;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
            uint64_t v12 = v20;
            unsigned int v21 = -235920773;
            goto LABEL_33;
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)*result, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v22 = (atomic_ullong *volatile)*result;
            if (*v10)
            {
              uint64_t v12 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v22);
              unsigned int v21 = 2071181815;
LABEL_33:
              uint64_t v13 = v21 | 0x1030C4000000000;
LABEL_34:
              MEMORY[0x22A614FA0](v12, v13);
            }
LABEL_35:
            *atomic_ullong *volatile v10 = 0;
          }
          break;
        default:
          break;
      }
      atomic_ullong v23 = *(void *)(a2 - 16);
      *(atomic_ullong *volatile)((char *)v10 + 5) = *(void *)(a2 - 11);
      *atomic_ullong *volatile v10 = v23;
      *((unsigned char *)v10 + 12) = *(unsigned char *)(a2 - 4);
      *(void *)(a2 - 16) = v7;
      *(_DWORD *)(a2 - 8) = v8;
      *(unsigned char *)(a2 - 4) = v9;
      return (atomic_ullong *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(v6, (uint64_t)(v10 + 2), a3, ((uint64_t)v10 - v6 + 16) >> 4);
    }
  }
  return result;
}

void sub_2240AFE5C(_Unwind_Exception *exception_object)
{
  switch(v2)
  {
    case 2:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    case 3:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    case 4:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    case 5:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    case 8:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    case 9:
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>,turi::flexible_type*>(v1);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v9, v9 + 16))
      {
        v9 += 16;
        uint64_t v6 = v11;
      }
    }
    if (v9 != a1)
    {
      switch(*(unsigned char *)(a1 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_41;
            }
            if (*((char *)v13 + 31) < 0) {
              operator delete((void *)v13[1]);
            }
            atomic_ullong *volatile v14 = v13;
            uint64_t v15 = 0x1012C404EF22A49;
            goto LABEL_40;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_41;
            }
            atomic_ullong *volatile v17 = (void *)v16[1];
            if (v17)
            {
              v16[2] = (atomic_ullong)v17;
              operator delete(v17);
            }
            atomic_ullong *volatile v14 = v16;
            uint64_t v15 = 0x1080C409938AC02;
            goto LABEL_40;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_41;
            }
            atomic_ullong *volatile v27 = (void **)(v18 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
            goto LABEL_26;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_41;
            }
            atomic_ullong *volatile v27 = (void **)(v18 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_26:
            atomic_ullong *volatile v14 = v18;
            uint64_t v15 = 0x1020C405E66F15BLL;
            goto LABEL_40;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_41;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v19 + 2);
            atomic_ullong *volatile v14 = v19;
            unsigned int v20 = -235920773;
            goto LABEL_39;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)a1;
            if (*(void *)a1)
            {
              atomic_ullong *volatile v22 = (void *)v21[6];
              if (v22)
              {
                v21[7] = (atomic_ullong)v22;
                operator delete(v22);
              }
              atomic_ullong v23 = (void *)v21[3];
              if (v23)
              {
                v21[4] = (atomic_ullong)v23;
                operator delete(v23);
              }
              atomic_ullong *volatile v24 = (std::__shared_weak_count *)v21[2];
              if (v24) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v24);
              }
              atomic_ullong *volatile v14 = v21;
              unsigned int v20 = 2071181815;
LABEL_39:
              uint64_t v15 = v20 | 0x1030C4000000000;
LABEL_40:
              MEMORY[0x22A614FA0](v14, v15);
            }
LABEL_41:
            *(void *)a1 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v25 = *(void *)v9;
      *(void *)(a1 + 5) = *(void *)(v9 + 5);
      *(void *)a1 = v25;
      *(unsigned char *)(a1 + 12) = *(unsigned char *)(v9 + 12);
      *(unsigned char *)(v9 + 12) = 0;
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v9 = v4 >> 1;
    uint64_t v10 = v6 + 16 * (v4 >> 1);
    uint64_t v11 = (uint64_t *)(a2 - 16);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v10, a2 - 16);
    if (result)
    {
      *(void *)&v44[5] = *(uint64_t *)((char *)v11 + 5);
      *(void *)uint64_t v44 = *v11;
      v44[12] = *(unsigned char *)(a2 - 4);
      *(unsigned char *)(a2 - 4) = 0;
      do
      {
        uint64_t v12 = v10;
        if ((uint64_t *)v10 != v11)
        {
          switch(*((unsigned char *)v11 + 12))
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v13 = *v11;
                if (!*v11) {
                  goto LABEL_38;
                }
                if (*(char *)(v13 + 31) < 0) {
                  operator delete(*(void **)(v13 + 8));
                }
                atomic_ullong *volatile v14 = (atomic_ullong *volatile)v13;
                uint64_t v15 = 0x1012C404EF22A49;
                goto LABEL_37;
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v22 = (atomic_ullong *volatile)*v11;
                if (!*v11) {
                  goto LABEL_38;
                }
                atomic_ullong v23 = (void *)v22[1];
                if (v23)
                {
                  v22[2] = (atomic_ullong)v23;
                  operator delete(v23);
                }
                atomic_ullong *volatile v14 = v22;
                uint64_t v15 = 0x1080C409938AC02;
                goto LABEL_37;
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v16 = (atomic_ullong *volatile)*v11;
                if (!*v11) {
                  goto LABEL_38;
                }
                unsigned int v43 = (void **)(v16 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
                goto LABEL_32;
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v16 = (atomic_ullong *volatile)*v11;
                if (!*v11) {
                  goto LABEL_38;
                }
                unsigned int v43 = (void **)(v16 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_32:
                atomic_ullong *volatile v14 = v16;
                uint64_t v15 = 0x1020C405E66F15BLL;
                goto LABEL_37;
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v24 = (atomic_ullong *volatile)*v11;
                if (!*v11) {
                  goto LABEL_38;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
                atomic_ullong *volatile v14 = v24;
                unsigned int v21 = -235920773;
                goto LABEL_36;
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v17 = (atomic_ullong *volatile)*v11;
                if (*v11)
                {
                  atomic_ullong *volatile v18 = (void *)v17[6];
                  if (v18)
                  {
                    v17[7] = (atomic_ullong)v18;
                    operator delete(v18);
                  }
                  atomic_ullong *volatile v19 = (void *)v17[3];
                  if (v19)
                  {
                    v17[4] = (atomic_ullong)v19;
                    operator delete(v19);
                  }
                  unsigned int v20 = (std::__shared_weak_count *)v17[2];
                  if (v20) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
                  }
                  atomic_ullong *volatile v14 = v17;
                  unsigned int v21 = 2071181815;
LABEL_36:
                  uint64_t v15 = v21 | 0x1030C4000000000;
LABEL_37:
                  uint64_t result = MEMORY[0x22A614FA0](v14, v15);
                }
LABEL_38:
                uint64_t *v11 = 0;
              }
              break;
            default:
              break;
          }
          atomic_ullong *volatile v25 = *(atomic_ullong *volatile *)v12;
          *(uint64_t *)((char *)v11 + 5) = *(void *)(v12 + 5);
          uint64_t *v11 = (uint64_t)v25;
          *((unsigned char *)v11 + 12) = *(unsigned char *)(v12 + 12);
          *(unsigned char *)(v12 + 12) = 0;
        }
        if (!v9) {
          break;
        }
        uint64_t v26 = *(void *)(a3 + 24);
        if (!v26) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = v6 + 16 * v9;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v26 + 48))(v26, v10, v44);
        uint64_t v11 = (uint64_t *)v12;
      }
      while ((result & 1) != 0);
      if (v44 == (unsigned char *)v12)
      {
        switch(v44[12])
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v35 = *(void **)v44;
              if (*(void *)v44)
              {
                if (*(char *)(*(void *)v44 + 31) < 0) {
                  operator delete(*(void **)(*(void *)v44 + 8));
                }
                atomic_ullong *volatile v36 = v35;
                uint64_t v37 = 0x1012C404EF22A49;
                goto LABEL_98;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v40 = *(void **)v44;
              if (*(void *)v44)
              {
                uint64_t v41 = *(void **)(*(void *)v44 + 8);
                if (v41)
                {
                  *(void *)(*(void *)v44 + 16) = v41;
                  operator delete(v41);
                }
                atomic_ullong *volatile v36 = v40;
                uint64_t v37 = 0x1080C409938AC02;
                goto LABEL_98;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v38 = *(void **)v44;
              if (*(void *)v44)
              {
                unsigned int v43 = (void **)(*(void *)v44 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
                goto LABEL_93;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v38 = *(void **)v44;
              if (*(void *)v44)
              {
                unsigned int v43 = (void **)(*(void *)v44 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_93:
                atomic_ullong *volatile v36 = v38;
                uint64_t v37 = 0x1020C405E66F15BLL;
                goto LABEL_98;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v42 = *(void **)v44;
              if (*(void *)v44)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v44 + 16));
                atomic_ullong *volatile v36 = v42;
                unsigned int v39 = -235920773;
                goto LABEL_97;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t result = *(void *)v44;
              if (*(void *)v44)
              {
                atomic_ullong *volatile v36 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v44);
                unsigned int v39 = 2071181815;
LABEL_97:
                uint64_t v37 = v39 | 0x1030C4000000000;
LABEL_98:
                uint64_t result = MEMORY[0x22A614FA0](v36, v37);
              }
            }
            break;
          default:
            return result;
        }
      }
      else
      {
        switch(*(unsigned char *)(v12 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v27 = *(atomic_ullong *volatile *)v12;
              if (!*(void *)v12) {
                goto LABEL_70;
              }
              if (*((char *)v27 + 31) < 0) {
                operator delete((void *)v27[1]);
              }
              unsigned int v28 = v27;
              uint64_t v29 = 0x1012C404EF22A49;
              goto LABEL_69;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v32 = *(atomic_ullong *volatile *)v12;
              if (!*(void *)v12) {
                goto LABEL_70;
              }
              atomic_ullong *volatile v33 = (void *)v32[1];
              if (v33)
              {
                v32[2] = (atomic_ullong)v33;
                operator delete(v33);
              }
              unsigned int v28 = v32;
              uint64_t v29 = 0x1080C409938AC02;
              goto LABEL_69;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v12;
              if (!*(void *)v12) {
                goto LABEL_70;
              }
              unsigned int v43 = (void **)(v30 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
              goto LABEL_64;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v12;
              if (!*(void *)v12) {
                goto LABEL_70;
              }
              unsigned int v43 = (void **)(v30 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_64:
              unsigned int v28 = v30;
              uint64_t v29 = 0x1020C405E66F15BLL;
              goto LABEL_69;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)v12;
              if (!*(void *)v12) {
                goto LABEL_70;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v34 + 2);
              unsigned int v28 = v34;
              unsigned int v31 = -235920773;
              goto LABEL_68;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t result = *(void *)v12;
              if (*(void *)v12)
              {
                unsigned int v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)result);
                unsigned int v31 = 2071181815;
LABEL_68:
                uint64_t v29 = v31 | 0x1030C4000000000;
LABEL_69:
                uint64_t result = MEMORY[0x22A614FA0](v28, v29);
              }
LABEL_70:
              *(void *)uint64_t v12 = 0;
            }
            break;
          default:
            break;
        }
        *(void *)(v12 + 5) = *(void *)&v44[5];
        *(void *)uint64_t v12 = *(void *)v44;
        *(unsigned char *)(v12 + 12) = v44[12];
      }
    }
  }
  return result;
}

void sub_2240B086C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v13 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      if (*(char *)(a10 + 31) < 0) {
        operator delete(*(void **)(a10 + 8));
      }
      atomic_ullong *volatile v14 = (void *)v13;
      uint64_t v15 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v18 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      atomic_ullong *volatile v19 = *(void **)(a10 + 8);
      if (v19)
      {
        *(void *)(a10 + 16) = v19;
        operator delete(v19);
      }
      atomic_ullong *volatile v14 = (void *)v18;
      uint64_t v15 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v16 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      a9 = a10 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v16 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      a9 = a10 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
LABEL_21:
      atomic_ullong *volatile v14 = (void *)v16;
      uint64_t v15 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = a10;
      if (!a10) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a10 + 16));
      atomic_ullong *volatile v14 = (void *)v20;
      unsigned int v17 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a10, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a10) {
        goto LABEL_27;
      }
      atomic_ullong *volatile v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a10);
      unsigned int v17 = 2071181815;
LABEL_25:
      uint64_t v15 = v17 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v14, v15);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

atomic_ullong *volatile *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,std::__equal_to &>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result = (atomic_ullong *volatile *)a2;
  if (a1 != a2)
  {
    do
    {
      uint64_t v7 = a1 + 16;
      if (a1 + 16 == a2) {
        return (atomic_ullong *volatile *)a2;
      }
      int v8 = std::__equal_to::operator()[abi:ne180100]<turi::flexible_type,turi::flexible_type>(a3, a1, (uint64_t)(a1 + 16));
      a1 = v7;
    }
    while (!v8);
    uint64_t v9 = (uint64_t)(v7 + 16);
    uint64_t v10 = (atomic_ullong *volatile *)(v7 - 16);
    if ((unsigned __int8 *)v9 == a2)
    {
      uint64_t v11 = v10;
    }
    else
    {
      do
      {
        if (std::__equal_to::operator()[abi:ne180100]<turi::flexible_type,turi::flexible_type>(a3, (unsigned __int8 *)v10, v9))
        {
          uint64_t v11 = v10;
        }
        else
        {
          uint64_t v11 = v10 + 2;
          if ((atomic_ullong *volatile *)(v9 - 16) != v10)
          {
            switch(*((unsigned char *)v10 + 28))
            {
              case 2:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v12 = *v11;
                  if (!*v11) {
                    goto LABEL_40;
                  }
                  if (*((char *)v12 + 31) < 0) {
                    operator delete((void *)v12[1]);
                  }
                  atomic_ullong *volatile v13 = v12;
                  uint64_t v14 = 0x1012C404EF22A49;
                  goto LABEL_39;
                }
                break;
              case 3:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v15 = *v11;
                  if (!*v11) {
                    goto LABEL_40;
                  }
                  uint64_t v16 = (void *)v15[1];
                  if (v16)
                  {
                    v15[2] = (atomic_ullong)v16;
                    operator delete(v16);
                  }
                  atomic_ullong *volatile v13 = v15;
                  uint64_t v14 = 0x1080C409938AC02;
                  goto LABEL_39;
                }
                break;
              case 4:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v17 = *v11;
                  if (!*v11) {
                    goto LABEL_40;
                  }
                  atomic_ullong *volatile v25 = (void **)(v17 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v25);
                  goto LABEL_25;
                }
                break;
              case 5:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v17 = *v11;
                  if (!*v11) {
                    goto LABEL_40;
                  }
                  atomic_ullong *volatile v25 = (void **)(v17 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v25);
LABEL_25:
                  atomic_ullong *volatile v13 = v17;
                  uint64_t v14 = 0x1020C405E66F15BLL;
                  goto LABEL_39;
                }
                break;
              case 8:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v18 = *v11;
                  if (!*v11) {
                    goto LABEL_40;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v18 + 2);
                  atomic_ullong *volatile v13 = v18;
                  unsigned int v19 = -235920773;
                  goto LABEL_38;
                }
                break;
              case 9:
                if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v20 = *v11;
                  if (*v11)
                  {
                    unsigned int v21 = (void *)v20[6];
                    if (v21)
                    {
                      v20[7] = (atomic_ullong)v21;
                      operator delete(v21);
                    }
                    atomic_ullong *volatile v22 = (void *)v20[3];
                    if (v22)
                    {
                      v20[4] = (atomic_ullong)v22;
                      operator delete(v22);
                    }
                    atomic_ullong v23 = (std::__shared_weak_count *)v20[2];
                    if (v23) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                    }
                    atomic_ullong *volatile v13 = v20;
                    unsigned int v19 = 2071181815;
LABEL_38:
                    uint64_t v14 = v19 | 0x1030C4000000000;
LABEL_39:
                    MEMORY[0x22A614FA0](v13, v14);
                  }
LABEL_40:
                  atomic_ullong *volatile *v11 = 0;
                }
                break;
              default:
                break;
            }
            atomic_ullong *volatile v24 = *(atomic_ullong **)v9;
            *(atomic_ullong *volatile *)((char *)v10 + 21) = *(atomic_ullong *volatile *)(v9 + 5);
            atomic_ullong *volatile *v11 = v24;
            *((unsigned char *)v10 + 28) = *(unsigned char *)(v9 + 12);
            *(unsigned char *)(v9 + 12) = 0;
          }
        }
        v9 += 16;
        uint64_t v10 = v11;
      }
      while ((unsigned __int8 *)v9 != a2);
    }
    return v11 + 2;
  }
  return result;
}

void *std::vector<std::vector<turi::flexible_type>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::flexible_type> const&>(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_2240B0DA0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::flexible_type>>::__push_back_slow_path<std::vector<turi::flexible_type> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  atomic_ullong *volatile v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  atomic_ullong *volatile v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(v14);
  return v12;
}

void sub_2240B0EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<std::string>::init(uint64_t a1, uint64_t a2)
{
  assert_msg(*(void *)(a1 + 8) == 0, "Reader already inited");
  turi::sarray_reader<std::string>::open_format_reader(a1, a2);
}

void sub_2240B1204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = *(void **)(v12 - 120);
  if (v14)
  {
    *(void *)(v12 - 112) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray_reader<std::string>::sarray_reader(uint64_t a1)
{
  *(void *)a1 = &unk_26D76BE30;
  *(void *)(a1 + 8) = 0;
  int v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 16), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  return a1;
}

void turi::sarray_reader<std::string>::~sarray_reader(uint64_t a1)
{
  turi::sarray_reader<std::string>::~sarray_reader(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::sarray_reader<std::string>::begin@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v11 = a2;
  uint64_t v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (i = *(void **)(a1 + 96); i; i = (void *)*i)
  {
    unint64_t v8 = i[4];
    if (v8 <= a2)
    {
      if (v8 >= a2) {
        turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#1}::operator()();
      }
      ++i;
    }
  }
  std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)(a1 + 88), &v11, (uint64_t *)&v11);
  if (!*(void *)(a1 + 8)) {
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#2}::operator()();
  }
  unint64_t v9 = v11;
  if (v9 >= (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#3}::operator()();
  }
  turi::sarray_iterator<std::string>::sarray_iterator(a3, (uint64_t *)(*(void *)(a1 + 160) + 96 * v11), v11, 1);
  return pthread_mutex_unlock(v6);
}

void sub_2240B1414(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t turi::sarray_reader<std::string>::end@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v9[0] = a1[1];
  if (!v9[0])
  {
    unint64_t v11 = v9;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#1}::operator()();
  }
  unint64_t v11 = (void *)a2;
  unint64_t result = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  unint64_t v10 = result;
  if (result <= a2)
  {
    v9[0] = &v11;
    v9[1] = &v10;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#2}::operator()();
  }
  uint64_t v7 = a1[20] + 96 * a2;
  *a3 = v7;
  a3[1] = a2;
  a3[2] = 0;
  a3[3] = 0;
  uint64_t v8 = *(void *)(v7 + 72) - *(void *)(v7 + 56);
  a3[5] = v8;
  a3[6] = v8;
  a3[4] = 0;
  return result;
}

uint64_t turi::sarray_reader<std::string>::read_rows(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t turi::sarray_reader<std::string>::reset_iterators(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  int v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  uint64_t v3 = (void *)v1[12];
  v1 += 12;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  unint64_t v4 = (uint64_t *)v1[8];
  unint64_t v5 = (uint64_t *)v1[9];
  while (v4 != v5)
  {
    std::vector<std::string>::__clear[abi:ne180100](v4);
    uint64_t v6 = v4[7];
    v4[8] = v6;
    v4[11] = v6;
    v4[6] = 0;
    v4 += 12;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t turi::sarray_reader<std::string>::~sarray_reader(uint64_t a1)
{
  *(void *)a1 = &unk_26D76BE30;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v5 = (void **)(a1 + 160);
  std::vector<turi::sarray_reader_buffer<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 120) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 88, *(void **)(a1 + 96));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 16));
  return a1;
}

uint64_t turi::sarray_iterator<std::string>::sarray_iterator(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = a1 + 16;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v6 = a2[9] - a2[7];
  *(void *)(a1 + 48) = v6;
  if (a4 && v6)
  {
    uint64_t v7 = turi::sarray_reader_buffer<std::string>::next(a2);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)v5);
    }
    uint64_t v6 = 0;
    long long v8 = *(_OWORD *)v7;
    *(void *)(v5 + 16) = *(void *)(v7 + 16);
    *(_OWORD *)uint64_t v5 = v8;
    *(unsigned char *)(v7 + 23) = 0;
    *(unsigned char *)uint64_t v7 = 0;
  }
  *(void *)(a1 + 40) = v6;
  return a1;
}

void sub_2240B16F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_reader<std::string>::open_format_reader(uint64_t a1, uint64_t a2)
{
  turi::index_file_information::index_file_information(&v4, (const turi::index_file_information *)(a2 + 8));
  uint64_t v3 = v5;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v11, v11[1]);
  uint64_t v12 = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 == 2) {
    operator new();
  }
  if (v3 != 1)
  {
    if (!v3) {
      turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
    }
    *(void *)(a1 + 8) = 0;
    turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator()();
  }
  turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator()();
}

void sub_2240B188C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::index_file_information::~index_file_information((turi::index_file_information *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader<std::string>::size(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    turi::sarray_reader<turi::flexible_type>::size(void)const::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 72))(v1);
  uint64_t v3 = *(uint64_t **)(v2 + 72);
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t result = 0;
  uint64_t v6 = v4 - (void)v3;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      uint64_t v8 = *v3++;
      result += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

void turi::sarray_reader<std::string>::create_segment_read_buffers(void *a1, void *a2)
{
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 4;
  a1[10] = v4;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 14), v4);
  std::vector<turi::sarray_reader_buffer<std::string>>::resize(a1 + 20, a1[10]);
  uint64_t v5 = a1[14];
  if (a1[15] != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 8;
    do
    {
      unint64_t v9 = (unint64_t *)(*a2 + v8);
      *(void *)(v5 + 8 * v7) = *v9 - *(v9 - 1);
      uint64_t v10 = a1[20] + v6;
      unint64_t v11 = *(v9 - 1);
      unint64_t v12 = *v9;
      *(void *)(v10 + 40) = a1;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 88) = v11;
      *(int64x2_t *)(v10 + 56) = vdupq_n_s64(v11);
      unint64_t v13 = turi::sarray_reader<std::string>::size((uint64_t)a1);
      if (v13 >= v12) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = v13;
      }
      *(void *)(v10 + 72) = v14;
      *(void *)(v10 + 80) = 1024;
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v10);
      ++v7;
      uint64_t v5 = a1[14];
      v6 += 96;
      v8 += 16;
    }
    while (v7 < (a1[15] - v5) >> 3);
  }
}

uint64_t turi::sarray_format_reader_v2<std::string>::sarray_format_reader_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D76BEA8;
  uint64_t instance = turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)a1);
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 8) = instance;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 0;
  int v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 240), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  return a1;
}

void sub_2240B1B28(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v1 + 216);
  if (v6)
  {
    *(void *)(v1 + 224) = v6;
    operator delete(v6);
  }
  turi::sarray_format_reader_v2<turi::flexible_type>::sarray_format_reader_v2(v4, v3, v1);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::string>::~sarray_format_reader_v2(uint64_t a1)
{
  turi::sarray_format_reader_v2<std::string>::~sarray_format_reader_v2(a1);
  JUMPOUT(0x22A614FA0);
}

void turi::sarray_format_reader_v2<std::string>::open(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 56) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 48));
  if (a1 + 16 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 88), *(char **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *(std::string **)(a2 + 96), *(long long **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 136), *(long long **)(a2 + 120), (long long *)(a2 + 128));
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  v86 = (void **)(a1 + 192);
  v87 = (char **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 216);
  v83 = (char **)(a1 + 216);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = v5;
  *(void *)(a1 + 160) = 0;
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a2 + 104) == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v84 = a2;
    do
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = (long long *)(v6 + 24 * v7);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v11 = *v10;
        v88.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v11;
      }
      unint64_t v12 = turi::v2_block_impl::block_manager::open_column(v9, (uint64_t)&v88);
      unint64_t v14 = v13;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = *(unint64_t **)(a1 + 224);
      unint64_t v15 = *(void *)(a1 + 232);
      uint64_t v85 = v7;
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = ((char *)v16 - *v83) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v15 - (void)*v83;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          atomic_ullong *volatile v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(a1 + 232, v21);
        }
        else {
          atomic_ullong *volatile v22 = 0;
        }
        atomic_ullong v23 = (unint64_t *)&v22[16 * v18];
        *atomic_ullong v23 = v12;
        v23[1] = v14;
        atomic_ullong *volatile v25 = *(char **)(a1 + 216);
        atomic_ullong *volatile v24 = *(char **)(a1 + 224);
        uint64_t v26 = v23;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 2;
            v24 -= 16;
          }
          while (v24 != v25);
          atomic_ullong *volatile v24 = *v83;
        }
        atomic_ullong *volatile v17 = v23 + 2;
        *(void *)(a1 + 216) = v26;
        *(void *)(a1 + 224) = v23 + 2;
        *(void *)(a1 + 232) = &v22[16 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *uint64_t v16 = v12;
        v16[1] = v14;
        atomic_ullong *volatile v17 = v16 + 2;
      }
      *(void *)(a1 + 224) = v17;
      unint64_t v27 = turi::v2_block_impl::block_manager::num_blocks_in_column(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12, v14);
      uint64_t all_block_info = turi::v2_block_impl::block_manager::get_all_block_info(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12);
      if (v27)
      {
        uint64_t v29 = (void *)all_block_info;
        for (unint64_t i = 0; i != v27; ++i)
        {
          atomic_ullong *volatile v32 = *(char **)(a1 + 200);
          unint64_t v31 = *(void *)(a1 + 208);
          if ((unint64_t)v32 >= v31)
          {
            atomic_ullong *volatile v34 = (char *)*v86;
            uint64_t v35 = (v32 - (unsigned char *)*v86) >> 3;
            unint64_t v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v37 = v31 - (void)v34;
            if (v37 >> 2 > v36) {
              unint64_t v36 = v37 >> 2;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              unsigned int v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v38);
              atomic_ullong *volatile v34 = *(char **)(a1 + 192);
              atomic_ullong *volatile v32 = *(char **)(a1 + 200);
            }
            else
            {
              unsigned int v39 = 0;
            }
            atomic_ullong *volatile v40 = &v39[8 * v35];
            *(void *)atomic_ullong *volatile v40 = v8;
            atomic_ullong *volatile v33 = v40 + 8;
            while (v32 != v34)
            {
              uint64_t v41 = *((void *)v32 - 1);
              v32 -= 8;
              *((void *)v40 - 1) = v41;
              v40 -= 8;
            }
            *(void *)(a1 + 192) = v40;
            *(void *)(a1 + 200) = v33;
            *(void *)(a1 + 208) = &v39[8 * v38];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(void *)atomic_ullong *volatile v32 = v8;
            atomic_ullong *volatile v33 = v32 + 8;
          }
          *(void *)(a1 + 200) = v33;
          uint64_t v42 = *(void *)(*(void *)(*v29 + 24 * v14) + 48 * i + 24);
          uint64_t v44 = *(unint64_t **)(a1 + 176);
          unint64_t v43 = *(void *)(a1 + 184);
          if ((unint64_t)v44 >= v43)
          {
            unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - *v87) >> 3);
            unint64_t v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (void)*v87) >> 3);
            if (2 * v48 > v47) {
              unint64_t v47 = 2 * v48;
            }
            if (v48 >= 0x555555555555555) {
              unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49) {
              v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 184, v49);
            }
            else {
              v50 = 0;
            }
            v51 = (unint64_t *)&v50[24 * v46];
            unint64_t *v51 = v12;
            v51[1] = v14;
            v51[2] = i;
            unsigned int v53 = *(char **)(a1 + 168);
            uint64_t v52 = *(char **)(a1 + 176);
            unsigned int v54 = v51;
            if (v52 != v53)
            {
              do
              {
                long long v55 = *(_OWORD *)(v52 - 24);
                *(v54 - 1) = *((void *)v52 - 1);
                *(_OWORD *)(v54 - 3) = v55;
                v54 -= 3;
                v52 -= 24;
              }
              while (v52 != v53);
              uint64_t v52 = *v87;
            }
            uint64_t v45 = v51 + 3;
            *(void *)(a1 + 168) = v54;
            *(void *)(a1 + 176) = v51 + 3;
            *(void *)(a1 + 184) = &v50[24 * v49];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            unint64_t *v44 = v12;
            v44[1] = v14;
            uint64_t v45 = v44 + 3;
            v44[2] = i;
          }
          v8 += v42;
          *(void *)(a1 + 176) = v45;
        }
      }
      uint64_t v7 = v85 + 1;
      uint64_t v6 = *(void *)(v84 + 96);
    }
    while (v85 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v84 + 104) - v6) >> 3));
  }
  v56 = *(uint64_t **)(a1 + 88);
  v57 = *(uint64_t **)(a1 + 96);
  if (v56 != v57)
  {
    uint64_t v58 = *(void *)(a1 + 160);
    do
    {
      uint64_t v59 = *v56++;
      v58 += v59;
      *(void *)(a1 + 160) = v58;
    }
    while (v56 != v57);
  }
  int v60 = *(void **)(a1 + 336);
  for (j = *(void **)(a1 + 344);
        j != v60;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](a1 + 352, j))
  {
    j -= 23;
  }
  *(void *)(a1 + 344) = v60;
  std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::resize((uint64_t *)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3));
  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3);
  unint64_t v63 = *(void *)(a1 + 320);
  unint64_t v64 = v62 >> 6;
  if ((v62 & 0x3F) != 0) {
    ++v64;
  }
  *(void *)(a1 + 312) = v62;
  *(void *)(a1 + 320) = v64;
  v65 = (char *)malloc_type_realloc(*(void **)(a1 + 304), 8 * v64, 0x100004000313F17uLL);
  v66 = v65;
  *(void *)(a1 + 304) = v65;
  uint64_t v67 = *(void *)(a1 + 312) & 0x3FLL;
  if (v67) {
    *(void *)&v65[8 * *(void *)(a1 + 320) - 8] &= ~(-1 << v67);
  }
  uint64_t v68 = *(void *)(a1 + 320);
  if (v68 > v63)
  {
    v69 = &v65[8 * v63];
    uint64_t v70 = 8 * v68 - 8 * v63;
    if (v70 >= 1)
    {
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
      uint64_t v68 = *(void *)(a1 + 320);
    }
  }
  if (v68 >= 1) {
    bzero(v66, 8 * (v68 - ((v68 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  }
  unint64_t v71 = *(void *)(a1 + 208);
  v72 = *(char **)(a1 + 200);
  if ((unint64_t)v72 >= v71)
  {
    v74 = (char *)*v86;
    uint64_t v75 = (v72 - (unsigned char *)*v86) >> 3;
    unint64_t v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v77 = v71 - (void)v74;
    if (v77 >> 2 > v76) {
      unint64_t v76 = v77 >> 2;
    }
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v78 = v76;
    }
    if (v78)
    {
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v78);
      v74 = *(char **)(a1 + 192);
      v72 = *(char **)(a1 + 200);
    }
    else
    {
      v79 = 0;
    }
    v80 = &v79[8 * v75];
    v81 = &v79[8 * v78];
    *(void *)v80 = *(void *)(a1 + 160);
    v73 = v80 + 8;
    while (v72 != v74)
    {
      uint64_t v82 = *((void *)v72 - 1);
      v72 -= 8;
      *((void *)v80 - 1) = v82;
      v80 -= 8;
    }
    *(void *)(a1 + 192) = v80;
    *(void *)(a1 + 200) = v73;
    *(void *)(a1 + 208) = v81;
    if (v74) {
      operator delete(v74);
    }
  }
  else
  {
    *(void *)v72 = *(void *)(a1 + 160);
    v73 = v72 + 8;
  }
  *(void *)(a1 + 200) = v73;
  if (*(void *)(a1 + 160) != v8) {
    turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator()();
  }
}

{
  std::string v2;

  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    uint64_t v2 = *(std::string *)a2;
  }
  turi::read_index_file((uint64_t)&v2);
}

void sub_2240B2260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2240B2368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t turi::sarray_format_reader_v2<std::string>::read_rows(atomic_ullong *a1, unint64_t a2, unint64_t a3, std::vector<std::string> *this)
{
  if (a1[20] >= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = a1[20];
  }
  BOOL v7 = v6 >= a2;
  std::vector<std::string>::size_type v8 = v6 - a2;
  if (v8 != 0 && v7)
  {
    std::vector<std::string>::resize(this, v8);
    turi::sarray_format_reader_v2<std::string>::fetch_rows_from_cache(a1, a2, v6, this);
    if (cppipc::must_cancel(v10))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Cancelled by user.");
    }
    return 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  }
  else
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    return 0;
  }
}

void sub_2240B245C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_format_reader_v2<std::string>::~sarray_format_reader_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D76BEA8;
  turi::sarray_format_reader_v2<turi::flexible_type>::close((uint64_t *)a1);
  BOOL v7 = (void **)(a1 + 336);
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
  free(*(void **)(a1 + 304));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 240));
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(void *)(a1 + 200) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(void *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(void **)(a1 + 144));
  BOOL v7 = (void **)(a1 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(void *)(a1 + 96) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::resize(uint64_t *a1, unint64_t a2)
{
  int v3 = (void *)a1[1];
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 184 * a2;
    while (v3 != (void *)v7)
    {
      v3 -= 23;
      std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void **std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3) >= a2)
  {
    return (void **)std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1642C8590B21642) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xB21642C8590B21) {
      unint64_t v11 = 0x1642C8590B21642;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v20 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v12[184 * v8];
    v17[0] = v12;
    v17[1] = v14;
    uint64_t v18 = v14;
    unint64_t v19 = &v12[184 * v11];
    uint64_t v15 = 184 * a2;
    uint64_t v16 = &v14[184 * a2];
    do
    {
      *((void *)v14 + 22) = 0;
      *((_OWORD *)v14 + 9) = 0u;
      *((_OWORD *)v14 + 10) = 0u;
      *((_OWORD *)v14 + 7) = 0u;
      *((_OWORD *)v14 + 8) = 0u;
      *((_OWORD *)v14 + 5) = 0u;
      *((_OWORD *)v14 + 6) = 0u;
      *((_OWORD *)v14 + 3) = 0u;
      *((_OWORD *)v14 + 4) = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      *((_OWORD *)v14 + 2) = 0u;
      *(_OWORD *)unint64_t v14 = 0u;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry((uint64_t)v14);
      v14 += 184;
      v15 -= 184;
    }
    while (v15);
    uint64_t v18 = v16;
    std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer(v17);
  }
}

void sub_2240B2774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 184 * a2;
    uint64_t v5 = 184 * a2;
    do
    {
      *(void *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      uint64_t result = turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v3);
      v3 += 184;
      v5 -= 184;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(v2 + 8) = v3;
  return result;
}

void sub_2240B2810(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<std::string>::cache_entry,std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 184;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v7 - 184, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 184;
      *((void *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2240B2938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<std::string>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<std::string>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void turi::sarray_format_reader_v2<std::string>::fetch_rows_from_cache(atomic_ullong *a1, unint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v6 = a1;
  unint64_t v7 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(a1, a2);
  unint64_t v42 = a3;
  unint64_t v40 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(v6, a3 - 1);
  if (v7 < v40 + 1)
  {
    unint64_t v8 = 0;
    unint64_t v43 = v6;
    do
    {
      unint64_t v9 = v7;
      atomic_ullong v10 = v6[24];
      unint64_t v11 = *(void *)(v10 + 8 * v7);
      unint64_t v44 = v7 + 1;
      unint64_t v12 = *(void *)(v10 + 8 * (v7 + 1));
      atomic_ullong v13 = v6[42];
      long long v14 = (atomic_uchar *)(v13 + 184 * v7);
      do
      {
        while (*v14 == 1)
          ;
      }
      while (atomic_exchange(v14, 1u));
      if (v11 <= a2) {
        unint64_t v15 = a2;
      }
      else {
        unint64_t v15 = v11;
      }
      unint64_t v16 = v13 + 184 * v9;
      uint64_t v19 = *(void *)(v16 + 24);
      uint64_t v18 = (uint64_t **)(v16 + 24);
      uint64_t v17 = v19;
      if (v12 >= v42) {
        unint64_t v20 = v42;
      }
      else {
        unint64_t v20 = v12;
      }
      atomic_ullong *volatile v22 = (unint64_t *)(v18 - 2);
      unint64_t v21 = (unint64_t)*(v18 - 2);
      if (v17) {
        BOOL v23 = v21 > v15;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23)
      {
        turi::sarray_format_reader_v2<std::string>::fetch_cache_from_file(v6, v9, (uint64_t)v14);
        unint64_t v21 = *v22;
      }
      atomic_ullong v24 = v6[24];
      uint64_t v25 = *(void *)(v24 + 8 * v9);
      if (v21 == v15)
      {
        unint64_t v26 = v20;
        BOOL v23 = v20 > v15;
        unint64_t v27 = v20 - v15;
        unint64_t v39 = v26;
        if (v23)
        {
          unint64_t v38 = v9;
          uint64_t v28 = -24 * v25 + 24 * v15;
          uint64_t v29 = 24 * v8;
          unint64_t v8 = v8 + v26 - v15;
          do
          {
            uint64_t v30 = **v18;
            uint64_t v31 = *a4 + v29;
            if (*(char *)(v31 + 23) < 0) {
              operator delete(*(void **)v31);
            }
            atomic_ullong *volatile v32 = (unsigned char *)(v30 + v28);
            long long v33 = *(_OWORD *)(v30 + v28);
            *(void *)(v31 + 16) = *(void *)(v30 + v28 + 16);
            *(_OWORD *)uint64_t v31 = v33;
            v32[23] = 0;
            *atomic_ullong *volatile v32 = 0;
            v28 += 24;
            v29 += 24;
            --v27;
          }
          while (v27);
          uint64_t v6 = v43;
          atomic_ullong v24 = v43[24];
          atomic_ullong *volatile v22 = (unint64_t *)(v18 - 2);
          unint64_t v9 = v38;
        }
        *atomic_ullong *volatile v22 = v39;
        unint64_t v7 = v44;
        unint64_t v34 = v9;
        if (v39 == *(void *)(v24 + 8 * v44)) {
          turi::sarray_format_reader_v2<std::string>::release_cache(v6, v9);
        }
      }
      else
      {
        unint64_t v34 = v9;
        unint64_t v35 = v20 - v15;
        if (v20 <= v15)
        {
          unint64_t v7 = v44;
        }
        else
        {
          uint64_t v36 = -24 * v25 + 24 * v15;
          uint64_t v37 = 24 * v8;
          unint64_t v7 = v44;
          do
          {
            std::string::operator=((std::string *)(*a4 + v37), (const std::string *)(**v18 + v36));
            ++v8;
            v36 += 24;
            v37 += 24;
            --v35;
          }
          while (v35);
        }
      }
      __dmb(0xBu);
      *long long v14 = 0;
      uint64_t v6 = v43;
    }
    while (v34 != v40);
  }
}

void sub_2240B2BD4(_Unwind_Exception *a1)
{
  __dmb(0xBu);
  unsigned char *v1 = 0;
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<std::string>::fetch_cache_from_file(atomic_ullong *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a3 + 24);
  if (!v6)
  {
    turi::buffer_pool<std::vector<std::string>>::get_new_buffer(&turi::sarray_format_reader_v2<std::string>::m_buffer_pool, (uint64_t)&v18);
    long long v7 = v18;
    long long v18 = 0uLL;
    unint64_t v8 = *(std::__shared_weak_count **)(a3 + 32);
    *(_OWORD *)(a3 + 24) = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (*((void *)&v18 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
      }
    }
    uint64_t v6 = *(uint64_t **)(a3 + 24);
  }
  uint64_t v9 = a1[21] + 24 * a2;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(v9 + 16);
  long long v16 = *(_OWORD *)v9;
  uint64_t v17 = v11;
  if (!turi::v2_block_impl::block_manager::read_block<std::string>(v10, &v16, v6, 0)) {
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(unsigned long,turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry &)::{lambda(void)#1}::operator()();
  }
  *(void *)(a3 + 8) = *(void *)(a1[24] + 8 * a2);
  *(_WORD *)(a3 + 16) = 256;
  atomic_ullong v12 = a1[38];
  if ((*(void *)(v12 + 8 * (a2 >> 6)) & (1 << a2)) == 0)
  {
    atomic_fetch_add(a1 + 41, 1uLL);
    atomic_ullong v12 = a1[38];
  }
  atomic_fetch_or((atomic_ullong *volatile)(v12 + 8 * (a2 >> 6)), 1 << a2);
  atomic_ullong v13 = a1[41];
  if (v13 != turi::SFRAME_MAX_BLOCKS_IN_CACHE)
  {
    uint64_t v14 = turi::SFRAME_MAX_BLOCKS_IN_CACHE - v13;
    do
    {
      if (a1[41] <= (unint64_t)turi::SFRAME_MAX_BLOCKS_IN_CACHE) {
        break;
      }
      turi::sarray_format_reader_v2<std::string>::try_evict_something_from_cache((turi::random *)a1);
    }
    while (!__CFADD__(v14++, 1));
  }
}

void turi::sarray_format_reader_v2<std::string>::release_cache(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[42];
  if (*(unsigned char *)(v2 + 184 * a2 + 17))
  {
    uint64_t v5 = 184 * a2;
    turi::buffer_pool<std::vector<std::string>>::release_buffer((uint64_t)&turi::sarray_format_reader_v2<std::string>::m_buffer_pool, v2 + 184 * a2 + 24);
    uint64_t v6 = a1[42] + v5;
    long long v7 = *(std::__shared_weak_count **)(v6 + 32);
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    turi::v2_block_impl::encoded_block::release((turi::v2_block_impl::encoded_block *)(a1[42] + 184 * a2 + 40));
    turi::v2_block_impl::encoded_block_range::release((turi::v2_block_impl::typed_decode_stream **)(a1[42]
                                                                                                  + 184 * a2
                                                                                                  + 112));
    *(unsigned char *)(a1[42] + 184 * a2 + 17) = 0;
    atomic_fetch_and((atomic_ullong *volatile)(a1[38] + 8 * (a2 >> 6)), ~(1 << a2));
    atomic_fetch_add(a1 + 41, 0xFFFFFFFFFFFFFFFFLL);
  }
}

uint64_t turi::buffer_pool<std::vector<std::string>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = &a1[1].__opaque[24];
  if (!*(void *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    uint64_t v6 = *(void *)a1[1].__opaque;
    uint64_t v5 = *(void *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(v6 + v7 + 8);
        if (v9 && !*(void *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<std::string>>>::push_back(v4, (long long *)(v6 + v7));
          uint64_t v6 = *(void *)a1[1].__opaque;
          uint64_t v5 = *(void *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(void *)a1[2].__opaque) {
      goto LABEL_14;
    }
  }
  pthread_mutex_lock(a1);
  uint64_t v10 = *(void *)a1[2].__opaque;
  if (v10)
  {
    long long v11 = *(_OWORD *)(*(void *)(*(void *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((void *)&v11 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  uint64_t result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_14:
    atomic_ullong v13 = operator new(0x30uLL);
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = 0;
    *atomic_ullong v13 = &unk_26D76BF48;
    v13[4] = 0;
    v13[5] = 0;
    *(void *)a2 = v13 + 3;
    *(void *)(a2 + 8) = v13;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(void *)&a1[1].__opaque[8] - *(void *)a1[1].__opaque) >> 4)) {
      std::vector<std::shared_ptr<std::vector<std::string>>>::push_back[abi:ne180100]((uint64_t *)a1[1].__opaque, (long long *)a2);
    }
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_2240B2F54(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  if (*(void *)(v2 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v2 + 8));
  }
  _Unwind_Resume(a1);
}

BOOL turi::v2_block_impl::block_manager::read_block<std::string>(uint64_t a1, long long *a2, uint64_t *a3, void *a4)
{
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  turi::v2_block_impl::block_manager::read_block(a1, (unint64_t *)&v11, a4, &v13);
  unint64_t v6 = v13.n128_u64[0];
  if (v13.n128_u64[0])
  {
    uint64_t v7 = *(void *)v13.n128_u64[0];
    uint64_t v8 = *(void *)(v13.n128_u64[0] + 8) - *(void *)v13.n128_u64[0];
    v10[0] = 0;
    v10[1] = 0;
    v10[2] = v7;
    v10[3] = 0;
    v10[4] = v8;
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)v10, a3);
  }
  turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)(a1 + 232), &v13);
  if (v13.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13.n128_u64[1]);
  }
  return v6 != 0;
}

void sub_2240B3060(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_format_reader_v2<std::string>::try_evict_something_from_cache(turi::random *a1)
{
  uint64_t v2 = (uint64_t)(*((void *)a1 + 43) - *((void *)a1 + 42)) >> 3;
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * v2 - 1;
  if (0xD37A6F4DE9BD37A7 * v2 != 1)
  {
    source = (char *)turi::random::get_source(a1);
    pthread_mutex_lock((pthread_mutex_t *)(source + 6288));
    unint64_t v3 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>((uint64_t *)source + 785, 0, v3);
    pthread_mutex_unlock((pthread_mutex_t *)(source + 6288));
  }
  unint64_t v5 = v3 >> 6;
  unint64_t v6 = (void *)*((void *)a1 + 38);
  unint64_t v7 = v6[v3 >> 6];
  if ((v7 >> v3)) {
    goto LABEL_4;
  }
  unint64_t v9 = v7 & ~(0xFFFFFFFFFFFFFFFFLL >> (v3 & 0x3F ^ 0x3F));
  if (v9)
  {
    unint64_t v3 = __clz(__rbit64(v9)) | v3 & 0xFFFFFFFFFFFFFFC0;
LABEL_15:
    if (v3 < *((void *)a1 + 39)) {
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v10 = v5 << 6;
    unint64_t v11 = v5 + 1;
    while (v11 < *((void *)a1 + 40))
    {
      unint64_t v12 = v6[v11];
      v10 += 64;
      ++v11;
      if (v12)
      {
        unint64_t v3 = __clz(__rbit64(v12)) + v10;
        goto LABEL_15;
      }
    }
  }
  if ((*v6 & 1) == 0)
  {
    unint64_t v13 = *v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v13)
    {
      unint64_t v3 = __clz(__rbit64(v13));
      goto LABEL_4;
    }
    unint64_t v14 = *((void *)a1 + 40);
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    unint64_t v15 = v14 - 1;
    long long v16 = v6 + 1;
    while (v15)
    {
      unint64_t v18 = *v16++;
      unint64_t v17 = v18;
      --v15;
      v13 -= 64;
      if (v18)
      {
        unint64_t v3 = __clz(__rbit64(v17)) - v13;
        goto LABEL_4;
      }
    }
  }
  unint64_t v3 = 0;
LABEL_4:
  uint64_t v19 = *((void *)a1 + 42) + 184 * v3;
  char v20 = 0;
  if (std::unique_lock<turi::simple_spinlock>::try_lock((uint64_t)&v19)) {
    turi::sarray_format_reader_v2<std::string>::release_cache(a1, v3);
  }
  if (v20)
  {
    uint64_t v8 = (unsigned char *)v19;
    __dmb(0xBu);
    unsigned char *v8 = 0;
  }
}

void sub_2240B3224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9, char a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<std::vector<std::string>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<std::vector<std::string>>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2240B3344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<std::vector<std::string>>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<std::string>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<std::vector<std::string>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2240B36C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<std::vector<std::string>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::vector<std::shared_ptr<std::vector<std::string>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<std::string>>>,std::reverse_iterator<std::shared_ptr<std::vector<std::string>>*>,std::reverse_iterator<std::shared_ptr<std::vector<std::string>>*>,std::reverse_iterator<std::shared_ptr<std::vector<std::string>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<std::string>>>,std::reverse_iterator<std::shared_ptr<std::vector<std::string>>*>,std::reverse_iterator<std::shared_ptr<std::vector<std::string>>*>,std::reverse_iterator<std::shared_ptr<std::vector<std::string>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<std::string>>>,std::reverse_iterator<std::shared_ptr<std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<std::string>>>,std::reverse_iterator<std::shared_ptr<std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec(uint64_t a1, uint64_t *a2)
{
  std::vector<std::string>::size_type __sz = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    std::vector<std::string>::size_type __sz = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  std::vector<std::string>::__clear[abi:ne180100](a2);
  std::vector<std::string>::resize((std::vector<std::string> *)a2, __sz);
  if (__sz)
  {
    uint64_t v6 = 0;
    for (std::vector<std::string>::size_type i = 0; i < __sz; ++i)
    {
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec(a1, (std::string *)(*a2 + v6));
      v6 += 24;
    }
  }
}

void turi::buffer_pool<std::vector<std::string>>::release_buffer(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    std::vector<std::string>::__clear[abi:ne180100](*(uint64_t **)a2);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)a2 + 16) - **(void **)a2) >> 3) >= 0x100000) {
      std::vector<std::string>::shrink_to_fit(*(std::vector<std::string> **)a2);
    }
    if ((unint64_t)(*(void *)(a1 + 136) + ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4)) < *(void *)(a1 + 64))
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      std::deque<std::shared_ptr<std::vector<std::string>>>::push_back((void *)(a1 + 96), (__n128 *)a2);
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_2240B3A78(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::shared_ptr<std::vector<std::string>>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<std::string>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::vector<turi::sarray_reader_buffer<std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_reader_buffer<std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 96 * a2;
    while (v3 != v7)
    {
      v3 -= 96;
      std::allocator<turi::sarray_reader_buffer<std::string>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<turi::sarray_reader_buffer<std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      size_t v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v15 = v12;
    uint64_t v16 = &v12[96 * v8];
    uint64_t v18 = &v12[96 * v11];
    size_t v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<turi::sarray_reader_buffer<std::string>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer(&v15);
  }
}

void sub_2240B3D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 96) = 0;
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      long long v8 = *(_OWORD *)(a3 - 96);
      a3 -= 96;
      *(_OWORD *)(v7 - 96) = v8;
      *(void *)(v7 - 80) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 24);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      long long v9 = *(_OWORD *)(a3 + 56);
      long long v10 = *(_OWORD *)(a3 + 72);
      uint64_t v11 = *(void *)(a3 + 88);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 40) = v9;
      uint64_t v7 = *((void *)&v17 + 1) - 96;
      *((void *)&v17 + 1) -= 96;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<std::string>>,std::reverse_iterator<turi::sarray_reader_buffer<std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::sarray_reader_buffer<std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void std::allocator<turi::sarray_reader_buffer<std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)a2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::sarray_reader_buffer<std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<turi::sarray_reader_buffer<std::string>>::destroy[abi:ne180100](v4, i - 96);
  }
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<std::string> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<std::string> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<turi::sarray_reader_buffer<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<turi::sarray_reader_buffer<std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<turi::sarray_reader_buffer<std::string>>::__push_back_slow_path<turi::sarray_reader_buffer<std::string>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = &v10[96 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[96 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  long long v12 = *(_OWORD *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 88);
  long long v14 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = v14;
  *((void *)v11 + 11) = v13;
  *(_OWORD *)(v11 + 72) = v12;
  v17[2] = v11 + 96;
  std::vector<turi::sarray_reader_buffer<std::string>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer(v17);
  return v15;
}

void sub_2240B41F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader_buffer<std::string>::sarray_reader_buffer(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  turi::sarray_reader_buffer<std::string>::init((uint64_t *)a1, a2, a3, a4, a5);
  return a1;
}

void sub_2240B424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v12 = *(std::__shared_weak_count **)(v10 + 32);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::sarray_reader_buffer<std::string>::init(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a1[4];
  a1[3] = v9;
  a1[4] = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    uint64_t v9 = a1[3];
  }
  a1[5] = v9;
  a1[6] = 0;
  a1[11] = a3;
  a1[7] = a3;
  a1[8] = a3;
  unint64_t v12 = turi::sarray_reader<std::string>::size(v9);
  if (v12 >= a4) {
    unint64_t v13 = a4;
  }
  else {
    unint64_t v13 = v12;
  }
  a1[9] = v13;
  a1[10] = a5;
  std::vector<std::string>::__clear[abi:ne180100](a1);
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<std::pair<turi::flexible_type,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::pair<turi::flexible_type,unsigned long>::~pair(v4 - 24);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<std::pair<turi::flexible_type,unsigned long>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 24) = 0;
      *(_DWORD *)(v6 - 16) = 0;
      *(unsigned char *)(v6 - 12) = 0;
      uint64_t v7 = *(void *)(v2 + v5 - 24);
      *(void *)(v6 - 19) = *(void *)(v2 + v5 - 19);
      *(void *)(v6 - 24) = v7;
      *(unsigned char *)(v6 - 12) = *(unsigned char *)(v2 + v5 - 12);
      *(unsigned char *)(v2 + v5 - 12) = 0;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<turi::flexible_type,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::pair<turi::flexible_type,unsigned long>::~pair(i - 24);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2240B46C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type,unsigned long>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint8x8_t v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v18 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v18 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            float v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            BOOL v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            unint64_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
  }
  *(void *)(a1 + 16) = a2[2];
  return a1;
}

uint64_t *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(a1, a2);
  if (result)
  {
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void **std::vector<turi::flexible_type>::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint8x8_t v4 = (void **)a2;
  unint64_t v6 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v13 = *a1;
    unint64_t v14 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v14 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (a2 - v13) >> 4;
    uint64_t v16 = v8 - v13;
    uint64_t v17 = v16 >> 3;
    if (v16 >> 3 <= v14) {
      uint64_t v17 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v32 = v7;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v28 = v19;
    uint64_t v29 = &v19[16 * v15];
    long long v30 = v29;
    long long v31 = &v19[16 * v18];
    std::__split_buffer<turi::flexible_type>::push_back(&v28, (uint64_t *)a3);
    uint8x8_t v4 = (void **)std::vector<turi::flexible_type>::__swap_out_circular_buffer((uint64_t)a1, &v28, (uint64_t *)v4);
    std::__split_buffer<turi::flexible_type>::~__split_buffer(&v28);
  }
  else if (a2 == v6)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 0;
    uint64_t v20 = *(void *)a3;
    *(void *)(a2 + 5) = *(void *)(a3 + 5);
    *(void *)a2 = v20;
    *(unsigned char *)(a2 + 12) = *(unsigned char *)(a3 + 12);
    *(unsigned char *)(a3 + 12) = 0;
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<turi::flexible_type>::__move_range((uint64_t)a1, (atomic_ullong **)a2, v6, a2 + 16);
    if (v4 == (void **)a3)
    {
      return (void **)a3;
    }
    else
    {
      switch(*((unsigned char *)v4 + 12))
      {
        case 2:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v10 = (uint64_t)*v4;
            if (!*v4) {
              goto LABEL_41;
            }
            if (*(char *)(v10 + 31) < 0) {
              operator delete(*(void **)(v10 + 8));
            }
            unsigned int v11 = (void *)v10;
            uint64_t v12 = 0x1012C404EF22A49;
            goto LABEL_40;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v21 = (uint64_t)*v4;
            if (!*v4) {
              goto LABEL_41;
            }
            unint64_t v22 = *(void **)(v21 + 8);
            if (v22)
            {
              *(void *)(v21 + 16) = v22;
              operator delete(v22);
            }
            unsigned int v11 = (void *)v21;
            uint64_t v12 = 0x1080C409938AC02;
            goto LABEL_40;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v23 = (uint64_t)*v4;
            if (!*v4) {
              goto LABEL_41;
            }
            uint64_t v28 = (void *)(v23 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
            goto LABEL_32;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v23 = (uint64_t)*v4;
            if (!*v4) {
              goto LABEL_41;
            }
            uint64_t v28 = (void *)(v23 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
LABEL_32:
            unsigned int v11 = (void *)v23;
            uint64_t v12 = 0x1020C405E66F15BLL;
            goto LABEL_40;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v24 = (uint64_t)*v4;
            if (!*v4) {
              goto LABEL_41;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(v24 + 16));
            unsigned int v11 = (void *)v24;
            unsigned int v25 = -235920773;
            goto LABEL_39;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*v4)
            {
              unsigned int v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v4);
              unsigned int v25 = 2071181815;
LABEL_39:
              uint64_t v12 = v25 | 0x1030C4000000000;
LABEL_40:
              MEMORY[0x22A614FA0](v11, v12);
            }
LABEL_41:
            *uint8x8_t v4 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v26 = *(void *)a3;
      *(void **)((char *)v4 + 5) = *(void **)(a3 + 5);
      *uint8x8_t v4 = (void *)v26;
      *((unsigned char *)v4 + 12) = *(unsigned char *)(a3 + 12);
      *(unsigned char *)(a3 + 12) = 0;
    }
  }
  return v4;
}

void sub_2240B4D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<turi::flexible_type>::push_back(void *result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[3])
  {
    unint64_t v5 = (uint64_t *)result[1];
    uint64_t v6 = (uint64_t)v5 - *result;
    if ((unint64_t)v5 <= *result)
    {
      if (v4 == *result) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = (v4 - *result) >> 3;
      }
      uint64_t v14 = result[4];
      uint64_t v29 = v3[4];
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v14, v13);
      uint64_t v17 = &v15[16 * (v13 >> 2)];
      unint64_t v18 = v3[1];
      unint64_t v19 = v3[2] - v18;
      if (v19)
      {
        uint64_t v20 = &v17[v19];
        uint64_t v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(void *)uint64_t v21 = 0;
          *((_DWORD *)v21 + 2) = 0;
          v21[12] = 0;
          uint64_t v22 = *(void *)v18;
          *(void *)(v21 + 5) = *(void *)(v18 + 5);
          *(void *)uint64_t v21 = v22;
          v21[12] = *(unsigned char *)(v18 + 12);
          *(unsigned char *)(v18 + 12) = 0;
          v21 += 16;
          v18 += 16;
        }
        while (v21 != v20);
        int64x2_t v23 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64(v18);
        uint64_t v20 = &v15[16 * (v13 >> 2)];
      }
      uint64_t v26 = (void *)*v3;
      *unint64_t v3 = v15;
      v3[1] = v17;
      int64x2_t v27 = v23;
      uint64_t v24 = v3[3];
      v3[2] = v20;
      v3[3] = &v15[16 * v16];
      uint64_t v28 = v24;
      uint64_t result = std::__split_buffer<turi::flexible_type>::~__split_buffer(&v26);
      uint64_t v4 = v3[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      uint64_t result = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)&v26, v5, (uint64_t *)v4, (uint64_t)&v5[-2 * (v10 >> 1)]);
      uint64_t v4 = v12;
      v3[1] -= 16 * v11;
      v3[2] = v12;
    }
  }
  *(void *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 12) = 0;
  uint64_t v25 = *a2;
  *(void *)(v4 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)uint64_t v4 = v25;
  *(unsigned char *)(v4 + 12) = *((unsigned char *)a2 + 12);
  *((unsigned char *)a2 + 12) = 0;
  v3[2] += 16;
  return result;
}

void OUTLINED_FUNCTION_10_3(void **a1@<X8>, uint64_t a2, void **a3)
{
  a3 = a1;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a3);
}

BOOL turi::sframe::contains_column(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "contains_column", 419, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    BOOL v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  return std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a1 + 40), *(void *)(a1 + 48), a2) != *(void *)(a1 + 48);
}

void sub_2240B5084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

_OWORD *turi::groupby_aggregate_impl::groupby_element::groupby_element(_OWORD *a1, long long *a2, uint64_t *a3)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  turi::groupby_aggregate_impl::groupby_element::init((uint64_t)a1, (uint64_t)&v5, a3);
  uint64_t v7 = (void **)&v5;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v7);
  return a1;
}

void sub_2240B5108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = v12 + 3;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = v12;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_aggregate_impl::groupby_element::init(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::resize((uint64_t *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  uint64_t v6 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 24;
    do
    {
      uint64_t v9 = *(void *)(a1 + 24);
      uint64_t v10 = (***(uint64_t (****)(void))(v6 + v8))(*(void *)(v6 + v8));
      uint64_t v11 = *(void *)(v9 + 8 * v7);
      *(void *)(v9 + 8 * v7) = v10;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 96))(v11);
      }
      ++v7;
      uint64_t v6 = *a3;
      v8 += 40;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  }
  uint64_t result = turi::groupby_aggregate_impl::groupby_element::hash_key((uint64_t *)a1);
  *(void *)(a1 + 48) = result;
  return result;
}

uint64_t turi::groupby_aggregate_impl::groupby_element::groupby_element(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) == 0) {
    long long v5 = a2;
  }
  else {
    long long v5 = (uint64_t *)*a2;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  v7[0] = 0;
  v7[1] = 0;
  v7[2] = v5;
  v7[3] = 0;
  v7[4] = v4;
  turi::groupby_aggregate_impl::groupby_element::load((uint64_t *)a1, (turi::iarchive *)v7, a3);
  return a1;
}

void sub_2240B52C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = v10 + 3;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_aggregate_impl::groupby_element::load(uint64_t *a1, turi::iarchive *a2, void *a3)
{
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, a1);
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::resize(a1 + 3, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 3));
  uint64_t v6 = a1[3];
  if (a1[4] != v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 24;
    do
    {
      uint64_t v9 = (***(uint64_t (****)(void))(*a3 + v8))(*(void *)(*a3 + v8));
      uint64_t v10 = *(void *)(v6 + 8 * v7);
      *(void *)(v6 + 8 * v7) = v9;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 96))(v10);
      }
      uint64_t v11 = *(void *)(a1[3] + 8 * v7);
      (*(void (**)(uint64_t, turi::iarchive *))(*(void *)v11 + 80))(v11, a2);
      ++v7;
      uint64_t v6 = a1[3];
      v8 += 40;
    }
    while (v7 < (a1[4] - v6) >> 3);
  }
  uint64_t result = turi::groupby_aggregate_impl::groupby_element::hash_key(a1);
  a1[6] = result;
  return result;
}

void std::vector<std::unique_ptr<turi::group_aggregate_value>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        *uint64_t v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 96))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__append(a1, v5);
  }
}

uint64_t turi::groupby_aggregate_impl::groupby_element::save(turi::groupby_aggregate_impl::groupby_element *this, turi::oarchive *a2)
{
  uint64_t result = turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this);
  uint64_t v5 = *((void *)this + 3);
  if (*((void *)this + 4) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, turi::oarchive *))(**(void **)(v5 + 8 * v6) + 72))(*(void *)(v5 + 8 * v6), a2);
      ++v6;
      uint64_t v5 = *((void *)this + 3);
    }
    while (v6 < (*((void *)this + 4) - v5) >> 3);
  }
  return result;
}

uint64_t turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(uint64_t *a1, void *a2, __n128 a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if ((unint64_t)(v4 - *a1) < a2[1] - *a2) {
    return 1;
  }
  if (v4 != v3)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = v3 + 16 * v8;
      uint64_t v10 = (char *)(*a2 + 16 * v8);
      int v11 = v10[12];
      if (*(char *)(v9 + 12) < v11) {
        return 1;
      }
      unsigned int v12 = *(unsigned __int8 *)(v9 + 12);
      if ((char)v12 > (char)v11) {
        return 0;
      }
      BOOL v13 = v12 == 7 && v10[12] == 7;
      if (!v13)
      {
        switch(v10[12])
        {
          case 0:
            switch(*(unsigned char *)(v9 + 12))
            {
              case 0:
                if (*(void *)v9 < *(void *)v10) {
                  return 1;
                }
                goto LABEL_54;
              case 1:
                a3.n128_u64[0] = *(void *)v9;
                double v39 = (double)*(uint64_t *)v10;
                goto LABEL_104;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_53;
              case 6:
                if (*(void *)v10 > (uint64_t)(*(void *)v9 << 8) >> 8) {
                  return 1;
                }
                goto LABEL_54;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 1:
            switch(*(unsigned char *)(v9 + 12))
            {
              case 0:
                a3.n128_u64[0] = *(void *)v10;
                if (*(double *)v10 > (double)*(uint64_t *)v9) {
                  return 1;
                }
                goto LABEL_54;
              case 1:
                a3.n128_u64[0] = *(void *)v9;
                double v39 = *(double *)v10;
                goto LABEL_104;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_53;
              case 6:
                double v39 = *(double *)v10;
                a3.n128_f64[0] = (double)*(int *)(v9 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v9 << 8) >> 8);
LABEL_104:
                if (a3.n128_f64[0] < v39) {
                  return 1;
                }
                goto LABEL_54;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 2:
            if (v12 - 3 < 7 || v12 < 2) {
              goto LABEL_53;
            }
            if (v12 != 2) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if ((std::string::compare[abi:ne180100]((const void **)(*(void *)v9 + 8), (unsigned char *)(*(void *)v10 + 8)) & 0x80000000) != 0)return 1; {
            goto LABEL_54;
            }
          case 3:
            if (v12 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v12 != 3) {
              goto LABEL_53;
            }
            uint64_t v15 = *(unint64_t **)(*(void *)v9 + 8);
            uint64_t v16 = *(void *)(*(void *)v9 + 16);
            uint64_t v18 = *(void *)v10 + 8;
            uint64_t v17 = *(double **)v18;
            unint64_t v19 = (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3;
            uint64_t v20 = v16 - (void)v15;
            BOOL v13 = v20 == 0;
            unint64_t v21 = v20 >> 3;
            if (v13) {
              goto LABEL_43;
            }
            if (v21 <= 1) {
              uint64_t v22 = 1;
            }
            else {
              uint64_t v22 = v21;
            }
            unint64_t v23 = v19;
            break;
          case 4:
            if (v12 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v12 != 4) {
              goto LABEL_53;
            }
            if (turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v43, (uint64_t *)(*(void *)v9 + 8), (void *)(*(void *)v10 + 8)))
            {
              return 1;
            }
            goto LABEL_54;
          case 5:
            if (v12 >= 0xA) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            goto LABEL_53;
          case 6:
            switch(*(unsigned char *)(v9 + 12))
            {
              case 0:
                if (*(void *)v9 < (uint64_t)(*(void *)v10 << 8) >> 8) {
                  return 1;
                }
                goto LABEL_54;
              case 1:
                a3.n128_u64[0] = *(void *)v9;
                if ((double)*((int *)v10 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v10 << 8) >> 8) > *(double *)v9) {
                  return 1;
                }
                goto LABEL_54;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_53;
              case 6:
                uint64_t v40 = (uint64_t)(*(void *)v9 << 8) >> 8;
                if (v40 < (uint64_t)(*(void *)v10 << 8) >> 8
                  || v40 == (uint64_t)(*(void *)v10 << 8) >> 8 && *(_DWORD *)(v9 + 8) < *((_DWORD *)v10 + 2))
                {
                  return 1;
                }
                goto LABEL_54;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 7:
            if (v12 >= 0xA) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            goto LABEL_53;
          case 8:
            if (v12 >= 0xA) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            goto LABEL_53;
          case 9:
            if (v12 >= 0xA) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
LABEL_53:
            turi::flexible_type_fail(0);
            goto LABEL_54;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        while (v23)
        {
          a3.n128_u64[0] = *v15;
          if (*(double *)v15 > *v17) {
            break;
          }
          if (*(double *)v15 < *v17) {
            return 1;
          }
          --v23;
          ++v17;
          ++v15;
          if (!--v22)
          {
LABEL_43:
            if (v21 < v19) {
              return 1;
            }
            break;
          }
        }
LABEL_54:
        uint64_t v24 = *a2 + 16 * v8;
        uint64_t v25 = *a1 + 16 * v8;
        switch(*(unsigned char *)(v24 + 12))
        {
          case 0:
            switch(*(unsigned char *)(v25 + 12))
            {
              case 0:
                if (*(void *)v25 > *(void *)v24) {
                  return 0;
                }
                goto LABEL_97;
              case 1:
                a3.n128_u64[0] = *(void *)v25;
                double v41 = (double)*(uint64_t *)v24;
                goto LABEL_117;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_96;
              case 6:
                if (*(void *)v24 < (uint64_t)(*(void *)v25 << 8) >> 8) {
                  return 0;
                }
                goto LABEL_97;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 1:
            switch(*(unsigned char *)(v25 + 12))
            {
              case 0:
                a3.n128_u64[0] = *(void *)v24;
                if (*(double *)v24 < (double)*(uint64_t *)v25) {
                  return 0;
                }
                goto LABEL_97;
              case 1:
                a3.n128_u64[0] = *(void *)v25;
                double v41 = *(double *)v24;
                goto LABEL_117;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_96;
              case 6:
                double v41 = *(double *)v24;
                a3.n128_f64[0] = (double)*(int *)(v25 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v25 << 8) >> 8);
LABEL_117:
                if (a3.n128_f64[0] > v41) {
                  return 0;
                }
                goto LABEL_97;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 2:
            unsigned int v26 = *(unsigned __int8 *)(v25 + 12);
            if (v26 - 3 < 7 || v26 < 2) {
              goto LABEL_96;
            }
            if (v26 != 2) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)v24 + 8), (void *)(*(void *)v25 + 8)))
            {
              return 0;
            }
            goto LABEL_97;
          case 3:
            unsigned int v28 = *(unsigned __int8 *)(v25 + 12);
            if (v28 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v28 != 3) {
              goto LABEL_96;
            }
            double v29 = *(double *)v24;
            long long v30 = *(unint64_t **)(*(void *)v25 + 8);
            uint64_t v31 = *(void *)(*(void *)v25 + 16);
            uint64_t v32 = *(double **)(*(void *)&v29 + 8);
            unint64_t v33 = (uint64_t)(*(void *)(*(void *)&v29 + 16) - (void)v32) >> 3;
            uint64_t v34 = v31 - (void)v30;
            BOOL v13 = v34 == 0;
            unint64_t v35 = v34 >> 3;
            if (v13) {
              goto LABEL_80;
            }
            if (v35 <= 1) {
              uint64_t v36 = 1;
            }
            else {
              uint64_t v36 = v35;
            }
            unint64_t v37 = v33;
            break;
          case 4:
            unsigned int v38 = *(unsigned __int8 *)(v25 + 12);
            if (v38 > 9) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            if (v38 != 4) {
              goto LABEL_96;
            }
            if (turi::flexible_type_impl::gt_operator::operator()(a3, (uint64_t)&v44, (uint64_t *)(*(void *)v25 + 8), (void *)(*(void *)v24 + 8)))
            {
              return 0;
            }
            goto LABEL_97;
          case 5:
            if (*(unsigned __int8 *)(v25 + 12) >= 0xAu) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            goto LABEL_96;
          case 6:
            switch(*(unsigned char *)(v25 + 12))
            {
              case 0:
                if (*(void *)v25 > (uint64_t)(*(void *)v24 << 8) >> 8) {
                  return 0;
                }
                goto LABEL_97;
              case 1:
                a3.n128_u64[0] = *(void *)v25;
                if ((double)*(int *)(v24 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v24 << 8) >> 8) < *(double *)v25) {
                  return 0;
                }
                goto LABEL_97;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_96;
              case 6:
                uint64_t v42 = (uint64_t)(*(void *)v25 << 8) >> 8;
                if (v42 > (uint64_t)(*(void *)v24 << 8) >> 8
                  || v42 == (uint64_t)(*(void *)v24 << 8) >> 8 && *(_DWORD *)(v25 + 8) > *(_DWORD *)(v24 + 8))
                {
                  return 0;
                }
                goto LABEL_97;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 7:
            if (*(unsigned __int8 *)(v25 + 12) >= 0xAu) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            goto LABEL_96;
          case 8:
            if (*(unsigned __int8 *)(v25 + 12) >= 0xAu) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            goto LABEL_96;
          case 9:
            if (*(unsigned __int8 *)(v25 + 12) >= 0xAu) {
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
LABEL_96:
            turi::flexible_type_fail(0);
            goto LABEL_97;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        while (v37)
        {
          a3.n128_u64[0] = *v30;
          if (*(double *)v30 > *v32) {
            break;
          }
          if (*(double *)v30 < *v32) {
            goto LABEL_97;
          }
          --v37;
          ++v30;
          ++v32;
          if (!--v36)
          {
LABEL_80:
            if (v35 <= v33) {
              goto LABEL_97;
            }
            return 0;
          }
        }
        return 0;
      }
LABEL_97:
      ++v8;
      uint64_t v3 = *a1;
      if (v8 >= (a1[1] - *a1) >> 4) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t turi::groupby_aggregate_impl::flexible_type_vector_equality<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = (unsigned __int8 *)(v2 + 16 * v6);
    int v8 = v7[12];
    uint64_t v9 = *a2 + 16 * v6;
    if (v8 != *(unsigned __int8 *)(v9 + 12)) {
      return 0;
    }
    if (v8 != 7) {
      break;
    }
LABEL_6:
    ++v6;
    uint64_t v2 = *a1;
    if (v6 >= (a1[1] - *a1) >> 4) {
      return 1;
    }
  }
  switch(v7[12])
  {
    case 0u:
      if (*(void *)v7 != *(void *)v9) {
        return 0;
      }
      goto LABEL_6;
    case 1u:
      if (*(double *)v7 != *(double *)v9) {
        return 0;
      }
      goto LABEL_6;
    case 2u:
      uint64_t v10 = *(void *)v7;
      int v11 = *(char *)(*(void *)v7 + 31);
      size_t v12 = *(unsigned __int8 *)(*(void *)v7 + 31);
      if (v11 < 0) {
        size_t v13 = *(void *)(v10 + 16);
      }
      else {
        size_t v13 = v12;
      }
      uint64_t v64 = *(void *)v9;
      if (*(char *)(v64 + 31) < 0) {
        uint64_t v65 = *(void *)(v64 + 16);
      }
      else {
        uint64_t v65 = *(unsigned __int8 *)(v64 + 31);
      }
      if (v13 != v65) {
        return 0;
      }
      v66 = (unsigned __int8 *)(v10 + 8);
      if ((v12 & 0x80) != 0) {
        v66 = *(unsigned __int8 **)v66;
      }
      uint64_t v67 = (unsigned __int8 *)(v64 + 8);
      if ((*(unsigned char *)(v64 + 31) & 0x80) == 0)
      {
        if ((v12 & 0x80) == 0) {
          goto LABEL_75;
        }
        goto LABEL_80;
      }
      uint64_t v67 = *(unsigned __int8 **)v67;
      if ((v12 & 0x80) != 0)
      {
LABEL_80:
        if (memcmp(v66, v67, v13)) {
          return 0;
        }
        goto LABEL_6;
      }
LABEL_75:
      if (!v13) {
        goto LABEL_6;
      }
      while (*v66 == *v67)
      {
        ++v66;
        ++v67;
        if (!--v13) {
          goto LABEL_6;
        }
      }
      return 0;
    case 3u:
      uint64_t v14 = *(void *)v9;
      uint64_t v17 = *(void *)v7 + 8;
      uint64_t v15 = *(double **)v17;
      uint64_t v16 = *(double **)(v17 + 8);
      unint64_t v18 = ((uint64_t)v16 - *(void *)v17) >> 3;
      uint64_t v20 = v14 + 8;
      unint64_t v19 = *(double **)(v14 + 8);
      if (v18 != (uint64_t)(*(void *)(v20 + 8) - (void)v19) >> 3) {
        return 0;
      }
      if (v16 != v15)
      {
        uint64_t v21 = v18 <= 1 ? 1 : v16 - v15;
        if (*v15 != *v19) {
          return 0;
        }
        uint64_t v22 = 1;
        do
        {
          unint64_t v23 = v22;
          if (v21 == v22) {
            break;
          }
          double v24 = v15[v22];
          double v25 = v19[v22++];
        }
        while (v24 == v25);
        if (v23 < v18) {
          return 0;
        }
      }
      goto LABEL_6;
    case 4u:
      if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v69, (uint64_t *)(*(void *)v7 + 8), (void *)(*(void *)v9 + 8)) & 1) == 0)return 0; {
      goto LABEL_6;
      }
    case 5u:
      if (!turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v69, (uint64_t **)(*(void *)v7 + 8), (uint64_t **)(*(void *)v9 + 8)))return 0; {
      goto LABEL_6;
      }
    case 6u:
      if (((*(void *)v9 ^ *(void *)v7) & 0xFFFFFFFFFFFFFFLL) != 0 || *((_DWORD *)v7 + 2) != *(_DWORD *)(v9 + 8)) {
        return 0;
      }
      goto LABEL_6;
    case 8u:
      if (!turi::image_type::operator==(*(void *)v7 + 8, *(void *)v9 + 8)) {
        return 0;
      }
      goto LABEL_6;
    case 9u:
      uint64_t v26 = *(void *)v9;
      int64x2_t v27 = *(void **)v7;
      if (*(void *)v9 == *(void *)v7) {
        goto LABEL_6;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v27 + 1), v26 + 8)) {
        return 0;
      }
      double v29 = (char *)v27[3];
      unsigned int v28 = (char *)v27[4];
      uint64_t v30 = v28 - v29;
      if (v28 == v29) {
        goto LABEL_6;
      }
      if (!v27[1]) {
        goto LABEL_6;
      }
      uint64_t v31 = 1;
      do
      {
        uint64_t v32 = *(void *)v29;
        v29 += 8;
        v31 *= v32;
      }
      while (v29 != v28);
      if (!v31) {
        goto LABEL_6;
      }
      uint64_t v70 = 0;
      std::vector<unsigned long>::vector(&v71, v30 >> 3, &v70);
      unint64_t v33 = v71;
      uint64_t v34 = v72;
      uint64_t v35 = **(void **)(v26 + 8);
      uint64_t v36 = (char *)v72 - (char *)v71;
      unint64_t v37 = v72 - v71;
      unint64_t v38 = v37 - 1;
      if (v37 <= 1) {
        uint64_t v39 = 1;
      }
      else {
        uint64_t v39 = v72 - v71;
      }
      do
      {
        if (v34 == v33)
        {
          uint64_t v47 = 0;
          double v48 = *(double *)(*(void *)v27[1] + 8 * v27[9]);
        }
        else
        {
          uint64_t v40 = 0;
          double v41 = (uint64_t *)v27[6];
          uint64_t v42 = v33;
          uint64_t v43 = v39;
          do
          {
            uint64_t v45 = *v42++;
            uint64_t v44 = v45;
            uint64_t v46 = *v41++;
            v40 += v46 * v44;
            --v43;
          }
          while (v43);
          uint64_t v47 = 0;
          double v48 = *(double *)(*(void *)v27[1] + 8 * (v27[9] + v40));
          uint64_t v49 = *(uint64_t **)(v26 + 48);
          uint64_t v50 = v33;
          uint64_t v51 = v39;
          do
          {
            uint64_t v53 = *v50++;
            uint64_t v52 = v53;
            uint64_t v54 = *v49++;
            v47 += v54 * v52;
            --v51;
          }
          while (v51);
        }
        double v55 = *(double *)(v35 + 8 * (*(void *)(v26 + 72) + v47));
        if (v48 != v55) {
          break;
        }
        uint64_t v56 = v37;
        unint64_t v57 = v37 - 1;
        if (v36 < 1) {
          goto LABEL_56;
        }
        uint64_t v58 = v27[3];
        unint64_t v59 = v33[v38] + 1;
        v33[v38] = v59;
        unint64_t v60 = (v36 & 0xFFFFFFFFFFFFFFF8) - 16;
        uint64_t v61 = v37 - 1;
        if (v59 < *(void *)(v58 + 8 * v38))
        {
          uint64_t v56 = 1;
          unint64_t v57 = v37 - 1;
LABEL_56:
          if ((v57 & 0x8000000000000000) != 0) {
            break;
          }
          continue;
        }
        do
        {
          *(uint64_t *)((char *)v33 + v60 + 8) = 0;
          if (v61 <= 0)
          {
            v72 = v33;
            operator delete(v33);
            goto LABEL_6;
          }
          --v61;
          unint64_t v62 = *(uint64_t *)((char *)v33 + v60) + 1;
          *(uint64_t *)((char *)v33 + v60) = v62;
          unint64_t v63 = *(void *)(v58 + v60);
          v60 -= 8;
        }
        while (v62 >= v63);
        uint64_t v56 = 1;
        if (v61 < 0) {
          break;
        }
      }
      while (v56);
      if (v33)
      {
        v72 = v33;
        operator delete(v33);
      }
      if (v48 != v55) {
        return 0;
      }
      goto LABEL_6;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

uint64_t turi::groupby_aggregate_impl::groupby_element::hash_key(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1] == *a1) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    unint64_t v6 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(v1 + v3));
    uint64_t v7 = 5
       * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v5) | ((0x87C37B91114253D5 * v5) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
    uint64_t v5 = (5
        * (__ROR8__((0x87C37B91114253D5 * ((0x93A2C9BF80000000 * v6) | ((0x4CF5AD432745937FLL * v6) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v7)+ 944331445) ^ v7;
    ++v4;
    uint64_t v1 = *a1;
    v3 += 16;
  }
  while (v4 < (a1[1] - *a1) >> 4);
  return v5;
}

uint64_t turi::groupby_aggregate_impl::groupby_element::hash_key(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    unint64_t v6 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(**(void **)(**(void **)a1 + v4) + 16 * *(void *)(a1 + 8)));
    uint64_t v7 = 5
       * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v5) | ((0x87C37B91114253D5 * v5) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
    uint64_t v5 = (5
        * (__ROR8__((0x87C37B91114253D5 * ((0x93A2C9BF80000000 * v6) | ((0x4CF5AD432745937FLL * v6) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v7)+ 944331445) ^ v7;
    v4 += 16;
    --v2;
  }
  while (v2);
  return v5;
}

void turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set(turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set *this)
{
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__destroy_vector::operator()[abi:ne180100](&v1);
}

turi::groupby_aggregate_impl::group_aggregate_container *turi::groupby_aggregate_impl::group_aggregate_container::group_aggregate_container(turi::groupby_aggregate_impl::group_aggregate_container *this, uint64_t a2, unint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 6) = 0;
  uint64_t v5 = (void *)((char *)this + 48);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((unsigned char *)this + 76) = 0;
  turi::sarray<std::string>::sarray((uint64_t)this + 80);
  std::vector<turi::mutex>::vector((void *)this + 45, a3);
  unint64_t v6 = (turi::fs_util *)std::vector<std::vector<unsigned long>>::vector((void *)this + 48, a3);
  *((void *)this + 51) = 0;
  if (!a3) {
    turi::groupby_aggregate_impl::group_aggregate_container::group_aggregate_container(unsigned long,unsigned long)::$_0::operator()();
  }
  int file_handle_limit = turi::fs_util::get_file_handle_limit(v6);
  int v8 = (cppipc *)global_logger();
  unint64_t v9 = file_handle_limit / a3;
  if (*((int *)v8 + 169) <= 2)
  {
    if (cppipc::must_cancel(v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "group_aggregate_container", 242, 1);
    size_t v12 = pthread_getspecific(*((void *)started + 74));
    if (v12 && *((unsigned char *)v12 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"num_local_buffers: ", 19);
    }
    uint64_t v13 = file_logger::operator<<<unsigned long>((uint64_t)started);
    int v8 = (cppipc *)pthread_getspecific(*(void *)(v13 + 592));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*((void *)v8 + 2) - 24) + 16));
        uint64_t v14 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v13);
        if (*(_DWORD *)(v13 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (v9 < 2
    || ((uint64_t instance = (turi::thread_pool *)turi::thread_pool::get_instance(v8),
         unint64_t v16 = turi::thread_pool::size(instance),
         v16 >= v9 >> 1)
      ? (unint64_t v17 = v9 >> 1)
      : (unint64_t v17 = v16),
        v17))
  {
    unint64_t v19 = *((void *)this + 7);
    unint64_t v18 = *((void *)this + 8);
    if (v19 < v18) {
      turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t::sa_buffer_t(*((turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t **)this
    }
                                                                                        + 7));
    uint64_t v20 = (uint64_t)(v19 - *v5) >> 6;
    if (!((unint64_t)(v20 + 1) >> 58))
    {
      uint64_t v21 = v18 - *v5;
      uint64_t v22 = v21 >> 5;
      if (v21 >> 5 <= (unint64_t)(v20 + 1)) {
        uint64_t v22 = v20 + 1;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      uint64_t v31 = (char *)this + 64;
      if (v23) {
        double v24 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>((uint64_t)this + 64, v23);
      }
      else {
        double v24 = 0;
      }
      v27.__locale_ = v24;
      unsigned int v28 = (std::locale::__imp *)((char *)v24 + 64 * v20);
      double v29 = v28;
      uint64_t v30 = (char *)v24 + 64 * v23;
      turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t::sa_buffer_t(v28);
    }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  return this;
}

void sub_2240B6788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  uint64_t v15 = *(void *)(v12 + 408);
  *(void *)(v12 + 408) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a11 = a9;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  turi::sarray<std::string>::~sarray(a10);
  turi::simple_spinlock::~simple_spinlock(v13);
  std::vector<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a11 = v12;
  std::vector<turi::groupby_aggregate_impl::group_descriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_aggregate_container::define_group(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = 0;
  *(_OWORD *)__p = 0u;
  long long v12 = 0u;
  if (__p != (void **)a2) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)__p, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  uint64_t v6 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v13;
  *((void *)&v12 + 1) = v6;
  uint64_t v13 = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = (void *)a1[1];
  if ((unint64_t)v8 >= a1[2])
  {
    uint64_t v10 = std::vector<turi::groupby_aggregate_impl::group_descriptor>::__push_back_slow_path<turi::groupby_aggregate_impl::group_descriptor const&>(a1, (uint64_t)__p);
  }
  else
  {
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v8, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
    v8[3] = *((void *)&v12 + 1);
    unint64_t v9 = v13;
    v8[4] = v13;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (uint64_t)(v8 + 5);
    a1[1] = (uint64_t)(v8 + 5);
  }
  a1[1] = v10;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2240B6968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  turi::groupby_aggregate_impl::group_descriptor::~group_descriptor((turi::groupby_aggregate_impl::group_descriptor *)&a9);
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_descriptor::~group_descriptor(turi::groupby_aggregate_impl::group_descriptor *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void turi::groupby_aggregate_impl::group_aggregate_container::init_tls(turi::groupby_aggregate_impl::group_aggregate_container *this)
{
  assert_msg(*((void *)this + 4) != 0, "num_segments cannot be 0");
  uint64_t v2 = __tls_guard;
  if (!*(unsigned char *)__tls_guard(&__tls_guard))
  {
    *(unsigned char *)v2(&__tls_guard) = 1;
    long long v12 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *long long v12 = 0u;
    v12[1] = 0u;
    *((void *)v12 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v12);
  }
  uint64_t v3 = turi::groupby_aggregate_impl::group_aggregate_container::tss_;
  uint64_t v4 = turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
  assert_msg(*(unsigned char *)(v4 + 8) == 0, "double init is not allowed");
  if (!*(unsigned char *)v2(&__tls_guard))
  {
    *(unsigned char *)v2(&__tls_guard) = 1;
    uint64_t v13 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *uint64_t v13 = 0u;
    v13[1] = 0u;
    *((void *)v13 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v13);
  }
  std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::resize((void *)(v4 + 16), *((void *)this + 4));
  if (*((void *)this + 4))
  {
    unint64_t v5 = 0;
    int v7 = *(unsigned __int8 *)v2(&__tls_guard);
    uint64_t v8 = 64;
    do
    {
      if (!v7)
      {
        int v7 = 1;
        *(unsigned char *)((uint64_t (*)(uint64_t (**)(void), __n128))v2)(&__tls_guard, (__n128)0) = 1;
        uint64_t v9 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
        *uint64_t v9 = v10;
        v9[1] = v10;
        *((void *)v9 + 4) = 0;
        _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v9);
        unint64_t v6 = *((void *)this + 4);
      }
      *(void *)(*(void *)(v4 + 16) + v8) = v5++;
      v8 += 72;
    }
    while (v5 < v6);
  }
  do
  {
    while (*((unsigned char *)this + 76) == 1)
      ;
  }
  while (atomic_exchange((atomic_uchar *volatile)this + 76, 1u));
  uint64_t v11 = (*((_DWORD *)this + 10) + 1);
  *((_DWORD *)this + 10) = v11;
  if (!*(unsigned char *)v2(&__tls_guard))
  {
    *(unsigned char *)v2(&__tls_guard) = 1;
    uint64_t v14 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *uint64_t v14 = 0u;
    v14[1] = 0u;
    *((void *)v14 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v14);
  }
  *(void *)uint64_t v4 = v11;
  __dmb(0xBu);
  *((unsigned char *)this + 76) = 0;
  if (!*(unsigned char *)v2(&__tls_guard))
  {
    *(unsigned char *)v2(&__tls_guard) = 1;
    uint64_t v15 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *uint64_t v15 = 0u;
    v15[1] = 0u;
    *((void *)v15 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v15);
  }
  *(unsigned char *)(v4 + 8) = 1;
}

uint64_t *std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::resize(void *a1, unint64_t a2)
{
  uint64_t result = (uint64_t *)a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * (((uint64_t)result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (uint64_t *)std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 72 * a2;
    while (result != (uint64_t *)v7)
      uint64_t result = turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(result - 9);
    a1[1] = v7;
  }
  return result;
}

uint64_t *turi::groupby_aggregate_impl::group_aggregate_container::flush_tls(turi::groupby_aggregate_impl::group_aggregate_container *this)
{
  uint64_t v2 = __tls_guard;
  if (!*(unsigned char *)__tls_guard(&__tls_guard))
  {
    *(unsigned char *)v2(&__tls_guard) = 1;
    uint64_t v9 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *uint64_t v9 = 0u;
    v9[1] = 0u;
    *((void *)v9 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v9);
  }
  uint64_t v3 = turi::groupby_aggregate_impl::group_aggregate_container::tss_;
  uint64_t v4 = turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
  if (!*(unsigned char *)(v4 + 8)) {
    turi::groupby_aggregate_impl::group_aggregate_container::throw_if_not_initialized(void)const::{lambda(void)#1}::operator()();
  }
  uint64_t v5 = v4;
  if (*((void *)this + 4))
  {
    unint64_t v6 = 0;
    do
      turi::groupby_aggregate_impl::group_aggregate_container::flush_segment(this, v6++);
    while (v6 < *((void *)this + 4));
  }
  if (!*(unsigned char *)v2(&__tls_guard))
  {
    *(unsigned char *)v2(&__tls_guard) = 1;
    long long v10 = (_OWORD *)v3(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *long long v10 = 0u;
    v10[1] = 0u;
    *((void *)v10 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v10);
  }
  *(unsigned char *)(v5 + 8) = 0;
  uint64_t v8 = *(uint64_t **)(v5 + 16);
  for (uint64_t result = *(uint64_t **)(v5 + 24);
        result != v8;
  *(void *)(v5 + 24) = v8;
  return result;
}

uint64_t turi::groupby_aggregate_impl::group_aggregate_container::flush_segment(turi::groupby_aggregate_impl::group_aggregate_container *this, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "flush_segment", 370, 1);
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"flush buffer from task_id: ", 27);
    }
    if (!*(unsigned char *)__tls_guard(&__tls_guard))
    {
      *(unsigned char *)v7(&__tls_guard) = 1;
      unint64_t v16 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
      *unint64_t v16 = 0u;
      v16[1] = 0u;
      *((void *)v16 + 4) = 0;
      _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v16);
    }
    turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    uint64_t v8 = file_logger::operator<<<unsigned long>((uint64_t)started);
    uint64_t v9 = pthread_getspecific(*(void *)(v8 + 592));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)", segment_id", 12);
    }
    uint64_t v10 = file_logger::operator<<<unsigned long>(v8);
    uint64_t v11 = pthread_getspecific(*(void *)(v10 + 592));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        long long v12 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v19);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v13 = __tls_guard;
  if (!*(unsigned char *)__tls_guard(&__tls_guard))
  {
    *(unsigned char *)v13(&__tls_guard) = 1;
    uint64_t v15 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *uint64_t v15 = 0u;
    v15[1] = 0u;
    *((void *)v15 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v15);
  }
  uint64_t result = turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
  if (*(void *)(*(void *)(result + 16) + 72 * a2 + 24)
     + *(void *)(*(void *)(*(void *)(result + 16) + 72 * a2) + 32))
  {
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(&v18);
  }
  return result;
}

void sub_2240B78BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::locale::~locale((std::locale *)(v41 - 192));
  __dmb(0xBu);
  *(unsigned char *)(v40 + v39) = 0;
  a18 = &a39;
  std::vector<turi::groupby_aggregate_impl::groupby_element>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(&a31);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::operator[](uint64_t a1, unint64_t *a2)
{
  turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::find(a1, a2, (uint64_t)&v10);
  v9[0] = *a2;
  v9[1] = 0;
  if ((void)v10 != a1) {
    goto LABEL_2;
  }
  if (v12)
  {
    if (*((void *)&v11 + 1)) {
      goto LABEL_2;
    }
    goto LABEL_14;
  }
  if (*((void *)&v10 + 1) == *(void *)a1 && (void)v11 == *(void *)(*(void *)a1 + 8))
  {
LABEL_14:
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::do_insert(a1, v9, (uint64_t)v7);
    long long v10 = v7[0];
    long long v11 = v7[1];
    char v12 = v8;
  }
LABEL_2:
  if (v12) {
    uint64_t v4 = *((void *)&v11 + 1) + 16;
  }
  else {
    uint64_t v4 = v11 + 8;
  }
  return v4 + 8;
}

void turi::groupby_aggregate_impl::groupby_element::~groupby_element(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void turi::groupby_aggregate_impl::group_aggregate_container::add(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = __tls_guard;
  if (!*(unsigned char *)__tls_guard(&__tls_guard))
  {
    *(unsigned char *)v6(&__tls_guard) = 1;
    double v24 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *double v24 = 0u;
    v24[1] = 0u;
    *((void *)v24 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v24);
  }
  uint64_t v7 = turi::groupby_aggregate_impl::group_aggregate_container::tss_;
  uint64_t v8 = turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
  if (!*(unsigned char *)(v8 + 8)) {
    turi::groupby_aggregate_impl::group_aggregate_container::throw_if_not_initialized(void)const::{lambda(void)#1}::operator()();
  }
  uint64_t v9 = v8;
  unint64_t v36 = turi::groupby_aggregate_impl::groupby_element::hash_key(a2, a3);
  unint64_t v10 = v36 % a1[4];
  if (!*(unsigned char *)v6(&__tls_guard))
  {
    *(unsigned char *)v6(&__tls_guard) = 1;
    double v25 = (_OWORD *)v7(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *double v25 = 0u;
    v25[1] = 0u;
    *((void *)v25 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v25);
  }
  long long v11 = *(uint64_t **)turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::operator[](*(void *)(v9 + 16) + 72 * v10, &v36);
  if (!v11) {
    operator new();
  }
  uint64_t v12 = *v11;
  if (v11[1] == *v11)
  {
LABEL_12:
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    std::vector<turi::flexible_type>::reserve(&v33, a3);
    if (a3)
    {
      uint64_t v15 = 0;
      unint64_t v16 = v34;
      do
      {
        uint64_t v17 = **(void **)(**(void **)a2 + v15) + 16 * *(void *)(a2 + 8);
        if (v16 >= v35)
        {
          unint64_t v16 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(&v33, (atomic_ullong *volatile *)v17);
        }
        else
        {
          *(void *)unint64_t v16 = 0;
          *(_DWORD *)(v16 + 8) = 0;
          *(unsigned char *)(v16 + 12) = 0;
          if (v16 != v17)
          {
            atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v17;
            *(void *)(v16 + 5) = *(void *)(v17 + 5);
            *(void *)unint64_t v16 = v18;
            LODWORD(v18) = *(unsigned __int8 *)(v17 + 12);
            *(unsigned char *)(v16 + 12) = (_BYTE)v18;
            BOOL v19 = v18 > 9;
            int v20 = (1 << (char)v18) & 0x33C;
            if (!v19 && v20 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v16, 1uLL);
            }
          }
          v16 += 16;
        }
        unint64_t v34 = v16;
        v15 += 16;
        --a3;
      }
      while (a3);
    }
    else
    {
      unint64_t v16 = v34;
    }
    *(void *)&long long v26 = v33;
    *((void *)&v26 + 1) = v16;
    unint64_t v27 = v35;
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v33 = 0;
    turi::groupby_aggregate_impl::groupby_element::groupby_element(&v28, &v26, a1);
    uint64_t v22 = (void *)v11[1];
    if ((unint64_t)v22 >= v11[2])
    {
      uint64_t v23 = std::vector<turi::groupby_aggregate_impl::groupby_element>::__push_back_slow_path<turi::groupby_aggregate_impl::groupby_element>(v11, (uint64_t)&v28);
    }
    else
    {
      v22[2] = 0;
      v22[3] = 0;
      *uint64_t v22 = 0;
      v22[1] = 0;
      *(_OWORD *)uint64_t v22 = v28;
      v22[2] = v29;
      long long v28 = 0uLL;
      v22[4] = 0;
      v22[5] = 0;
      *(_OWORD *)(v22 + 3) = v30;
      v22[5] = v31;
      uint64_t v29 = 0;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      v22[6] = v32;
      uint64_t v23 = (uint64_t)(v22 + 7);
    }
    v11[1] = v23;
    unint64_t v37 = (void **)&v30;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v37);
    unint64_t v37 = (void **)&v28;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v37);
    unint64_t v37 = (void **)&v26;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v37);
    turi::groupby_aggregate_impl::groupby_element::add_element<turi::sframe_rows::row>(v11[1] - 56, (uint64_t **)a2, a1);
    *(void *)&long long v28 = &v33;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    while (!turi::groupby_aggregate_impl::flexible_type_vector_equality<std::vector<turi::flexible_type>,turi::sframe_rows::row>((void *)(v12 + v13), (uint64_t)(*(void *)(v12 + v13 + 8) - *(void *)(v12 + v13)) >> 4, a2, a3))
    {
      ++v14;
      uint64_t v12 = *v11;
      v13 += 56;
      if (v14 >= 0x6DB6DB6DB6DB6DB7 * ((v11[1] - *v11) >> 3)) {
        goto LABEL_12;
      }
    }
    turi::groupby_aggregate_impl::groupby_element::add_element<turi::sframe_rows::row>(*v11 + v13, (uint64_t **)a2, a1);
    if (*(void *)(*(void *)(v9 + 16) + 72 * v10 + 24)
       + *(void *)(*(void *)(*(void *)(v9 + 16) + 72 * v10) + 32) >= (unint64_t)a1[3])
      turi::groupby_aggregate_impl::group_aggregate_container::flush_segment((turi::groupby_aggregate_impl::group_aggregate_container *)a1, v10);
  }
}

void sub_2240B7E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  turi::groupby_aggregate_impl::groupby_element::~groupby_element((void **)&a13);
  *(void *)(v20 - 88) = &a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 88));
  a13 = &a20;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

BOOL turi::groupby_aggregate_impl::flexible_type_vector_equality<std::vector<turi::flexible_type>,turi::sframe_rows::row>(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a4) {
    return 0;
  }
  if (!a2) {
    return 1;
  }
  BOOL v7 = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = (unsigned __int8 *)(*a1 + 16 * v8);
    int v10 = v9[12];
    uint64_t v11 = **(void **)(**(void **)a3 + 16 * v8) + 16 * *(void *)(a3 + 8);
    if (v10 != *(unsigned __int8 *)(v11 + 12)) {
      return v7;
    }
    if (v10 != 7) {
      break;
    }
LABEL_6:
    BOOL v7 = ++v8 >= a2;
    if (v8 == a2) {
      return v7;
    }
  }
  switch(v9[12])
  {
    case 0u:
      if (*(void *)v9 != *(void *)v11) {
        return v7;
      }
      goto LABEL_6;
    case 1u:
      if (*(double *)v9 != *(double *)v11) {
        return v7;
      }
      goto LABEL_6;
    case 2u:
      uint64_t v12 = *(void *)v9;
      int v13 = *(char *)(*(void *)v9 + 31);
      size_t v14 = *(unsigned __int8 *)(*(void *)v9 + 31);
      if (v13 < 0) {
        size_t v15 = *(void *)(v12 + 16);
      }
      else {
        size_t v15 = v14;
      }
      uint64_t v66 = *(void *)v11;
      if (*(char *)(v66 + 31) < 0) {
        uint64_t v67 = *(void *)(v66 + 16);
      }
      else {
        uint64_t v67 = *(unsigned __int8 *)(v66 + 31);
      }
      if (v15 != v67) {
        return v7;
      }
      uint64_t v68 = (unsigned __int8 *)(v12 + 8);
      if ((v14 & 0x80) != 0) {
        uint64_t v68 = *(unsigned __int8 **)v68;
      }
      char v69 = (unsigned __int8 *)(v66 + 8);
      if ((*(unsigned char *)(v66 + 31) & 0x80) != 0)
      {
        char v69 = *(unsigned __int8 **)v69;
        if ((v14 & 0x80) != 0)
        {
LABEL_80:
          if (memcmp(v68, v69, v15)) {
            return v7;
          }
          goto LABEL_6;
        }
      }
      else if ((v14 & 0x80) != 0)
      {
        goto LABEL_80;
      }
      if (!v15) {
        goto LABEL_6;
      }
      while (*v68 == *v69)
      {
        ++v68;
        ++v69;
        if (!--v15) {
          goto LABEL_6;
        }
      }
      return v7;
    case 3u:
      uint64_t v16 = *(void *)v11;
      uint64_t v19 = *(void *)v9 + 8;
      uint64_t v17 = *(double **)v19;
      atomic_ullong *volatile v18 = *(double **)(v19 + 8);
      unint64_t v20 = ((uint64_t)v18 - *(void *)v19) >> 3;
      uint64_t v22 = v16 + 8;
      uint64_t v21 = *(double **)(v16 + 8);
      if (v20 != (uint64_t)(*(void *)(v22 + 8) - (void)v21) >> 3) {
        return v7;
      }
      if (v18 != v17)
      {
        uint64_t v23 = v20 <= 1 ? 1 : v18 - v17;
        if (*v17 != *v21) {
          return v7;
        }
        uint64_t v24 = 1;
        do
        {
          unint64_t v25 = v24;
          if (v23 == v24) {
            break;
          }
          double v26 = v17[v24];
          double v27 = v21[v24++];
        }
        while (v26 == v27);
        if (v25 < v20) {
          return v7;
        }
      }
      goto LABEL_6;
    case 4u:
      if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t *)(*(void *)v9 + 8), (void *)(*(void *)v11 + 8)) & 1) == 0)return v7; {
      goto LABEL_6;
      }
    case 5u:
      if (!turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v71, (uint64_t **)(*(void *)v9 + 8), (uint64_t **)(*(void *)v11 + 8)))return v7; {
      goto LABEL_6;
      }
    case 6u:
      if (((*(void *)v11 ^ *(void *)v9) & 0xFFFFFFFFFFFFFFLL) != 0 || *((_DWORD *)v9 + 2) != *(_DWORD *)(v11 + 8)) {
        return v7;
      }
      goto LABEL_6;
    case 8u:
      if (!turi::image_type::operator==(*(void *)v9 + 8, *(void *)v11 + 8)) {
        return v7;
      }
      goto LABEL_6;
    case 9u:
      uint64_t v28 = *(void *)v11;
      uint64_t v29 = *(void **)v9;
      if (*(void *)v11 == *(void *)v9) {
        goto LABEL_6;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v29 + 1), v28 + 8)) {
        return v7;
      }
      uint64_t v31 = (char *)v29[3];
      long long v30 = (char *)v29[4];
      uint64_t v32 = v30 - v31;
      if (v30 == v31) {
        goto LABEL_6;
      }
      if (!v29[1]) {
        goto LABEL_6;
      }
      uint64_t v33 = 1;
      do
      {
        uint64_t v34 = *(void *)v31;
        v31 += 8;
        v33 *= v34;
      }
      while (v31 != v30);
      if (!v33) {
        goto LABEL_6;
      }
      uint64_t v72 = 0;
      std::vector<unsigned long>::vector(&v73, v32 >> 3, &v72);
      unint64_t v35 = v73;
      unint64_t v36 = v74;
      uint64_t v37 = **(void **)(v28 + 8);
      uint64_t v38 = (char *)v74 - (char *)v73;
      unint64_t v39 = v74 - v73;
      unint64_t v40 = v39 - 1;
      if (v39 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v74 - v73;
      }
      do
      {
        if (v36 == v35)
        {
          uint64_t v49 = 0;
          double v50 = *(double *)(*(void *)v29[1] + 8 * v29[9]);
        }
        else
        {
          uint64_t v42 = 0;
          uint64_t v43 = (uint64_t *)v29[6];
          uint64_t v44 = v35;
          uint64_t v45 = v41;
          do
          {
            uint64_t v47 = *v44++;
            uint64_t v46 = v47;
            uint64_t v48 = *v43++;
            v42 += v48 * v46;
            --v45;
          }
          while (v45);
          uint64_t v49 = 0;
          double v50 = *(double *)(*(void *)v29[1] + 8 * (v29[9] + v42));
          uint64_t v51 = *(uint64_t **)(v28 + 48);
          uint64_t v52 = v35;
          uint64_t v53 = v41;
          do
          {
            uint64_t v55 = *v52++;
            uint64_t v54 = v55;
            uint64_t v56 = *v51++;
            v49 += v56 * v54;
            --v53;
          }
          while (v53);
        }
        double v57 = *(double *)(v37 + 8 * (*(void *)(v28 + 72) + v49));
        if (v50 != v57) {
          break;
        }
        uint64_t v58 = v39;
        unint64_t v59 = v39 - 1;
        if (v38 < 1) {
          goto LABEL_56;
        }
        uint64_t v60 = v29[3];
        unint64_t v61 = v35[v40] + 1;
        v35[v40] = v61;
        unint64_t v62 = (v38 & 0xFFFFFFFFFFFFFFF8) - 16;
        uint64_t v63 = v39 - 1;
        if (v61 < *(void *)(v60 + 8 * v40))
        {
          uint64_t v58 = 1;
          unint64_t v59 = v39 - 1;
LABEL_56:
          if ((v59 & 0x8000000000000000) != 0) {
            break;
          }
          continue;
        }
        do
        {
          *(uint64_t *)((char *)v35 + v62 + 8) = 0;
          if (v63 <= 0)
          {
            v74 = v35;
            operator delete(v35);
            goto LABEL_6;
          }
          --v63;
          unint64_t v64 = *(uint64_t *)((char *)v35 + v62) + 1;
          *(uint64_t *)((char *)v35 + v62) = v64;
          unint64_t v65 = *(void *)(v60 + v62);
          v62 -= 8;
        }
        while (v64 >= v65);
        uint64_t v58 = 1;
        if (v63 < 0) {
          break;
        }
      }
      while (v58);
      if (v35)
      {
        v74 = v35;
        operator delete(v35);
      }
      if (v50 != v57) {
        return v7;
      }
      goto LABEL_6;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void turi::groupby_aggregate_impl::groupby_element::add_element<turi::sframe_rows::row>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  v64[3] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = a1;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v3 + 40 * v7;
      uint64_t v9 = *(void **)v8;
      int v10 = *(void **)(v8 + 8);
      uint64_t v11 = (uint64_t)v10 - *(void *)v8;
      unint64_t v12 = v11 >> 3;
      if (v11 >> 3 == 1)
      {
        uint64_t v17 = **a2;
        uint64_t v18 = *(void *)(*(void *)(v6 + 24) + 8 * v7);
        if (*v9 >= (unint64_t)(((*a2)[1] - v17) >> 4)) {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 16))(v18, &turi::FLEX_UNDEFINED);
        }
        else {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, **(void **)(v17 + 16 * *v9) + 16 * (void)a2[1]);
        }
      }
      else if (v12)
      {
        std::vector<turi::flexible_type>::vector(v64, v11 >> 3);
        if (v10 != v9)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          if (v12 <= 1) {
            uint64_t v21 = 1;
          }
          else {
            uint64_t v21 = v12;
          }
          do
          {
            unint64_t v22 = *(void *)(*(void *)(*a3 + 40 * v7) + 8 * v20);
            uint64_t v23 = **a2;
            if (v22 >= ((*a2)[1] - v23) >> 4)
            {
              uint64_t v29 = &v64[0][v19];
              switch(BYTE4(v64[0][v19 + 1]))
              {
                case 2:
                  if (atomic_fetch_add((atomic_ullong *volatile)*v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v30 = (atomic_ullong *volatile)*v29;
                    if (!*v29) {
                      goto LABEL_57;
                    }
                    if (*((char *)v30 + 31) < 0) {
                      operator delete((void *)v30[1]);
                    }
                    atomic_ullong *volatile v31 = v30;
                    uint64_t v32 = 0x1012C404EF22A49;
                    goto LABEL_56;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add((atomic_ullong *volatile)*v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v33 = (atomic_ullong *volatile)*v29;
                    if (!*v29) {
                      goto LABEL_57;
                    }
                    uint64_t v34 = (void *)v33[1];
                    if (v34)
                    {
                      v33[2] = (atomic_ullong)v34;
                      operator delete(v34);
                    }
                    atomic_ullong *volatile v31 = v33;
                    uint64_t v32 = 0x1080C409938AC02;
                    goto LABEL_56;
                  }
                  break;
                case 4:
                  if (atomic_fetch_add((atomic_ullong *volatile)*v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v35 = (atomic_ullong *volatile)*v29;
                    if (!*v29) {
                      goto LABEL_57;
                    }
                    uint64_t v63 = (atomic_ullong **)(v35 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
                    goto LABEL_42;
                  }
                  break;
                case 5:
                  if (atomic_fetch_add((atomic_ullong *volatile)*v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v35 = (atomic_ullong *volatile)*v29;
                    if (!*v29) {
                      goto LABEL_57;
                    }
                    uint64_t v63 = (atomic_ullong **)(v35 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
LABEL_42:
                    atomic_ullong *volatile v31 = v35;
                    uint64_t v32 = 0x1020C405E66F15BLL;
                    goto LABEL_56;
                  }
                  break;
                case 8:
                  if (atomic_fetch_add((atomic_ullong *volatile)*v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v36 = (atomic_ullong *volatile)*v29;
                    if (!*v29) {
                      goto LABEL_57;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)v36 + 2);
                    atomic_ullong *volatile v31 = v36;
                    unsigned int v37 = -235920773;
                    goto LABEL_55;
                  }
                  break;
                case 9:
                  if (atomic_fetch_add((atomic_ullong *volatile)*v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v38 = (atomic_ullong *volatile)*v29;
                    if (*v29)
                    {
                      unint64_t v39 = (void *)v38[6];
                      if (v39)
                      {
                        v38[7] = (atomic_ullong)v39;
                        operator delete(v39);
                      }
                      unint64_t v40 = (void *)v38[3];
                      if (v40)
                      {
                        v38[4] = (atomic_ullong)v40;
                        operator delete(v40);
                      }
                      uint64_t v41 = (std::__shared_weak_count *)v38[2];
                      if (v41) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                      }
                      atomic_ullong *volatile v31 = v38;
                      unsigned int v37 = 2071181815;
LABEL_55:
                      uint64_t v32 = v37 | 0x1030C4000000000;
LABEL_56:
                      MEMORY[0x22A614FA0](v31, v32);
                    }
LABEL_57:
                    *uint64_t v29 = 0;
                  }
                  break;
                default:
                  break;
              }
              *uint64_t v29 = 0;
              *((_DWORD *)v29 + 2) = 0;
              *((unsigned char *)v29 + 12) = 7;
            }
            else
            {
              uint64_t v24 = **(void **)(v23 + 16 * v22) + 16 * (void)a2[1];
              unint64_t v25 = &v64[0][v19];
              if (&v64[0][v19] != (atomic_ullong *)v24)
              {
                switch(*((unsigned char *)v25 + 12))
                {
                  case 2:
                    if (atomic_fetch_add((atomic_ullong *volatile)*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v26 = (atomic_ullong *volatile)*v25;
                      if (!*v25) {
                        goto LABEL_85;
                      }
                      if (*((char *)v26 + 31) < 0) {
                        operator delete((void *)v26[1]);
                      }
                      atomic_ullong *volatile v27 = v26;
                      uint64_t v28 = 0x1012C404EF22A49;
                      goto LABEL_84;
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add((atomic_ullong *volatile)*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v42 = (atomic_ullong *volatile)*v25;
                      if (!*v25) {
                        goto LABEL_85;
                      }
                      uint64_t v43 = (void *)v42[1];
                      if (v43)
                      {
                        v42[2] = (atomic_ullong)v43;
                        operator delete(v43);
                      }
                      atomic_ullong *volatile v27 = v42;
                      uint64_t v28 = 0x1080C409938AC02;
                      goto LABEL_84;
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add((atomic_ullong *volatile)*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v44 = (atomic_ullong *volatile)*v25;
                      if (!*v25) {
                        goto LABEL_85;
                      }
                      uint64_t v63 = (atomic_ullong **)(v44 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
                      goto LABEL_70;
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add((atomic_ullong *volatile)*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v44 = (atomic_ullong *volatile)*v25;
                      if (!*v25) {
                        goto LABEL_85;
                      }
                      uint64_t v63 = (atomic_ullong **)(v44 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
LABEL_70:
                      atomic_ullong *volatile v27 = v44;
                      uint64_t v28 = 0x1020C405E66F15BLL;
                      goto LABEL_84;
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add((atomic_ullong *volatile)*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v45 = (atomic_ullong *volatile)*v25;
                      if (!*v25) {
                        goto LABEL_85;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)v45 + 2);
                      atomic_ullong *volatile v27 = v45;
                      unsigned int v46 = -235920773;
                      goto LABEL_83;
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add((atomic_ullong *volatile)*v25, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v47 = (atomic_ullong *volatile)*v25;
                      if (*v25)
                      {
                        uint64_t v48 = (void *)v47[6];
                        if (v48)
                        {
                          v47[7] = (atomic_ullong)v48;
                          operator delete(v48);
                        }
                        uint64_t v49 = (void *)v47[3];
                        if (v49)
                        {
                          v47[4] = (atomic_ullong)v49;
                          operator delete(v49);
                        }
                        double v50 = (std::__shared_weak_count *)v47[2];
                        if (v50) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
                        }
                        atomic_ullong *volatile v27 = v47;
                        unsigned int v46 = 2071181815;
LABEL_83:
                        uint64_t v28 = v46 | 0x1030C4000000000;
LABEL_84:
                        MEMORY[0x22A614FA0](v27, v28);
                      }
LABEL_85:
                      *unint64_t v25 = 0;
                    }
                    break;
                  default:
                    break;
                }
                atomic_ullong v51 = *(void *)v24;
                *(atomic_ullong *)((char *)v25 + 5) = *(void *)(v24 + 5);
                *unint64_t v25 = v51;
                LODWORD(v51) = *(unsigned __int8 *)(v24 + 12);
                *((unsigned char *)v25 + 12) = v51;
                switch((int)v51)
                {
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 8:
                  case 9:
                    atomic_fetch_add((atomic_ullong *volatile)*v25, 1uLL);
                    break;
                  default:
                    break;
                }
              }
            }
            ++v20;
            v19 += 2;
          }
          while (v21 != v20);
        }
        uint64_t v6 = a1;
        uint64_t v52 = *(void *)(*(void *)(a1 + 24) + 8 * v7);
        (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v52 + 8))(v52, v64);
        uint64_t v63 = v64;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
      }
      else
      {
        uint64_t v13 = *(void *)(*(void *)(v6 + 24) + 8 * v7);
        memset(v64, 0, 13);
        (*(void (**)(uint64_t, atomic_ullong **))(*(void *)v13 + 16))(v13, v64);
        switch(BYTE4(v64[1]))
        {
          case 2:
            if (atomic_fetch_add(v64[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              size_t v14 = v64[0];
              if (v64[0])
              {
                if (*((char *)v64[0] + 31) < 0) {
                  operator delete(*((void **)v64[0] + 1));
                }
                size_t v15 = v14;
                uint64_t v16 = 0x1012C404EF22A49;
                goto LABEL_116;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(v64[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v53 = v64[0];
              if (v64[0])
              {
                uint64_t v54 = (void *)v64[0][1];
                if (v54)
                {
                  v64[0][2] = (atomic_ullong)v54;
                  operator delete(v54);
                }
                size_t v15 = v53;
                uint64_t v16 = 0x1080C409938AC02;
                goto LABEL_116;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(v64[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v55 = v64[0];
              if (v64[0])
              {
                uint64_t v63 = (atomic_ullong **)(v64[0] + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
                goto LABEL_102;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(v64[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v55 = v64[0];
              if (v64[0])
              {
                uint64_t v63 = (atomic_ullong **)(v64[0] + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
LABEL_102:
                size_t v15 = v55;
                uint64_t v16 = 0x1020C405E66F15BLL;
                goto LABEL_116;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(v64[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v56 = v64[0];
              if (v64[0])
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v64[0] + 2);
                size_t v15 = v56;
                unsigned int v57 = -235920773;
                goto LABEL_115;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(v64[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v58 = v64[0];
              if (v64[0])
              {
                unint64_t v59 = (void *)v64[0][6];
                if (v59)
                {
                  v64[0][7] = (atomic_ullong)v59;
                  operator delete(v59);
                }
                uint64_t v60 = (void *)v58[3];
                if (v60)
                {
                  v58[4] = (atomic_ullong)v60;
                  operator delete(v60);
                }
                unint64_t v61 = (std::__shared_weak_count *)v58[2];
                if (v61) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v61);
                }
                size_t v15 = v58;
                unsigned int v57 = 2071181815;
LABEL_115:
                uint64_t v16 = v57 | 0x1030C4000000000;
LABEL_116:
                MEMORY[0x22A614FA0](v15, v16);
              }
            }
            break;
          default:
            break;
        }
      }
      ++v7;
      uint64_t v3 = *a3;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  }
}

void sub_2240B8B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::begin@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(unsigned char ***)result;
  uint64_t v3 = **(unsigned char ***)result;
  uint64_t v4 = *(unsigned char **)(*(void *)result + 8);
  if (v3 != v4)
  {
    while ((*v3 & 1) == 0)
    {
      v3 += 24;
      if (v3 == v4)
      {
        uint64_t v3 = *(unsigned char **)(*(void *)result + 8);
        break;
      }
    }
  }
  uint64_t v5 = *(void *)(result + 24);
  if (v5) {
    uint64_t v5 = *(void *)(*(void *)(result + 48) + 8 * *(void *)(result + 16));
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v5;
  *(unsigned char *)(a2 + 32) = v4 == v3;
  return result;
}

uint64_t turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(turi::groupby_aggregate_impl::group_aggregate_container *this)
{
  v35[24] = *(std::locale *)MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)this + 328);
  if (*((unsigned char *)this + 328)) {
    int v2 = *((unsigned char *)this + 329) != 0;
  }
  assert_msg(v2 ^ 1u, "intermediate_buffer shall be closed before stealing local_buffer.");
  gettimeofday(&v34, 0);
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "merge_local_buffer_set", 441, 1);
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Merging local buffer set ", 25);
    }
    unint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        uint64_t v8 = std::locale::use_facet(v35, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(v35);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 6);
  uint64_t v10 = *v9;
  *uint64_t v9 = 0;
  uint64_t v33 = v10;
  uint64_t v11 = (void *)*((void *)this + 6);
  uint64_t v12 = v11[1];
  uint64_t v13 = v11[2];
  while (v12 != v13)
  {
    std::vector<unsigned long>::reserve((void **)v12, ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 6)* ((uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3));
    v12 += 24;
  }
  __p = 0;
  atomic_ullong *volatile v31 = 0;
  uint64_t v32 = 0;
  std::vector<unsigned long>::reserve(&__p, *((void *)this + 4));
  uint64_t v14 = *((void *)this + 6);
  if ((unint64_t)(*((void *)this + 7) - v14) >= 0x41)
  {
    size_t v15 = (uint64_t *)(v14 + 64);
    uint64_t v16 = v14 + 64;
    int v18 = *(_DWORD *)(v16 + 56);
    uint64_t v17 = (_DWORD *)(v16 + 56);
    if (v18)
    {
      do
        __yield();
      while (*v17);
    }
    (*(void (**)(void))(*(void *)*v15 + 40))();
    atomic_ullong *volatile v31 = __p;
    turi::sarray<std::string>::get_reader(*v15);
  }
  if (*(_DWORD *)(v14 + 56))
  {
    do
      __yield();
    while (*(_DWORD *)(*((void *)this + 6) + 56));
  }
  (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
  turi::sarray<turi::flexible_type>::operator=((uint64_t)this + 80, v33);
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__vdeallocate((uint64_t *)this + 48);
  *((_OWORD *)this + 24) = *(_OWORD *)(v11 + 1);
  *((void *)this + 50) = v11[3];
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
  uint64_t v19 = (int *)global_logger();
  if (v19[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v19)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v20 = (file_logger *)global_logger();
    uint64_t v21 = file_logger::start_stream(v20, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/groupby_aggregate_impl.cpp", "merge_local_buffer_set", 509, 1);
    unint64_t v22 = pthread_getspecific(*((void *)v21 + 74));
    if (v22 && *((unsigned char *)v22 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)"Merging finished in ", 20);
    }
    gettimeofday((timeval *)v35, 0);
    uint64_t v23 = file_logger::operator<<<double>((uint64_t)v21);
    uint64_t v24 = pthread_getspecific(*(void *)(v23 + 592));
    if (v24 && *((unsigned char *)v24 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)" ms.", 4);
    }
    unint64_t v25 = pthread_getspecific(*(void *)(v23 + 592));
    if (v25)
    {
      if (*((unsigned char *)v25 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(v25[2] - 24) + 16));
        atomic_ullong *volatile v26 = std::locale::use_facet(v35, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale(v35);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v23);
        if (*(_DWORD *)(v23 + 600) == 7)
        {
          __print_back_trace();
          uint64_t v29 = __cxa_allocate_exception(8uLL);
          *uint64_t v29 = "LOG_FATAL encountered";
          __cxa_throw(v29, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (__p)
  {
    atomic_ullong *volatile v31 = __p;
    operator delete(__p);
  }
  uint64_t result = v33;
  uint64_t v33 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2240B952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 8))(a20);
  }
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::groupby_aggregate_impl::group_aggregate_container *this, turi::sframe *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)__tls_guard(&__tls_guard))
  {
    *(unsigned char *)v4(v3) = 1;
    uint64_t v6 = (_OWORD *)turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_);
    *uint64_t v6 = 0u;
    v6[1] = 0u;
    *((void *)v6 + 4) = 0;
    _tlv_atexit((void (__cdecl *)(void *))turi::groupby_aggregate_impl::group_aggregate_container::tls_segment_set::~tls_segment_set, v6);
  }
  BOOL v5 = *(unsigned char *)(turi::groupby_aggregate_impl::group_aggregate_container::tss_(&turi::groupby_aggregate_impl::group_aggregate_container::tss_)
                + 8) == 0;
  assert_msg(v5, "call flush_tls fisrt before write out groupby result");
  turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(this);
  if (*((unsigned char *)this + 328))
  {
    if (*((unsigned char *)this + 329)) {
      turi::sarray<std::string>::close((uint64_t)this + 80);
    }
  }
  turi::sarray<std::string>::get_reader((uint64_t)this + 80);
}

void sub_2240B9B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

void turi::groupby_aggregate_impl::group_aggregate_container::group_and_write_segment(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  if (a4)
  {
    for (uint64_t i = 0; i != a4; ++i)
      v7 += (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 24))(*a3, i);
  }
  v116 = 0;
  v117 = 0;
  unint64_t v118 = 0;
  v97 = a1;
  uint64_t v9 = *(void *)(a1[48] + 24 * a4);
  if (*(void *)(a1[48] + 24 * a4 + 8) != v9)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v9 + 8 * v10);
      uint64_t v12 = (std::__shared_weak_count *)a3[1];
      uint64_t v114 = *a3;
      v115 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = v11 + v7;
      turi::sarray_reader_buffer<std::string>::sarray_reader_buffer((uint64_t)&v123, &v114, v7, v11 + v7, 1024);
      uint64_t v14 = v117;
      if ((unint64_t)v117 >= v118)
      {
        v117 = (void *)std::vector<turi::sarray_reader_buffer<std::string>>::__push_back_slow_path<turi::sarray_reader_buffer<std::string>>((uint64_t *)&v116, (uint64_t)&v123);
        if (*((void *)&v125[0] + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v125[0] + 1));
        }
      }
      else
      {
        void *v117 = 0;
        v14[1] = 0;
        v14[2] = 0;
        *(_OWORD *)uint64_t v14 = v123;
        v14[2] = v124;
        long long v123 = 0uLL;
        uint64_t v124 = 0;
        *(_OWORD *)(v14 + 3) = v125[0];
        v125[0] = 0uLL;
        long long v16 = v126[0];
        long long v15 = v126[1];
        uint64_t v17 = v127;
        *(_OWORD *)(v14 + 5) = v125[1];
        v14[11] = v17;
        *(_OWORD *)(v14 + 9) = v15;
        *(_OWORD *)(v14 + 7) = v16;
        v117 = v14 + 12;
      }
      *(void *)&long long v120 = &v123;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
      if (v115) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v115);
      }
      ++v10;
      uint64_t v9 = *(void *)(v97[48] + 24 * a4);
      uint64_t v7 = v13;
    }
    while (v10 < (*(void *)(v97[48] + 24 * a4 + 8) - v9) >> 3);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)a2 + 32))(&v123);
  v111 = 0;
  v112 = 0;
  unint64_t v113 = 0;
  uint64_t v20 = (uint64_t)v116;
  uint64_t v19 = v117;
  uint64_t v21 = v97;
  if (v117 != v116)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      if (*(void *)(v20 + v22 + 88) < *(void *)(v20 + v22 + 72))
      {
        __n128 v122 = 0u;
        long long v120 = 0u;
        memset(v121, 0, sizeof(v121));
        uint64_t v24 = (uint64_t *)turi::sarray_reader_buffer<std::string>::next((uint64_t *)(v20 + v22));
        turi::groupby_aggregate_impl::groupby_element::groupby_element((uint64_t)v109, v24, v97);
        std::vector<turi::flexible_type>::__vdeallocate((void **)&v120);
        long long v120 = v109[0];
        *(void *)&v121[0] = *(void *)&v109[1];
        memset(v109, 0, 24);
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)v121 + 1);
        *(_OWORD *)((char *)v121 + 8) = *(_OWORD *)((char *)&v109[1] + 8);
        uint64_t v25 = *((void *)&v109[2] + 1);
        memset((char *)&v109[1] + 8, 0, 24);
        *((void *)&v121[1] + 1) = v25;
        v122.n128_u64[0] = v110;
        *(void *)&v105[0] = (char *)&v109[1] + 8;
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
        *(void *)&v105[0] = v109;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
        v122.n128_u64[1] = v23;
        atomic_ullong *volatile v26 = v112;
        if ((unint64_t)v112 >= v113)
        {
          atomic_ullong *volatile v27 = (uint64_t *)std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__push_back_slow_path<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>((uint64_t *)&v111, (uint64_t)&v120);
        }
        else
        {
          v112[2] = 0;
          v26[3] = 0;
          *atomic_ullong *volatile v26 = 0;
          v26[1] = 0;
          *(_OWORD *)atomic_ullong *volatile v26 = v120;
          v26[2] = *(void *)&v121[0];
          long long v120 = 0uLL;
          *(void *)&v121[0] = 0;
          v26[4] = 0;
          v26[5] = 0;
          *(_OWORD *)(v26 + 3) = *(_OWORD *)((char *)v121 + 8);
          v26[5] = *((void *)&v121[1] + 1);
          memset((char *)v121 + 8, 0, 24);
          *((__n128 *)v26 + 3) = v122;
          atomic_ullong *volatile v27 = v26 + 8;
        }
        v112 = v27;
        *(void *)&v109[0] = (char *)v121 + 8;
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
        *(void *)&v109[0] = &v120;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v109);
        uint64_t v20 = (uint64_t)v116;
        uint64_t v19 = v117;
      }
      ++v23;
      v22 += 96;
    }
    while (v23 < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v20) >> 5));
    uint64_t v28 = v111;
    uint64_t v29 = (char *)v112 - (char *)v111;
    if (v112 != v111)
    {
      if (v29 >= 65)
      {
        uint64_t v30 = v29 >> 6;
        unint64_t v31 = (unint64_t)((v29 >> 6) - 2) >> 1;
        unint64_t v32 = v31 + 1;
        uint64_t v33 = &v111[8 * v31];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v28, (uint64_t)v109, v30, (uint64_t)v33, v18);
          v33 -= 8;
          --v32;
        }
        while (v32);
        uint64_t v28 = v111;
      }
      memset(v108, 0, sizeof(v108));
      if (v28 != v112)
      {
        do
        {
          unint64_t v107 = 0;
          memset(v109, 0, sizeof(v109));
          *(void *)&long long v120 = v109;
          *((void *)&v120 + 1) = &v107;
          std::tuple<turi::groupby_aggregate_impl::groupby_element &,unsigned long &>::operator=[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element,unsigned long,0>((uint64_t)&v120, (uint64_t)v28);
          std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v111, (uint64_t)v112, (uint64_t)v105, ((char *)v112 - (char *)v111) >> 6);
          std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v111, (void **)v112 - 8);
          if (v116[12 * v107 + 11] < v116[12 * v107 + 9])
          {
            __n128 v122 = 0u;
            long long v120 = 0u;
            memset(v121, 0, sizeof(v121));
            timeval v34 = (uint64_t *)turi::sarray_reader_buffer<std::string>::next(&v116[12 * v107]);
            turi::groupby_aggregate_impl::groupby_element::groupby_element((uint64_t)v105, v34, v21);
            std::vector<turi::flexible_type>::__vdeallocate((void **)&v120);
            long long v120 = v105[0];
            *(void *)&v121[0] = *(void *)&v105[1];
            memset(v105, 0, 24);
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)v121 + 1);
            *(_OWORD *)((char *)v121 + 8) = *(_OWORD *)((char *)&v105[1] + 8);
            uint64_t v35 = *((void *)&v105[2] + 1);
            memset((char *)&v105[1] + 8, 0, 24);
            *((void *)&v121[1] + 1) = v35;
            v122.n128_u64[0] = v106;
            *(void *)&long long v99 = (char *)&v105[1] + 8;
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
            *(void *)&long long v99 = v105;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
            v122.n128_u64[1] = v107;
            atomic_ullong *volatile v36 = v112;
            if ((unint64_t)v112 >= v113)
            {
              atomic_ullong *volatile v38 = (uint64_t *)std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__push_back_slow_path<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>((uint64_t *)&v111, (uint64_t)&v120);
            }
            else
            {
              v112[2] = 0;
              v36[3] = 0;
              *atomic_ullong *volatile v36 = 0;
              v36[1] = 0;
              *(_OWORD *)atomic_ullong *volatile v36 = v120;
              v36[2] = *(void *)&v121[0];
              long long v120 = 0uLL;
              *(void *)&v121[0] = 0;
              v36[4] = 0;
              v36[5] = 0;
              *(_OWORD *)(v36 + 3) = *(_OWORD *)((char *)v121 + 8);
              v36[5] = *((void *)&v121[1] + 1);
              memset((char *)v121 + 8, 0, 24);
              __n128 v37 = v122;
              *((__n128 *)v36 + 3) = v122;
              atomic_ullong *volatile v38 = v36 + 8;
            }
            v112 = v38;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v111, (uint64_t)v38, (uint64_t)v105, ((char *)v38 - (char *)v111) >> 6, v37);
            *(void *)&v105[0] = (char *)v121 + 8;
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
            *(void *)&v105[0] = &v120;
            unint64_t v39 = (void ***)v105;
            goto LABEL_34;
          }
          while (v112 != v111
               && v111[6] == v110
               && turi::groupby_aggregate_impl::flexible_type_vector_equality<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v111, v109))
          {
            memset(v105, 0, sizeof(v105));
            unint64_t v104 = 0;
            *(void *)&long long v120 = v105;
            *((void *)&v120 + 1) = &v104;
            std::tuple<turi::groupby_aggregate_impl::groupby_element &,unsigned long &>::operator=[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element,unsigned long,0>((uint64_t)&v120, (uint64_t)v111);
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v111, (uint64_t)v112, (uint64_t)&v99, ((char *)v112 - (char *)v111) >> 6);
            std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v111, (void **)v112 - 8);
            uint64_t v40 = *((void *)&v109[1] + 1);
            if (*(void *)&v109[2] != *((void *)&v109[1] + 1))
            {
              unint64_t v41 = 0;
              do
              {
                (*(void (**)(void, void))(**(void **)(v40 + 8 * v41) + 32))(*(void *)(v40 + 8 * v41), *(void *)(*((void *)&v105[1] + 1) + 8 * v41));
                ++v41;
                uint64_t v40 = *((void *)&v109[1] + 1);
              }
              while (v41 < (uint64_t)(*(void *)&v109[2] - *((void *)&v109[1] + 1)) >> 3);
            }
            if (v116[12 * v104 + 11] < v116[12 * v104 + 9])
            {
              __n128 v122 = 0u;
              long long v120 = 0u;
              memset(v121, 0, sizeof(v121));
              atomic_ullong *volatile v42 = (uint64_t *)turi::sarray_reader_buffer<std::string>::next(&v116[12 * v104]);
              turi::groupby_aggregate_impl::groupby_element::groupby_element((uint64_t)&v99, v42, v21);
              std::vector<turi::flexible_type>::__vdeallocate((void **)&v120);
              long long v120 = v99;
              *(void *)&v121[0] = v100;
              uint64_t v100 = 0;
              long long v99 = 0uLL;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)v121 + 1);
              *(_OWORD *)((char *)v121 + 8) = v101;
              uint64_t v43 = v102;
              uint64_t v102 = 0;
              long long v101 = 0uLL;
              *((void *)&v121[1] + 1) = v43;
              v122.n128_u64[0] = v103;
              v119 = (void **)&v101;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v119);
              v119 = (void **)&v99;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v119);
              v122.n128_u64[1] = v104;
              atomic_ullong *volatile v44 = v112;
              if ((unint64_t)v112 >= v113)
              {
                unsigned int v46 = (uint64_t *)std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__push_back_slow_path<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>((uint64_t *)&v111, (uint64_t)&v120);
              }
              else
              {
                v112[2] = 0;
                v44[3] = 0;
                uint64_t *v44 = 0;
                v44[1] = 0;
                *(_OWORD *)atomic_ullong *volatile v44 = v120;
                v44[2] = *(void *)&v121[0];
                long long v120 = 0uLL;
                *(void *)&v121[0] = 0;
                v44[4] = 0;
                v44[5] = 0;
                *(_OWORD *)(v44 + 3) = *(_OWORD *)((char *)v121 + 8);
                v44[5] = *((void *)&v121[1] + 1);
                memset((char *)v121 + 8, 0, 24);
                __n128 v45 = v122;
                *((__n128 *)v44 + 3) = v122;
                unsigned int v46 = v44 + 8;
              }
              v112 = v46;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)v111, (uint64_t)v46, (uint64_t)&v99, ((char *)v46 - (char *)v111) >> 6, v45);
              *(void *)&long long v99 = (char *)v121 + 8;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
              *(void *)&long long v99 = &v120;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
            }
            *(void *)&long long v120 = (char *)&v105[1] + 8;
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
            *(void *)&long long v120 = v105;
            unint64_t v39 = (void ***)&v120;
LABEL_34:
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v39);
          }
          std::vector<turi::flexible_type>::resize(v108, ((uint64_t)(*(void *)&v109[2] - *((void *)&v109[1] + 1)) >> 3)+ ((uint64_t)(*((void *)&v109[0] + 1) - *(void *)&v109[0]) >> 4));
          uint64_t v47 = *(void *)&v109[0];
          if (*((void *)&v109[0] + 1) != *(void *)&v109[0])
          {
            uint64_t v48 = 0;
            unint64_t v49 = 0;
            do
            {
              if (v47 != v108[0])
              {
                uint64_t v50 = v108[0] + v48;
                switch(*(unsigned char *)(v108[0] + v48 + 12))
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v51 = *(atomic_ullong *volatile *)v50;
                      if (!*(void *)v50) {
                        goto LABEL_82;
                      }
                      if (*((char *)v51 + 31) < 0) {
                        operator delete((void *)v51[1]);
                      }
                      atomic_ullong *volatile v52 = v51;
                      uint64_t v53 = 0x1012C404EF22A49;
                      goto LABEL_81;
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v60 = *(atomic_ullong *volatile *)v50;
                      if (!*(void *)v50) {
                        goto LABEL_82;
                      }
                      unint64_t v61 = (void *)v60[1];
                      if (v61)
                      {
                        v60[2] = (atomic_ullong)v61;
                        operator delete(v61);
                      }
                      atomic_ullong *volatile v52 = v60;
                      uint64_t v53 = 0x1080C409938AC02;
                      goto LABEL_81;
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v54 = *(atomic_ullong *volatile *)v50;
                      if (!*(void *)v50) {
                        goto LABEL_82;
                      }
                      *(void *)&long long v120 = v54 + 1;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
                      goto LABEL_76;
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v54 = *(atomic_ullong *volatile *)v50;
                      if (!*(void *)v50) {
                        goto LABEL_82;
                      }
                      *(void *)&long long v120 = v54 + 1;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
LABEL_76:
                      atomic_ullong *volatile v52 = v54;
                      uint64_t v53 = 0x1020C405E66F15BLL;
                      goto LABEL_81;
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)v50;
                      if (!*(void *)v50) {
                        goto LABEL_82;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)v62 + 2);
                      atomic_ullong *volatile v52 = v62;
                      unsigned int v59 = -235920773;
                      goto LABEL_80;
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v55 = *(atomic_ullong *volatile *)v50;
                      if (*(void *)v50)
                      {
                        uint64_t v56 = (void *)v55[6];
                        if (v56)
                        {
                          v55[7] = (atomic_ullong)v56;
                          operator delete(v56);
                        }
                        unsigned int v57 = (void *)v55[3];
                        if (v57)
                        {
                          v55[4] = (atomic_ullong)v57;
                          operator delete(v57);
                        }
                        uint64_t v58 = (std::__shared_weak_count *)v55[2];
                        if (v58) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
                        }
                        atomic_ullong *volatile v52 = v55;
                        unsigned int v59 = 2071181815;
LABEL_80:
                        uint64_t v53 = v59 | 0x1030C4000000000;
LABEL_81:
                        MEMORY[0x22A614FA0](v52, v53);
                      }
LABEL_82:
                      *(void *)uint64_t v50 = 0;
                    }
                    break;
                  default:
                    break;
                }
                uint64_t v63 = *(void *)(v47 + v48);
                *(void *)(v50 + 5) = *(void *)(v47 + v48 + 5);
                *(void *)uint64_t v50 = v63;
                unsigned int v64 = *(unsigned __int8 *)(v47 + v48 + 12);
                *(unsigned char *)(v50 + 12) = v64;
                BOOL v65 = v64 > 9;
                int v66 = (1 << v64) & 0x33C;
                if (!v65 && v66 != 0) {
                  atomic_fetch_add(*(atomic_ullong *volatile *)v50, 1uLL);
                }
              }
              ++v49;
              uint64_t v47 = *(void *)&v109[0];
              v48 += 16;
            }
            while (v49 < (uint64_t)(*((void *)&v109[0] + 1) - *(void *)&v109[0]) >> 4);
          }
          uint64_t v68 = *((void *)&v109[1] + 1);
          uint64_t v21 = v97;
          if (*(void *)&v109[2] != *((void *)&v109[1] + 1))
          {
            unint64_t v69 = 0;
            do
            {
              (*(void (**)(long long *__return_ptr))(**(void **)(v68 + 8 * v69) + 40))(&v120);
              uint64_t v70 = v108[0] + 16 * (v69 + ((*((void *)&v109[0] + 1) - *(void *)&v109[0]) >> 4));
              if (&v120 == (long long *)v70)
              {
                switch(BYTE12(v120))
                {
                  case 2:
                    if (atomic_fetch_add((atomic_ullong *volatile)v120, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v84 = (void *)v120;
                      if ((void)v120)
                      {
                        if (*(char *)(v120 + 31) < 0) {
                          operator delete(*(void **)(v120 + 8));
                        }
                        uint64_t v85 = v84;
                        uint64_t v86 = 0x1012C404EF22A49;
                        goto LABEL_159;
                      }
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add((atomic_ullong *volatile)v120, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v93 = (void *)v120;
                      if ((void)v120)
                      {
                        v94 = *(void **)(v120 + 8);
                        if (v94)
                        {
                          *(void *)(v120 + 16) = v94;
                          operator delete(v94);
                        }
                        uint64_t v85 = v93;
                        uint64_t v86 = 0x1080C409938AC02;
                        goto LABEL_159;
                      }
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add((atomic_ullong *volatile)v120, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v87 = (void *)v120;
                      if ((void)v120)
                      {
                        *(void *)&v105[0] = v120 + 8;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
                        goto LABEL_154;
                      }
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add((atomic_ullong *volatile)v120, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v87 = (void *)v120;
                      if ((void)v120)
                      {
                        *(void *)&v105[0] = v120 + 8;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
LABEL_154:
                        uint64_t v85 = v87;
                        uint64_t v86 = 0x1020C405E66F15BLL;
                        goto LABEL_159;
                      }
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add((atomic_ullong *volatile)v120, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v95 = (void *)v120;
                      if ((void)v120)
                      {
                        boost::detail::shared_count::~shared_count((atomic_uint **)(v120 + 16));
                        uint64_t v85 = v95;
                        unsigned int v92 = -235920773;
                        goto LABEL_158;
                      }
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add((atomic_ullong *volatile)v120, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      std::string v88 = (void *)v120;
                      if ((void)v120)
                      {
                        v89 = *(void **)(v120 + 48);
                        if (v89)
                        {
                          *(void *)(v120 + 56) = v89;
                          operator delete(v89);
                        }
                        v90 = (void *)v88[3];
                        if (v90)
                        {
                          v88[4] = v90;
                          operator delete(v90);
                        }
                        v91 = (std::__shared_weak_count *)v88[2];
                        if (v91) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v91);
                        }
                        uint64_t v85 = v88;
                        unsigned int v92 = 2071181815;
LABEL_158:
                        uint64_t v86 = v92 | 0x1030C4000000000;
LABEL_159:
                        MEMORY[0x22A614FA0](v85, v86);
                      }
                    }
                    break;
                  default:
                    break;
                }
              }
              else
              {
                switch(*(unsigned char *)(v70 + 12))
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v71 = *(atomic_ullong *volatile *)v70;
                      if (!*(void *)v70) {
                        goto LABEL_124;
                      }
                      if (*((char *)v71 + 31) < 0) {
                        operator delete((void *)v71[1]);
                      }
                      atomic_ullong *volatile v72 = v71;
                      uint64_t v73 = 0x1012C404EF22A49;
                      goto LABEL_123;
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v80 = *(atomic_ullong *volatile *)v70;
                      if (!*(void *)v70) {
                        goto LABEL_124;
                      }
                      v81 = (void *)v80[1];
                      if (v81)
                      {
                        v80[2] = (atomic_ullong)v81;
                        operator delete(v81);
                      }
                      atomic_ullong *volatile v72 = v80;
                      uint64_t v73 = 0x1080C409938AC02;
                      goto LABEL_123;
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)v70;
                      if (!*(void *)v70) {
                        goto LABEL_124;
                      }
                      *(void *)&v105[0] = v74 + 1;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
                      goto LABEL_118;
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v74 = *(atomic_ullong *volatile *)v70;
                      if (!*(void *)v70) {
                        goto LABEL_124;
                      }
                      *(void *)&v105[0] = v74 + 1;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v105);
LABEL_118:
                      atomic_ullong *volatile v72 = v74;
                      uint64_t v73 = 0x1020C405E66F15BLL;
                      goto LABEL_123;
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v82 = *(atomic_ullong *volatile *)v70;
                      if (!*(void *)v70) {
                        goto LABEL_124;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)v82 + 2);
                      atomic_ullong *volatile v72 = v82;
                      unsigned int v79 = -235920773;
                      goto LABEL_122;
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v70, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v75 = *(atomic_ullong *volatile *)v70;
                      if (*(void *)v70)
                      {
                        unint64_t v76 = (void *)v75[6];
                        if (v76)
                        {
                          v75[7] = (atomic_ullong)v76;
                          operator delete(v76);
                        }
                        uint64_t v77 = (void *)v75[3];
                        if (v77)
                        {
                          v75[4] = (atomic_ullong)v77;
                          operator delete(v77);
                        }
                        unint64_t v78 = (std::__shared_weak_count *)v75[2];
                        if (v78) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v78);
                        }
                        atomic_ullong *volatile v72 = v75;
                        unsigned int v79 = 2071181815;
LABEL_122:
                        uint64_t v73 = v79 | 0x1030C4000000000;
LABEL_123:
                        MEMORY[0x22A614FA0](v72, v73);
                      }
LABEL_124:
                      *(void *)uint64_t v70 = 0;
                    }
                    break;
                  default:
                    break;
                }
                uint64_t v83 = v120;
                *(void *)(v70 + 5) = *(void *)((char *)&v120 + 5);
                *(void *)uint64_t v70 = v83;
                *(unsigned char *)(v70 + 12) = BYTE12(v120);
              }
              ++v69;
              uint64_t v68 = *((void *)&v109[1] + 1);
            }
            while (v69 < (uint64_t)(*(void *)&v109[2] - *((void *)&v109[1] + 1)) >> 3);
          }
          if (!*(void *)&v125[0]) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void, uint64_t *))(**(void **)&v125[0] + 48))(*(void *)&v125[0], v108);
          *(void *)&long long v120 = (char *)&v109[1] + 8;
          std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
          *(void *)&long long v120 = v109;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
          uint64_t v28 = v111;
        }
        while (v111 != v112);
      }
      *(void *)&long long v120 = v108;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    }
  }
  *(void *)&long long v120 = &v111;
  std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)v126 + 1);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100]((void *)v125 + 1);
  v96 = (void ***)std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](&v123);
  *(void *)&long long v123 = &v116;
  std::vector<turi::sarray_reader_buffer<std::string>>::__destroy_vector::operator()[abi:ne180100](v96);
}

void sub_2240BAAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  *(void *)(v45 - 208) = &a45;
  std::vector<turi::sarray_reader_buffer<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 208));
  _Unwind_Resume(a1);
}

uint64_t std::tuple<turi::groupby_aggregate_impl::groupby_element &,unsigned long &>::operator=[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element,unsigned long,0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)a1;
  std::vector<turi::flexible_type>::__vdeallocate(*(void ***)a1);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v4 + 3);
  *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
  BOOL v5 = *(void **)(a2 + 48);
  v4[5] = *(void **)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  v4[6] = v5;
  **(void **)(a1 + 8) = *(void *)(a2 + 56);
  return a1;
}

void std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    BOOL v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(v4 - 9);
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<std::unique_ptr<turi::group_aggregate_value>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  int v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 96))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<turi::group_aggregate_value>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    long long v15 = &v13[8 * v10];
    uint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    long long v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_2240BAEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<turi::group_aggregate_value>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::unique_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  int v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    void *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 96))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<turi::group_aggregate_value>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<turi::group_aggregate_value>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 96))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t::sa_buffer_t(turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t *this)
{
}

void sub_2240BB204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 64);
      a3 -= 64;
      *(void *)a3 = 0;
      *(void *)(v7 - 64) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 40) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 16) = *(void *)(a3 + 48);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 56);
      uint64_t v7 = *((void *)&v14 + 1) - 64;
      *((void *)&v14 + 1) -= 64;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::destroy[abi:ne180100](v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 64;
      uint64_t result = std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::sa_buffer_t>::destroy[abi:ne180100](v4, v1 - 64);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_descriptor>::__push_back_slow_path<turi::groupby_aggregate_impl::group_descriptor const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[40 * v3];
  long long v13 = &v7[40 * v6];
  std::allocator<turi::groupby_aggregate_impl::group_descriptor>::construct[abi:ne180100]<turi::groupby_aggregate_impl::group_descriptor,turi::groupby_aggregate_impl::group_descriptor const&>((uint64_t)(a1 + 2), v11, a2);
  char v12 = v11 + 40;
  std::vector<turi::groupby_aggregate_impl::group_descriptor>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::~__split_buffer(&v10);
  return v8;
}

void sub_2240BB5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<turi::groupby_aggregate_impl::group_descriptor>::construct[abi:ne180100]<turi::groupby_aggregate_impl::group_descriptor,turi::groupby_aggregate_impl::group_descriptor const&>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  uint64_t v6 = *(void *)(a3 + 32);
  a2[3] = *(void *)(a3 + 24);
  a2[4] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_descriptor>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      long long v8 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(v7 - 24) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 24);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::group_descriptor>,std::reverse_iterator<turi::groupby_aggregate_impl::group_descriptor*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::groupby_aggregate_impl::group_descriptor>::destroy[abi:ne180100](v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::groupby_aggregate_impl::group_descriptor>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 40;
    std::allocator<turi::groupby_aggregate_impl::group_descriptor>::destroy[abi:ne180100](v4, i - 40);
  }
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__append(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v3 - 8);
  if (0x8E38E38E38E38E39 * ((v5 - v6) >> 3) < a2)
  {
    unint64_t v7 = 0x8E38E38E38E38E39 * ((v6 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 <= 0x38E38E38E38E38ELL)
    {
      unint64_t v9 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
      if (2 * v9 > v8) {
        unint64_t v8 = 2 * v9;
      }
      if (v9 >= 0x1C71C71C71C71C7) {
        unint64_t v10 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v10) {
        uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>(v3, v10);
      }
      else {
        uint64_t v11 = 0;
      }
      long long v13 = &v11[72 * v7];
      *((void *)v13 + 8) = 0;
      *((_OWORD *)v13 + 2) = 0u;
      *((_OWORD *)v13 + 3) = 0u;
      *(_OWORD *)long long v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(v13);
    }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  return std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__construct_at_end((uint64_t)a1, a2);
}

void sub_2240BB9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (a2)
  {
    *(void *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map((void *)v2);
  }
  *(void *)(result + 8) = v2;
  return result;
}

void sub_2240BBA4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>,std::reverse_iterator<turi::groupby_aggregate_impl::group_aggregate_container::segment_information*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5) {
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(a7 - 72, a3 - 72);
  }
  return a6;
}

void sub_2240BBB54(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 72)
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map((uint64_t *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

void turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::create_new_container();
}

void sub_2240BBC08(_Unwind_Exception *a1)
{
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v1);
  _Unwind_Resume(a1);
}

void turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::create_new_container()
{
}

void sub_2240BBC7C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C40CC2D9803);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element>>::__assign_with_size[abi:ne180100]<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element*,turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element*>((void *)a1, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

void *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::hopscotch_table(void *a1, uint64_t a2, char a3, char a4)
{
  unint64_t v6 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1) | (((a2 - 1) | ((unint64_t)(a2 - 1) >> 1)) >> 2);
  unint64_t v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  uint64_t result = std::vector<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element>>::vector(a1, (v7 | (v7 >> 16) | ((v7 | (v7 >> 16)) >> 32)) + 33);
  *((unsigned char *)result + 24) = a3;
  *((unsigned char *)result + 25) = a4;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3) - 33;
  result[4] = 0;
  result[5] = v9;
  return result;
}

void *std::vector<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2240BBDD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element>>::__assign_with_size[abi:ne180100]<turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element*,turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::element*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (void *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    long long v14 = (void *)a1[1];
    long long v13 = (void **)(a1 + 1);
    uint64_t result = v14;
    long long v15 = (char *)v14;
    if (v6 != a3)
    {
      long long v15 = (char *)result;
      do
      {
        long long v16 = *v6;
        *((void *)v15 + 2) = *((void *)v6 + 2);
        *(_OWORD *)long long v15 = v16;
        v15 += 24;
        unint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
LABEL_25:
    int64_t v25 = v15 - (char *)result;
    goto LABEL_26;
  }
  uint64_t v18 = (void *)a1[1];
  long long v13 = (void **)(a1 + 1);
  uint64_t v17 = v18;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v18 - result);
  if (v19 >= a4)
  {
    long long v15 = (char *)result;
    if (a2 != a3)
    {
      atomic_ullong *volatile v26 = result;
      do
      {
        *(_DWORD *)atomic_ullong *volatile v26 = *(_DWORD *)v6;
        uint64_t v27 = *((void *)v6 + 2);
        v26[1] = *((void *)v6 + 1);
        v26[2] = v27;
        v15 += 24;
        unint64_t v6 = (long long *)((char *)v6 + 24);
        v26 += 3;
      }
      while (v6 != a3);
    }
    goto LABEL_25;
  }
  uint64_t v20 = (long long *)((char *)a2 + 24 * v19);
  if (v17 != result)
  {
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v6;
      uint64_t v21 = *((void *)v6 + 2);
      result[1] = *((void *)v6 + 1);
      result[2] = v21;
      unint64_t v6 = (long long *)((char *)v6 + 24);
      result += 3;
    }
    while (v6 != v20);
    uint64_t result = *v13;
  }
  uint64_t v22 = (char *)result;
  if (v20 != a3)
  {
    uint64_t v22 = (char *)result;
    unint64_t v23 = result;
    do
    {
      long long v24 = *v20;
      v23[2] = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v23 = v24;
      v23 += 3;
      uint64_t v20 = (long long *)((char *)v20 + 24);
      v22 += 24;
    }
    while (v20 != a3);
  }
  int64_t v25 = v22 - (char *)result;
LABEL_26:
  *long long v13 = (void *)((char *)result + v25);
  return result;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::assign<std::integral_constant<BOOL,true>>(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)a1 | 2;
  *(unsigned char *)a1 = v4;
  float v5 = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = v5;
  unint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    double v7 = v5 * (double)*(unint64_t *)(a1 + 8);
    unint64_t v8 = vcvtpd_u64_f64(v7);
    if (ceil(v7) >= 1.84467441e19) {
      unint64_t v8 = -1;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  *(void *)(a1 + 32) = v8;
  unint64_t v9 = *(void *)(a2 + 16);
  if (v9 <= v8)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v11 = *(void *)(a1 + 8);
      if (v11) {
        bzero(v6, 8 * v11);
      }
    }
  }
  else
  {
    unint64_t v10 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::min_buckets_for_size(a1, v9);
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets(a1, v10);
    char v4 = *(unsigned char *)a1;
  }
  *(unsigned char *)a1 = v4 ^ 3;
  return boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::assign_buckets((void *)a1, (void *)a2);
}

void sub_2240BC088(void *a1)
{
  __cxa_begin_catch(a1);
  if ((*v1 & 2) != 0) {
    *v1 &= 1u;
  }
  __cxa_rethrow();
}

void sub_2240BC0A4(_Unwind_Exception *a1)
{
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets(uint64_t a1, unint64_t a2)
{
  char v4 = *(void **)(a1 + 40);
  unint64_t v5 = a2 + 1;
  unint64_t v6 = (a2 + 1) >> 61;
  if (v4)
  {
    if (!v6)
    {
      uint64_t v7 = v4[*(void *)(a1 + 8)];
      unint64_t v8 = operator new(8 * v5);
      operator delete(v4);
      goto LABEL_6;
    }
LABEL_11:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  if (v6) {
    goto LABEL_11;
  }
  unint64_t v8 = operator new(8 * v5);
  uint64_t v7 = 0;
LABEL_6:
  *(void *)(a1 + 8) = a2;
  double v9 = (double)a2 * *(float *)(a1 + 24);
  unint64_t v10 = vcvtpd_u64_f64(v9);
  if (ceil(v9) >= 1.84467441e19) {
    unint64_t v10 = -1;
  }
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v8;
  if (a2) {
    bzero(v8, 8 * a2);
  }
  *((void *)v8 + a2) = v7;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::min_buckets_for_size(uint64_t a1, unint64_t a2)
{
  double v2 = floor((double)a2 / *(float *)(a1 + 24)) + 1.0;
  if (v2 >= 1.84467441e19) {
    unint64_t v3 = -1;
  }
  else {
    unint64_t v3 = (unint64_t)v2;
  }
  unint64_t v4 = 38;
  unint64_t v5 = (char *)&boost::unordered::detail::prime_list_template<unsigned long>::value;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[8 * (v4 >> 1)];
    unint64_t v9 = *(void *)v7;
    unint64_t v8 = v7 + 8;
    v4 += ~(v4 >> 1);
    if (v9 < v3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  unint64_t v10 = (char *)&unk_2246C7F28;
  if (v5 != "NSt3__117bad_function_callE") {
    unint64_t v10 = v5;
  }
  return *(void *)v10;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::assign_buckets(void *a1, void *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  long long v15 = (char *)a1 + 3;
  if (a1[2])
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = a1[5];
    unint64_t v5 = *(_OWORD **)(v4 + 8 * v3);
    uint64_t v17 = v5;
    *(void *)(v4 + 8 * v3) = 0;
    a1[2] = 0;
  }
  else
  {
    unint64_t v5 = 0;
  }
  if (a2[2])
  {
    unint64_t v6 = *(void **)(a2[5] + 8 * a2[1]);
    if (v6)
    {
      do
      {
        unint64_t v7 = v6[2];
        if (v5)
        {
          unint64_t v8 = *(_OWORD **)v5;
          *(void *)unint64_t v5 = 0;
        }
        else
        {
          unint64_t v5 = operator new(0x20uLL);
          unint64_t v8 = 0;
          _OWORD *v5 = 0u;
          v5[1] = 0u;
        }
        v5[1] = *((_OWORD *)v6 + 1);
        unint64_t v9 = a1[1];
        unint64_t v10 = v7 % v9;
        uint64_t v11 = a1[5];
        *((void *)v5 + 1) = (v7 % v9) & 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v12 = *(void **)(v11 + 8 * (v7 % v9));
        if (v12)
        {
          *(void *)unint64_t v5 = *v12;
          uint64_t v13 = *(void *)(v11 + 8 * v10);
        }
        else
        {
          uint64_t v13 = v11 + 8 * v9;
          if (*(void *)v13) {
            *(void *)(v11 + 8 * *(void *)(*(void *)v13 + 8)) = v5;
          }
          *(void *)(v11 + 8 * v10) = v13;
          *(void *)unint64_t v5 = *(void *)v13;
        }
        *(void *)uint64_t v13 = v5;
        ++a1[2];
        unint64_t v6 = (void *)*v6;
        unint64_t v5 = v8;
      }
      while (v6);
      uint64_t v16 = 0;
      uint64_t v17 = v8;
    }
  }
  return boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder((uint64_t)&v15);
}

void sub_2240BC334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder(uint64_t a1)
{
  for (uint64_t i = *(void **)(a1 + 16); i; uint64_t i = *(void **)(a1 + 16))
  {
    *(void *)(a1 + 16) = *i;
    operator delete(i);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(void *a1)
{
  double v2 = (void *)a1[5];
  if (v2)
  {
    uint64_t v3 = (void *)v2[a1[1]];
    if (v3)
    {
      do
      {
        uint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
      double v2 = (void *)a1[5];
    }
    operator delete(v2);
    a1[2] = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
}

uint64_t std::__split_buffer<turi::groupby_aggregate_impl::group_aggregate_container::segment_information>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map((uint64_t *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::find@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  v14[0] = *a2;
  v14[1] = 0;
  unint64_t v6 = *(uint64_t **)a1;
  uint64_t result = turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find(*(uint64_t **)a1, v14);
  uint64_t v9 = v8;
  if (v6 == *(uint64_t **)a1 && v8 == *(void *)(*(void *)a1 + 8))
  {
    uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>((void *)(a1 + 8), *a2, a2);
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 24) = result;
    BOOL v13 = *(uint64_t **)a1 == v6 && *(void *)(*(void *)a1 + 8) == v9;
    *(unsigned char *)(a3 + 32) = v13;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11) {
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8 * *(void *)(a1 + 16));
    }
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = v8;
    *(void *)(a3 + 24) = v11;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::do_insert@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::insert_impl(*(uint64_t **)a1, a2, 1);
  uint64_t v8 = result;
  uint64_t v9 = v7;
  if (*(uint64_t **)a1 == result && *(void *)(*(void *)a1 + 8) == v7)
  {
    if ((float)((float)(unint64_t)(*(void *)(a1 + 24) + result[4])
               / (float)(unint64_t)(*(void *)(a1 + 24) - 0x5555555555555555 * ((v7 - *result) >> 3))) > 0.8)
      turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::rehash_to_new_container();
    uint64_t result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::emplace_unique<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> const&>((void *)(a1 + 8), a2, a2);
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 24) = result;
    BOOL v13 = *(uint64_t **)a1 == v8 && *(void *)(*(void *)a1 + 8) == v9;
    *(unsigned char *)(a3 + 32) = v13;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11) {
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8 * *(void *)(a1 + 16));
    }
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = v7;
    *(void *)(a3 + 24) = v11;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find(uint64_t *a1, void *a2)
{
  unint64_t v2 = 17 * ((4097 * *a2) ^ ((unint64_t)(4097 * *a2) >> 22));
  unint64_t v3 = 129 * ((1025 * (v2 ^ (v2 >> 9))) ^ ((1025 * (v2 ^ (v2 >> 9))) >> 2));
  return turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find_impl(a1, a2, (v3 ^ (v3 >> 12)) & a1[5]);
}

uint64_t *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find_impl(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *result;
  unsigned int v4 = *(_DWORD *)(*result + 24 * a3);
  if (v4 >= 2)
  {
    unsigned int v5 = v4 >> 1;
    do
    {
      uint64_t v6 = __clz(__rbit32(v5));
      if ((*(unsigned char *)(v3 + 24 * (v6 + a3)) & 1) != 0 && *(void *)(v3 + 24 * (v6 + a3) + 8) == *a2) {
        break;
      }
      v5 &= ~(1 << v6);
    }
    while (v5);
  }
  return result;
}

void *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>(void *a1, unint64_t a2, void *a3)
{
  if (!a1[2]) {
    return 0;
  }
  unint64_t v3 = a2 % a1[1];
  unsigned int v4 = *(void **)(a1[5] + 8 * v3);
  if (!v4) {
    return 0;
  }
  uint64_t result = (void *)*v4;
  if (!*v4) {
    return result;
  }
LABEL_4:
  if (*a3 != result[2])
  {
    if ((result[1] & 0x7FFFFFFFFFFFFFFFLL) == v3)
    {
      while (1)
      {
        uint64_t result = (void *)*result;
        if (!result) {
          return result;
        }
        if ((result[1] & 0x8000000000000000) == 0) {
          goto LABEL_4;
        }
      }
    }
    return 0;
  }
  return result;
}

void turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::rehash_to_new_container()
{
}

void sub_2240BC954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::insert_impl(uint64_t *a1, void *a2, int a3)
{
  unsigned int v4 = a1;
  unint64_t v5 = 17 * ((4097 * *a2) ^ ((unint64_t)(4097 * *a2) >> 22));
  unint64_t v6 = 129 * ((1025 * (v5 ^ (v5 >> 9))) ^ ((1025 * (v5 ^ (v5 >> 9))) >> 2));
  unint64_t v7 = (v6 ^ (v6 >> 12)) & a1[5];
  uint64_t v8 = turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::try_find_and_overwrite(a1, a2, v7, a3);
  if (v8 != v4 || v4[1] != v9) {
    return v8;
  }
  uint64_t v11 = *v4;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v4) >> 3);
  if (v7 + 620 < v12) {
    unint64_t v12 = v7 + 620;
  }
  BOOL v24 = v7 >= v12;
  unint64_t v13 = v7 - v12;
  if (!v24)
  {
    uint64_t v14 = 0;
    for (uint64_t i = 24 * v7; (*(unsigned char *)(v11 + i) & 1) != 0; i += 24)
    {
      if (v13 == --v14) {
        return v4;
      }
    }
    uint64_t v16 = -v14;
    uint64_t v17 = v7 - v14;
    if ((unint64_t)-v14 >= 0x1F)
    {
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = *v4;
        uint64_t v20 = 24 * v17 - 720;
        unint64_t v21 = 30;
        while (1)
        {
          unsigned int v22 = *(_DWORD *)(v19 + v20);
          unint64_t v23 = __clz(__rbit32(v22 >> 1));
          BOOL v24 = v22 >= 2 && v21 >= v23;
          if (v24) {
            break;
          }
          v20 += 24;
          if (!--v21) {
            return v4;
          }
        }
        uint64_t v25 = v18 + v23;
        uint64_t v17 = v25 - v21;
        unint64_t v26 = v19 + 24 * (v25 - v21);
        uint64_t v27 = v19 + 24 * v18;
        uint64_t v29 = *(void *)(v26 + 8);
        uint64_t v28 = *(void *)(v26 + 16);
        *(void *)(v27 + 8) = v29;
        *(void *)(v27 + 16) = v28;
        *(_DWORD *)v27 |= 1u;
        *(_DWORD *)(*v4 + 24 * (v25 - v21)) &= ~1u;
        uint64_t v30 = *v4;
        uint64_t v31 = *v4 + 24 * (v25 - v21);
        *(void *)(v31 + 8) = 0;
        *(void *)(v31 + 16) = 0;
        *(_DWORD *)(v30 + v20) = *(_DWORD *)(v30 + v20) & 1 | (2
                                                             * ((*(_DWORD *)(v30 + v20) >> 1) & ~(1 << v23) | (1 << v21)));
      }
      while (v25 - v7 - v21 > 0x1E);
      uint64_t v11 = *v4;
      LOBYTE(v16) = v18 - v7 + v23 - v21;
    }
    uint64_t v32 = v11 + 24 * v17;
    uint64_t v33 = a2[1];
    int v34 = *(_DWORD *)(v11 + 24 * v7);
    *(void *)(v32 + 8) = *a2;
    *(void *)(v32 + 16) = v33;
    *(_DWORD *)(v11 + 24 * v7) = v34 | (2 << v16);
    *(_DWORD *)(*v4 + 24 * v17) |= 1u;
    ++v4[4];
  }
  return v4;
}

uint64_t *turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::try_find_and_overwrite(uint64_t *a1, void *a2, uint64_t a3, int a4)
{
  turi::hopscotch_table<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hash_redirect,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::key_equal_redirect>::find_impl(a1, a2, a3);
  if (v7 != a1[1] && a4 != 0)
  {
    uint64_t v9 = a2[1];
    uint64_t v10 = *a1 + 8 * ((v7 - *a1) >> 3);
    *(void *)(v10 + 8) = *a2;
    *(void *)(v10 + 16) = v9;
  }
  return a1;
}

void std::swap[abi:ne180100]<boost::unordered::unordered_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>(uint64_t a1, uint64_t a2)
{
  LOBYTE(v5) = 0;
  long long v6 = *(_OWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::move_assign<std::integral_constant<BOOL,true>>(a1, a2);
  if (&v5 != (uint64_t *)a2)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets((void *)a2);
    *(_DWORD *)(a2 + 24) = v7;
    *(_OWORD *)(a2 + 8) = v6;
    uint64_t v4 = v9;
    *(void *)(a2 + 32) = v8;
    *(void *)(a2 + 40) = v4;
    *((void *)&v6 + 1) = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(&v5);
}

__n128 boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::move_assign<std::integral_constant<BOOL,true>>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets((void *)a1);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    __n128 result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  return result;
}

void *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::emplace_unique<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> const&>(void *a1, unint64_t *a2, void *a3)
{
  unint64_t v5 = *a2;
  long long v6 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::find_node_impl<unsigned long,std::equal_to<unsigned long>>(a1, *a2, a2);
  if (v6) {
    return v6;
  }
  int v7 = operator new(0x20uLL);
  *int v7 = 0;
  v7[1] = 0;
  uint64_t v8 = a3[1];
  _OWORD v7[2] = *a3;
  v7[3] = v8;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::reserve_for_insert(a1, a1[2] + 1);
  unint64_t v9 = a1[1];
  unint64_t v10 = v5 % v9;
  uint64_t v11 = a1[5];
  v7[1] = (v5 % v9) & 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void **)(v11 + 8 * (v5 % v9));
  if (v12)
  {
    *int v7 = *v12;
    uint64_t v13 = *(void *)(v11 + 8 * v10);
  }
  else
  {
    uint64_t v13 = v11 + 8 * v9;
    if (*(void *)v13) {
      *(void *)(v11 + 8 * *(void *)(*(void *)v13 + 8)) = v7;
    }
    *(void *)(v11 + 8 * v10) = v13;
    *int v7 = *(void *)v13;
  }
  *(void *)uint64_t v13 = v7;
  ++a1[2];
  return v7;
}

void sub_2240BCDD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::reserve_for_insert(void *a1, unint64_t a2)
{
  if (a1[5])
  {
    if (a1[4] < a2)
    {
      if (a1[2] + (a1[2] >> 1) > a2) {
        a2 = a1[2] + (a1[2] >> 1);
      }
      unint64_t v3 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::min_buckets_for_size((uint64_t)a1, a2);
      if (v3 != a1[1])
      {
        boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets((uint64_t)a1, v3);
        unint64_t v4 = a1[1];
        uint64_t v5 = a1[5];
        long long v6 = (void *)(v5 + 8 * v4);
        int v7 = (void *)*v6;
        if (*v6)
        {
          do
          {
            unint64_t v8 = v7[2] % v4;
            v7[1] = v8 & 0x7FFFFFFFFFFFFFFFLL;
            unint64_t v9 = (void *)*v7;
            if (*v7 && (v9[1] & 0x8000000000000000) != 0)
            {
              do
              {
                int v7 = v9;
                v9[1] = v8 | 0x8000000000000000;
                unint64_t v9 = (void *)*v9;
              }
              while (v9 && (v9[1] & 0x8000000000000000) != 0);
            }
            unint64_t v10 = *(void **)(v5 + 8 * v8);
            if (v10)
            {
              *int v7 = *v10;
              **(void **)(v5 + 8 * v8) = *v6;
              *long long v6 = v9;
            }
            else
            {
              *(void *)(v5 + 8 * v8) = v6;
              unint64_t v9 = (void *)*v7;
              long long v6 = v7;
            }
            int v7 = v9;
          }
          while (v9);
        }
      }
    }
  }
  else
  {
    unint64_t v11 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::min_buckets_for_size((uint64_t)a1, a2);
    if (a1[1] <= v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = a1[1];
    }
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets((uint64_t)a1, v12);
  }
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::__push_back_slow_path<turi::groupby_aggregate_impl::groupby_element>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v7, v9);
  unint64_t v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[56 * v12];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)unint64_t v11 = 0;
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  v15[2] = v11 + 56;
  std::vector<turi::groupby_aggregate_impl::groupby_element>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_2240BD040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      long long v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(v7 - 40) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 16) = *(void *)(a3 + 40);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 + 48);
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>,std::reverse_iterator<std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>,std::reverse_iterator<std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = i + 3;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = i;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t i = (void **)(*(void *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (void **)(i - 56);
    *(void *)(a1 + 16) = i - 56;
    uint64_t v6 = (void **)(i - 32);
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = v5;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

void turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::hopscotch_map(void *a1)
{
  *a1 = 0;
  boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>::unordered_map((uint64_t)(a1 + 1));
  turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::create_new_container();
}

void sub_2240BD3AC(_Unwind_Exception *a1)
{
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v1);
  _Unwind_Resume(a1);
}

uint64_t *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(uint64_t *a1)
{
  return a1;
}

void *turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::destroy_all(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x22A614FA0](v2, 0x1020C40CC2D9803);
  }
  uint64_t result = boost::unordered::unordered_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>::clear(a1 + 1);
  *a1 = 0;
  return result;
}

void *boost::unordered::unordered_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    uint64_t v3 = result[5];
    if (v2) {
      bzero((void *)result[5], 8 * v2);
    }
    uint64_t result = *(void **)(v3 + 8 * v2);
    *(void *)(v3 + 8 * v2) = 0;
    v1[2] = 0;
    if (result)
    {
      do
      {
        uint64_t v4 = (void *)*result;
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4);
    }
  }
  return result;
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator,turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator,std::insert_iterator<std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>@<Q0>(uint64_t a1@<X1>, void *a2@<X2>, __n128 **a3@<X3>, __n128 *a4@<X4>, uint64_t a5@<X8>)
{
  while (1)
  {
    if (*(void *)a1 != *a2) {
      goto LABEL_7;
    }
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v10 = a2[3];
      uint64_t v11 = *(void *)(a1 + 24);
      goto LABEL_4;
    }
    if (*(void *)(a1 + 8) == a2[1]) {
      break;
    }
LABEL_7:
    if (*(unsigned char *)(a1 + 32)) {
      uint64_t v12 = (__n128 *)(*(void *)(a1 + 24) + 16);
    }
    else {
      uint64_t v12 = (__n128 *)(*(void *)(a1 + 16) + 8);
    }
    a4 = std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::insert(a3, (uint64_t)a4, v12)+ 1;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator::operator++((uint64_t **)a1, (uint64_t)v15);
  }
  uint64_t v10 = a2[2];
  uint64_t v11 = *(void *)(a1 + 16);
LABEL_4:
  if (v11 != v10) {
    goto LABEL_7;
  }
  __n128 result = *(__n128 *)a1;
  long long v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v14;
  *(void *)(a5 + 32) = *(void *)(a1 + 32);
  *(void *)(a5 + 40) = a3;
  *(void *)(a5 + 48) = a4;
  return result;
}

__n128 turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::iterator::operator++@<Q0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)a1 + 32))
  {
    a1[3] = (uint64_t *)*a1[3];
  }
  else
  {
    uint64_t v2 = a1[1];
    uint64_t v3 = (uint64_t *)v2[1];
    uint64_t v4 = a1[2] + 3;
    while (1)
    {
      a1[2] = v4;
      if (v4 == v3) {
        break;
      }
      char v5 = *(unsigned char *)v4;
      v4 += 3;
      if (v5)
      {
        uint64_t v3 = v4 - 3;
        break;
      }
    }
    uint64_t v6 = **a1;
    if (v2 == (uint64_t *)v6 && v3 == *(uint64_t **)(v6 + 8)) {
      *((unsigned char *)a1 + 32) = 1;
    }
  }
  __n128 result = *(__n128 *)a1;
  long long v9 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v9;
  *(void *)(a2 + 32) = a1[4];
  return result;
}

__n128 *std::vector<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::insert(__n128 **a1, uint64_t a2, __n128 *a3)
{
  char v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  long long v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = (unint64_t)a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v11 = v12;
  if ((unint64_t)v6 >= v12)
  {
    unint64_t v17 = v6 - v5 + 1;
    if (v17 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = v11 - (void)v5;
    if (v18 >> 3 > v17) {
      unint64_t v17 = v18 >> 3;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v39 = v10;
    if (v19) {
      uint64_t v20 = (__n128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v10, v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v35 = v20;
    atomic_ullong *volatile v36 = &v20[v8];
    __n128 v37 = v36;
    atomic_ullong *volatile v38 = (char *)&v20[v19];
    std::__split_buffer<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::push_back((void **)&v35, a3);
    BOOL v24 = v36;
    uint64_t v25 = *a1;
    unint64_t v26 = v36;
    if (*a1 != v9)
    {
      uint64_t v27 = v9;
      uint64_t v28 = v36;
      do
      {
        unint64_t v26 = v28 - 1;
        v28[-1] = v27[-1];
        --v27;
        --v28;
      }
      while (v27 != v25);
    }
    atomic_ullong *volatile v36 = v26;
    uint64_t v29 = a1[1];
    uint64_t v30 = v37;
    if (v29 != v9)
    {
      do
      {
        __n128 v31 = *v9++;
        *v30++ = v31;
      }
      while (v9 != v29);
      unint64_t v26 = v36;
      long long v9 = a1[1];
    }
    uint64_t v32 = *a1;
    *a1 = v26;
    a1[1] = v30;
    uint64_t v33 = a1[2];
    a1[2] = (__n128 *)v38;
    __n128 v37 = v9;
    atomic_ullong *volatile v38 = (char *)v33;
    uint64_t v35 = v32;
    atomic_ullong *volatile v36 = v32;
    if (v9 != v32) {
      __n128 v37 = (__n128 *)((char *)v9 + (((char *)v32 - (char *)v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    if (v32) {
      operator delete(v32);
    }
    return v24;
  }
  else if (v9 == v6)
  {
    *long long v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    long long v13 = v9 + 1;
    long long v14 = v6 - 1;
    uint64_t v15 = v6;
    while (v14 < v6)
    {
      __n128 v16 = *v14++;
      *v15++ = v16;
    }
    a1[1] = v15;
    if (v6 != v13)
    {
      uint64_t v21 = v6 - v13;
      unsigned int v22 = &v6[-1].n128_u64[1];
      uint64_t v23 = v21;
      do
      {
        *(v22 - 1) = v9[v23 - 1].n128_u64[0];
        *unsigned int v22 = v9[v23 - 1].n128_u64[1];
        v22 -= 2;
        --v23;
      }
      while (v23 * 16);
    }
    v9->n128_u64[0] = a3->n128_u64[0];
    v5[v8].n128_u64[1] = a3->n128_u64[1];
  }
  return v9;
}

void sub_2240BD800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__split_buffer<std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>::push_back(void **a1, __n128 *a2)
{
  uint64_t v4 = (__n128 *)a1[2];
  char v5 = v4;
  if (v4 == a1[3])
  {
    uint64_t v6 = (char *)a1[1];
    uint64_t v7 = v6 - (unsigned char *)*a1;
    if (v6 <= *a1)
    {
      uint64_t v19 = (char *)v4 - (unsigned char *)*a1;
      BOOL v18 = v19 == 0;
      uint64_t v20 = v19 >> 3;
      if (v18) {
        unint64_t v21 = 1;
      }
      else {
        unint64_t v21 = v20;
      }
      unsigned int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)a1[4], v21);
      BOOL v24 = (__n128 *)&v22[16 * (v21 >> 2)];
      uint64_t v25 = (long long *)a1[1];
      char v5 = v24;
      uint64_t v26 = (unsigned char *)a1[2] - (unsigned char *)v25;
      if (v26)
      {
        char v5 = (__n128 *)((char *)v24 + (v26 & 0xFFFFFFFFFFFFFFF0));
        uint64_t v27 = 16 * (v26 >> 4);
        uint64_t v28 = &v22[16 * (v21 >> 2)];
        do
        {
          long long v29 = *v25++;
          *(_OWORD *)uint64_t v28 = v29;
          v28 += 16;
          v27 -= 16;
        }
        while (v27);
      }
      uint64_t v30 = *a1;
      *a1 = v22;
      a1[1] = v24;
      a1[2] = v5;
      a1[3] = &v22[16 * v23];
      if (v30)
      {
        operator delete(v30);
        char v5 = (__n128 *)a1[2];
      }
    }
    else
    {
      uint64_t v8 = v7 >> 4;
      BOOL v9 = v7 >> 4 < -1;
      uint64_t v10 = (v7 >> 4) + 2;
      if (v9) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v8 + 1;
      }
      unint64_t v12 = (__n128 *)&v6[-16 * (v11 >> 1)];
      char v5 = v12;
      if (v6 != (char *)v4)
      {
        uint64_t v13 = -(v11 >> 1);
        uint64_t v14 = -16 * (v11 >> 1);
        do
        {
          uint64_t v15 = &v6[v14];
          uint64_t v16 = *(void *)v6;
          uint64_t v17 = *((void *)v6 + 1);
          v6 += 16;
          *(void *)uint64_t v15 = v16;
          *((void *)v15 + 1) = v17;
        }
        while (v6 != (char *)v4);
        char v5 = (__n128 *)&v6[16 * v13];
      }
      a1[1] = v12;
      a1[2] = v5;
    }
  }
  __n128 result = *a2;
  __n128 *v5 = *a2;
  a1[2] = (char *)a1[2] + 16;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v25 = *(a2 - 2);
          unint64_t v26 = *v11;
          if (v25 >= *v11)
          {
            if (v26 < v25) {
              return result;
            }
            unint64_t v28 = *(a2 - 1);
            unint64_t v27 = v11[1];
            if (v28 >= v27) {
              return result;
            }
          }
          else
          {
            unint64_t v27 = v11[1];
            unint64_t v28 = *(a2 - 1);
          }
          unint64_t *v11 = v25;
          v11[1] = v28;
          *(a2 - 2) = v26;
          *(a2 - 1) = v27;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, v11 + 2, a2 - 2);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, v11 + 2, v11 + 4, a2 - 2);
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      unint64_t v18 = *v11;
      unint64_t v19 = v11[1];
      unint64_t v20 = v17[1];
      unint64_t *v11 = *v17;
      v11[1] = v20;
      *uint64_t v17 = v18;
      v17[1] = v19;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v21 = *(v11 - 2);
    if (v21 >= *v11 && (*v11 < v21 || *(v11 - 1) >= v11[1]))
    {
      __n128 result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::__less<void,void> &>(v11, a2);
      uint64_t v11 = (unint64_t *)result;
      goto LABEL_21;
    }
LABEL_16:
    unsigned int v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::__less<void,void> &>(v11, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, v22);
    uint64_t v11 = v22 + 2;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v22 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_19:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,false>(v10, v22, a3, -v13, a5 & 1);
      uint64_t v11 = v22 + 2;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, a2);
  }
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *result, unint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    char v5 = v4;
    uint64_t v4 = v2;
    unint64_t v6 = v5[2];
    unint64_t v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      unint64_t v8 = v5[3];
      unint64_t v9 = v5[1];
      if (v8 >= v9) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v8 = v5[3];
      unint64_t v9 = v5[1];
    }
    v5[2] = v7;
    v4[1] = v9;
    uint64_t v10 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v11 = v3;
    while (1)
    {
      unint64_t v12 = *(unint64_t *)((char *)result + v11 - 16);
      if (v6 >= v12) {
        break;
      }
      unint64_t v13 = *(unint64_t *)((char *)result + v11 - 8);
LABEL_12:
      v5 -= 2;
      uint64_t v14 = (unint64_t *)((char *)result + v11);
      *uint64_t v14 = v12;
      v14[1] = v13;
      v11 -= 16;
      if (!v11)
      {
        uint64_t v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      uint64_t v10 = (unint64_t *)((char *)result + v11);
      unint64_t v13 = *(unint64_t *)((char *)result + v11 - 8);
      if (v8 >= v13) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    uint64_t v10 = v5;
LABEL_18:
    *uint64_t v10 = v6;
    v10[1] = v8;
LABEL_19:
    uint64_t v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      for (uint64_t i = result + 1; ; i += 2)
      {
        uint64_t v4 = result;
        __n128 result = v2;
        unint64_t v5 = v4[2];
        unint64_t v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v6 >= v5)
        {
          unint64_t v7 = v4[3];
          if (v7 < v4[1]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 2;
        if (result + 2 == a2) {
          return result;
        }
      }
      unint64_t v7 = v4[3];
LABEL_6:
      for (j = i; ; j -= 2)
      {
        unint64_t v9 = *j;
        j[1] = v6;
        j[2] = v9;
        unint64_t v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2))) {
          break;
        }
      }
      *(j - 1) = v5;
      unint64_t *j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    unint64_t v9 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v9) {
        return 0;
      }
      unint64_t v11 = a3[1];
      unint64_t v10 = a2[1];
      if (v11 >= v10) {
        return 0;
      }
    }
    else
    {
      unint64_t v10 = a2[1];
      unint64_t v11 = a3[1];
    }
    *a2 = v9;
    a2[1] = v11;
    *a3 = v3;
    a3[1] = v10;
    unint64_t v12 = *a2;
    unint64_t v13 = *a1;
    if (*a2 >= *a1)
    {
      if (v13 < v12) {
        return 1;
      }
      unint64_t v15 = a2[1];
      unint64_t v14 = a1[1];
      if (v15 >= v14) {
        return 1;
      }
    }
    else
    {
      unint64_t v14 = a1[1];
      unint64_t v15 = a2[1];
    }
    *a1 = v12;
    a1[1] = v15;
    uint64_t result = 2;
    *a2 = v13;
    a2[1] = v14;
  }
  else
  {
    unint64_t v5 = *a3;
    if (*a3 < v3)
    {
      unint64_t v6 = a3[1];
LABEL_6:
      unint64_t v7 = a1[1];
      *a1 = v5;
      a1[1] = v6;
      *a3 = v4;
      a3[1] = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      unint64_t v6 = a3[1];
      unint64_t v16 = a2[1];
      if (v6 < v16) {
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v16 = a2[1];
    }
    unint64_t v17 = a1[1];
    *a1 = v3;
    a1[1] = v16;
    *a2 = v4;
    a2[1] = v17;
    unint64_t v18 = *a3;
    if (*a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      unint64_t v19 = a3[1];
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      unint64_t v19 = a3[1];
    }
    *a2 = v18;
    a2[1] = v19;
    uint64_t result = 2;
    *a3 = v4;
    a3[1] = v17;
  }
  return result;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (uint64_t i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unint64_t v7 = i[2];
      i += 2;
      unint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      unint64_t v8 = *(a2 - 2);
      unint64_t v4 = v8;
    }
  }
  if (i < a2)
  {
    unint64_t v9 = *i;
    unint64_t v10 = *a2;
    do
    {
      unint64_t *i = v10;
      *a2 = v9;
      unint64_t v11 = i[2];
      i += 2;
      unint64_t v9 = v11;
      unint64_t v12 = *(i - 1);
      *(i - 1) = a2[1];
      a2[1] = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= i[1]))
      {
        unint64_t v13 = i[2];
        i += 2;
        unint64_t v9 = v13;
      }
      do
      {
        do
        {
          unint64_t v14 = *(a2 - 2);
          a2 -= 2;
          unint64_t v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    unint64_t v15 = *(i - 1);
    *a1 = *(i - 2);
    a1[1] = v15;
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  while (1)
  {
    unint64_t v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unint64_t v8 = *(a2 - 2);
      a2 -= 2;
      unint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        unint64_t v10 = *(a2 - 2);
        a2 -= 2;
        unint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unint64_t v13 = (unint64_t *)v6;
  }
  else
  {
    unint64_t v12 = *a2;
    unint64_t v13 = (unint64_t *)v6;
    unint64_t v14 = a2;
    do
    {
      unint64_t v15 = v13[1];
      unint64_t v16 = v14[1];
      *unint64_t v13 = v12;
      v13[1] = v16;
      *unint64_t v14 = v5;
      v14[1] = v15;
      do
      {
        do
        {
          unint64_t v17 = v13[2];
          v13 += 2;
          unint64_t v5 = v17;
        }
        while (v17 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        unint64_t v18 = *(v14 - 2);
        v14 -= 2;
        unint64_t v12 = v18;
      }
      while (v18 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    unint64_t v19 = *(v13 - 1);
    *a1 = *(v13 - 2);
    a1[1] = v19;
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        unint64_t v8 = a1[1];
        unint64_t v9 = *(a2 - 1);
LABEL_30:
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        unint64_t v9 = *(a2 - 1);
        unint64_t v8 = a1[1];
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a1 + 2, a1 + 4);
      unint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  unint64_t v14 = *v11;
  unint64_t v15 = *v10;
  if (*v11 >= *v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    unint64_t v16 = v11[1];
    unint64_t v17 = v10[1];
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v16 = v11[1];
    unint64_t v17 = v10[1];
  }
  unint64_t *v11 = v15;
  v11[1] = v17;
  unint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    unint64_t v20 = (char *)a1 + v19;
    unint64_t v21 = *(unint64_t *)((char *)a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        unint64_t v18 = v10;
        goto LABEL_20;
      }
      unint64_t v22 = *(unint64_t *)((char *)a1 + v19 + 24);
      if (v16 >= v22)
      {
        unint64_t v18 = (unint64_t *)((char *)a1 + v19 + 32);
LABEL_20:
        *unint64_t v18 = v14;
        v18[1] = v16;
        if (++v13 == 8) {
          return v11 + 2 == a2;
        }
LABEL_21:
        unint64_t v10 = v11;
        v12 += 16;
        v11 += 2;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v22 = *((void *)v20 + 3);
    }
    v10 -= 2;
    *((void *)v20 + 4) = v21;
    *(unint64_t *)((char *)a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      unint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a2, a3);
  unint64_t v9 = *a4;
  unint64_t v10 = *a3;
  if (*a4 >= *a3)
  {
    if (v10 < v9) {
      return result;
    }
    unint64_t v12 = a4[1];
    unint64_t v11 = a3[1];
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = a3[1];
    unint64_t v12 = a4[1];
  }
  *a3 = v9;
  a3[1] = v12;
  *a4 = v10;
  a4[1] = v11;
  unint64_t v13 = *a3;
  unint64_t v14 = *a2;
  if (*a3 >= *a2)
  {
    if (v14 < v13) {
      return result;
    }
    unint64_t v16 = a3[1];
    unint64_t v15 = a2[1];
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    unint64_t v15 = a2[1];
    unint64_t v16 = a3[1];
  }
  *a2 = v13;
  a2[1] = v16;
  *a3 = v14;
  a3[1] = v15;
  unint64_t v17 = *a2;
  unint64_t v18 = *a1;
  if (*a2 < *a1)
  {
    unint64_t v19 = a1[1];
    unint64_t v20 = a2[1];
LABEL_15:
    *a1 = v17;
    a1[1] = v20;
    *a2 = v18;
    a2[1] = v19;
    return result;
  }
  if (v18 >= v17)
  {
    unint64_t v20 = a2[1];
    unint64_t v19 = a1[1];
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *a4;
  if (*a5 >= *a4)
  {
    if (v12 < v11) {
      return result;
    }
    unint64_t v14 = a5[1];
    unint64_t v13 = a4[1];
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    unint64_t v13 = a4[1];
    unint64_t v14 = a5[1];
  }
  *a4 = v11;
  a4[1] = v14;
  *a5 = v12;
  a5[1] = v13;
  unint64_t v15 = *a4;
  unint64_t v16 = *a3;
  if (*a4 >= *a3)
  {
    if (v16 < v15) {
      return result;
    }
    unint64_t v18 = a4[1];
    unint64_t v17 = a3[1];
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    unint64_t v17 = a3[1];
    unint64_t v18 = a4[1];
  }
  *a3 = v15;
  a3[1] = v18;
  *a4 = v16;
  a4[1] = v17;
  unint64_t v19 = *a3;
  unint64_t v20 = *a2;
  if (*a3 >= *a2)
  {
    if (v20 < v19) {
      return result;
    }
    unint64_t v22 = a3[1];
    unint64_t v21 = a2[1];
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    unint64_t v21 = a2[1];
    unint64_t v22 = a3[1];
  }
  *a2 = v19;
  a2[1] = v22;
  *a3 = v20;
  a3[1] = v21;
  unint64_t v23 = *a2;
  unint64_t v24 = *a1;
  if (*a2 < *a1)
  {
    unint64_t v25 = a1[1];
    unint64_t v26 = a2[1];
LABEL_9:
    *a1 = v23;
    a1[1] = v26;
    *a2 = v24;
    a2[1] = v25;
    return result;
  }
  if (v24 >= v23)
  {
    unint64_t v26 = a2[1];
    unint64_t v25 = a1[1];
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      while (1)
      {
        unint64_t v15 = *v14;
        unint64_t v16 = *a1;
        if (*v14 >= *a1)
        {
          if (v16 < v15) {
            goto LABEL_12;
          }
          unint64_t v17 = v14[1];
          unint64_t v18 = a1[1];
          if (v17 >= v18) {
            goto LABEL_12;
          }
        }
        else
        {
          unint64_t v17 = v14[1];
          unint64_t v18 = a1[1];
        }
        *unint64_t v14 = v16;
        v14[1] = v18;
        *a1 = v15;
        a1[1] = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>((uint64_t)a1, a4, v9, a1);
LABEL_12:
        v14 += 2;
        if (v14 == a3)
        {
          unint64_t v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      uint64_t v19 = (unint64_t)v8 >> 4;
      unint64_t v20 = a2 - 2;
      do
      {
        unint64_t v22 = *a1;
        unint64_t v21 = a1[1];
        unint64_t v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *unint64_t v23 = v22;
          v23[1] = v21;
        }
        else
        {
          unint64_t v24 = v20[1];
          *unint64_t v23 = *v20;
          v23[1] = v24;
          *unint64_t v20 = v22;
          v20[1] = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>((uint64_t)a1, (uint64_t)(v23 + 2), a4, ((char *)(v23 + 2) - (char *)a1) >> 4);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(void *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *v8;
      unint64_t v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          unint64_t v14 = v8[1];
          unint64_t v13 = a4[1];
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          unint64_t v13 = a4[1];
          unint64_t v14 = v8[1];
        }
        *a4 = v11;
        a4[1] = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unint64_t v15 = (unint64_t *)(result + 16 * v7);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              unint64_t v18 = v15[2];
              if (*v15 < v18 || v18 >= *v15 && *(void *)(result + 16 * v7 + 8) < v15[3])
              {
                v15 += 2;
                uint64_t v7 = v17;
              }
            }
            unint64_t v19 = *v15;
            if (*v15 < v12) {
              break;
            }
            unint64_t v20 = v15[1];
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            unint64_t *v8 = v19;
            v8[1] = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v15 = v8;
LABEL_14:
        *unint64_t v15 = v12;
        v15[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unint64_t v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    unint64_t v11 = result[1];
    *uint64_t v6 = *result;
    v6[1] = v11;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    unint64_t v7 = *v6;
    unint64_t v8 = *(void *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      unint64_t v10 = *(void *)(result + 16 * v5 + 8);
      unint64_t v9 = *(void *)(a2 - 8);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *(void *)(a2 - 8);
      unint64_t v10 = v6[1];
    }
    *(void *)(a2 - 16) = v7;
    *(void *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v11 = (unint64_t *)(result + 16 * v5);
        unint64_t v13 = *v11;
        if (*v11 >= v8)
        {
          if (v8 < v13) {
            break;
          }
          unint64_t v14 = *(void *)(result + 16 * v5 + 8);
          if (v14 >= v9) {
            break;
          }
        }
        else
        {
          unint64_t v14 = v11[1];
        }
        *uint64_t v6 = v13;
        v6[1] = v14;
        uint64_t v6 = (unint64_t *)(result + 16 * v5);
        if (v12 <= 1) {
          goto LABEL_13;
        }
      }
    }
    unint64_t v11 = v6;
LABEL_13:
    unint64_t *v11 = v8;
    v11[1] = v9;
  }
  return result;
}

void std::vector<turi::groupby_aggregate_impl::groupby_element>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (void ***)*a1;
  if (*v2)
  {
    std::vector<turi::groupby_aggregate_impl::groupby_element>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<turi::groupby_aggregate_impl::groupby_element>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      unint64_t v5 = v4 - 7;
      uint64_t v6 = v4 - 4;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
      uint64_t v6 = v5;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
      unint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,false>(long long *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  unint64_t v10 = (uint64_t *)a2;
  unint64_t v11 = a1;
  unint64_t v36 = a2;
  __n128 v37 = a1;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v13 = (char *)v10 - (char *)v11;
    unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * (((char *)v10 - (char *)v11) >> 3);
    if (!(!v7 & v6))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v36 = (unint64_t)(v10 - 7);
          unint64_t v33 = *(v10 - 1);
          unint64_t v34 = *((void *)v11 + 6);
          if (v33 == v34)
          {
            if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v10 - 7, v11, a6))return; {
          }
            }
          else if (v33 >= v34)
          {
            return;
          }
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v37, (uint64_t *)&v36);
          break;
        case 3uLL:
          unint64_t v36 = (unint64_t)(v10 - 7);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v11, (uint64_t)v11 + 56, v10 - 7, a6);
          return;
        case 4uLL:
          unint64_t v36 = (unint64_t)(v10 - 7);
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v11, (uint64_t)v11 + 56, (uint64_t)(v11 + 7), v10 - 7, a6);
          return;
        case 5uLL:
          unint64_t v36 = (unint64_t)(v10 - 7);
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v11, (uint64_t)v11 + 56, (uint64_t)(v11 + 7), (uint64_t)v11 + 168, v10 - 7, a6);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 1343)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t *)v11, v10, a6);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t *)v11, v10, a6);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    unint64_t v15 = v14 >> 1;
    uint64_t v16 = v10 - 7;
    if ((unint64_t)v13 >= 0x1C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v11, (uint64_t)v11 + 56 * (v14 >> 1), v16, a6);
      uint64_t v17 = 56 * v15;
      uint64_t v18 = 56 * v15 - 56;
      unint64_t v19 = v36;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v37 + 56, (uint64_t)v37 + v18, (uint64_t *)(v36 - 112), v20);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)(v37 + 7), (uint64_t)v37 + v17 + 56, (uint64_t *)(v19 - 168), v21);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v37 + v18, (uint64_t)v37 + v17, (uint64_t *)((char *)v37 + v17 + 56), v22);
      uint64_t v35 = (uint64_t)v37 + v17;
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v37, &v35);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v11 + 56 * (v14 >> 1), (uint64_t)v11, v16, a6);
    }
    unint64_t v24 = v37;
    if ((a5 & 1) == 0)
    {
      unint64_t v25 = *((void *)v37 - 1);
      unint64_t v26 = *((void *)v37 + 6);
      if (v25 == v26)
      {
        char v27 = turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v37 - 7, v37, v23);
        unint64_t v24 = v37;
        if ((v27 & 1) == 0) {
          goto LABEL_23;
        }
      }
      else if (v25 >= v26)
      {
LABEL_23:
        unint64_t v10 = (uint64_t *)v36;
        unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::groupby_aggregate_impl::groupby_element *,std::__less<void,void> &>((uint64_t)v24, v36);
        goto LABEL_24;
      }
    }
    unint64_t v10 = (uint64_t *)v36;
    unint64_t v28 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::groupby_aggregate_impl::groupby_element *,std::__less<void,void> &>((uint64_t)v24, v36);
    if ((v30 & 1) == 0) {
      goto LABEL_22;
    }
    BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v37, (uint64_t)v28, v29);
    unint64_t v11 = (long long *)(v28 + 56);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)(v28 + 56), (uint64_t)v10, v32))
    {
      if (v31) {
        return;
      }
      unint64_t v36 = (unint64_t)v28;
      unint64_t v11 = v37;
      unint64_t v10 = (uint64_t *)v28;
    }
    else
    {
      if (!v31)
      {
LABEL_22:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,false>(v37, v28, a3, -i, a5 & 1);
        unint64_t v11 = (long long *)(v28 + 56);
LABEL_24:
        a5 = 0;
        __n128 v37 = v11;
        a4 = -i;
        goto LABEL_2;
      }
      __n128 v37 = (long long *)(v28 + 56);
    }
  }
  if (v11 != (long long *)v10) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>(v11, (long long *)v10, (long long *)v10, a3, a6);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(long long **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *((void *)*a1 + 2);
  long long v5 = **a1;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  long long v8 = v5;
  long long v9 = *(long long *)((char *)v2 + 24);
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 2) = 0;
  uint64_t v6 = *((void *)v2 + 5);
  uint64_t v7 = *((void *)v2 + 6);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  void v11[3] = v7;
  std::vector<turi::flexible_type>::__vdeallocate((void **)v2);
  long long *v2 = *(_OWORD *)v3;
  *((void *)v2 + 2) = *(void *)(v3 + 16);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)v2 + 3);
  *(long long *)((char *)v2 + 24) = *(_OWORD *)(v3 + 24);
  *((void *)v2 + 5) = *(void *)(v3 + 40);
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *((void *)v2 + 6) = *(void *)(v3 + 48);
  std::vector<turi::flexible_type>::__vdeallocate((void **)v3);
  *(_OWORD *)uint64_t v3 = v8;
  *(void *)(v3 + 16) = v4;
  memset(v10, 0, sizeof(v10));
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(v3 + 24));
  *(_OWORD *)(v3 + 24) = v9;
  v11[0] = 0;
  v11[1] = 0;
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 48) = v7;
  v11[2] = 0;
  unint64_t v12 = (void **)v11;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v12);
  unint64_t v12 = (void **)v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t *a1, uint64_t *a2, __n128 a3)
{
  if (a1 == a2) {
    return;
  }
  long long v5 = a1 + 7;
  if (a1 + 7 == a2) {
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a1;
  do
  {
    long long v8 = v7;
    uint64_t v7 = v5;
    unint64_t v9 = v8[13];
    unint64_t v10 = v8[6];
    if (v9 == v10)
    {
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v7, v8, a3))goto LABEL_18; {
    }
      }
    else if (v9 >= v10)
    {
      goto LABEL_18;
    }
    long long v23 = *(_OWORD *)v7;
    uint64_t v24 = v8[9];
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *uint64_t v7 = 0;
    long long v25 = *((_OWORD *)v8 + 5);
    uint64_t v11 = v8[12];
    uint64_t v12 = v8[13];
    v8[11] = 0;
    v8[12] = 0;
    v8[10] = 0;
    uint64_t v13 = v6;
    uint64_t v26 = v11;
    unint64_t v27 = v12;
    while (1)
    {
      unint64_t v14 = (char *)a1 + v13;
      std::vector<turi::flexible_type>::__vdeallocate((void **)((char *)a1 + v13 + 56));
      *(_OWORD *)(v14 + 56) = *(_OWORD *)v14;
      *((void *)v14 + 9) = *((void *)v14 + 2);
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *(void *)unint64_t v14 = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)((char *)a1 + v13 + 80));
      __n128 v15 = *(__n128 *)((char *)a1 + v13 + 24);
      *((__n128 *)v14 + 5) = v15;
      uint64_t v16 = *(uint64_t *)((char *)a1 + v13 + 40);
      uint64_t v17 = *(uint64_t *)((char *)a1 + v13 + 48);
      *((void *)v14 + 4) = 0;
      *((void *)v14 + 5) = 0;
      *((void *)v14 + 3) = 0;
      *((void *)v14 + 12) = v16;
      *((void *)v14 + 13) = v17;
      if (!v13)
      {
        unint64_t v19 = a1;
        goto LABEL_17;
      }
      unint64_t v18 = *((void *)v14 - 1);
      if (v27 != v18) {
        break;
      }
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v23, (void *)v14 - 7, v15))goto LABEL_16; {
LABEL_14:
      }
      v13 -= 56;
    }
    if (v27 < v18) {
      goto LABEL_14;
    }
LABEL_16:
    unint64_t v19 = (uint64_t *)((char *)a1 + v13);
LABEL_17:
    std::vector<turi::flexible_type>::__vdeallocate((void **)v19);
    *(_OWORD *)unint64_t v19 = v23;
    v19[2] = v24;
    uint64_t v24 = 0;
    long long v23 = 0uLL;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)v14 + 3);
    uint64_t v20 = *((void *)&v25 + 1);
    *((void *)v14 + 3) = v25;
    uint64_t v21 = v26;
    uint64_t v22 = v27;
    v19[4] = v20;
    v19[5] = v21;
    uint64_t v26 = 0;
    long long v25 = 0uLL;
    v19[6] = v22;
    unint64_t v28 = (void **)&v25;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v28);
    unint64_t v28 = (void **)&v23;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v28);
LABEL_18:
    long long v5 = v7 + 7;
    v6 += 56;
  }
  while (v7 + 7 != a2);
}

void sub_2240BF160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t *a1, uint64_t *a2, __n128 a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    long long v5 = a1 + 7;
    if (a1 + 7 != a2)
    {
      uint64_t v6 = (void **)(a1 + 13);
      do
      {
        uint64_t v7 = v4;
        uint64_t v4 = v5;
        unint64_t v8 = v7[13];
        unint64_t v9 = v7[6];
        if (v8 != v9)
        {
          if (v8 >= v9) {
            goto LABEL_15;
          }
LABEL_8:
          long long v18 = *(_OWORD *)v4;
          unint64_t v19 = (void *)v7[9];
          v4[1] = 0;
          v4[2] = 0;
          *uint64_t v4 = 0;
          long long v20 = *((_OWORD *)v7 + 5);
          uint64_t v10 = v7[12];
          uint64_t v11 = v7[13];
          v7[11] = 0;
          v7[12] = 0;
          v7[10] = 0;
          uint64_t v12 = v6;
          uint64_t v21 = (void *)v10;
          uint64_t v22 = (void *)v11;
          while (1)
          {
            std::vector<turi::flexible_type>::__vdeallocate(v12 - 6);
            *((_OWORD *)v12 - 3) = *(_OWORD *)(v12 - 13);
            *(v12 - 4) = *(v12 - 11);
            *(v12 - 12) = 0;
            *(v12 - 11) = 0;
            *(v12 - 13) = 0;
            std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v12 - 3);
            __n128 v13 = *((__n128 *)v12 - 5);
            *(__n128 *)(v12 - 3) = v13;
            unint64_t v14 = *(v12 - 7);
            *(v12 - 1) = *(v12 - 8);
            *uint64_t v12 = v14;
            *(v12 - 9) = 0;
            *(v12 - 8) = 0;
            *(v12 - 10) = 0;
            unint64_t v15 = (unint64_t)*(v12 - 14);
            if (v22 == (void *)v15)
            {
              if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v18, v12 - 20, v13))goto LABEL_14; {
            }
              }
            else if ((unint64_t)v22 >= v15)
            {
LABEL_14:
              std::vector<turi::flexible_type>::__vdeallocate(v12 - 13);
              *(_OWORD *)(v12 - 13) = v18;
              *(v12 - 11) = v19;
              unint64_t v19 = 0;
              long long v18 = 0uLL;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v12 - 10);
              *((_OWORD *)v12 - 5) = v20;
              uint64_t v16 = v21;
              uint64_t v17 = v22;
              uint64_t v21 = 0;
              long long v20 = 0uLL;
              *(v12 - 8) = v16;
              *(v12 - 7) = v17;
              long long v23 = (void **)&v20;
              std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v23);
              long long v23 = (void **)&v18;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
              goto LABEL_15;
            }
            v12 -= 7;
          }
        }
        if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v4, v7, a3))goto LABEL_8; {
LABEL_15:
        }
        long long v5 = v4 + 7;
        v6 += 7;
      }
      while (v4 + 7 != a2);
    }
  }
}

void sub_2240BF30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  uint64_t v21 = (long long *)a2;
  uint64_t v22 = (long long *)a1;
  long long v20 = a3;
  unint64_t v6 = *(void *)(a2 + 48);
  unint64_t v7 = *(void *)(a1 + 48);
  if (v6 == v7)
  {
    char v8 = turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)a2, (void *)a1, a4);
    unint64_t v6 = *(void *)(a2 + 48);
    if ((v8 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    unint64_t v11 = a3[6];
    if (v11 == v6)
    {
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a3, (void *)a2, a4))goto LABEL_9; {
    }
      }
    else if (v11 >= v6)
    {
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v22, (uint64_t *)&v21);
      unint64_t v13 = v20[6];
      unint64_t v14 = *((void *)v21 + 6);
      if (v13 == v14)
      {
        if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v20, v21, v12))return 1; {
      }
        }
      else if (v13 >= v14)
      {
        return 1;
      }
      long long v18 = &v21;
      unint64_t v19 = (uint64_t *)&v20;
LABEL_23:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(v18, v19);
      return 2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v22, (uint64_t *)&v20);
    return 1;
  }
  if (v6 < v7) {
    goto LABEL_7;
  }
LABEL_3:
  unint64_t v9 = a3[6];
  if (v9 != v6)
  {
    if (v9 >= v6) {
      return 0;
    }
    goto LABEL_13;
  }
  uint64_t result = turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a3, (void *)a2, a4);
  if (result)
  {
LABEL_13:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v21, (uint64_t *)&v20);
    unint64_t v16 = *((void *)v21 + 6);
    unint64_t v17 = *((void *)v22 + 6);
    if (v16 == v17)
    {
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v21, v22, v15))return 1; {
      goto LABEL_22;
      }
    }
    if (v16 < v17)
    {
LABEL_22:
      long long v18 = &v22;
      unint64_t v19 = (uint64_t *)&v21;
      goto LABEL_23;
    }
    return 1;
  }
  return result;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::groupby_aggregate_impl::groupby_element *,std::__less<void,void> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (long long *)a2;
  char v30 = (long long *)a2;
  BOOL v31 = (long long *)a1;
  long long v25 = *(_OWORD *)a1;
  uint64_t v26 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (void **)(a1 + 24);
  __n128 v5 = *(__n128 *)(a1 + 24);
  __n128 v27 = v5;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v28 = v6;
  unint64_t v29 = v7;
  unint64_t v8 = *(void *)(a2 - 8);
  if (v7 == v8)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, (void *)(a2 - 56), v5))goto LABEL_3; {
LABEL_14:
    }
    for (uint64_t i = (long long *)(a1 + 56); ; uint64_t i = (long long *)((char *)i + 56))
    {
      BOOL v31 = i;
      unint64_t v14 = *((void *)i + 6);
      if (v29 == v14)
      {
        if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, i, v5))goto LABEL_20; {
      }
        }
      else if (v29 < v14)
      {
LABEL_20:
        uint64_t v2 = v30;
        goto LABEL_21;
      }
    }
  }
  if (v7 < v8) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t i = (long long *)(a1 + 56);
  BOOL v31 = (long long *)(a1 + 56);
  if (a1 + 56 < (unint64_t)v2)
  {
    uint64_t v10 = (long long *)(a1 + 112);
    do
    {
      unint64_t v11 = *((void *)v10 - 1);
      if (v29 == v11)
      {
        if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, (void *)v10 - 7, v5))goto LABEL_21; {
      }
        }
      else if (v29 < v11)
      {
        uint64_t i = (long long *)((char *)v10 - 56);
        goto LABEL_21;
      }
      uint64_t i = (long long *)((char *)i + 56);
      BOOL v31 = v10;
      __n128 v12 = (char *)v10 + 56;
      BOOL v13 = v10 >= v2;
      uint64_t v10 = (long long *)((char *)v10 + 56);
    }
    while (!v13);
    uint64_t i = (long long *)(v12 - 56);
  }
LABEL_21:
  if (i < v2)
  {
    do
    {
      while (1)
      {
        uint64_t v2 = (long long *)((char *)v2 - 56);
        char v30 = v2;
        unint64_t v15 = *((void *)v2 + 6);
        if (v29 != v15) {
          break;
        }
        if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, v2, v5))goto LABEL_26; {
      }
        }
    }
    while (v29 < v15);
LABEL_26:
    uint64_t i = v31;
  }
  if (i < v2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v31, (uint64_t *)&v30);
      do
      {
        while (1)
        {
          unint64_t v17 = v31;
          long long v18 = (void *)v31 + 7;
          BOOL v31 = (long long *)((char *)v31 + 56);
          unint64_t v19 = *((void *)v17 + 13);
          if (v29 != v19) {
            break;
          }
          if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, v18, v16))goto LABEL_35; {
        }
          }
      }
      while (v29 >= v19);
      do
      {
LABEL_35:
        while (1)
        {
          uint64_t v20 = (uint64_t)v30;
          uint64_t v21 = (long long *)((char *)v30 - 56);
          char v30 = (long long *)((char *)v30 - 56);
          unint64_t v22 = *(void *)(v20 - 8);
          if (v29 == v22) {
            break;
          }
          if (v29 >= v22) {
            goto LABEL_38;
          }
        }
      }
      while ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v25, v21, v16) & 1) != 0);
      uint64_t v21 = v30;
LABEL_38:
      uint64_t i = v31;
    }
    while (v31 < v21);
  }
  if ((long long *)((char *)i - 56) != (long long *)a1)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(long long *)((char *)i - 56);
    *(void *)(a1 + 16) = *((void *)i - 5);
    *((void *)i - 7) = 0;
    *((void *)i - 6) = 0;
    *((void *)i - 5) = 0;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v4);
    *(_OWORD *)(a1 + 24) = *(i - 2);
    *(void *)(a1 + 40) = *((void *)i - 2);
    *((void *)i - 4) = 0;
    *((void *)i - 3) = 0;
    *((void *)i - 2) = 0;
    *(void *)(a1 + 48) = *((void *)i - 1);
  }
  std::vector<turi::flexible_type>::__vdeallocate((void **)i - 7);
  *(long long *)((char *)i - 56) = v25;
  *((void *)i - 5) = v26;
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)i - 4);
  *(i - 2) = (__int128)v27;
  *((void *)i - 2) = v28;
  __n128 v27 = 0uLL;
  uint64_t v28 = 0;
  *((void *)i - 1) = v29;
  long long v23 = v31;
  __n128 v32 = (void **)&v27;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v32);
  __n128 v32 = (void **)&v25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
  return v23;
}

void sub_2240BF714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::groupby_aggregate_impl::groupby_element *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  long long v25 = *(_OWORD *)a1;
  uint64_t v26 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v3 = (void **)(a1 + 24);
  __n128 v4 = *(__n128 *)(a1 + 24);
  __n128 v27 = v4;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  unint64_t v7 = (long long *)a1;
  uint64_t v28 = v6;
  unint64_t v29 = v5;
  unint64_t v30 = a2;
  while (1)
  {
    unint64_t v8 = (long long *)((char *)v7 + 56);
    while (1)
    {
      unint64_t v7 = v8;
      unint64_t v9 = *((void *)v8 + 6);
      BOOL v10 = v9 >= v5;
      if (v9 == v5) {
        break;
      }
      unint64_t v8 = (long long *)((char *)v7 + 56);
      if (v10)
      {
        BOOL v31 = v7;
        goto LABEL_9;
      }
    }
    BOOL v31 = v7;
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v7, &v25, v4))break; {
    unint64_t v5 = v29;
    }
  }
LABEL_9:
  unint64_t v11 = v30;
  if ((long long *)((char *)v7 - 56) != (long long *)a1)
  {
    for (uint64_t i = (uint64_t *)(v30 - 56); ; i -= 7)
    {
      unint64_t v30 = (unint64_t)i;
      unint64_t v13 = i[6];
      if (v13 == v29)
      {
        if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(i, &v25, v4))goto LABEL_22; {
      }
        }
      else if (v13 < v29)
      {
        goto LABEL_22;
      }
    }
  }
  if ((unint64_t)v7 < v30)
  {
    do
    {
      unint64_t v14 = (uint64_t *)(v11 - 56);
      unint64_t v30 = v11 - 56;
      unint64_t v15 = *(void *)(v11 - 8);
      if (v15 == v29)
      {
        if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v14, &v25, v4))break; {
        unint64_t v14 = (uint64_t *)v30;
        }
        unint64_t v7 = v31;
      }
      else if (v15 < v29)
      {
        break;
      }
      unint64_t v11 = (unint64_t)v14;
    }
    while (v7 < (long long *)v14);
  }
LABEL_22:
  __n128 v16 = v31;
  if ((unint64_t)v31 < v30)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v31, (uint64_t *)&v30);
      do
      {
        while (1)
        {
          long long v18 = v31;
          unint64_t v19 = (uint64_t *)v31 + 7;
          BOOL v31 = (long long *)((char *)v31 + 56);
          unint64_t v20 = *((void *)v18 + 13);
          if (v20 != v29) {
            break;
          }
          if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v19, &v25, v17) & 1) == 0)goto LABEL_30; {
        }
          }
      }
      while (v20 < v29);
      do
      {
LABEL_30:
        while (1)
        {
          unint64_t v21 = v30;
          unint64_t v22 = (uint64_t *)(v30 - 56);
          v30 -= 56;
          unint64_t v23 = *(void *)(v21 - 8);
          if (v23 == v29) {
            break;
          }
          if (v23 < v29) {
            goto LABEL_33;
          }
        }
      }
      while (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v22, &v25, v17));
      unint64_t v22 = (uint64_t *)v30;
LABEL_33:
      __n128 v16 = v31;
    }
    while (v31 < (long long *)v22);
  }
  if ((long long *)((char *)v16 - 56) != (long long *)a1)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(long long *)((char *)v16 - 56);
    *(void *)(a1 + 16) = *((void *)v16 - 5);
    *((void *)v16 - 7) = 0;
    *((void *)v16 - 6) = 0;
    *((void *)v16 - 5) = 0;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v3);
    *(_OWORD *)(a1 + 24) = *(v16 - 2);
    *(void *)(a1 + 40) = *((void *)v16 - 2);
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *((void *)v16 - 2) = 0;
    *(void *)(a1 + 48) = *((void *)v16 - 1);
  }
  std::vector<turi::flexible_type>::__vdeallocate((void **)v16 - 7);
  *(long long *)((char *)v16 - 56) = v25;
  *((void *)v16 - 5) = v26;
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)v16 - 4);
  *(v16 - 2) = (__int128)v27;
  *((void *)v16 - 2) = v28;
  __n128 v27 = 0uLL;
  uint64_t v28 = 0;
  *((void *)v16 - 1) = v29;
  __n128 v32 = (void **)&v27;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v32);
  __n128 v32 = (void **)&v25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
  return (char *)v16 - 56;
}

void sub_2240BF9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = a2;
  uint64_t v28 = a2;
  unint64_t v29 = (void **)a1;
  uint64_t v5 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v28 = a2 - 56;
      unint64_t v7 = *(void *)(a2 - 8);
      unint64_t v8 = *(void *)(a1 + 48);
      if (v7 == v8)
      {
        if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)(a2 - 56), (void *)a1, a3))return 1; {
      }
        }
      else if (v7 >= v8)
      {
        return 1;
      }
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>((long long **)&v29, &v28);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a1 + 56, (uint64_t *)(a2 - 56), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a1 + 56, a1 + 112, (uint64_t *)(a2 - 56), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a1 + 56, a1 + 112, a1 + 168, (uint64_t *)(a2 - 56), a3);
      return 1;
    default:
      unint64_t v9 = (void *)(a1 + 112);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a1 + 56, (uint64_t *)(a1 + 112), a3);
      uint64_t v11 = a1 + 168;
      if (a1 + 168 == v3) {
        return 1;
      }
      int v12 = 0;
      unint64_t v13 = (void **)(a1 + 216);
      break;
  }
  do
  {
    unint64_t v14 = *(void **)(v11 + 48);
    unint64_t v15 = v9[6];
    if (v14 == (void *)v15)
    {
      if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v11, v9, v10) & 1) == 0)
      {
        uint64_t v3 = v28;
        goto LABEL_21;
      }
      unint64_t v14 = *(void **)(v11 + 48);
    }
    else if ((unint64_t)v14 >= v15)
    {
      goto LABEL_21;
    }
    long long v23 = *(_OWORD *)v11;
    uint64_t v24 = *(void **)(v11 + 16);
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    long long v25 = *(_OWORD *)(v11 + 24);
    __n128 v16 = *(void **)(v11 + 40);
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 40) = 0;
    __n128 v17 = v13;
    uint64_t v26 = v16;
    __n128 v27 = v14;
    while (1)
    {
      std::vector<turi::flexible_type>::__vdeallocate(v17 - 6);
      *((_OWORD *)v17 - 3) = *(_OWORD *)(v17 - 13);
      *(v17 - 4) = *(v17 - 11);
      *(v17 - 12) = 0;
      *(v17 - 11) = 0;
      *(v17 - 13) = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v17 - 3);
      __n128 v18 = *((__n128 *)v17 - 5);
      *(__n128 *)(v17 - 3) = v18;
      unint64_t v19 = *(v17 - 7);
      *(v17 - 1) = *(v17 - 8);
      *__n128 v17 = v19;
      *(v17 - 9) = 0;
      *(v17 - 8) = 0;
      *(v17 - 10) = 0;
      if (v17 - 13 == v29) {
        break;
      }
      unint64_t v20 = (unint64_t)*(v17 - 14);
      if (v27 == (void *)v20)
      {
        if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)&v23, v17 - 20, v18))break; {
      }
        }
      else if ((unint64_t)v27 >= v20)
      {
        break;
      }
      v17 -= 7;
    }
    std::vector<turi::flexible_type>::__vdeallocate(v17 - 13);
    *(_OWORD *)(v17 - 13) = v23;
    *(v17 - 11) = v24;
    uint64_t v24 = 0;
    long long v23 = 0uLL;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v17 - 10);
    *((_OWORD *)v17 - 5) = v25;
    unint64_t v21 = v26;
    unint64_t v22 = v27;
    uint64_t v26 = 0;
    long long v25 = 0uLL;
    *(v17 - 8) = v21;
    *(v17 - 7) = v22;
    ++v12;
    uint64_t v3 = v28;
    unint64_t v30 = (void **)&v25;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v30);
    unint64_t v30 = (void **)&v23;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v30);
    if (v12 == 8) {
      return v11 + 56 == v3;
    }
LABEL_21:
    unint64_t v9 = (void *)v11;
    v13 += 7;
    v11 += 56;
  }
  while (v11 != v3);
  return 1;
}

void sub_2240BFCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __n128 a5)
{
  unint64_t v20 = (long long *)a2;
  unint64_t v21 = (long long *)a1;
  __n128 v18 = a4;
  unint64_t v19 = (long long *)a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a2, (uint64_t *)a3, a5);
  unint64_t v10 = a4[6];
  unint64_t v11 = *(void *)(a3 + 48);
  if (v10 == v11)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a4, (void *)a3, v9))return; {
  }
    }
  else if (v10 >= v11)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v19, (uint64_t *)&v18);
  unint64_t v13 = *((void *)v19 + 6);
  unint64_t v14 = *(void *)(a2 + 48);
  if (v13 == v14)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v19, (void *)a2, v12))return; {
  }
    }
  else if (v13 >= v14)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v20, (uint64_t *)&v19);
  unint64_t v16 = *((void *)v20 + 6);
  unint64_t v17 = *(void *)(a1 + 48);
  if (v16 != v17)
  {
    if (v16 >= v17) {
      return;
    }
    goto LABEL_13;
  }
  if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v20, (void *)a1, v15))LABEL_13:std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v21, (uint64_t *)&v20); {
}
  }

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, __n128 a6)
{
  uint64_t v26 = (long long *)a2;
  __n128 v27 = (long long *)a1;
  uint64_t v24 = (long long *)a4;
  long long v25 = (long long *)a3;
  long long v23 = a5;
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, a2, a3, (uint64_t *)a4, a6);
  unint64_t v12 = a5[6];
  unint64_t v13 = *(void *)(a4 + 48);
  if (v12 == v13)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a5, (void *)a4, v11))return; {
  }
    }
  else if (v12 >= v13)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v24, (uint64_t *)&v23);
  unint64_t v15 = *((void *)v24 + 6);
  unint64_t v16 = *(void *)(a3 + 48);
  if (v15 == v16)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v24, (void *)a3, v14))return; {
  }
    }
  else if (v15 >= v16)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v25, (uint64_t *)&v24);
  unint64_t v18 = *((void *)v25 + 6);
  unint64_t v19 = *(void *)(a2 + 48);
  if (v18 == v19)
  {
    if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v25, (void *)a2, v17))return; {
  }
    }
  else if (v18 >= v19)
  {
    return;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v26, (uint64_t *)&v25);
  unint64_t v21 = *((void *)v26 + 6);
  unint64_t v22 = *(void *)(a1 + 48);
  if (v21 != v22)
  {
    if (v21 >= v22) {
      return;
    }
    goto LABEL_17;
  }
  if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v26, (void *)a1, v20))LABEL_17:std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v27, (uint64_t *)&v26); {
}
  }

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>(long long *a1, long long *a2, long long *a3, uint64_t a4, __n128 a5)
{
  unint64_t v22 = a1;
  if (a1 == a2) {
    return a3;
  }
  unint64_t v7 = a2;
  unint64_t v8 = a1;
  uint64_t v9 = (char *)a2 - (char *)a1;
  uint64_t v10 = ((char *)a2 - (char *)a1) / 56;
  if ((char *)a2 - (char *)a1 >= 57)
  {
    unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
    unint64_t v12 = v11 + 1;
    unint64_t v13 = (long long *)((char *)a1 + 56 * v11);
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v8, a5, a4, v10, v13);
      unint64_t v13 = (long long *)((char *)v13 - 56);
      --v12;
    }
    while (v12);
  }
  unint64_t v21 = v7;
  if (v7 == a3)
  {
    a3 = v7;
    goto LABEL_15;
  }
  __n128 v14 = (uint64_t *)v7;
  do
  {
    unint64_t v15 = v14[6];
    unint64_t v16 = *((void *)v22 + 6);
    if (v15 != v16)
    {
      if (v15 >= v16) {
        goto LABEL_12;
      }
LABEL_11:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *&,turi::groupby_aggregate_impl::groupby_element *&>(&v21, (uint64_t *)&v22);
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v22, v17, a4, v10, v22);
      goto LABEL_12;
    }
    if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(v14, v22, a5))goto LABEL_11; {
LABEL_12:
    }
    __n128 v14 = (uint64_t *)v21 + 7;
    unint64_t v21 = (long long *)v14;
  }
  while (v14 != (uint64_t *)a3);
  unint64_t v8 = v22;
  uint64_t v9 = (char *)v7 - (char *)v22;
LABEL_15:
  if (v9 >= 57)
  {
    unint64_t v18 = v9 / 0x38uLL;
    do
    {
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)v8, (uint64_t)v7, a4, v18);
      unint64_t v7 = (long long *)((char *)v7 - 56);
    }
    while (v18-- > 2);
    return v21;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, long long *a5)
{
  unint64_t v5 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = a5;
    int64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a5 - a1) >> 3))
    {
      int64_t v10 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a5 - a1) >> 3)) | 1;
      unint64_t v11 = (long long *)(a1 + 56 * v10);
      int64_t v12 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a5 - a1) >> 3) + 2;
      if (v12 < a4)
      {
        unint64_t v13 = *(void *)(a1 + 56 * v10 + 48);
        unint64_t v14 = *((void *)v11 + 13);
        if (v13 == v14)
        {
          if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)(a1 + 56 * v10), (void *)v11 + 7, a2))goto LABEL_9; {
          goto LABEL_8;
          }
        }
        if (v13 < v14)
        {
LABEL_8:
          unint64_t v11 = (long long *)((char *)v11 + 56);
          int64_t v10 = v12;
        }
      }
LABEL_9:
      unint64_t v15 = *((void *)v11 + 6);
      unint64_t v16 = *((void *)v6 + 6);
      if (v15 == v16)
      {
        if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v11, v6, a2))return; {
        unint64_t v16 = *((void *)v6 + 6);
        }
      }
      else if (v15 < v16)
      {
        return;
      }
      long long v26 = *v6;
      uint64_t v27 = *((void *)v6 + 2);
      *(void *)uint64_t v6 = 0;
      *((void *)v6 + 1) = 0;
      long long v28 = *(long long *)((char *)v6 + 24);
      uint64_t v17 = *((void *)v6 + 5);
      *((void *)v6 + 2) = 0;
      *((void *)v6 + 3) = 0;
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 5) = 0;
      uint64_t v29 = v17;
      unint64_t v30 = v16;
      while (1)
      {
        unint64_t v18 = v11;
        std::vector<turi::flexible_type>::__vdeallocate((void **)v6);
        *uint64_t v6 = *v11;
        *((void *)v6 + 2) = *((void *)v11 + 2);
        *(void *)unint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = 0;
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)v6 + 3);
        unint64_t v19 = (void **)v11 + 3;
        __n128 v20 = *(__n128 *)((char *)v11 + 24);
        *(long long *)((char *)v6 + 24) = (__int128)v20;
        *((void *)v6 + 5) = *((void *)v11 + 5);
        *((void *)v11 + 3) = 0;
        *((void *)v11 + 4) = 0;
        *((void *)v11 + 5) = 0;
        *((void *)v6 + 6) = *((void *)v11 + 6);
        if (v8 < v10)
        {
LABEL_25:
          std::vector<turi::flexible_type>::__vdeallocate((void **)v18);
          *unint64_t v18 = v26;
          *((void *)v18 + 2) = v27;
          long long v26 = 0uLL;
          uint64_t v27 = 0;
          std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v19);
          *(long long *)((char *)v18 + 24) = v28;
          *((void *)v18 + 5) = v29;
          long long v28 = 0uLL;
          uint64_t v29 = 0;
          *((void *)v18 + 6) = v30;
          BOOL v31 = (void **)&v28;
          std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v31);
          BOOL v31 = (void **)&v26;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          return;
        }
        uint64_t v21 = (2 * v10) | 1;
        unint64_t v11 = (long long *)(a1 + 56 * v21);
        uint64_t v22 = 2 * v10 + 2;
        if (v22 < a4)
        {
          unint64_t v23 = *(void *)(a1 + 56 * v21 + 48);
          unint64_t v24 = *((void *)v11 + 13);
          if (v23 == v24)
          {
            if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)(a1 + 56 * v21), (void *)v11 + 7, v20))goto LABEL_21; {
LABEL_20:
            }
            unint64_t v11 = (long long *)((char *)v11 + 56);
            uint64_t v21 = v22;
            goto LABEL_21;
          }
          if (v23 < v24) {
            goto LABEL_20;
          }
        }
LABEL_21:
        unint64_t v25 = *((void *)v11 + 6);
        if (v25 == v30)
        {
          uint64_t v6 = v18;
          int64_t v10 = v21;
          if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v11, &v26, v20))goto LABEL_25; {
        }
          }
        else
        {
          uint64_t v6 = v18;
          int64_t v10 = v21;
          if (v25 < v30) {
            goto LABEL_25;
          }
        }
      }
    }
  }
}

void sub_2240C031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::groupby_aggregate_impl::groupby_element::~groupby_element((void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    long long v15 = *(_OWORD *)a1;
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    __n128 v17 = *(__n128 *)(a1 + 24);
    __n128 v7 = v17;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    uint64_t v18 = v8;
    uint64_t v19 = v9;
    uint64_t v10 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, v7, a3, a4);
    std::vector<turi::flexible_type>::__vdeallocate((void **)v10);
    if (v10 == a2 - 56)
    {
      *(_OWORD *)uint64_t v10 = v15;
      *(void *)(v10 + 16) = v16;
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(v10 + 24));
      *(__n128 *)(v10 + 24) = v17;
      *(void *)(v10 + 40) = v18;
      __n128 v17 = 0uLL;
      uint64_t v18 = 0;
      *(void *)(v10 + 48) = v19;
    }
    else
    {
      *(_OWORD *)uint64_t v10 = *(_OWORD *)(a2 - 56);
      *(void *)(v10 + 16) = *(void *)(a2 - 40);
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      *(void *)(a2 - 40) = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(v10 + 24));
      unint64_t v11 = (__n128 *)(a2 - 32);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 - 32);
      *(void *)(v10 + 40) = *(void *)(a2 - 16);
      v11->n128_u64[0] = 0;
      v11->n128_u64[1] = 0;
      v11[1].n128_u64[0] = 0;
      *(void *)(v10 + 48) = *(void *)(a2 - 8);
      std::vector<turi::flexible_type>::__vdeallocate((void **)(a2 - 56));
      *(_OWORD *)(a2 - 56) = v15;
      *(void *)(a2 - 40) = v16;
      uint64_t v16 = 0;
      long long v15 = 0uLL;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(a2 - 32));
      __n128 v12 = v17;
      __n128 *v11 = v17;
      uint64_t v13 = v18;
      uint64_t v14 = v19;
      uint64_t v18 = 0;
      __n128 v17 = 0uLL;
      *(void *)(a2 - 16) = v13;
      *(void *)(a2 - 8) = v14;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(a1, v10 + 56, v12, a3, 0x6DB6DB6DB6DB6DB7 * ((v10 + 56 - a1) >> 3));
    }
    __n128 v20 = &v17;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    __n128 v20 = (__n128 *)&v15;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  }
}

void sub_2240C04E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = a4 - 2;
  if (a4 < 2) {
    uint64_t v7 = a4 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1;
    uint64_t v10 = v6 + 1;
    a1 += 56 * (v6 + 1);
    uint64_t v11 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v12 = v11 + 2;
    if (v11 + 2 >= a4) {
      goto LABEL_10;
    }
    unint64_t v13 = *(void *)(v9 + 56 * v10 + 48);
    unint64_t v14 = *(void *)(a1 + 104);
    if (v13 != v14)
    {
      if (v13 >= v14) {
        goto LABEL_10;
      }
LABEL_9:
      a1 += 56;
      uint64_t v6 = v12;
      goto LABEL_10;
    }
    if (turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)a1, (void *)(a1 + 56), a2))goto LABEL_9; {
LABEL_10:
    }
    std::vector<turi::flexible_type>::__vdeallocate((void **)v9);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a1;
    *(void *)(v9 + 16) = *(void *)(a1 + 16);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(v9 + 24));
    a2 = *(__n128 *)(a1 + 24);
    *(__n128 *)(v9 + 24) = a2;
    uint64_t v15 = *(void *)(a1 + 48);
    *(void *)(v9 + 40) = *(void *)(a1 + 40);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(v9 + 48) = v15;
  }
  while (v6 <= v8);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a5 - 2;
  if (a5 >= 2)
  {
    unint64_t v8 = v5 >> 1;
    uint64_t v9 = a1 + 56 * (v5 >> 1);
    uint64_t v10 = a2 - 56;
    unint64_t v11 = *(void *)(v9 + 48);
    unint64_t v12 = *(void *)(a2 - 8);
    if (v11 == v12)
    {
      if (!turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)v9, (void *)(a2 - 56), a3))return; {
      unint64_t v12 = *(void *)(a2 - 8);
      }
    }
    else if (v11 >= v12)
    {
      return;
    }
    long long v20 = *(_OWORD *)(a2 - 56);
    uint64_t v21 = *(void *)(a2 - 40);
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)uint64_t v10 = 0;
    long long v22 = *(_OWORD *)(a2 - 32);
    uint64_t v13 = *(void *)(a2 - 16);
    *(void *)(a2 - 32) = 0;
    *(void *)(a2 - 24) = 0;
    *(void *)(a2 - 16) = 0;
    uint64_t v23 = v13;
    unint64_t v24 = v12;
    while (1)
    {
      uint64_t v14 = v9;
      std::vector<turi::flexible_type>::__vdeallocate((void **)v10);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v9;
      *(void *)(v10 + 16) = *(void *)(v9 + 16);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(v10 + 24));
      uint64_t v15 = (void **)(v9 + 24);
      __n128 v16 = *(__n128 *)(v9 + 24);
      *(__n128 *)(v10 + 24) = v16;
      *(void *)(v10 + 40) = *(void *)(v9 + 40);
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v10 + 48) = *(void *)(v9 + 48);
      if (!v8) {
        break;
      }
      unint64_t v8 = (v8 - 1) >> 1;
      uint64_t v9 = a1 + 56 * v8;
      unint64_t v17 = *(void *)(v9 + 48);
      if (v17 == v24)
      {
        uint64_t v10 = v14;
        if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>((uint64_t *)(a1 + 56 * v8), &v20, v16) & 1) == 0)break; {
      }
        }
      else
      {
        uint64_t v10 = v14;
        if (v17 >= v24) {
          break;
        }
      }
    }
    std::vector<turi::flexible_type>::__vdeallocate((void **)v14);
    *(_OWORD *)uint64_t v14 = v20;
    *(void *)(v14 + 16) = v21;
    uint64_t v21 = 0;
    long long v20 = 0uLL;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate(v15);
    *(_OWORD *)(v14 + 24) = v22;
    uint64_t v18 = v23;
    unint64_t v19 = v24;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    *(void *)(v14 + 40) = v18;
    *(void *)(v14 + 48) = v19;
    unint64_t v25 = (void **)&v22;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v25);
    unint64_t v25 = (void **)&v20;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v25);
  }
}

void sub_2240C07B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::insert(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = ((uint64_t)a2 - *a1) >> 3;
  uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * v8;
  unint64_t v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v11 = v12;
  if (v6 >= v12)
  {
    unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v14 > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v7) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x249249249249249) {
      unint64_t v16 = 0x492492492492492;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v24 = v10;
    if (v16) {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v10, v16);
    }
    else {
      unint64_t v17 = 0;
    }
    long long v20 = v17;
    uint64_t v21 = &v17[56 * v9];
    long long v22 = v21;
    uint64_t v23 = &v17[56 * v16];
    std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::push_back(&v20, a3);
    uint64_t v4 = std::vector<turi::groupby_aggregate_impl::groupby_element>::__swap_out_circular_buffer(a1, &v20, v4);
    std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)&v20);
  }
  else if (a2 == (void *)v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v18 = (void *)(v7 + 8 * v8);
    v18[3] = 0;
    v18[4] = 0;
    v18[5] = 0;
    *(_OWORD *)(v18 + 3) = *(_OWORD *)(a3 + 24);
    v18[5] = *(void *)(a3 + 40);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    v18[6] = *(void *)(a3 + 48);
    a1[1] = (uint64_t)(a2 + 7);
  }
  else
  {
    std::vector<turi::groupby_aggregate_impl::groupby_element>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 7));
    std::vector<turi::flexible_type>::__vdeallocate((void **)v4);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
    *(void *)(v4 + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v13 = v7 + 56 * v9;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(v13 + 24));
    *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 24);
    *(void *)(v13 + 40) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(v13 + 48) = *(void *)(a3 + 48);
  }
  return v4;
}

void sub_2240C09BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (void *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      void *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      v8[2] = *(void *)(v9 + 16);
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(v9 + 24);
      uint64_t v10 = *(void *)(v9 + 48);
      v8[5] = *(void *)(v9 + 40);
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      v8[6] = v10;
      v8 += 7;
      v9 += 56;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)&v12, a2, v7, v6);
}

__n128 std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[2];
  if (v4 == (void *)a1[3])
  {
    unint64_t v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == (void *)*a1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v4 - *a1) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = a1[4];
      uint64_t v20 = a1[4];
      *(void *)&long long v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v12, v10);
      *((void *)&v18 + 1) = v18 + 56 * v11;
      *(void *)&long long v19 = *((void *)&v18 + 1);
      *((void *)&v19 + 1) = v18 + 56 * v13;
      std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::__construct_at_end_with_size<std::move_iterator<turi::groupby_aggregate_impl::groupby_element*>>((uint64_t)&v18, a1[1], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - a1[1]) >> 3));
      long long v14 = v19;
      long long v15 = *(_OWORD *)a1;
      long long v16 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v18;
      *((_OWORD *)a1 + 1) = v14;
      long long v18 = v15;
      long long v19 = v16;
      std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::~__split_buffer((uint64_t)&v18);
      uint64_t v4 = (void *)a1[2];
    }
    else
    {
      uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -56 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>((uint64_t)&v18, v5, (uint64_t)v4, v5 - 56 * (v7 >> 1));
      uint64_t v4 = v9;
      a1[1] += v8;
      a1[2] = v9;
    }
  }
  *uint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v4 + 3) = result;
  v4[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  v4[6] = *(void *)(a2 + 48);
  a1[2] += 56;
  return result;
}

void sub_2240C0BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::vector<turi::groupby_aggregate_impl::groupby_element>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,turi::groupby_aggregate_impl::groupby_element*,turi::groupby_aggregate_impl::groupby_element*,turi::groupby_aggregate_impl::groupby_element*>(v7, a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      std::vector<turi::flexible_type>::__vdeallocate((void **)(a4 + v7 - 56));
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v9 - 40) = *(void *)(a3 + v7 - 40);
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(a4 + v7 - 32));
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 + v7 - 32);
      uint64_t v10 = *(void *)(a3 + v7 - 8);
      *(void *)(v9 - 16) = *(void *)(a3 + v7 - 16);
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v9 - 8) = v10;
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *,turi::groupby_aggregate_impl::groupby_element *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(void *)(a4 + 16) = *(void *)(v5 + 16);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(a4 + 24));
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v5 + 24);
    uint64_t v7 = *(void *)(v5 + 48);
    *(void *)(a4 + 40) = *(void *)(v5 + 40);
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(a4 + 48) = v7;
    a4 += 56;
    v5 += 56;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__split_buffer<turi::groupby_aggregate_impl::groupby_element>::__construct_at_end_with_size<std::move_iterator<turi::groupby_aggregate_impl::groupby_element*>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(result + 16);
  if (a3)
  {
    uint64_t v4 = &v3[7 * a3];
    do
    {
      *uint64_t v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
      v3[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v3[3] = 0;
      v3[4] = 0;
      v3[5] = 0;
      *(_OWORD *)(v3 + 3) = *(_OWORD *)(a2 + 24);
      uint64_t v5 = *(void *)(a2 + 48);
      v3[5] = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      v3[6] = v5;
      v3 += 7;
      a2 += 56;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(result + 16) = v3;
  return result;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,turi::groupby_aggregate_impl::groupby_element*,turi::groupby_aggregate_impl::groupby_element*,turi::groupby_aggregate_impl::groupby_element*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4[3] = 0;
      v4[4] = 0;
      v4[5] = 0;
      *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
      v4[5] = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      v4[6] = *(void *)(a2 + 48);
      v4 += 7;
      a2 += 56;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,turi::groupby_aggregate_impl::groupby_element*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::groupby_aggregate_impl::groupby_element>,turi::groupby_aggregate_impl::groupby_element*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>(*(void *)a1, **(void **)(a1 + 16), **(void ****)(a1 + 16), **(void **)(a1 + 8), **(void ****)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::groupby_aggregate_impl::groupby_element>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>,std::reverse_iterator<turi::groupby_aggregate_impl::groupby_element*>>(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    v9[3] = v5;
    v9[4] = v6;
    do
    {
      uint64_t v8 = a3 - 7;
      v9[0] = a3 - 4;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](v9);
      v9[0] = v8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v9);
      a3 = v8;
    }
    while (v8 != a5);
  }
}

void turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0::operator()(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  turi::sarray<std::string>::get_reader(**(void **)(a1 + 8));
}

void sub_2240C13EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  turi::sframe_function_output_iterator<std::string,std::function<void ()(std::string const&)>,std::function<void ()(std::string&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a32);
  if (a30) {
    (*(void (**)(uint64_t))(*(void *)a30 + 8))(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_iterator<std::string>::operator++(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  if (*(void *)(*(void *)a1 + 88) >= *(void *)(*(void *)a1 + 72))
  {
    *(void *)(a1 + 40) = *(void *)(a1 + 48);
    std::vector<std::string>::__clear[abi:ne180100](v2);
    uint64_t v6 = v2[7];
    v2[8] = v6;
    v2[11] = v6;
    v2[6] = 0;
  }
  else
  {
    uint64_t v3 = turi::sarray_reader_buffer<std::string>::next(*(uint64_t **)a1);
    uint64_t v4 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v4);
    }
    long long v5 = *(_OWORD *)v3;
    *(void *)(a1 + 32) = *(void *)(v3 + 16);
    *(_OWORD *)uint64_t v4 = v5;
    *(unsigned char *)(v3 + 23) = 0;
    *(unsigned char *)uint64_t v3 = 0;
    ++*(void *)(a1 + 40);
  }
  return a1;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  long long v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  char v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
    }
    else {
      long long v18 = 0;
    }
    long long v28 = &v18[8 * v15];
    __p = v18;
    unint64_t v34 = v28;
    unint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    unint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)long long v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    long long v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    unint64_t v25 = &v23[-8 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)long long v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_2240C1710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_22groupby_aggregate_impl25group_aggregate_container22m"
                                        "erge_local_buffer_setEvE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_22groupby_aggregate_impl25group_aggregate_container22merge_local_buffer_setEvE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  if (result[1] < (unint64_t)result[2]) {
    turi::groupby_aggregate_impl::group_aggregate_container::merge_local_buffer_set(void)::$_0::operator()(*result);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_22groupby_aggregate_impl25group_aggregate_container15g"
                                        "roup_and_writeERNS_6sframeEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_22groupby_aggregate_impl25group_aggregate_container15group_and_writeERNS_6sframeEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0>(unsigned long,unsigned long,turi::groupby_aggregate_impl::group_aggregate_container::group_and_write(turi::sframe &)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  for (unint64_t i = *(void *)(a1 + 8); i < *(void *)(a1 + 16); ++i)
  {
    uint64_t v3 = **(void ***)a1;
    uint64_t v4 = *(void *)(*(void *)a1 + 8);
    long long v5 = *(void **)(*(void *)a1 + 16);
    uint64_t v6 = (std::__shared_weak_count *)v5[1];
    v7[0] = *v5;
    v7[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::groupby_aggregate_impl::group_aggregate_container::group_and_write_segment(v3, v4, v7, i);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2240C1958(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (void ***)*a1;
  if (*v2)
  {
    std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      long long v5 = v4 - 8;
      uint64_t v6 = v4 - 5;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
      uint64_t v6 = v5;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__push_back_slow_path<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v7, v9);
  uint64_t v11 = &v10[64 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[64 * v12];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = 0;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  v15[2] = v11 + 64;
  std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_2240C1B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      long long v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(void *)(v7 - 48) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 24) = *(void *)(a3 + 40);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 48);
      uint64_t v7 = *((void *)&v14 + 1) - 64;
      *((void *)&v14 + 1) -= 64;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::reverse_iterator<std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = i + 3;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = i;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
    unint64_t i = (void **)(*(void *)(a2 + 32) + 64);
  }
}

uint64_t std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (void **)(i - 64);
    *(void *)(a1 + 16) = i - 64;
    uint64_t v6 = (void **)(i - 40);
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = v5;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v6 = a4;
    uint64_t v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (a4 - a1) >> 6)
    {
      uint64_t v11 = (a4 - a1) >> 5;
      uint64_t v12 = v11 | 1;
      long long v13 = (uint64_t *)(a1 + ((v11 | 1) << 6));
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3
        && std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](a5, a2, (uint64_t *)(a1 + ((v11 | 1) << 6)), v13 + 8))
      {
        v13 += 8;
        uint64_t v12 = v14;
      }
      if (!std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](a5, a2, v13, (uint64_t *)v6))
      {
        long long v18 = *(_OWORD *)v6;
        uint64_t v19 = *(void *)(v6 + 16);
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
        *(void *)uint64_t v6 = 0;
        long long v20 = *(_OWORD *)(v6 + 24);
        uint64_t v21 = *(void *)(v6 + 40);
        *(void *)(v6 + 24) = 0;
        *(void *)(v6 + 32) = 0;
        *(void *)(v6 + 40) = 0;
        long long v22 = *(_OWORD *)(v6 + 48);
        do
        {
          uint64_t v15 = v6;
          uint64_t v6 = (uint64_t)v13;
          std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v15, (uint64_t)v13);
          if (v8 < v12) {
            break;
          }
          uint64_t v17 = (2 * v12) | 1;
          long long v13 = (uint64_t *)(a1 + (v17 << 6));
          uint64_t v12 = 2 * v12 + 2;
          if (v12 >= a3)
          {
            uint64_t v12 = v17;
          }
          else if (std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](v16, a2, (uint64_t *)(a1 + (v17 << 6)), v13 + 8))
          {
            v13 += 8;
          }
          else
          {
            uint64_t v12 = v17;
          }
        }
        while (!std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](v16, a2, v13, (uint64_t *)&v18));
        std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v6, (uint64_t)&v18);
        uint64_t v23 = (void **)&v20;
        std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v23);
        uint64_t v23 = (void **)&v18;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
      }
    }
  }
}

void sub_2240C1FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](__n128 a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = a4[6];
  unint64_t v7 = a3[6];
  if (v6 == v7)
  {
    if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a4, a3, a1) & 1) == 0)
    {
      unint64_t v7 = a3[6];
      unint64_t v6 = a4[6];
      goto LABEL_6;
    }
    return 1;
  }
  if (v6 < v7) {
    return 1;
  }
LABEL_6:
  if (v7 == v6)
  {
    if ((turi::groupby_aggregate_impl::flexible_type_vector_lt<std::vector<turi::flexible_type>,std::vector<turi::flexible_type>>(a3, a4, a1) & 1) == 0)return a4[7] < (unint64_t)a3[7]; {
  }
    }
  else if (v7 >= v6)
  {
    return a4[7] < (unint64_t)a3[7];
  }
  return 0;
}

uint64_t std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::unique_ptr<turi::group_aggregate_value>>::__vdeallocate((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    long long v11 = *(_OWORD *)a1;
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    long long v13 = *(_OWORD *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    __n128 v15 = *(__n128 *)(a1 + 48);
    uint64_t v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(a1, a3, a4, v15);
    uint64_t v8 = v7;
    uint64_t v9 = a2 - 64;
    if (v9 == v7)
    {
      std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v7, (uint64_t)&v11);
    }
    else
    {
      std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v7, v9);
      std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v9, (uint64_t)&v11);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(a1, v8 + 64, a3, (v8 + 64 - a1) >> 6, v10);
    }
    __n128 v16 = (void **)&v13;
    std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v16);
    __n128 v16 = (void **)&v11;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

void sub_2240C2200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = a3 - 2;
  if (a3 < 2) {
    uint64_t v8 = a3 - 1;
  }
  uint64_t v9 = v8 >> 1;
  do
  {
    uint64_t v10 = a1 + (v7 << 6) + 64;
    uint64_t v11 = (2 * v7) | 1;
    uint64_t v12 = 2 * v7 + 2;
    if (v12 < a3
      && std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](a4, a2, (uint64_t *)(a1 + (v7 << 6) + 64), (uint64_t *)(a1 + (v7 << 6) + 128)))
    {
      v10 += 64;
      uint64_t v11 = v12;
    }
    std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](a1, v10);
    a1 = v10;
    uint64_t v7 = v11;
  }
  while (v11 <= v9);
  return v10;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>> &,std::__wrap_iter<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  unint64_t v5 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v9 = v5 >> 1;
    uint64_t v10 = (uint64_t *)(a1 + (v5 >> 1 << 6));
    uint64_t v11 = (void *)(a2 - 64);
    if (std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](a5, a3, v10, (uint64_t *)(a2 - 64)))
    {
      long long v14 = *(_OWORD *)(a2 - 64);
      uint64_t v15 = *(void *)(a2 - 48);
      void *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      long long v16 = *(_OWORD *)(a2 - 40);
      uint64_t v17 = *(void *)(a2 - 24);
      *(void *)(a2 - 40) = 0;
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - 24) = 0;
      long long v18 = *(_OWORD *)(a2 - 16);
      do
      {
        uint64_t v12 = (uint64_t)v10;
        std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100]((uint64_t)v11, (uint64_t)v10);
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (uint64_t *)(a1 + (v9 << 6));
        uint64_t v11 = (void *)v12;
      }
      while (std::greater<std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>>::operator()[abi:ne180100](v13, a3, v10, (uint64_t *)&v14));
      std::pair<turi::groupby_aggregate_impl::groupby_element,unsigned long>::operator=[abi:ne180100](v12, (uint64_t)&v14);
      uint64_t v19 = (void **)&v16;
      std::vector<std::unique_ptr<turi::group_aggregate_value>>::__destroy_vector::operator()[abi:ne180100](&v19);
      uint64_t v19 = (void **)&v14;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
  }
}

void sub_2240C23D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void turi::join(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  v64[108] = *(char **)MEMORY[0x263EF8340];
  __p = 0;
  atomic_ullong *volatile v62 = 0;
  uint64_t v63 = 0;
  uint64_t v58 = 0;
  unsigned int v59 = 0;
  atomic_ullong *volatile v60 = 0;
  unint64_t v9 = (unsigned __int8 **)(a4 + 1);
  uint64_t v8 = (unsigned __int8 **)*a4;
  if ((void *)*a4 != a4 + 1)
  {
    do
    {
      uint64_t v10 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a1 + 40), *(void *)(a1 + 48), v8 + 4);
      if (v10 == *(void *)(a1 + 48))
      {
        v64[0] = (char *)(v8 + 4);
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *(void *)(a1 + 40)) >> 3);
      uint64_t v12 = v62;
      if (v62 >= v63)
      {
        long long v14 = (unint64_t *)__p;
        uint64_t v15 = ((char *)v62 - (unsigned char *)__p) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = (char *)v63 - (unsigned char *)__p;
        if (((char *)v63 - (unsigned char *)__p) >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v63, v18);
          long long v14 = (unint64_t *)__p;
          uint64_t v12 = v62;
        }
        else
        {
          uint64_t v19 = 0;
        }
        long long v20 = (unint64_t *)&v19[8 * v15];
        *long long v20 = v11;
        __n128 v13 = v20 + 1;
        while (v12 != v14)
        {
          unint64_t v21 = *--v12;
          *--long long v20 = v21;
        }
        __p = v20;
        atomic_ullong *volatile v62 = v13;
        uint64_t v63 = (unint64_t *)&v19[8 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *atomic_ullong *volatile v62 = v11;
        __n128 v13 = v12 + 1;
      }
      atomic_ullong *volatile v62 = v13;
      uint64_t v22 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a2 + 40), *(void *)(a2 + 48), v8 + 7);
      if (v22 == *(void *)(a2 + 48))
      {
        v64[0] = (char *)(v8 + 7);
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - *(void *)(a2 + 40)) >> 3);
      uint64_t v24 = v59;
      if (v59 >= v60)
      {
        long long v26 = (unint64_t *)v58;
        uint64_t v27 = ((char *)v59 - (unsigned char *)v58) >> 3;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = (char *)v60 - (unsigned char *)v58;
        if (((char *)v60 - (unsigned char *)v58) >> 2 > v28) {
          unint64_t v28 = v29 >> 2;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v60, v30);
          long long v26 = (unint64_t *)v58;
          uint64_t v24 = v59;
        }
        else
        {
          uint64_t v31 = 0;
        }
        __n128 v32 = (unint64_t *)&v31[8 * v27];
        *__n128 v32 = v23;
        unint64_t v25 = v32 + 1;
        while (v24 != v26)
        {
          unint64_t v33 = *--v24;
          *--__n128 v32 = v33;
        }
        uint64_t v58 = v32;
        unsigned int v59 = v25;
        atomic_ullong *volatile v60 = (unint64_t *)&v31[8 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *unsigned int v59 = v23;
        unint64_t v25 = v24 + 1;
      }
      unsigned int v59 = v25;
      int v34 = turi::sframe::column_type((turi::sframe *)a1, *(v62 - 1));
      BOOL v35 = v34 == turi::sframe::column_type((turi::sframe *)a2, *(v25 - 1)) || *(unsigned char *)(a1 + 288) == 0;
      if (!v35 && *(void *)(a1 + 32) != 0 && *(unsigned char *)(a2 + 288) != 0 && *(void *)(a2 + 32) != 0)
      {
        v64[0] = (char *)(v8 + 4);
        turi::join(turi::sframe &,turi::sframe &,std::string,std::map<std::string,std::string> const&,std::map<std::string,std::string> const&,unsigned long)::$_0::operator()();
      }
      uint64_t v39 = v8[1];
      if (v39)
      {
        do
        {
          uint64_t v40 = (unsigned __int8 **)v39;
          uint64_t v39 = *(unsigned __int8 **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          uint64_t v40 = (unsigned __int8 **)v8[2];
          BOOL v35 = *v40 == (unsigned __int8 *)v8;
          uint64_t v8 = v40;
        }
        while (!v35);
      }
      uint64_t v8 = v40;
    }
    while (v40 != v9);
  }
  MEMORY[0x22A614D20](&v57);
  unint64_t v41 = (char *)a3;
  int v42 = *(char *)(a3 + 23);
  BOOL v43 = v42 < 0;
  atomic_ullong *volatile v44 = *(char **)a3;
  if (v42 >= 0) {
    atomic_ullong *volatile v44 = (char *)a3;
  }
  uint64_t v45 = *(unsigned __int8 *)(a3 + 23);
  if (v43) {
    uint64_t v45 = *(void *)(a3 + 8);
  }
  v64[0] = v44;
  v64[1] = &v44[v45];
  boost::algorithm::detail::transform_range<boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::to_lowerF<char>>(v64, &v57);
  std::locale::~locale(&v57);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    int v46 = *(unsigned __int8 *)(a3 + 23);
    if (v46 != 4)
    {
      if (v46 != 5) {
        goto LABEL_103;
      }
      if (*(_DWORD *)a3 != 1702131055 || *(unsigned char *)(a3 + 4) != 114)
      {
        if (*(_DWORD *)a3 != 1751607666 || *(unsigned char *)(a3 + 4) != 116)
        {
LABEL_88:
          if (*(_DWORD *)v41 != 1701736041 || v41[4] != 114) {
LABEL_103:
          }
            turi::join(turi::sframe &,turi::sframe &,std::string,std::map<std::string,std::string> const&,std::map<std::string,std::string> const&,unsigned long)::$_1::operator()();
          uint64_t v53 = 0;
LABEL_98:
          turi::join_impl::hash_join_executor::hash_join_executor(v64, a1, a2, &__p, &v58, v53, a5, a6);
          turi::join_impl::hash_join_executor::grace_hash_join((turi::join_impl::hash_join_executor *)v64);
        }
        goto LABEL_96;
      }
LABEL_97:
      uint64_t v53 = 3;
      goto LABEL_98;
    }
    if (*(_DWORD *)a3 != 1952867692) {
      goto LABEL_103;
    }
LABEL_95:
    uint64_t v53 = 1;
    goto LABEL_98;
  }
  uint64_t v49 = *(void *)(a3 + 8);
  if (v49 == 4)
  {
    if (**(_DWORD **)a3 == 1952867692) {
      goto LABEL_95;
    }
    uint64_t v49 = *(void *)(a3 + 8);
  }
  else if (v49 == 5 && **(_DWORD **)a3 == 1702131055 && *(unsigned char *)(*(void *)a3 + 4) == 114)
  {
    goto LABEL_97;
  }
  if (v49 != 5) {
    goto LABEL_103;
  }
  if (**(_DWORD **)a3 != 1751607666 || *(unsigned char *)(*(void *)a3 + 4) != 116)
  {
    if (*(void *)(a3 + 8) != 5) {
      goto LABEL_103;
    }
    unint64_t v41 = *(char **)a3;
    goto LABEL_88;
  }
LABEL_96:
  uint64_t v53 = 2;
  goto LABEL_98;
}

void sub_2240C2900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::~hash_join_executor(turi::join_impl::hash_join_executor *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 840, *((void **)this + 106));
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)this + 792);
  uint64_t v2 = (void *)*((void *)this + 95);
  if (v2)
  {
    *((void *)this + 96) = v2;
    operator delete(v2);
  }
  unint64_t v5 = (void **)((char *)this + 736);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)this + 696);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)this + 656);
  uint64_t v3 = (void *)*((void *)this + 77);
  if (v3)
  {
    *((void *)this + 78) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 74);
  if (v4)
  {
    *((void *)this + 75) = v4;
    operator delete(v4);
  }
  turi::sframe::~sframe((turi::join_impl::hash_join_executor *)((char *)this + 296));
  turi::sframe::~sframe(this);
}

char **boost::algorithm::detail::transform_range<boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::to_lowerF<char>>(char **result, std::locale *this)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    unint64_t v5 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v6 = *v2;
      uint64_t v7 = std::locale::use_facet(this, v5);
      uint64_t result = (char **)((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[1].__on_zero_shared)(v7, v6);
      *v2++ = (char)result;
    }
    while (v2 != v3);
  }
  return result;
}

__n128 OUTLINED_FUNCTION_0_10(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void turi::join_impl::hash_join_row_t::~hash_join_row_t(void **this)
{
  uint64_t v1 = this;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t turi::join_impl::join_hash_table::add_row(uint64_t a1, uint64_t a2)
{
  v28[1] = *(uint64_t **)MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t *)(a1 + 40);
  uint64_t v24 = (uint64_t *)turi::join_impl::compute_hash_from_row((void *)a2, (uint64_t **)(a1 + 40));
  unint64_t v5 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((void *)a1, (unint64_t *)&v24);
  uint64_t v6 = v5;
  if (!v5)
  {
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v25, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    std::vector<std::vector<turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*>((uint64_t)&v21, &v25, v28, 1uLL);
    unint64_t v18 = (void **)&v25;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
    char v23 = 0;
    unint64_t v18 = (void **)&v18;
    uint64_t v19 = &v18;
    uint64_t v20 = 0;
    __n128 v13 = operator new(0x30uLL);
    v13[1] = v21;
    *((void *)v13 + 4) = v22;
    *((void *)&v21 + 1) = 0;
    uint64_t v22 = 0;
    *((unsigned char *)v13 + 40) = 0;
    *(void *)__n128 v13 = &v18;
    *((void *)v13 + 1) = &v18;
    unint64_t v18 = (void **)v13;
    uint64_t v19 = (void ***)v13;
    uint64_t v20 = 1;
    *(void *)&long long v21 = 0;
    unint64_t v25 = v24;
    std::list<turi::join_impl::hash_join_row_t>::list(&v26, (uint64_t)&v18);
    std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>(a1, (unint64_t *)&v25, &v25);
    std::__list_imp<turi::join_impl::hash_join_row_t>::clear((char *)&v26);
    std::__list_imp<turi::join_impl::hash_join_row_t>::clear((char *)&v18);
    goto LABEL_9;
  }
  *(void *)&long long v21 = v5[5];
  if (!(void)v21)
  {
    unint64_t v25 = (uint64_t *)&v21;
    turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_0::operator()();
  }
  uint64_t v7 = v5 + 3;
  uint64_t v8 = (void *)v5[4];
  if (v8 == v5 + 3)
  {
LABEL_7:
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v25, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    std::vector<std::vector<turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*>((uint64_t)&v21, &v25, v28, 1uLL);
    unint64_t v18 = (void **)&v25;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
    char v23 = 0;
    unint64_t v11 = operator new(0x30uLL);
    v11[1] = v21;
    *((void *)v11 + 4) = v22;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    *((unsigned char *)v11 + 40) = 0;
    *((void *)v11 + 1) = v7;
    uint64_t v12 = v6[3];
    *(void *)unint64_t v11 = v12;
    *(void *)(v12 + 8) = v11;
    void v6[3] = v11;
    ++v6[5];
LABEL_9:
    unint64_t v25 = (uint64_t *)&v21;
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    return 1;
  }
  while (1)
  {
    unint64_t v9 = (void *)v8[2];
    uint64_t v10 = v8[3] - (void)v9;
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    if (!v10)
    {
      unint64_t v25 = (uint64_t *)&v21;
      turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_1::operator()();
    }
    if (turi::join_impl::join_hash_table::join_values_equal(a1, v9, (void *)a2, v4)) {
      break;
    }
    uint64_t v8 = (void *)v8[1];
    if (v8 == v7) {
      goto LABEL_7;
    }
  }
  uint64_t v15 = v8 + 2;
  unint64_t v16 = v8[3];
  if (v16 >= v8[4])
  {
    uint64_t v17 = std::vector<std::vector<turi::flexible_type>>::__push_back_slow_path<std::vector<turi::flexible_type> const&>(v15, (uint64_t **)a2);
  }
  else
  {
    std::vector<std::vector<turi::flexible_type>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::flexible_type> const&>((uint64_t)v15, (uint64_t **)a2);
    uint64_t v17 = v16 + 24;
  }
  uint64_t result = 0;
  v8[3] = v17;
  return result;
}

void sub_2240C2DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  std::__list_imp<turi::join_impl::hash_join_row_t>::clear(v18);
  std::__list_imp<turi::join_impl::hash_join_row_t>::clear((char *)&a10);
  a18 = (void **)&a13;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t turi::join_impl::compute_hash_from_row(void *a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *v2++;
    unint64_t v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(*a1 + 16 * v6));
    uint64_t v8 = 5
       * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v5) | ((0x87C37B91114253D5 * v5) >> 31))) ^ 0x73A3916AE45D01E5, 27);
    uint64_t v5 = (5
        * (__ROR8__((0x87C37B91114253D5 * ((0x93A2C9BF80000000 * v7) | ((0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v8+ 0x4231D716C8ADF0A2)+ 944331445) ^ (v8 + 0x4231D716C8ADF0A2);
  }
  while (v2 != v3);
  return v5;
}

void turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"find_ret->second.size()", 23);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 35, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  __n128 v13 = v16;
  turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C30D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"it->rows.size()", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 39, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  __n128 v13 = v16;
  turi::join_impl::join_hash_table::add_row(std::vector<turi::flexible_type> const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C3360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::join_impl::join_hash_table::join_values_equal(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v7 = a4[1] - *a4;
  if (!v7) {
    return a2[1] == *a2 && a3[1] == *a3;
  }
  uint64_t v9 = (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3;
  uint64_t v89 = v7 >> 3;
  uint64_t v90 = v9;
  if (v9 != v7 >> 3)
  {
    v91 = &v90;
    unsigned int v92 = &v89;
    turi::join_impl::join_hash_table::join_values_equal(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> const&)::$_0::operator()();
  }
  unint64_t v11 = 0;
  while (2)
  {
    uint64_t v12 = *a3 + 16 * *(void *)(v6 + 8 * v11);
    __n128 v13 = (unsigned __int8 *)(*a2 + 16 * *(void *)(*(void *)(a1 + 40) + 8 * v11));
    switch(*(unsigned char *)(v12 + 12))
    {
      case 0:
        switch(v13[12])
        {
          case 0u:
            if (*(void *)v13 != *(void *)v12) {
              return 0;
            }
            goto LABEL_104;
          case 1u:
            double v14 = *(double *)v13;
            uint64_t v15 = *(void *)v12;
            goto LABEL_73;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            return 0;
          case 6u:
            if (*(void *)v12 != (uint64_t)(*(void *)v13 << 8) >> 8 || *((_DWORD *)v13 + 2)) {
              return 0;
            }
            goto LABEL_104;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 1:
        switch(v13[12])
        {
          case 0u:
            double v14 = *(double *)v12;
            uint64_t v15 = *(void *)v13;
LABEL_73:
            double v76 = (double)v15;
            goto LABEL_74;
          case 1u:
            double v14 = *(double *)v13;
            double v76 = *(double *)v12;
LABEL_74:
            if (v14 != v76) {
              return 0;
            }
            goto LABEL_104;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            return 0;
          case 6u:
            double v77 = vabdd_f64((double)*((int *)v13 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v13 << 8) >> 8), *(double *)v12);
            goto LABEL_82;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 2:
        unsigned int v16 = v13[12];
        if (v16 != 2)
        {
          if (v16 > 9 || v16 == 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return 0;
        }
        double v17 = *(double *)v13;
        int v18 = *(char *)(*(void *)v13 + 31);
        size_t v19 = *(unsigned __int8 *)(*(void *)v13 + 31);
        if (v18 < 0) {
          size_t v20 = *(void *)(*(void *)&v17 + 16);
        }
        else {
          size_t v20 = v19;
        }
        double v78 = *(double *)v12;
        if (*(char *)(*(void *)&v78 + 31) < 0) {
          uint64_t v79 = *(void *)(*(void *)&v78 + 16);
        }
        else {
          uint64_t v79 = *(unsigned __int8 *)(*(void *)&v78 + 31);
        }
        if (v20 != v79) {
          return 0;
        }
        atomic_ullong *volatile v80 = (unsigned __int8 *)(*(void *)&v17 + 8);
        if ((v19 & 0x80) != 0) {
          atomic_ullong *volatile v80 = *(unsigned __int8 **)v80;
        }
        v81 = (unsigned __int8 *)(*(void *)&v78 + 8);
        if ((*(unsigned char *)(*(void *)&v78 + 31) & 0x80) == 0)
        {
          if ((v19 & 0x80) == 0) {
            goto LABEL_96;
          }
          goto LABEL_101;
        }
        v81 = *(unsigned __int8 **)v81;
        if ((v19 & 0x80) != 0)
        {
LABEL_101:
          if (memcmp(v80, v81, v20)) {
            return 0;
          }
LABEL_104:
          ++v11;
          uint64_t v6 = *a4;
          if (v11 >= (a4[1] - *a4) >> 3) {
            return 1;
          }
          continue;
        }
LABEL_96:
        if (!v20) {
          goto LABEL_104;
        }
        while (*v80 == *v81)
        {
          ++v80;
          ++v81;
          if (!--v20) {
            goto LABEL_104;
          }
        }
        return 0;
      case 3:
        unsigned int v21 = v13[12];
        if (v21 != 3)
        {
          if (v21 > 9 || v21 == 3) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return 0;
        }
        double v22 = *(double *)v12;
        char v23 = *(double **)(*(void *)v13 + 8);
        uint64_t v24 = *(double **)(*(void *)v13 + 16);
        unint64_t v25 = v24 - v23;
        uint64_t v27 = *(void *)&v22 + 8;
        uint64_t v26 = *(double **)(*(void *)&v22 + 8);
        if (v25 != (uint64_t)(*(void *)(v27 + 8) - (void)v26) >> 3) {
          return 0;
        }
        if (v24 != v23)
        {
          uint64_t v28 = v25 <= 1 ? 1 : v24 - v23;
          if (*v23 != *v26) {
            return 0;
          }
          uint64_t v29 = 1;
          do
          {
            unint64_t v30 = v29;
            if (v28 == v29) {
              break;
            }
            double v31 = v23[v29];
            double v32 = v26[v29++];
          }
          while (v31 == v32);
          if (v30 < v25) {
            return 0;
          }
        }
        goto LABEL_104;
      case 4:
        unsigned int v33 = v13[12];
        if (v33 != 4)
        {
          if (v33 > 9 || v33 == 4) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return 0;
        }
        if ((turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v89, (uint64_t *)(*(void *)v13 + 8), (void *)(*(void *)v12 + 8)) & 1) == 0)return 0; {
        goto LABEL_104;
        }
      case 5:
        unsigned int v34 = v13[12];
        if (v34 != 5)
        {
          if (v34 > 9 || v34 == 5) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return 0;
        }
        if (!turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v89, (uint64_t **)(*(void *)v13 + 8), (uint64_t **)(*(void *)v12 + 8)))return 0; {
        goto LABEL_104;
        }
      case 6:
        switch(v13[12])
        {
          case 0u:
            if (*(void *)v13 != (uint64_t)(*(void *)v12 << 8) >> 8 || *(_DWORD *)(v12 + 8)) {
              return 0;
            }
            goto LABEL_104;
          case 1u:
            double v77 = vabdd_f64(*(double *)v13, (double)*(int *)(v12 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v12 << 8) >> 8));
LABEL_82:
            if (v77 >= 0.0000005) {
              return 0;
            }
            goto LABEL_104;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            return 0;
          case 6u:
            if (((*(void *)v12 ^ *(void *)v13) & 0xFFFFFFFFFFFFFFLL) != 0
              || *((_DWORD *)v13 + 2) != *(_DWORD *)(v12 + 8))
            {
              return 0;
            }
            goto LABEL_104;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 7:
        unsigned int v35 = v13[12];
        if (v35 == 7) {
          goto LABEL_104;
        }
        if (v35 > 9 || v35 == 7) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 0;
      case 8:
        unsigned int v36 = v13[12];
        if (v36 != 8)
        {
          if (v36 > 9 || v36 == 8) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return 0;
        }
        if (!turi::image_type::operator==(*(void *)v13 + 8, *(void *)v12 + 8)) {
          return 0;
        }
        goto LABEL_104;
      case 9:
        unsigned int v37 = v13[12];
        if (v37 != 9)
        {
          if (v37 >= 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return 0;
        }
        double v38 = *(double *)v12;
        double v39 = *(double *)v13;
        if (*(void *)v12 != *(void *)v13)
        {
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(void *)&v39 + 8, *(void *)&v38 + 8)) {
            return 0;
          }
          unint64_t v41 = *(char **)(*(void *)&v39 + 24);
          uint64_t v40 = *(char **)(*(void *)&v39 + 32);
          uint64_t v42 = v40 - v41;
          if (v40 != v41)
          {
            if (*(void *)(*(void *)&v39 + 8))
            {
              uint64_t v43 = 1;
              do
              {
                uint64_t v44 = *(void *)v41;
                v41 += 8;
                v43 *= v44;
              }
              while (v41 != v40);
              if (v43)
              {
                uint64_t v90 = 0;
                std::vector<unsigned long>::vector(&v91, v42 >> 3, &v90);
                uint64_t v45 = v91;
                int v46 = v92;
                uint64_t v47 = **(void **)(*(void *)&v38 + 8);
                uint64_t v48 = (char *)v92 - (char *)v91;
                unint64_t v49 = v92 - v91;
                unint64_t v50 = v49 - 1;
                if (v49 <= 1) {
                  uint64_t v51 = 1;
                }
                else {
                  uint64_t v51 = v92 - v91;
                }
                do
                {
                  if (v46 == v45)
                  {
                    uint64_t v59 = 0;
                    double v60 = *(double *)(**(void **)(*(void *)&v39 + 8) + 8 * *(void *)(*(void *)&v39 + 72));
                  }
                  else
                  {
                    uint64_t v52 = 0;
                    uint64_t v53 = *(uint64_t **)(*(void *)&v39 + 48);
                    atomic_ullong *volatile v54 = v45;
                    uint64_t v55 = v51;
                    do
                    {
                      uint64_t v57 = *v54++;
                      uint64_t v56 = v57;
                      uint64_t v58 = *v53++;
                      v52 += v58 * v56;
                      --v55;
                    }
                    while (v55);
                    uint64_t v59 = 0;
                    double v60 = *(double *)(**(void **)(*(void *)&v39 + 8)
                                    + 8 * (*(void *)(*(void *)&v39 + 72) + v52));
                    unint64_t v61 = *(uint64_t **)(*(void *)&v38 + 48);
                    atomic_ullong *volatile v62 = v45;
                    uint64_t v63 = v51;
                    do
                    {
                      uint64_t v65 = *v62++;
                      uint64_t v64 = v65;
                      uint64_t v66 = *v61++;
                      v59 += v66 * v64;
                      --v63;
                    }
                    while (v63);
                  }
                  double v67 = *(double *)(v47 + 8 * (*(void *)(*(void *)&v38 + 72) + v59));
                  if (v60 != v67) {
                    break;
                  }
                  uint64_t v68 = v49;
                  unint64_t v69 = v49 - 1;
                  if (v48 < 1) {
                    goto LABEL_62;
                  }
                  uint64_t v70 = *(void *)(*(void *)&v39 + 24);
                  unint64_t v71 = v45[v50] + 1;
                  v45[v50] = v71;
                  unint64_t v72 = (v48 & 0xFFFFFFFFFFFFFFF8) - 16;
                  uint64_t v73 = v49 - 1;
                  if (v71 < *(void *)(v70 + 8 * v50))
                  {
                    uint64_t v68 = 1;
                    unint64_t v69 = v49 - 1;
LABEL_62:
                    if ((v69 & 0x8000000000000000) != 0) {
                      break;
                    }
                    continue;
                  }
                  do
                  {
                    *(uint64_t *)((char *)v45 + v72 + 8) = 0;
                    if (v73 <= 0)
                    {
                      unsigned int v92 = v45;
                      operator delete(v45);
                      goto LABEL_104;
                    }
                    --v73;
                    unint64_t v74 = *(uint64_t *)((char *)v45 + v72) + 1;
                    *(uint64_t *)((char *)v45 + v72) = v74;
                    unint64_t v75 = *(void *)(v70 + v72);
                    v72 -= 8;
                  }
                  while (v74 >= v75);
                  uint64_t v68 = 1;
                  if (v73 < 0) {
                    break;
                  }
                }
                while (v68);
                if (v45)
                {
                  unsigned int v92 = v45;
                  operator delete(v45);
                }
                if (v60 != v67) {
                  return 0;
                }
              }
            }
          }
        }
        goto LABEL_104;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
  }
}

uint64_t *turi::join_impl::join_hash_table::get_matching_rows(void *a1, void *a2, uint64_t **a3, int a4)
{
  uint64_t v13 = turi::join_impl::compute_hash_from_row(a2, a3);
  uint64_t v8 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(a1, (unint64_t *)&v13);
  if (!v8) {
    return &turi::join_impl::join_hash_table::empty_vt;
  }
  uint64_t v9 = v8 + 3;
  uint64_t v10 = v8[4];
  if ((void *)v10 == v8 + 3) {
    return &turi::join_impl::join_hash_table::empty_vt;
  }
  unint64_t v11 = &turi::join_impl::join_hash_table::empty_vt;
  while (!turi::join_impl::join_hash_table::join_values_equal((uint64_t)a1, *(void **)(v10 + 16), a2, (uint64_t *)a3))
  {
    uint64_t v10 = *(void *)(v10 + 8);
    if ((void *)v10 == v9) {
      return v11;
    }
  }
  unint64_t v11 = (uint64_t *)(v10 + 16);
  if (a4) {
    *(unsigned char *)(v10 + 40) = 1;
  }
  return v11;
}

void turi::join_impl::join_hash_table::join_values_equal(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_hash_positions.size()", 22);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"hash_positions.size()", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 103, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::join_impl::join_hash_table::join_values_equal(std::vector<turi::flexible_type> const&,std::vector<turi::flexible_type> const&,std::vector<unsigned long> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C3E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::join_impl::hash_join_executor::hash_join_executor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, const void ***a7, uint64_t a8)
{
  v136[36] = *MEMORY[0x263EF8340];
  long long v120 = (turi::sframe *)(turi::sframe::sframe((turi::sframe *)a1, (const turi::sframe *)a2) + 296);
  turi::sframe::sframe(v120, (const turi::sframe *)a3);
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 592), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 616), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  *(void *)(a1 + 640) = a8;
  *(_WORD *)(a1 + 648) = 0;
  uint64_t v127 = (void *)(a1 + 656);
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = 1065353216;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  uint64_t v121 = a1 + 696;
  __n128 v122 = (void *)(a1 + 616);
  *(_DWORD *)(a1 + 728) = 1065353216;
  v125 = (std::vector<std::string> *)(a1 + 736);
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(unsigned char *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 824) = 1065353216;
  *(unsigned char *)(a1 + 832) = 0;
  long long v123 = (void **)(a1 + 760);
  uint64_t v124 = a1 + 840;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(a1 + 840), a7);
  if ((a6 & 0xFFFFFFFD) == 1) {
    *(unsigned char *)(a1 + 648) = 1;
  }
  if ((a6 & 0xFFFFFFFE) == 2) {
    *(unsigned char *)(a1 + 649) = 1;
  }
  uint64_t v16 = *(void *)(a1 + 600);
  uint64_t v17 = *(void *)(a1 + 592);
  v134.__begin_ = (std::vector<std::string>::pointer)((v16 - v17) >> 3);
  v133[0] = (uint64_t *)((uint64_t)(*(void *)(a1 + 624) - *(void *)(a1 + 616)) >> 3);
  if ((uint64_t *)v134.__begin_ != v133[0])
  {
    *(void *)&long long v135 = &v134;
    *((void *)&v135 + 1) = v133;
    turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_0::operator()();
  }
  if (v16 != v17)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>((uint64_t)v127, (unint64_t *)(*v122 + v18), (void *)(*v122 + v18), (uint64_t *)(v17 + v18));
      if (!v20) {
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_1::operator()();
      }
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>(v121, (unint64_t *)(*(void *)(a1 + 592) + v18), (void *)(*(void *)(a1 + 592) + v18), (uint64_t *)(*v122 + v18));
      if (!v21) {
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_2::operator()();
      }
      ++v19;
      uint64_t v17 = *(void *)(a1 + 592);
      v18 += 8;
    }
    while (v19 < (*(void *)(a1 + 600) - v17) >> 3);
  }
  double v22 = *(long long **)(a2 + 40);
  char v23 = *(long long **)(a2 + 48);
  memset(&v134, 0, sizeof(v134));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v134, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  if (v125 != (std::vector<std::string> *)(a2 + 40)) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v125, *(std::string **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  }
  std::vector<turi::flex_type_enum>::vector(&v135, *(void *)(a2 + 24));
  if (*(void *)(a2 + 24))
  {
    unint64_t v24 = 0;
    do
    {
      char v25 = turi::sframe::column_type((turi::sframe *)a2, v24);
      *(unsigned char *)(v135 + v24++) = v25;
    }
    while (v24 < *(void *)(a2 + 24));
  }
  uint64_t v26 = *v123;
  if (*v123)
  {
    *(void *)(a1 + 768) = v26;
    operator delete(v26);
    *long long v123 = 0;
    *(void *)(a1 + 768) = 0;
    *(void *)(a1 + 776) = 0;
  }
  *(_OWORD *)long long v123 = v135;
  *(void *)(a1 + 776) = v136[0];
  std::set<std::string>::set[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::string*>>>((uint64_t)v133, (const void **)&v134.__begin_->__r_.__value_.__l.__data_, (const void **)&v134.__end_->__r_.__value_.__l.__data_);
  if (&v134 != (std::vector<std::string> *)(a3 + 40)) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v134, *(std::string **)(a3 + 40), *(long long **)(a3 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 3));
  }
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v131, (const void **)&v134.__begin_->__r_.__value_.__l.__data_, (const void **)&v134.__end_->__r_.__value_.__l.__data_);
  v130[0] = 0;
  v130[1] = 0;
  v129 = v130;
  uint64_t v27 = *(const void ***)(a1 + 840);
  if (v27 != (const void **)(a1 + 848))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v131, v27 + 4))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v135);
        uint64_t v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"user provided column name { ", 28);
        int v101 = *((char *)v27 + 55);
        if (v101 >= 0) {
          uint64_t v102 = (uint64_t)(v27 + 4);
        }
        else {
          uint64_t v102 = (uint64_t)v27[4];
        }
        if (v101 >= 0) {
          uint64_t v103 = *((unsigned __int8 *)v27 + 55);
        }
        else {
          uint64_t v103 = (uint64_t)v27[5];
        }
        unint64_t v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, v102, v103);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)" } is not found in right SFrame.", 32);
        unint64_t v128 = (unint64_t)&v135;
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_3::operator()();
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v129, v27 + 7, (uint64_t)(v27 + 7));
      if ((v28 & 1) == 0)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v135);
        v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"user provided resolution name { ", 32);
        int v106 = *((char *)v27 + 79);
        if (v106 >= 0) {
          uint64_t v107 = (uint64_t)(v27 + 7);
        }
        else {
          uint64_t v107 = (uint64_t)v27[7];
        }
        if (v106 >= 0) {
          uint64_t v108 = *((unsigned __int8 *)v27 + 79);
        }
        else {
          uint64_t v108 = (uint64_t)v27[8];
        }
        v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, v107, v108);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)" } duplicates with other resolution name.", 41);
        unint64_t v128 = (unint64_t)&v135;
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_4::operator()();
      }
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v131, v27 + 7))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v135);
        unint64_t v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"user provided resolution name { ", 32);
        int v111 = *((char *)v27 + 79);
        if (v111 >= 0) {
          uint64_t v112 = (uint64_t)(v27 + 7);
        }
        else {
          uint64_t v112 = (uint64_t)v27[7];
        }
        if (v111 >= 0) {
          uint64_t v113 = *((unsigned __int8 *)v27 + 79);
        }
        else {
          uint64_t v113 = (uint64_t)v27[8];
        }
        uint64_t v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, v112, v113);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)" } is not allowed to be same with any name in right SFrame.", 59);
        unint64_t v128 = (unint64_t)&v135;
        turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_5::operator()();
      }
      uint64_t v29 = (const void **)v27[1];
      if (v29)
      {
        do
        {
          unint64_t v30 = (const void ***)v29;
          uint64_t v29 = (const void **)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          unint64_t v30 = (const void ***)v27[2];
          BOOL v31 = *v30 == v27;
          uint64_t v27 = (const void **)v30;
        }
        while (!v31);
      }
      uint64_t v27 = (const void **)v30;
    }
    while (v30 != (const void ***)(a1 + 848));
  }
  std::vector<std::string>::pointer begin = v134.__begin_;
  std::vector<std::string>::pointer end = v134.__end_;
  for (uint64_t i = (void *)(a3 + 40); begin != end; ++begin)
  {
    uint64_t v34 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a3 + 40), *(void *)(a3 + 48), (unsigned __int8 **)begin);
    if (v34 == *(void *)(a3 + 48))
    {
      *(void *)&long long v135 = begin;
      turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
    }
    unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * ((v34 - *i) >> 3);
    if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(v127, &v128))
    {
      continue;
    }
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v133, (const void **)&begin->__r_.__value_.__l.__data_))
    {
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v124, (const void **)&begin->__r_.__value_.__l.__data_))
      {
        uint64_t v35 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v124, (const void **)&begin->__r_.__value_.__l.__data_);
        unsigned int v36 = (const void **)(v35 + 56);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v133, v36, (uint64_t)v36);
        if ((v37 & 1) == 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v135);
          v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"user provided column name { ", 28);
          int v116 = *(char *)(v35 + 79);
          if (v116 >= 0) {
            uint64_t v117 = v35 + 56;
          }
          else {
            uint64_t v117 = *(void *)(v35 + 56);
          }
          if (v116 >= 0) {
            uint64_t v118 = *(unsigned __int8 *)(v35 + 79);
          }
          else {
            uint64_t v118 = *(void *)(v35 + 64);
          }
          v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, v117, v118);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)" } conflicts with table name used in SFrame", 43);
          unint64_t v128 = (unint64_t)&v135;
          turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_6::operator()();
        }
        uint64_t v38 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a3 + 40), *(void *)(a3 + 48), (unsigned __int8 **)begin);
        if (v38 == *(void *)(a3 + 48))
        {
          *(void *)&long long v135 = begin;
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        char v39 = turi::sframe::column_type((turi::sframe *)a3, 0xAAAAAAAAAAAAAAABLL * ((v38 - *(void *)(a3 + 40)) >> 3));
        char v40 = v39;
        unint64_t v41 = *(unsigned char **)(a1 + 768);
        unint64_t v42 = *(void *)(a1 + 776);
        if ((unint64_t)v41 >= v42)
        {
          unint64_t v52 = (unint64_t)*v123;
          uint64_t v53 = v41 - (unsigned char *)*v123;
          unint64_t v54 = v53 + 1;
          if (v53 + 1 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v55 = v42 - v52;
          if (2 * v55 > v54) {
            unint64_t v54 = 2 * v55;
          }
          if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v56 = v54;
          }
          if (v56) {
            uint64_t v57 = (char *)operator new(v56);
          }
          else {
            uint64_t v57 = 0;
          }
          double v76 = &v57[v53];
          double v77 = &v57[v53];
          *double v77 = v40;
          uint64_t v43 = v77 + 1;
          if (v41 == (unsigned char *)v52)
          {
            uint64_t i = (void *)(a3 + 40);
          }
          else
          {
            double v78 = &v41[~v52];
            uint64_t i = (void *)(a3 + 40);
            do
            {
              char v79 = *--v41;
              (v78--)[(void)v57] = v79;
            }
            while (v41 != (unsigned char *)v52);
            double v76 = v57;
          }
          *(void *)(a1 + 760) = v76;
          *(void *)(a1 + 768) = v43;
          *(void *)(a1 + 776) = &v57[v56];
          if (v52) {
            operator delete((void *)v52);
          }
        }
        else
        {
          unsigned char *v41 = v39;
          uint64_t v43 = v41 + 1;
          uint64_t i = (void *)(a3 + 40);
        }
        *(void *)(a1 + 768) = v43;
        unint64_t v80 = *(void *)(a1 + 744);
        if (v80 >= *(void *)(a1 + 752))
        {
          uint64_t v81 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v125, (long long *)v36);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v125, (long long *)v36);
          uint64_t v81 = v80 + 24;
        }
        *(void *)(a1 + 744) = v81;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v133, v36, (uint64_t)v36);
        continue;
      }
      uint64_t v46 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a3 + 40), *(void *)(a3 + 48), (unsigned __int8 **)begin);
      if (v46 == *(void *)(a3 + 48))
      {
        *(void *)&long long v135 = begin;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      char v47 = turi::sframe::column_type((turi::sframe *)a3, 0xAAAAAAAAAAAAAAABLL * ((v46 - *(void *)(a3 + 40)) >> 3));
      char v48 = v47;
      unint64_t v49 = *(unsigned char **)(a1 + 768);
      unint64_t v50 = *(void *)(a1 + 776);
      if ((unint64_t)v49 >= v50)
      {
        unint64_t v70 = (unint64_t)*v123;
        uint64_t v71 = v49 - (unsigned char *)*v123;
        unint64_t v72 = v71 + 1;
        if (v71 + 1 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v73 = v50 - v70;
        if (2 * v73 > v72) {
          unint64_t v72 = 2 * v73;
        }
        if (v73 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v74 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v74 = v72;
        }
        if (v74) {
          unint64_t v75 = (char *)operator new(v74);
        }
        else {
          unint64_t v75 = 0;
        }
        uint64_t v86 = &v75[v71];
        v87 = &v75[v71];
        char *v87 = v48;
        uint64_t v51 = v87 + 1;
        if (v49 == (unsigned char *)v70)
        {
          uint64_t i = (void *)(a3 + 40);
        }
        else
        {
          std::string v88 = &v49[~v70];
          uint64_t i = (void *)(a3 + 40);
          do
          {
            char v89 = *--v49;
            (v88--)[(void)v75] = v89;
          }
          while (v49 != (unsigned char *)v70);
          uint64_t v86 = v75;
        }
        *(void *)(a1 + 760) = v86;
        *(void *)(a1 + 768) = v51;
        *(void *)(a1 + 776) = &v75[v74];
        if (v70) {
          operator delete((void *)v70);
        }
      }
      else
      {
        unsigned char *v49 = v47;
        uint64_t v51 = v49 + 1;
        uint64_t i = (void *)(a3 + 40);
      }
      *(void *)(a1 + 768) = v51;
      std::string::append(begin, ".1", 2uLL);
      unint64_t v90 = *(void *)(a1 + 744);
      if (v90 >= *(void *)(a1 + 752))
      {
        uint64_t v91 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v125, (long long *)begin);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v125, (long long *)begin);
        uint64_t v91 = v90 + 24;
      }
      *(void *)(a1 + 744) = v91;
    }
    else
    {
      unint64_t v44 = *(void *)(a1 + 744);
      if (v44 >= *(void *)(a1 + 752))
      {
        uint64_t v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v125, (long long *)begin);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v125, (long long *)begin);
        uint64_t v45 = v44 + 24;
      }
      *(void *)(a1 + 744) = v45;
      uint64_t v58 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a3 + 40), *(void *)(a3 + 48), (unsigned __int8 **)begin);
      if (v58 == *(void *)(a3 + 48))
      {
        *(void *)&long long v135 = begin;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      char v59 = turi::sframe::column_type((turi::sframe *)a3, 0xAAAAAAAAAAAAAAABLL * ((v58 - *(void *)(a3 + 40)) >> 3));
      char v60 = v59;
      unint64_t v61 = *(unsigned char **)(a1 + 768);
      unint64_t v62 = *(void *)(a1 + 776);
      if ((unint64_t)v61 >= v62)
      {
        unint64_t v64 = (unint64_t)*v123;
        uint64_t v65 = v61 - (unsigned char *)*v123;
        unint64_t v66 = v65 + 1;
        if (v65 + 1 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v67 = v62 - v64;
        if (2 * v67 > v66) {
          unint64_t v66 = 2 * v67;
        }
        if (v67 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v68 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v68 = v66;
        }
        if (v68) {
          unint64_t v69 = (char *)operator new(v68);
        }
        else {
          unint64_t v69 = 0;
        }
        atomic_ullong *volatile v82 = &v69[v65];
        uint64_t v83 = &v69[v65];
        *uint64_t v83 = v60;
        uint64_t v63 = v83 + 1;
        if (v61 == (unsigned char *)v64)
        {
          uint64_t i = (void *)(a3 + 40);
        }
        else
        {
          uint64_t v84 = &v61[~v64];
          uint64_t i = (void *)(a3 + 40);
          do
          {
            char v85 = *--v61;
            (v84--)[(void)v69] = v85;
          }
          while (v61 != (unsigned char *)v64);
          atomic_ullong *volatile v82 = v69;
        }
        *(void *)(a1 + 760) = v82;
        *(void *)(a1 + 768) = v63;
        *(void *)(a1 + 776) = &v69[v68];
        if (v64) {
          operator delete((void *)v64);
        }
      }
      else
      {
        *unint64_t v61 = v59;
        uint64_t v63 = v61 + 1;
        uint64_t i = (void *)(a3 + 40);
      }
      *(void *)(a1 + 768) = v63;
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v133, (const void **)&begin->__r_.__value_.__l.__data_, (uint64_t)begin);
  }
  uint64_t v92 = *(void *)(a3 + 32);
  if (!*(unsigned char *)(a3 + 288)) {
    uint64_t v92 = 0;
  }
  unint64_t v93 = v92 * *(void *)(a3 + 24);
  uint64_t v94 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(a2 + 288)) {
    uint64_t v94 = 0;
  }
  if (v93 < v94 * *(void *)(a2 + 24))
  {
    *(unsigned char *)(a1 + 784) = 1;
    turi::sframe::sframe((turi::sframe *)&v135, a1);
    turi::sframe::operator=(a1, (uint64_t)v120);
    turi::sframe::operator=((uint64_t)v120, (uint64_t)&v135);
    turi::sframe::~sframe((turi::sframe *)&v135);
    long long v95 = *(_OWORD *)(a1 + 592);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)v122;
    *(_OWORD *)__n128 v122 = v95;
    uint64_t v96 = *(void *)(a1 + 608);
    *(void *)(a1 + 608) = *(void *)(a1 + 632);
    *(void *)(a1 + 632) = v96;
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::swap((uint64_t)v127, v121);
    int v97 = *(unsigned __int8 *)(a1 + 648);
    int v98 = *(unsigned __int8 *)(a1 + 649);
    if (v97 != v98)
    {
      *(unsigned char *)(a1 + 648) = v97 ^ 1;
      *(unsigned char *)(a1 + 649) = v98 ^ 1;
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v129, v130[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v131, v132);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v133, (char *)v133[1]);
  *(void *)&long long v135 = &v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  return a1;
}

void sub_2240C4A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, turi::sframe *a11, uint64_t a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,char *a22,uint64_t a23,char a24,char *a25,uint64_t a26,uint64_t *a27,char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a21, a22);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a24, a25);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a27, a28);
  a27 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a15, *(void **)(v34 + 848));
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(a10);
  unsigned int v36 = *a14;
  if (*a14)
  {
    *(void *)(v34 + 768) = v36;
    operator delete(v36);
  }
  a30 = a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(a12);
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(a19);
  char v37 = *a13;
  if (*a13)
  {
    *(void *)(v34 + 624) = v37;
    operator delete(v37);
  }
  uint64_t v38 = *a9;
  if (*a9)
  {
    *(void *)(v34 + 600) = v38;
    operator delete(v38);
  }
  turi::sframe::~sframe(a11);
  turi::sframe::~sframe((turi::sframe *)v34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_left_join_positions.size()", 27);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_right_join_positions.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 164, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C4E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ret.second", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 170, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C5028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ret.second", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 174, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::join_impl::hash_join_executor::hash_join_executor(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,join_type_t,std::map<std::string,std::string> const&,unsigned long)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C5228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::init_result_frame(turi::join_impl::hash_join_executor *this, turi::sframe *a2)
{
  if (*((unsigned char *)this + 784))
  {
    std::vector<std::string>::vector(&v37, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 93) - *((void *)this + 92)) >> 3));
    std::vector<turi::flex_type_enum>::vector(&v36, *((void *)this + 96) - *((void *)this + 95));
    unint64_t v34 = 0;
    unint64_t v4 = *((void *)this + 40);
    if (v4)
    {
      do
      {
        uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((void *)this + 82, &v34);
        if (v5)
        {
          uint64_t v6 = v5 + 2;
          char v7 = v5 + 3;
          std::string::operator=(&v37.__begin_[v5[3]], (const std::string *)(*((void *)this + 92) + 24 * v5[2]));
          *((unsigned char *)v36 + *v7) = *(unsigned char *)(*((void *)this + 95) + *v6);
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>((uint64_t)this + 792, v6 + 1, v6 + 1, v6);
        }
        ++v34;
        unint64_t v4 = *((void *)this + 40);
      }
      while (v34 < v4);
    }
    unint64_t v35 = 0;
    unint64_t v34 = v4;
    uint64_t v8 = *((void *)this + 92);
    if (v4 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 93) - v8) >> 3)) {
      goto LABEL_15;
    }
    while (1)
    {
      uint64_t v9 = &v37.__begin_[v35];
      unint64_t v10 = v35 + 1;
      while ((SHIBYTE(v9->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!*((unsigned char *)&v9->__r_.__value_.__s + 23)) {
          goto LABEL_13;
        }
LABEL_12:
        unint64_t v35 = v10;
        ++v9;
        ++v10;
      }
      if (v9->__r_.__value_.__l.__size_) {
        goto LABEL_12;
      }
LABEL_13:
      std::string::operator=(v9, (const std::string *)(v8 + 24 * v4));
      *((unsigned char *)v36 + v35) = *(unsigned char *)(*((void *)this + 95) + v34);
      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>((uint64_t)this + 792, &v35, &v35, (uint64_t *)&v34);
      unint64_t v4 = v34 + 1;
      unint64_t v34 = v4;
      uint64_t v8 = *((void *)this + 92);
      if (v4 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 93) - v8) >> 3))
      {
        unint64_t v4 = *((void *)this + 40);
LABEL_15:
        unint64_t v34 = 0;
        if (!v4) {
          goto LABEL_25;
        }
LABEL_16:
        if (std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((void *)this + 82, &v34))
        {
          goto LABEL_24;
        }
        unint64_t v11 = &v37.__begin_[v35];
        for (unint64_t i = v35 + 1; ; ++i)
        {
          if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v11->__r_.__value_.__l.__size_)
            {
LABEL_23:
              std::string::operator=(v11, (const std::string *)(*((void *)this + 92) + 24 * v34));
              *((unsigned char *)v36 + v35) = *(unsigned char *)(*((void *)this + 95) + v34);
              std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>((uint64_t)this + 792, &v35, &v35, (uint64_t *)&v34);
LABEL_24:
              if (++v34 >= *((void *)this + 40))
              {
LABEL_25:
                std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v34, (const void **)&v37.__begin_->__r_.__value_.__l.__data_, (const void **)&v37.__end_->__r_.__value_.__l.__data_);
                assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
                if (*((unsigned char *)this + 289))
                {
                  uint64_t v13 = (uint64_t (**)(void))(**((void **)this + 26) + 120);
                  goto LABEL_31;
                }
                if (*((void *)this + 3))
                {
                  uint64_t v13 = (uint64_t (**)(void))(***((void ***)this + 23) + 24);
LABEL_31:
                  unint64_t v15 = (*v13)();
                }
                else
                {
                  unint64_t v15 = 0;
                }
                uint64_t v16 = (turi::thread *)assert_msg(*((unsigned __int8 *)this + 584), "Invalid SFrame");
                if (*((unsigned char *)this + 585))
                {
                  uint64_t v17 = (uint64_t (**)(void))(**((void **)this + 63) + 120);
                  goto LABEL_36;
                }
                if (*((void *)this + 40))
                {
                  uint64_t v17 = (uint64_t (**)(void))(***((void ***)this + 60) + 24);
LABEL_36:
                  uint64_t v16 = (turi::thread *)(*v17)();
                  unint64_t v18 = (unint64_t)v16;
                }
                else
                {
                  unint64_t v18 = 0;
                }
                unint64_t v19 = (turi::thread *)turi::thread::cpu_count(v16);
                unint64_t v20 = turi::thread::cpu_count(v19);
                std::string::basic_string[abi:ne180100]<0>(&__p, "");
                if (v15 > v18) {
                  unint64_t v18 = v15;
                }
                unint64_t v21 = (unint64_t)log2((double)v20);
                if (v21 <= 1) {
                  unint64_t v21 = 1;
                }
                unint64_t v22 = v21 * (void)v19;
                if (v18 <= v22) {
                  uint64_t v23 = v22;
                }
                else {
                  uint64_t v23 = v18;
                }
                turi::sframe::open_for_write((uint64_t)a2, &v37, &v36, &__p, v23, 0);
              }
              goto LABEL_16;
            }
          }
          else if (!*((unsigned char *)&v11->__r_.__value_.__s + 23))
          {
            goto LABEL_23;
          }
          unint64_t v35 = i;
          ++v11;
        }
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  if (*((unsigned char *)this + 289))
  {
    uint64_t v14 = (*(uint64_t (**)(void))(**((void **)this + 26) + 120))(*((void *)this + 26));
  }
  else
  {
    if (!*((void *)this + 3))
    {
      unint64_t v24 = 0;
LABEL_48:
      char v25 = (turi::thread *)assert_msg(*((unsigned __int8 *)this + 584), "Invalid SFrame");
      if (*((unsigned char *)this + 585))
      {
        char v25 = (turi::thread *)(*(uint64_t (**)(void))(**((void **)this + 63) + 120))(*((void *)this + 63));
      }
      else
      {
        if (!*((void *)this + 40))
        {
          uint64_t v26 = 0;
LABEL_53:
          uint64_t v27 = (turi::thread *)turi::thread::cpu_count(v25);
          unint64_t v28 = turi::thread::cpu_count(v27);
          unint64_t v29 = (unint64_t)log2((double)v28);
          if (v29 <= 1) {
            unint64_t v29 = 1;
          }
          unint64_t v30 = v29 * (void)v27;
          if (v24 <= (unint64_t)v26) {
            unint64_t v31 = (unint64_t)v26;
          }
          else {
            unint64_t v31 = v24;
          }
          if (v31 >= v30) {
            uint64_t v32 = v31;
          }
          else {
            uint64_t v32 = v30;
          }
          std::string::basic_string[abi:ne180100]<0>(&v37, "");
          turi::sframe::open_for_write((uint64_t)a2, (void *)this + 92, (void *)this + 95, (const std::string *)&v37, v32, 0);
        }
        char v25 = (turi::thread *)(*(uint64_t (**)(void))(***((void ***)this + 60) + 24))(**((void **)this + 60));
      }
      uint64_t v26 = v25;
      goto LABEL_53;
    }
    uint64_t v14 = (*(uint64_t (**)(void))(***((void ***)this + 23) + 24))(**((void **)this + 23));
  }
  unint64_t v24 = v14;
  goto LABEL_48;
}

void sub_2240C5934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::join_impl::hash_join_executor::unpack_row(uint64_t *a1@<X1>, unint64_t a2@<X2>, unint64_t **a3@<X8>)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = a1;
    a1 = (uint64_t *)*a1;
    uint64_t v4 = v5[1];
  }
  else
  {
    uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  v7[0] = 0;
  v7[1] = 0;
  void v7[2] = a1;
  v7[3] = 0;
  v7[4] = v4;
  std::vector<turi::flexible_type>::vector(a3, a2);
  for (unint64_t i = *a3; i != a3[1]; i += 2)
    turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec((turi::iarchive *)v7, i);
}

void sub_2240C5A38(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(turi::join_impl::hash_join_executor *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  turi::sframe::sframe((turi::sframe *)v15);
  v14[0] = 0;
  v14[1] = 0;
  v13[0] = 0;
  v13[1] = 0;
  gettimeofday(&v12, 0);
  gettimeofday(&v11, 0);
  turi::join_impl::hash_join_executor::grace_partition_frames(this, &v16);
  v10.__begin_ = (std::vector<std::string>::pointer)v14;
  v10.__end_ = (std::vector<std::string>::pointer)v13;
  std::tuple<std::shared_ptr<turi::sframe> &,std::shared_ptr<turi::sframe> &>::operator=[abi:ne180100]<std::shared_ptr<turi::sframe>,std::shared_ptr<turi::sframe>,0>((uint64_t *)&v10, (long long *)&v16.tv_sec);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*(void *)&v16.tv_usec) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v16.tv_usec);
  }
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "grace_hash_join", 368, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Partitioned frames in: ", 23);
    }
    gettimeofday(&v16, 0);
    uint64_t v6 = file_logger::operator<<<double>((uint64_t)started);
    char v7 = pthread_getspecific(*(void *)(v6 + 592));
    if (v7 && *((unsigned char *)v7 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
      uint64_t v8 = std::locale::use_facet((const std::locale *)&v16, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale((std::locale *)&v16);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v6);
      if (*(_DWORD *)(v6 + 600) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::join_impl::hash_join_executor::init_result_frame(this, (turi::sframe *)v15);
}

void sub_2240C73DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale((std::locale *)&STACK[0x398]);
  uint64_t v72 = a53;
  a53 = 0;
  if (v72) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  }
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }
  a30 = (uint64_t)&a57;
  std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  if (a68) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a68);
  }
  if (a70) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a70);
  }
  turi::sframe::~sframe((turi::sframe *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_partition_frames(turi::join_impl::hash_join_executor *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 4);
  if (!*((unsigned char *)this + 288)) {
    uint64_t v4 = 0;
  }
  unint64_t v5 = *((void *)this + 80);
  unint64_t v6 = v4 * *((void *)this + 3) / v5;
  uint64_t v7 = *((void *)this + 41);
  if (!*((unsigned char *)this + 584)) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v7 * *((void *)this + 40) / v5 + 1;
  if (v8 >= v6 + 1) {
    uint64_t v9 = v6 + 1;
  }
  else {
    uint64_t v9 = v8;
  }
  std::vector<std::string> v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    timeval v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "grace_partition_frames", 627, 1);
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Chose ", 6);
    }
    uint64_t v14 = (pthread_key_t *)file_logger::operator<<<unsigned long>((uint64_t)started);
    unint64_t v15 = pthread_getspecific(v14[74]);
    if (v15 && *((unsigned char *)v15 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)" partitions for GRACE hash join\n", 32);
      file_logger::stream_flush((file_logger *)v14);
    }
  }
  turi::join_impl::hash_join_executor::grace_partition_frame(this, v9, &v20);
  turi::join_impl::hash_join_executor::grace_partition_frame((turi::join_impl::hash_join_executor *)((char *)this + 296), v9, &v18);
  timeval v16 = v21;
  *a2 = v20;
  a2[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v19;
  a2[2] = v18;
  a2[3] = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_2240C78AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::tuple<std::shared_ptr<turi::sframe> &,std::shared_ptr<turi::sframe> &>::operator=[abi:ne180100]<std::shared_ptr<turi::sframe>,std::shared_ptr<turi::sframe>,0>(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
  *(_OWORD *)uint64_t v4 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = a1[1];
  long long v8 = a2[1];
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

void turi::join_impl::hash_join_executor::grace_hash_join(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"grace_left->size()", 18);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_left_frame.size()", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::vector<std::string> v10 = (void *)std::ostream::operator<<();
  timeval v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    timeval v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 370, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::join_impl::hash_join_executor::grace_hash_join(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C7AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(void)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"grace_right->size()", 19);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_right_frame.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::vector<std::string> v10 = (void *)std::ostream::operator<<();
  timeval v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    timeval v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 371, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::join_impl::hash_join_executor::grace_hash_join(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C7D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(void)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_segments", 12);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"grace_right->num_segments()", 27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::vector<std::string> v10 = (void *)std::ostream::operator<<();
  timeval v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    timeval v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 378, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::join_impl::hash_join_executor::grace_hash_join(void)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C7FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_hash_join(void)::$_3::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"logical_right_segment_sizes.size()", 34);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments*result_frame.num_segments()", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::vector<std::string> v10 = (void *)std::ostream::operator<<();
  timeval v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    timeval v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 425, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::join_impl::hash_join_executor::grace_hash_join(void)::$_3::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C8270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::merge_rows_for_output(void *a1, uint64_t a2, uint64_t a3, uint64_t ***a4, void *a5)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  long long v8 = a4[1];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a4);
  uint64_t v11 = *a5;
  uint64_t v10 = a5[1];
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a5) >> 3);
  unint64_t v13 = v12 * v9;
  if (!(v12 * v9))
  {
    if (v8 == *a4 && v10 == v11) {
      return;
    }
    if (v9 <= v12) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3);
    }
    else {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v8 - *a4);
    }
  }
  unint64_t v15 = *(void *)(a2 + 24);
  *(void *)&v92[5] = 0x700000000000000;
  *(void *)uint64_t v92 = 0;
  std::vector<turi::flexible_type>::vector(&v87, v15, (uint64_t *)v92);
  uint64_t v82 = a3;
  std::vector<std::vector<turi::flexible_type>>::vector(&v89, v13, &v87);
  unint64_t v91 = (unint64_t)&v87;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  switch(v92[12])
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        timeval v16 = *(void **)v92;
        if (*(void *)v92)
        {
          if (*(char *)(*(void *)v92 + 31) < 0) {
            operator delete(*(void **)(*(void *)v92 + 8));
          }
          uint64_t v17 = v16;
          uint64_t v18 = 0x1012C404EF22A49;
          goto LABEL_40;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v25 = *(void **)v92;
        if (*(void *)v92)
        {
          uint64_t v26 = *(void **)(*(void *)v92 + 8);
          if (v26)
          {
            *(void *)(*(void *)v92 + 16) = v26;
            operator delete(v26);
          }
          uint64_t v17 = v25;
          uint64_t v18 = 0x1080C409938AC02;
          goto LABEL_40;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v19 = *(void **)v92;
        if (*(void *)v92)
        {
          unint64_t v91 = *(void *)v92 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v19 = *(void **)v92;
        if (*(void *)v92)
        {
          unint64_t v91 = *(void *)v92 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
LABEL_35:
          uint64_t v17 = v19;
          uint64_t v18 = 0x1020C405E66F15BLL;
          goto LABEL_40;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v27 = *(void **)v92;
        if (*(void *)v92)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v92 + 16));
          uint64_t v17 = v27;
          unsigned int v24 = -235920773;
          goto LABEL_39;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = *(void **)v92;
        if (*(void *)v92)
        {
          unint64_t v21 = *(void **)(*(void *)v92 + 48);
          if (v21)
          {
            *(void *)(*(void *)v92 + 56) = v21;
            operator delete(v21);
          }
          unint64_t v22 = (void *)v20[3];
          if (v22)
          {
            v20[4] = v22;
            operator delete(v22);
          }
          uint64_t v23 = (std::__shared_weak_count *)v20[2];
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          uint64_t v17 = v20;
          unsigned int v24 = 2071181815;
LABEL_39:
          uint64_t v18 = v24 | 0x1030C4000000000;
LABEL_40:
          MEMORY[0x22A614FA0](v17, v18);
        }
      }
      break;
    default:
      break;
  }
  unint64_t v29 = *a4;
  unint64_t v28 = a4[1];
  if (v28 != *a4)
  {
    unint64_t v30 = 0;
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v28 - *a4);
    if (v13 / v31 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v13 / v31;
    }
    do
    {
      uint64_t v33 = v32;
      if (v31 <= v13)
      {
        do
        {
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type*>((uint64_t)v92, *v29, v29[1], *(void *)(v89 + 24 * v30));
          --v33;
        }
        while (v33);
        unint64_t v28 = a4[1];
      }
      v29 += 3;
      ++v30;
    }
    while (v29 != v28);
    unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v90 - v89) >> 3);
    *(void *)uint64_t v92 = v30;
    if (v30 != v91)
    {
      v87 = (uint64_t *)v92;
      std::string v88 = (void ***)&v91;
      turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_0::operator()();
    }
  }
  unint64_t v34 = (void *)a5[1];
  uint64_t v35 = (uint64_t)v34 - *a5;
  if (v34 == (void *)*a5)
  {
    uint64_t v41 = v89;
    uint64_t v40 = v90;
  }
  else
  {
    unint64_t v36 = (uint64_t)(*(void *)(*a5 + 8) - *(void *)*a5) >> 4;
    unint64_t v37 = (uint64_t)(a1[78] - a1[77]) >> 3;
    unint64_t v91 = v37;
    *(void *)uint64_t v92 = v36;
    if (v37 > v36)
    {
      v87 = (uint64_t *)v92;
      std::string v88 = (void ***)&v91;
      turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_1::operator()();
    }
    unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v35 >> 3);
    if (v38 <= v13)
    {
      uint64_t v42 = 0;
      unint64_t v39 = 0;
      unint64_t v43 = v13 / v38;
      unint64_t v85 = v37 - v36;
      unint64_t v44 = a1 + 82;
      if (v43 <= 1) {
        unint64_t v43 = 1;
      }
      unint64_t v83 = v43;
      do
      {
        uint64_t v84 = v42;
        for (unint64_t i = (void *)*a5; i != v34; i += 3)
        {
          uint64_t v46 = *(void *)(v89 + 24 * v39 + 8);
          *(void *)uint64_t v92 = 0;
          if (i[1] != *i)
          {
            uint64_t v47 = v46 + 16 * v85;
            do
            {
              char v48 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v44, (unint64_t *)v92);
              if (v48)
              {
                if (a4[1] == *a4)
                {
                  uint64_t v49 = *i + 16 * *(void *)v92;
                  uint64_t v50 = *(void *)(v89 + 24 * v39) + 16 * v48[3];
                  if (v49 != v50)
                  {
                    switch(*(unsigned char *)(v50 + 12))
                    {
                      case 2:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v51 = *(atomic_ullong *volatile *)v50;
                          if (!*(void *)v50) {
                            goto LABEL_137;
                          }
                          if (*((char *)v51 + 31) < 0) {
                            operator delete((void *)v51[1]);
                          }
                          atomic_ullong *volatile v52 = v51;
                          uint64_t v53 = 0x1012C404EF22A49;
                          goto LABEL_136;
                        }
                        break;
                      case 3:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v77 = *(atomic_ullong *volatile *)v50;
                          if (!*(void *)v50) {
                            goto LABEL_137;
                          }
                          double v78 = (void *)v77[1];
                          if (v78)
                          {
                            v77[2] = (atomic_ullong)v78;
                            operator delete(v78);
                          }
                          atomic_ullong *volatile v52 = v77;
                          uint64_t v53 = 0x1080C409938AC02;
                          goto LABEL_136;
                        }
                        break;
                      case 4:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v71 = *(atomic_ullong *volatile *)v50;
                          if (!*(void *)v50) {
                            goto LABEL_137;
                          }
                          v87 = v71 + 1;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
                          goto LABEL_131;
                        }
                        break;
                      case 5:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v71 = *(atomic_ullong *volatile *)v50;
                          if (!*(void *)v50) {
                            goto LABEL_137;
                          }
                          v87 = v71 + 1;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
LABEL_131:
                          atomic_ullong *volatile v52 = v71;
                          uint64_t v53 = 0x1020C405E66F15BLL;
                          goto LABEL_136;
                        }
                        break;
                      case 8:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v79 = *(atomic_ullong *volatile *)v50;
                          if (!*(void *)v50) {
                            goto LABEL_137;
                          }
                          boost::detail::shared_count::~shared_count((atomic_uint **)v79 + 2);
                          atomic_ullong *volatile v52 = v79;
                          unsigned int v76 = -235920773;
                          goto LABEL_135;
                        }
                        break;
                      case 9:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)v50;
                          if (*(void *)v50)
                          {
                            unint64_t v73 = (void *)v72[6];
                            if (v73)
                            {
                              v72[7] = (atomic_ullong)v73;
                              operator delete(v73);
                            }
                            size_t v74 = (void *)v72[3];
                            if (v74)
                            {
                              v72[4] = (atomic_ullong)v74;
                              operator delete(v74);
                            }
                            unint64_t v75 = (std::__shared_weak_count *)v72[2];
                            if (v75) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v75);
                            }
                            atomic_ullong *volatile v52 = v72;
                            unsigned int v76 = 2071181815;
LABEL_135:
                            uint64_t v53 = v76 | 0x1030C4000000000;
LABEL_136:
                            MEMORY[0x22A614FA0](v52, v53);
                          }
LABEL_137:
                          *(void *)uint64_t v50 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    uint64_t v80 = *(void *)v49;
                    *(void *)(v50 + 5) = *(void *)(v49 + 5);
                    *(void *)uint64_t v50 = v80;
                    LODWORD(v80) = *(unsigned __int8 *)(v49 + 12);
                    *(unsigned char *)(v50 + 12) = v80;
                    switch((int)v80)
                    {
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 8:
                      case 9:
                        atomic_fetch_add(*(atomic_ullong *volatile *)v50, 1uLL);
                        break;
                      default:
                        break;
                    }
                  }
                }
              }
              else
              {
                uint64_t v54 = *i + 16 * *(void *)v92;
                if (v54 != v47)
                {
                  switch(*(unsigned char *)(v47 + 12))
                  {
                    case 2:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v55 = *(atomic_ullong *volatile *)v47;
                        if (!*(void *)v47) {
                          goto LABEL_104;
                        }
                        if (*((char *)v55 + 31) < 0) {
                          operator delete((void *)v55[1]);
                        }
                        atomic_ullong *volatile v56 = v55;
                        uint64_t v57 = 0x1012C404EF22A49;
                        goto LABEL_103;
                      }
                      break;
                    case 3:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v64 = *(atomic_ullong *volatile *)v47;
                        if (!*(void *)v47) {
                          goto LABEL_104;
                        }
                        uint64_t v65 = (void *)v64[1];
                        if (v65)
                        {
                          v64[2] = (atomic_ullong)v65;
                          operator delete(v65);
                        }
                        atomic_ullong *volatile v56 = v64;
                        uint64_t v57 = 0x1080C409938AC02;
                        goto LABEL_103;
                      }
                      break;
                    case 4:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)v47;
                        if (!*(void *)v47) {
                          goto LABEL_104;
                        }
                        v87 = v58 + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
                        goto LABEL_98;
                      }
                      break;
                    case 5:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)v47;
                        if (!*(void *)v47) {
                          goto LABEL_104;
                        }
                        v87 = v58 + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
LABEL_98:
                        atomic_ullong *volatile v56 = v58;
                        uint64_t v57 = 0x1020C405E66F15BLL;
                        goto LABEL_103;
                      }
                      break;
                    case 8:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v66 = *(atomic_ullong *volatile *)v47;
                        if (!*(void *)v47) {
                          goto LABEL_104;
                        }
                        boost::detail::shared_count::~shared_count((atomic_uint **)v66 + 2);
                        atomic_ullong *volatile v56 = v66;
                        unsigned int v63 = -235920773;
                        goto LABEL_102;
                      }
                      break;
                    case 9:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v47, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v59 = *(atomic_ullong *volatile *)v47;
                        if (*(void *)v47)
                        {
                          char v60 = (void *)v59[6];
                          if (v60)
                          {
                            v59[7] = (atomic_ullong)v60;
                            operator delete(v60);
                          }
                          unint64_t v61 = (void *)v59[3];
                          if (v61)
                          {
                            v59[4] = (atomic_ullong)v61;
                            operator delete(v61);
                          }
                          unint64_t v62 = (std::__shared_weak_count *)v59[2];
                          if (v62) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v62);
                          }
                          atomic_ullong *volatile v56 = v59;
                          unsigned int v63 = 2071181815;
LABEL_102:
                          uint64_t v57 = v63 | 0x1030C4000000000;
LABEL_103:
                          MEMORY[0x22A614FA0](v56, v57);
                        }
LABEL_104:
                        *(void *)uint64_t v47 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  uint64_t v67 = *(void *)v54;
                  *(void *)(v47 + 5) = *(void *)(v54 + 5);
                  *(void *)uint64_t v47 = v67;
                  LODWORD(v67) = *(unsigned __int8 *)(v54 + 12);
                  *(unsigned char *)(v47 + 12) = v67;
                  BOOL v68 = v67 > 9;
                  int v69 = (1 << v67) & 0x33C;
                  if (!v68 && v69 != 0) {
                    atomic_fetch_add(*(atomic_ullong *volatile *)v47, 1uLL);
                  }
                }
                v47 += 16;
              }
              ++*(void *)v92;
            }
            while (*(void *)v92 < (unint64_t)((uint64_t)(i[1] - *i) >> 4));
            unint64_t v34 = (void *)a5[1];
          }
          ++v39;
        }
        uint64_t v42 = v84 + 1;
      }
      while (v84 + 1 != v83);
    }
    else
    {
      unint64_t v39 = 0;
    }
    uint64_t v41 = v89;
    uint64_t v40 = v90;
    unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v90 - v89) >> 3);
    *(void *)uint64_t v92 = v39;
    if (v39 != v91)
    {
      v87 = (uint64_t *)v92;
      std::string v88 = (void ***)&v91;
      turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_2::operator()();
    }
  }
  while (v41 != v40)
  {
    uint64_t v81 = *(void *)(v82 + 24);
    if (!v81) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 48))(v81, v41);
    v41 += 24;
    uint64_t v40 = v90;
  }
  v87 = &v89;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
}

void sub_2240C8CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,void *a22,int a23,char a24)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a21);
  switch(a24)
  {
    case 2:
      if (atomic_fetch_add(a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      char v25 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      if (*((char *)a22 + 31) < 0) {
        operator delete((void *)a22[1]);
      }
      uint64_t v26 = v25;
      uint64_t v27 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v28 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      unint64_t v29 = (void *)a22[1];
      if (v29)
      {
        a22[2] = v29;
        operator delete(v29);
      }
      uint64_t v26 = v28;
      uint64_t v27 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v30 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      a21 = (void **)(a22 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a21);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v30 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      a21 = (void **)(a22 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a21);
LABEL_18:
      uint64_t v26 = v30;
      uint64_t v27 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(a22, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v31 = a22;
      if (!a22) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)a22 + 2);
      uint64_t v26 = v31;
      unsigned int v32 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(a22, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a22) {
        goto LABEL_27;
      }
      uint64_t v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a22);
      unsigned int v32 = 2071181815;
LABEL_25:
      uint64_t v27 = v32 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v26, v27);
LABEL_27:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

turi::sframe *turi::sframe::sframe(turi::sframe *a1, uint64_t a2)
{
  uint64_t v4 = turi::sframe::sframe(a1);
  turi::sframe::operator=((uint64_t)v4, a2);
  return a1;
}

void sub_2240C8F9C(_Unwind_Exception *a1)
{
  turi::sframe::~sframe(v1);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"i", 1);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"rows_to_emit.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 563, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C9140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"right_rows[0].size()", 20);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_right_join_positions.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 568, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C93D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row_cntr", 8);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"rows_to_emit.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "operator()", 600, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::join_impl::hash_join_executor::merge_rows_for_output(turi::sframe &,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::vector<std::vector<turi::flexible_type>> const&,std::vector<std::vector<turi::flexible_type>> const)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240C9668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *turi::join_impl::hash_join_executor::grace_partition_frame@<X0>(const turi::sframe *a1@<X1>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  v23[22] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  unint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/join_impl.cpp", "grace_partition_frame", 643, 1);
    unint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v21);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (a2 != 1)
  {
    if (a2)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4turi6sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a3);
      uint64_t v12 = *a3;
      std::string::basic_string[abi:ne180100]<0>(v19, "data");
      v21.__locale_ = 0;
      locale = 0;
      v23[0] = 0;
      v21.__locale_ = (std::locale::__imp *)operator new(0x18uLL);
      locale = v21.__locale_;
      v23[0] = (char *)v21.__locale_ + 24;
      locale = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v23, (long long *)v19, &v20, (std::string *)v21.__locale_);
      unint64_t v13 = operator new(1uLL);
      v18[0] = v13;
      *unint64_t v13 = 2;
      v18[1] = v13 + 1;
      v18[2] = v13 + 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      turi::sframe::open_for_write(v12, &v21, v18, &__p, v17, 1);
    }
    turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_0::operator()();
  }
  return std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe const&,void>(a1, a3);
}

void sub_2240C9CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char *p_p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,std::locale a33,uint64_t a34)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a33);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  p_p = &a11;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  p_p = (char *)&__p;
  std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  unint64_t v36 = *(std::__shared_weak_count **)(v34 + 8);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(a1);
}

void std::__list_imp<turi::join_impl::hash_join_row_t>::clear(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        long long v5 = (char *)*((void *)v3 + 1);
        unint64_t v6 = (void **)(v3 + 16);
        std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t turi::join_impl::join_hash_table::join_hash_table(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 40), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  return a1;
}

void sub_2240C9EE4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      std::__list_imp<turi::join_impl::hash_join_row_t>::clear(v2 + 24);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::vector<turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*>(uint64_t a1, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<turi::flexible_type>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  char v15 = v14;
  timeval v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      unint64_t v19 = v16;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_2240CA0EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2240CA0F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::flexible_type>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        long long v5 = v3;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2240CA210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4) {
        std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a4, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
      }
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *std::list<turi::join_impl::hash_join_row_t>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    long long v5 = std::__list_imp<turi::join_impl::hash_join_row_t>::__create_node[abi:ne180100]<turi::join_impl::hash_join_row_t const&>((uint64_t)a1, 0, 0, i + 16);
    uint64_t v6 = *a1;
    void *v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_2240CA314(_Unwind_Exception *a1)
{
  std::__list_imp<turi::join_impl::hash_join_row_t>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<turi::join_impl::hash_join_row_t>::__create_node[abi:ne180100]<turi::join_impl::hash_join_row_t const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x30uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  v7[3] = 0;
  v7[4] = 0;
  void v7[2] = 0;
  std::vector<std::vector<turi::flexible_type>>::__init_with_size[abi:ne180100]<std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*>(v7 + 2, *(uint64_t ***)a4, *(uint64_t ***)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3));
  *((unsigned char *)v7 + 40) = *(unsigned char *)(a4 + 24);
  return v7;
}

void sub_2240CA398(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,std::list<turi::join_impl::hash_join_row_t>>>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    char v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  unint64_t v13 = operator new(0x30uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *unint64_t v13 = 0;
  v13[1] = v6;
  std::pair<unsigned long const,std::list<turi::join_impl::hash_join_row_t>>::pair[abi:ne180100]<unsigned long,std::list<turi::join_impl::hash_join_row_t>,0>(v13 + 2, a3);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *long long v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  unint64_t v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23, 0);
  return v10;
}

void sub_2240CA5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::pair<unsigned long const,std::list<turi::join_impl::hash_join_row_t>>::pair[abi:ne180100]<unsigned long,std::list<turi::join_impl::hash_join_row_t>,0>(void *a1, void *a2)
{
  unint64_t v3 = a1 + 1;
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v3;
  a1[3] = 0;
  std::list<turi::join_impl::hash_join_row_t>::splice((uint64_t)v3, v3, a2 + 1);
  return a1;
}

uint64_t std::list<turi::join_impl::hash_join_row_t>::splice(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *uint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::list<turi::join_impl::hash_join_row_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__list_imp<turi::join_impl::hash_join_row_t>::clear(v2 + 24);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long &>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2240CA900(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::string*>>>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2240CA980(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    void v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::swap(uint64_t a1, uint64_t a2)
{
  uint8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  unint64_t v5 = *(void **)a2;
  *(void *)a2 = 0;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a2;
  *(void *)a2 = v4;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v12;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v11;
  int v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(void *)(a1 + 24))
  {
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14) {
        v15 %= v14;
      }
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    unint64_t v16 = *(void *)(a2 + 8);
    unint64_t v17 = *(void *)(*(void *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16) {
        v17 %= v16;
      }
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(void *)(*(void *)a2 + 8 * v17) = a2 + 16;
  }
}

void *std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 96 * a2;
    uint64_t v6 = 96 * a2;
    uint64_t v7 = (void *)(v4 + 88);
    do
    {
      *(v7 - 8) = 0;
      *(v7 - 4) = 0;
      *uint64_t v7 = 0;
      v7 += 12;
      v6 -= 96;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2240CAD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4::operator()(uint64_t a1, uint64_t a2)
{
  v49[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 8);
  assert_msg(*(unsigned __int8 *)(v5 + 288), "Invalid SFrame");
  if (*(unsigned char *)(v5 + 289))
  {
    (*(void (**)(void))(**(void **)(v5 + 208) + 120))(*(void *)(v5 + 208));
  }
  else if (*(void *)(v5 + 24))
  {
    (*(void (**)(void))(***(void ***)(v5 + 184) + 24))(**(void **)(v5 + 184));
  }
  uint64_t v6 = **(void **)(a1 + 16);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v47, v6 + 96 * a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v48, v6 + 96 * a2 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v49, v6 + 96 * a2 + 64);
  (*(void (**)(void ***__return_ptr))(***(void ***)(a1 + 24) + 32))(&v26);
  size_t v20 = (void **)*MEMORY[0x263F8C2B8];
  uint64_t v18 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  unint64_t v19 = *(void ***)(MEMORY[0x263F8C2B8] + 64);
  while (1)
  {
    (*(void (**)(void ***__return_ptr))(***(void ***)(a1 + 24) + 40))(&v31);
    if (v26 == v31 && v27[3] == v35) {
      break;
    }
    *(void *)&long long v24 = v37;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    *(void *)&long long v24 = &v32;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
LABEL_11:
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    if (*(unsigned char *)(v4 + 832))
    {
      turi::sframe_iterator::operator*(&v26);
      if (v30[1] == v30[0]) {
        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
      }
      switch(*((unsigned char *)v30[0] + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v31);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_24;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v31);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_24:
          unint64_t v31 = v20;
          *(void ***)((char *)&v31 + (void)*(v20 - 3)) = v19;
          uint64_t v33 = v18;
          uint64_t v34 = MEMORY[0x263F8C318] + 16;
          if (v39 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](&v40);
          break;
        case 2:
          uint64_t v10 = *(void *)v30[0];
          if (*(char *)(*(void *)v30[0] + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
          }
          else
          {
            long long v11 = *(_OWORD *)(v10 + 8);
            v21.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
            *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v31, (void *)(*(void *)v30[0] + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v31, (uint64_t *)(*(void *)v30[0] + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v31, (void *)(*(void *)v30[0] + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v30[0], &v21);
          break;
        case 7:
          memset(&v21, 0, sizeof(v21));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v31, (void *)(*(void *)v30[0] + 8));
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
      turi::join_impl::hash_join_executor::unpack_row((uint64_t *)&v21, *(void *)(v4 + 320), (unint64_t **)&v22);
      std::vector<turi::flexible_type>::__vdeallocate((void **)&v24);
      long long v24 = v22;
      uint64_t v25 = v23;
      uint64_t v23 = 0;
      long long v22 = 0uLL;
      unint64_t v31 = (void **)&v22;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v9 = (uint64_t **)turi::sframe_iterator::operator*(&v26);
      if (&v24 != (long long *)v9) {
        std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)&v24, *v9, v9[1], ((char *)v9[1] - (char *)*v9) >> 4);
      }
    }
    matching_rows = turi::join_impl::join_hash_table::get_matching_rows(*(void **)(a1 + 40), &v24, (uint64_t **)(v4 + 616), 1);
    unint64_t v31 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = 0;
    std::vector<std::vector<turi::flexible_type>>::__init_with_size[abi:ne180100]<std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*>(&v31, (uint64_t **)*matching_rows, (uint64_t **)matching_rows[1], 0xAAAAAAAAAAAAAAABLL * ((matching_rows[1] - *matching_rows) >> 3));
    LOBYTE(v34) = *((unsigned char *)matching_rows + 24);
    if (v32 != v31 || *(unsigned char *)(v4 + 649))
    {
      uint64_t v13 = *(void *)(a1 + 8);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v44, (uint64_t)v47);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v45, (uint64_t)v48);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)v49);
      memset(v43, 0, sizeof(v43));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v43, (uint64_t *)v24, *((uint64_t **)&v24 + 1), (uint64_t)(*((void *)&v24 + 1) - v24) >> 4);
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      uint64_t v41 = (void **)&v22;
      char v42 = 0;
      *(void *)&long long v22 = operator new(0x18uLL);
      *((void *)&v22 + 1) = v22;
      uint64_t v23 = v22 + 24;
      *((void *)&v22 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type> const*,std::vector<turi::flexible_type>*>((uint64_t)&v23, v43, v44, (void *)v22);
      turi::join_impl::hash_join_executor::merge_rows_for_output((void *)v4, v13, (uint64_t)v44, (uint64_t ***)&v31, &v22);
      uint64_t v41 = (void **)&v22;
      std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
      uint64_t v41 = (void **)v43;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v46);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v45);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v44);
    }
    *(void *)&long long v22 = &v31;
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    unint64_t v31 = (void **)&v24;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
    uint64_t v14 = v27[0];
    uint64_t v15 = v27[1];
    while (v14 != v15)
    {
      turi::sarray_iterator<turi::flexible_type>::operator++(v14);
      v14 += 48;
    }
    if (v28 + 1 < v29) {
      unint64_t v16 = v28 + 1;
    }
    else {
      unint64_t v16 = v29;
    }
    unint64_t v28 = v16;
  }
  unint64_t v7 = v28;
  uint64_t v8 = v36;
  *(void *)&long long v24 = v37;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  *(void *)&long long v24 = &v32;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v7 != v8) {
    goto LABEL_11;
  }
  unint64_t v31 = (void **)v30;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
  unint64_t v31 = (void **)v27;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v49);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v48);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v47);
}

void sub_2240CB484(_Unwind_Exception *a1)
{
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v1 - 208));
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9join_impl18hash_join_executor15grace_hash_joinEvE3$_4EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9join_impl18hash_join_executor15grace_hash_joinEvE3$_4EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    int8x8_t v2 = result;
    do
      uint64_t result = turi::join_impl::hash_join_executor::grace_hash_join(void)::$_4::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void *std::vector<turi::flexible_type>::vector(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = v6 + 16 * a2;
    uint64_t v8 = 16 * a2;
    do
    {
      *(void *)uint64_t v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
      *(unsigned char *)(v6 + 12) = 0;
      if ((uint64_t *)v6 != a3)
      {
        uint64_t v9 = *a3;
        *(void *)(v6 + 5) = *(uint64_t *)((char *)a3 + 5);
        *(void *)uint64_t v6 = v9;
        LODWORD(v9) = *((unsigned __int8 *)a3 + 12);
        *(unsigned char *)(v6 + 12) = v9;
        BOOL v10 = v9 > 9;
        int v11 = (1 << v9) & 0x33C;
        if (!v10 && v11 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v6, 1uLL);
        }
      }
      v6 += 16;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2240CB77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,turi::flexible_type*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        switch(*(unsigned char *)(a4 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              if (*((char *)v7 + 31) < 0) {
                operator delete((void *)v7[1]);
              }
              atomic_ullong *volatile v8 = v7;
              uint64_t v9 = 0x1012C404EF22A49;
              goto LABEL_34;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              int v11 = (void *)v10[1];
              if (v11)
              {
                v10[2] = (atomic_ullong)v11;
                operator delete(v11);
              }
              atomic_ullong *volatile v8 = v10;
              uint64_t v9 = 0x1080C409938AC02;
              goto LABEL_34;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              long long v24 = (void **)(v12 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
              goto LABEL_20;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              long long v24 = (void **)(v12 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_20:
              atomic_ullong *volatile v8 = v12;
              uint64_t v9 = 0x1020C405E66F15BLL;
              goto LABEL_34;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v13 + 2);
              atomic_ullong *volatile v8 = v13;
              unsigned int v14 = -235920773;
              goto LABEL_33;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a4;
              if (*(void *)a4)
              {
                unint64_t v16 = (void *)v15[6];
                if (v16)
                {
                  v15[7] = (atomic_ullong)v16;
                  operator delete(v16);
                }
                unint64_t v17 = (void *)v15[3];
                if (v17)
                {
                  v15[4] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                uint64_t v18 = (std::__shared_weak_count *)v15[2];
                if (v18) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                }
                atomic_ullong *volatile v8 = v15;
                unsigned int v14 = 2071181815;
LABEL_33:
                uint64_t v9 = v14 | 0x1030C4000000000;
LABEL_34:
                MEMORY[0x22A614FA0](v8, v9);
              }
LABEL_35:
              *(void *)a4 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v19 = *v5;
        *(void *)(a4 + 5) = *(uint64_t *)((char *)v5 + 5);
        *(void *)a4 = v19;
        LODWORD(v19) = *((unsigned __int8 *)v5 + 12);
        *(unsigned char *)(a4 + 12) = v19;
        BOOL v20 = v19 > 9;
        int v21 = (1 << v19) & 0x33C;
        if (!v20 && v21 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        }
      }
      v5 += 2;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *std::allocate_shared[abi:ne180100]<turi::sframe,std::allocator<turi::sframe>,turi::sframe const&,void>@<X0>(const turi::sframe *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x140uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::sframe>::__shared_ptr_emplace[abi:ne180100]<turi::sframe&,std::allocator<turi::sframe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2240CBA58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()(uint64_t ***a1)
{
  v18[2] = *MEMORY[0x263EF8340];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  (*(void (**)(void **__return_ptr))(***a1 + 32))(&v12);
  (*(void (**)(void **__return_ptr))(***a1 + 40))(&__p);
  if (v12 != __p || v13[3] != v10[3])
  {
    atomic_ullong *volatile v8 = (void **)v11;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v8);
    atomic_ullong *volatile v8 = (void **)v10;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v8);
    goto LABEL_6;
  }
  uint64_t v2 = v13[4];
  uint64_t v3 = v10[4];
  atomic_ullong *volatile v8 = (void **)v11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v8);
  atomic_ullong *volatile v8 = (void **)v10;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v2 != v3)
  {
LABEL_6:
    uint64_t v4 = turi::sframe_iterator::operator*(&v12);
    turi::join_impl::compute_hash_from_row(v4, a1[1]);
    long long v5 = (uint64_t **)turi::sframe_iterator::operator*(&v12);
    atomic_ullong *volatile v7 = *v5;
    uint64_t v6 = v5[1];
    while (v7 != v6)
    {
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)&v15, v7);
      v7 += 2;
    }
    std::string::basic_string[abi:ne180100](&__p, *((void **)&v16 + 1), v17);
    turi::flexible_type::flexible_type<std::string>((uint64_t)v18);
  }
  std::string __p = &v14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = v13;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  free(*((void **)&v16 + 1));
}

void sub_2240CC114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 152));
  switch(*(unsigned char *)(v28 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v30 = *(void *)(v28 - 136);
      if (!v30) {
        goto LABEL_27;
      }
      if (*(char *)(v30 + 31) < 0) {
        operator delete(*(void **)(v30 + 8));
      }
      unint64_t v31 = (void *)v30;
      uint64_t v32 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v36 = *(void **)(v28 - 136);
      if (!v36) {
        goto LABEL_27;
      }
      unint64_t v37 = (void *)v36[1];
      if (v37)
      {
        v36[2] = v37;
        operator delete(v37);
      }
      unint64_t v31 = v36;
      uint64_t v32 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v33 = *(void **)(v28 - 136);
      if (!v33) {
        goto LABEL_27;
      }
      *(void *)(v28 - 152) = v33 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 152));
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v33 = *(void **)(v28 - 136);
      if (!v33) {
        goto LABEL_27;
      }
      *(void *)(v28 - 152) = v33 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 152));
LABEL_21:
      unint64_t v31 = v33;
      uint64_t v32 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v38 = *(void *)(v28 - 136);
      if (!v38) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v38 + 16));
      unint64_t v31 = (void *)v38;
      unsigned int v35 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v34 = *(void **)(v28 - 136);
      if (!v34) {
        goto LABEL_27;
      }
      unint64_t v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v34);
      unsigned int v35 = 2071181815;
LABEL_25:
      uint64_t v32 = v35 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v31, v32);
LABEL_27:
      switch(*(unsigned char *)(v28 - 108))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_46;
          }
          turi::globals::list_globals();
          goto LABEL_38;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_46;
          }
          turi::globals::list_globals();
LABEL_38:
          a1 = a12;
          goto LABEL_46;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_46;
          }
          char v39 = *(void **)(v28 - 120);
          if (!v39) {
            goto LABEL_46;
          }
          a12 = (_Unwind_Exception *)(v39 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
          goto LABEL_42;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_46;
          }
          char v39 = *(void **)(v28 - 120);
          if (!v39) {
            goto LABEL_46;
          }
          a12 = (_Unwind_Exception *)(v39 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_42:
          uint64_t v41 = v39;
          uint64_t v42 = 0x1020C405E66F15BLL;
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 120), 0xFFFFFFFFFFFFFFFFLL) == 1) {
            turi::globals::list_globals(v28 - 120);
          }
          goto LABEL_46;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_46;
          }
          uint64_t v40 = *(void **)(v28 - 120);
          if (!v40) {
            goto LABEL_46;
          }
          uint64_t v41 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v40);
          uint64_t v42 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x22A614FA0](v41, v42);
LABEL_46:
      if (a20 < 0) {
        operator delete(__p);
      }
      turi::sframe_iterator::~sframe_iterator((turi::sframe_iterator *)&a28);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_9join_impl18hash_join_executor21grace_partition_frameE"
                                        "RKNS_6sframeERKNSt3__16vectorImNS6_9allocatorImEEEEmE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_9join_impl18hash_join_executor21grace_partition_frameERKNS_6sframeERKNSt3__16vectorImNS6_9allocatorImEEEEmE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1>(unsigned long,unsigned long,turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  for (unint64_t i = *(void *)(a1 + 8); i < *(void *)(a1 + 16); ++i)
    turi::join_impl::hash_join_executor::grace_partition_frame(turi::sframe const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()(*(uint64_t ****)a1);
}

void turi::skip_BOM(turi *this, turi::general_ifstream *a2)
{
  unsigned __int8 v3 = std::istream::get();
  if (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 32))
  {
    if (*((void *)this + 1) == 1)
    {
      std::istream::putback();
      uint64_t v4 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24));
      std::ios_base::clear(v4, 0);
    }
    return;
  }
  unsigned __int8 v5 = std::istream::get();
  uint64_t v6 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24));
  if (v6->__rdstate_)
  {
    uint64_t v7 = *((void *)this + 1);
    std::ios_base::clear(v6, 0);
    if (v7 != 1) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  unsigned __int8 v8 = std::istream::get();
  uint64_t v9 = *((void *)this + 1);
  atomic_ullong *volatile v10 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24));
  if ((v10->__rdstate_ & 1) == 0 && v9)
  {
    if (v3 == 239 && v5 == 187 && v8 == 191) {
      return;
    }
    goto LABEL_16;
  }
  std::ios_base::clear(v10, 0);
  if (v9 == 1) {
LABEL_16:
  }
    std::istream::putback();
LABEL_17:
  std::istream::putback();
LABEL_18:
  std::istream::putback();
}

void *turi::eol_safe_getline(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  MEMORY[0x22A6148B0](&v12, a1, 1);
  uint64_t v4 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
  while (1)
  {
    unsigned __int8 v5 = (unsigned __int8 *)v4[3];
    if (v5 == (unsigned __int8 *)v4[4])
    {
      int v6 = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
    }
    else
    {
      v4[3] = v5 + 1;
      int v6 = *v5;
    }
    if (v6 == -1) {
      break;
    }
    if (v6 == 10) {
      return a1;
    }
    if (v6 == 13)
    {
      unsigned __int8 v8 = (unsigned __int8 *)v4[3];
      if (v8 == (unsigned __int8 *)v4[4]) {
        int v9 = (*(uint64_t (**)(void *))(*v4 + 72))(v4);
      }
      else {
        int v9 = *v8;
      }
      if (v9 == 10)
      {
        uint64_t v10 = v4[3];
        if (v10 == v4[4]) {
          (*(void (**)(void *))(*v4 + 80))(v4);
        }
        else {
          v4[3] = v10 + 1;
        }
      }
      return a1;
    }
    std::string::push_back((std::string *)a2, v6);
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (!v7) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 2);
  }
  return a1;
}

void *turi::custom_eol_getline(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (v6)
  {
    MEMORY[0x22A6148B0](&v16, a1, 1);
    uint64_t v7 = 0;
    unsigned __int8 v8 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    while (1)
    {
      while (1)
      {
        int v9 = (unsigned __int8 *)v8[3];
        if (v9 == (unsigned __int8 *)v8[4])
        {
          int v10 = (*(uint64_t (**)(void *))(*v8 + 80))(v8);
        }
        else
        {
          void v8[3] = v9 + 1;
          int v10 = *v9;
        }
        uint64_t v11 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
        if (v10 != *(char *)(v11 + v7)) {
          break;
        }
        ++v7;
        std::string::push_back((std::string *)a2, v10);
        uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = *(void *)(a3 + 8);
        }
        if (v7 == v12)
        {
          uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
          if ((v13 & 0x80u) != 0) {
            uint64_t v13 = *(void *)(a2 + 8);
          }
          std::string::resize((std::string *)a2, v13 - v7, 0);
          return a1;
        }
      }
      if (v10 == -1) {
        break;
      }
      std::string::push_back((std::string *)a2, v10);
      uint64_t v7 = 0;
    }
    uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a2 + 8);
    }
    if (!v14) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 2);
    }
  }
  else
  {
    std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v16, *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40), 0);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v16;
  }
  return a1;
}

void *turi::eol_getline(void *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(char *)(a3 + 23);
  if (v3 < 0)
  {
    if (*(void *)(a3 + 8) != 1) {
      return turi::custom_eol_getline(a1, a2, a3);
    }
    uint64_t v4 = *(unsigned char **)a3;
  }
  else
  {
    uint64_t v4 = (unsigned char *)a3;
    if (v3 != 1) {
      return turi::custom_eol_getline(a1, a2, a3);
    }
  }
  if (*v4 == 10) {
    return turi::eol_safe_getline(a1, a2);
  }
  return turi::custom_eol_getline(a1, a2, a3);
}

void turi::parse_csvs_to_sframe(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v370 = *MEMORY[0x263EF8340];
  int v8 = *a3;
  unsigned __int8 v9 = a3[1];
  unsigned __int8 v280 = a3[2];
  v266 = (const void ***)(a3 + 8);
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)v317, (const void ***)a3 + 1);
  memset(&v316, 0, sizeof(v316));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v316, *((long long **)a3 + 4), *((long long **)a3 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 5) - *((void *)a3 + 4)) >> 3));
  v267 = (long long **)a3;
  unint64_t v279 = *((void *)a3 + 7);
  v265 = (long long *)(a3 + 56);
  uint64_t v10 = *((void *)a3 + 8);
  v314 = 0;
  v313 = 0;
  unint64_t v315 = 0;
  v274 = (turi::parallel_task_queue *)a1;
  turi::fileio::get_glob_files(a1, &v311);
  uint64_t v11 = v311;
  uint64_t v12 = v312;
  if (v311 == v312)
  {
    uint64_t v312 = v311;
    std::string::size_type v37 = (std::string::size_type)v313;
    if (v313 == v314) {
      goto LABEL_561;
    }
  }
  else
  {
    char v281 = 0;
    do
    {
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v363, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
      }
      else
      {
        long long v13 = *(_OWORD *)v11;
        v363.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        *(_OWORD *)&v363.__r_.__value_.__l.__data_ = v13;
      }
      int v364 = *(_DWORD *)(v11 + 24);
      if (v364 == 1)
      {
        if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v310, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
        }
        else {
          std::string v310 = v363;
        }
        turi::general_ifstream::general_ifstream(&v332, (uint64_t)&v310);
        if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v310.__r_.__value_.__l.__data_);
        }
        uint64_t v14 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)&v332);
        if (!v14)
        {
          long long v15 = (int *)global_logger();
          if (v15[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v15)) {
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            }
            std::string v16 = (file_logger *)global_logger();
            started = file_logger::start_stream(v16, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csvs_to_sframe", 1231, 1);
            uint64_t v18 = pthread_getspecific(*((void *)started + 74));
            if (v18 && *((unsigned char *)v18 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Skipping file ", 14);
            }
            if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v307, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
            }
            else {
              std::string v307 = v363;
            }
            turi::sanitize_url((__n128 *)&v307, &__p);
            uint64_t v19 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
            BOOL v20 = pthread_getspecific(*(void *)(v19 + 592));
            if (v20 && *((unsigned char *)v20 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)" because it appears to be empty", 31);
            }
            int v21 = pthread_getspecific(*(void *)(v19 + 592));
            if (v21)
            {
              if (*((unsigned char *)v21 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v21[2] - 24) + 16));
                long long v22 = std::locale::use_facet(&v331, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
                std::locale::~locale(&v331);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v19);
                if (*(_DWORD *)(v19 + 600) == 7)
                {
                  __print_back_trace();
                  exception = __cxa_allocate_exception(8uLL);
                  void *exception = "LOG_FATAL encountered";
                  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
                }
              }
            }
            if (v309 < 0) {
              operator delete((void *)__p.n128_u64[0]);
            }
            if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v307.__r_.__value_.__l.__data_);
            }
          }
          char v281 = 1;
        }
        v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D758EF8;
        *((void *)&v345 + 1) = &unk_26D758F20;
        if (SBYTE7(v345) < 0) {
          operator delete(ptr[0]);
        }
        std::istream::~istream();
        boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v332.__r_.__value_.__r.__words[2]);
        MEMORY[0x22A614E30]((char *)&v345 + 8);
        if (v14)
        {
          uint64_t v23 = (int *)global_logger();
          if (v23[169] <= 2)
          {
            if (cppipc::must_cancel((cppipc *)v23)) {
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            }
            long long v24 = (file_logger *)global_logger();
            uint64_t v25 = file_logger::start_stream(v24, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csvs_to_sframe", 1244, 1);
            uint64_t v26 = pthread_getspecific(*((void *)v25 + 74));
            if (v26 && *((unsigned char *)v26 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)"Adding CSV file ", 16);
            }
            if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v304, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
            }
            else {
              std::string v304 = v363;
            }
            turi::sanitize_url((__n128 *)&v304, &v305);
            uint64_t v27 = file_logger::operator<<<std::string>((uint64_t)v25, (uint64_t)&v305);
            uint64_t v28 = pthread_getspecific(*(void *)(v27 + 592));
            if (v28 && *((unsigned char *)v28 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)" to list of files to parse", 26);
            }
            unint64_t v29 = pthread_getspecific(*(void *)(v27 + 592));
            if (v29)
            {
              if (*((unsigned char *)v29 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(v29[2] - 24) + 16));
                uint64_t v30 = std::locale::use_facet((const std::locale *)&v332, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
                std::locale::~locale((std::locale *)&v332);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v27);
                if (*(_DWORD *)(v27 + 600) == 7)
                {
                  __print_back_trace();
                  v251 = __cxa_allocate_exception(8uLL);
                  void *v251 = "LOG_FATAL encountered";
                  __cxa_throw(v251, MEMORY[0x263F8C1D8], 0);
                }
              }
            }
            if (v306 < 0) {
              operator delete((void *)v305.n128_u64[0]);
            }
            if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v304.__r_.__value_.__l.__data_);
            }
          }
          unint64_t v31 = v314;
          if ((unint64_t)v314 >= v315)
          {
            uint64_t v33 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v313, (long long *)&v363);
          }
          else
          {
            if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v314, v363.__r_.__value_.__l.__data_, v363.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v32 = *(_OWORD *)&v363.__r_.__value_.__l.__data_;
              v314->__r_.__value_.__r.__words[2] = v363.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
            }
            uint64_t v33 = v31 + 1;
          }
          v314 = v33;
        }
      }
      if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v363.__r_.__value_.__l.__data_);
      }
      v11 += 32;
    }
    while (v11 != v12);
    uint64_t v35 = v311;
    for (uint64_t i = v312; i != v35; i -= 32)
    {
      if (*(char *)(i - 9) < 0) {
        operator delete(*(void **)(i - 32));
      }
    }
    uint64_t v312 = v35;
    std::string::size_type v37 = (std::string::size_type)v313;
    if (v313 == v314)
    {
      if (v281)
      {
        if (!a4[288] || !a4[289])
        {
          memset(&v332, 0, sizeof(v332));
          memset(&v363, 0, sizeof(v363));
          turi::sframe::open_for_write((uint64_t)a4, &v332, &v363, (const std::string *)a5, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
        }
        (*(void (**)(unsigned char *))(*(void *)a4 + 40))(a4);
        a6[2] = 0;
        a6[1] = 0;
        *a6 = a6 + 1;
        goto LABEL_548;
      }
LABEL_561:
      v332.__r_.__value_.__r.__words[0] = (std::string::size_type)v274;
      turi::parse_csvs_to_sframe(std::string const&,turi::csv_line_tokenizer &,turi::csv_file_handling_options,turi::sframe &,std::string)::$_0::operator()((long long **)&v332);
    }
  }
  long long v302 = 0u;
  memset(&v303, 0, sizeof(v303));
  long long v301 = 0u;
  memset(&v324, 0, sizeof(v324));
  v322 = 0;
  v321 = 0;
  uint64_t v323 = 0;
  if (*(char *)(v37 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v37, *(void *)(v37 + 8));
  }
  else
  {
    long long v38 = *(_OWORD *)v37;
    v320.__r_.__value_.__r.__words[2] = *(void *)(v37 + 16);
    *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v38;
  }
  turi::general_ifstream::general_ifstream(&v332, (uint64_t)&v320);
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v320.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)((char *)&v333 + *(void *)(v332.__r_.__value_.__r.__words[0] - 24) + 8))
  {
    v363.__r_.__value_.__r.__words[0] = v37;
  }
  turi::skip_BOM((turi *)&v332, v39);
  *(void *)&v318.tv_usec = 0;
  v318.tv_sec = 0;
  for (uint64_t j = 0; v10; --v10)
    turi::eol_getline(&v332, (uint64_t)&v318, (uint64_t)(a2 + 32));
  char v275 = v280 | v9;
  uint64_t v277 = (uint64_t)(a2 + 32);
  while (1)
  {
    uint64_t v40 = (std::string *)v321;
    if (v322 != v321) {
      break;
    }
    if (*(_DWORD *)((char *)&v333 + *(void *)(v332.__r_.__value_.__r.__words[0] - 24) + 8))
    {
      uint64_t v40 = v322;
      break;
    }
    turi::eol_getline(&v332, (uint64_t)&v324, v277);
    MEMORY[0x22A614D20](&v369);
    LODWORD(v363.__r_.__value_.__l.__data_) = 0x4000;
    std::locale::locale((std::locale *)&v363.__r_.__value_.__r.__words[1], (const std::locale *)&v369);
    boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v324, (std::locale *)&v363);
    std::locale::~locale((std::locale *)&v363.__r_.__value_.__r.__words[1]);
    std::locale::~locale((std::locale *)&v369);
    if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v41 = &v324;
    }
    else {
      uint64_t v41 = (std::string *)v324.__r_.__value_.__r.__words[0];
    }
    if ((v324.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v324.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v324.__r_.__value_.__l.__size_;
    }
    turi::csv_line_tokenizer::tokenize_line(a2, (char *)v41, size, (uint64_t *)&v321);
  }
  *(void *)&long long v301 = 0xAAAAAAAAAAAAAAABLL * (((char *)v322 - (char *)v40) >> 3);
  if (v8)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)&v301 + 8), v40, (long long *)v322, 0xAAAAAAAAAAAAAAABLL * (((char *)v322 - (char *)v40) >> 3));
    unint64_t v43 = (int *)global_logger();
    if (v43[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v43)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      unint64_t v44 = (file_logger *)global_logger();
      uint64_t v45 = file_logger::start_stream(v44, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "make_unique_column_names", 960, 1);
      uint64_t v46 = pthread_getspecific(*((void *)v45 + 74));
      if (v46 && *((unsigned char *)v46 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)"Function entry", 14);
      }
      uint64_t v47 = pthread_getspecific(*((void *)v45 + 74));
      if (v47)
      {
        if (*((unsigned char *)v47 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(void *)(v47[2] - 24) + 16));
          char v48 = std::locale::use_facet((const std::locale *)&v363, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
          std::locale::~locale((std::locale *)&v363);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v45);
          if (*((_DWORD *)v45 + 150) == 7)
          {
            __print_back_trace();
            v260 = __cxa_allocate_exception(8uLL);
            void *v260 = "LOG_FATAL encountered";
            __cxa_throw(v260, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    *(_OWORD *)&v363.__r_.__value_.__r.__words[1] = 0uLL;
    v363.__r_.__value_.__r.__words[0] = (std::string::size_type)&v363.__r_.__value_.__l.__size_;
    uint64_t v49 = *((void *)&v301 + 1);
    if ((void)v302 == *((void *)&v301 + 1))
    {
      unint64_t v62 = 0;
    }
    else
    {
      unint64_t v50 = 0;
      do
      {
        atomic_ullong *volatile v51 = (long long *)(v49 + 24 * v50);
        if (*((char *)v51 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v369, *(const std::string::value_type **)v51, *((void *)v51 + 1));
        }
        else
        {
          long long v52 = *v51;
          *(void *)&v369.__opaque[8] = *((void *)v51 + 2);
          *(_OWORD *)&v369.__sig = v52;
        }
        if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v363, (const void **)&v369))
        {
          std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v328, *((const void ***)&v301 + 1), (const void **)v302);
          memset(&__str, 0, sizeof(__str));
          unint64_t v53 = 1;
          do
          {
            if (v369.__opaque[15] >= 0) {
              size_t v54 = v369.__opaque[15];
            }
            else {
              size_t v54 = *(void *)v369.__opaque;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v326, v54 + 1);
            if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              atomic_ullong *volatile v55 = &v326;
            }
            else {
              atomic_ullong *volatile v55 = (std::string *)v326.__r_.__value_.__r.__words[0];
            }
            if (v54)
            {
              if (v369.__opaque[15] >= 0) {
                sig = &v369;
              }
              else {
                sig = (pthread_mutex_t *)v369.__sig;
              }
              memmove(v55, sig, v54);
            }
            *(_WORD *)((char *)&v55->__r_.__value_.__l.__data_ + v54) = 46;
            std::to_string(&v325, v53);
            if ((v325.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v57 = &v325;
            }
            else {
              uint64_t v57 = (std::string *)v325.__r_.__value_.__r.__words[0];
            }
            if ((v325.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v58 = HIBYTE(v325.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v58 = v325.__r_.__value_.__l.__size_;
            }
            atomic_ullong *volatile v59 = std::string::append(&v326, (const std::string::value_type *)v57, v58);
            std::string::size_type v60 = v59->__r_.__value_.__r.__words[0];
            *(void *)&long long v362 = v59->__r_.__value_.__l.__size_;
            *(void *)((char *)&v362 + 7) = *(std::string::size_type *)((char *)&v59->__r_.__value_.__r.__words[1] + 7);
            char v61 = HIBYTE(v59->__r_.__value_.__r.__words[2]);
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            __str.__r_.__value_.__r.__words[0] = v60;
            __str.__r_.__value_.__l.__size_ = v362;
            *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v362 + 7);
            *((unsigned char *)&__str.__r_.__value_.__s + 23) = v61;
            if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v325.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v326.__r_.__value_.__l.__data_);
            }
            ++v53;
          }
          while (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v328, (const void **)&__str.__r_.__value_.__l.__data_));
          std::string::operator=((std::string *)(*((void *)&v301 + 1) + 24 * v50), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v328, (char *)v328.__r_.__value_.__l.__size_);
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v363, (const void **)(*((void *)&v301 + 1) + 24 * v50), *((void *)&v301 + 1) + 24 * v50);
        if (v369.__opaque[15] < 0) {
          operator delete((void *)v369.__sig);
        }
        ++v50;
        uint64_t v49 = *((void *)&v301 + 1);
      }
      while (v50 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v302 - *((void *)&v301 + 1)) >> 3));
      unint64_t v62 = (char *)v363.__r_.__value_.__l.__size_;
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v363, v62);
    if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
    {
      *v324.__r_.__value_.__l.__data_ = 0;
      v324.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v324.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v324.__r_.__value_.__s + 23) = 0;
    }
    uint64_t v70 = (std::string *)v321;
    for (k = v322; k != v70; --k)
    {
      if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(k[-1].__r_.__value_.__l.__data_);
      }
    }
    v322 = v70;
  }
  else
  {
    std::vector<std::string>::resize((std::vector<std::string> *)((char *)&v301 + 8), 0xAAAAAAAAAAAAAAABLL * (((char *)v322 - (char *)v40) >> 3));
    if ((void)v301)
    {
      uint64_t v63 = 0;
      unint64_t v64 = 1;
      do
      {
        std::to_string(&v363, v64);
        uint64_t v65 = std::string::insert(&v363, 0, "X");
        std::string::size_type v66 = v65->__r_.__value_.__r.__words[0];
        v369.__sig = v65->__r_.__value_.__l.__size_;
        *(uint64_t *)((char *)&v369.__sig + 7) = *(std::string::size_type *)((char *)&v65->__r_.__value_.__r.__words[1]
                                                                          + 7);
        char v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        uint64_t v68 = *((void *)&v301 + 1) + v63;
        if (*(char *)(*((void *)&v301 + 1) + v63 + 23) < 0) {
          operator delete(*(void **)v68);
        }
        *(void *)uint64_t v68 = v66;
        *(void *)(v68 + 8) = v369.__sig;
        *(void *)(v68 + 15) = *(uint64_t *)((char *)&v369.__sig + 7);
        *(unsigned char *)(v68 + 23) = v67;
        if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v363.__r_.__value_.__l.__data_);
        }
        v63 += 24;
      }
      while (v64++ < (unint64_t)v301);
    }
  }
  if (SHIBYTE(j) < 0) {
    operator delete((void *)v318.tv_sec);
  }
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D758EF8;
  *((void *)&v345 + 1) = &unk_26D758F20;
  if (SBYTE7(v345) < 0) {
    operator delete(ptr[0]);
  }
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v332.__r_.__value_.__r.__words[2]);
  MEMORY[0x22A614E30]((char *)&v345 + 8);
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
  if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v324.__r_.__value_.__l.__data_);
  }
  atomic_ullong *volatile v72 = (int *)global_logger();
  if (v72[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v72)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v73 = (file_logger *)global_logger();
    size_t v74 = file_logger::start_stream(v73, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csvs_to_sframe", 1272, 1);
    unint64_t v75 = pthread_getspecific(*((void *)v74 + 74));
    if (v75 && *((unsigned char *)v75 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75 + 2, (uint64_t)"CSV num. columns: ", 18);
    }
    uint64_t v76 = file_logger::operator<<<unsigned long>((uint64_t)v74);
    atomic_ullong *volatile v77 = pthread_getspecific(*(void *)(v76 + 592));
    if (v77)
    {
      if (*((unsigned char *)v77 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(void *)(v77[2] - 24) + 16));
        double v78 = std::locale::use_facet((const std::locale *)&v332, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
        std::locale::~locale((std::locale *)&v332);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v76);
        if (*(_DWORD *)(v76 + 600) == 7)
        {
          __print_back_trace();
          v255 = __cxa_allocate_exception(8uLL);
          void *v255 = "LOG_FATAL encountered";
          __cxa_throw(v255, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (!(void)v301)
  {
    if (!a4[288] || !a4[289])
    {
      memset(&v332, 0, sizeof(v332));
      memset(&v363, 0, sizeof(v363));
      turi::sframe::open_for_write((uint64_t)a4, &v332, &v363, (const std::string *)a5, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
    }
    (*(void (**)(unsigned char *))(*(void *)a4 + 40))(a4);
    a6[2] = 0;
    a6[1] = 0;
    *a6 = a6 + 1;
    goto LABEL_545;
  }
  v322 = 0;
  v321 = 0;
  uint64_t v323 = 0;
  if (v316.__r_.__value_.__r.__words[0] != v316.__r_.__value_.__l.__size_)
  {
    v332.__r_.__value_.__r.__words[0] = -1;
    std::vector<unsigned long>::resize((uint64_t)&v321, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v302 - *((void *)&v301 + 1)) >> 3), &v332);
    atomic_ullong *volatile v79 = (long long *)v316.__r_.__value_.__l.__size_;
    uint64_t v80 = (std::string *)v316.__r_.__value_.__r.__words[0];
    if (v316.__r_.__value_.__l.__size_ == v316.__r_.__value_.__r.__words[0])
    {
      unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v316.__r_.__value_.__l.__size_ - v316.__r_.__value_.__r.__words[0]) >> 3);
      uint64_t v80 = (std::string *)v316.__r_.__value_.__l.__size_;
    }
    else
    {
      uint64_t v81 = 0;
      unint64_t v82 = 0;
      uint64_t v83 = *((void *)&v301 + 1);
      uint64_t v84 = v302;
      do
      {
        unint64_t v85 = &v80[v81];
        uint64_t v86 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v83, v84, (unsigned __int8 **)&v80[v81]);
        uint64_t v84 = v302;
        if (v86 == (void)v302)
        {
          if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0) {
            unint64_t v88 = v80[v81].__r_.__value_.__l.__size_;
          }
          else {
            unint64_t v88 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
          }
          if (v88 < 2) {
            goto LABEL_550;
          }
          uint64_t v89 = &v80[v81];
          if ((*((unsigned char *)&v85->__r_.__value_.__s + 23) & 0x80) != 0) {
            uint64_t v89 = (std::string *)v85->__r_.__value_.__r.__words[0];
          }
          if (v89->__r_.__value_.__s.__data_[v82] != 88)
          {
LABEL_550:
            v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80[v81];
            turi::parse_csvs_to_sframe(std::string const&,turi::csv_line_tokenizer &,turi::csv_file_handling_options,turi::sframe &,std::string)::$_2::operator()();
          }
          std::string::basic_string(&v332, &v80[v81], 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v363);
          unint64_t v90 = std::stoull(&v332, 0, 10);
          if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v332.__r_.__value_.__l.__data_);
          }
          if (!v90 || (uint64_t v84 = v302, v90 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v302 - *((void *)&v301 + 1)) >> 3)))
          {
            v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80[v81];
            turi::parse_csvs_to_sframe(std::string const&,turi::csv_line_tokenizer &,turi::csv_file_handling_options,turi::sframe &,std::string)::$_1::operator()();
          }
          uint64_t v87 = *((void *)&v301 + 1) + 24 * v90 - 24;
        }
        else
        {
          uint64_t v87 = v86;
        }
        if (v87 == v84) {
          goto LABEL_550;
        }
        uint64_t v83 = *((void *)&v301 + 1);
        *((void *)v321 + 0xAAAAAAAAAAAAAABLL * ((unint64_t)(v87 - *((void *)&v301 + 1)) >> 3)) = v82++;
        atomic_ullong *volatile v79 = (long long *)v316.__r_.__value_.__l.__size_;
        uint64_t v80 = (std::string *)v316.__r_.__value_.__r.__words[0];
        unint64_t v91 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v316.__r_.__value_.__l.__size_ - v316.__r_.__value_.__r.__words[0]) >> 3);
        ++v81;
      }
      while (v82 < v91);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)&v301 + 8), v80, v79, v91);
    *(void *)&long long v301 = 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v316.__r_.__value_.__l.__size_ - v316.__r_.__value_.__r.__words[0]) >> 3);
  }
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)&v298, v317);
  v332.__r_.__value_.__s.__data_[0] = 2;
  if ((unint64_t)v301 <= v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0])
  {
    if ((unint64_t)v301 < v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0]) {
      v303.__r_.__value_.__l.__size_ = v303.__r_.__value_.__r.__words[0] + v301;
    }
  }
  else
  {
    std::vector<turi::flex_type_enum>::__append((unint64_t *)&v303, v301 - (v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0]), &v332);
  }
  std::string::basic_string[abi:ne180100]<0>(&v332, "__all_columns__");
  uint64_t v92 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v298, (const void **)&v332.__r_.__value_.__l.__data_);
  uint64_t v93 = v92;
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v332.__r_.__value_.__l.__data_);
    if (v93) {
      goto LABEL_209;
    }
  }
  else if (v92)
  {
LABEL_209:
    size_t v94 = v301;
    std::string::basic_string[abi:ne180100]<0>(&v363, "__all_columns__");
    v369.__sig = (uint64_t)&v363;
    long long v95 = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v298, (const void **)&v363.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v369);
    std::vector<turi::flex_type_enum>::vector(&v332, v94, (unsigned char *)v95 + 56);
    if (v303.__r_.__value_.__r.__words[0])
    {
      v303.__r_.__value_.__l.__size_ = v303.__r_.__value_.__r.__words[0];
      operator delete(v303.__r_.__value_.__l.__data_);
    }
    std::string v303 = v332;
    memset(&v332, 0, sizeof(v332));
    if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v363.__r_.__value_.__l.__data_);
    }
    goto LABEL_258;
  }
  std::string::basic_string[abi:ne180100]<0>(&v332, "__X0__");
  uint64_t v96 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v298, (const void **)&v332.__r_.__value_.__l.__data_);
  uint64_t v97 = v96;
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v332.__r_.__value_.__l.__data_);
    if (v97) {
      goto LABEL_216;
    }
  }
  else if (v96)
  {
LABEL_216:
    if (v300 != v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0])
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v332);
      v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v332.__r_.__value_.__r.__words[2], (uint64_t)"column_type_hints has different size from actual number of columns: ", 68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)"column_type_hints.size()=", 25);
      v257 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)";number of columns=",
        19);
      v258 = (void *)std::ostream::operator<<();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v258);
      v363.__r_.__value_.__r.__words[0] = (std::string::size_type)&v332;
    }
    if ((void)v301)
    {
      unint64_t v98 = 0;
      v282 = (std::string *)*MEMORY[0x263F8C2B8];
      std::string::size_type v100 = *(void *)(MEMORY[0x263F8C2B8] + 64);
      std::string::size_type v99 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v332);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v332.__r_.__value_.__r.__words[2], (uint64_t)"__X", 3);
        int v101 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"__", 2);
        std::stringbuf::str();
        uint64_t v102 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v298, (const void **)&v363.__r_.__value_.__l.__data_);
        if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v363.__r_.__value_.__l.__data_);
        }
        if (!v102) {
        std::stringbuf::str();
        }
        v369.__sig = (uint64_t)&v363;
        uint64_t v103 = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v298, (const void **)&v363.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v369);
        *(unsigned char *)(v303.__r_.__value_.__r.__words[0] + v98) = *((unsigned char *)v103 + 56);
        if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v363.__r_.__value_.__l.__data_);
        }
        v332.__r_.__value_.__r.__words[0] = (std::string::size_type)v282;
        *(std::string::size_type *)((char *)v332.__r_.__value_.__r.__words + v282[-1].__r_.__value_.__r.__words[0]) = v100;
        v332.__r_.__value_.__r.__words[2] = v99;
        *(void *)&long long v333 = MEMORY[0x263F8C318] + 16;
        if (SBYTE7(v338) < 0) {
          operator delete((void *)v337);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](&v340);
        ++v98;
      }
      while (v98 < (unint64_t)v301);
    }
    goto LABEL_258;
  }
  uint64_t v104 = *((void *)&v301 + 1);
  if ((void)v302 != *((void *)&v301 + 1))
  {
    uint64_t v105 = 0;
    unint64_t v106 = 0;
    do
    {
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v298, (const void **)(v104 + v105)))
      {
        uint64_t v107 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v298, (const void **)(*((void *)&v301 + 1) + v105));
        *(unsigned char *)(v303.__r_.__value_.__r.__words[0] + v106) = *v107;
        std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v298, (const void **)(*((void *)&v301 + 1) + v105));
      }
      ++v106;
      uint64_t v104 = *((void *)&v301 + 1);
      v105 += 24;
    }
    while (v106 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v302 - *((void *)&v301 + 1)) >> 3));
  }
  if (v300)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v332);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v332.__r_.__value_.__r.__words[2], (uint64_t)"These column type hints were not used:", 38);
    uint64_t v108 = (uint64_t *)v298;
    if (v298 != &v299)
    {
      do
      {
        v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v332.__r_.__value_.__r.__words[2], (uint64_t)" ", 1);
        int v110 = *((char *)v108 + 55);
        if (v110 >= 0) {
          uint64_t v111 = (uint64_t)(v108 + 4);
        }
        else {
          uint64_t v111 = v108[4];
        }
        if (v110 >= 0) {
          uint64_t v112 = *((unsigned __int8 *)v108 + 55);
        }
        else {
          uint64_t v112 = v108[5];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, v111, v112);
        uint64_t v113 = (char *)v108[1];
        if (v113)
        {
          do
          {
            uint64_t v114 = (char **)v113;
            uint64_t v113 = *(char **)v113;
          }
          while (v113);
        }
        else
        {
          do
          {
            uint64_t v114 = (char **)v108[2];
            BOOL v185 = *v114 == (char *)v108;
            uint64_t v108 = (uint64_t *)v114;
          }
          while (!v185);
        }
        uint64_t v108 = (uint64_t *)v114;
      }
      while (v114 != &v299);
    }
    v115 = (int *)global_logger();
    if (v115[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v115)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      int v116 = (file_logger *)global_logger();
      uint64_t v117 = file_logger::start_stream(v116, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "get_column_types", 1102, 1);
      std::stringbuf::str();
      uint64_t v118 = file_logger::operator<<<std::string>((uint64_t)v117, (uint64_t)&v363);
      v119 = pthread_getspecific(*(void *)(v118 + 592));
      if (v119)
      {
        if (*((unsigned char *)v119 + 280))
        {
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v119 + 2);
          file_logger::stream_flush((file_logger *)v118);
          if (*(_DWORD *)(v118 + 600) == 7)
          {
            __print_back_trace();
            v262 = __cxa_allocate_exception(8uLL);
            void *v262 = "LOG_FATAL encountered";
            __cxa_throw(v262, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v363.__r_.__value_.__l.__data_);
      }
    }
    v332.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
    std::string::size_type v120 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(std::string::size_type *)((char *)v332.__r_.__value_.__r.__words
                              + *(void *)(v332.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8]
                                                                                                 + 64);
    v332.__r_.__value_.__r.__words[2] = v120;
    *(void *)&long long v333 = MEMORY[0x263F8C318] + 16;
    if (SBYTE7(v338) < 0) {
      operator delete((void *)v337);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22A614E30](&v340);
  }
LABEL_258:
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v298, v299);
  uint64_t v297 = 0;
  v295 = 0;
  *(void *)v296 = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&v295, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_, v303.__r_.__value_.__l.__size_ - v303.__r_.__value_.__r.__words[0]);
  turi::csv_line_tokenizer::csv_line_tokenizer((turi::csv_line_tokenizer *)v293, (const turi::csv_line_tokenizer *)a2);
  v290 = 0;
  v291 = 0;
  uint64_t v292 = 0;
  uint64_t v121 = (turi::thread_pool *)std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v290, v321, (uint64_t)v322, ((char *)v322 - (unsigned char *)v321) >> 3);
  uint64_t instance = (turi::thread_pool *)turi::thread_pool::get_instance(v121);
  unint64_t v123 = turi::thread_pool::size(instance);
  uint64_t v124 = 2;
  if (v123 > 2) {
    uint64_t v124 = v123;
  }
  v332.__r_.__value_.__r.__words[0] = v124 - 1;
  std::vector<std::vector<std::vector<turi::flexible_type>>>::vector(&v332.__r_.__value_.__l.__size_, v124 - 1);
  std::vector<unsigned long>::vector((void *)&v333 + 1, v332.__r_.__value_.__r.__words[0]);
  std::vector<std::vector<std::vector<turi::flexible_type>>>::vector(&v335, v332.__r_.__value_.__r.__words[0]);
  std::vector<unsigned long>::vector((void *)&v336 + 1, v332.__r_.__value_.__r.__words[0]);
  std::vector<std::vector<turi::flexible_type>>::vector(&v338, v332.__r_.__value_.__r.__words[0]);
  std::vector<std::vector<turi::flexible_type>>::vector(&v340, v332.__r_.__value_.__r.__words[0]);
  v125 = (turi::thread_pool *)std::vector<turi::csv_line_tokenizer>::vector(&v342, v332.__r_.__value_.__r.__words[0], (const turi::csv_line_tokenizer *)v293);
  long long v345 = 0u;
  *(_OWORD *)ptr = 0u;
  *(_OWORD *)v343 = 0u;
  v126 = (turi::thread_pool *)turi::thread_pool::get_instance(v125);
  uint64_t v127 = (turi::thread_pool *)turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v346, v126);
  unint64_t v128 = (turi::thread_pool *)turi::thread_pool::get_instance(v127);
  turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v347, v128);
  uint64_t v349 = 0;
  *(_OWORD *)v348 = 0u;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v348, v295, *(uint64_t *)v296, *(void *)v296 - (void)v295);
  memset(v350, 0, sizeof(v350));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v350, v290, (uint64_t)v291, (v291 - (unsigned char *)v290) >> 3);
  unint64_t v351 = 0;
  unint64_t v352 = 0;
  gettimeofday(&v353, 0);
  unint64_t v354 = v279;
  long long v355 = 0u;
  char v356 = 0;
  uint64_t v357 = 0;
  char v358 = v275;
  unsigned __int8 v359 = v280;
  v129 = &v360;
  if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v360, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
  }
  else {
    std::string v360 = v294;
  }
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v360.__r_.__value_.__l.__size_ != 1)
    {
LABEL_269:
      BOOL v130 = 0;
      goto LABEL_270;
    }
    v129 = (std::string *)v360.__r_.__value_.__r.__words[0];
  }
  else if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) != 1)
  {
    goto LABEL_269;
  }
  BOOL v130 = v129->__r_.__value_.__s.__data_[0] == 10;
LABEL_270:
  BOOL v361 = v130;
  if (v290)
  {
    v291 = v290;
    operator delete(v290);
  }
  turi::csv_line_tokenizer::~csv_line_tokenizer((turi::csv_line_tokenizer *)v293);
  v131 = (turi *)v295;
  if (v295)
  {
    *(void *)v296 = v295;
    operator delete(v295);
  }
  uint64_t v132 = (uint64_t)v313;
  v133 = v314;
  if (v313 == v314)
  {
    uint64_t v134 = 0;
  }
  else
  {
    uint64_t v134 = 0;
    do
    {
      if (*(char *)(v132 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v369, *(const std::string::value_type **)v132, *(void *)(v132 + 8));
      }
      else
      {
        long long v135 = *(_OWORD *)v132;
        *(void *)&v369.__opaque[8] = *(void *)(v132 + 16);
        *(_OWORD *)&v369.__sig = v135;
      }
      if (v369.__opaque[15] < 0)
      {
        std::string::__init_copy_ctor_external(&v289, (const std::string::value_type *)v369.__sig, *(std::string::size_type *)v369.__opaque);
      }
      else
      {
        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = *(_OWORD *)&v369.__sig;
        v289.__r_.__value_.__r.__words[2] = *(void *)&v369.__opaque[8];
      }
      turi::general_ifstream::general_ifstream(&v363, (uint64_t)&v289);
      if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v289.__r_.__value_.__l.__data_);
      }
      uint64_t v136 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)&v363);
      v363.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D758EF8;
      v368[0] = &unk_26D758F20;
      if (v367 < 0) {
        operator delete(v366);
      }
      std::istream::~istream();
      boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v363.__r_.__value_.__r.__words[2]);
      v131 = (turi *)MEMORY[0x22A614E30](v368);
      if (v369.__opaque[15] < 0) {
        operator delete((void *)v369.__sig);
      }
      v134 += v136;
      v132 += 24;
    }
    while ((std::string *)v132 != v133);
  }
  *((void *)&v355 + 1) = v134;
  if (!a4[288] || !a4[289]) {
    turi::num_temp_directories(v131);
  }
  a6[2] = 0;
  a6[1] = 0;
  *a6 = a6 + 1;
  gettimeofday(&v353, 0);
  uint64_t v137 = (uint64_t)v313;
  v264 = v314;
  if (v313 != v314)
  {
    do
    {
      v271 = (std::string *)v137;
      if (*(char *)(v137 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v137, *(void *)(v137 + 8));
      }
      else
      {
        long long v138 = *(_OWORD *)v137;
        v320.__r_.__value_.__r.__words[2] = *(void *)(v137 + 16);
        *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v138;
      }
      if (v279 - 1 < v352)
      {
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v320.__r_.__value_.__l.__data_);
        }
        break;
      }
      __int16 v284 = *(_WORD *)v267;
      unsigned __int8 v285 = *((unsigned char *)v267 + 2);
      std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](v286, v266);
      memset(&v287, 0, sizeof(v287));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v287, v267[4], v267[5], 0xAAAAAAAAAAAAAAABLL * (((char *)v267[5] - (char *)v267[4]) >> 3));
      long long v288 = *v265;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string v283 = *(std::string *)a5;
      }
      int v139 = v284;
      int v270 = HIBYTE(v284);
      int v272 = v285;
      uint64_t v140 = *((void *)&v288 + 1);
      v141 = (int *)global_logger();
      if (v141[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v141)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        v142 = (file_logger *)global_logger();
        v143 = file_logger::start_stream(v142, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csv_to_sframe", 1137, 1);
        v144 = pthread_getspecific(*((void *)v143 + 74));
        if (v144 && *((unsigned char *)v144 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144 + 2, (uint64_t)"Loading sframe from ", 20);
        }
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v326, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
        }
        else {
          std::string v326 = v320;
        }
        turi::sanitize_url((__n128 *)&v326, (__n128 *)&__str);
        uint64_t v145 = file_logger::operator<<<std::string>((uint64_t)v143, (uint64_t)&__str);
        v146 = pthread_getspecific(*(void *)(v145 + 592));
        if (v146)
        {
          if (*((unsigned char *)v146 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v146 + *(void *)(v146[2] - 24) + 16));
            v147 = std::locale::use_facet((const std::locale *)&v363, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v147->__vftable[2].~facet_0)(v147, 10);
            std::locale::~locale((std::locale *)&v363);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v145);
            if (*(_DWORD *)(v145 + 600) == 7)
            {
              __print_back_trace();
              v252 = __cxa_allocate_exception(8uLL);
              void *v252 = "LOG_FATAL encountered";
              __cxa_throw(v252, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v326.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v325, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
      }
      else {
        std::string v325 = v320;
      }
      turi::general_ifstream::general_ifstream(&v363, (uint64_t)&v325);
      if (SHIBYTE(v325.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v325.__r_.__value_.__l.__data_);
      }
      if (*(_DWORD *)&v365[*(void *)(v363.__r_.__value_.__r.__words[0] - 24)])
      {
        v369.__sig = (uint64_t)&v320;
      }
      turi::skip_BOM((turi *)&v363, v148);
      memset(&v324, 0, sizeof(v324));
      for (; v140; --v140)
        turi::eol_getline(&v363, (uint64_t)&v324, v277);
      if (v139)
      {
        uint64_t v149 = 0;
        uint64_t v150 = 0;
        memset(&v369, 0, 24);
        for (; !*(_DWORD *)&v365[*(void *)(v363.__r_.__value_.__r.__words[0] - 24)]; uint64_t v150 = *(void *)v369.__opaque)
        {
          memset(&v328, 0, sizeof(v328));
          turi::eol_getline(&v363, (uint64_t)&v328, v277);
          if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v151 = &v328;
          }
          else {
            v151 = (std::string *)v328.__r_.__value_.__r.__words[0];
          }
          if ((v328.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v152 = HIBYTE(v328.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v152 = v328.__r_.__value_.__l.__size_;
          }
          turi::csv_line_tokenizer::tokenize_line(a2, (char *)v151, v152, &v369.__sig);
          if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v328.__r_.__value_.__l.__data_);
          }
          uint64_t v150 = v369.__sig;
          uint64_t v149 = *(void *)v369.__opaque;
          if (*(void *)v369.__opaque != v369.__sig) {
            break;
          }
        }
        if (!v272)
        {
          int64_t v153 = v350[0] == v350[1] ? (char *)v348[1] - (char *)v348[0] : ((char *)v350[1] - (char *)v350[0]) >> 3;
          if (0xAAAAAAAAAAAAAAABLL * ((v149 - v150) >> 3) != v153)
          {
            v226 = (int *)global_logger();
            if (v226[169] <= 4)
            {
              if (cppipc::must_cancel((cppipc *)v226)) {
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              }
              v227 = (file_logger *)global_logger();
              v228 = file_logger::start_stream(v227, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csv_to_sframe", 1165, 1);
              v229 = pthread_getspecific(*((void *)v228 + 74));
              if (v229 && *((unsigned char *)v229 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229 + 2, (uint64_t)"Unexpected number of columns found in ", 38);
              }
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v328, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
              }
              else {
                std::string v328 = v320;
              }
              uint64_t v237 = file_logger::operator<<<std::string>((uint64_t)v228, (uint64_t)&v328);
              v238 = pthread_getspecific(*(void *)(v237 + 592));
              if (v238 && *((unsigned char *)v238 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238 + 2, (uint64_t)". Skipping this file.", 21);
              }
              v239 = pthread_getspecific(*(void *)(v237 + 592));
              if (v239)
              {
                if (*((unsigned char *)v239 + 280))
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v239 + *(void *)(v239[2] - 24) + 16));
                  v240 = std::locale::use_facet((const std::locale *)&v318, MEMORY[0x263F8C108]);
                  ((void (*)(const std::locale::facet *, uint64_t))v240->__vftable[2].~facet_0)(v240, 10);
                  std::locale::~locale((std::locale *)&v318);
                  std::ostream::put();
                  std::ostream::flush();
                  file_logger::stream_flush((file_logger *)v237);
                  if (*(_DWORD *)(v237 + 600) == 7)
                  {
                    __print_back_trace();
                    v259 = __cxa_allocate_exception(8uLL);
                    void *v259 = "LOG_FATAL encountered";
                    __cxa_throw(v259, MEMORY[0x263F8C1D8], 0);
                  }
                }
              }
              if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v328.__r_.__value_.__l.__data_);
              }
            }
            v318.tv_sec = (__darwin_time_t)&v369;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
            goto LABEL_504;
          }
        }
        v328.__r_.__value_.__r.__words[0] = (std::string::size_type)&v369;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v328);
      }
      _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v362);
      if (v272) {
        turi::sarray<turi::flexible_type>::open_for_write(v362);
      }
      unint64_t v273 = (*(uint64_t (**)(unsigned char *))(*(void *)a4 + 24))(a4);
      uint64_t v269 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)&v363);
      gettimeofday(&v318, 0);
      if (!*(_DWORD *)&v365[*(void *)(v363.__r_.__value_.__r.__words[0] - 24)] && (!v354 || v352 < v354))
      {
        v161 = (void *)HIBYTE(ptr[0]);
        if (SHIBYTE(ptr[0]) < 0) {
          v161 = v343[1];
        }
        if (v161)
        {
          std::string::size_type v162 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
          if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v162 = v360.__r_.__value_.__l.__size_;
          }
          if (!v162)
          {
          }
          int v163 = *(_DWORD *)&v365[*(void *)(v363.__r_.__value_.__r.__words[0] - 24)];
          int v164 = pthread_mutex_init(&v369, 0);
          assert_msg(v164 == 0, "Mutex create error %d", v164);
          unint64_t v165 = HIBYTE(ptr[0]);
          v166 = v343;
          if (SHIBYTE(ptr[0]) < 0)
          {
            v166 = (void **)v343[0];
            unint64_t v165 = (unint64_t)v343[1];
          }
          v329 = v166;
          unint64_t v167 = v165 >> 6;
          if ((v165 & 0x3F) != 0) {
            ++v167;
          }
          unint64_t v168 = *((void *)&v345 + 1);
          *(void *)&long long v345 = v165;
          *((void *)&v345 + 1) = v167;
          v169 = (char *)malloc_type_realloc(ptr[1], 8 * v167, 0x100004000313F17uLL);
          v170 = v169;
          ptr[1] = v169;
          if ((v345 & 0x3F) != 0) {
            *(void *)&v169[8 * *((void *)&v345 + 1) - 8] &= ~(-1 << (v345 & 0x3F));
          }
          uint64_t v171 = *((void *)&v345 + 1);
          if (*((void *)&v345 + 1) > v168)
          {
            v172 = &v169[8 * v168];
            uint64_t v173 = 8 * *((void *)&v345 + 1) - 8 * v168;
            if (v173 >= 1)
            {
              bzero(v172, 8 * (((unint64_t)v173 >> 3) - ((unint64_t)v173 > 7)) + 8);
              uint64_t v171 = *((void *)&v345 + 1);
            }
          }
          if (v171 >= 1) {
            bzero(v170, 8 * (v171 - ((v171 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
          }
          int v174 = v342[2];
          int v175 = v342[59];
          unint64_t v176 = (unint64_t)v343[1];
          if (SHIBYTE(ptr[0]) >= 0) {
            v177 = (char *)v343;
          }
          else {
            v177 = (char *)v343[0];
          }
          if (SHIBYTE(ptr[0]) >= 0) {
            unint64_t v176 = HIBYTE(ptr[0]);
          }
          v178 = &v177[v176];
          if (v342[57])
          {
            if (v176)
            {
              unint64_t v179 = 0;
              char v180 = 0;
              int v181 = v342[56];
              v182 = &v177[v176];
              char v183 = 1;
              while (1)
              {
                if ((v183 & 1) == 0)
                {
                  int v192 = *v177;
                  unint64_t v193 = v179 >> 6;
                  uint64_t v194 = 1 << v179;
                  if (v180) {
                    goto LABEL_409;
                  }
                  goto LABEL_407;
                }
                do
                {
                  int v184 = *v177;
                  BOOL v185 = v184 == v181 || v184 == v175;
                  BOOL v186 = v185 || v184 == v174;
                  int v187 = v186;
                  if (v186) {
                    goto LABEL_398;
                  }
                  ++v177;
                }
                while (v177 != v178);
                v177 = v182;
LABEL_398:
                v188 = v343;
                if (SHIBYTE(ptr[0]) < 0) {
                  v188 = (void **)v343[0];
                }
                unint64_t v189 = v177 - (char *)v188;
                unint64_t v190 = v189;
                if ((v180 & 1) == 0) {
                  goto LABEL_404;
                }
                if (v179 < v189) {
                  break;
                }
                unint64_t v190 = v179;
                if (!v187) {
                  goto LABEL_441;
                }
LABEL_405:
                int v192 = *v177;
                if (!(v180 & 1 | (v192 != v181)))
                {
                  v328.__r_.__value_.__s.__data_[0] = 0;
                  if (!v328.__r_.__value_.__s.__data_[0]) {
                    goto LABEL_441;
                  }
                  char v180 = 0;
                  unint64_t v179 = (unint64_t)&v195[v190 - (void)v177];
                  char v183 = 1;
                  v177 = v195;
                  goto LABEL_413;
                }
                unint64_t v193 = v190 >> 6;
                uint64_t v194 = 1 << v190;
                unint64_t v179 = v190;
                if ((v180 & 1) != (v192 == v175))
                {
LABEL_409:
                  *((void *)ptr[1] + v193) |= v194;
                  char v180 = 1;
                  goto LABEL_410;
                }
LABEL_407:
                char v180 = 0;
                *((void *)ptr[1] + v193) &= ~v194;
LABEL_410:
                char v183 = v183 ^ 1 | (v192 != v174);
                ++v177;
                ++v179;
LABEL_413:
                if (v177 == v178) {
                  goto LABEL_441;
                }
              }
              v191 = (char *)ptr[1];
              unint64_t v190 = v179;
              do
              {
                *(void *)&v191[(v190 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v190;
                ++v190;
              }
              while (v190 < v189);
LABEL_404:
              if (!v187) {
                goto LABEL_441;
              }
              goto LABEL_405;
            }
          }
          else if (v176)
          {
            unint64_t v196 = 0;
            char v197 = 0;
            v198 = &v177[v176];
            char v199 = 1;
            do
            {
              if (v199)
              {
                if (v177 == v178)
                {
                  char v202 = 1;
                  v177 = v178;
                }
                else
                {
                  do
                  {
                    int v200 = *v177;
                    BOOL v201 = v200 == v175 || v200 == v174;
                    char v202 = !v201;
                    if (v201) {
                      goto LABEL_431;
                    }
                    ++v177;
                  }
                  while (v177 != v178);
                  v177 = v198;
                }
LABEL_431:
                v203 = v343;
                if (SHIBYTE(ptr[0]) < 0) {
                  v203 = (void **)v343[0];
                }
                unint64_t v204 = v177 - (char *)v203;
                unint64_t m = v204;
                if (v197)
                {
                  for (unint64_t m = v196; m < v204; ++m)
                    *(void *)&v170[(m >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << m;
                }
                unint64_t v196 = m;
                if (v202) {
                  break;
                }
              }
              int v206 = *v177;
              v197 ^= v199 & (v206 == v175);
              unint64_t v207 = v196 >> 6;
              uint64_t v208 = 1 << v196;
              uint64_t v209 = (v197 & 1) != 0 ? *(void *)&v170[8 * v207] | v208 : *(void *)&v170[8 * v207] & ~v208;
              *(void *)&v170[8 * v207] = v209;
              char v199 = v199 ^ 1 | (v206 != v174);
              ++v196;
              ++v177;
            }
            while (v177 != v178);
          }
LABEL_441:
          if (v163)
          {
            if (SHIBYTE(ptr[0]) < 0)
            {
              v210 = v343[1];
              if (v343[1]) {
LABEL_444:
              }
                *(void *)((char *)ptr[1] + ((((unint64_t)v210 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v210 - 1));
            }
            else
            {
              v210 = (void *)HIBYTE(ptr[0]);
              if (HIBYTE(ptr[0])) {
                goto LABEL_444;
              }
            }
          }
          if (v332.__r_.__value_.__r.__words[0])
          {
            v328.__r_.__value_.__r.__words[0] = 0;
            operator new();
          }
          turi::parallel_task_queue::join((turi::parallel_task_queue *)v346);
          if (SHIBYTE(ptr[0]) < 0)
          {
            std::string::size_type v211 = (char *)v329 - (char *)v343[0];
            if ((void *)((char *)v329 - (char *)v343[0]) < v343[1]) {
              goto LABEL_451;
            }
            *(unsigned char *)v343[0] = 0;
            v343[1] = 0;
          }
          else
          {
            std::string::size_type v211 = (char *)v329 - (char *)v343;
            if ((char *)v329 - (char *)v343 >= (unint64_t)HIBYTE(ptr[0]))
            {
              LOBYTE(v343[0]) = 0;
              HIBYTE(ptr[0]) = 0;
              goto LABEL_457;
            }
LABEL_451:
            std::string::basic_string(&v328, (const std::string *)v343, v211, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v330);
            if (SHIBYTE(ptr[0]) < 0) {
              operator delete(v343[0]);
            }
            *(_OWORD *)v343 = *(_OWORD *)&v328.__r_.__value_.__l.__data_;
            ptr[0] = (void *)v328.__r_.__value_.__r.__words[2];
          }
LABEL_457:
          turi::mutex::~mutex(&v369);
          turi::parallel_task_queue::join((turi::parallel_task_queue *)v347);
          if (!cppipc::must_cancel(v212))
          {
            if (v354)
            {
              unint64_t v213 = v354 <= v352 ? 0 : v354 - v352;
              v214 = (unint64_t *)*((void *)&v333 + 1);
              if ((void)v334 != *((void *)&v333 + 1))
              {
                unint64_t v215 = (uint64_t)(v334 - *((void *)&v333 + 1)) >> 3;
                if (v215 <= 1) {
                  unint64_t v215 = 1;
                }
                do
                {
                  unint64_t v216 = *v214;
                  if (*v214 > v213)
                  {
                    unint64_t *v214 = v213;
                    unint64_t v216 = v213;
                  }
                  v213 -= v216;
                  ++v214;
                  --v215;
                }
                while (v215);
              }
            }
            if (*((void *)&v355 + 1))
            {
              uint64_t v217 = turi::general_ifstream::get_bytes_read((turi::general_ifstream *)&v363);
              if (v217 == -1) {
                uint64_t v218 = 0;
              }
              else {
                uint64_t v218 = v217;
              }
              unint64_t v219 = ((void)v355 + v218) * v273 / *((void *)&v355 + 1);
              if (v219 >= v273) {
                unint64_t v219 = v273 - 1;
              }
              if (v351 <= v219) {
                unint64_t v220 = v219;
              }
              else {
                unint64_t v220 = v351;
              }
              unint64_t v351 = v220;
            }
            long long v221 = v335;
            long long v335 = *(_OWORD *)&v332.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v332.__r_.__value_.__r.__words[1] = v221;
            long long v222 = v336;
            long long v336 = v333;
            long long v333 = v222;
            uint64_t v223 = *((void *)&v337 + 1);
            long long v337 = v334;
            *((void *)&v334 + 1) = v223;
            char v356 = 1;
            *(void *)&long long v334 = *((void *)&v222 + 1);
            v369.__sig = 0;
            std::vector<unsigned long>::resize((uint64_t)&v333 + 8, v332.__r_.__value_.__r.__words[0], &v369);
            long long v224 = v340;
            long long v340 = v338;
            long long v338 = v224;
            uint64_t v225 = v341;
            uint64_t v341 = v339;
            uint64_t v339 = v225;
            operator new();
          }
        }
      }
      turi::parallel_task_queue::join((turi::parallel_task_queue *)v347);
      *(void *)&long long v355 = v355 + v269;
      if (v270)
      {
        if (v357)
        {
          v154 = (int *)global_logger();
          if (v154[169] <= 4)
          {
            if (cppipc::must_cancel((cppipc *)v154)) {
              goto LABEL_554;
            }
            v155 = (file_logger *)global_logger();
            v156 = file_logger::start_stream(v155, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csv_to_sframe", 1187, 1);
            uint64_t v157 = file_logger::operator<<<unsigned long>((uint64_t)v156);
            v158 = pthread_getspecific(*(void *)(v157 + 592));
            if (v158 && *((unsigned char *)v158 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158 + 2, (uint64_t)" lines failed to parse correctly", 32);
            }
            v159 = pthread_getspecific(*(void *)(v157 + 592));
            if (v159)
            {
              if (*((unsigned char *)v159 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v159 + *(void *)(v159[2] - 24) + 16));
                v160 = std::locale::use_facet((const std::locale *)&v369, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v160->__vftable[2].~facet_0)(v160, 10);
                std::locale::~locale((std::locale *)&v369);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v157);
                if (*(_DWORD *)(v157 + 600) == 7)
                {
                  __print_back_trace();
                  v254 = __cxa_allocate_exception(8uLL);
                  void *v254 = "LOG_FATAL encountered";
                  __cxa_throw(v254, MEMORY[0x263F8C1D8], 0);
                }
              }
            }
          }
        }
      }
      v230 = (int *)global_logger();
      if (v230[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v230)) {
LABEL_554:
        }
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v231 = (file_logger *)global_logger();
        v232 = file_logger::start_stream(v231, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csv_to_sframe", 1199, 1);
        v233 = pthread_getspecific(*((void *)v232 + 74));
        if (v233 && *((unsigned char *)v233 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233 + 2, (uint64_t)"Finished parsing file ", 22);
        }
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v328, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
        }
        else {
          std::string v328 = v320;
        }
        turi::sanitize_url((__n128 *)&v328, (__n128 *)&v369);
        uint64_t v234 = file_logger::operator<<<std::string>((uint64_t)v232, (uint64_t)&v369);
        v235 = pthread_getspecific(*(void *)(v234 + 592));
        if (v235)
        {
          if (*((unsigned char *)v235 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v235 + *(void *)(v235[2] - 24) + 16));
            v236 = std::locale::use_facet((const std::locale *)&v318, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v236->__vftable[2].~facet_0)(v236, 10);
            std::locale::~locale((std::locale *)&v318);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v234);
            if (*(_DWORD *)(v234 + 600) == 7)
            {
              __print_back_trace();
              v253 = __cxa_allocate_exception(8uLL);
              void *v253 = "LOG_FATAL encountered";
              __cxa_throw(v253, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
        if (v369.__opaque[15] < 0) {
          operator delete((void *)v369.__sig);
        }
        if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v328.__r_.__value_.__l.__data_);
        }
      }
      if (*((void *)&v362 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v362 + 1));
      }
LABEL_504:
      if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v324.__r_.__value_.__l.__data_);
      }
      v363.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D758EF8;
      v368[0] = &unk_26D758F20;
      if (v367 < 0) {
        operator delete(v366);
      }
      std::istream::~istream();
      boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v363.__r_.__value_.__r.__words[2]);
      MEMORY[0x22A614E30](v368);
      if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v283.__r_.__value_.__l.__data_);
      }
      v363.__r_.__value_.__r.__words[0] = (std::string::size_type)&v287;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v286, (char *)v286[1]);
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v320.__r_.__value_.__l.__data_);
      }
      uint64_t v137 = (uint64_t)&v271[1];
    }
    while (&v271[1] != v264);
  }
  v241 = (int *)global_logger();
  if (v241[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v241)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    v242 = (file_logger *)global_logger();
    v243 = file_logger::start_stream(v242, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_csvs_to_sframe", 1359, 1);
    v244 = pthread_getspecific(*((void *)v243 + 74));
    if (v244 && *((unsigned char *)v244 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244 + 2, (uint64_t)"Parsing completed. Parsed ", 26);
    }
    uint64_t v245 = file_logger::operator<<<unsigned long>((uint64_t)v243);
    v246 = pthread_getspecific(*(void *)(v245 + 592));
    if (v246 && *((unsigned char *)v246 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246 + 2, (uint64_t)" lines in ", 10);
    }
    gettimeofday((timeval *)&v363, 0);
    uint64_t v247 = file_logger::operator<<<double>(v245);
    v248 = pthread_getspecific(*(void *)(v247 + 592));
    if (v248 && *((unsigned char *)v248 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v248 + 2, (uint64_t)" secs.", 6);
    }
    v249 = pthread_getspecific(*(void *)(v247 + 592));
    if (v249)
    {
      if (*((unsigned char *)v249 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v249 + *(void *)(v249[2] - 24) + 16));
        v250 = std::locale::use_facet((const std::locale *)&v363, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v250->__vftable[2].~facet_0)(v250, 10);
        std::locale::~locale((std::locale *)&v363);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v247);
        if (*(_DWORD *)(v247 + 600) == 7)
        {
          __print_back_trace();
          v261 = __cxa_allocate_exception(8uLL);
          void *v261 = "LOG_FATAL encountered";
          __cxa_throw(v261, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (a4[288] && a4[289]) {
    (*(void (**)(unsigned char *))(*(void *)a4 + 40))(a4);
  }
  if (v321)
  {
    v322 = (std::string *)v321;
    operator delete(v321);
  }
LABEL_545:
  if (v303.__r_.__value_.__r.__words[0])
  {
    v303.__r_.__value_.__l.__size_ = v303.__r_.__value_.__r.__words[0];
    operator delete(v303.__r_.__value_.__l.__data_);
  }
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v301 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
LABEL_548:
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v313;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
  v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v316;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v317, (char *)v317[1]);
}

void sub_2240D0A70()
{
}

void sub_2240D0B38(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x2240D0B30);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void turi::csv_file_handling_options::~csv_file_handling_options(char **this)
{
  uint64_t v2 = (void **)(this + 4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 1), this[2]);
}

void turi::anonymous namespace'::parallel_csv_parser::~parallel_csv_parser(void **this)
{
  if (*((char *)this + 759) < 0) {
    operator delete(this[92]);
  }
  uint64_t v2 = this[79];
  if (v2)
  {
    this[80] = v2;
    operator delete(v2);
  }
  unint64_t v3 = this[76];
  if (v3)
  {
    this[77] = v3;
    operator delete(v3);
  }
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)(this + 52));
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)(this + 28));
  free(this[25]);
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  uint64_t v6 = this + 19;
  std::vector<turi::csv_line_tokenizer>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = this + 16;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = this + 13;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = this[10];
  if (v4)
  {
    this[11] = v4;
    operator delete(v4);
  }
  uint64_t v6 = this + 7;
  std::vector<std::vector<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  unsigned __int8 v5 = this[4];
  if (v5)
  {
    this[5] = v5;
    operator delete(v5);
  }
  uint64_t v6 = this + 1;
  std::vector<std::vector<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void turi::anonymous namespace'::csv_info::~csv_info(turi::_anonymous_namespace_::csv_info *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *std::vector<turi::flex_type_enum>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2240D0D68(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

turi::csv_line_tokenizer *turi::csv_line_tokenizer::csv_line_tokenizer(turi::csv_line_tokenizer *this, const turi::csv_line_tokenizer *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  int v6 = *((_DWORD *)a2 + 14);
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 14) = v6;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 64), *((long long **)a2 + 8), *((long long **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3));
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 88, (uint64_t)a2 + 88);
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 128, (uint64_t)a2 + 128);
  *((unsigned char *)this + 168) = *((unsigned char *)a2 + 168);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 11);
    *((void *)this + 24) = *((void *)a2 + 24);
    *((_OWORD *)this + 11) = v7;
  }
  *((void *)this + 25) = *((void *)a2 + 25);
  if (*((char *)a2 + 231) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 208), *((const std::string::value_type **)a2 + 26), *((void *)a2 + 27));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 13);
    *((void *)this + 28) = *((void *)a2 + 28);
    *((_OWORD *)this + 13) = v8;
  }
  unsigned __int8 v9 = (std::string *)((char *)this + 232);
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 29), *((void *)a2 + 30));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 232);
    *((void *)this + 31) = *((void *)a2 + 31);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = *((void *)a2 + 33);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((void *)this + 33) = v11;
  uint64_t v12 = *((void *)a2 + 34);
  *((void *)this + 34) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = *((_DWORD *)a2 + 70);
  *(_DWORD *)((char *)this + 283) = *(_DWORD *)((char *)a2 + 283);
  *((_DWORD *)this + 70) = v13;
  return this;
}

void sub_2240D0F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2[231] < 0) {
    operator delete(*v8);
  }
  if (v2[199] < 0) {
    operator delete(*v7);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v2[55] < 0) {
    operator delete(*v4);
  }
  if (v2[31] < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::vector<turi::flexible_type>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2240D108C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<turi::csv_line_tokenizer>::vector(void *a1, unint64_t a2, const turi::csv_line_tokenizer *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::csv_line_tokenizer>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (turi::csv_line_tokenizer *)a1[1];
    uint64_t v7 = 9 * a2;
    long long v8 = (char *)v6 + 288 * a2;
    uint64_t v9 = 32 * v7;
    do
    {
      turi::csv_line_tokenizer::csv_line_tokenizer(v6, a3);
      uint64_t v6 = (turi::csv_line_tokenizer *)((char *)v6 + 288);
      v9 -= 288;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_2240D11A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<turi::csv_line_tokenizer>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::csv_line_tokenizer>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[288 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::csv_line_tokenizer>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(288 * a2);
}

void std::vector<turi::csv_line_tokenizer>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    size_t v5 = v2;
    if (v4 != v2)
    {
      do
        turi::csv_line_tokenizer::~csv_line_tokenizer((turi::csv_line_tokenizer *)(v4 - 288));
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::csv_line_tokenizer::~csv_line_tokenizer(turi::csv_line_tokenizer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 88);
  unint64_t v3 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t std::pair<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t turi::anonymous namespace'::parallel_csv_parser::fill_buffer(turi::_anonymous_namespace_::parallel_csv_parser *this, turi::general_ifstream *a2)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 32)) {
    goto LABEL_7;
  }
  if (*((char *)this + 199) < 0) {
    uint64_t v4 = *((void *)this + 23);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)this + 199);
  }
  unint64_t v5 = turi::SFRAME_CSV_PARSER_READ_SIZE;
  std::string::resize((std::string *)((char *)this + 176), turi::SFRAME_CSV_PARSER_READ_SIZE + v4, 0);
  std::istream::read();
  unint64_t v6 = *((void *)a2 + 1);
  if (v6 < v5)
  {
    std::string::resize((std::string *)((char *)this + 176), v6 + v4, 0);
LABEL_7:
    return 0;
  }
  return 1;
}

void turi::anonymous namespace'::parallel_csv_parser::add_line_terminator_to_buffer(turi::_anonymous_namespace_::parallel_csv_parser *this)
{
  uint64_t v2 = (std::string *)((char *)this + 176);
  uint64_t v3 = *((unsigned __int8 *)this + 199);
  if (!*((unsigned char *)this + 760))
  {
    if ((v3 & 0x80) != 0) {
      unint64_t v5 = *((void *)this + 23);
    }
    else {
      unint64_t v5 = *((unsigned __int8 *)this + 199);
    }
    uint64_t v11 = *((unsigned __int8 *)this + 759);
    if (*((char *)this + 759) < 0) {
      unint64_t v12 = *((void *)this + 93);
    }
    else {
      unint64_t v12 = *((unsigned __int8 *)this + 759);
    }
    if (v5 < v12) {
      return;
    }
    if ((v3 & 0x80) != 0)
    {
      uint64_t v3 = *((void *)this + 23);
      if ((v11 & 0x80) == 0) {
        goto LABEL_25;
      }
    }
    else if ((v11 & 0x80) == 0)
    {
      goto LABEL_25;
    }
    uint64_t v11 = *((void *)this + 93);
LABEL_25:
    std::string::basic_string(&__p, v2, v3 - v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v30);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = *((unsigned __int8 *)this + 759);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *((void *)this + 93);
    }
    if (size == v14)
    {
      if (v15 >= 0) {
        std::string v16 = (unsigned __int8 *)this + 736;
      }
      else {
        std::string v16 = (unsigned __int8 *)*((void *)this + 92);
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        uint64_t v27 = (void *)__p.__r_.__value_.__r.__words[0];
        int v28 = memcmp(__p.__r_.__value_.__l.__data_, v16, __p.__r_.__value_.__l.__size_);
        operator delete(v27);
        if (!v28) {
          return;
        }
LABEL_44:
        int v24 = *((char *)this + 759);
        if (v24 >= 0) {
          uint64_t v25 = (char *)this + 736;
        }
        else {
          uint64_t v25 = (const std::string::value_type *)*((void *)this + 92);
        }
        if (v24 >= 0) {
          std::string::size_type v26 = *((unsigned __int8 *)this + 759);
        }
        else {
          std::string::size_type v26 = *((void *)this + 93);
        }
        std::string::append(v2, v25, v26);
        return;
      }
      if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
        return;
      }
      uint64_t v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      p_p = &__p;
      do
      {
        int v20 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v19 = v20;
        int v21 = *v16++;
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_43:
        if (!v22) {
          return;
        }
        goto LABEL_44;
      }
    }
    else
    {
      BOOL v22 = 1;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_43;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v22) {
      return;
    }
    goto LABEL_44;
  }
  if ((v3 & 0x80) != 0) {
    uint64_t v4 = *((void *)this + 23);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)this + 199);
  }
  uint64_t v6 = v4 - 1;
  if ((v3 & 0x80) != 0)
  {
    if (*(unsigned char *)(v2->__r_.__value_.__r.__words[0] + v6) == 10) {
      return;
    }
    uint64_t v7 = *((void *)this + 23);
  }
  else
  {
    if (v2->__r_.__value_.__s.__data_[v6] == 10) {
      return;
    }
    uint64_t v7 = *((unsigned __int8 *)this + 199);
  }
  uint64_t v8 = v7 - 1;
  uint64_t v9 = (char *)this + 176;
  if ((v3 & 0x80) != 0) {
    uint64_t v9 = (char *)v2->__r_.__value_.__r.__words[0];
  }
  if (v9[v8] != 13)
  {
    long long v10 = (std::string *)((char *)this + 176);
    std::string::push_back(v10, 10);
  }
}

char *turi::anonymous namespace'::parallel_csv_parser::advance_past_newline(turi::_anonymous_namespace_::parallel_csv_parser *this, char *a2, char *a3, BOOL *a4)
{
  if (*((unsigned char *)this + 760))
  {
    if (a2 < a3)
    {
      uint64_t v4 = a3 - a2;
      unint64_t v5 = a2 + 1;
      while (1)
      {
        int v6 = *(v5 - 1);
        if (v6 == 13) {
          break;
        }
        if (v6 == 10) {
          goto LABEL_29;
        }
        ++v5;
        if (!--v4) {
          goto LABEL_23;
        }
      }
      if (v5 < a3 && *v5 == 10)
      {
        *a4 = 1;
        return v5 + 1;
      }
LABEL_29:
      *a4 = 1;
      return v5;
    }
LABEL_23:
    *a4 = 0;
    return a3;
  }
  if (*((char *)this + 759) < 0)
  {
    if (!*((void *)this + 93)) {
      goto LABEL_23;
    }
  }
  else if (!*((unsigned char *)this + 759))
  {
    goto LABEL_23;
  }
LABEL_12:
  uint64_t v7 = *((unsigned __int8 *)this + 759);
  if ((*((unsigned char *)this + 759) & 0x80) != 0) {
    uint64_t v7 = *((void *)this + 93);
  }
  if (&a2[v7] > a3) {
    goto LABEL_23;
  }
  unint64_t v8 = 0;
  while (1)
  {
    unint64_t v9 = *((unsigned __int8 *)this + 759);
    if ((*((unsigned char *)this + 759) & 0x80) != 0) {
      unint64_t v9 = *((void *)this + 93);
    }
    if (v8 >= v9) {
      break;
    }
    long long v10 = (char *)this + 736;
    if ((*((unsigned char *)this + 759) & 0x80) != 0) {
      long long v10 = (char *)*((void *)this + 92);
    }
    int v11 = a2[v8];
    int v12 = v10[v8++];
    if (v11 != v12)
    {
      ++a2;
      goto LABEL_12;
    }
  }
  *a4 = 1;
  if (*((char *)this + 759) < 0) {
    uint64_t v13 = *((void *)this + 93);
  }
  else {
    uint64_t v13 = *((unsigned __int8 *)this + 759);
  }
  return &a2[v13];
}

uint64_t boost::detail::function::functor_manager<turi::anonymous namespace'::parallel_csv_parser::parallel_parse(BOOL)::{lambda(void)#1}>::manage(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t result = *(void *)a2;
      if (*(void *)a2) {
        uint64_t result = MEMORY[0x22A614FA0](result, 0x10A0C409A4ED104);
      }
      goto LABEL_9;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12_GLOBAL__N_119parallel_csv_parser14parallel_parseEbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12_GLOBAL__N_119parallel_csv_parser14parallel_parseEbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<turi::anonymous namespace'::parallel_csv_parser::parallel_parse(BOOL)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = *(uint64_t **)(*a1 + 16);
  uint64_t v2 = *(void *)(*a1 + 24);
  if (*((char *)v3 + 199) < 0)
  {
    unint64_t v6 = *v3;
    unint64_t v4 = v3[22];
    unint64_t v5 = v3[23];
  }
  else
  {
    unint64_t v4 = (unint64_t)(v3 + 22);
    unint64_t v5 = *((unsigned __int8 *)v3 + 199);
    unint64_t v6 = *v3;
  }
  uint64_t v7 = v5 / v6 * v2;
  unint64_t v8 = (char *)(v4 + v7);
  unint64_t v9 = (char *)(v4 + v5);
  if (v6 - 1 == v2) {
    long long v10 = (char *)(v4 + v5);
  }
  else {
    long long v10 = (char *)(v4 + v5 / v6 + v7);
  }
  if (!v2) {
    goto LABEL_10;
  }
  if (!*((unsigned char *)v3 + 760))
  {
    if (*((char *)v3 + 759) < 0)
    {
      unint64_t v24 = v3[93];
      if (v24 <= 1 || v7 < (int)v24 - 1) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v24 = *((unsigned __int8 *)v3 + 759);
      if (v24 <= 1 || v7 < (v24 - 1)) {
        goto LABEL_9;
      }
    }
    unint64_t v8 = &v8[-v24 + 1];
  }
LABEL_9:
  BOOL v26 = 0;
  if (!v26) {
    goto LABEL_47;
  }
LABEL_10:
  if (*((unsigned char *)v3 + 760)) {
    goto LABEL_11;
  }
  if ((*((char *)v3 + 759) & 0x80000000) == 0)
  {
    unint64_t v20 = *((unsigned __int8 *)v3 + 759);
    if (v20 < 2 || (uint64_t)&v10[-v4] < (uint64_t)v20) {
      goto LABEL_11;
    }
LABEL_56:
    long long v10 = &v10[-v20 + 1];
    goto LABEL_11;
  }
  unint64_t v20 = v3[93];
  if (v20 > 1 && (uint64_t)&v10[-v4] >= (int)v20) {
    goto LABEL_56;
  }
LABEL_11:
  BOOL v25 = 0;
  int v12 = v11;
  if (*((char *)v3 + 759) < 0)
  {
    if (v3[93])
    {
LABEL_13:
      if (v8 < v11)
      {
        uint64_t v13 = v8;
        while (*((unsigned char *)v3 + 760))
        {
          int v14 = *v8;
          if (v14 != 13 && v14 != 10) {
            goto LABEL_31;
          }
LABEL_21:
          if ((*(void *)(v3[25] + (((unint64_t)&v8[-v4] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 - v4))) {
            goto LABEL_31;
          }
          unint64_t v8 = v13;
LABEL_32:
          if (v8 >= v12) {
            goto LABEL_46;
          }
        }
        if (*((char *)v3 + 759) < 0)
        {
          int64_t v16 = v3[93];
          if (v16 && v12 - v8 >= (int)v16)
          {
            uint64_t v18 = (unsigned __int8 *)v3[92];
            goto LABEL_35;
          }
        }
        else
        {
          int64_t v16 = *((unsigned __int8 *)v3 + 759);
          if (*((unsigned char *)v3 + 759)) {
            BOOL v17 = v12 - v8 < v16;
          }
          else {
            BOOL v17 = 1;
          }
          uint64_t v18 = (unsigned __int8 *)(v3 + 92);
          if (!v17)
          {
LABEL_35:
            int v19 = v8;
            while (*v18 == *v19)
            {
              ++v19;
              ++v18;
              if (!--v16) {
                goto LABEL_21;
              }
            }
          }
        }
LABEL_31:
        ++v8;
        goto LABEL_32;
      }
      goto LABEL_45;
    }
  }
  else if (*((unsigned char *)v3 + 759))
  {
    goto LABEL_13;
  }
LABEL_45:
  uint64_t v13 = v8;
LABEL_46:
  unint64_t v8 = v13;
LABEL_47:
  int v21 = *(pthread_mutex_t **)v1;
  pthread_mutex_lock(*(pthread_mutex_t **)v1);
  BOOL v22 = *(char ***)(v1 + 8);
  if (*v22 < v8) {
    *BOOL v22 = v8;
  }
  return pthread_mutex_unlock(v21);
}

char *turi::anonymous namespace'::parallel_csv_parser::advance_past_newline_with_quote_parity(turi::_anonymous_namespace_::parallel_csv_parser *this, unint64_t a2, char *a3, char *a4, BOOL *a5)
{
  unint64_t v8 = ~a2;
  while (1)
  {
    *a5 = 0;
    if (a3 == a4) {
      break;
    }
    if (((*(void *)(*((void *)this + 25) + (((unint64_t)&a3[v8] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a3 + v8)) & 1) == 0
      || !*a5)
    {
      return a3;
    }
  }
  return a4;
}

void turi::anonymous namespace'::parallel_csv_parser::parse_line(turi::_anonymous_namespace_::parallel_csv_parser *this, char *a2, char *a3, uint64_t a4)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  int v66 = *(unsigned __int8 *)(*((void *)this + 19) + 288 * a4 + 56);
  unint64_t v5 = *(void *)(*((void *)this + 4) + 8 * a4);
  unint64_t v6 = (uint64_t *)(*((void *)this + 1) + 24 * a4);
  uint64_t v7 = *v6;
  if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3))
  {
    std::vector<std::vector<turi::flexible_type>>::resize(v6, v5 + 1);
    uint64_t v7 = *(void *)(*((void *)this + 1) + 24 * a4);
  }
  unint64_t v8 = (uint64_t *)(v7 + 24 * v5);
  std::vector<turi::flexible_type>::resize(v8, *((void *)this + 77) - *((void *)this + 76));
  uint64_t v9 = *((void *)this + 76);
  if (*((void *)this + 77) != v9)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *v8;
      uint64_t v13 = *v8 + v10;
      int v14 = *(unsigned __int8 *)(v9 + v11);
      if (*(unsigned __int8 *)(v13 + 12) != v14)
      {
        switch(*(unsigned char *)(v13 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v13;
              if (!*(void *)v13) {
                goto LABEL_38;
              }
              if (*((char *)v15 + 31) < 0) {
                operator delete((void *)v15[1]);
              }
              atomic_ullong *volatile v16 = v15;
              uint64_t v17 = 0x1012C404EF22A49;
              goto LABEL_37;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *(atomic_ullong *volatile *)v13;
              if (!*(void *)v13) {
                goto LABEL_38;
              }
              BOOL v25 = (void *)v24[1];
              if (v25)
              {
                v24[2] = (atomic_ullong)v25;
                operator delete(v25);
              }
              atomic_ullong *volatile v16 = v24;
              uint64_t v17 = 0x1080C409938AC02;
              goto LABEL_37;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v13;
              if (!*(void *)v13) {
                goto LABEL_38;
              }
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_32;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v13;
              if (!*(void *)v13) {
                goto LABEL_38;
              }
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_32:
              atomic_ullong *volatile v16 = v18;
              uint64_t v17 = 0x1020C405E66F15BLL;
              goto LABEL_37;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)v13;
              if (!*(void *)v13) {
                goto LABEL_38;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v26 + 2);
              atomic_ullong *volatile v16 = v26;
              unsigned int v23 = -235920773;
              goto LABEL_36;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v13;
              if (*(void *)v13)
              {
                unint64_t v20 = (void *)v19[6];
                if (v20)
                {
                  v19[7] = (atomic_ullong)v20;
                  operator delete(v20);
                }
                int v21 = (void *)v19[3];
                if (v21)
                {
                  v19[4] = (atomic_ullong)v21;
                  operator delete(v21);
                }
                BOOL v22 = (std::__shared_weak_count *)v19[2];
                if (v22) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                }
                atomic_ullong *volatile v16 = v19;
                unsigned int v23 = 2071181815;
LABEL_36:
                uint64_t v17 = v23 | 0x1030C4000000000;
LABEL_37:
                MEMORY[0x22A614FA0](v16, v17);
              }
LABEL_38:
              *(void *)uint64_t v13 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v27 = v12 + v10;
        *(void *)uint64_t v27 = 0;
        *(_DWORD *)(v27 + 8) = 0;
        *(unsigned char *)(v13 + 12) = v14;
        switch(v14)
        {
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            *(void *)uint64_t v13 = 0x1900000000000000;
            *(_DWORD *)(v27 + 8) = 0;
            break;
          case 8:
            operator new();
          case 9:
            operator new();
          default:
            break;
        }
      }
      ++v11;
      uint64_t v9 = *((void *)this + 76);
      v10 += 16;
    }
    while (v11 < *((void *)this + 77) - v9);
  }
  int v28 = (void *)((char *)this + 632);
  if (*((void *)this + 79) == *((void *)this + 80)) {
    unint64_t v29 = 0;
  }
  else {
    unint64_t v29 = (void *)((char *)this + 632);
  }
  size_t v30 = a3 - a2;
  unint64_t v31 = turi::csv_line_tokenizer::tokenize_line((unsigned __int8 *)(*((void *)this + 19) + 288 * a4), a2, a3 - a2, (unint64_t *)v8, 1, v29);
  uint64_t v32 = *((void *)this + 80);
  if (*v28 == v32) {
    uint64_t v33 = *((void *)this + 77) - *((void *)this + 76);
  }
  else {
    uint64_t v33 = (v32 - *v28) >> 3;
  }
  if (v31 == v33)
  {
    ++*(void *)(*((void *)this + 4) + 8 * a4);
    return;
  }
  std::string::basic_string[abi:ne180100](&__str, a2, v30);
  MEMORY[0x22A614D20](&v79);
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0x4000;
  std::locale::locale((std::locale *)&__dst.__r_.__value_.__r.__words[1], (const std::locale *)&v79);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&__str, (std::locale *)&__dst);
  std::locale::~locale((std::locale *)&__dst.__r_.__value_.__r.__words[1]);
  std::locale::~locale((std::locale *)&v79);
  char v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
      return;
    }
    p_str = &__str;
LABEL_62:
    if (p_str->__r_.__value_.__s.__data_[0] == v66) {
      goto LABEL_99;
    }
    if (*((unsigned char *)this + 729))
    {
      *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + 5) = 0x200000000000000;
      v79.__r_.__value_.__r.__words[0] = 0;
      operator new();
    }
    if (!*((unsigned char *)this + 728))
    {
      uint64_t last_parse_error_diagnosis = turi::csv_line_tokenizer::get_last_parse_error_diagnosis((turi::csv_line_tokenizer *)(*((void *)this + 19) + 288 * a4));
      uint64_t v57 = *(unsigned __int8 *)(last_parse_error_diagnosis + 23);
      if ((v57 & 0x80u) != 0) {
        uint64_t v57 = *(void *)(last_parse_error_diagnosis + 8);
      }
      if (v57 && *((int *)global_logger() + 169) <= 4)
      {
        unint64_t v62 = log_stream_dispatch<true>::exec((cppipc *)4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_line", 562, 1);
        uint64_t v63 = turi::csv_line_tokenizer::get_last_parse_error_diagnosis((turi::csv_line_tokenizer *)(*((void *)this + 19)
                                                                                                  + 288 * a4));
        if (*(char *)(v63 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
        }
        else
        {
          long long v64 = *(_OWORD *)v63;
          v70.__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v64;
        }
        uint64_t v65 = file_logger::operator<<<std::string>((uint64_t)v62, (uint64_t)&v70);
        file_logger::operator<<(v65, (void (*)(unsigned char *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
      }
      std::string::basic_string[abi:ne180100](&__dst, a2, v30);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0 && __dst.__r_.__value_.__l.__size_ >= 0x101)
      {
        std::string::size_type v58 = std::string::basic_string(&v79, &__dst, 0, 0x100uLL, (std::allocator<char> *)&v76);
        atomic_ullong *volatile v59 = std::string::append(v58, "...");
        std::string::size_type v60 = v59->__r_.__value_.__r.__words[0];
        v77[0] = (void *)v59->__r_.__value_.__l.__size_;
        *(void **)((char *)v77 + 7) = *(void **)((char *)&v59->__r_.__value_.__r.__words[1] + 7);
        char v61 = HIBYTE(v59->__r_.__value_.__r.__words[2]);
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        __dst.__r_.__value_.__r.__words[0] = v60;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v77[0];
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v77 + 7);
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v61;
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
      }
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    }
    if (*((void *)this + 90) <= 9uLL)
    {
      uint64_t v36 = turi::csv_line_tokenizer::get_last_parse_error_diagnosis((turi::csv_line_tokenizer *)(*((void *)this + 19)
                                                                                                + 288 * a4));
      uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
      if ((v37 & 0x80u) != 0) {
        uint64_t v37 = *(void *)(v36 + 8);
      }
      if (v37)
      {
        if (*((int *)global_logger() + 169) > 4) {
          goto LABEL_98;
        }
        long long v38 = log_stream_dispatch<true>::exec((cppipc *)4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_line", 550, 1);
        uint64_t v39 = turi::csv_line_tokenizer::get_last_parse_error_diagnosis((turi::csv_line_tokenizer *)(*((void *)this + 19)
                                                                                                  + 288 * a4));
        if (*(char *)(v39 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v39, *(void *)(v39 + 8));
        }
        else
        {
          long long v40 = *(_OWORD *)v39;
          v74.__r_.__value_.__r.__words[2] = *(void *)(v39 + 16);
          *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v40;
        }
        uint64_t v55 = file_logger::operator<<<std::string>((uint64_t)v38, (uint64_t)&v74);
        file_logger::operator<<(v55, (void (*)(unsigned char *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_98;
        }
        size_t v54 = (void *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::basic_string[abi:ne180100](&__dst, a2, v30);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0 && __dst.__r_.__value_.__l.__size_ >= 0x101)
        {
          uint64_t v41 = std::string::basic_string(&v79, &__dst, 0, 0x100uLL, (std::allocator<char> *)&v76);
          uint64_t v42 = std::string::append(v41, "...");
          std::string::size_type v43 = v42->__r_.__value_.__r.__words[0];
          v77[0] = (void *)v42->__r_.__value_.__l.__size_;
          *(void **)((char *)v77 + 7) = *(void **)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
          char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          __dst.__r_.__value_.__r.__words[0] = v43;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v77[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v77 + 7);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v44;
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
        }
        if (*((int *)global_logger() + 169) <= 4)
        {
          uint64_t v45 = log_stream_dispatch<true>::exec((cppipc *)4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/parallel_csv_parser.cpp", "parse_line", 555, 1);
          uint64_t v46 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v77, "Unable to parse line \"");
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          }
          uint64_t v49 = std::string::append(v46, (const std::string::value_type *)p_dst, size);
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v79.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          atomic_ullong *volatile v51 = std::string::append(&v79, "\"");
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          std::string::size_type v72 = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          uint64_t v53 = file_logger::operator<<<std::string>((uint64_t)v45, (uint64_t)__p);
          file_logger::operator<<(v53, (void (*)(unsigned char *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
          if (SHIBYTE(v72) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          if (v78 < 0) {
            operator delete(v77[0]);
          }
        }
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_98;
        }
        size_t v54 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      operator delete(v54);
    }
LABEL_98:
    atomic_fetch_add((atomic_ullong *volatile)this + 90, 1uLL);
    char v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_99:
    if ((v34 & 0x80) == 0) {
      return;
    }
    goto LABEL_100;
  }
  if (__str.__r_.__value_.__l.__size_)
  {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_62;
  }
LABEL_100:
  operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_2240D2A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<turi::anonymous namespace'::parallel_csv_parser::start_background_write(turi::sframe &,turi::sarray<turi::flexible_type> &,unsigned long)::{lambda(void)#1}>::manage(uint64_t result, _WORD *a2, int a3)
{
  unint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t result = *(void *)a2;
      if (*(void *)a2) {
        uint64_t result = MEMORY[0x22A614FA0](result, 0x1020C405E66F15BLL);
      }
      goto LABEL_9;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12_GLOBAL__N_119parallel_csv_parser22start_background_writeERNS_6sframeER"
                                        "NS_6sarrayINS_13flexible_typeEEEmEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12_GLOBAL__N_119parallel_csv_parser22start_background_writeERNS_6sframeERNS_6sarrayINS_13flexible_typeEEEmEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<turi::anonymous namespace'::parallel_csv_parser::start_background_write(turi::sframe &,turi::sarray<turi::flexible_type> &,unsigned long)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(*a1 + 16);
  uint64_t v14 = *a1;
  (*(void (**)(void *__return_ptr))(**(void **)(*a1 + 8) + 32))(v30);
  uint64_t v2 = *(void *)(v1 + 56);
  if (*(void *)(v1 + 64) != v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + v3);
      uint64_t v6 = *(void *)(*(void *)(v1 + 80) + 8 * v4);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)v30);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)v31);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)v32);
      std::copy[abi:ne180100]<std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(v5, v5 + 24 * v6, (uint64_t)v24, (uint64_t)v27);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v29);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v28);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v27);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v26);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v25);
      std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v24);
      atomic_fetch_add((atomic_ullong *volatile)(v1 + 664), *(void *)(*(void *)(v1 + 80) + 8 * v4++));
      uint64_t v2 = *(void *)(v1 + 56);
      v3 += 24;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v1 + 64) - v2) >> 3));
  }
  if (*(unsigned char *)(v1 + 729))
  {
    (*(void (**)(void *__return_ptr))(**(void **)(v14 + 24) + 32))(v21);
    unint64_t v8 = *(uint64_t **)(v1 + 128);
    for (uint64_t i = *(uint64_t **)(v1 + 136); v8 != i; v8 += 3)
    {
      uint64_t v9 = *v8;
      uint64_t v10 = v8[1];
      std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v21);
      std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v22);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v23);
      std::copy[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(v9, v10, (uint64_t)v15, (uint64_t)v18);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v20);
      std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v19);
      std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v18);
      std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v17);
      std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v16);
      std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v15);
      uint64_t v11 = *v8;
      uint64_t v12 = v8[1];
      if (v12 != *v8)
      {
        do
        {
          v12 -= 16;
          std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(v8 + 2), v12);
        }
        while (v12 != v11);
      }
      v8[1] = v11;
    }
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v23);
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v22);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v21);
  }
  *(unsigned char *)(v1 + 712) = 0;
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v32);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v31);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v30);
}

void sub_2240D3370(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)(v1 - 128));
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100]((void *)(v1 - 160));
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100]((void *)(v1 - 192));
  _Unwind_Resume(a1);
}

void *std::copy[abi:ne180100]<std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v18[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v10, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v11, a3 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v9);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v10);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)v11);
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v16, &v12);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a4, (uint64_t)v13);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a4 + 32, (uint64_t)v14);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a4 + 64, (uint64_t)v15);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v10);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v9);
}

void sub_2240D3598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v9 - 184));
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a9);
  _Unwind_Resume(a1);
}

void *std::copy[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v18[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v10, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v11, a3 + 64);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v9);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v10);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)v11);
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v16, &v12);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a4, (uint64_t)v13);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a4 + 32, (uint64_t)v14);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a4 + 64, (uint64_t)v15);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v10);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v9);
}

void sub_2240D3750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v9 - 184));
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a9);
  _Unwind_Resume(a1);
}

void *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v11[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v10, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v11, a3 + 64);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>(a1, a2, (uint64_t)v9, a4);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v10);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v9);
}

void sub_2240D3860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::vector<turi::flexible_type> *>,std::__wrap_iter<std::vector<turi::flexible_type> *>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v28[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v20, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v21, a3 + 64);
  std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>((uint64_t)v19, (uint64_t)v22);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v22, &v25);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v24);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v23);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v22);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v19);
  uint64_t v9 = v25;
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v14, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v15, a3 + 64);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v26);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v27);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v28);
  std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>((uint64_t)v13, (uint64_t)v10, (uint64_t)v16);
  std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v9, (uint64_t)v16);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v28);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v27);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v26);
}

void sub_2240D3A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::flexible_type> *,std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v5);
      v5 += 24;
    }
    while (v5 != a2);
    uint64_t v5 = a2;
  }
  uint64_t v10 = v5;
  return std::pair<std::vector<turi::flexible_type> *,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<std::vector<turi::flexible_type> *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v10, a3);
}

void *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v11[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v10, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v11, a3 + 64);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>(a1, a2, (uint64_t)v9, a4);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v10);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v9);
}

void sub_2240D3C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v28[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v19, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v20, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v21, a3 + 64);
  std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>((uint64_t)v19, (uint64_t)v22);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>(a1, a2, (uint64_t)v22, &v25);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v24);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v23);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v22);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v19);
  uint64_t v9 = v25;
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v14, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v15, a3 + 64);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v26);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v27);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v28);
  std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>((uint64_t)v13, (uint64_t)v10, (uint64_t)v16);
  std::pair<turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<turi::flexible_type *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v9, (uint64_t)v16);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v18);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v17);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v28);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v27);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v26);
}

void sub_2240D3E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v5);
      v5 += 16;
    }
    while (v5 != a2);
    uint64_t v5 = a2;
  }
  uint64_t v10 = v5;
  return std::pair<turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<turi::flexible_type *,std::function<void ()(turi::sframe_rows const&)>,0>(a4, &v10, a3);
}

void *std::__unwrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>,0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v5, a1);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v6, a1 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v7, a1 + 64);
  std::__unwrap_iter_impl<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__unwrap[abi:ne180100]((uint64_t)v5, a2);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v6);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v5);
}

void sub_2240D3FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v10);
    std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](&a10);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__rewrap_iter[abi:ne180100]<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,std::function<void ()(turi::sframe_rows const&)>,std::__unwrap_iter_impl<std::function<void ()(turi::sframe_rows const&)>,false>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v12[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v10, a1);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v11, a1 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v12, a1 + 64);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100]((uint64_t)v8, a2 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)v9, a2 + 64);
  std::__unwrap_iter_impl<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__rewrap[abi:ne180100]((uint64_t)v7, a3);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v11);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v10);
}

void *std::pair<turi::flexible_type *,turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::pair[abi:ne180100]<turi::flexible_type *,std::function<void ()(turi::sframe_rows const&)>,0>(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 5);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](v5, a3 + 32);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 9), a3 + 64);
  return a1;
}

uint64_t std::__unwrap_iter_impl<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__unwrap[abi:ne180100]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a2, a1);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a1 + 64);
}

uint64_t std::__unwrap_iter_impl<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>,false>::__rewrap[abi:ne180100]@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a2, a1);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a2 + 32, a1 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a1 + 64);
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x48uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

BOOL std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *a1, void *a2, void *a3)
{
  uint64_t v11 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](&v11);
    if (v5 == result) {
      break;
    }
    uint64_t v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(a1, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  return result;
}

void sub_2240D443C(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_2240D4458(_Unwind_Exception *a1)
{
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  std::string::value_type v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      std::string::value_type v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      atomic_ullong *volatile v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v14);
    }
    else {
      atomic_ullong *volatile v15 = 0;
    }
    atomic_ullong *volatile v18 = &v15[8 * v12];
    atomic_ullong *volatile v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    int v21 = v18;
    do
    {
      *(void *)int v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    BOOL v22 = &v15[8 * v14];
    unsigned int v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

std::string *OUTLINED_FUNCTION_5_3(uint64_t a1, uint64_t a2, const std::string::value_type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::string *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return std::string::insert((std::string *)&a16, 0, a3);
}

void turi::rolling_aggregate::rolling_apply(uint64_t a1, std::locale::__imp *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  unint64_t v32 = a5;
  uint64_t v5 = a4 - a3;
  if (a4 >= a3)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t type = turi::sarray<turi::flexible_type>::get_type(a1);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, type))
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = turi::sarray<turi::flexible_type>::get_type(a1);
      atomic_ullong *volatile v15 = (cppipc *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 112))(v13, v14);
      if (v5 >= 0) {
        unint64_t v16 = v5;
      }
      else {
        unint64_t v16 = -v5;
      }
      if (a4 > -1 && a3 < 0) {
        unint64_t v16 = v5;
      }
      unint64_t v18 = v16 + 1;
      unint64_t v31 = v16 + 1;
      if (v16 < 0xFFFFFFFF)
      {
        BOOL v30 = a5 != 0;
        if (v18 < a5)
        {
          if (a5 != -1)
          {
            atomic_ullong *volatile v15 = (cppipc *)global_logger();
            if (*((int *)v15 + 169) <= 4)
            {
              if (cppipc::must_cancel(v15)) {
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              }
              atomic_ullong *volatile v19 = (file_logger *)global_logger();
              started = file_logger::start_stream(v19, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/rolling_aggregate.cpp", "rolling_apply", 59, 1);
              int v21 = pthread_getspecific(*((void *)started + 74));
              if (v21 && *((unsigned char *)v21 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)"Warning: min_observations (", 27);
              }
              uint64_t v22 = file_logger::operator<<<unsigned long>((uint64_t)started);
              unsigned int v23 = pthread_getspecific(*(void *)(v22 + 592));
              if (v23 && *((unsigned char *)v23 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)") larger than window size (", 27);
              }
              uint64_t v24 = file_logger::operator<<<unsigned long>(v22);
              uint64_t v25 = pthread_getspecific(*(void *)(v24 + 592));
              if (v25 && *((unsigned char *)v25 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"). Continuing with min_observations=", 36);
              }
              uint64_t v26 = file_logger::operator<<<unsigned long>(v24);
              uint64_t v27 = pthread_getspecific(*(void *)(v26 + 592));
              if (v27 && *((unsigned char *)v27 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27 + 2, (uint64_t)".", 1);
              }
              atomic_ullong *volatile v15 = (cppipc *)pthread_getspecific(*(void *)(v26 + 592));
              if (v15 && *((unsigned char *)v15 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*((void *)v15 + 2) - 24)
                                                                          + 16));
                int v28 = std::locale::use_facet(&v35, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
                std::locale::~locale(&v35);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v26);
                if (*(_DWORD *)(v26 + 600) == 7)
                {
                  __print_back_trace();
                  exception = __cxa_allocate_exception(8uLL);
                  void *exception = "LOG_FATAL encountered";
                  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
                }
              }
            }
          }
          unint64_t v32 = v18;
        }
        turi::thread::cpu_count(v15);
        turi::sarray<turi::flexible_type>::get_reader(a1);
      }
      turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_2::operator()();
    }
    v35.__locale_ = a2;
    turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_1::operator()((uint64_t)&v35);
  }
  turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_0::operator()();
}

void sub_2240D4C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,std::locale a40)
{
}

uint64_t turi::sarray_reader_buffer<turi::flexible_type>::~sarray_reader_buffer(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v4 = (void **)a1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3::operator()(uint64_t a1, uint64_t a2)
{
  v98[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = (uint64_t *)(**(void **)a1 + 16 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  unint64_t v7 = **(void **)(a1 + 8);
  *(void *)&v94[5] = 0x700000000000000;
  *(void *)size_t v94 = 0;
  unint64_t v91 = v7;
  boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::initialize_buffer(v88, v7, v94);
  uint64_t v89 = v88[0];
  uint64_t v90 = v88[0];
  switch(v94[12])
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v94, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void **)v94;
        if (*(void *)v94)
        {
          if (*(char *)(*(void *)v94 + 31) < 0) {
            operator delete(*(void **)(*(void *)v94 + 8));
          }
          std::string::value_type v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v94, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = *(void **)v94;
        if (*(void *)v94)
        {
          unint64_t v18 = *(void **)(*(void *)v94 + 8);
          if (v18)
          {
            *(void *)(*(void *)v94 + 16) = v18;
            operator delete(v18);
          }
          std::string::value_type v9 = v17;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v94, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = *(void **)v94;
        if (*(void *)v94)
        {
          v84[0] = (void **)(*(void *)v94 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v84);
          goto LABEL_27;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v94, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = *(void **)v94;
        if (*(void *)v94)
        {
          v84[0] = (void **)(*(void *)v94 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v84);
LABEL_27:
          std::string::value_type v9 = v11;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v94, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v19 = *(void **)v94;
        if (*(void *)v94)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v94 + 16));
          std::string::value_type v9 = v19;
          unsigned int v16 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v94, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = *(void **)v94;
        if (*(void *)v94)
        {
          uint64_t v13 = *(void **)(*(void *)v94 + 48);
          if (v13)
          {
            *(void *)(*(void *)v94 + 56) = v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            void v12[4] = v14;
            operator delete(v14);
          }
          atomic_ullong *volatile v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          std::string::value_type v9 = v12;
          unsigned int v16 = 2071181815;
LABEL_31:
          uint64_t v10 = v16 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  (*(void (**)(unsigned char *__return_ptr))(***(void ***)(a1 + 16) + 32))(v94);
  uint64_t v20 = *(uint64_t **)(a1 + 24);
  uint64_t v22 = *v20;
  int v21 = (std::__shared_weak_count *)v20[1];
  uint64_t v82 = v22;
  uint64_t v83 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::sarray_reader_buffer<turi::flexible_type>::sarray_reader_buffer((uint64_t)v84, &v82, v5, v6 + 1, 1024);
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  uint64_t v23 = *(void *)(**(void **)(a1 + 32) + 8 * a2);
  uint64_t v24 = (*(uint64_t (**)(void))(***(void ***)(a1 + 24) + 24))(**(void **)(a1 + 24));
  uint64_t v25 = **(void **)(a1 + 40);
  uint64_t v26 = **(void **)(a1 + 48);
  uint64_t v27 = v26 + v23;
  if (v25 <= v26)
  {
    uint64_t v28 = v25 + v23;
    if (v25 + v23 <= v27) {
      uint64_t v29 = v26 + v23;
    }
    else {
      uint64_t v29 = v25 + v23;
    }
    uint64_t v30 = v29 + 1;
    do
    {
      if (v28 < 0 || v87 >= v86)
      {
        *(void *)&v93[5] = 0x700000000000000;
        *(void *)uint64_t v93 = 0;
        boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(v88, (uint64_t)v93);
        switch(v93[12])
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v32 = *(void **)v93;
              if (*(void *)v93)
              {
                if (*(char *)(*(void *)v93 + 31) < 0) {
                  operator delete(*(void **)(*(void *)v93 + 8));
                }
                uint64_t v33 = v32;
                uint64_t v34 = 0x1012C404EF22A49;
                goto LABEL_76;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v41 = *(void **)v93;
              if (*(void *)v93)
              {
                uint64_t v42 = *(void **)(*(void *)v93 + 8);
                if (v42)
                {
                  *(void *)(*(void *)v93 + 16) = v42;
                  operator delete(v42);
                }
                uint64_t v33 = v41;
                uint64_t v34 = 0x1080C409938AC02;
                goto LABEL_76;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::locale v35 = *(void **)v93;
              if (*(void *)v93)
              {
                uint64_t v92 = (void **)(*(void *)v93 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v92);
                goto LABEL_71;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::locale v35 = *(void **)v93;
              if (*(void *)v93)
              {
                uint64_t v92 = (void **)(*(void *)v93 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v92);
LABEL_71:
                uint64_t v33 = v35;
                uint64_t v34 = 0x1020C405E66F15BLL;
                goto LABEL_76;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string::size_type v43 = *(void **)v93;
              if (*(void *)v93)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v93 + 16));
                uint64_t v33 = v43;
                unsigned int v40 = -235920773;
                goto LABEL_75;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v36 = *(void **)v93;
              if (*(void *)v93)
              {
                uint64_t v37 = *(void **)(*(void *)v93 + 48);
                if (v37)
                {
                  *(void *)(*(void *)v93 + 56) = v37;
                  operator delete(v37);
                }
                long long v38 = (void *)v36[3];
                if (v38)
                {
                  v36[4] = v38;
                  operator delete(v38);
                }
                uint64_t v39 = (std::__shared_weak_count *)v36[2];
                if (v39) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
                }
                uint64_t v33 = v36;
                unsigned int v40 = 2071181815;
LABEL_75:
                uint64_t v34 = v40 | 0x1030C4000000000;
LABEL_76:
                MEMORY[0x22A614FA0](v33, v34);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        uint64_t v31 = turi::sarray_reader_buffer<turi::flexible_type>::next((uint64_t *)v84);
        boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(v88, v31);
      }
      ++v28;
    }
    while (v30 != v28);
  }
  if (v23 < v24 + v23)
  {
    do
    {
      if (**(unsigned char **)(a1 + 56)
        && ((unint64_t v44 = **(void **)(a1 + 64), v91) ? (v45 = (uint64_t *)v89) : (v45 = 0),
            v81[0] = v88,
            v81[1] = v45,
            v80[0] = v88,
            v80[1] = 0,
            (turi::rolling_aggregate::has_min_observations<boost::cb_details::iterator<boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>,boost::cb_details::nonconst_traits<boost::container::allocator_traits<std::allocator<turi::flexible_type>>>>>(v44, v81, (uint64_t)v80) & 1) == 0))
      {
        *(void *)&v93[5] = 0x700000000000000;
        *(void *)uint64_t v93 = 0;
        if (!v97) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v97 + 48))(v97, v93);
        switch(v93[12])
        {
          case 2:
LABEL_98:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v51 = *(void **)v93;
              if (*(void *)v93)
              {
                if (*(char *)(*(void *)v93 + 31) < 0) {
                  operator delete(*(void **)(*(void *)v93 + 8));
                }
                long long v52 = v51;
                uint64_t v53 = 0x1012C404EF22A49;
                goto LABEL_128;
              }
            }
            break;
          case 3:
LABEL_115:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string::size_type v60 = *(void **)v93;
              if (*(void *)v93)
              {
                char v61 = *(void **)(*(void *)v93 + 8);
                if (v61)
                {
                  *(void *)(*(void *)v93 + 16) = v61;
                  operator delete(v61);
                }
                long long v52 = v60;
                uint64_t v53 = 0x1080C409938AC02;
                goto LABEL_128;
              }
            }
            break;
          case 4:
LABEL_103:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              size_t v54 = *(void **)v93;
              if (*(void *)v93)
              {
                uint64_t v92 = (void **)(*(void *)v93 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v92);
                goto LABEL_123;
              }
            }
            break;
          case 5:
LABEL_120:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              size_t v54 = *(void **)v93;
              if (*(void *)v93)
              {
                uint64_t v92 = (void **)(*(void *)v93 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v92);
LABEL_123:
                long long v52 = v54;
                uint64_t v53 = 0x1020C405E66F15BLL;
                goto LABEL_128;
              }
            }
            break;
          case 8:
LABEL_124:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v62 = *(void **)v93;
              if (*(void *)v93)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v93 + 16));
                long long v52 = v62;
                unsigned int v59 = -235920773;
                goto LABEL_127;
              }
            }
            break;
          case 9:
LABEL_106:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v55 = *(void **)v93;
              if (*(void *)v93)
              {
                atomic_ullong *volatile v56 = *(void **)(*(void *)v93 + 48);
                if (v56)
                {
                  *(void *)(*(void *)v93 + 56) = v56;
                  operator delete(v56);
                }
                uint64_t v57 = (void *)v55[3];
                if (v57)
                {
                  v55[4] = v57;
                  operator delete(v57);
                }
                std::string::size_type v58 = (std::__shared_weak_count *)v55[2];
                if (v58) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v58);
                }
                long long v52 = v55;
                unsigned int v59 = 2071181815;
LABEL_127:
                uint64_t v53 = v59 | 0x1030C4000000000;
LABEL_128:
                MEMORY[0x22A614FA0](v52, v53);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        uint64_t v46 = *(uint64_t **)(a1 + 72);
        uint64_t v48 = *v46;
        uint64_t v47 = (std::__shared_weak_count *)v46[1];
        uint64_t v78 = v48;
        std::string v79 = v47;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v91) {
          uint64_t v49 = (uint64_t *)v89;
        }
        else {
          uint64_t v49 = 0;
        }
        v77[0] = v88;
        v77[1] = v49;
        v76[0] = v88;
        v76[1] = 0;
        turi::rolling_aggregate::full_window_aggregate<boost::cb_details::iterator<boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>,boost::cb_details::nonconst_traits<boost::container::allocator_traits<std::allocator<turi::flexible_type>>>>>(&v78, v77, (uint64_t)v76);
        if (v79) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v79);
        }
        uint64_t v50 = **(void **)(a1 + 80);
        if (*(unsigned char *)(v50 + a2) == 7 && v93[12] != 7) {
          *(unsigned char *)(v50 + a2) = v93[12];
        }
        if (!v95) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v95 + 48))(v95, v93);
        switch(v93[12])
        {
          case 2:
            goto LABEL_98;
          case 3:
            goto LABEL_115;
          case 4:
            goto LABEL_103;
          case 5:
            goto LABEL_120;
          case 8:
            goto LABEL_124;
          case 9:
            goto LABEL_106;
          default:
            break;
        }
      }
      if (v27 < -1 || v87 >= v86)
      {
        *(void *)&v93[5] = 0x700000000000000;
        *(void *)uint64_t v93 = 0;
        boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(v88, (uint64_t)v93);
        switch(v93[12])
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              long long v64 = *(void **)v93;
              if (*(void *)v93)
              {
                if (*(char *)(*(void *)v93 + 31) < 0) {
                  operator delete(*(void **)(*(void *)v93 + 8));
                }
                uint64_t v65 = v64;
                uint64_t v66 = 0x1012C404EF22A49;
                goto LABEL_163;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v73 = *(void **)v93;
              if (*(void *)v93)
              {
                std::string v74 = *(void **)(*(void *)v93 + 8);
                if (v74)
                {
                  *(void *)(*(void *)v93 + 16) = v74;
                  operator delete(v74);
                }
                uint64_t v65 = v73;
                uint64_t v66 = 0x1080C409938AC02;
                goto LABEL_163;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              char v67 = *(void **)v93;
              if (*(void *)v93)
              {
                uint64_t v92 = (void **)(*(void *)v93 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v92);
                goto LABEL_158;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              char v67 = *(void **)v93;
              if (*(void *)v93)
              {
                uint64_t v92 = (void **)(*(void *)v93 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v92);
LABEL_158:
                uint64_t v65 = v67;
                uint64_t v66 = 0x1020C405E66F15BLL;
                goto LABEL_163;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v75 = *(void **)v93;
              if (*(void *)v93)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v93 + 16));
                uint64_t v65 = v75;
                unsigned int v72 = -235920773;
                goto LABEL_162;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v93, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v68 = *(void **)v93;
              if (*(void *)v93)
              {
                int v69 = *(void **)(*(void *)v93 + 48);
                if (v69)
                {
                  *(void *)(*(void *)v93 + 56) = v69;
                  operator delete(v69);
                }
                std::string v70 = (void *)v68[3];
                if (v70)
                {
                  v68[4] = v70;
                  operator delete(v70);
                }
                atomic_ullong *volatile v71 = (std::__shared_weak_count *)v68[2];
                if (v71) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v71);
                }
                uint64_t v65 = v68;
                unsigned int v72 = 2071181815;
LABEL_162:
                uint64_t v66 = v72 | 0x1030C4000000000;
LABEL_163:
                MEMORY[0x22A614FA0](v65, v66);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        uint64_t v63 = turi::sarray_reader_buffer<turi::flexible_type>::next((uint64_t *)v84);
        boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(v88, v63);
      }
      ++v27;
      --v24;
    }
    while (v24);
  }
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  *(void *)uint64_t v93 = v84;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v98);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v96);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v94);
  boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy(v88);
}

void sub_2240D57F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  turi::sarray_reader_buffer<turi::flexible_type>::~sarray_reader_buffer((uint64_t)&a22);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v34 - 192));
  boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy(&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::rolling_aggregate::has_min_observations<boost::cb_details::iterator<boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>,boost::cb_details::nonconst_traits<boost::container::allocator_traits<std::allocator<turi::flexible_type>>>>>(unint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (v3 == *(uint64_t **)(a3 + 8))
  {
    unint64_t v5 = 0;
    uint64_t v4 = 0;
    return a1 == -1 && v5 == v4;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    while (1)
    {
      if (*((unsigned char *)v3 + 12) != 7)
      {
        ++v5;
        if (a1 != -1 && v5 >= a1) {
          break;
        }
      }
      uint64_t v6 = *a2;
      v3 += 2;
      a2[1] = v3;
      if (v3 == (uint64_t *)v6[1])
      {
        uint64_t v3 = (uint64_t *)*v6;
        a2[1] = (uint64_t *)*v6;
      }
      if (v3 == (uint64_t *)v6[3])
      {
        uint64_t v3 = 0;
        a2[1] = 0;
      }
      ++v4;
      if (v3 == *(uint64_t **)(a3 + 8)) {
        return a1 == -1 && v5 == v4;
      }
    }
    return 1;
  }
}

uint64_t turi::rolling_aggregate::full_window_aggregate<boost::cb_details::iterator<boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>,boost::cb_details::nonconst_traits<boost::container::allocator_traits<std::allocator<turi::flexible_type>>>>>(void *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5 = (**(uint64_t (***)(void))*a1)(*a1);
  uint64_t v6 = (uint64_t)a2[1];
  while (v6 != *(void *)(a3 + 8))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    unint64_t v7 = *a2;
    uint64_t v6 = (uint64_t)(a2[1] + 2);
    a2[1] = (uint64_t *)v6;
    if (v6 == v7[1])
    {
      uint64_t v6 = *v7;
      a2[1] = (uint64_t *)*v7;
    }
    if (v6 == v7[3])
    {
      uint64_t v6 = 0;
      a2[1] = 0;
    }
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 40);
  return v8(v5);
}

char *boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::initialize_buffer(void *a1, unint64_t a2, char *a3)
{
  BOOL result = (char *)boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::allocate((uint64_t)a1, a2);
  *a1 = result;
  a1[1] = &result[16 * a2];
  for (uint64_t i = a1[4]; i; --i)
  {
    *(void *)BOOL result = 0;
    *((_DWORD *)result + 2) = 0;
    result[12] = 0;
    if (result != a3)
    {
      uint64_t v8 = *(void *)a3;
      *(void *)(result + 5) = *(void *)(a3 + 5);
      *(void *)BOOL result = v8;
      LODWORD(v8) = a3[12];
      result[12] = v8;
      BOOL v9 = v8 > 9;
      int v10 = (1 << v8) & 0x33C;
      if (!v9 && v10 != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
      }
    }
    result += 16;
  }
  return result;
}

void *boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::allocate(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
  {
    std::logic_error::logic_error(&v3, "circular_buffer");
    v3.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
    boost::throw_exception<std::length_error>(&v3);
  }
  if (!a2) {
    return 0;
  }
  return operator new(16 * a2);
}

void sub_2240D6004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

void boost::throw_exception<std::length_error>(const std::logic_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D76C1D0;
  uint64_t v4 = &unk_26D76C1F8;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_2240D60DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  uint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D76C130;
  *(void *)(a1 + 16) = &unk_26D76C168;
  *(void *)(a1 + 56) = &unk_26D76C1A0;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D76C130;
  *(void *)(a1 + 16) = &unk_26D76C168;
  *(void *)(a1 + 56) = &unk_26D76C1A0;
  return a1;
}

void sub_2240D6328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone()
{
}

void sub_2240D6434(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2240D64A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::logic_error *)(a1 - 2);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::logic_error::~logic_error((std::logic_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::length_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::length_error>::~error_info_injector(uint64_t a1)
{
}

void sub_2240D676C(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::push_back_impl<turi::flexible_type&&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  if (a1[4] == (v3 - *a1) >> 4)
  {
    if (v3 != *a1)
    {
      boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::replace((uint64_t)a1, a1[3], (uint64_t *)a2);
      uint64_t v4 = a1[3] + 16;
      a1[3] = v4;
      if (v4 == a1[1])
      {
        uint64_t v4 = *a1;
        a1[3] = *a1;
      }
      a1[2] = v4;
    }
  }
  else
  {
    uint64_t v5 = a1[3];
    *(void *)uint64_t v5 = 0;
    *(_DWORD *)(v5 + 8) = 0;
    *(unsigned char *)(v5 + 12) = 0;
    uint64_t v6 = *(void *)a2;
    *(void *)(v5 + 5) = *(void *)(a2 + 5);
    *(void *)uint64_t v5 = v6;
    *(unsigned char *)(v5 + 12) = *(unsigned char *)(a2 + 12);
    *(unsigned char *)(a2 + 12) = 0;
    uint64_t v7 = a1[3] + 16;
    a1[3] = v7;
    if (v7 == a1[1]) {
      a1[3] = *a1;
    }
    ++a1[4];
  }
}

void boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::replace(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a3 != (uint64_t *)a2)
  {
    v20[5] = v3;
    v20[6] = v4;
    switch(*(unsigned char *)(a2 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          if (*((char *)v7 + 31) < 0) {
            operator delete((void *)v7[1]);
          }
          atomic_ullong *volatile v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          uint64_t v11 = (void *)v10[1];
          if (v11)
          {
            v10[2] = (atomic_ullong)v11;
            operator delete(v11);
          }
          atomic_ullong *volatile v8 = v10;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          v20[0] = (void **)(v12 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v20);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          v20[0] = (void **)(v12 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v20);
LABEL_19:
          atomic_ullong *volatile v8 = v12;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v13 + 2);
          atomic_ullong *volatile v8 = v13;
          unsigned int v14 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a2;
          if (*(void *)a2)
          {
            unsigned int v16 = (void *)v15[6];
            if (v16)
            {
              v15[7] = (atomic_ullong)v16;
              operator delete(v16);
            }
            uint64_t v17 = (void *)v15[3];
            if (v17)
            {
              void v15[4] = (atomic_ullong)v17;
              operator delete(v17);
            }
            unint64_t v18 = (std::__shared_weak_count *)v15[2];
            if (v18) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v18);
            }
            atomic_ullong *volatile v8 = v15;
            unsigned int v14 = 2071181815;
LABEL_32:
            uint64_t v9 = v14 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v8, v9);
          }
LABEL_34:
          *(void *)a2 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v19 = *a3;
    *(void *)(a2 + 5) = *(uint64_t *)((char *)a3 + 5);
    *(void *)a2 = v19;
    *(unsigned char *)(a2 + 12) = *((unsigned char *)a3 + 12);
    *((unsigned char *)a3 + 12) = 0;
  }
}

void boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy(uint64_t *a1)
{
  if (*a1) {
    operator delete((void *)*a1);
  }
}

void boost::circular_buffer<turi::flexible_type,std::allocator<turi::flexible_type>>::destroy_content(uint64_t *a1)
{
  if (a1[4])
  {
    unint64_t v2 = 0;
    uint64_t v3 = (uint64_t)(a1 + 5);
    uint64_t v4 = a1[2];
    do
    {
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v3, v4);
      uint64_t v5 = a1[1];
      uint64_t v4 = a1[2] + 16;
      a1[2] = v4;
      if (v4 == v5)
      {
        uint64_t v4 = *a1;
        a1[2] = *a1;
      }
      ++v2;
    }
    while (v2 < a1[4]);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3>(unsigned long,unsigned long,turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      BOOL result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_17rolling_aggregate13rolling_applyERKNS_6sarrayINS_13f"
                                        "lexible_typeEEENSt3__110shared_ptrINS_21group_aggregate_valueEEEllmE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (BOOL result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_17rolling_aggregate13rolling_applyERKNS_6sarrayINS_13flexible_typeEEENSt3__110shared_ptrINS_21group_aggregate_valueEEEllmE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3>(unsigned long,unsigned long,turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3 const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  for (unint64_t i = a1[1]; i < a1[2]; ++i)
    turi::rolling_aggregate::rolling_apply(turi::sarray<turi::flexible_type> const&,std::shared_ptr<turi::group_aggregate_value>,long,long,unsigned long)::$_3::operator()(*a1, i);
}

uint64_t turi::index_file_information::save(turi::index_file_information *this, turi::oarchive *a2)
{
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 4 > v4)
    {
      size_t v13 = 2 * v4 + 8;
      *((void *)a2 + 5) = v13;
      unsigned int v14 = (char **)*((void *)a2 + 2);
      if (v14)
      {
        long long v5 = *v14;
        size_t v15 = v14[1] - *v14;
        BOOL v16 = v13 >= v15;
        std::vector<char>::size_type v17 = v13 - v15;
        if (v17 != 0 && v16)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v17);
          long long v5 = (char *)**((void **)a2 + 2);
        }
        else if (!v16)
        {
          v14[1] = &v5[v13];
        }
      }
      else
      {
        long long v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v13, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      long long v5 = (char *)*((void *)a2 + 3);
    }
    *(_DWORD *)&v5[*((void *)a2 + 4)] = *((_DWORD *)this + 6);
    *((void *)a2 + 4) += 4;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v6 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v6)
    {
      size_t v18 = 2 * v6 + 16;
      *((void *)a2 + 5) = v18;
      uint64_t v19 = (char **)*((void *)a2 + 2);
      if (v19)
      {
        atomic_ullong *volatile v7 = *v19;
        size_t v20 = v19[1] - *v19;
        BOOL v21 = v18 >= v20;
        std::vector<char>::size_type v22 = v18 - v20;
        if (v22 != 0 && v21)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v22);
          atomic_ullong *volatile v7 = (char *)**((void **)a2 + 2);
        }
        else if (!v21)
        {
          v19[1] = &v7[v18];
        }
      }
      else
      {
        atomic_ullong *volatile v7 = (char *)malloc_type_realloc(*((void **)a2 + 3), v18, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v7;
    }
    else
    {
      atomic_ullong *volatile v7 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v7[*((void *)a2 + 4)] = *((void *)this + 4);
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v8 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v8)
    {
      size_t v23 = 2 * v8 + 16;
      *((void *)a2 + 5) = v23;
      uint64_t v24 = (char **)*((void *)a2 + 2);
      if (v24)
      {
        uint64_t v9 = *v24;
        size_t v25 = v24[1] - *v24;
        BOOL v26 = v23 >= v25;
        std::vector<char>::size_type v27 = v23 - v25;
        if (v27 != 0 && v26)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v27);
          uint64_t v9 = (char *)**((void **)a2 + 2);
        }
        else if (!v26)
        {
          v24[1] = &v9[v23];
        }
      }
      else
      {
        uint64_t v9 = (char *)malloc_type_realloc(*((void **)a2 + 3), v23, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v9;
    }
    else
    {
      uint64_t v9 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v9[*((void *)a2 + 4)] = *((void *)this + 5);
    *((void *)a2 + 4) += 8;
  }
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this + 6);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec((uint64_t)a2, (const void **)this + 9);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 12);
  atomic_ullong *volatile v10 = (const void **)*((void *)this + 15);
  uint64_t v11 = *((void *)this + 17);
  return turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t)a2, v10, (const void **)this + 16, v11);
}

void turi::read_index_file(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v3 = *(std::string *)a1;
  }
  turi::parse_v2_segment_filename((uint64_t)&v3, &v4);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v4;
  }
  turi::read_array_group_index_file(&__str, (uint64_t)&v2);
}

void sub_2240D71F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (*(char *)(v27 - 65) < 0) {
    operator delete(*(void **)(v27 - 88));
  }
  _Unwind_Resume(exception_object);
}

void turi::parse_v2_segment_filename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  MEMORY[0x22A614D20](&v11);
  LODWORD(v12.__r_.__value_.__l.__data_) = 0x4000;
  std::locale::locale((std::locale *)&v12.__r_.__value_.__r.__words[1], (const std::locale *)&v11);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>((std::string *)a1, (std::locale *)&v12);
  std::locale::~locale((std::locale *)&v12.__r_.__value_.__r.__words[1]);
  std::locale::~locale((std::locale *)&v11);
  uint64_t v4 = -1;
  std::string::size_type v5 = std::string::rfind((const std::string *)a1, 58, 0xFFFFFFFFFFFFFFFFLL);
  if (v5 == -1) {
    goto LABEL_12;
  }
  std::string::size_type v6 = v5;
  __endptr = 0;
  std::string::basic_string(&v12, (const std::string *)a1, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v11);
  *__error() = 0;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    atomic_ullong *volatile v7 = &v12;
  }
  else {
    atomic_ullong *volatile v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  uint64_t v4 = strtol((const char *)v7, &__endptr, 10);
  unint64_t v8 = __error();
  std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (*v8 == 34
    || ((atomic_ullong *volatile v10 = (std::string *)v12.__r_.__value_.__r.__words[0],
         (v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      ? (std::string *)(std::string::size_type size = v12.__r_.__value_.__l.__size_)
      : (atomic_ullong *volatile v10 = &v12),
        __endptr != (char *)v10 + size))
  {
    uint64_t v4 = -1;
    if ((*((unsigned char *)&v12.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  std::string::basic_string(&v11, (const std::string *)a1, 0, v6, (std::allocator<char> *)&v14);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*((unsigned char *)&v12.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_11:
  }
    operator delete(v12.__r_.__value_.__l.__data_);
LABEL_12:
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  a2[1].__r_.__value_.__r.__words[0] = v4;
}

void sub_2240D7428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::read_array_group_index_file(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  std::string::operator=((std::string *)a2, __str);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v3, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else {
    std::string v3 = *__str;
  }
  turi::general_ifstream::general_ifstream(v5, (uint64_t)&v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  if ((v5[1].__r_.__value_.__s.__data_[*(void *)(v5[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) == 0) {
    operator new();
  }
  std::string __p = __str;
  turi::read_array_group_index_file(std::string)::$_0::operator()();
}

void sub_2240D86D4()
{
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  __cxa_end_catch();
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v1);
  turi::general_ifstream::~general_ifstream((turi::general_ifstream *)&v2);
  turi::group_index_file_information::~group_index_file_information(v0);
  JUMPOUT(0x2240D871CLL);
}

void sub_2240D86F0()
{
}

void sub_2240D8714(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x2240D871CLL);
  }
  __clang_call_terminate(a1);
}

void turi::group_index_file_information::~group_index_file_information(void **this)
{
  uint64_t v2 = this + 8;
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>()
{
}

void sub_2240D87CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::ini::read_sequence_section<unsigned long>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v19 = *(std::string *)a2;
    }
    char v20 = 46;
    atomic_ullong *volatile v7 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      atomic_ullong *volatile v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    BOOL v21 = v7;
    uint64_t child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(a1, (uint64_t)&v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    std::vector<unsigned long>::resize((uint64_t)a4, a3);
    uint64_t v9 = *(void *)(*(void *)(child + 24) + 8);
    uint64_t v10 = *(void *)(v9 + 88);
    uint64_t v11 = v10 ? v10 - 80 : 0;
    if (v11 != v9)
    {
      unint64_t v12 = 0;
      do
      {
        if (*(char *)(v11 + 23) < 0)
        {
          if (!*(void *)(v11 + 8))
          {
LABEL_24:
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v11 + 24, &__p);
            uint64_t v22 = 0;
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            else {
              p_p = &__p;
            }
            v19.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
            v19.__r_.__value_.__l.__size_ = (std::string::size_type)p_p + size;
            if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned long>((unsigned __int8 **)&v19, &v22) & 1) == 0)
            {
              std::bad_cast::bad_cast((std::bad_cast *)&v19);
              v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
              v19.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C270];
              boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v19);
            }
            *(void *)(*a4 + 8 * v12) = v22;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            ++v12;
            goto LABEL_31;
          }
        }
        else if (!*(unsigned char *)(v11 + 23))
        {
          goto LABEL_24;
        }
        unint64_t v12 = std::stoi((const std::string *)v11, 0, 10);
        if (v12 >= (uint64_t)(a4[1] - *a4) >> 3)
        {
          v19.__r_.__value_.__r.__words[0] = v11;
          turi::ini::read_sequence_section<std::string>(boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,std::string,unsigned long)::{lambda(void)#1}::operator()((const std::string::value_type ***)&v19);
        }
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v11 + 24, &__p);
        uint64_t v22 = 0;
        std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
        }
        else {
          char v14 = &__p;
        }
        v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v19.__r_.__value_.__l.__size_ = (std::string::size_type)v14 + v13;
        if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned long>((unsigned __int8 **)&v19, &v22) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&v19);
          v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
          v19.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C270];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v19);
        }
        *(void *)(*a4 + 8 * v12) = v22;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_31:
        uint64_t v17 = *(void *)(v11 + 88);
        if (v17) {
          uint64_t v11 = v17 - 80;
        }
        else {
          uint64_t v11 = 0;
        }
      }
      while (v11 != v9);
    }
  }
}

void sub_2240D8A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  size_t v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *turi::legacy_vector_to_map@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  if (result[1] != *result)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v12 = *MEMORY[0x263F8C2B8];
    uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
      uint64_t v6 = v16[0];
      atomic_ullong *volatile v7 = (char *)v16 + *(void *)(v16[0] - 24);
      if (*((_DWORD *)v7 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[0] - 24)));
        unint64_t v8 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
        std::locale::~locale(&v14);
        uint64_t v6 = v16[0];
      }
      *((_DWORD *)v7 + 36) = 48;
      *(void *)((char *)v17 + *(void *)(v6 - 24)) = 4;
      std::ostream::operator<<();
      std::stringbuf::str();
      uint64_t v9 = *v2;
      char v20 = &v14;
      uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v14.__locale_, (uint64_t)&std::piecewise_construct, (long long **)&v20);
      std::string::operator=((std::string *)(v10 + 7), (const std::string *)(v9 + v3));
      if (v15 < 0) {
        operator delete(v14.__locale_);
      }
      v16[0] = v12;
      *(void *)((char *)v16 + *(void *)(v12 - 24)) = v11;
      v16[2] = v5;
      v17[0] = MEMORY[0x263F8C318] + 16;
      if (v18 < 0) {
        operator delete((void *)v17[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      BOOL result = (uint64_t *)MEMORY[0x22A614E30](&v19);
      ++v4;
      v3 += 24;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((v2[1] - *v2) >> 3));
  }
  return result;
}

void sub_2240D8DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
}

void turi::write_array_group_index_file(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  LODWORD(v3.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
  if (LODWORD(v3.__r_.__value_.__l.__data_) == 2)
  {
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v3 = *(std::string *)a1;
    }
    boost::filesystem::path::parent_path((boost::filesystem::path *)&v3, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v2, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v2 = __p[0];
    }
    internalJSONNode::newInternal((internalJSONNode *)5);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v3;
  turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_0::operator()();
}

void sub_2240D97C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, internalJSONNode *a16, internalJSONNode *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,internalJSONNode *a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a2) {
    __cxa_call_unexpected(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  std::string v2 = (void *)std::ostream::operator<<();
  std::string v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"info.version", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  atomic_ullong *volatile v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", "operator()", 185, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240D9BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  std::string v2 = (void *)std::ostream::operator<<();
  std::string v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"info.segment_files.size()", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"info.nsegments", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  atomic_ullong *volatile v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", "operator()", 201, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240D9E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::json::to_json_node<std::string>()
{
}

void turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  std::string v2 = (void *)std::ostream::operator<<();
  std::string v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"info.columns[i].segment_sizes.size()", 36);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"info.nsegments", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  atomic_ullong *volatile v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_index_file.cpp", "operator()", 221, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string::size_type v13 = v16;
  turi::write_array_group_index_file(std::string,turi::group_index_file_information const&)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240DA200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *turi::legacy_vector_to_map<unsigned long>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  if (result[1] != *result)
  {
    std::string v2 = result;
    unint64_t v3 = 0;
    uint64_t v11 = *MEMORY[0x263F8C2B8];
    uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
      uint64_t v6 = v16[0];
      atomic_ullong *volatile v7 = (char *)v16 + *(void *)(v16[0] - 24);
      if (*((_DWORD *)v7 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[0] - 24)));
        unint64_t v8 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
        std::locale::~locale(&v14);
        uint64_t v6 = v16[0];
      }
      *((_DWORD *)v7 + 36) = 48;
      *(void *)((char *)v17 + *(void *)(v6 - 24)) = 4;
      std::ostream::operator<<();
      std::stringbuf::str();
      std::to_string(&v13, *(void *)(*v2 + 8 * v3));
      char v20 = &v14;
      uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)&v14.__locale_, (uint64_t)&std::piecewise_construct, (long long **)&v20);
      uint64_t v10 = (void **)(v9 + 7);
      if (*((char *)v9 + 79) < 0) {
        operator delete(*v10);
      }
      *(std::string *)uint64_t v10 = v13;
      if (v15 < 0) {
        operator delete(v14.__locale_);
      }
      v16[0] = v11;
      *(void *)((char *)v16 + *(void *)(v11 - 24)) = v4;
      v16[2] = v5;
      v17[0] = MEMORY[0x263F8C318] + 16;
      if (v18 < 0) {
        operator delete((void *)v17[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      BOOL result = (void *)MEMORY[0x22A614E30](&v19);
      ++v3;
    }
    while (v3 < (uint64_t)(v2[1] - *v2) >> 3);
  }
  return result;
}

void sub_2240DA5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
}

long long *jsonSingletonEMPTY_JSON_STRING::getValue(jsonSingletonEMPTY_JSON_STRING *this)
{
  {
    jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
    qword_268067230 = 0;
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_223D44000);
  }
  return &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single;
}

void jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>()
{
  long long v0 = 0uLL;
  uint64_t v1 = 0;
  operator new();
}

void sub_2240DA7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~standard_callbacks((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::detail::read_json_internal<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::property_tree::json_parser::detail::encoding<char>,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, std::string *__str)
{
  v7[0] = a4;
  v7[1] = a3;
  uint64_t v8 = a3;
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&__p, __str);
  v9[0] = a1;
  v9[1] = (uint64_t)a2;
  boost::property_tree::json_parser::detail::utf8_utf8_encoding::skip_introduction<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(v8, v9, a2);
  uint64_t v11 = 1;
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(v7);
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::finish((uint64_t)v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2240DA8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~standard_callbacks(uint64_t a1)
{
  std::string v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a1);
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(uint64_t *a1)
{
  uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_object(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_array((void **)a1);
    if ((result & 1) == 0)
    {
      uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(a1);
      if ((result & 1) == 0)
      {
        uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_BOOLean(a1);
        if ((result & 1) == 0)
        {
          uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_null(a1);
          if ((result & 1) == 0)
          {
            uint64_t result = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_number((long long *)a1);
            if ((result & 1) == 0)
            {
              boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "expected value");
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::finish(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  BOOL v3 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 24));
  BOOL result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 32));
  if (v3 != result) {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "garbage after data");
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::utf8_utf8_encoding::skip_introduction<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)a2);
  char v6 = result;
  if (!a3 || a3[3] == a3[4] && (uint64_t result = (*(uint64_t (**)(void *))(*a3 + 72))(a3), result == -1))
  {
    if (v6) {
      return result;
    }
    a3 = 0;
  }
  else if ((v6 & 1) == 0)
  {
    return result;
  }
  uint64_t result = *a2;
  atomic_ullong *volatile v7 = *(unsigned __int8 **)(*a2 + 24);
  if (v7 == *(unsigned __int8 **)(*a2 + 32))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
    int v8 = result;
  }
  else
  {
    int v8 = *v7;
  }
  if (v8 == 239)
  {
    uint64_t v9 = (void *)*a2;
    uint64_t v10 = *(void *)(*a2 + 24);
    if (v10 == *(void *)(*a2 + 32)) {
      (*(void (**)(void *))(*v9 + 80))(v9);
    }
    else {
      v9[3] = v10 + 1;
    }
    uint64_t result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)a2);
    int v11 = result;
    if (a3)
    {
      if (a3[3] == a3[4])
      {
        uint64_t result = (*(uint64_t (**)(void *))(*a3 + 72))(a3);
        if (result == -1) {
          a3 = 0;
        }
        if (v11 == (result == -1)) {
          return result;
        }
      }
      else if ((result & 1) == 0)
      {
        return result;
      }
    }
    else
    {
      if (result) {
        return result;
      }
      a3 = 0;
    }
    uint64_t v12 = (void *)*a2;
    uint64_t v13 = *(void *)(*a2 + 24);
    if (v13 == *(void *)(*a2 + 32)) {
      (*(void (**)(void *))(*v12 + 80))(v12);
    }
    else {
      void v12[3] = v13 + 1;
    }
    uint64_t result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)a2);
    int v14 = result;
    if (!a3)
    {
      if (result) {
        return result;
      }
      a3 = 0;
      goto LABEL_36;
    }
    if (a3[3] != a3[4])
    {
      if ((result & 1) == 0) {
        return result;
      }
      goto LABEL_36;
    }
    uint64_t result = (*(uint64_t (**)(void *))(*a3 + 72))(a3);
    if (result == -1) {
      a3 = 0;
    }
    if (v14 != (result == -1))
    {
LABEL_36:
      char v15 = (void *)*a2;
      uint64_t v16 = *(void *)(*a2 + 24);
      if (v16 == *(void *)(*a2 + 32)) {
        (*(void (**)(void *))(*v15 + 80))(v15);
      }
      else {
        v15[3] = v16 + 1;
      }
      uint64_t result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)a2);
      if (a3 && a3[3] == a3[4])
      {
        uint64_t v17 = *(uint64_t (**)(void *))(*a3 + 72);
        return v17(a3);
      }
    }
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_object(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  uint64_t v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_brace, 0);
  if (v3)
  {
    uint64_t v4 = *a1;
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree((void *)*a1);
    *(_DWORD *)(*(void *)(v4 + 64) - 16) = 1;
    while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace, 0) & 1) == 0)
    {
      do
      {
        if ((boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(a1) & 1) == 0) {
          boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "expected key string");
        }
        while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
        boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon, 0, "expected ':'");
        boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(a1);
        while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      }
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_comma, 0) & 1) != 0);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace, 0, "expected '}' or ','");
    }
    uint64_t v5 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v5 - 16) == 3) {
      v5 -= 16;
    }
    *(void *)(*a1 + 64) = v5 - 16;
  }
  return v3;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_array(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  uint64_t v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_bracket, 0);
  if (v3)
  {
    uint64_t v4 = (uint64_t)*a1;
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(*a1);
    *(_DWORD *)(*(void *)(v4 + 64) - 16) = 0;
    while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket, 0) & 1) == 0)
    {
      do
      {
        boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_value(a1);
        while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
      }
      while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_comma, 0) & 1) != 0);
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket, 0, "expected ']' or ','");
    }
    uint64_t v5 = (*a1)[8];
    if (*(_DWORD *)(v5 - 16) == 3) {
      v5 -= 16;
    }
    (*a1)[8] = v5 - 16;
  }
  return v3;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_string(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  uint64_t v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_quote, 0);
  if (v3)
  {
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*a1);
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "unterminated string") != 34)
    {
      char v6 = a1 + 3;
      do
      {
        atomic_ullong *volatile v7 = *(unsigned __int8 **)(*v6 + 24);
        if (v7 == *(unsigned __int8 **)(*v6 + 32)) {
          int v8 = (*(unsigned __int8 (**)(void))(*(void *)*v6 + 72))(*v6);
        }
        else {
          int v8 = *v7;
        }
        if (v8 == 92)
        {
          boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
          boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_escape(a1);
        }
        else
        {
          uint64_t v9 = (void *)a1[4];
          v12[0] = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit;
          v12[1] = 0;
          v12[2] = v5;
          v11[0] = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error;
          v11[1] = 0;
          v11[2] = a1;
          void v11[3] = "invalid code sequence";
          boost::property_tree::json_parser::detail::utf8_utf8_encoding::transcode_codepoint<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>,char const*>,boost::_bi::list2<boost::_bi::value<boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>*>,boost::_bi::value<char const*>>>>(v4, (void **)a1 + 3, v9, (uint64_t)v12, (uint64_t)v11);
        }
      }
      while (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "unterminated string") != 34);
    }
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
  }
  return v3;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_BOOLean(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_t, 0))
  {
    uint64_t v3 = "expected 'true'";
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r, 0, "expected 'true'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected 'true'");
    uint64_t v4 = "true";
  }
  else
  {
    uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_f, 0);
    if (!result) {
      return result;
    }
    uint64_t v3 = "expected 'false'";
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a, 0, "expected 'false'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'false'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s, 0, "expected 'false'");
    uint64_t v4 = "false";
  }
  boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e, 0, v3);
  char v6 = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*a1);
  MEMORY[0x22A614700](v6, v4);
  return 1;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_null(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  uint64_t v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_n, 0);
  if (v3)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected 'null'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'null'");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l, 0, "expected 'null'");
    uint64_t v4 = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*a1);
    MEMORY[0x22A614700](v4, "null");
  }
  return v3;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_number(long long *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws, 0) & 1) != 0);
  long long v5 = *a1;
  char v6 = 1;
  int v3 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus, 0, (uint64_t)&v5);
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0, 0, (uint64_t)&v5) & 1) != 0|| (boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_int_part((uint64_t)a1, (uint64_t)&v5))
  {
    boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_frac_part((uint64_t)a1, (uint64_t)&v5);
    boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_exp_part((uint64_t)a1, (uint64_t)&v5);
    return 1;
  }
  else
  {
    if (v3) {
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "expected digits after -");
    }
    return 0;
  }
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(uint64_t a1, char *a2)
{
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_brace(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 123;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 125;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 58;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_comma(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 44;
}

uint64_t boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned int a2)
{
  return (a2 < 0x21) & (0x100002600uLL >> a2);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(uint64_t a1, uint64_t (*a2)(void *, void), uint64_t a3)
{
  char v6 = (void *)(a1 + 8);
  atomic_ullong *volatile v7 = (void **)(a1 + 16);
  BOOL v8 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 8));
  if (v8 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](v7)) {
    return 0;
  }
  uint64_t v9 = (void *)(*(void *)a1 + (a3 >> 1));
  if (a3) {
    a2 = *(uint64_t (**)(void *, void))(*v9 + a2);
  }
  int v11 = *(char **)(*v6 + 24);
  if (v11 == *(char **)(*v6 + 32)) {
    char v12 = (*(uint64_t (**)(void))(*(void *)*v6 + 72))(*v6);
  }
  else {
    char v12 = *v11;
  }
  uint64_t result = a2(v9, v12);
  if (result)
  {
    if (*(void *)(*v6 + 24) == *(void *)(*v6 + 32)) {
      (*(void (**)(void))(*(void *)*v6 + 72))(*v6);
    }
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(a1);
    return 1;
  }
  return result;
}

void *boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  int v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4]) {
    int v4 = (*(unsigned __int8 (**)(void *))(*v2 + 72))(v2);
  }
  else {
    int v4 = *v3;
  }
  if (v4 == 10) {
    *(void *)(a1 + 48) = (*(_DWORD *)(a1 + 48) + 1);
  }
  else {
    ++*(_DWORD *)(a1 + 52);
  }
  uint64_t result = *(void **)(a1 + 8);
  uint64_t v6 = result[3];
  if (v6 == result[4])
  {
    atomic_ullong *volatile v7 = *(uint64_t (**)(void))(*result + 80);
    return (void *)v7();
  }
  else
  {
    result[3] = v6 + 1;
  }
  return result;
}

void *boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  int v3 = (void *)a1[8];
  int v4 = (void **)(a1 + 7);
  if (v2 != v3)
  {
    long long v5 = v3 - 2;
    do
    {
      if (*v5 != 3)
      {
        if (!*v5) {
          operator new();
        }
        operator new();
      }
      a1[8] = v5;
      BOOL v6 = v5 == (_DWORD *)v2;
      v5 -= 4;
    }
    while (!v6);
  }
  uint64_t v7 = (uint64_t)(a1 + 9);
  unint64_t v8 = a1[9];
  if ((unint64_t)v2 >= v8)
  {
    uint64_t v10 = v8 - (void)v2;
    uint64_t v11 = v10 >> 3;
    if ((unint64_t)(v10 >> 3) <= 1) {
      uint64_t v11 = 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v12);
    char v15 = &v13[2 * v14];
    *uint64_t v13 = 3;
    v13[1] = a1;
    uint64_t v9 = v13 + 2;
    uint64_t v17 = (char *)a1[7];
    uint64_t v16 = (char *)a1[8];
    if (v16 != v17)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v16 - 1);
        v13 -= 2;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*v4;
    }
    a1[7] = v13;
    a1[8] = v9;
    a1[9] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v2 = 3;
    v2[1] = a1;
    uint64_t v9 = v2 + 2;
  }
  a1[8] = v9;
  return a1;
}

void sub_2240DBCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair(v23 - 104);
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a23);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::pair<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, long long *a2, long long *a3)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v4 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v4;
  }
  operator new();
}

void sub_2240DBE38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect(uint64_t a1, uint64_t (*a2)(void *, void), uint64_t a3, char *a4)
{
  uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(a1, a2, a3);
  if ((result & 1) == 0) {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1, a4);
  }
  return result;
}

void boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, a2);
  boost::property_tree::file_parser_error::file_parser_error((uint64_t)v4, (uint64_t)v3, (long long *)(a1 + 24), *(int *)(a1 + 48));
  v4[0] = &unk_26D76C3B0;
  boost::exception_detail::throw_exception_<boost::property_tree::json_parser::json_parser_error>((uint64_t)v4, (uint64_t)"void boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char>, std::istreambuf_iterator<char>>::parse_error(const char *) [Encoding = boost::property_tree::json_parser::detail::encoding<char>, Iterator = std::istreambuf_iterator<char>, Sentinel = std::istreambuf_iterator<char>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/json_parser/detail/parser.hpp", 47);
}

void sub_2240DBF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::exception_detail::throw_exception_<boost::property_tree::json_parser::json_parser_error>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector((uint64_t)v7, a1);
  v7[11] = a2;
  v7[12] = a3;
  int v8 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>((uint64_t)v7);
}

void sub_2240DBFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  a17 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v17 + 80));
  boost::property_tree::file_parser_error::~file_parser_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x78uLL);
  boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector((uint64_t)v3, a1);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_2240DC064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  a17 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v19 + 80));
  boost::property_tree::file_parser_error::~file_parser_error(&a9);
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 112) = &unk_26D7542E8;
  long long v4 = (void *)boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector(a1, a2);
  *long long v4 = &unk_26D76C2C8;
  void v4[9] = &unk_26D76C300;
  v4[14] = &unk_26D76C338;
  uint64_t v9 = 0;
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 40))(&v8);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v9, v8);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v8);
    uint64_t v6 = v9;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 80), v6);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
  return a1;
}

void sub_2240DC1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector(uint64_t a1, uint64_t a2)
{
  long long v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D76AB70;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    std::runtime_error v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  uint64_t v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)a1 = &unk_26D76C3B0;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = &unk_26D754388;
  *(void *)(a1 + 80) = v8;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  long long v9 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v9;
  *(void *)a1 = &unk_26D76C368;
  *(void *)(a1 + 72) = &unk_26D76C390;
  return a1;
}

{
  std::runtime_error *v4;
  std::runtime_error v5;
  std::string *v6;
  long long v7;
  uint64_t v8;

  long long v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D76AB70;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    std::runtime_error v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  uint64_t v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(void *)a1 = &unk_26D76C368;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = &unk_26D76C390;
  return a1;
}

void sub_2240DC370(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone()
{
}

void sub_2240DC408(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F3C4066575A4CLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x78uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_2240DC474(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::rethrow(void *a1)
{
}

void *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 112) = &unk_26D7542E8;
  uint64_t result = (void *)boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector(a1, a2);
  *uint64_t result = &unk_26D76C2C8;
  result[9] = &unk_26D76C300;
  result[14] = &unk_26D76C338;
  return result;
}

void sub_2240DC654(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_bracket(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 91;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 93;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_quote(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 34;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 92;
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_escape(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>((uint64_t)(a1 + 2), (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_quote, 0))
  {
    uint64_t v3 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v3 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v3 - 8);
    }
    std::string::value_type v6 = 34;
LABEL_43:
    std::string::push_back(v4, v6);
    return;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash, 0))
  {
    uint64_t v5 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v5 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v5 - 8);
    }
    std::string::value_type v6 = 92;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_slash, 0))
  {
    uint64_t v7 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v7 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v7 - 8);
    }
    std::string::value_type v6 = 47;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_b, 0))
  {
    uint64_t v8 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v8 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v8 - 8);
    }
    std::string::value_type v6 = 8;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_f, 0))
  {
    uint64_t v9 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v9 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v9 - 8);
    }
    std::string::value_type v6 = 12;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_n, 0))
  {
    uint64_t v10 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v10 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v10 - 8);
    }
    std::string::value_type v6 = 10;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r, 0))
  {
    uint64_t v11 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v11 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v11 - 8);
    }
    std::string::value_type v6 = 13;
    goto LABEL_43;
  }
  if (boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_t, 0))
  {
    uint64_t v12 = *(void *)(*a1 + 64);
    if (*(_DWORD *)(v12 - 16) == 2) {
      long long v4 = (std::string *)(*a1 + 32);
    }
    else {
      long long v4 = *(std::string **)(v12 - 8);
    }
    std::string::value_type v6 = 9;
    goto LABEL_43;
  }
  if (!boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::DoNothing>(v2, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0))boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "invalid escape sequence"); {
  boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_codepoint_ref(a1);
  }
}

void *boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 56);
  uint64_t v2 = *(_DWORD **)(a1 + 64);
  if (v1 == v2) {
    return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree((void *)a1);
  }
  for (unint64_t i = v2 - 4; *i == 3; i -= 4)
  {
    *(void *)(a1 + 64) = i;
    if (i == v1) {
      return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree((void *)a1);
    }
  }
  if (*i != 1) {
    return boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_tree((void *)a1);
  }
  _DWORD *i = 2;
  if (*(char *)(a1 + 55) < 0)
  {
    **(unsigned char **)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
  return (void *)(a1 + 32);
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(uint64_t a1, char *a2)
{
  long long v4 = (void *)(a1 + 8);
  uint64_t v5 = (void **)(a1 + 16);
  BOOL v6 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 8));
  if (v6 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](v5)) {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(a1, a2);
  }
  uint64_t v7 = *(char **)(*v4 + 24);
  if (v7 == *(char **)(*v4 + 32)) {
    return (char)(*(uint64_t (**)(void))(*(void *)*v4 + 72))(*v4);
  }
  else {
    return *v7;
  }
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_slash(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 47;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_b(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 98;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_f(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 102;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_n(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 110;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 114;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_t(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 116;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 117;
}

void boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_codepoint_ref(uint64_t *a1)
{
  unsigned int v2 = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad((uint64_t)a1);
  if ((v2 & 0xFC00) == 0xD800)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect((uint64_t)(a1 + 2), (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash, 0, "invalid codepoint, stray high surrogate");
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::expect((uint64_t)(a1 + 2), (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u, 0, "expected codepoint reference after high surrogate");
    __int16 v3 = boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad((uint64_t)a1);
    if ((v3 & 0xFC00) != 0xDC00) {
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "expected low surrogate after high surrogate");
    }
    unsigned int v2 = (v3 & 0x3FF | ((v2 & 0x3FF) << 10)) + 0x10000;
  }
  else if ((v2 & 0xFC00) == 0xDC00)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error((uint64_t)(a1 + 2), "invalid codepoint, stray low surrogate");
  }
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  v6[0] = boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit;
  v6[1] = 0;
  v6[2] = v5;
  boost::property_tree::json_parser::detail::utf8_utf8_encoding::feed_codepoint<boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>>(v4, v2, (uint64_t)v6);
}

void boost::property_tree::json_parser::detail::utf8_utf8_encoding::feed_codepoint<boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (HIWORD(a2) > 0x10u) {
          return;
        }
        uint64_t v12 = (a2 >> 18) | 0xFFFFFFF0;
        uint64_t v13 = *(void *)(a3 + 8);
        uint64_t v14 = *(void (**)(void *, uint64_t))a3;
        char v15 = (void *)(*(void *)(a3 + 16) + (v13 >> 1));
        if (v13) {
          uint64_t v14 = *(void (**)(void *, uint64_t))(*v15 + v14);
        }
        v14(v15, v12);
        uint64_t v11 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      }
      else
      {
        uint64_t v11 = (a2 >> 12) | 0xFFFFFFE0;
      }
      uint64_t v16 = *(void *)(a3 + 8);
      uint64_t v17 = *(void (**)(void *, uint64_t))a3;
      int v18 = (void *)(*(void *)(a3 + 16) + (v16 >> 1));
      if (v16) {
        uint64_t v17 = *(void (**)(void *, uint64_t))(*v18 + v17);
      }
      v17(v18, v11);
      uint64_t v9 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    }
    else
    {
      uint64_t v9 = (a2 >> 6) | 0xFFFFFFC0;
    }
    uint64_t v19 = *(void *)(a3 + 8);
    char v20 = *(void (**)(void *, uint64_t))a3;
    uint64_t v21 = (void *)(*(void *)(a3 + 16) + (v19 >> 1));
    if (v19) {
      char v20 = *(void (**)(void *, uint64_t))(*v21 + v20);
    }
    v20(v21, v9);
    uint64_t v10 = a2 & 0x3F | 0xFFFFFF80;
    uint64_t v22 = *(void *)(a3 + 8);
    uint64_t v7 = *(void (**)(void *, uint64_t))a3;
    uint64_t v8 = (void *)(*(void *)(a3 + 16) + (v22 >> 1));
    if (v22) {
      uint64_t v7 = *(void (**)(void *, uint64_t))(*v8 + v7);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 8);
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v7 = *(void (**)(void *, uint64_t))a3;
    uint64_t v8 = (void *)(v5 + (v6 >> 1));
    if (v6) {
      uint64_t v7 = *(void (**)(void *, uint64_t))(*v8 + v7);
    }
    uint64_t v10 = (char)a2;
  }
  v7(v8, v10);
}

void boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::on_code_unit(uint64_t a1, std::string::value_type a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(_DWORD *)(v2 - 16) == 2) {
    __int16 v3 = (std::string *)(a1 + 32);
  }
  else {
    __int16 v3 = *(std::string **)(v2 - 8);
  }
  std::string::push_back(v3, a2);
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_hex_quad(uint64_t a1)
{
  LODWORD(v1) = 0;
  uint64_t v2 = a1 + 16;
  int v3 = 4;
  do
  {
    int v4 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::need_cur(v2, "invalid escape sequence");
    int v5 = v4 - 48;
    if ((v4 - 48) <= 9) {
      goto LABEL_5;
    }
    if ((v4 - 65) <= 5)
    {
      int v5 = v4 - 55;
LABEL_5:
      if (v5 < 0) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    if ((v4 - 97) > 5 || (int v5 = v4 - 87, v4 - 87 < 0)) {
LABEL_9:
    }
      boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v2, "invalid escape sequence");
LABEL_10:
    uint64_t v1 = (v5 + 16 * v1);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(v2);
    --v3;
  }
  while (v3);
  return v1;
}

void *boost::property_tree::json_parser::detail::utf8_utf8_encoding::transcode_codepoint<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,char>,boost::_bi::list2<boost::reference_wrapper<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>,boost::arg<1>>>,boost::_bi::bind_t<void,boost::_mfi::mf1<void,boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>,char const*>,boost::_bi::list2<boost::_bi::value<boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>*>,boost::_bi::value<char const*>>>>(uint64_t a1, void **a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = (unsigned __int8 *)(*a2)[3];
  uint64_t v11 = (unsigned __int8 *)(*a2)[4];
  if (v10 == v11)
  {
    unint64_t v12 = (*(uint64_t (**)(void *))(*v9 + 72))(v9);
    uint64_t v9 = *a2;
    uint64_t v10 = (unsigned __int8 *)(*a2)[3];
    uint64_t v11 = (unsigned __int8 *)(*a2)[4];
  }
  else
  {
    unint64_t v12 = *v10;
  }
  if (v10 == v11)
  {
    (*(void (**)(void *))(*v9 + 80))(v9);
    if ((v12 & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    v9[3] = v10 + 1;
    if ((v12 & 0x80) == 0)
    {
LABEL_6:
      if (v12 <= 0x1Fu)
      {
        uint64_t v13 = *(void (**)(void, void))a5;
        uint64_t v14 = *(void *)(a5 + 8);
        char v15 = (void *)(*(void *)(a5 + 16) + (v14 >> 1));
        if (v14) {
          uint64_t v13 = *(void (**)(void, void))(*v15 + v13);
        }
        v13(v15, *(void *)(a5 + 24));
      }
      uint64_t v21 = *(void *)(a4 + 8);
      uint64_t v22 = *(void (**)(void, void))a4;
      uint64_t v23 = (void *)(*(void *)(a4 + 16) + (v21 >> 1));
      if (v21) {
        uint64_t v22 = *(void (**)(void, void))(*v23 + v22);
      }
      return (void *)((uint64_t (*)(void *, void))v22)(v23, (char)v12);
    }
  }
  uint64_t v16 = (v12 >> 3) & 0xF;
  LOBYTE(v17) = boost::property_tree::json_parser::detail::utf8_utf8_encoding::trail_table(unsigned char)const::table[v16];
  if ((unint64_t)(v16 - 15) <= 0xFFFFFFFFFFFFFFF8)
  {
    int v18 = *(void (**)(void, void))a5;
    uint64_t v19 = *(void *)(a5 + 8);
    char v20 = (void *)(*(void *)(a5 + 16) + (v19 >> 1));
    if (v19) {
      int v18 = *(void (**)(void, void))(*v20 + v18);
    }
    v18(v20, *(void *)(a5 + 24));
  }
  uint64_t v25 = *(void *)(a4 + 8);
  BOOL v26 = *(void (**)(void, void))a4;
  uint64_t v27 = (void *)(*(void *)(a4 + 16) + (v25 >> 1));
  if (v25) {
    BOOL v26 = *(void (**)(void, void))(*v27 + v26);
  }
  uint64_t result = (void *)((uint64_t (*)(void *, void))v26)(v27, (char)v12);
  if ((unint64_t)(v16 - 8) <= 6)
  {
    if ((char)v17 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = (char)v17;
    }
    do
    {
      BOOL v28 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
      BOOL v29 = v28;
      if (a3)
      {
        if (a3[3] == a3[4])
        {
          int v30 = (*(uint64_t (**)(void *))(*a3 + 72))(a3);
          if (v30 == -1) {
            a3 = 0;
          }
          if (v29 == (v30 == -1))
          {
LABEL_41:
            uint64_t v33 = *(void *)(a5 + 8);
            uint64_t v34 = *(void (**)(void, void))a5;
            std::locale v35 = (void *)(*(void *)(a5 + 16) + (v33 >> 1));
            if (v33) {
              uint64_t v34 = *(void (**)(void, void))(*v35 + v34);
            }
            v34(v35, *(void *)(a5 + 24));
            goto LABEL_44;
          }
        }
        else if (!v28)
        {
          goto LABEL_41;
        }
      }
      else if (v28)
      {
        goto LABEL_41;
      }
      uint64_t v31 = (char *)(*a2)[3];
      if (v31 == (char *)(*a2)[4]) {
        char v32 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
      }
      else {
        char v32 = *v31;
      }
      if ((v32 & 0xC0) != 0x80) {
        goto LABEL_41;
      }
LABEL_44:
      uint64_t v36 = (char *)(*a2)[3];
      if (v36 == (char *)(*a2)[4]) {
        char v37 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
      }
      else {
        char v37 = *v36;
      }
      uint64_t v38 = *(void *)(a4 + 8);
      uint64_t v39 = *(void (**)(void, void))a4;
      unsigned int v40 = (void *)(*(void *)(a4 + 16) + (v38 >> 1));
      if (v38) {
        uint64_t v39 = *(void (**)(void, void))(*v40 + v39);
      }
      v39(v40, v37);
      uint64_t result = *a2;
      uint64_t v41 = (*a2)[3];
      if (v41 == (*a2)[4]) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 80))(result);
      }
      else {
        result[3] = v41 + 1;
      }
      --v17;
    }
    while (v17);
  }
  return result;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 101;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 97;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 108;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 115;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 45;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 48;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_int_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t v4 = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0, 0, a2);
  if (v4)
  {
    while ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) != 0);
  }
  return v4;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_frac_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot, 0, a2);
  if (result)
  {
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) == 0)boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v3, "need at least one digit after '.'"); {
    do
    }
      uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2);
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_exp_part(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(a1 + 16, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE, 0, a2);
  if (result)
  {
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus, 0, a2);
    if ((boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2) & 1) == 0)boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::parse_error(v3, "need at least one digit in exponent"); {
    do
    }
      uint64_t result = boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(v3, (uint64_t (*)(void *, void))boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit, 0, a2);
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>>(uint64_t a1, uint64_t (*a2)(void *, void), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)(a1 + 8);
  uint64_t v9 = (void **)(a1 + 16);
  BOOL v10 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100]((void **)(a1 + 8));
  if (v10 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](v9)) {
    return 0;
  }
  uint64_t v11 = (void *)(*(void *)a1 + (a3 >> 1));
  if (a3) {
    a2 = *(uint64_t (**)(void *, void))(*v11 + a2);
  }
  uint64_t v13 = *(char **)(*v8 + 24);
  if (v13 == *(char **)(*v8 + 32)) {
    char v14 = (*(uint64_t (**)(void))(*(void *)*v8 + 72))(*v8);
  }
  else {
    char v14 = *v13;
  }
  uint64_t result = a2(v11, v14);
  if (result)
  {
    char v15 = *(std::string::value_type **)(*v8 + 24);
    if (v15 == *(std::string::value_type **)(*v8 + 32)) {
      std::string::value_type v16 = (*(uint64_t (**)(void))(*(void *)*v8 + 72))(*v8);
    }
    else {
      std::string::value_type v16 = *v15;
    }
    boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>::operator()(a4, v16);
    boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>::next(a1);
    return 1;
  }
  return result;
}

void boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::property_tree::json_parser::detail::encoding<char>,std::istreambuf_iterator<char>,std::input_iterator_tag>::operator()(uint64_t a1, std::string::value_type __c)
{
  if (*(unsigned char *)(a1 + 16))
  {
    boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::new_value(*(void *)a1);
    *(unsigned char *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 64);
  if (*(_DWORD *)(v4 - 16) == 2) {
    int v5 = (std::string *)(*(void *)a1 + 32);
  }
  else {
    int v5 = *(std::string **)(v4 - 8);
  }
  std::string::push_back(v5, __c);
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned __int8 a2)
{
  return a2 - 49 < 9;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, unsigned __int8 a2)
{
  return a2 - 48 < 0xA;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 46;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, char a2)
{
  return (a2 & 0xDF) == 69;
}

BOOL boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus(boost::property_tree::json_parser::detail::external_ascii_superset_encoding *this, int a2)
{
  return a2 == 43 || a2 == 45;
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_optional<std::string>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(a1, a2, &v7);
  uint64_t v4 = v7;
  if (v7)
  {
    *(unsigned char *)a3 = 0;
    int v5 = (std::string *)(a3 + 8);
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)v4;
      *(void *)(a3 + 24) = *(void *)(v4 + 16);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
    LOBYTE(v4) = 1;
  }
  *(unsigned char *)a3 = v4;
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned long>(unsigned __int8 **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    *a1 = ++v3;
  }
  v7[0] = 0;
  uint64_t v8 = 1;
  uint64_t v9 = a2;
  BOOL v10 = v3;
  uint64_t v11 = v2;
  uint64_t result = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::convert((uint64_t)v7);
  if (v5 == 45) {
    *a2 = -*a2;
  }
  return result;
}

uint64_t std::vector<turi::index_file_information>::__push_back_slow_path<turi::index_file_information const&>(uint64_t *a1, const turi::index_file_information *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xE38E38E38E38E3) {
    unint64_t v9 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::index_file_information>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v13 = v10;
  char v14 = (std::string *)&v10[144 * v4];
  std::string::value_type v16 = &v10[144 * v9];
  turi::index_file_information::index_file_information(v14, a2);
  char v15 = v14 + 6;
  std::vector<turi::index_file_information>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<turi::index_file_information>::~__split_buffer(&v13);
  return v11;
}

void sub_2240DD800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::index_file_information>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::index_file_information>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>,std::reverse_iterator<turi::index_file_information*>,std::reverse_iterator<turi::index_file_information*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::index_file_information>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>,std::reverse_iterator<turi::index_file_information*>,std::reverse_iterator<turi::index_file_information*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 9;
      std::allocator<turi::index_file_information>::construct[abi:ne180100]<turi::index_file_information,turi::index_file_information>(a1, v7 - 144, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 144;
      *((void *)&v16 + 1) -= 144;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void std::allocator<turi::index_file_information>::construct[abi:ne180100]<turi::index_file_information,turi::index_file_information>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 120) = *((void *)a3 + 15);
  uint64_t v6 = a3 + 8;
  uint64_t v7 = *((void *)a3 + 16);
  *(void *)(a2 + 128) = v7;
  uint64_t v8 = a2 + 128;
  uint64_t v9 = *((void *)a3 + 17);
  *(void *)(a2 + 136) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *((void *)a3 + 15) = v6;
    *uint64_t v6 = 0;
    *((void *)a3 + 17) = 0;
  }
  else
  {
    *(void *)(a2 + 120) = v8;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,std::reverse_iterator<turi::index_file_information*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::index_file_information>::destroy[abi:ne180100](v3, v1);
      v1 += 144;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::index_file_information>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::index_file_information>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 144;
    std::allocator<turi::index_file_information>::destroy[abi:ne180100](v4, i - 144);
  }
}

uint64_t OUTLINED_FUNCTION_6_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  return file_logger::operator<<<std::string>(v4, (uint64_t)va);
}

void turi::sarray_sorted_buffer<turi::flexible_type>::sarray_sorted_buffer(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  int v8 = pthread_mutex_init((pthread_mutex_t *)(a1 + 136), 0);
  assert_msg(v8 == 0, "Mutex create error %d", v8);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a2 >> 4;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100](a1 + 256, a3);
  *(unsigned char *)(a1 + 288) = a4;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v11);
  long long v9 = v11;
  long long v11 = 0uLL;
  BOOL v10 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  turi::sarray<turi::flexible_type>::open_for_write(*(void *)a1);
}

void sub_2240DDD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<turi::simple_spinlock>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = v3 - *a1;
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::simple_spinlock>::__append(a1, v6);
  }
  else if (!v5)
  {
    unint64_t v7 = *a1 + a2;
    while (v3 != v7)
      turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)(v3 - 1));
    a1[1] = v7;
  }
}

uint64_t turi::sarray_sorted_buffer<turi::flexible_type>::save_buffer(uint64_t a1, unsigned __int8 ***a2)
{
  void v27[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t)**a2;
  BOOL v5 = (uint64_t *)(*a2)[1];
  std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v27, a1 + 256);
  unint64_t v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 4);
  if (v5 == (uint64_t *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)> &,turi::flexible_type*,false>(v4, v5, (uint64_t)v27, v7, 1);
  std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](v27);
  if (*(unsigned char *)(a1 + 288))
  {
    int v8 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,std::__equal_to &>(**a2, (*a2)[1], (uint64_t)&v26);
    std::vector<turi::flexible_type>::resize((uint64_t *)*a2, ((char *)v8 - (char *)**a2) >> 4);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  long long v9 = **a2;
  if (v9 == (*a2)[1])
  {
    long long v11 = **a2;
  }
  else
  {
    do
    {
      uint64_t v10 = *(void *)(a1 + 40);
      if (!v10) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v10 + 48))(v10, v9);
      v9 += 16;
    }
    while (v9 != (*a2)[1]);
    long long v11 = **a2;
  }
  unint64_t v12 = *(void *)(a1 + 128);
  uint64_t v13 = (v9 - v11) >> 4;
  char v14 = *(uint64_t **)(a1 + 120);
  if ((unint64_t)v14 >= v12)
  {
    long long v16 = *(uint64_t **)(a1 + 112);
    uint64_t v17 = v14 - v16;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = v12 - (void)v16;
    unint64_t v19 = (uint64_t)(v12 - (void)v16) >> 2;
    if (v19 <= v17 + 1) {
      unint64_t v19 = v17 + 1;
    }
    if (v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20)
    {
      uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 128, v20);
      long long v16 = *(uint64_t **)(a1 + 112);
      char v14 = *(uint64_t **)(a1 + 120);
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = (uint64_t *)&v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *uint64_t v22 = v13;
    long long v15 = v22 + 1;
    while (v14 != v16)
    {
      uint64_t v24 = *--v14;
      *--uint64_t v22 = v24;
    }
    *(void *)(a1 + 112) = v22;
    *(void *)(a1 + 120) = v15;
    *(void *)(a1 + 128) = v23;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *char v14 = v13;
    long long v15 = v14 + 1;
  }
  *(void *)(a1 + 120) = v15;
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
}

void sub_2240DE078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void turi::sarray_sorted_buffer<turi::flexible_type>::add(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (5
      * ((((0xC6A4A7935BD1E995 * (a3 ^ 0xC3A5C85C97CB3127)) >> 32) >> 15) ^ (-107 * (a3 ^ 0x27)))) & 0xF;
  uint64_t v5 = a1[29];
  do
  {
    while (*(unsigned char *)(v5 + v4) == 1)
      ;
  }
  while (atomic_exchange((atomic_uchar *volatile)(v5 + v4), 1u));
  uint64_t v6 = a1[25];
  uint64_t v7 = v6
     + 24
     * ((5
       * ((((0xC6A4A7935BD1E995 * (a3 ^ 0xC3A5C85C97CB3127)) >> 32) >> 15) ^ (-107 * (a3 ^ 0x27)))) & 0xF);
  unint64_t v8 = *(void *)(v7 + 8);
  unint64_t v9 = *(void *)(v7 + 16);
  uint64_t v10 = (uint64_t *)(v7 + 8);
  if (v8 >= v9)
  {
    uint64_t v13 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)(v6+ 24* ((5* ((((0xC6A4A7935BD1E995 * (a3 ^ 0xC3A5C85C97CB3127)) >> 32) >> 15) ^ (-107 * (a3 ^ 0x27)))) & 0xF)), (atomic_ullong *volatile *)a2);
  }
  else
  {
    *(void *)unint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    *(unsigned char *)(v8 + 12) = 0;
    if (v8 != a2)
    {
      atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)a2;
      *(void *)(v8 + 5) = *(void *)(a2 + 5);
      *(void *)unint64_t v8 = v11;
      unsigned int v12 = *(unsigned __int8 *)(a2 + 12);
      *(unsigned char *)(v8 + 12) = v12;
      if (v12 <= 9 && ((1 << v12) & 0x33C) != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)v8, 1uLL);
      }
    }
    uint64_t v13 = v8 + 16;
  }
  *uint64_t v10 = v13;
  uint64_t v14 = a1[25];
  long long v15 = (uint64_t *)(v14 + 24 * v4);
  uint64_t v16 = v15[1];
  uint64_t v17 = *v15;
  if (a1[28] == (v16 - *v15) >> 4)
  {
    unint64_t v18 = (char *)operator new(0x30uLL);
    *((void *)v18 + 2) = 0;
    *((void *)v18 + 1) = 0;
    *(void *)unint64_t v18 = &unk_26D7599A8;
    *((void *)v18 + 3) = v17;
    *long long v15 = 0;
    *((void *)v18 + 4) = v16;
    v15[1] = 0;
    uint64_t v19 = v14 + 24 * v4;
    *((void *)v18 + 5) = *(void *)(v19 + 16);
    *(void *)(v19 + 16) = 0;
    uint64_t v20 = a1[29];
    __dmb(0xBu);
    *(unsigned char *)(v20 + v4) = 0;
    uint64_t v22 = (unsigned __int8 **)(v18 + 24);
    uint64_t v23 = (std::__shared_weak_count *)v18;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
    turi::sarray_sorted_buffer<turi::flexible_type>::save_buffer((uint64_t)a1, &v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18);
  }
  else
  {
    uint64_t v21 = a1[29];
    __dmb(0xBu);
    *(unsigned char *)(v21 + v4) = 0;
  }
}

void sub_2240DE27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_sorted_buffer<turi::flexible_type>::close(uint64_t result)
{
  if (*(unsigned char *)(*(void *)result + 248) && *(unsigned char *)(*(void *)result + 249))
  {
    uint64_t v1 = (void *)result;
    for (uint64_t i = 0; i != 16; ++i)
    {
      uint64_t v3 = v1[25];
      uint64_t v4 = (void *)(v3 + 24 * i);
      uint64_t v5 = v4 + 1;
      if (v4[1] != *v4)
      {
        uint64_t v6 = (char *)operator new(0x30uLL);
        *((void *)v6 + 2) = 0;
        *((void *)v6 + 1) = 0;
        *((void *)v6 + 3) = 0;
        *(void *)uint64_t v6 = &unk_26D7599A8;
        *((void *)v6 + 4) = 0;
        *((void *)v6 + 5) = 0;
        *((void *)v6 + 3) = *v4;
        *uint64_t v4 = 0;
        uint64_t v7 = *((void *)v6 + 4);
        *((void *)v6 + 4) = *v5;
        void *v5 = v7;
        uint64_t v8 = v3 + 24 * i;
        uint64_t v9 = *((void *)v6 + 5);
        *((void *)v6 + 5) = *(void *)(v8 + 16);
        *(void *)(v8 + 16) = v9;
        uint64_t v17 = (unsigned __int8 **)(v6 + 24);
        unint64_t v18 = (std::__shared_weak_count *)v6;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
        turi::sarray_sorted_buffer<turi::flexible_type>::save_buffer((uint64_t)v1, &v17);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        uint64_t v10 = v1[25];
        uint64_t v11 = v10 + 24 * i;
        uint64_t v14 = *(void *)(v11 + 8);
        uint64_t v13 = (void *)(v11 + 8);
        uint64_t v12 = v14;
        uint64_t v15 = *(void *)(v10 + 24 * i);
        if (v14 != v15)
        {
          uint64_t v16 = v10 + 24 * i + 16;
          do
          {
            v12 -= 16;
            std::allocator<turi::flexible_type>::destroy[abi:ne180100](v16, v12);
          }
          while (v12 != v15);
          uint64_t v10 = v1[25];
        }
        *uint64_t v13 = v15;
        std::vector<turi::flexible_type>::shrink_to_fit((uint64_t *)(v10 + 24 * i));
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)*v1 + 40))();
  }
  return result;
}

void sub_2240DE438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void *std::vector<turi::simple_spinlock>::__append(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  uint64_t v5 = (unsigned char *)result[1];
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v5[a2];
      do
      {
        *v5++ = 0;
        --v2;
      }
      while (v2);
      uint64_t v5 = v11;
    }
    result[1] = v5;
  }
  else
  {
    unint64_t v6 = *result;
    uint64_t v7 = &v5[-*result];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (2 * (v4 - v6) > v8) {
      unint64_t v8 = 2 * (v4 - v6);
    }
    if (v4 - v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    void v16[4] = result + 2;
    if (v9) {
      uint64_t v10 = (char *)operator new(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v12 = &v7[(void)v10];
    uint64_t v13 = &v7[(void)v10 + v2];
    do
    {
      (v7++)[(void)v10] = 0;
      --v2;
    }
    while (v2);
    if (v5 != (unsigned char *)v6)
    {
      uint64_t v14 = &v5[~v6];
      uint64_t v15 = v5;
      do
      {
        v14[(void)v10] = 0;
        --v15;
        --v14;
      }
      while (v15 != (unsigned char *)v6);
      uint64_t v12 = v10;
    }
    *uint64_t v3 = v12;
    v3[1] = v13;
    v3[2] = &v10[v9];
    v16[2] = v5;
    void v16[3] = v4;
    v16[0] = v6;
    v16[1] = v6;
    return (void *)std::__split_buffer<turi::simple_spinlock>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

uint64_t std::__split_buffer<turi::simple_spinlock>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1;
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)(i - 1));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t turi::v2_block_impl::block_manager::get_instance(turi::v2_block_impl::block_manager *this)
{
  {
    operator new();
  }
  return turi::v2_block_impl::block_manager::get_instance(void)::manager;
}

void sub_2240DE64C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A0C40119F3F5FLL);
  _Unwind_Resume(a1);
}

turi::v2_block_impl::block_manager *turi::v2_block_impl::block_manager::block_manager(turi::v2_block_impl::block_manager *this)
{
  uint64_t v2 = pthread_mutex_init((pthread_mutex_t *)this, 0);
  assert_msg(v2 == 0, v3, v2);
  uint64_t v4 = pthread_mutex_init((pthread_mutex_t *)this + 1, 0);
  assert_msg(v4 == 0, v5, v4);
  *((void *)this + 18) = 0;
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 16) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *((void *)this + 22) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  uint64_t v6 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 232), 0);
  assert_msg(v6 == 0, v7, v6);
  *((void *)this + 46) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 37) = 128;
  return this;
}

void sub_2240DE784(_Unwind_Exception *a1)
{
  unint64_t v8 = v5;
  std::deque<std::weak_ptr<turi::general_ifstream>>::~deque[abi:ne180100](v8);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v4, *v7);
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(v3, *v6);
  turi::mutex::~mutex(v2);
  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

unint64_t turi::v2_block_impl::block_manager::open_column(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  turi::parse_v2_segment_filename((uint64_t)&v17, &__str);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (v19 == -1) {
    uint64_t v19 = 0;
  }
  uint64_t v16 = 0;
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1 + 160, (const void **)&__str.__r_.__value_.__l.__data_))
  {
    p_str = &__str;
    uint64_t v16 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 160), (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_str)[7];
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 128);
    *(void *)(a1 + 128) = v16 + 1;
    _ZNSt3__115allocate_sharedB8ne180100IN4turi13v2_block_impl13block_manager7segmentENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&p_str);
    std::string::operator=((std::string *)((char *)p_str + 64), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = __str;
    }
    uint64_t io_parallelism_id = turi::fileio::get_io_parallelism_id((uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v5 = io_parallelism_id & 0xF;
    if (io_parallelism_id == -1) {
      uint64_t v5 = -1;
    }
    p_str[4].__r_.__value_.__r.__words[0] = v5;
    turi::v2_block_impl::block_manager::init_segment(a1, (pthread_mutex_t **)&p_str);
    uint64_t v20 = (std::string *)&v16;
    uint64_t v6 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&v20);
    unint64_t v8 = (uint64_t *)p_str;
    uint64_t v7 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v9 = (std::__shared_weak_count *)v6[6];
    v6[5] = (uint64_t)v8;
    v6[6] = (uint64_t)v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v10 = v16;
    uint64_t v20 = &__str;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 160), (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v20)[7] = v10;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  p_str = (std::string *)&v16;
  if (!std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_str)[5])turi::v2_block_impl::block_manager::open_column(std::string)::$_0::operator()(); {
  p_str = (std::string *)&v16;
  }
  atomic_fetch_add((atomic_ullong *volatile)(std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_str)[5]+ 152), 1uLL);
  unint64_t v11 = v16;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v11;
}

void sub_2240DEA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  pthread_mutex_unlock(v30);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_manager::init_segment(uint64_t result, pthread_mutex_t **a2)
{
  uint64_t v2 = *a2;
  if (!(*a2)[1].__opaque[48])
  {
    uint64_t v4 = result;
    pthread_mutex_lock(*a2);
    if (!(*a2)[1].__opaque[48])
    {
      turi::v2_block_impl::block_manager::get_segment_file_handle(v4, (uint64_t *)a2, &v12);
      uint64_t v5 = v12;
      uint64_t v6 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)v12);
      uint64_t v11 = -1;
      std::istream::seekg();
      std::istream::read();
      std::ios_base::clear((std::ios_base *)((char *)v5 + *(void *)(*(void *)v5 - 24)), 0);
      std::istream::seekg();
      unint64_t v8 = v5;
      long long v9 = 0u;
      long long v10 = 0u;
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::vector<turi::v2_block_impl::block_info>,false>::exec((uint64_t)&v8, &(*a2)[2].__sig);
      uint64_t v7 = *a2;
      v7[1].__opaque[48] = 1;
      *(void *)&v7[1].__opaque[16] = v6;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    return pthread_mutex_unlock(v2);
  }
  return result;
}

void sub_2240DEBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  pthread_mutex_unlock(v16);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_manager::open_column(std::string)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  long long v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_segments[segment_id] != __null", 32);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::v2_block_impl::block_manager::open_column(std::string)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240DED1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_manager::close_column(uint64_t a1, unint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  unint64_t v21 = a2;
  v22.__locale_ = (std::locale::__imp *)&v21;
  if (!std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), &v21, (uint64_t)&std::piecewise_construct, (uint64_t **)&v22)[5])turi::v2_block_impl::block_manager::close_column(std::tuple<unsigned long,unsigned long>)::$_0::operator()(); {
  v22.__locale_ = (std::locale::__imp *)&v21;
  }
  uint64_t v4 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 136), &v21, (uint64_t)&std::piecewise_construct, (uint64_t **)&v22);
  uint64_t v6 = v4[5];
  uint64_t v5 = (std::__shared_weak_count *)v4[6];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_lock((pthread_mutex_t *)v6);
  if (atomic_fetch_add((atomic_ullong *volatile)(v6 + 152), 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    char v7 = (int *)global_logger();
    if (v7[169] <= 1)
    {
      if (cppipc::must_cancel((cppipc *)v7)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      unint64_t v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "close_column", 83, 1);
      long long v10 = pthread_getspecific(*((void *)started + 74));
      if (v10 && *((unsigned char *)v10 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Closing ", 8);
      }
      if (*(char *)(v6 + 87) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
      }
      else {
        std::string __p = *(std::string *)(v6 + 64);
      }
      uint64_t v11 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      uint64_t v12 = pthread_getspecific(*(void *)(v11 + 592));
      if (v12)
      {
        if (*((unsigned char *)v12 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
          uint64_t v13 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
          std::locale::~locale(&v22);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v11);
          if (*(_DWORD *)(v11 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(a1 + 160), (const void **)(v6 + 64));
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
    uint64_t v14 = *(std::__shared_weak_count **)(v6 + 112);
    if (v14)
    {
      uint64_t v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        uint64_t v16 = v15;
        std::string v17 = *(_DWORD **)(v6 + 104);
        if (v17) {
          boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(v17 + 4, 8, v17 + 4, 16, (turi::fileio_impl::general_fstream_source *)(v17 + 22), v17 + 46);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 64));
    pthread_mutex_unlock((pthread_mutex_t *)v6);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>>>::__erase_unique<unsigned long>(a1 + 136, &v21);
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

void sub_2240DF11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::locale a17)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  pthread_mutex_unlock(v20);
  pthread_mutex_unlock(v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  pthread_mutex_unlock(v17);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_manager::close_column(std::tuple<unsigned long,unsigned long>)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  long long v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_segments[segment_id] != __null", 32);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::v2_block_impl::block_manager::close_column(std::tuple<unsigned long,unsigned long>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240DF2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::v2_block_impl::block_manager::num_blocks_in_column(turi::v2_block_impl::block_manager *a1, unint64_t a2, unint64_t a3)
{
  turi::v2_block_impl::block_manager::get_segment(a1, a2, &v9);
  uint64_t v4 = *(void *)(v9 + 128);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v9 + 136) - v4) >> 3) <= a3) {
    turi::v2_block_impl::block_manager::num_blocks_in_column(std::tuple<unsigned long,unsigned long>)::$_0::operator()();
  }
  uint64_t v5 = (uint64_t *)(v4 + 24 * a3);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4);
}

void sub_2240DF45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::v2_block_impl::block_manager::get_segment@<X0>(turi::v2_block_impl::block_manager *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v8 = a2;
  pthread_mutex_lock((pthread_mutex_t *)this);
  uint64_t v9 = &v8;
  uint64_t v5 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)this + 17, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9);
  uint64_t v6 = v5[6];
  *a3 = v5[5];
  a3[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)this);
}

void sub_2240DF4F0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_manager::num_blocks_in_column(std::tuple<unsigned long,unsigned long>)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  long long v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"seg->blocks.size()", 18);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"column_id", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "operator()", 105, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::v2_block_impl::block_manager::num_blocks_in_column(std::tuple<unsigned long,unsigned long>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240DF698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_manager::get_block_info(turi::v2_block_impl::block_manager *a1, unint64_t *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = a2[2];
  turi::v2_block_impl::block_manager::get_segment(a1, *a2, &v6);
  uint64_t v4 = *(void *)(*(void *)(v6 + 128) + 24 * v2);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4 + 48 * v3;
}

uint64_t turi::v2_block_impl::block_manager::get_all_block_info(turi::v2_block_impl::block_manager *this, unint64_t a2)
{
  turi::v2_block_impl::block_manager::get_segment(this, a2, &v4);
  uint64_t v2 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2 + 128;
}

void turi::v2_block_impl::block_manager::read_block(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  turi::v2_block_impl::block_manager::get_segment((turi::v2_block_impl::block_manager *)a1, *a2, &v41);
  uint64_t v9 = v41;
  uint64_t v10 = *(void *)(*(void *)(v41 + 128) + 24 * v7);
  if (a3) {
    *a3 = v10 + 48 * v8;
  }
  uint64_t v11 = (pthread_mutex_t *)(a1 + 232);
  turi::buffer_pool<std::vector<char>>::get_new_buffer((pthread_mutex_t *)(a1 + 232), (uint64_t)a4);
  uint64_t v12 = (std::vector<char> *)a4->n128_u64[0];
  uint64_t v13 = v10 + 48 * v8;
  unint64_t v16 = *(void *)(v13 + 8);
  char v15 = (int *)(v13 + 8);
  unint64_t v14 = v16;
  uint64_t v17 = *(void *)a4->n128_u64[0];
  unint64_t v18 = *(void *)(a4->n128_u64[0] + 8) - v17;
  BOOL v19 = v16 >= v18;
  std::vector<char>::size_type v20 = v16 - v18;
  if (v16 <= v18)
  {
    if (!v19) {
      v12->__end_ = (std::vector<char>::pointer)(v17 + v14);
    }
  }
  else
  {
    std::vector<char>::__append(v12, v20);
  }
  uint64_t v39 = v9;
  char v40 = 1;
  pthread_mutex_lock((pthread_mutex_t *)v9);
  turi::v2_block_impl::block_manager::get_segment_file_handle(a1, &v41, &v37);
  unint64_t v21 = v37;
  std::locale v22 = (turi::v2_block_impl *)std::istream::seekg();
  uint64_t v23 = *(void *)(v9 + 96);
  if (turi::SFRAME_IO_READ_LOCK)
  {
    int v24 = 0;
    if (*(void *)(v9 + 88) > 0x400000uLL && v23 != -1)
    {
      turi::v2_block_impl::get_io_locks(v22);
      turi::unfair_lock::lock((turi::unfair_lock *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + 232 * v23));
      int v24 = 1;
    }
  }
  else
  {
    int v24 = 0;
  }
  uint64_t v25 = (turi::v2_block_impl *)std::istream::read();
  if (v24)
  {
    turi::v2_block_impl::get_io_locks(v25);
    turi::unfair_lock::unlock((turi::unfair_lock *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + 232 * v23));
  }
  if ((*((unsigned char *)v21 + *(void *)(*v21 - 24) + 32) & 5) != 0)
  {
    turi::buffer_pool<std::vector<char>>::release_buffer(v11, a4);
    char v26 = (std::__shared_weak_count *)a4->n128_u64[1];
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    if (!v26) {
      goto LABEL_25;
    }
LABEL_24:
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    goto LABEL_25;
  }
  std::unique_lock<turi::mutex>::unlock((uint64_t)&v39);
  if (*(unsigned char *)(v10 + 48 * v8 + 32))
  {
    turi::buffer_pool<std::vector<char>>::get_new_buffer(v11, (uint64_t)v36);
    uint64_t v27 = v10 + 48 * v8;
    unint64_t v30 = *(void *)(v27 + 16);
    BOOL v29 = (unint64_t *)(v27 + 16);
    unint64_t v28 = v30;
    std::vector<std::string>::pointer begin = v36[0]->__begin_;
    unint64_t v32 = v36[0]->__end_ - v36[0]->__begin_;
    BOOL v33 = v30 >= v32;
    std::vector<char>::size_type v34 = v30 - v32;
    if (v34 != 0 && v33)
    {
      std::vector<char>::__append(v36[0], v34);
      std::vector<std::string>::pointer begin = v36[0]->__begin_;
      unint64_t v28 = *v29;
    }
    else if (!v33)
    {
      v36[0]->__end_ = &begin[v28];
    }
    LZ4_decompress_safe(*(unsigned __int8 **)a4->n128_u64[0], begin, *v15, v28);
    __n128 v35 = *a4;
    *a4 = *(__n128 *)v36;
    *(__n128 *)uint64_t v36 = v35;
    turi::buffer_pool<std::vector<char>>::release_buffer(v11, (__n128 *)v36);
    char v26 = (std::__shared_weak_count *)v36[1];
    if (v36[1]) {
      goto LABEL_24;
    }
  }
LABEL_25:
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v39);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
}

void sub_2240DFAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&a13);
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_manager::get_segment_file_handle(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a2;
  *a3 = 0;
  a3[1] = 0;
  unint64_t v7 = *(std::__shared_weak_count **)(v6 + 112);
  if (!v7
    || (unint64_t v8 = std::__shared_weak_count::lock(v7), (a3[1] = v8) == 0)
    || (uint64_t v9 = *(void **)(v6 + 104), (*a3 = v9) == 0))
  {
    uint64_t v10 = *a2;
    if (*(char *)(*a2 + 87) < 0) {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v10 + 64), *(void *)(v10 + 72));
    }
    else {
      std::string v11 = *(std::string *)(v10 + 64);
    }
    turi::parse_v2_segment_filename((uint64_t)&v11, &v12);
    std::string __p = v12;
    memset(&v12, 0, sizeof(v12));
    turi::v2_block_impl::block_manager::get_new_file_handle(a1, (uint64_t)&__p);
  }
  std::ios_base::clear((std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)), 0);
}

void sub_2240DFCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void turi::v2_block_impl::get_io_locks(turi::v2_block_impl *this)
{
  {
    for (uint64_t i = 0; i != 3712; i += 232)
      turi::unfair_lock::unfair_lock((turi::unfair_lock *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + i));
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_0, 0, &dword_223D44000);
  }
}

void sub_2240DFDB4(_Unwind_Exception *a1)
{
  while (v1)
  {
    v1 -= 232;
    turi::unfair_lock::~unfair_lock((turi::unfair_lock *)(v1 + v2));
  }
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::mutex>::unlock(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t result = pthread_mutex_unlock(*(pthread_mutex_t **)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    return turi::v2_block_impl::block_manager::read_typed_block();
  }
  return result;
}

uint64_t turi::v2_block_impl::block_manager::read_typed_block(uint64_t a1, long long *a2, uint64_t *a3, void *a4)
{
  uint64_t v12 = 0;
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  turi::v2_block_impl::block_manager::read_block(a1, (unint64_t *)&v9, &v12, &v11);
  if (a4) {
    *a4 = v12;
  }
  if (v11.n128_u64[0])
  {
    uint64_t v7 = turi::v2_block_impl::typed_decode(v12, *(unsigned char **)v11.n128_u64[0], *(void *)(v11.n128_u64[0] + 8) - *(void *)v11.n128_u64[0], a3);
    turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)(a1 + 232), &v11);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v11.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11.n128_u64[1]);
  }
  return v7;
}

void sub_2240DFED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void turi::v2_block_impl::block_manager::get_new_file_handle(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  unint64_t v4 = *(void *)(a1 + 224);
  if (v4 >= turi::SFRAME_FILE_HANDLE_POOL_SIZE)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)&v22[0].__locale_ = 0u;
    uint64_t v5 = *(void *)(a1 + 192);
    if (*(void *)(a1 + 200) != v5)
    {
      unint64_t v6 = *(void *)(a1 + 216);
      uint64_t v7 = (uint64_t *)(v5 + 8 * (v6 >> 8));
      uint64_t v8 = *v7;
      uint64_t v9 = *v7 + 16 * v6;
      uint64_t v10 = *(void *)(v5 + (((v6 + v4) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v6 + v4);
      while (v9 != v10)
      {
        uint64_t v11 = *(void *)(v9 + 8);
        if (v11 && *(void *)(v11 + 8) != -1)
        {
          std::deque<std::weak_ptr<turi::general_ifstream>>::push_back(v22, (long long *)v9);
          uint64_t v8 = *v7;
        }
        v9 += 16;
        if (v9 - v8 == 4096)
        {
          uint64_t v12 = v7[1];
          ++v7;
          uint64_t v8 = v12;
          uint64_t v9 = v12;
        }
      }
    }
    std::deque<std::weak_ptr<turi::general_ifstream>>::__move_assign(a1 + 184, (uint64_t)v22);
    std::deque<std::weak_ptr<turi::general_ifstream>>::~deque[abi:ne180100](v22);
  }
  while (*(void *)(a1 + 224) >= (unint64_t)turi::SFRAME_FILE_HANDLE_POOL_SIZE)
    std::deque<std::weak_ptr<turi::general_ifstream>>::pop_front((void *)(a1 + 184));
  uint64_t v13 = (int *)global_logger();
  if (v13[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v13)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v14 = (file_logger *)global_logger();
    started = file_logger::start_stream(v14, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_manager.cpp", "get_new_file_handle", 218, 1);
    uint64_t v16 = pthread_getspecific(*((void *)started + 74));
    if (v16 && *((unsigned char *)v16 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"Opening ", 8);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v21 = *(std::string *)a2;
    }
    uint64_t v17 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v21);
    unint64_t v18 = pthread_getspecific(*(void *)(v17 + 592));
    if (v18)
    {
      if (*((unsigned char *)v18 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(v18[2] - 24) + 16));
        BOOL v19 = std::locale::use_facet(v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v17);
        if (*(_DWORD *)(v17 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  operator new();
}

void sub_2240E0290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23,std::__shared_weak_count *a24)
{
  MEMORY[0x22A614FA0](v25, 0x10B3C40C7444AC9);
  pthread_mutex_unlock(v24);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::weak_ptr<turi::general_ifstream>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  unint64_t v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v2
                                    + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

__n128 std::deque<std::weak_ptr<turi::general_ifstream>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::weak_ptr<turi::general_ifstream>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

turi::unfair_lock *turi::unfair_lock::unfair_lock(turi::unfair_lock *this)
{
  uint64_t v2 = pthread_mutex_init((pthread_mutex_t *)this, 0);
  assert_msg(v2 == 0, v3, v2);
  uint64_t v4 = pthread_mutex_init((pthread_mutex_t *)this + 1, 0);
  assert_msg(v4 == 0, v5, v4);
  *((unsigned char *)this + 128) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 17) = (char *)this + 144;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 50;
  *((unsigned char *)this + 208) = 1;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  gettimeofday((timeval *)((char *)this + 216), 0);
  return this;
}

void sub_2240E04F8(_Unwind_Exception *a1)
{
  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void turi::unfair_lock::~unfair_lock(turi::unfair_lock *this)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 136, *((void **)this + 18));
  turi::mutex::~mutex((pthread_mutex_t *)this + 1);
  turi::mutex::~mutex((pthread_mutex_t *)this);
}

uint64_t std::deque<std::weak_ptr<turi::general_ifstream>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_weak(v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 256;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    char v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4turi13v2_block_impl13block_manager7segmentENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xB8uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4turi13v2_block_impl13block_manager7segmentENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_2240E06C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4turi13v2_block_impl13block_manager7segmentENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D76C3D8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 24), 0);
  assert_msg(v2 == 0, v3, v2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(void *)(a1 + 176) = 0;
  return a1;
}

void sub_2240E078C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::v2_block_impl::block_manager::segment>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76C3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::v2_block_impl::block_manager::segment>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76C3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::v2_block_impl::block_manager::segment>::__on_zero_shared(uint64_t a1)
{
  std::allocator<turi::v2_block_impl::block_manager::segment>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::v2_block_impl::block_manager::segment>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v3 = *(std::__shared_weak_count **)(a2 + 112);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  turi::mutex::~mutex((pthread_mutex_t *)a2);
}

uint64_t std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>>>::__erase_unique<unsigned long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::v2_block_impl::block_manager::segment>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  operator delete(a2);
  return v3;
}

void std::deque<std::weak_ptr<turi::general_ifstream>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::weak_ptr<turi::general_ifstream>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 16), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::weak_ptr<turi::general_ifstream>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::vector<char>::size_type v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      char v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::vector<char>::size_type v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      __n128 v35 = &v34[8 * (v46 >> 2)];
      char v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        atomic_ullong *volatile v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)atomic_ullong *volatile v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      std::string::size_type v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  atomic_ullong *volatile v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2240E0CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::weak_ptr<turi::general_ifstream>>::__move_assign(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    uint64_t v6 = (void *)(a1 + 40);
    uint64_t v5 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 40);
    unint64_t v7 = *(void *)(a1 + 32);
    unint64_t v8 = &v4[v7 >> 8];
    uint64_t v9 = (uint64_t)*v8;
    uint64_t v10 = (uint64_t)*v8 + 16 * v7;
    uint64_t v11 = *(uint64_t *)((char *)v4 + (((*(void *)(a1 + 40) + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*(unsigned char *)(a1 + 40) + v7);
    if (v10 != v11)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
        if (v12)
        {
          std::__shared_weak_count::__release_weak(v12);
          uint64_t v9 = (uint64_t)*v8;
        }
        v10 += 16;
        if (v10 - v9 == 4096)
        {
          uint64_t v13 = (uint64_t)v8[1];
          ++v8;
          uint64_t v9 = v13;
          uint64_t v10 = v13;
        }
      }
      while (v10 != v11);
      unint64_t v4 = *(void ***)(a1 + 8);
      uint64_t v5 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v6 = 0;
  unint64_t v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v15 = *(void *)(a1 + 16);
      unint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v14 = v15 - (void)v4;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 128;
    goto LABEL_16;
  }
  if (v14 >> 3 == 2)
  {
    uint64_t v16 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v16;
  }
  std::deque<std::weak_ptr<turi::general_ifstream>>::shrink_to_fit((void **)a1);
  uint64_t result = std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::operator=(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void std::deque<std::weak_ptr<turi::general_ifstream>>::shrink_to_fit(void **a1)
{
  if (a1[5])
  {
    std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    BOOL v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      BOOL v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }
  std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::shrink_to_fit(a1);
}

void std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::shrink_to_fit(void **a1)
{
  BOOL v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    unint64_t v7 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
  unint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    unint64_t v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  unint64_t v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  uint64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<std::weak_ptr<turi::general_ifstream> *,std::allocator<std::weak_ptr<turi::general_ifstream> *>>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void std::shared_ptr<turi::general_ifstream>::shared_ptr[abi:ne180100]<turi::general_ifstream,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2240E1060(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::istream>::shared_ptr[abi:ne180100]<std::ifstream,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::general_ifstream *,std::shared_ptr<turi::general_ifstream>::__shared_ptr_default_delete<turi::general_ifstream,turi::general_ifstream>,std::allocator<turi::general_ifstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::general_ifstream *,std::shared_ptr<turi::general_ifstream>::__shared_ptr_default_delete<turi::general_ifstream,turi::general_ifstream>,std::allocator<turi::general_ifstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::vector<turi::v2_block_impl::block_info>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v8 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  std::vector<std::vector<float>>::__clear[abi:ne180100](a2);
  std::vector<std::vector<turi::v2_block_impl::block_info>>::resize(a2, v8);
  if (v8)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v8; ++i)
    {
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::v2_block_impl::block_info,true>::exec(a1, (void *)(*a2 + v6));
      v6 += 24;
    }
  }
}

void std::vector<std::vector<turi::v2_block_impl::block_info>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::v2_block_impl::block_info>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<turi::v2_block_impl::block_info>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<turi::v2_block_impl::block_info>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2240E1398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::v2_block_impl::block_info>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::v2_block_impl::block_info>>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::v2_block_impl::block_info>>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::v2_block_impl::block_info>>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::v2_block_impl::block_info>>,std::reverse_iterator<std::vector<turi::v2_block_impl::block_info>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::v2_block_impl::block_info,true>::exec(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v6 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    unint64_t v6 = 0;
  }
  a2[1] = *a2;
  std::vector<turi::v2_block_impl::block_info>::resize((uint64_t)a2, v6);
  uint64_t v7 = (void *)*a2;
  size_t v8 = a2[1] - *a2;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return (void *)std::istream::read();
  }
  uint64_t result = memcpy(v7, (const void *)(v9 + *(void *)(a1 + 24)), v8);
  *(void *)(a1 + 24) += v8;
  return result;
}

void std::vector<turi::v2_block_impl::block_info>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::v2_block_impl::block_info>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

void std::vector<turi::v2_block_impl::block_info>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      long long v13 = &v7[48 * a2];
      uint64_t v14 = 48 * a2;
      do
      {
        *((void *)v7 + 5) = 0;
        *(void *)uint64_t v7 = -1;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_OWORD *)(v7 + 24) = 0uLL;
        *((_WORD *)v7 + 20) = 0;
        v7 += 48;
        v14 -= 48;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    int64_t v15 = &v12[48 * v8];
    uint64_t v16 = &v15[48 * a2];
    uint64_t v17 = 48 * a2;
    uint64_t v18 = v15;
    do
    {
      *((void *)v18 + 5) = 0;
      *(void *)uint64_t v18 = -1;
      *(_OWORD *)(v18 + 8) = 0uLL;
      *(_OWORD *)(v18 + 24) = 0uLL;
      *((_WORD *)v18 + 20) = 0;
      v18 += 48;
      v17 -= 48;
    }
    while (v17);
    uint64_t v19 = &v12[48 * v11];
    uint64_t v21 = (char *)*a1;
    int64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *((_OWORD *)v20 - 3);
        long long v23 = *((_OWORD *)v20 - 2);
        *(_OWORD *)(v15 - 22) = *(_OWORD *)(v20 - 22);
        *((_OWORD *)v15 - 3) = v22;
        *((_OWORD *)v15 - 2) = v23;
        v15 -= 48;
        v20 -= 48;
      }
      while (v20 != v21);
      int64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

void __cxx_global_array_dtor_0()
{
  uint64_t v0 = 0xE80u;
  do
  {
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&turi::v2_block_impl::get_io_locks(void)::iolocks + v0 - 96, *(void **)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + v0 - 88));
    turi::mutex::~mutex((pthread_mutex_t *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + v0 - 168));
    turi::mutex::~mutex((pthread_mutex_t *)((char *)&turi::v2_block_impl::get_io_locks(void)::iolocks + v0 - 232));
    v0 -= 232;
  }
  while (v0);
}

float32x4_t turi::neural_net::image_box::normalize(float32x4_t *this, double a2, float a3)
{
  *((float *)&a2 + 1) = a3;
  float32x4_t result = vdivq_f32(*this, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  *this = result;
  return result;
}

float32x2_t turi::neural_net::image_box::clip(float32x2_t *a1, float32x2_t a2, float32_t a3, float32x2_t a4, float32_t a5)
{
  a2.f32[1] = a3;
  float32x2_t v5 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(a2, *a1), (int8x8_t)a2, (int8x8_t)*a1);
  float32x2_t v6 = vadd_f32(*a1, a1[1]);
  a4.f32[1] = a5;
  float32x2_t v7 = vadd_f32(a2, a4);
  float32x2_t result = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v7), (int8x8_t)v7, (int8x8_t)v6), v5);
  *a1 = v5;
  a1[1] = result;
  return result;
}

void std::vector<turi::neural_net::labeled_image>::resize(uint64_t *a1, unint64_t a2)
{
  BOOL v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 6;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      float32x2_t v6 = (void *)(*a1 + (a2 << 6));
      while (v3 != v6)
      {
        v3 -= 8;
        std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      a1[1] = (uint64_t)v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<turi::neural_net::labeled_image>::__append(a1, v5);
  }
}

void turi::neural_net::image_augmenter::result::~result(turi::neural_net::image_augmenter::result *this)
{
  BOOL v3 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_26D752D58;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::vector<turi::neural_net::labeled_image>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += a2 << 6;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v14 = v13;
    int64_t v15 = &v13[64 * v10];
    uint64_t v17 = &v13[64 * v12];
    bzero(v15, a2 << 6);
    uint64_t v16 = &v15[64 * a2];
    std::vector<turi::neural_net::labeled_image>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer(&v14);
  }
}

void sub_2240E1A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::neural_net::labeled_image>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::neural_net::labeled_image>,std::reverse_iterator<turi::neural_net::labeled_image*>,std::reverse_iterator<turi::neural_net::labeled_image*>,std::reverse_iterator<turi::neural_net::labeled_image*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::neural_net::labeled_image>,std::reverse_iterator<turi::neural_net::labeled_image*>,std::reverse_iterator<turi::neural_net::labeled_image*>,std::reverse_iterator<turi::neural_net::labeled_image*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - 32) = *(void *)(a3 + 32);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 8) = *(void *)(a3 + 56);
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 64;
      *((void *)&v14 + 1) -= 64;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::neural_net::labeled_image>,std::reverse_iterator<turi::neural_net::labeled_image*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::neural_net::labeled_image>,std::reverse_iterator<turi::neural_net::labeled_image*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void turi::v2_block_impl::block_writer::init(uint64_t a1, const std::string *a2, unint64_t a3, unint64_t a4)
{
  v38[2] = *MEMORY[0x263EF8340];
  std::vector<std::shared_ptr<turi::general_ofstream>>::resize((uint64_t *)(a1 + 144), a3);
  std::vector<turi::mutex>::resize((uint64_t *)(a1 + 168), a3);
  std::vector<unsigned long>::resize(a1 + 192, a3);
  *(void *)(a1 + 64) = 2 * a3;
  std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::resize((uint64_t *)(a1 + 304), a3);
  long long v8 = *(uint64_t **)(a1 + 304);
  uint64_t v9 = *(uint64_t **)(a1 + 312);
  while (v8 != v9)
  {
    std::vector<std::vector<turi::v2_block_impl::block_info>>::resize(v8, a4);
    v8 += 3;
  }
  std::string::operator=((std::string *)(a1 + 216), a2);
  *(_DWORD *)(a1 + 240) = 2;
  *(void *)(a1 + 248) = a3;
  std::vector<std::string>::resize((std::vector<std::string> *)(a1 + 256), a3);
  __n128 v35 = (uint64_t *)(a1 + 280);
  std::vector<turi::index_file_information>::resize((uint64_t *)(a1 + 280), a4);
  if (*(void *)(a1 + 288) != *(void *)(a1 + 280))
  {
    unint64_t v10 = 0;
    do
    {
      if (*(char *)(a1 + 239) >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 239);
      }
      else {
        size_t v11 = *(void *)(a1 + 224);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v37, v11 + 1);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v12 = &v37;
      }
      else {
        char v12 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if (v11)
      {
        if (*(char *)(a1 + 239) >= 0) {
          long long v13 = (const void *)(a1 + 216);
        }
        else {
          long long v13 = *(const void **)(a1 + 216);
        }
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 58;
      std::to_string(&v36, v10);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v14 = &v36;
      }
      else {
        long long v14 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v36.__r_.__value_.__l.__size_;
      }
      uint64_t v16 = std::string::append(&v37, (const std::string::value_type *)v14, size);
      std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
      v38[0] = v16->__r_.__value_.__l.__size_;
      *(void *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
      char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = *v35 + 144 * v10;
      if (*(char *)(v19 + 23) < 0) {
        operator delete(*(void **)v19);
      }
      uint64_t v20 = v38[0];
      *(void *)uint64_t v19 = v17;
      *(void *)(v19 + 8) = v20;
      *(void *)(v19 + 15) = *(void *)((char *)v38 + 7);
      *(unsigned char *)(v19 + 23) = v18;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      uint64_t v21 = *(void *)(a1 + 280);
      uint64_t v22 = v21 + 144 * v10;
      *(_DWORD *)(v22 + 24) = 2;
      *(void *)(v22 + 32) = *(void *)(a1 + 248);
      if (v22 + 96 != a1 + 256)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v22 + 96), *(std::string **)(a1 + 256), *(long long **)(a1 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 3));
        uint64_t v21 = *(void *)(a1 + 280);
      }
      uint64_t v23 = v21 + 144 * v10;
      uint64_t v24 = *(const void ***)(v23 + 96);
      unint64_t v25 = *(const void ***)(v23 + 104);
      if (v24 != v25)
      {
        do
        {
          if (*((char *)v24 + 23) >= 0) {
            size_t v26 = *((unsigned __int8 *)v24 + 23);
          }
          else {
            size_t v26 = (size_t)v24[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v37, v26 + 1);
          if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &v37;
          }
          else {
            uint64_t v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
          }
          if (v26)
          {
            if (*((char *)v24 + 23) >= 0) {
              uint64_t v28 = v24;
            }
            else {
              uint64_t v28 = *v24;
            }
            memmove(v27, v28, v26);
          }
          *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + v26) = 58;
          std::to_string(&v36, v10);
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v29 = &v36;
          }
          else {
            BOOL v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
          }
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v30 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v30 = v36.__r_.__value_.__l.__size_;
          }
          long long v31 = std::string::append(&v37, (const std::string::value_type *)v29, v30);
          std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
          v38[0] = v31->__r_.__value_.__l.__size_;
          *(void *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
          char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          if (*((char *)v24 + 23) < 0) {
            operator delete((void *)*v24);
          }
          *uint64_t v24 = (const void *)v32;
          v24[1] = (const void *)v38[0];
          *(const void **)((char *)v24 + 15) = *(const void **)((char *)v38 + 7);
          *((unsigned char *)v24 + 23) = v33;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          v24 += 3;
        }
        while (v24 != v25);
        uint64_t v21 = *v35;
      }
      unint64_t v34 = *(void *)(a1 + 248);
      v37.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::resize(v21 + 144 * v10++ + 72, v34, &v37);
    }
    while (v10 < 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 4));
  }
}

void sub_2240E1F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<turi::general_ofstream>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<turi::general_ofstream>>::__append(a1, v5);
  }
}

void std::vector<turi::mutex>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 6;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + (a2 << 6);
      while (v3 != v6)
        turi::mutex::~mutex((pthread_mutex_t *)(v3 - 64));
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<turi::mutex>::__append(a1, v5);
  }
}

void std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      long long v8 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<turi::index_file_information>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::index_file_information>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 144 * a2;
    while (v3 != v7)
    {
      v3 -= 144;
      std::allocator<turi::index_file_information>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::v2_block_impl::block_writer::open_segment(uint64_t a1, std::string::size_type a2)
{
  v4[2] = *MEMORY[0x263EF8340];
  v2.__r_.__value_.__r.__words[0] = a2;
  v4[0] = *(void *)(a1 + 248);
  if (v4[0] > a2)
  {
    if (!*(void *)(*(void *)(a1 + 144) + 16 * a2)) {
      operator new();
    }
    turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_1::operator()();
  }
  v3.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2;
  v3.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_0::operator()();
}

void sub_2240E24F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  MEMORY[0x22A614FA0](v28, 0x10B3C405FC8E1FCLL);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  std::string v2 = (void *)std::ostream::operator<<();
  std::string v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  BOOL v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_index_info.nsegments", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240E2704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  std::string v2 = (void *)std::ostream::operator<<();
  std::string v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_output_files[segmentid] == __null", 35);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    BOOL v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", "operator()", 53, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::v2_block_impl::block_writer::open_segment(unsigned long,std::string)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240E2904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::general_ofstream>::reset[abi:ne180100]<turi::general_ofstream,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::general_ofstream>::shared_ptr[abi:ne180100]<turi::general_ofstream,void>(&v2, a2);
}

uint64_t turi::v2_block_impl::block_writer::set_options(uint64_t result, uint64_t *a2, uint64_t a3)
{
  int v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 15) {
      return result;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v3 != 15)
  {
    return result;
  }
  if (*a2 == 0x5F656C6261736964 && *(uint64_t *)((char *)a2 + 7) == 0x676E69646461705FLL) {
    *(unsigned char *)(result + 352) = a3 != 0;
  }
  return result;
}

uint64_t turi::v2_block_impl::block_writer::write_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  unint64_t v9 = (int)LZ4_compressBound(*((_DWORD *)a5 + 4));
  turi::buffer_pool<std::vector<char>>::get_new_buffer((pthread_mutex_t *)a1, (uint64_t)&v40);
  unint64_t v10 = *(void *)(v40.n128_u64[0] + 8) - *(void *)v40.n128_u64[0];
  if (v9 <= v10)
  {
    if (v9 < v10) {
      *(void *)(v40.n128_u64[0] + 8) = *(void *)v40.n128_u64[0] + v9;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)v40.n128_u64[0], v9 - v10);
  }
  int v11 = LZ4_compress();
  float v12 = (float)(unint64_t)v11;
  float v13 = 0.9 * (float)*((unint64_t *)a5 + 2);
  if (v13 <= v12) {
    uint64_t v14 = *((void *)a5 + 2);
  }
  else {
    uint64_t v14 = v11;
  }
  *((void *)a5 + 4) = a5[2] & 0xFFFFFFFFFFFFFFFELL | (v13 > v12);
  *((void *)a5 + 1) = v14;
  if (*(unsigned char *)(a1 + 352)) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = ((v14 + 4095) & 0xFFFFFFFFFFFFF000) - v14;
  }
  if (v15 > 0xFFF) {
    turi::v2_block_impl::block_writer::write_block(unsigned long,unsigned long,char *,turi::v2_block_impl::block_info)::$_0::operator()();
  }
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 168) + (a2 << 6)));
  uint64_t v16 = *(void *)(a1 + 192);
  uint64_t v17 = *(void *)(v16 + 8 * a2);
  *(void *)a5 = v17;
  *(void *)(v16 + 8 * a2) = v15 + v14 + v17;
  uint64_t v18 = *(void *)(*(void *)(a1 + 280) + 144 * a3 + 72);
  *(void *)(v18 + 8 * a2) += *((void *)a5 + 3);
  std::ostream::write();
  std::ostream::write();
  uint64_t v19 = (void **)(*(void *)(*(void *)(a1 + 304) + 24 * a2) + 24 * a3);
  uint64_t v21 = v19 + 1;
  uint64_t v20 = v19[1];
  unint64_t v22 = (unint64_t)v19[2];
  if ((unint64_t)v20 >= v22)
  {
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (unsigned char *)*v19) >> 4);
    unint64_t v27 = v26 + 1;
    if (v26 + 1 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)*v19) >> 4);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v29 = 0x555555555555555;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29) {
      std::string::size_type v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(v19 + 2), v29);
    }
    else {
      std::string::size_type v30 = 0;
    }
    long long v31 = &v30[48 * v26];
    std::string::size_type v32 = &v30[48 * v29];
    long long v33 = *a5;
    long long v34 = a5[2];
    *((_OWORD *)v31 + 1) = a5[1];
    *((_OWORD *)v31 + 2) = v34;
    *(_OWORD *)long long v31 = v33;
    unint64_t v25 = v31 + 48;
    __n128 v35 = (char *)*v21;
    std::string v36 = (char *)*v19;
    if (*v21 != *v19)
    {
      do
      {
        long long v37 = *((_OWORD *)v35 - 3);
        long long v38 = *((_OWORD *)v35 - 2);
        *(_OWORD *)(v31 - 22) = *(_OWORD *)(v35 - 22);
        *((_OWORD *)v31 - 3) = v37;
        *((_OWORD *)v31 - 2) = v38;
        v31 -= 48;
        v35 -= 48;
      }
      while (v35 != v36);
      __n128 v35 = (char *)*v19;
    }
    *uint64_t v19 = v31;
    char *v21 = v25;
    v19[2] = v32;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    long long v23 = *a5;
    long long v24 = a5[2];
    v20[1] = a5[1];
    v20[2] = v24;
    *uint64_t v20 = v23;
    unint64_t v25 = v20 + 3;
  }
  char *v21 = v25;
  pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(a1 + 168) + (a2 << 6)));
  turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)a1, &v40);
  if (!turi::general_ofstream::good(*(turi::general_ofstream **)(*(void *)(a1 + 144) + 16 * a2))) {
    turi::v2_block_impl::block_writer::write_block(unsigned long,unsigned long,char *,turi::v2_block_impl::block_info)::$_1::operator()();
  }
  if (v40.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40.n128_u64[1]);
  }
  return v14;
}

void sub_2240E2DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void turi::v2_block_impl::block_writer::write_block(unsigned long,unsigned long,char *,turi::v2_block_impl::block_info)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"padding", 7);
  BOOL v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4096", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    float v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_block_writer.cpp", "operator()", 113, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  float v13 = v16;
  turi::v2_block_impl::block_writer::write_block(unsigned long,unsigned long,char *,turi::v2_block_impl::block_info)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240E2F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::block_writer::write_typed_block(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  turi::buffer_pool<std::vector<char>>::get_new_buffer(a1, (uint64_t)&v19);
  long long v15 = 0u;
  uint64_t v17 = 0;
  long long v16 = v19.n128_u64[0];
  *((void *)&v16 + 1) = *(void *)v19.n128_u64[0];
  uint64_t v18 = *(void *)(v19.n128_u64[0] + 8) - *((void *)&v16 + 1);
  turi::v2_block_impl::typed_encode(a4, (void *)a5, (uint64_t)&v15);
  uint64_t v10 = *(void *)v19.n128_u64[0];
  long long v11 = *(_OWORD *)(a5 + 16);
  v14[0] = *(_OWORD *)a5;
  v14[1] = v11;
  void v14[2] = *(_OWORD *)(a5 + 32);
  uint64_t v12 = turi::v2_block_impl::block_writer::write_block((uint64_t)a1, a2, a3, v10, v14);
  turi::buffer_pool<std::vector<char>>::release_buffer(a1, &v19);
  if (v19.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.n128_u64[1]);
  }
  return v12;
}

void sub_2240E3148(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::v2_block_impl::block_writer::close_segment(turi::v2_block_impl::block_writer *this, uint64_t a2)
{
  turi::v2_block_impl::block_writer::emit_footer(this, a2);
  unint64_t v4 = (void *)(*((void *)this + 18) + 16 * a2);
  BOOL v5 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = 0;
  v4[1] = 0;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

BOOL turi::v2_block_impl::block_writer::emit_footer(turi::v2_block_impl::block_writer *this, uint64_t a2)
{
  *(_OWORD *)unint64_t v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::vector<turi::v2_block_impl::block_info>,false>::exec((uint64_t)&v5, (uint64_t *)(*((void *)this + 38) + 24 * a2));
  std::ostream::write();
  std::ostream::write();
  free(v6[1]);
  BOOL result = turi::general_ofstream::good(*(turi::general_ofstream **)(*((void *)this + 18) + 16 * a2));
  if (!result) {
    turi::v2_block_impl::block_writer::emit_footer(unsigned long)::$_0::operator()();
  }
  return result;
}

uint64_t turi::v2_block_impl::block_writer::get_index_info(turi::v2_block_impl::block_writer *this)
{
  return (uint64_t)this + 216;
}

void turi::v2_block_impl::block_writer::write_index_file(turi::v2_block_impl::block_writer *this)
{
  uint64_t v1 = (_OWORD *)((char *)this + 216);
  if (*((char *)this + 239) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 27), *((void *)this + 28));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v1;
    __p.__r_.__value_.__r.__words[2] = *((void *)this + 29);
  }
  turi::write_array_group_index_file((uint64_t)&__p, (uint64_t)v1);
}

void sub_2240E32C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<turi::general_ofstream>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      float v13 = 0;
    }
    uint64_t v14 = v13;
    long long v15 = &v13[16 * v10];
    uint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    long long v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<turi::general_ofstream>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_2240E33D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::general_ofstream>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::general_ofstream>>,std::reverse_iterator<std::shared_ptr<turi::general_ofstream>*>,std::reverse_iterator<std::shared_ptr<turi::general_ofstream>*>,std::reverse_iterator<std::shared_ptr<turi::general_ofstream>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::general_ofstream>>,std::reverse_iterator<std::shared_ptr<turi::general_ofstream>*>,std::reverse_iterator<std::shared_ptr<turi::general_ofstream>*>,std::reverse_iterator<std::shared_ptr<turi::general_ofstream>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::general_ofstream>>,std::reverse_iterator<std::shared_ptr<turi::general_ofstream>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::general_ofstream>>,std::reverse_iterator<std::shared_ptr<turi::general_ofstream>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<turi::mutex>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    return std::vector<turi::mutex>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v19 = v4;
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    long long v15 = v13;
    long long v16 = &v13[64 * v10];
    uint64_t v17 = v16;
    uint64_t v18 = &v13[64 * v12];
    std::__split_buffer<turi::mutex>::__construct_at_end((uint64_t)&v15, a2);
    std::vector<turi::mutex>::__swap_out_circular_buffer(a1, &v15);
    return std::__split_buffer<turi::mutex>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2240E3624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::mutex>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<turi::mutex>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int v3 = *(pthread_mutex_t **)(result + 16);
  if (a2)
  {
    uint64_t v4 = a2 << 6;
    uint64_t v5 = &v3[a2];
    do
    {
      uint64_t v6 = pthread_mutex_init(v3, 0);
      uint64_t result = assert_msg(v6 == 0, v7, v6);
      ++v3;
      v4 -= 64;
    }
    while (v4);
    int v3 = v5;
  }
  *(void *)(v2 + 16) = v3;
  return result;
}

void sub_2240E36AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::mutex>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::mutex>,std::reverse_iterator<turi::mutex*>,std::reverse_iterator<turi::mutex*>,std::reverse_iterator<turi::mutex*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::mutex>,std::reverse_iterator<turi::mutex*>,std::reverse_iterator<turi::mutex*>,std::reverse_iterator<turi::mutex*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = pthread_mutex_init((pthread_mutex_t *)(a7 - 64 + v11), 0);
      assert_msg(v12 == 0, v13, v12);
      v11 -= 64;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2240E37BC(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 64)
    turi::mutex::~mutex((pthread_mutex_t *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<turi::mutex>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    turi::mutex::~mutex((pthread_mutex_t *)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v15 = v12;
    long long v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(&v15);
  }
}

void sub_2240E3980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<turi::v2_block_impl::block_info>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<turi::v2_block_impl::block_info>>>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<turi::v2_block_impl::block_info>>>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<turi::v2_block_impl::block_info>>>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<turi::v2_block_impl::block_info>>>,std::reverse_iterator<std::vector<std::vector<turi::v2_block_impl::block_info>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::vector<turi::index_file_information>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 144 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 24) = -1;
        *(void *)(v7 + 136) = 0;
        *(void *)(v7 + 128) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(void *)(v7 + 112) = 0;
        *(void *)(v7 + 120) = v7 + 128;
        v7 += 144;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1C71C71C71C71C7) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v9;
    }
    void v16[4] = result;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::index_file_information>>((uint64_t)result, v11);
    }
    else {
      char v12 = 0;
    }
    long long v14 = &v12[144 * v8];
    v16[0] = v12;
    v16[1] = v14;
    void v16[3] = &v12[144 * v11];
    long long v15 = &v14[144 * a2];
    do
    {
      *(_OWORD *)long long v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 6) = -1;
      *((void *)v14 + 17) = 0;
      *((void *)v14 + 16) = 0;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((void *)v14 + 14) = 0;
      *((void *)v14 + 15) = v14 + 128;
      v14 += 144;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::index_file_information>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::index_file_information>::~__split_buffer(v16);
  }
  return result;
}

void sub_2240E3C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::index_file_information>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::general_ofstream>::shared_ptr[abi:ne180100]<turi::general_ofstream,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2240E3CF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::ostream>::shared_ptr[abi:ne180100]<boost::iostreams::stream<turi::fileio_impl::cache_stream_sink,std::char_traits<char>,std::allocator<char>>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::general_ofstream *,std::shared_ptr<turi::general_ofstream>::__shared_ptr_default_delete<turi::general_ofstream,turi::general_ofstream>,std::allocator<turi::general_ofstream>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::general_ofstream *,std::shared_ptr<turi::general_ofstream>::__shared_ptr_default_delete<turi::general_ofstream,turi::general_ofstream>,std::allocator<turi::general_ofstream>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::vector<turi::v2_block_impl::block_info>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v10 = 2 * v6 + 16;
      *(void *)(a1 + 40) = v10;
      unint64_t v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        uint64_t result = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::v2_block_impl::block_info,true>::exec(a1, (const void **)(v7 + v8));
      ++v9;
      uint64_t v7 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::v2_block_impl::block_info,true>::exec(uint64_t a1, const void **a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 4);
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v12 = 2 * v5 + 16;
      *(void *)(a1 + 40) = v12;
      BOOL v13 = *(char ***)(a1 + 16);
      if (v13)
      {
        unint64_t v6 = *v13;
        size_t v14 = v13[1] - *v13;
        BOOL v15 = v12 >= v14;
        std::vector<char>::size_type v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
          unint64_t v6 = **(char ***)(a1 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      unint64_t v6 = *(char **)(a1 + 24);
    }
    *(void *)&v6[*(void *)(a1 + 32)] = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  size_t v8 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  if (*(void *)a1) {
    return (void *)std::ostream::write();
  }
  size_t v10 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + v8 > v10)
  {
    size_t v17 = 2 * (v10 + v8);
    *(void *)(a1 + 40) = v17;
    uint64_t v18 = *(char ***)(a1 + 16);
    if (v18)
    {
      unint64_t v11 = *v18;
      size_t v19 = v18[1] - *v18;
      BOOL v20 = v17 >= v19;
      std::vector<char>::size_type v21 = v17 - v19;
      if (v21 != 0 && v20)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
        unint64_t v11 = **(char ***)(a1 + 16);
      }
      else if (!v20)
      {
        v18[1] = &v11[v17];
      }
    }
    else
    {
      unint64_t v11 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    unint64_t v11 = *(char **)(a1 + 24);
  }
  uint64_t result = memcpy(&v11[*(void *)(a1 + 32)], v7, v8);
  *(void *)(a1 + 32) += v8;
  return result;
}

double turi::v2_block_impl::encoded_block::encoded_block(turi::v2_block_impl::encoded_block *this)
{
  *(void *)this = -1;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_WORD *)this + 20) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  return result;
}

void turi::v2_block_impl::encoded_block::init(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v8 = *a2;
  *(_OWORD *)unint64_t v9 = a2[1];
  *(_OWORD *)&v9[10] = *(long long *)((char *)a2 + 26);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 26) = *(_OWORD *)&v9[10];
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)(a1 + 64) = *((void *)a2 + 3);
}

void turi::v2_block_impl::encoded_block::get_range(turi::v2_block_impl::encoded_block *this@<X0>, turi::v2_block_impl::encoded_block_range *a2@<X8>)
{
}

double turi::v2_block_impl::encoded_block::release(turi::v2_block_impl::encoded_block *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = -1;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_WORD *)this + 20) = 0;
  return result;
}

void turi::v2_block_impl::encoded_block_range::encoded_block_range(turi::v2_block_impl::encoded_block_range *this, const turi::v2_block_impl::encoded_block *a2)
{
  long long v2 = *(_OWORD *)a2;
  long long v3 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v3;
  *(_OWORD *)this = v2;
  uint64_t v4 = *((void *)a2 + 7);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 8) = 0;
  operator new();
}

void sub_2240E41F8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x22A614FA0](v4, 0x1072C409735D950);
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100](v2, 0);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 56);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::encoded_block_range::release(turi::v2_block_impl::typed_decode_stream **this)
{
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100](this + 8, 0);
  long long v2 = (std::__shared_weak_count *)this[7];
  this[6] = 0;
  this[7] = 0;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void turi::v2_block_impl::encoded_block_range::~encoded_block_range(turi::v2_block_impl::typed_decode_stream **this)
{
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100](this + 8, 0);
  long long v2 = (std::__shared_weak_count *)this[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

unint64_t turi::v2_block_impl::encoded_block_range::decode_to(turi::v2_block_impl::encoded_block_range *this, turi::flexible_type *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 8);
  v5[0] = (uint64_t)a2;
  v5[1] = a3;
  return turi::v2_block_impl::typed_decode_stream::read(v3, v5, 0);
}

unint64_t turi::v2_block_impl::encoded_block_range::skip(unint64_t this, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(this + 64);
    v3[0] = 0;
    v3[1] = 0;
    return turi::v2_block_impl::typed_decode_stream::read(v2, v3, a2);
  }
  return this;
}

unint64_t *turi::v2_block_impl::encode_number(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v11[128] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = v4 >> 4;
    do
    {
      unint64_t v8 = 0;
      uint64_t v9 = v3 + 16 * v6;
      do
      {
        if (*(unsigned char *)(v9 + 12) != 7) {
          v11[v8++] = *(void *)v9;
        }
        if (++v6 >= v7) {
          break;
        }
        v9 += 16;
      }
      while (v8 < 0x80);
      if (!v8) {
        break;
      }
      double result = turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
      uint64_t v3 = *a3;
      unint64_t v7 = (a3[1] - *a3) >> 4;
    }
    while (v6 < v7);
  }
  return result;
}

unint64_t *turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>()
{
  double result = (unint64_t *)MEMORY[0x270FA5388]();
  v125[127] = *MEMORY[0x263EF8340];
  if (v1)
  {
    uint64_t v3 = v2;
    unint64_t v4 = v1;
    uint64_t v5 = 0;
    unint64_t v6 = *result;
    unint64_t v7 = *result;
    while (1)
    {
      unint64_t v8 = result[v5];
      if (v8 < v7) {
        unint64_t v7 = result[v5];
      }
      if (v5 && v8 < result[v5 - 1]) {
        break;
      }
      if (v1 == ++v5)
      {
        unint64_t v9 = v6 - v7;
        unint64_t v124 = v6 - v7;
        unint64_t v122 = v6;
        if (v1 < 2)
        {
          unint64_t v10 = 0;
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = v1 - 1;
          size_t v12 = v125;
          BOOL v13 = (unint64_t *)&v123;
          size_t v14 = result + 1;
          do
          {
            unint64_t v15 = *v14++;
            unint64_t v16 = v15 - v6;
            *v13++ = v16;
            v10 |= v16;
            *v12++ = v15 - v7;
            v9 |= v15 - v7;
            unint64_t v6 = v15;
            --v11;
          }
          while (v11);
        }
        int v27 = 64 - __clz(v10);
        int v28 = 255;
        goto LABEL_23;
      }
    }
    unint64_t v9 = v6 - v7;
    unint64_t v124 = v6 - v7;
    unint64_t v120 = v6;
    if (v1 < 2)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = 0;
      unint64_t v18 = v1 - 1;
      size_t v19 = v125;
      BOOL v20 = &v121;
      std::vector<char>::size_type v21 = result + 1;
      do
      {
        unint64_t v23 = *v21++;
        unint64_t v22 = v23;
        uint64_t v24 = v23 - v6;
        if (v24 >= 0) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = -v24;
        }
        uint64_t v26 = 2 * v25 + (v24 >> 63);
        *v20++ = v26;
        v17 |= v26;
        *v19++ = v22 - v7;
        v9 |= v22 - v7;
        unint64_t v6 = v22;
        --v18;
      }
      while (v18);
    }
    int v28 = 64 - __clz(v17);
    int v27 = 255;
LABEL_23:
    int v29 = __clz(v9);
    int v30 = 64 - v29;
    unsigned int v31 = (64 - v29);
    BOOL v32 = v31 > v27 || v31 > v28;
    int v33 = !v32;
    if (v32)
    {
      if (v27 > v30
        || v27 > v28)
      {
        int v34 = 0;
        long long v37 = &v120;
        int v36 = 2;
        int v35 = 1;
      }
      else
      {
        int v35 = 0;
        long long v37 = &v122;
        int v34 = 1;
        int v28 = v27;
        int v36 = 1;
      }
    }
    else
    {
      int v34 = 0;
      int v35 = 0;
      int v36 = 0;
      long long v37 = &v124;
      int v28 = v30;
    }
    unsigned int v38 = (v28 - 1) | (((v28 - 1) & 0xFEu) >> 1);
    unsigned int v39 = v38 | ((v38 & 0xFC) >> 2) | (((v38 | ((v38 & 0xFC) >> 2)) & 0xF0) >> 4);
    int v40 = (v38 | ((v38 & 0xFC) >> 2) | (((v38 | ((v38 & 0xFC) >> 2)) & 0xF0) >> 4))
        + 1;
    unsigned int v41 = ((v38 | ((v38 & 0xFC) >> 2) | (((v38 | ((v38 & 0xFC) >> 2)) & 0xF0) >> 4))
                          + 1);
    unsigned int v42 = (v36 | 0x20) - 4 * __clz(v41) + 96;
    if (v41 == v40) {
      LOBYTE(v36) = v42;
    }
    if (*(void *)v2)
    {
      double result = (unint64_t *)std::ostream::write();
      if (v33)
      {
LABEL_39:
        double result = (unint64_t *)turi::integer_pack::variable_encode<turi::oarchive>((turi::oarchive *)v3, v7);
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v43 = *(void *)(v2 + 40);
      if (*(void *)(v2 + 32) + 1 > v43)
      {
        char v118 = v36;
        size_t v78 = 2 * v43 + 2;
        *(void *)(v2 + 40) = v78;
        uint64_t v79 = *(void *)(v2 + 16);
        if (v79)
        {
          double result = *(unint64_t **)v79;
          size_t v80 = *(void *)(v79 + 8) - *(void *)v79;
          BOOL v81 = v78 >= v80;
          std::vector<char>::size_type v82 = v78 - v80;
          if (v82 != 0 && v81)
          {
            std::vector<char>::__append(*(std::vector<char> **)(v2 + 16), v82);
            double result = **(unint64_t ***)(v3 + 16);
          }
          else if (!v81)
          {
            *(void *)(v79 + 8) = (char *)result + v78;
          }
        }
        else
        {
          double result = (unint64_t *)malloc_type_realloc(*(void **)(v2 + 24), v78, 0xF6EA6B1uLL);
        }
        *(void *)(v3 + 24) = result;
        LOBYTE(v36) = v118;
      }
      else
      {
        double result = *(unint64_t **)(v2 + 24);
      }
      *((unsigned char *)result + (*(void *)(v3 + 32))++) = v36;
      if (v33) {
        goto LABEL_39;
      }
    }
    if ((v34 | v35) == 1)
    {
      double result = (unint64_t *)turi::integer_pack::variable_encode<turi::oarchive>((turi::oarchive *)v3, *v37++);
      --v4;
    }
LABEL_45:
    if (!(_BYTE)v40) {
      return result;
    }
    if (v39 <= 0xEu)
    {
      switch((char)v39)
      {
        case 0:
          unint64_t v44 = (v4 + 7) >> 3;
          uint64_t v45 = __src;
          char v46 = 0;
          switch(v4 & 7)
          {
            case 1uLL:
              goto LABEL_118;
            case 2uLL:
              goto LABEL_117;
            case 3uLL:
              goto LABEL_116;
            case 4uLL:
              goto LABEL_115;
            case 5uLL:
              goto LABEL_114;
            case 6uLL:
              goto LABEL_113;
            case 7uLL:
              goto LABEL_112;
            default:
              do
              {
                unint64_t v88 = *v37++;
                char v46 = v88;
LABEL_112:
                unint64_t v89 = *v37++;
                v46 |= 2 * (_BYTE)v89;
LABEL_113:
                unint64_t v90 = *v37++;
                v46 |= 4 * (_BYTE)v90;
LABEL_114:
                unint64_t v91 = *v37++;
                v46 |= 8 * (_BYTE)v91;
LABEL_115:
                unint64_t v92 = *v37++;
                v46 |= 16 * (_BYTE)v92;
LABEL_116:
                unint64_t v93 = *v37++;
                v46 |= 32 * (_BYTE)v93;
LABEL_117:
                unint64_t v94 = *v37++;
                v46 |= (_BYTE)v94 << 6;
LABEL_118:
                int v95 = *(_DWORD *)v37++;
                *v45++ = v46 | ((_BYTE)v95 << 7);
                --v44;
              }
              while (v44);
              size_t v63 = v45 - __src;
              if (*(void *)v3) {
                return (unint64_t *)std::ostream::write();
              }
              size_t v96 = *(void *)(v3 + 40);
              if (*(void *)(v3 + 32) + v63 <= v96) {
                goto LABEL_127;
              }
              size_t v65 = 2 * (v96 + v63);
              *(void *)(v3 + 40) = v65;
              uint64_t v66 = *(char ***)(v3 + 16);
              if (!v66) {
                goto LABEL_105;
              }
              char v67 = *v66;
              size_t v97 = v66[1] - *v66;
              BOOL v69 = v65 >= v97;
              std::vector<char>::size_type v70 = v65 - v97;
              if (v70 == 0 || !v69) {
                goto LABEL_131;
              }
              goto LABEL_163;
          }
        case 1:
          unint64_t v51 = (v4 + 7) >> 3;
          uint64_t v52 = __src;
          char v53 = 0;
          switch(v4 & 7)
          {
            case 1uLL:
              goto LABEL_141;
            case 2uLL:
              goto LABEL_140;
            case 3uLL:
              goto LABEL_139;
            case 4uLL:
              goto LABEL_138;
            case 5uLL:
              goto LABEL_137;
            case 6uLL:
              goto LABEL_136;
            case 7uLL:
              goto LABEL_135;
            default:
              do
              {
                unint64_t v98 = *v37++;
                char v53 = v98;
LABEL_135:
                unint64_t v99 = *v37++;
                v53 |= 4 * (_BYTE)v99;
LABEL_136:
                unint64_t v100 = *v37++;
                v53 |= 16 * (_BYTE)v100;
LABEL_137:
                int v101 = *(_DWORD *)v37++;
                *v52++ = v53 | ((_BYTE)v101 << 6);
LABEL_138:
                unint64_t v102 = *v37++;
                char v53 = v102;
LABEL_139:
                unint64_t v103 = *v37++;
                v53 |= 4 * (_BYTE)v103;
LABEL_140:
                unint64_t v104 = *v37++;
                v53 |= 16 * (_BYTE)v104;
LABEL_141:
                int v105 = *(_DWORD *)v37++;
                *v52++ = v53 | ((_BYTE)v105 << 6);
                --v51;
              }
              while (v51);
              size_t v63 = v52 - __src;
              if (*(void *)v3) {
                return (unint64_t *)std::ostream::write();
              }
              size_t v106 = *(void *)(v3 + 40);
              if (*(void *)(v3 + 32) + v63 <= v106) {
                goto LABEL_127;
              }
              size_t v65 = 2 * (v106 + v63);
              *(void *)(v3 + 40) = v65;
              uint64_t v66 = *(char ***)(v3 + 16);
              if (!v66) {
                goto LABEL_105;
              }
              char v67 = *v66;
              size_t v107 = v66[1] - *v66;
              BOOL v69 = v65 >= v107;
              std::vector<char>::size_type v70 = v65 - v107;
              if (v70 == 0 || !v69) {
                goto LABEL_131;
              }
              goto LABEL_163;
          }
        case 3:
          unint64_t v54 = (v4 + 7) >> 3;
          long long v55 = __src;
          char v56 = 0;
          switch(v4 & 7)
          {
            case 1uLL:
              goto LABEL_157;
            case 2uLL:
              goto LABEL_156;
            case 3uLL:
              goto LABEL_155;
            case 4uLL:
              goto LABEL_154;
            case 5uLL:
              goto LABEL_153;
            case 6uLL:
              goto LABEL_152;
            case 7uLL:
              goto LABEL_151;
            default:
              do
              {
                unint64_t v108 = *v37++;
                char v56 = v108;
LABEL_151:
                int v109 = *(_DWORD *)v37++;
                *v55++ = v56 | (16 * v109);
LABEL_152:
                unint64_t v110 = *v37++;
                char v56 = v110;
LABEL_153:
                int v111 = *(_DWORD *)v37++;
                *v55++ = v56 | (16 * v111);
LABEL_154:
                unint64_t v112 = *v37++;
                char v56 = v112;
LABEL_155:
                int v113 = *(_DWORD *)v37++;
                *v55++ = v56 | (16 * v113);
LABEL_156:
                unint64_t v114 = *v37++;
                char v56 = v114;
LABEL_157:
                int v115 = *(_DWORD *)v37++;
                *v55++ = v56 | (16 * v115);
                --v54;
              }
              while (v54);
              size_t v63 = v55 - __src;
              if (*(void *)v3) {
                return (unint64_t *)std::ostream::write();
              }
              size_t v116 = *(void *)(v3 + 40);
              if (*(void *)(v3 + 32) + v63 <= v116) {
                goto LABEL_127;
              }
              size_t v65 = 2 * (v116 + v63);
              *(void *)(v3 + 40) = v65;
              uint64_t v66 = *(char ***)(v3 + 16);
              if (!v66) {
                goto LABEL_105;
              }
              char v67 = *v66;
              size_t v117 = v66[1] - *v66;
              BOOL v69 = v65 >= v117;
              std::vector<char>::size_type v70 = v65 - v117;
              if (v70 == 0 || !v69) {
                goto LABEL_131;
              }
              goto LABEL_163;
          }
        case 7:
          if (v4)
          {
            uint64_t v48 = 8 * v4;
            uint64_t v49 = __src;
            do
            {
              unint64_t v50 = *v37++;
              *v49++ = v50;
              v48 -= 8;
            }
            while (v48);
          }
          else
          {
            uint64_t v49 = __src;
          }
          size_t v63 = v49 - __src;
          if (*(void *)v3) {
            return (unint64_t *)std::ostream::write();
          }
          size_t v64 = *(void *)(v3 + 40);
          if (*(void *)(v3 + 32) + v63 <= v64) {
            goto LABEL_127;
          }
          size_t v65 = 2 * (v64 + v63);
          *(void *)(v3 + 40) = v65;
          uint64_t v66 = *(char ***)(v3 + 16);
          if (!v66) {
            goto LABEL_105;
          }
          char v67 = *v66;
          size_t v68 = v66[1] - *v66;
          BOOL v69 = v65 >= v68;
          std::vector<char>::size_type v70 = v65 - v68;
          if (v70 == 0 || !v69) {
            goto LABEL_131;
          }
          goto LABEL_163;
        default:
          goto LABEL_110;
      }
    }
    switch(v39)
    {
      case 0xFu:
        if (v4)
        {
          uint64_t v60 = 8 * v4;
          char v61 = __src;
          do
          {
            unint64_t v62 = *v37++;
            *(_WORD *)char v61 = v62;
            v61 += 2;
            v60 -= 8;
          }
          while (v60);
        }
        else
        {
          char v61 = __src;
        }
        size_t v63 = v61 - __src;
        if (!*(void *)v3)
        {
          size_t v73 = *(void *)(v3 + 40);
          if (*(void *)(v3 + 32) + v63 > v73)
          {
            size_t v65 = 2 * (v73 + v63);
            *(void *)(v3 + 40) = v65;
            uint64_t v66 = *(char ***)(v3 + 16);
            if (v66)
            {
              char v67 = *v66;
              size_t v74 = v66[1] - *v66;
              BOOL v69 = v65 >= v74;
              std::vector<char>::size_type v70 = v65 - v74;
              if (v70 == 0 || !v69)
              {
LABEL_131:
                if (!v69) {
                  v66[1] = &v67[v65];
                }
                goto LABEL_133;
              }
LABEL_163:
              std::vector<char>::__append(*(std::vector<char> **)(v3 + 16), v70);
              char v67 = **(char ***)(v3 + 16);
LABEL_133:
              *(void *)(v3 + 24) = v67;
              goto LABEL_128;
            }
            goto LABEL_105;
          }
LABEL_127:
          char v67 = *(char **)(v3 + 24);
          goto LABEL_128;
        }
        break;
      case 0x1Fu:
        if (v4)
        {
          uint64_t v57 = 8 * v4;
          std::string::size_type v58 = __src;
          do
          {
            unint64_t v59 = *v37++;
            *(_DWORD *)std::string::size_type v58 = v59;
            v58 += 4;
            v57 -= 8;
          }
          while (v57);
        }
        else
        {
          std::string::size_type v58 = __src;
        }
        size_t v63 = v58 - __src;
        if (!*(void *)v3)
        {
          size_t v71 = *(void *)(v3 + 40);
          if (*(void *)(v3 + 32) + v63 > v71)
          {
            size_t v65 = 2 * (v71 + v63);
            *(void *)(v3 + 40) = v65;
            uint64_t v66 = *(char ***)(v3 + 16);
            if (v66)
            {
              char v67 = *v66;
              size_t v72 = v66[1] - *v66;
              BOOL v69 = v65 >= v72;
              std::vector<char>::size_type v70 = v65 - v72;
              if (v70 == 0 || !v69) {
                goto LABEL_131;
              }
              goto LABEL_163;
            }
LABEL_105:
            char v67 = (char *)malloc_type_realloc(*(void **)(v3 + 24), v65, 0xF6EA6B1uLL);
            *(void *)(v3 + 24) = v67;
LABEL_128:
            double result = (unint64_t *)memcpy(&v67[*(void *)(v3 + 32)], __src, v63);
            size_t v77 = *(void *)(v3 + 32) + v63;
LABEL_129:
            *(void *)(v3 + 32) = v77;
            return result;
          }
          goto LABEL_127;
        }
        break;
      case 0x3Fu:
        size_t v47 = 8 * v4;
        if (*(void *)v3) {
          return (unint64_t *)std::ostream::write();
        }
        size_t v75 = *(void *)(v3 + 40);
        if (*(void *)(v3 + 32) + v47 > v75)
        {
          size_t v83 = 2 * (v75 + v47);
          *(void *)(v3 + 40) = v83;
          uint64_t v84 = *(char ***)(v3 + 16);
          if (v84)
          {
            char v76 = *v84;
            size_t v85 = v84[1] - *v84;
            BOOL v86 = v83 >= v85;
            std::vector<char>::size_type v87 = v83 - v85;
            if (v87 != 0 && v86)
            {
              std::vector<char>::__append(*(std::vector<char> **)(v3 + 16), v87);
              char v76 = **(char ***)(v3 + 16);
            }
            else if (!v86)
            {
              v84[1] = &v76[v83];
            }
            *(void *)(v3 + 24) = v76;
          }
          else
          {
            char v76 = (char *)malloc_type_realloc(*(void **)(v3 + 24), v83, 0xF6EA6B1uLL);
            *(void *)(v3 + 24) = v76;
          }
        }
        else
        {
          char v76 = *(char **)(v3 + 24);
        }
        double result = (unint64_t *)memcpy(&v76[*(void *)(v3 + 32)], v37, v47);
        size_t v77 = *(void *)(v3 + 32) + v47;
        goto LABEL_129;
      default:
LABEL_110:
        turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>(unsigned long long const*,unsigned long,turi::oarchive &)::{lambda(void)#1}::operator()();
    }
    return (unint64_t *)std::ostream::write();
  }
  return result;
}

turi::iarchive *turi::v2_block_impl::decode_number(turi::iarchive *this, uint64_t *a2, uint64_t a3)
{
  __dst[128] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    unint64_t v6 = this;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = ((v4 - *a2) >> 4) - a3;
    do
    {
      if (*(unsigned char *)(v3 + v7 + 12) != 7)
      {
        if (v10 >= v9)
        {
          if (v11 >= 0x80) {
            unint64_t v9 = 128;
          }
          else {
            unint64_t v9 = v11;
          }
          this = turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(v6, v9, __dst);
          uint64_t v3 = *a2;
          *(void *)(*a2 + v7) = __dst[0];
          --v11;
          uint64_t v4 = a2[1];
          unint64_t v10 = 1;
        }
        else
        {
          *(void *)(v3 + v7) = __dst[v10++];
          --v11;
        }
      }
      ++v8;
      v7 += 16;
    }
    while (v8 < (v4 - v3) >> 4);
  }
  return this;
}

turi::iarchive *turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(turi::iarchive *this, uint64_t a2, void *__dst)
{
  *(void *)&v68[1023] = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = this;
    unsigned __int8 v66 = 0;
    uint64_t v6 = *((void *)this + 2);
    if (v6)
    {
      uint64_t v7 = *((void *)this + 3);
      unsigned int v8 = *(unsigned __int8 *)(v6 + v7);
      unsigned __int8 v66 = v8;
      *((void *)this + 3) = v7 + 1;
    }
    else
    {
      std::istream::read();
      unsigned int v8 = v66;
    }
    uint64_t v65 = 0;
    unsigned int v9 = (v8 >> 2) - 1;
    if (v8 < 4 || v9 >= 8)
    {
      this = turi::integer_pack::variable_decode<turi::iarchive>(v5, &v65);
      uint64_t v11 = v65;
      do
      {
        *__dst++ = v11;
        --v4;
      }
      while (v4);
    }
    else
    {
      int v12 = 1 << v9;
      int v13 = v8 & 3;
      if ((v8 & 3) != 0)
      {
        if (v13 != 3)
        {
          turi::integer_pack::variable_decode<turi::iarchive>(v5, __dst++);
          --v4;
        }
      }
      else
      {
        turi::integer_pack::variable_decode<turi::iarchive>(v5, &v65);
      }
      int v14 = v12;
      size_t v15 = (v4 * (unint64_t)v12 + 7) >> 3;
      if (v14 <= 15)
      {
        switch(v14)
        {
          case 1:
            uint64_t v16 = *((void *)v5 + 2);
            if (v16)
            {
              uint64_t v17 = *((void *)v5 + 3);
              this = (turi::iarchive *)memcpy(&__dsta, (const void *)(v16 + v17), v15);
              *((void *)v5 + 3) = v17 + v15;
            }
            else
            {
              this = (turi::iarchive *)std::istream::read();
            }
            unint64_t v33 = (unint64_t)(v4 + 7) >> 3;
            int v34 = v68;
            unsigned int v35 = __dsta >> (-(char)v4 & 7);
            int v36 = __dst;
            switch(v4 & 7)
            {
              case 1:
                goto LABEL_67;
              case 2:
                goto LABEL_66;
              case 3:
                goto LABEL_65;
              case 4:
                goto LABEL_64;
              case 5:
                goto LABEL_63;
              case 6:
                goto LABEL_62;
              case 7:
                goto LABEL_61;
              default:
                while (1)
                {
                  *v36++ = v35 & 1;
                  unsigned int v35 = v35 >> 1;
LABEL_61:
                  *v36++ = v35 & 1;
                  v35 >>= 1;
LABEL_62:
                  *v36++ = v35 & 1;
                  v35 >>= 1;
LABEL_63:
                  *v36++ = v35 & 1;
                  v35 >>= 1;
LABEL_64:
                  *v36++ = v35 & 1;
                  v35 >>= 1;
LABEL_65:
                  *v36++ = v35 & 1;
                  v35 >>= 1;
LABEL_66:
                  *v36++ = v35 & 1;
                  v35 >>= 1;
LABEL_67:
                  *int v36 = v35 & 1;
                  if (!--v33) {
                    break;
                  }
                  ++v36;
                  char v53 = *v34++;
                  LOBYTE(v35) = v53;
                }
                break;
            }
            goto LABEL_88;
          case 2:
            uint64_t v25 = *((void *)v5 + 2);
            if (v25)
            {
              uint64_t v26 = *((void *)v5 + 3);
              this = (turi::iarchive *)memcpy(&__dsta, (const void *)(v25 + v26), v15);
              *((void *)v5 + 3) = v26 + v15;
            }
            else
            {
              this = (turi::iarchive *)std::istream::read();
            }
            unint64_t v45 = (unint64_t)(v4 + 7) >> 3;
            char v46 = v68;
            unsigned int v47 = __dsta >> (2 * ((3 * v4) & 3));
            uint64_t v48 = __dst;
            switch(v4 & 7)
            {
              case 1:
                goto LABEL_77;
              case 2:
                goto LABEL_76;
              case 3:
                goto LABEL_75;
              case 4:
                goto LABEL_74;
              case 5:
                goto LABEL_73;
              case 6:
                goto LABEL_72;
              case 7:
                goto LABEL_71;
              default:
                while (1)
                {
                  *v48++ = v47 & 3;
                  unsigned int v47 = v47 >> 2;
LABEL_71:
                  *v48++ = v47 & 3;
                  v47 >>= 2;
LABEL_72:
                  *v48++ = v47 & 3;
                  v47 >>= 2;
LABEL_73:
                  *v48++ = v47 & 3;
                  unsigned int v55 = *v46++;
                  unsigned int v47 = v55;
LABEL_74:
                  *v48++ = v47 & 3;
                  v47 >>= 2;
LABEL_75:
                  *v48++ = v47 & 3;
                  v47 >>= 2;
LABEL_76:
                  *v48++ = v47 & 3;
                  v47 >>= 2;
LABEL_77:
                  *uint64_t v48 = v47 & 3;
                  if (!--v45) {
                    break;
                  }
                  ++v48;
                  char v54 = *v46++;
                  LOBYTE(v47) = v54;
                }
                break;
            }
            goto LABEL_88;
          case 4:
            uint64_t v27 = *((void *)v5 + 2);
            if (v27)
            {
              uint64_t v28 = *((void *)v5 + 3);
              this = (turi::iarchive *)memcpy(&__dsta, (const void *)(v27 + v28), v15);
              *((void *)v5 + 3) = v28 + v15;
            }
            else
            {
              this = (turi::iarchive *)std::istream::read();
            }
            unint64_t v49 = (unint64_t)(v4 + 7) >> 3;
            unint64_t v50 = v68;
            unsigned int v51 = __dsta >> (4 * (v4 & 1));
            uint64_t v52 = __dst;
            switch(v4 & 7)
            {
              case 1:
                goto LABEL_87;
              case 2:
                goto LABEL_86;
              case 3:
                goto LABEL_85;
              case 4:
                goto LABEL_84;
              case 5:
                goto LABEL_83;
              case 6:
                goto LABEL_82;
              case 7:
                goto LABEL_81;
              default:
                while (1)
                {
                  *v52++ = v51 & 0xF;
                  LOBYTE(v51) = v51 >> 4;
LABEL_81:
                  *v52++ = v51 & 0xF;
                  unsigned int v57 = *v50++;
                  unsigned int v51 = v57;
LABEL_82:
                  *v52++ = v51 & 0xF;
                  v51 >>= 4;
LABEL_83:
                  *v52++ = v51 & 0xF;
                  unsigned int v58 = *v50++;
                  unsigned int v51 = v58;
LABEL_84:
                  *v52++ = v51 & 0xF;
                  v51 >>= 4;
LABEL_85:
                  *v52++ = v51 & 0xF;
                  unsigned int v59 = *v50++;
                  unsigned int v51 = v59;
LABEL_86:
                  *v52++ = v51 & 0xF;
                  v51 >>= 4;
LABEL_87:
                  *uint64_t v52 = v51 & 0xF;
                  if (!--v49) {
                    break;
                  }
                  ++v52;
                  char v56 = *v50++;
                  LOBYTE(v51) = v56;
                }
                break;
            }
            goto LABEL_88;
          case 8:
            uint64_t v23 = *((void *)v5 + 2);
            if (v23)
            {
              uint64_t v24 = *((void *)v5 + 3);
              this = (turi::iarchive *)memcpy(&__dsta, (const void *)(v23 + v24), v15);
              *((void *)v5 + 3) = v24 + v15;
            }
            else
            {
              this = (turi::iarchive *)std::istream::read();
            }
            if (v4)
            {
              p_dsta = &__dsta;
              uint64_t v42 = v4;
              unint64_t v43 = __dst;
              do
              {
                unsigned int v44 = *p_dsta++;
                *v43++ = v44;
                --v42;
              }
              while (v42);
            }
            goto LABEL_88;
          default:
            goto LABEL_58;
        }
      }
      switch(v14)
      {
        case 16:
          uint64_t v20 = *((void *)v5 + 2);
          if (v20)
          {
            uint64_t v21 = *((void *)v5 + 3);
            this = (turi::iarchive *)memcpy(&__dsta, (const void *)(v20 + v21), v15);
            *((void *)v5 + 3) = v21 + v15;
          }
          else
          {
            this = (turi::iarchive *)std::istream::read();
          }
          if (v4)
          {
            uint64_t v29 = 2 * v4;
            int v30 = &__dsta;
            unsigned int v31 = __dst;
            do
            {
              unsigned int v32 = *(unsigned __int16 *)v30;
              v30 += 2;
              *v31++ = v32;
              v29 -= 2;
            }
            while (v29);
          }
          break;
        case 32:
          uint64_t v18 = *((void *)v5 + 2);
          if (v18)
          {
            uint64_t v19 = *((void *)v5 + 3);
            this = (turi::iarchive *)memcpy(&__dsta, (const void *)(v18 + v19), v15);
            *((void *)v5 + 3) = v19 + v15;
          }
          else
          {
            this = (turi::iarchive *)std::istream::read();
          }
          if (v4)
          {
            uint64_t v37 = 4 * v4;
            unsigned int v38 = (unsigned int *)&__dsta;
            unsigned int v39 = __dst;
            do
            {
              unsigned int v40 = *v38++;
              *v39++ = v40;
              v37 -= 4;
            }
            while (v37);
          }
          break;
        case 64:
          uint64_t v22 = *((void *)v5 + 2);
          if (v22)
          {
            this = (turi::iarchive *)memcpy(__dst, (const void *)(v22 + *((void *)v5 + 3)), 8 * v4);
            *((void *)v5 + 3) += 8 * v4;
          }
          else
          {
            this = (turi::iarchive *)std::istream::read();
          }
          break;
        default:
LABEL_58:
          turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(turi::iarchive &,unsigned long,unsigned long long *)::{lambda(void)#1}::operator()();
      }
LABEL_88:
      if (v13)
      {
        if (v13 == 1)
        {
          if ((int)v4 >= 1)
          {
            uint64_t v63 = v4;
            uint64_t v64 = *(__dst - 1);
            do
            {
              v64 += *__dst;
              *__dst++ = v64;
              --v63;
            }
            while (v63);
          }
        }
        else if (v13 == 2 && (int)v4 >= 1)
        {
          uint64_t v60 = v4;
          uint64_t v61 = *(__dst - 1);
          do
          {
            v61 += -(*__dst & 1) ^ (*__dst >> 1);
            *__dst++ = v61;
            --v60;
          }
          while (v60);
        }
      }
      else if (v4)
      {
        uint64_t v62 = v65;
        do
        {
          *__dst++ += v62;
          --v4;
        }
        while (v4);
      }
    }
  }
  return this;
}

unint64_t *turi::v2_block_impl::encode_double_legacy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v12[128] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1] - *a3;
  if (v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = v4 >> 4;
    do
    {
      unint64_t v8 = 0;
      uint64_t v9 = v3 + 16 * v6;
      do
      {
        if (*(unsigned char *)(v9 + 12) != 7) {
          v12[v8++] = *(void *)v9;
        }
        if (++v6 >= v7) {
          break;
        }
        v9 += 16;
      }
      while (v8 < 0x80);
      if (!v8) {
        break;
      }
      for (uint64_t i = 0; i != v8; ++i)
        v12[i] = __ROR8__(v12[i], 63);
      double result = turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
      uint64_t v3 = *a3;
      unint64_t v7 = (a3[1] - *a3) >> 4;
    }
    while (v6 < v7);
  }
  return result;
}

void turi::v2_block_impl::encode_double(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = *a3;
  unint64_t v6 = a3[1];
  uint64_t v7 = (char *)v6 - (char *)*a3;
  if (v6 == *a3)
  {
    BOOL v8 = 1;
  }
  else
  {
    BOOL v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = v7 >> 4;
    if (v10 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    do
    {
      if (*((unsigned char *)v5 + 12) == 1 && *(double *)v5 != (double)(uint64_t)*(double *)v5) {
        break;
      }
      BOOL v8 = ++v9 >= v10;
      v5 += 2;
    }
    while (v11 != v9);
  }
  BOOL v12 = v8;
  BOOL v27 = v8;
  if (*(void *)a2)
  {
    uint64_t v13 = std::ostream::write();
  }
  else
  {
    unint64_t v14 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 1 > v14)
    {
      size_t v19 = 2 * v14 + 2;
      *(void *)(a2 + 40) = v19;
      uint64_t v20 = *(uint64_t **)(a2 + 16);
      if (v20)
      {
        uint64_t v13 = *v20;
        size_t v21 = v20[1] - *v20;
        BOOL v22 = v19 >= v21;
        std::vector<char>::size_type v23 = v19 - v21;
        if (v23 != 0 && v22)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v23);
          uint64_t v13 = **(void **)(a2 + 16);
        }
        else if (!v22)
        {
          v20[1] = v13 + v19;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t)malloc_type_realloc(*(void **)(a2 + 24), v19, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v13;
    }
    else
    {
      uint64_t v13 = *(void *)(a2 + 24);
    }
    *(unsigned char *)(v13 + (*(void *)(a2 + 32))++) = v12;
  }
  if (v27)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    size_t v15 = std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v24, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    while (v16 != v17)
    {
      if (*(unsigned char *)(v16 + 12) == 1)
      {
        uint64_t v18 = (uint64_t)*(double *)v16;
        *(_DWORD *)(v16 + 8) = 0;
        *(unsigned char *)(v16 + 12) = 0;
        *(void *)uint64_t v16 = v18;
      }
      v16 += 16;
    }
    turi::v2_block_impl::encode_number((uint64_t)v15, a2, &v24);
    uint64_t v28 = (void **)&v24;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v28);
  }
  else if (!v27)
  {
    turi::v2_block_impl::encode_double_legacy(v13, a2, (uint64_t *)a3);
  }
}

void sub_2240E5918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *turi::oarchive::write(turi::oarchive *this, const char *__src, size_t __n)
{
  if (*(void *)this)
  {
    return (void *)std::ostream::write();
  }
  else
  {
    size_t v7 = *((void *)this + 5);
    if (*((void *)this + 4) + __n > v7)
    {
      size_t v9 = 2 * (v7 + __n);
      *((void *)this + 5) = v9;
      unint64_t v10 = (char **)*((void *)this + 2);
      if (v10)
      {
        BOOL v8 = *v10;
        size_t v11 = v10[1] - *v10;
        BOOL v12 = v9 >= v11;
        std::vector<char>::size_type v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*((std::vector<char> **)this + 2), v13);
          BOOL v8 = (char *)**((void **)this + 2);
        }
        else if (!v12)
        {
          v10[1] = &v8[v9];
        }
      }
      else
      {
        BOOL v8 = (char *)malloc_type_realloc(*((void **)this + 3), v9, 0xF6EA6B1uLL);
      }
      *((void *)this + 3) = v8;
    }
    else
    {
      BOOL v8 = (char *)*((void *)this + 3);
    }
    double result = memcpy(&v8[*((void *)this + 4)], __src, __n);
    *((void *)this + 4) += __n;
  }
  return result;
}

turi::iarchive *turi::v2_block_impl::decode_double_legacy(turi::iarchive *this, uint64_t *a2, uint64_t a3)
{
  __dst[128] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    unint64_t v6 = this;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = ((v4 - *a2) >> 4) - a3;
    do
    {
      uint64_t v11 = v3 + 16 * v7;
      if (*(unsigned char *)(v11 + 12) != 7)
      {
        if (v9 >= v8)
        {
          if (v10 >= 0x80) {
            unint64_t v8 = 128;
          }
          else {
            unint64_t v8 = v10;
          }
          this = turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(v6, v8, __dst);
          if (v8)
          {
            BOOL v12 = __dst;
            unint64_t v13 = v8;
            do
            {
              *BOOL v12 = __ROR8__(*v12, 1);
              ++v12;
              --v13;
            }
            while (v13);
          }
          uint64_t v3 = *a2;
          *(void *)(*a2 + 16 * v7) = __dst[0];
          --v10;
          uint64_t v4 = a2[1];
          unint64_t v9 = 1;
        }
        else
        {
          *(void *)uint64_t v11 = __dst[v9++];
          --v10;
        }
      }
      ++v7;
    }
    while (v7 < (v4 - v3) >> 4);
  }
  return this;
}

turi::iarchive *turi::v2_block_impl::decode_double(turi::iarchive *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = this;
  unsigned __int8 v16 = 0;
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 3);
    int v8 = *(unsigned __int8 *)(v6 + v7);
    unsigned __int8 v16 = v8;
    *((void *)this + 3) = v7 + 1;
  }
  else
  {
    this = (turi::iarchive *)std::istream::read();
    int v8 = v16;
  }
  char v15 = v8;
  if ((char)v8 >= 3)
  {
    unint64_t v14 = &v15;
    turi::v2_block_impl::decode_double(turi::iarchive &,std::vector<turi::flexible_type> &,unsigned long)::$_0::operator()(&v14);
  }
  if (v8 == 1)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    while (v9 != v10)
    {
      if (*(unsigned char *)(v9 + 12) == 1)
      {
        *(void *)uint64_t v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 12) = 0;
      }
      v9 += 16;
    }
    this = turi::v2_block_impl::decode_number(v5, a2, a3);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    if (*a2 != v12)
    {
      do
      {
        if (!*(unsigned char *)(v11 + 12))
        {
          double v13 = (double)*(uint64_t *)v11;
          *(_DWORD *)(v11 + 8) = 0;
          *(unsigned char *)(v11 + 12) = 1;
          *(double *)uint64_t v11 = v13;
        }
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  else if (!v8)
  {
    return turi::v2_block_impl::decode_double_legacy(v5, a2, a3);
  }
  return this;
}

void *turi::iarchive::read(turi::iarchive *this, char *__dst, size_t __n)
{
  uint64_t v5 = *((void *)this + 2);
  if (v5)
  {
    double result = memcpy(__dst, (const void *)(v5 + *((void *)this + 3)), __n);
    *((void *)this + 3) += __n;
  }
  else
  {
    return (void *)std::istream::read();
  }
  return result;
}

void turi::v2_block_impl::decode_double(turi::iarchive &,std::vector<turi::flexible_type> &,unsigned long)::$_0::operator()(unsigned char **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Assertion failed: (", 19);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"reserved", 8);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<", 1);
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"3", 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  LOBYTE(v16) = **a1;
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v16, 1);
  LOBYTE(v16) = 32;
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"<", 1);
  LOBYTE(v16) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v16, 1);
  double v13 = (void *)std::ostream::operator<<();
  unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v14);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v15 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 186, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v15, (uint64_t)&__p);
    if (v18 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unsigned __int8 v16 = v19;
  turi::v2_block_impl::decode_double(turi::iarchive &,std::vector<turi::flexible_type> &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240E5E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::typed_encode(uint64_t *a1, void *a2, uint64_t a3)
{
  v128[2] = *(void ***)MEMORY[0x263EF8340];
  a2[4] |= 2uLL;
  uint64_t v6 = *a1;
  BOOL v7 = a1[1] == *a1;
  unint64_t v8 = (a1[1] - *a1) >> 4;
  a2[3] = v8;
  unint64_t v9 = 0;
  if (!v7)
  {
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    uint64_t v10 = (char *)(v6 + 12);
    do
    {
      char v11 = *v10;
      v10 += 16;
      v9 |= 1 << v11;
      --v8;
    }
    while (v8);
  }
  char v12 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v9));
  if (*(void *)a3)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v13 = *(void *)(a3 + 40);
    if (*(void *)(a3 + 32) + 1 > v13)
    {
      size_t v94 = 2 * v13 + 2;
      *(void *)(a3 + 40) = v94;
      int v95 = *(void **)(a3 + 16);
      if (v95)
      {
        unint64_t v14 = (unsigned char *)*v95;
        size_t v96 = v95[1] - *v95;
        BOOL v97 = v94 >= v96;
        std::vector<char>::size_type v98 = v94 - v96;
        if (v98 != 0 && v97)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v98);
          unint64_t v14 = **(unsigned char ***)(a3 + 16);
        }
        else if (!v97)
        {
          v95[1] = &v14[v94];
        }
      }
      else
      {
        unint64_t v14 = malloc_type_realloc(*(void **)(a3 + 24), v94, 0xF6EA6B1uLL);
      }
      *(void *)(a3 + 24) = v14;
    }
    else
    {
      unint64_t v14 = *(unsigned char **)(a3 + 24);
    }
    v14[(*(void *)(a3 + 32))++] = v12;
  }
  if (!v12) {
    goto LABEL_75;
  }
  if (v12 == 2)
  {
    if ((v9 & 0x80) != 0)
    {
      unint64_t v16 = __clz(__rbit64(v9));
      if (v16 <= 0xF)
      {
        while (v16 == 7)
        {
          unint64_t v17 = v9 & ~(0xFFFFFFFFFFFFFFFFLL >> (v16 ^ 0x3Fu));
          if (v17)
          {
            unint64_t v16 = __clz(__rbit64(v17));
            if (v16 < 0x10) {
              continue;
            }
          }
          goto LABEL_58;
        }
        LOBYTE(__src[0]) = v16;
        if (*(void *)a3)
        {
          std::ostream::write();
        }
        else
        {
          unint64_t v27 = *(void *)(a3 + 40);
          if (*(void *)(a3 + 32) + 1 > v27)
          {
            size_t v109 = 2 * v27 + 2;
            *(void *)(a3 + 40) = v109;
            unint64_t v110 = *(void **)(a3 + 16);
            if (v110)
            {
              uint64_t v28 = (unsigned char *)*v110;
              size_t v111 = v110[1] - *v110;
              BOOL v112 = v109 >= v111;
              std::vector<char>::size_type v113 = v109 - v111;
              if (v113 != 0 && v112)
              {
                std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v113);
                uint64_t v28 = **(unsigned char ***)(a3 + 16);
              }
              else if (!v112)
              {
                v110[1] = &v28[v109];
              }
              *(void *)(a3 + 24) = v28;
            }
            else
            {
              uint64_t v28 = malloc_type_realloc(*(void **)(a3 + 24), v109, 0xF6EA6B1uLL);
              *(void *)(a3 + 24) = v28;
            }
          }
          else
          {
            uint64_t v28 = *(unsigned char **)(a3 + 24);
          }
          v28[(*(void *)(a3 + 32))++] = __src[0];
        }
      }
LABEL_58:
      turi::dense_bitset::dense_bitset((turi::dense_bitset *)__src, (a1[1] - *a1) >> 4);
      if ((uint64_t)v124 >= 1) {
        bzero(__src[0], 8 * (v124 - ((v124 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
      }
      uint64_t v29 = a1[1];
      int v30 = (char *)__src[0];
      uint64_t v31 = v29 - *a1;
      if (v29 != *a1)
      {
        unint64_t v32 = 0;
        unint64_t v33 = v31 >> 4;
        if (v33 <= 1) {
          unint64_t v33 = 1;
        }
        int v34 = (unsigned __int8 *)(*a1 + 12);
        do
        {
          int v35 = *v34;
          v34 += 16;
          if (v35 == 7) {
            *(void *)&v30[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v32;
          }
          ++v32;
        }
        while (v33 != v32);
        int v30 = (char *)__src[0];
      }
      size_t v36 = 8 * v124;
      if (*(void *)a3)
      {
        std::ostream::write();
      }
      else
      {
        size_t v37 = *(void *)(a3 + 40);
        if (*(void *)(a3 + 32) + v36 > v37)
        {
          size_t v104 = 2 * (v37 + v36);
          *(void *)(a3 + 40) = v104;
          int v105 = *(char ***)(a3 + 16);
          if (v105)
          {
            unsigned int v38 = *v105;
            size_t v106 = v105[1] - *v105;
            BOOL v107 = v104 >= v106;
            std::vector<char>::size_type v108 = v104 - v106;
            if (v108 != 0 && v107)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v108);
              unsigned int v38 = **(char ***)(a3 + 16);
            }
            else if (!v107)
            {
              v105[1] = &v38[v104];
            }
          }
          else
          {
            unsigned int v38 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v104, 0xF6EA6B1uLL);
          }
          *(void *)(a3 + 24) = v38;
        }
        else
        {
          unsigned int v38 = *(char **)(a3 + 24);
        }
        memcpy(&v38[*(void *)(a3 + 32)], v30, v36);
        *(void *)(a3 + 32) += v36;
      }
      free(__src[0]);
      if ((v9 & 1) == 0) {
        goto LABEL_28;
      }
LABEL_74:
      turi::v2_block_impl::encode_number(v15, a3, a1);
      goto LABEL_75;
    }
LABEL_17:
    turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a3, a1);
    a2[4] |= 4uLL;
    goto LABEL_75;
  }
  if (v12 != 1) {
    goto LABEL_17;
  }
  LOBYTE(__src[0]) = *(unsigned char *)(*a1 + 12);
  if (*(void *)a3)
  {
    uint64_t v15 = std::ostream::write();
  }
  else
  {
    unint64_t v18 = *(void *)(a3 + 40);
    if (*(void *)(a3 + 32) + 1 > v18)
    {
      size_t v99 = 2 * v18 + 2;
      *(void *)(a3 + 40) = v99;
      unint64_t v100 = *(uint64_t **)(a3 + 16);
      if (v100)
      {
        uint64_t v15 = *v100;
        size_t v101 = v100[1] - *v100;
        BOOL v102 = v99 >= v101;
        std::vector<char>::size_type v103 = v99 - v101;
        if (v103 != 0 && v102)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v103);
          uint64_t v15 = **(void **)(a3 + 16);
        }
        else if (!v102)
        {
          v100[1] = v15 + v99;
        }
        *(void *)(a3 + 24) = v15;
      }
      else
      {
        uint64_t v15 = (uint64_t)malloc_type_realloc(*(void **)(a3 + 24), v99, 0xF6EA6B1uLL);
        *(void *)(a3 + 24) = v15;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a3 + 24);
    }
    *(unsigned char *)(v15 + (*(void *)(a3 + 32))++) = __src[0];
  }
  if (*(unsigned char *)(*a1 + 12) == 7) {
    goto LABEL_75;
  }
  if (v9) {
    goto LABEL_74;
  }
LABEL_28:
  if ((v9 & 2) != 0)
  {
    a2[4] |= 8uLL;
    turi::v2_block_impl::encode_double(v15, a3, (uint64_t **)a1);
    goto LABEL_75;
  }
  if ((v9 & 4) == 0)
  {
    if ((v9 & 8) != 0)
    {
      a2[4] |= 8uLL;
      turi::v2_block_impl::encode_vector((uint64_t)a2, a3, a1);
    }
    else if ((v9 & 0x200) != 0)
    {
      a2[4] |= 8uLL;
      turi::v2_block_impl::encode_nd_vector((uint64_t)a2, a3, a1);
    }
    else
    {
      uint64_t v19 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        do
        {
          BOOL v22 = (uint64_t *)(v19 + v20);
          switch(*(unsigned char *)(v19 + v20 + 12))
          {
            case 0:
            case 1:
              turi::oarchive::direct_assign<unsigned long long>(a3, v22);
              break;
            case 2:
              turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a3, (const void **)(*v22 + 8));
              break;
            case 3:
              turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec(a3, (const void **)(*v22 + 8));
              break;
            case 4:
              turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a3, (uint64_t *)(*v22 + 8));
              break;
            case 5:
              turi::archive_detail::vector_serialize_impl<turi::oarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(a3, (uint64_t *)(*v22 + 8));
              break;
            case 6:
              turi::archive_detail::serialize_impl<turi::oarchive,turi::flex_date_time,false,void>::exec(a3, v22);
              break;
            case 7:
              break;
            case 8:
              turi::image_type::save(*v22 + 8, a3);
              break;
            case 9:
              turi::flexible_type_impl::ndarray<double>::save(*v22 + 8, a3);
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          ++v21;
          uint64_t v19 = *a1;
          v20 += 16;
        }
        while (v21 < (a1[1] - *a1) >> 4);
      }
    }
    goto LABEL_75;
  }
  char v126 = 1;
  *(_OWORD *)__src = 0u;
  long long v124 = 0u;
  int v125 = 1065353216;
  memset(v122, 0, sizeof(v122));
  v119 = 0;
  unint64_t v120 = 0;
  unint64_t v121 = 0;
  unint64_t v23 = (a1[1] - *a1) >> 4;
  memset(v128, 0, 13);
  std::vector<turi::flexible_type>::resize(v122, v23, (uint64_t)v128);
  switch(BYTE4(v128[1]))
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v128[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v24 = v128[0];
        if (v128[0])
        {
          if (*((char *)v128[0] + 31) < 0) {
            operator delete(v128[0][1]);
          }
          uint64_t v25 = v24;
          uint64_t v26 = 0x1012C404EF22A49;
          goto LABEL_102;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v128[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v45 = v128[0];
        if (v128[0])
        {
          char v46 = v128[0][1];
          if (v46)
          {
            v128[0][2] = v46;
            operator delete(v46);
          }
          uint64_t v25 = v45;
          uint64_t v26 = 0x1080C409938AC02;
          goto LABEL_102;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v128[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v39 = v128[0];
        if (v128[0])
        {
          uint64_t v127 = (unsigned __int8 *)(v128[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
          goto LABEL_97;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v128[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v39 = v128[0];
        if (v128[0])
        {
          uint64_t v127 = (unsigned __int8 *)(v128[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
LABEL_97:
          uint64_t v25 = v39;
          uint64_t v26 = 0x1020C405E66F15BLL;
          goto LABEL_102;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v128[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v47 = v128[0];
        if (v128[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v128[0] + 2);
          uint64_t v25 = v47;
          unsigned int v44 = -235920773;
          goto LABEL_101;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v128[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v40 = v128[0];
        if (v128[0])
        {
          unsigned int v41 = v128[0][6];
          if (v41)
          {
            v128[0][7] = v41;
            operator delete(v41);
          }
          uint64_t v42 = v40[3];
          if (v42)
          {
            v40[4] = v42;
            operator delete(v42);
          }
          unint64_t v43 = (std::__shared_weak_count *)v40[2];
          if (v43) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
          }
          uint64_t v25 = v40;
          unsigned int v44 = 2071181815;
LABEL_101:
          uint64_t v26 = v44 | 0x1030C4000000000;
LABEL_102:
          MEMORY[0x22A614FA0](v25, v26);
        }
      }
      break;
    default:
      break;
  }
  uint64_t v49 = *a1;
  uint64_t v48 = a1[1];
  if (v48 == *a1)
  {
    unint64_t v51 = 0;
    goto LABEL_121;
  }
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  unint64_t v52 = 0;
  while (*(unsigned char *)(v49 + v50 + 12) == 7)
  {
LABEL_117:
    ++v52;
    v50 += 16;
    if (v52 >= (v48 - v49) >> 4) {
      goto LABEL_121;
    }
  }
  char v53 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(__src, (unsigned __int8 *)(*(void *)(v49 + v50) + 8));
  if (v53)
  {
    uint64_t v54 = *((void *)v53 + 5);
LABEL_116:
    *(void *)(v122[0] + 16 * v51++) = v54;
    uint64_t v49 = *a1;
    uint64_t v48 = a1[1];
    goto LABEL_117;
  }
  uint64_t v54 = *((void *)&v124 + 1);
  if (*((void *)&v124 + 1) <= 0x3FuLL)
  {
    uint64_t v127 = (unsigned __int8 *)(*(void *)(*a1 + v50) + 8);
    *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__src, v127, (uint64_t)&std::piecewise_construct, (long long **)&v127)+ 5) = v54;
    uint64_t v55 = *(void *)(*a1 + v50);
    char v56 = (long long *)(v55 + 8);
    unsigned int v57 = v120;
    if ((unint64_t)v120 >= v121)
    {
      unsigned int v59 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v119, v56);
    }
    else
    {
      if (*(char *)(v55 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)(v55 + 8), *(void *)(v55 + 16));
      }
      else
      {
        long long v58 = *v56;
        v120->__r_.__value_.__r.__words[2] = *(void *)(v55 + 24);
        *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
      }
      unsigned int v59 = v57 + 1;
    }
    unint64_t v120 = v59;
    goto LABEL_116;
  }
  char v126 = 0;
LABEL_121:
  if (*(void *)a3)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v60 = *(void *)(a3 + 40);
    if (*(void *)(a3 + 32) + 1 > v60)
    {
      size_t v114 = 2 * v60 + 2;
      *(void *)(a3 + 40) = v114;
      int v115 = *(void **)(a3 + 16);
      if (v115)
      {
        uint64_t v61 = (unsigned char *)*v115;
        size_t v116 = v115[1] - *v115;
        BOOL v117 = v114 >= v116;
        std::vector<char>::size_type v118 = v114 - v116;
        if (v118 != 0 && v117)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v118);
          uint64_t v61 = **(unsigned char ***)(a3 + 16);
        }
        else if (!v117)
        {
          v115[1] = &v61[v114];
        }
      }
      else
      {
        uint64_t v61 = malloc_type_realloc(*(void **)(a3 + 24), v114, 0xF6EA6B1uLL);
      }
      *(void *)(a3 + 24) = v61;
    }
    else
    {
      uint64_t v61 = *(unsigned char **)(a3 + 24);
    }
    v61[(*(void *)(a3 + 32))++] = v126;
  }
  if (v126)
  {
    std::vector<turi::flexible_type>::resize(v122, v51);
    uint64_t v62 = (uint64_t)turi::integer_pack::variable_encode<turi::oarchive>((turi::oarchive *)a3, 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (char *)v119) >> 3));
    uint64_t v63 = v119;
    uint64_t v64 = v120;
    while (v63 != (void **)v64)
    {
      if (*((char *)v63 + 23) < 0) {
        unint64_t v65 = (unint64_t)v63[1];
      }
      else {
        unint64_t v65 = *((unsigned __int8 *)v63 + 23);
      }
      turi::integer_pack::variable_encode<turi::oarchive>((turi::oarchive *)a3, v65);
      if (*((char *)v63 + 23) < 0)
      {
        char v67 = *v63;
        size_t v66 = (size_t)v63[1];
      }
      else
      {
        size_t v66 = *((unsigned __int8 *)v63 + 23);
        char v67 = v63;
      }
      if (*(void *)a3)
      {
        uint64_t v62 = std::ostream::write();
      }
      else
      {
        size_t v68 = *(void *)(a3 + 40);
        if (*(void *)(a3 + 32) + v66 > v68)
        {
          size_t v70 = 2 * (v68 + v66);
          *(void *)(a3 + 40) = v70;
          size_t v71 = *(char ***)(a3 + 16);
          if (v71)
          {
            BOOL v69 = *v71;
            size_t v72 = v71[1] - *v71;
            BOOL v73 = v70 >= v72;
            std::vector<char>::size_type v74 = v70 - v72;
            if (v74 != 0 && v73)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v74);
              BOOL v69 = **(char ***)(a3 + 16);
            }
            else if (!v73)
            {
              v71[1] = &v69[v70];
            }
          }
          else
          {
            BOOL v69 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v70, 0xF6EA6B1uLL);
          }
          *(void *)(a3 + 24) = v69;
        }
        else
        {
          BOOL v69 = *(char **)(a3 + 24);
        }
        uint64_t v62 = (uint64_t)memcpy(&v69[*(void *)(a3 + 32)], v67, v66);
        *(void *)(a3 + 32) += v66;
      }
      v63 += 3;
    }
    turi::v2_block_impl::encode_number(v62, a3, v122);
  }
  else
  {
    size_t v75 = (unsigned char *)*a1;
    char v76 = (unsigned char *)a1[1];
    if ((unsigned char *)*a1 == v76)
    {
      unint64_t v77 = 0;
    }
    else
    {
      unint64_t v77 = 0;
      uint64_t v78 = v122[0];
      do
      {
        if (v75[12] != 7)
        {
          if (*(char *)(*(void *)v75 + 31) < 0) {
            uint64_t v79 = *(void *)(*(void *)v75 + 16);
          }
          else {
            uint64_t v79 = *(unsigned __int8 *)(*(void *)v75 + 31);
          }
          uint64_t v80 = 16 * v77++;
          *(void *)(v78 + v80) = v79;
        }
        v75 += 16;
      }
      while (v75 != v76);
    }
    std::vector<turi::flexible_type>::resize(v122, v77);
    turi::v2_block_impl::encode_number(v81, a3, v122);
    std::vector<char>::size_type v82 = (unsigned char *)*a1;
    size_t v83 = (unsigned char *)a1[1];
    while (v82 != v83)
    {
      if (v82[12] != 7)
      {
        uint64_t v84 = *(void *)v82;
        if (*(char *)(*(void *)v82 + 31) < 0)
        {
          size_t v85 = *(const void **)(v84 + 8);
          size_t v86 = *(void *)(v84 + 16);
        }
        else
        {
          size_t v85 = (const void *)(v84 + 8);
          size_t v86 = *(unsigned __int8 *)(*(void *)v82 + 31);
        }
        if (*(void *)a3)
        {
          std::ostream::write();
        }
        else
        {
          size_t v87 = *(void *)(a3 + 40);
          if (*(void *)(a3 + 32) + v86 > v87)
          {
            size_t v89 = 2 * (v87 + v86);
            *(void *)(a3 + 40) = v89;
            unint64_t v90 = *(char ***)(a3 + 16);
            if (v90)
            {
              unint64_t v88 = *v90;
              size_t v91 = v90[1] - *v90;
              BOOL v92 = v89 >= v91;
              std::vector<char>::size_type v93 = v89 - v91;
              if (v93 != 0 && v92)
              {
                std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v93);
                unint64_t v88 = **(char ***)(a3 + 16);
              }
              else if (!v92)
              {
                v90[1] = &v88[v89];
              }
            }
            else
            {
              unint64_t v88 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v89, 0xF6EA6B1uLL);
            }
            *(void *)(a3 + 24) = v88;
          }
          else
          {
            unint64_t v88 = *(char **)(a3 + 24);
          }
          memcpy(&v88[*(void *)(a3 + 32)], v85, v86);
          *(void *)(a3 + 32) += v86;
        }
      }
      v82 += 16;
    }
  }
  v128[0] = (void **)&v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v128);
  v119 = (void **)v122;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v119);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__src);
LABEL_75:
  a2[2] = *(void *)(a3 + 32);
}

void sub_2240E6C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
  *(void *)(v17 - 104) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 104));
  a11 = &a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::encode_vector(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  char v47 = 0;
  if (*(void *)a2)
  {
    uint64_t v5 = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 1 > v6)
    {
      size_t v39 = 2 * v6 + 2;
      *(void *)(a2 + 40) = v39;
      unsigned int v40 = *(uint64_t **)(a2 + 16);
      if (v40)
      {
        uint64_t v5 = *v40;
        size_t v41 = v40[1] - *v40;
        BOOL v42 = v39 >= v41;
        std::vector<char>::size_type v43 = v39 - v41;
        if (v43 != 0 && v42)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v43);
          uint64_t v5 = **(void **)(a2 + 16);
        }
        else if (!v42)
        {
          v40[1] = v5 + v39;
        }
      }
      else
      {
        uint64_t v5 = (uint64_t)malloc_type_realloc(*(void **)(a2 + 24), v39, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v5;
    }
    else
    {
      uint64_t v5 = *(void *)(a2 + 24);
    }
    *(unsigned char *)(v5 + (*(void *)(a2 + 32))++) = 0;
  }
  memset(v46, 0, sizeof(v46));
  memset(v45, 0, sizeof(v45));
  uint64_t v7 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unsigned char *)(v7 + 16 * v8);
      if (v9[12] != 7)
      {
        uint64_t v10 = *(void *)v9;
        uint64_t v11 = (uint64_t)(*(void *)(*(void *)v9 + 16) - *(void *)(*(void *)v9 + 8)) >> 3;
        int v51 = 0;
        char v52 = 0;
        uint64_t v50 = (void ***)v11;
        uint64_t v5 = (uint64_t)std::vector<turi::flexible_type>::push_back[abi:ne180100](v46, (uint64_t *)&v50);
        switch(v52)
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              char v12 = (void **)v50;
              if (v50)
              {
                if (*((char *)v50 + 31) < 0) {
                  operator delete(v50[1]);
                }
                unint64_t v13 = v12;
                uint64_t v14 = 0x1012C404EF22A49;
                goto LABEL_42;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v15 = (void **)v50;
              if (v50)
              {
                unint64_t v16 = v50[1];
                if (v16)
                {
                  v50[2] = v16;
                  operator delete(v16);
                }
                unint64_t v13 = v15;
                uint64_t v14 = 0x1080C409938AC02;
                goto LABEL_42;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v17 = (void **)v50;
              if (v50)
              {
                uint64_t v48 = (void **)(v50 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v48);
                goto LABEL_28;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v17 = (void **)v50;
              if (v50)
              {
                uint64_t v48 = (void **)(v50 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v48);
LABEL_28:
                unint64_t v13 = v17;
                uint64_t v14 = 0x1020C405E66F15BLL;
                goto LABEL_42;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v18 = (void **)v50;
              if (v50)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v50 + 2);
                unint64_t v13 = v18;
                unsigned int v19 = -235920773;
                goto LABEL_41;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)v50, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v20 = (void **)v50;
              if (v50)
              {
                unint64_t v21 = v50[6];
                if (v21)
                {
                  v50[7] = v21;
                  operator delete(v21);
                }
                BOOL v22 = v20[3];
                if (v22)
                {
                  void v20[4] = v22;
                  operator delete(v22);
                }
                unint64_t v23 = (std::__shared_weak_count *)v20[2];
                if (v23) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                }
                unint64_t v13 = v20;
                unsigned int v19 = 2071181815;
LABEL_41:
                uint64_t v14 = v19 | 0x1030C4000000000;
LABEL_42:
                uint64_t v5 = MEMORY[0x22A614FA0](v13, v14);
              }
            }
            break;
          default:
            break;
        }
        uint64_t v24 = *(uint64_t **)(v10 + 8);
        uint64_t v25 = *(uint64_t **)(v10 + 16);
        while (v24 != v25)
        {
          uint64_t v44 = 0;
          uint64_t v44 = *v24;
          turi::flexible_type::flexible_type<double>((uint64_t)&v48, &v44);
          uint64_t v5 = (uint64_t)std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)v45, (uint64_t *)&v48);
          switch(v49)
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v48, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v26 = v48;
                if (v48)
                {
                  if (*((char *)v48 + 31) < 0) {
                    operator delete(v48[1]);
                  }
                  unint64_t v27 = v26;
                  uint64_t v28 = 0x1012C404EF22A49;
                  goto LABEL_76;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v48, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                int v35 = v48;
                if (v48)
                {
                  size_t v36 = v48[1];
                  if (v36)
                  {
                    v48[2] = v36;
                    operator delete(v36);
                  }
                  unint64_t v27 = v35;
                  uint64_t v28 = 0x1080C409938AC02;
                  goto LABEL_76;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v48, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v29 = v48;
                if (v48)
                {
                  uint64_t v50 = (void ***)(v48 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
                  goto LABEL_71;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v48, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v29 = v48;
                if (v48)
                {
                  uint64_t v50 = (void ***)(v48 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
LABEL_71:
                  unint64_t v27 = v29;
                  uint64_t v28 = 0x1020C405E66F15BLL;
                  goto LABEL_76;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v48, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                size_t v37 = v48;
                if (v48)
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)v48 + 2);
                  unint64_t v27 = v37;
                  unsigned int v34 = -235920773;
                  goto LABEL_75;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v48, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                int v30 = v48;
                if (v48)
                {
                  uint64_t v31 = v48[6];
                  if (v31)
                  {
                    v48[7] = v31;
                    operator delete(v31);
                  }
                  unint64_t v32 = v30[3];
                  if (v32)
                  {
                    void v30[4] = v32;
                    operator delete(v32);
                  }
                  unint64_t v33 = (std::__shared_weak_count *)v30[2];
                  if (v33) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                  }
                  unint64_t v27 = v30;
                  unsigned int v34 = 2071181815;
LABEL_75:
                  uint64_t v28 = v34 | 0x1030C4000000000;
LABEL_76:
                  uint64_t v5 = MEMORY[0x22A614FA0](v27, v28);
                }
              }
              break;
            default:
              break;
          }
          ++v24;
        }
      }
      ++v8;
      uint64_t v7 = *a3;
    }
    while (v8 < (a3[1] - *a3) >> 4);
  }
  unsigned int v38 = turi::v2_block_impl::encode_number(v5, a2, v46);
  turi::v2_block_impl::encode_double((uint64_t)v38, a2, (uint64_t **)v45);
  uint64_t v50 = v45;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v45[0] = (void **)v46;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v45);
}

void sub_2240E72FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void ***a20)
{
  a20 = &a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a11 = (void **)&a14;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::encode_nd_vector(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  char v109 = 0;
  memset(v108, 0, sizeof(v108));
  memset(v107, 0, sizeof(v107));
  memset(v106, 0, sizeof(v106));
  memset(v105, 0, sizeof(v105));
  memset(v104, 0, sizeof(v104));
  long long v110 = 0uLL;
  size_t v111 = 0;
  int v115 = 0;
  size_t v116 = 0;
  uint64_t v117 = 0;
  std::string __p = 0;
  size_t v96 = 0;
  uint64_t v97 = 0;
  turi::flexible_type_impl::ndarray<double>::ndarray(&v98, (uint64_t)&v110, (uint64_t)&v115, (uint64_t)&__p, 0);
  if (__p)
  {
    size_t v96 = __p;
    operator delete(__p);
  }
  if (v115)
  {
    size_t v116 = v115;
    operator delete(v115);
  }
  uint64_t v94 = a2;
  if ((void)v110)
  {
    *((void *)&v110 + 1) = v110;
    operator delete((void *)v110);
  }
  uint64_t v5 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (unsigned char *)(v5 + 16 * v6);
      if (v7[12] != 7)
      {
        unint64_t v8 = (void ***)(*(void *)v7 + 8);
        if (!turi::flexible_type_impl::ndarray<double>::is_valid(v8)) {
          turi::v2_block_impl::encode_nd_vector(turi::v2_block_impl::block_info &,turi::oarchive &,std::vector<turi::flexible_type> const&)::$_0::operator()();
        }
        if (!turi::flexible_type_impl::ndarray<double>::is_full(v8))
        {
          turi::flexible_type_impl::ndarray<double>::compact((uint64_t)v8, (uint64_t **)&v110);
          turi::flexible_type_impl::ndarray<double>::operator=((uint64_t)&v98, &v110);
          if (v113)
          {
            size_t v114 = v113;
            operator delete(v113);
          }
          if (v111)
          {
            BOOL v112 = v111;
            operator delete(v111);
          }
          if (*((void *)&v110 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v110 + 1));
          }
          unint64_t v8 = &v98;
        }
        uint64_t v9 = v8[3] - v8[2];
        DWORD2(v110) = 0;
        BYTE12(v110) = 0;
        *(void *)&long long v110 = v9;
        std::vector<turi::flexible_type>::push_back[abi:ne180100](v108, (uint64_t *)&v110);
        switch(BYTE12(v110))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v10 = (void *)v110;
              if ((void)v110)
              {
                if (*(char *)(v110 + 31) < 0) {
                  operator delete(*(void **)(v110 + 8));
                }
                uint64_t v11 = v10;
                uint64_t v12 = 0x1012C404EF22A49;
                goto LABEL_52;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unsigned int v19 = (void *)v110;
              if ((void)v110)
              {
                uint64_t v20 = *(void **)(v110 + 8);
                if (v20)
                {
                  *(void *)(v110 + 16) = v20;
                  operator delete(v20);
                }
                uint64_t v11 = v19;
                uint64_t v12 = 0x1080C409938AC02;
                goto LABEL_52;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v13 = (void *)v110;
              if ((void)v110)
              {
                int v115 = (atomic_uint **)(v110 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
                goto LABEL_47;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v13 = (void *)v110;
              if ((void)v110)
              {
                int v115 = (atomic_uint **)(v110 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
LABEL_47:
                uint64_t v11 = v13;
                uint64_t v12 = 0x1020C405E66F15BLL;
                goto LABEL_52;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v21 = (void *)v110;
              if ((void)v110)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(v110 + 16));
                uint64_t v11 = v21;
                unsigned int v18 = -235920773;
                goto LABEL_51;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v14 = (void *)v110;
              if ((void)v110)
              {
                uint64_t v15 = *(void **)(v110 + 48);
                if (v15)
                {
                  *(void *)(v110 + 56) = v15;
                  operator delete(v15);
                }
                unint64_t v16 = (void *)v14[3];
                if (v16)
                {
                  void v14[4] = v16;
                  operator delete(v16);
                }
                uint64_t v17 = (std::__shared_weak_count *)v14[2];
                if (v17) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                }
                uint64_t v11 = v14;
                unsigned int v18 = 2071181815;
LABEL_51:
                uint64_t v12 = v18 | 0x1030C4000000000;
LABEL_52:
                MEMORY[0x22A614FA0](v11, v12);
              }
            }
            break;
          default:
            break;
        }
        BOOL v22 = (void *)turi::flexible_type_impl::ndarray<double>::elements(v8);
        uint64_t v23 = (uint64_t)(v22[1] - *v22) >> 3;
        LODWORD(v116) = 0;
        BYTE4(v116) = 0;
        int v115 = (atomic_uint **)v23;
        std::vector<turi::flexible_type>::push_back[abi:ne180100](v107, (uint64_t *)&v115);
        switch(BYTE4(v116))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)v115, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v24 = v115;
              if (v115)
              {
                if (*((char *)v115 + 31) < 0) {
                  operator delete(v115[1]);
                }
                uint64_t v25 = v24;
                uint64_t v26 = 0x1012C404EF22A49;
                goto LABEL_84;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)v115, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v33 = v115;
              if (v115)
              {
                unsigned int v34 = v115[1];
                if (v34)
                {
                  v115[2] = v34;
                  operator delete(v34);
                }
                uint64_t v25 = v33;
                uint64_t v26 = 0x1080C409938AC02;
                goto LABEL_84;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)v115, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v27 = v115;
              if (v115)
              {
                *(void *)&long long v110 = v115 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
                goto LABEL_79;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)v115, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v27 = v115;
              if (v115)
              {
                *(void *)&long long v110 = v115 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
LABEL_79:
                uint64_t v25 = v27;
                uint64_t v26 = 0x1020C405E66F15BLL;
                goto LABEL_84;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)v115, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              int v35 = v115;
              if (v115)
              {
                boost::detail::shared_count::~shared_count(v115 + 2);
                uint64_t v25 = v35;
                unsigned int v32 = -235920773;
                goto LABEL_83;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)v115, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v28 = v115;
              if (v115)
              {
                uint64_t v29 = v115[6];
                if (v29)
                {
                  v115[7] = v29;
                  operator delete(v29);
                }
                int v30 = v28[3];
                if (v30)
                {
                  void v28[4] = v30;
                  operator delete(v30);
                }
                uint64_t v31 = (std::__shared_weak_count *)v28[2];
                if (v31) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
                }
                uint64_t v25 = v28;
                unsigned int v32 = 2071181815;
LABEL_83:
                uint64_t v26 = v32 | 0x1030C4000000000;
LABEL_84:
                MEMORY[0x22A614FA0](v25, v26);
              }
            }
            break;
          default:
            break;
        }
        size_t v37 = v8[2];
        size_t v36 = v8[3];
        while (v37 != v36)
        {
          unsigned int v38 = *v37;
          BYTE12(v110) = 0;
          DWORD2(v110) = 0;
          *(void *)&long long v110 = v38;
          std::vector<turi::flexible_type>::push_back[abi:ne180100](v106, (uint64_t *)&v110);
          switch(BYTE12(v110))
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                size_t v39 = (void *)v110;
                if ((void)v110)
                {
                  if (*(char *)(v110 + 31) < 0) {
                    operator delete(*(void **)(v110 + 8));
                  }
                  unsigned int v40 = v39;
                  uint64_t v41 = 0x1012C404EF22A49;
                  goto LABEL_118;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v48 = (void *)v110;
                if ((void)v110)
                {
                  char v49 = *(void **)(v110 + 8);
                  if (v49)
                  {
                    *(void *)(v110 + 16) = v49;
                    operator delete(v49);
                  }
                  unsigned int v40 = v48;
                  uint64_t v41 = 0x1080C409938AC02;
                  goto LABEL_118;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                BOOL v42 = (void *)v110;
                if ((void)v110)
                {
                  int v115 = (atomic_uint **)(v110 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
                  goto LABEL_113;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                BOOL v42 = (void *)v110;
                if ((void)v110)
                {
                  int v115 = (atomic_uint **)(v110 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
LABEL_113:
                  unsigned int v40 = v42;
                  uint64_t v41 = 0x1020C405E66F15BLL;
                  goto LABEL_118;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v50 = (void *)v110;
                if ((void)v110)
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v110 + 16));
                  unsigned int v40 = v50;
                  unsigned int v47 = -235920773;
                  goto LABEL_117;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::vector<char>::size_type v43 = (void *)v110;
                if ((void)v110)
                {
                  uint64_t v44 = *(void **)(v110 + 48);
                  if (v44)
                  {
                    *(void *)(v110 + 56) = v44;
                    operator delete(v44);
                  }
                  unint64_t v45 = (void *)v43[3];
                  if (v45)
                  {
                    v43[4] = v45;
                    operator delete(v45);
                  }
                  char v46 = (std::__shared_weak_count *)v43[2];
                  if (v46) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
                  }
                  unsigned int v40 = v43;
                  unsigned int v47 = 2071181815;
LABEL_117:
                  uint64_t v41 = v47 | 0x1030C4000000000;
LABEL_118:
                  MEMORY[0x22A614FA0](v40, v41);
                }
              }
              break;
            default:
              break;
          }
          ++v37;
        }
        char v52 = v8[5];
        int v51 = v8[6];
        while (v52 != v51)
        {
          uint64_t v53 = *v52;
          BYTE12(v110) = 0;
          DWORD2(v110) = 0;
          *(void *)&long long v110 = v53;
          std::vector<turi::flexible_type>::push_back[abi:ne180100](v105, (uint64_t *)&v110);
          switch(BYTE12(v110))
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v54 = (void *)v110;
                if ((void)v110)
                {
                  if (*(char *)(v110 + 31) < 0) {
                    operator delete(*(void **)(v110 + 8));
                  }
                  uint64_t v55 = v54;
                  uint64_t v56 = 0x1012C404EF22A49;
                  goto LABEL_153;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v63 = (void *)v110;
                if ((void)v110)
                {
                  uint64_t v64 = *(void **)(v110 + 8);
                  if (v64)
                  {
                    *(void *)(v110 + 16) = v64;
                    operator delete(v64);
                  }
                  uint64_t v55 = v63;
                  uint64_t v56 = 0x1080C409938AC02;
                  goto LABEL_153;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unsigned int v57 = (void *)v110;
                if ((void)v110)
                {
                  int v115 = (atomic_uint **)(v110 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
                  goto LABEL_148;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unsigned int v57 = (void *)v110;
                if ((void)v110)
                {
                  int v115 = (atomic_uint **)(v110 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
LABEL_148:
                  uint64_t v55 = v57;
                  uint64_t v56 = 0x1020C405E66F15BLL;
                  goto LABEL_153;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v65 = (void *)v110;
                if ((void)v110)
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v110 + 16));
                  uint64_t v55 = v65;
                  unsigned int v62 = -235920773;
                  goto LABEL_152;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                long long v58 = (void *)v110;
                if ((void)v110)
                {
                  unsigned int v59 = *(void **)(v110 + 48);
                  if (v59)
                  {
                    *(void *)(v110 + 56) = v59;
                    operator delete(v59);
                  }
                  unint64_t v60 = (void *)v58[3];
                  if (v60)
                  {
                    v58[4] = v60;
                    operator delete(v60);
                  }
                  uint64_t v61 = (std::__shared_weak_count *)v58[2];
                  if (v61) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
                  }
                  uint64_t v55 = v58;
                  unsigned int v62 = 2071181815;
LABEL_152:
                  uint64_t v56 = v62 | 0x1030C4000000000;
LABEL_153:
                  MEMORY[0x22A614FA0](v55, v56);
                }
              }
              break;
            default:
              break;
          }
          ++v52;
        }
        uint64_t v66 = turi::flexible_type_impl::ndarray<double>::elements(v8);
        char v67 = *(uint64_t **)v66;
        size_t v68 = *(uint64_t **)(v66 + 8);
        while (v67 != v68)
        {
          uint64_t v69 = *v67;
          DWORD2(v110) = 0;
          BYTE12(v110) = 1;
          *(void *)&long long v110 = v69;
          std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)v104, (uint64_t *)&v110);
          switch(BYTE12(v110))
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                size_t v70 = (void *)v110;
                if ((void)v110)
                {
                  if (*(char *)(v110 + 31) < 0) {
                    operator delete(*(void **)(v110 + 8));
                  }
                  size_t v71 = v70;
                  uint64_t v72 = 0x1012C404EF22A49;
                  goto LABEL_188;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v79 = (void *)v110;
                if ((void)v110)
                {
                  uint64_t v80 = *(void **)(v110 + 8);
                  if (v80)
                  {
                    *(void *)(v110 + 16) = v80;
                    operator delete(v80);
                  }
                  size_t v71 = v79;
                  uint64_t v72 = 0x1080C409938AC02;
                  goto LABEL_188;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                BOOL v73 = (void *)v110;
                if ((void)v110)
                {
                  int v115 = (atomic_uint **)(v110 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
                  goto LABEL_183;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                BOOL v73 = (void *)v110;
                if ((void)v110)
                {
                  int v115 = (atomic_uint **)(v110 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
LABEL_183:
                  size_t v71 = v73;
                  uint64_t v72 = 0x1020C405E66F15BLL;
                  goto LABEL_188;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v81 = (void *)v110;
                if ((void)v110)
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v110 + 16));
                  size_t v71 = v81;
                  unsigned int v78 = -235920773;
                  goto LABEL_187;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v110, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::vector<char>::size_type v74 = (void *)v110;
                if ((void)v110)
                {
                  size_t v75 = *(void **)(v110 + 48);
                  if (v75)
                  {
                    *(void *)(v110 + 56) = v75;
                    operator delete(v75);
                  }
                  char v76 = (void *)v74[3];
                  if (v76)
                  {
                    v74[4] = v76;
                    operator delete(v76);
                  }
                  unint64_t v77 = (std::__shared_weak_count *)v74[2];
                  if (v77) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
                  }
                  size_t v71 = v74;
                  unsigned int v78 = 2071181815;
LABEL_187:
                  uint64_t v72 = v78 | 0x1030C4000000000;
LABEL_188:
                  MEMORY[0x22A614FA0](v71, v72);
                }
              }
              break;
            default:
              break;
          }
          ++v67;
        }
      }
      ++v6;
      uint64_t v5 = *a3;
    }
    while (v6 < (a3[1] - *a3) >> 4);
  }
  uint64_t v82 = v94;
  if (*(void *)v94)
  {
    uint64_t v83 = std::ostream::write();
  }
  else
  {
    unint64_t v84 = *(void *)(v94 + 40);
    if (*(void *)(v94 + 32) + 1 > v84)
    {
      size_t v89 = 2 * v84 + 2;
      *(void *)(v94 + 40) = v89;
      unint64_t v90 = *(uint64_t **)(v94 + 16);
      if (v90)
      {
        uint64_t v83 = *v90;
        size_t v91 = v90[1] - *v90;
        BOOL v92 = v89 >= v91;
        std::vector<char>::size_type v93 = v89 - v91;
        if (v93 != 0 && v92)
        {
          std::vector<char>::__append(*(std::vector<char> **)(v94 + 16), v93);
          uint64_t v83 = **(void **)(v94 + 16);
        }
        else
        {
          if (!v92) {
            v90[1] = v83 + v89;
          }
          uint64_t v82 = v94;
        }
      }
      else
      {
        uint64_t v83 = (uint64_t)malloc_type_realloc(*(void **)(v94 + 24), v89, 0xF6EA6B1uLL);
      }
      *(void *)(v82 + 24) = v83;
    }
    else
    {
      uint64_t v83 = *(void *)(v94 + 24);
    }
    *(unsigned char *)(v83 + (*(void *)(v82 + 32))++) = v109;
  }
  size_t v85 = turi::v2_block_impl::encode_number(v83, v82, v108);
  size_t v86 = turi::v2_block_impl::encode_number((uint64_t)v85, v82, v107);
  size_t v87 = turi::v2_block_impl::encode_number((uint64_t)v86, v82, v106);
  unint64_t v88 = turi::v2_block_impl::encode_number((uint64_t)v87, v82, v105);
  turi::v2_block_impl::encode_double((uint64_t)v88, v82, v104);
  if (v102)
  {
    std::vector<char>::size_type v103 = v102;
    operator delete(v102);
  }
  if (v100)
  {
    size_t v101 = v100;
    operator delete(v100);
  }
  if (v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
  std::vector<char>::size_type v98 = (void **)v104;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v98);
  std::vector<char>::size_type v98 = (void **)v105;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v98);
  std::vector<char>::size_type v98 = (void **)v106;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v98);
  std::vector<char>::size_type v98 = (void **)v107;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v98);
  std::vector<char>::size_type v98 = (void **)v108;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v98);
}

void sub_2240E8198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  tc_ft_to_type_cold_1((uint64_t)&__p, v35 - 120, v35 - 192);
  a14 = &a23;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = &a26;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = &a29;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = &a32;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = &a35;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::typed_decode(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    v98[0] = 0;
    v98[1] = 0;
    size_t v99 = a2;
    uint64_t v100 = 0;
    uint64_t v101 = a3;
    unint64_t v14 = *(void *)(a1 + 24);
    std::vector<turi::flexible_type>::resize(a4, v14);
    char v97 = 0;
    if (a2)
    {
      char v97 = *a2;
      uint64_t v100 = 1;
    }
    else
    {
      std::istream::read();
    }
    if ((*(unsigned char *)(a1 + 32) & 4) != 0)
    {
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec((turi::iarchive *)v98, a4);
      goto LABEL_22;
    }
    if (!v97) {
      return 1;
    }
    if (v97 != 2)
    {
      if (v97 != 1)
      {
        unint64_t v27 = (int *)global_logger();
        if (v27[169] <= 6)
        {
          if (cppipc::must_cancel((cppipc *)v27)) {
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          }
          uint64_t v28 = (file_logger *)global_logger();
          started = file_logger::start_stream(v28, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode", 534, 1);
          int v30 = pthread_getspecific(*((void *)started + 74));
          if (v30 && *((unsigned char *)v30 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"Unexpected value for num_types: ", 32);
          }
          uint64_t v31 = file_logger::operator<<<int>((uint64_t)started);
          unsigned int v32 = pthread_getspecific(*(void *)(v31 + 592));
          if (v32 && *((unsigned char *)v32 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32 + 2, (uint64_t)" (expected 0, 1, or 2)", 22);
          }
          uint64_t result = (uint64_t)pthread_getspecific(*(void *)(v31 + 592));
          if (result)
          {
            if (*(unsigned char *)(result + 280))
            {
              std::endl[abi:ne180100]<char,std::char_traits<char>>((void *)(result + 16));
              file_logger::stream_flush((file_logger *)v31);
              if (*(_DWORD *)(v31 + 600) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                void *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
              }
            }
            return 0;
          }
          return result;
        }
        return 0;
      }
      LOBYTE(v103) = 0;
      if (v99)
      {
        int v15 = v99[v100];
        LOBYTE(v103) = v99[v100++];
        if (!v14) {
          goto LABEL_149;
        }
      }
      else
      {
        std::istream::read();
        int v15 = v103;
        if (!v14)
        {
LABEL_149:
          if (v15 == 7) {
            return 1;
          }
          uint64_t v66 = 0;
          goto LABEL_193;
        }
      }
      uint64_t v51 = 0;
      unint64_t v52 = v14;
      do
      {
        uint64_t v53 = *a4 + v51;
        switch(*(unsigned char *)(v53 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v54 = *(atomic_ullong *volatile *)v53;
              if (!*(void *)v53) {
                goto LABEL_138;
              }
              if (*((char *)v54 + 31) < 0) {
                operator delete((void *)v54[1]);
              }
              atomic_ullong *volatile v55 = v54;
              uint64_t v56 = 0x1012C404EF22A49;
              goto LABEL_137;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v63 = *(atomic_ullong *volatile *)v53;
              if (!*(void *)v53) {
                goto LABEL_138;
              }
              uint64_t v64 = (void *)v63[1];
              if (v64)
              {
                v63[2] = (atomic_ullong)v64;
                operator delete(v64);
              }
              atomic_ullong *volatile v55 = v63;
              uint64_t v56 = 0x1080C409938AC02;
              goto LABEL_137;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v57 = *(atomic_ullong *volatile *)v53;
              if (!*(void *)v53) {
                goto LABEL_138;
              }
              v105.__locale_ = (std::locale::__imp *)(v57 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
              goto LABEL_132;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v57 = *(atomic_ullong *volatile *)v53;
              if (!*(void *)v53) {
                goto LABEL_138;
              }
              v105.__locale_ = (std::locale::__imp *)(v57 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
LABEL_132:
              atomic_ullong *volatile v55 = v57;
              uint64_t v56 = 0x1020C405E66F15BLL;
              goto LABEL_137;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v65 = *(atomic_ullong *volatile *)v53;
              if (!*(void *)v53) {
                goto LABEL_138;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v65 + 2);
              atomic_ullong *volatile v55 = v65;
              unsigned int v62 = -235920773;
              goto LABEL_136;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)v53;
              if (*(void *)v53)
              {
                unsigned int v59 = (void *)v58[6];
                if (v59)
                {
                  v58[7] = (atomic_ullong)v59;
                  operator delete(v59);
                }
                unint64_t v60 = (void *)v58[3];
                if (v60)
                {
                  v58[4] = (atomic_ullong)v60;
                  operator delete(v60);
                }
                uint64_t v61 = (std::__shared_weak_count *)v58[2];
                if (v61) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v61);
                }
                atomic_ullong *volatile v55 = v58;
                unsigned int v62 = 2071181815;
LABEL_136:
                uint64_t v56 = v62 | 0x1030C4000000000;
LABEL_137:
                MEMORY[0x22A614FA0](v55, v56);
              }
LABEL_138:
              *(void *)uint64_t v53 = 0;
            }
            break;
          default:
            break;
        }
        *(void *)uint64_t v53 = 0;
        *(_DWORD *)(v53 + 8) = 0;
        *(unsigned char *)(v53 + 12) = v15;
        switch(v15)
        {
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            *(void *)uint64_t v53 = 0x1900000000000000;
            *(_DWORD *)(v53 + 8) = 0;
            break;
          case 8:
            operator new();
          case 9:
            operator new();
          default:
            break;
        }
        v51 += 16;
        --v52;
      }
      while (v52);
      goto LABEL_149;
    }
    if (v99)
    {
      int v15 = v99[v100++];
      if (!v14) {
        goto LABEL_100;
      }
    }
    else
    {
      std::istream::read();
      int v15 = 0;
      if (!v14)
      {
LABEL_100:
        turi::dense_bitset::dense_bitset((turi::dense_bitset *)&v105, *(void *)(a1 + 24));
        uint64_t v48 = v106;
        locale = v105.__locale_;
        if (v106 >= 1)
        {
          bzero(v105.__locale_, 8 * (v106 - ((v106 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
          uint64_t v48 = v106;
        }
        size_t v50 = 8 * v48;
        if (v99)
        {
          memcpy(locale, &v99[v100], v50);
          v100 += v50;
        }
        else
        {
          std::istream::read();
        }
        unint64_t v103 = turi::dense_bitset::begin((turi::dense_bitset *)&v105);
        size_t v104 = v67;
        while (1)
        {
          if (v104 != &v105) {
            turi::dense_bitset::bit_pos_iterator::operator!=(turi::dense_bitset::bit_pos_iterator const&)const::{lambda(void)#1}::operator()();
          }
          if (v103 == -1) {
            break;
          }
          unint64_t v68 = *a4 + 16 * v103;
          switch(*(unsigned char *)(v68 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v68, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v69 = *(atomic_ullong *volatile *)v68;
                if (!*(void *)v68) {
                  goto LABEL_187;
                }
                if (*((char *)v69 + 31) < 0) {
                  operator delete((void *)v69[1]);
                }
                atomic_ullong *volatile v70 = v69;
                uint64_t v71 = 0x1012C404EF22A49;
                goto LABEL_186;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v68, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v78 = *(atomic_ullong *volatile *)v68;
                if (!*(void *)v68) {
                  goto LABEL_187;
                }
                uint64_t v79 = (void *)v78[1];
                if (v79)
                {
                  v78[2] = (atomic_ullong)v79;
                  operator delete(v79);
                }
                atomic_ullong *volatile v70 = v78;
                uint64_t v71 = 0x1080C409938AC02;
                goto LABEL_186;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v68, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)v68;
                if (!*(void *)v68) {
                  goto LABEL_187;
                }
                BOOL v102 = (void **)(v72 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v102);
                goto LABEL_181;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v68, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)v68;
                if (!*(void *)v68) {
                  goto LABEL_187;
                }
                BOOL v102 = (void **)(v72 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v102);
LABEL_181:
                atomic_ullong *volatile v70 = v72;
                uint64_t v71 = 0x1020C405E66F15BLL;
                goto LABEL_186;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v68, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v80 = *(atomic_ullong *volatile *)v68;
                if (!*(void *)v68) {
                  goto LABEL_187;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v80 + 2);
                atomic_ullong *volatile v70 = v80;
                unsigned int v77 = -235920773;
                goto LABEL_185;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v68, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v73 = *(atomic_ullong *volatile *)v68;
                if (*(void *)v68)
                {
                  std::vector<char>::size_type v74 = (void *)v73[6];
                  if (v74)
                  {
                    v73[7] = (atomic_ullong)v74;
                    operator delete(v74);
                  }
                  size_t v75 = (void *)v73[3];
                  if (v75)
                  {
                    v73[4] = (atomic_ullong)v75;
                    operator delete(v75);
                  }
                  char v76 = (std::__shared_weak_count *)v73[2];
                  if (v76) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
                  }
                  atomic_ullong *volatile v70 = v73;
                  unsigned int v77 = 2071181815;
LABEL_185:
                  uint64_t v71 = v77 | 0x1030C4000000000;
LABEL_186:
                  MEMORY[0x22A614FA0](v70, v71);
                }
LABEL_187:
                *(void *)unint64_t v68 = 0;
              }
              break;
            default:
              break;
          }
          *(void *)unint64_t v68 = 0;
          *(_DWORD *)(v68 + 8) = 0;
          *(unsigned char *)(v68 + 12) = 7;
          turi::dense_bitset::bit_pos_iterator::operator++(&v103);
        }
        uint64_t v81 = v106;
        uint64_t v66 = 0;
        if (v106)
        {
          uint64_t v82 = v105.__locale_;
          do
          {
            int8x8_t v83 = *(int8x8_t *)v82;
            uint64_t v82 = (std::locale::__imp *)((char *)v82 + 8);
            uint8x8_t v84 = (uint8x8_t)vcnt_s8(v83);
            v84.i16[0] = vaddlv_u8(v84);
            v66 += v84.u32[0];
            --v81;
          }
          while (v81);
        }
        free(v105.__locale_);
LABEL_193:
        switch(v15)
        {
          case 0:
            turi::v2_block_impl::decode_number((turi::iarchive *)v98, a4, v66);
            break;
          case 1:
            if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
              turi::v2_block_impl::decode_double((turi::iarchive *)v98, a4, v66);
            }
            else {
              turi::v2_block_impl::decode_double_legacy((turi::iarchive *)v98, a4, v66);
            }
            break;
          case 2:
            LODWORD(v105.__locale_) = 0;
            LOBYTE(v106) = 0;
            *(void *)&long long v108 = 0;
            long long v107 = 0uLL;
            *(void *)((char *)v110 + 13) = 0x200000000000000;
            long long v109 = 0u;
            v110[0] = 0u;
            operator new();
          case 3:
            LODWORD(v105.__locale_) = 0;
            *(void *)((char *)&v110[1] + 13) = 0x300000000000000;
            long long v107 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            memset(v110, 0, 29);
            operator new();
          case 9:
            LODWORD(v105.__locale_) = 0;
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            long long v107 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            memset(v110, 0, sizeof(v110));
            uint64_t v111 = 0;
            uint64_t v95 = (a4[1] - *a4) >> 4;
            unint64_t v103 = *a4;
            size_t v104 = (std::locale *)v95;
            turi::v2_block_impl::decode_ndvector_stream::read((uint64_t)&v105, v95 - v66, (turi::iarchive *)v98, &v103, 0);
            turi::v2_block_impl::decode_ndvector_stream::~decode_ndvector_stream((turi::v2_block_impl::decode_ndvector_stream *)&v105);
            break;
          default:
            if (v14)
            {
              uint64_t v85 = 0;
              while (2)
              {
                uint64_t v86 = *a4;
                size_t v87 = (unsigned char *)(*a4 + v85);
                switch(v87[12])
                {
                  case 0:
                    unint64_t v88 = v99;
                    if (!v99) {
                      goto LABEL_233;
                    }
                    goto LABEL_207;
                  case 1:
                    unint64_t v88 = v99;
                    if (!v99) {
                      goto LABEL_233;
                    }
LABEL_207:
                    *(void *)size_t v87 = *(void *)&v88[v100];
                    uint64_t v89 = v100 + 8;
                    goto LABEL_208;
                  case 2:
                    if (**(void **)v87 != 1) {
                      operator new();
                    }
                    turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)v98, (std::string *)(*(void *)v87 + 8));
                    goto LABEL_234;
                  case 3:
                    if (**(void **)v87 != 1) {
                      operator new();
                    }
                    turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec((uint64_t)v98, (void *)(*(void *)v87 + 8));
                    goto LABEL_234;
                  case 4:
                    if (**(void **)v87 != 1) {
                      operator new();
                    }
                    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec((turi::iarchive *)v98, (uint64_t *)(*(void *)v87 + 8));
                    goto LABEL_234;
                  case 5:
                    if (**(void **)v87 != 1) {
                      operator new();
                    }
                    turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec((turi::iarchive *)v98, (uint64_t *)(*(void *)v87 + 8));
                    goto LABEL_234;
                  case 6:
                    if (v99)
                    {
                      *(void *)size_t v87 = *(void *)&v99[v100];
                      v100 += 8;
                    }
                    else
                    {
                      std::istream::read();
                    }
                    uint64_t v90 = *(uint64_t *)v87 >> 56;
                    if ((v90 + 24) > 0x30)
                    {
                      if (v99)
                      {
                        *(_DWORD *)(v86 + v85 + 8) = *(_DWORD *)&v99[v100];
                        uint64_t v89 = v100 + 4;
LABEL_208:
                        uint64_t v100 = v89;
                      }
                      else
                      {
LABEL_233:
                        std::istream::read();
                      }
                    }
                    else
                    {
                      char v91 = 2 * v90;
                      if ((2 * v90 - 49) <= 0xFFFFFF9E) {
                        turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
                      }
                      if ((int)v90 >= 0) {
                        char v92 = 25;
                      }
                      else {
                        char v92 = -25;
                      }
                      unint64_t v93 = *(void *)v87 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(v92 + v91) << 56);
                      uint64_t v94 = v86 + v85;
                      *(void *)uint64_t v94 = v93;
                      *(_DWORD *)(v94 + 8) = 0;
                    }
LABEL_234:
                    v85 += 16;
                    if (!--v14) {
                      goto LABEL_22;
                    }
                    continue;
                  case 7:
                    goto LABEL_234;
                  case 8:
                    if (**(void **)v87 != 1) {
                      operator new();
                    }
                    turi::image_type::load((turi::image_type *)(*(void *)v87 + 8), (turi::iarchive *)v98);
                    goto LABEL_234;
                  case 9:
                    if (**(void **)v87 != 1) {
                      operator new();
                    }
                    turi::flexible_type_impl::ndarray<double>::load((void *)(*(void *)v87 + 8), (uint64_t)v98);
                    goto LABEL_234;
                  default:
                    turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
                }
              }
            }
            return result;
        }
LABEL_22:
        if (*(void *)(a1 + 24) != (a4[1] - *a4) >> 4)
        {
          unint64_t v16 = (int *)global_logger();
          if (v16[169] <= 6)
          {
            if (cppipc::must_cancel((cppipc *)v16)) {
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            }
            uint64_t v17 = (file_logger *)global_logger();
            unsigned int v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode", 571, 1);
            unsigned int v19 = pthread_getspecific(*((void *)v18 + 74));
            if (v19 && *((unsigned char *)v19 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19 + 2, (uint64_t)"Unexpected number of elements read. ", 36);
            }
            uint64_t v20 = pthread_getspecific(*((void *)v18 + 74));
            if (v20 && *((unsigned char *)v20 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)"Read ", 5);
            }
            uint64_t v21 = file_logger::operator<<<unsigned long>((uint64_t)v18);
            BOOL v22 = pthread_getspecific(*(void *)(v21 + 592));
            if (v22 && *((unsigned char *)v22 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)". Expecting ", 12);
            }
            uint64_t v23 = file_logger::operator<<<unsigned long long>(v21);
            uint64_t v24 = pthread_getspecific(*(void *)(v23 + 592));
            if (v24)
            {
              if (*((unsigned char *)v24 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(v24[2] - 24) + 16));
                uint64_t v25 = std::locale::use_facet(&v105, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
                std::locale::~locale(&v105);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v23);
                if (*(_DWORD *)(v23 + 600) == 7)
                {
                  __print_back_trace();
                  uint64_t v26 = __cxa_allocate_exception(8uLL);
                  *uint64_t v26 = "LOG_FATAL encountered";
                  __cxa_throw(v26, MEMORY[0x263F8C1D8], 0);
                }
              }
            }
          }
          return 0;
        }
        return 1;
      }
    }
    uint64_t v33 = 0;
    unint64_t v34 = v14;
    do
    {
      uint64_t v35 = *a4 + v33;
      switch(*(unsigned char *)(v35 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)v35;
            if (!*(void *)v35) {
              goto LABEL_89;
            }
            if (*((char *)v36 + 31) < 0) {
              operator delete((void *)v36[1]);
            }
            atomic_ullong *volatile v37 = v36;
            uint64_t v38 = 0x1012C404EF22A49;
            goto LABEL_88;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v45 = *(atomic_ullong *volatile *)v35;
            if (!*(void *)v35) {
              goto LABEL_89;
            }
            char v46 = (void *)v45[1];
            if (v46)
            {
              v45[2] = (atomic_ullong)v46;
              operator delete(v46);
            }
            atomic_ullong *volatile v37 = v45;
            uint64_t v38 = 0x1080C409938AC02;
            goto LABEL_88;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v35;
            if (!*(void *)v35) {
              goto LABEL_89;
            }
            v105.__locale_ = (std::locale::__imp *)(v39 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
            goto LABEL_83;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v35;
            if (!*(void *)v35) {
              goto LABEL_89;
            }
            v105.__locale_ = (std::locale::__imp *)(v39 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
LABEL_83:
            atomic_ullong *volatile v37 = v39;
            uint64_t v38 = 0x1020C405E66F15BLL;
            goto LABEL_88;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)v35;
            if (!*(void *)v35) {
              goto LABEL_89;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v47 + 2);
            atomic_ullong *volatile v37 = v47;
            unsigned int v44 = -235920773;
            goto LABEL_87;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v40 = *(atomic_ullong *volatile *)v35;
            if (*(void *)v35)
            {
              uint64_t v41 = (void *)v40[6];
              if (v41)
              {
                v40[7] = (atomic_ullong)v41;
                operator delete(v41);
              }
              BOOL v42 = (void *)v40[3];
              if (v42)
              {
                v40[4] = (atomic_ullong)v42;
                operator delete(v42);
              }
              std::vector<char>::size_type v43 = (std::__shared_weak_count *)v40[2];
              if (v43) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v43);
              }
              atomic_ullong *volatile v37 = v40;
              unsigned int v44 = 2071181815;
LABEL_87:
              uint64_t v38 = v44 | 0x1030C4000000000;
LABEL_88:
              MEMORY[0x22A614FA0](v37, v38);
            }
LABEL_89:
            *(void *)uint64_t v35 = 0;
          }
          break;
        default:
          break;
      }
      *(void *)uint64_t v35 = 0;
      *(_DWORD *)(v35 + 8) = 0;
      *(unsigned char *)(v35 + 12) = v15;
      switch(v15)
      {
        case 2:
          operator new();
        case 3:
          operator new();
        case 4:
          operator new();
        case 5:
          operator new();
        case 6:
          *(void *)uint64_t v35 = 0x1900000000000000;
          *(_DWORD *)(v35 + 8) = 0;
          break;
        case 8:
          operator new();
        case 9:
          operator new();
        default:
          break;
      }
      v33 += 16;
      --v34;
    }
    while (v34);
    goto LABEL_100;
  }
  uint64_t v4 = (int *)global_logger();
  if (v4[169] > 6) {
    return 0;
  }
  if (cppipc::must_cancel((cppipc *)v4)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  uint64_t v5 = (file_logger *)global_logger();
  unint64_t v6 = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode", 490, 1);
  uint64_t v7 = pthread_getspecific(*((void *)v6 + 74));
  if (v7 && *((unsigned char *)v7 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Attempting to decode a non-typed block", 38);
  }
  uint64_t result = (uint64_t)pthread_getspecific(*((void *)v6 + 74));
  if (result)
  {
    if (*(unsigned char *)(result + 280))
    {
      std::ios_base::getloc((const std::ios_base *)(result + 16 + *(void *)(*(void *)(result + 16) - 24)));
      uint64_t v9 = std::locale::use_facet(&v105, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v105);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(v6);
      if (*((_DWORD *)v6 + 150) == 7)
      {
        __print_back_trace();
        uint64_t v10 = __cxa_allocate_exception(8uLL);
        *uint64_t v10 = "LOG_FATAL encountered";
        __cxa_throw(v10, MEMORY[0x263F8C1D8], 0);
      }
    }
    return 0;
  }
  return result;
}

void sub_2240E9BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19)
{
  MEMORY[0x22A614FA0](v19, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

unint64_t turi::dense_bitset::begin(turi::dense_bitset *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return -1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(unint64_t **)this;
  while (1)
  {
    unint64_t v6 = *v4++;
    unint64_t v5 = v6;
    if (v6) {
      break;
    }
    v3 -= 64;
    if (!--v2) {
      return -1;
    }
  }
  unint64_t result = __clz(__rbit64(v5)) - v3;
  if (result >= *((void *)this + 1)) {
    return -1;
  }
  return result;
}

unint64_t turi::dense_bitset::bit_pos_iterator::operator++(unint64_t *a1)
{
  unint64_t v1 = (void *)a1[1];
  unint64_t v2 = *a1 >> 6;
  unint64_t v3 = *(void *)(*v1 + 8 * v2) & ~(0xFFFFFFFFFFFFFFFFLL >> ~*a1);
  if (!v3)
  {
    unint64_t v5 = v2 << 6;
    unint64_t v6 = v2 + 1;
    while (v6 < v1[2])
    {
      unint64_t v7 = *(void *)(*v1 + 8 * v6);
      v5 += 64;
      ++v6;
      if (v7)
      {
        unint64_t v4 = __clz(__rbit64(v7)) + v5;
        goto LABEL_7;
      }
    }
    goto LABEL_8;
  }
  unint64_t v4 = __clz(__rbit64(v3)) | *a1 & 0xFFFFFFFFFFFFFFC0;
LABEL_7:
  *a1 = v4;
  if (v4 >= v1[1])
  {
LABEL_8:
    unint64_t v4 = -1;
    *a1 = -1;
  }
  return v4;
}

uint64_t file_logger::operator<<<int>(uint64_t a1)
{
  unint64_t v2 = pthread_getspecific(*(void *)(a1 + 592));
  if (v2 && v2[280]) {
    std::ostream::operator<<();
  }
  return a1;
}

uint64_t file_logger::operator<<<unsigned long long>(uint64_t a1)
{
  unint64_t v2 = pthread_getspecific(*(void *)(a1 + 592));
  if (v2 && v2[280]) {
    std::ostream::operator<<();
  }
  return a1;
}

unint64_t turi::v2_block_impl::decode_number_stream::read(uint64_t a1, unint64_t a2, turi::iarchive *this, void *a4, unint64_t a5)
{
  if (!*(_DWORD *)a1)
  {
    unint64_t v9 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)a1 != 745) {
    return 0;
  }
  unint64_t v9 = 0;
  int v10 = *(unsigned __int8 *)(a1 + 1056);
  do
  {
    while (1)
    {
      if (v10)
      {
        unint64_t v13 = *(void *)(a1 + 1048) + 1;
        for (*(void *)(a1 + 1048) = v13; ; *(void *)(a1 + 1048) = 0)
        {
          unint64_t v15 = *(void *)(a1 + 1040);
          if (v13 < v15) {
            break;
          }
          a2 = *(void *)(a1 + 1032) - v15;
LABEL_6:
          *(void *)(a1 + 1032) = a2;
          if (!a2)
          {
            int v14 = 0;
            goto LABEL_13;
          }
          uint64_t v11 = (uint64_t *)&turi::v2_block_impl::MAX_INTEGERS_PER_BLOCK;
          if (a2 <= 0x80) {
            uint64_t v11 = (uint64_t *)(a1 + 1032);
          }
          uint64_t v12 = *v11;
          *(void *)(a1 + 1040) = *v11;
          turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(this, v12, (void *)(a1 + 8));
          unint64_t v13 = 0;
        }
      }
      *(unsigned char *)(a1 + 1056) = 0;
      if (!a5) {
        break;
      }
      uint64_t v17 = *(void *)(a1 + 1048);
      unint64_t v18 = *(void *)(a1 + 1040) - v17;
      if (a5 < v18) {
        unint64_t v18 = a5;
      }
      if (v18)
      {
        *(void *)(a1 + 1048) = v17 + v18 - 1;
        a5 -= v18;
        v9 += v18;
        int v10 = 1;
        *(unsigned char *)(a1 + 1056) = 1;
        if (!a5) {
          goto LABEL_58;
        }
      }
      else
      {
        int v10 = 0;
      }
    }
    int v10 = 0;
    uint64_t v19 = *a4 + 16 * v9;
    if (*(unsigned char *)(v19 + 12) != 7)
    {
      uint64_t v20 = *(void *)(a1 + 8 * *(void *)(a1 + 1048) + 8);
      switch(*(unsigned char *)(v19 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v19;
            if (!*(void *)v19) {
              goto LABEL_55;
            }
            if (*((char *)v21 + 31) < 0) {
              operator delete((void *)v21[1]);
            }
            atomic_ullong *volatile v22 = v21;
            uint64_t v23 = 0x1012C404EF22A49;
            goto LABEL_54;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v24 = *(atomic_ullong *volatile *)v19;
            if (!*(void *)v19) {
              goto LABEL_55;
            }
            uint64_t v25 = (void *)v24[1];
            if (v25)
            {
              v24[2] = (atomic_ullong)v25;
              operator delete(v25);
            }
            atomic_ullong *volatile v22 = v24;
            uint64_t v23 = 0x1080C409938AC02;
            goto LABEL_54;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)v19;
            if (!*(void *)v19) {
              goto LABEL_55;
            }
            uint64_t v33 = (void **)(v26 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v33);
            goto LABEL_40;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)v19;
            if (!*(void *)v19) {
              goto LABEL_55;
            }
            uint64_t v33 = (void **)(v26 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v33);
LABEL_40:
            atomic_ullong *volatile v22 = v26;
            uint64_t v23 = 0x1020C405E66F15BLL;
            goto LABEL_54;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = *(atomic_ullong *volatile *)v19;
            if (!*(void *)v19) {
              goto LABEL_55;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v27 + 2);
            atomic_ullong *volatile v22 = v27;
            unsigned int v28 = -235920773;
            goto LABEL_53;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v29 = *(atomic_ullong *volatile *)v19;
            if (*(void *)v19)
            {
              int v30 = (void *)v29[6];
              if (v30)
              {
                v29[7] = (atomic_ullong)v30;
                operator delete(v30);
              }
              uint64_t v31 = (void *)v29[3];
              if (v31)
              {
                void v29[4] = (atomic_ullong)v31;
                operator delete(v31);
              }
              unsigned int v32 = (std::__shared_weak_count *)v29[2];
              if (v32) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v32);
              }
              atomic_ullong *volatile v22 = v29;
              unsigned int v28 = 2071181815;
LABEL_53:
              uint64_t v23 = v28 | 0x1030C4000000000;
LABEL_54:
              MEMORY[0x22A614FA0](v22, v23);
            }
LABEL_55:
            *(void *)uint64_t v19 = 0;
          }
          break;
        default:
          break;
      }
      *(void *)uint64_t v19 = v20;
      *(_DWORD *)(v19 + 8) = 0;
      *(unsigned char *)(v19 + 12) = 0;
      int v10 = 1;
      *(unsigned char *)(a1 + 1056) = 1;
    }
    a5 = 0;
    ++v9;
LABEL_58:
    ;
  }
  while (v9 < a4[1]);
  int v14 = 745;
LABEL_13:
  *(_DWORD *)a1 = v14;
  return v9;
}

BOOL turi::v2_block_impl::decode_double_stream_legacy::read(uint64_t a1, unint64_t a2, turi::iarchive *this, void *a4, unint64_t a5)
{
  if (!*(_DWORD *)a1)
  {
    unint64_t v9 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)a1 != 770)
  {
    unint64_t v9 = 0;
    return v9 != 0;
  }
  unint64_t v9 = 0;
  int v10 = *(unsigned __int8 *)(a1 + 1072);
  do
  {
    while (1)
    {
      if (v10)
      {
        unint64_t v13 = *(void *)(a1 + 1048) + 1;
        for (*(void *)(a1 + 1048) = v13; ; *(void *)(a1 + 1048) = 0)
        {
          unint64_t v15 = *(void *)(a1 + 1040);
          if (v13 < v15) {
            break;
          }
          a2 = *(void *)(a1 + 8) - v15;
LABEL_6:
          *(void *)(a1 + 8) = a2;
          if (!a2)
          {
            int v14 = 0;
            goto LABEL_65;
          }
          uint64_t v11 = (uint64_t *)&turi::v2_block_impl::MAX_INTEGERS_PER_BLOCK;
          if (a2 <= 0x80) {
            uint64_t v11 = (uint64_t *)(a1 + 8);
          }
          uint64_t v12 = *v11;
          *(void *)(a1 + 1040) = *v11;
          turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(this, v12, (void *)(a1 + 16));
          unint64_t v13 = 0;
        }
        *(void *)(a1 + 1056) = __ROR8__(*(void *)(a1 + 8 * v13 + 16), 1);
      }
      *(unsigned char *)(a1 + 1072) = 0;
      if (!a5) {
        break;
      }
      uint64_t v16 = *(void *)(a1 + 1048);
      unint64_t v17 = *(void *)(a1 + 1040) - v16;
      if (a5 < v17) {
        unint64_t v17 = a5;
      }
      if (v17)
      {
        *(void *)(a1 + 1048) = v16 + v17 - 1;
        a5 -= v17;
        v9 += v17;
        int v10 = 1;
        *(unsigned char *)(a1 + 1072) = 1;
        if (!a5) {
          goto LABEL_61;
        }
      }
      else
      {
        int v10 = 0;
      }
    }
    int v10 = 0;
    uint64_t v18 = *a4 + 16 * v9;
    if (*(unsigned char *)(v18 + 12) != 7)
    {
      if (a1 + 1056 != v18)
      {
        switch(*(unsigned char *)(v18 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v18;
              if (!*(void *)v18) {
                goto LABEL_55;
              }
              if (*((char *)v19 + 31) < 0) {
                operator delete((void *)v19[1]);
              }
              atomic_ullong *volatile v20 = v19;
              uint64_t v21 = 0x1012C404EF22A49;
              goto LABEL_54;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)v18;
              if (!*(void *)v18) {
                goto LABEL_55;
              }
              uint64_t v23 = (void *)v22[1];
              if (v23)
              {
                std::locale v22[2] = (atomic_ullong)v23;
                operator delete(v23);
              }
              atomic_ullong *volatile v20 = v22;
              uint64_t v21 = 0x1080C409938AC02;
              goto LABEL_54;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *(atomic_ullong *volatile *)v18;
              if (!*(void *)v18) {
                goto LABEL_55;
              }
              unint64_t v34 = (void **)(v24 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
              goto LABEL_40;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *(atomic_ullong *volatile *)v18;
              if (!*(void *)v18) {
                goto LABEL_55;
              }
              unint64_t v34 = (void **)(v24 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_40:
              atomic_ullong *volatile v20 = v24;
              uint64_t v21 = 0x1020C405E66F15BLL;
              goto LABEL_54;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v25 = *(atomic_ullong *volatile *)v18;
              if (!*(void *)v18) {
                goto LABEL_55;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v25 + 2);
              atomic_ullong *volatile v20 = v25;
              unsigned int v26 = -235920773;
              goto LABEL_53;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v27 = *(atomic_ullong *volatile *)v18;
              if (*(void *)v18)
              {
                unsigned int v28 = (void *)v27[6];
                if (v28)
                {
                  v27[7] = (atomic_ullong)v28;
                  operator delete(v28);
                }
                atomic_ullong *volatile v29 = (void *)v27[3];
                if (v29)
                {
                  void v27[4] = (atomic_ullong)v29;
                  operator delete(v29);
                }
                int v30 = (std::__shared_weak_count *)v27[2];
                if (v30) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                }
                atomic_ullong *volatile v20 = v27;
                unsigned int v26 = 2071181815;
LABEL_53:
                uint64_t v21 = v26 | 0x1030C4000000000;
LABEL_54:
                MEMORY[0x22A614FA0](v20, v21);
              }
LABEL_55:
              *(void *)uint64_t v18 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v31 = *(void *)(a1 + 1056);
        *(void *)(v18 + 5) = *(void *)(a1 + 1061);
        *(void *)uint64_t v18 = v31;
        unsigned int v32 = *(unsigned __int8 *)(a1 + 1068);
        *(unsigned char *)(v18 + 12) = v32;
        if (v32 <= 9 && ((1 << v32) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v18, 1uLL);
        }
      }
      int v10 = 1;
      *(unsigned char *)(a1 + 1072) = 1;
    }
    a5 = 0;
    ++v9;
LABEL_61:
    ;
  }
  while (v9 < a4[1]);
  int v14 = 770;
LABEL_65:
  *(_DWORD *)a1 = v14;
  return v9 != 0;
}

BOOL turi::v2_block_impl::decode_double_stream::read(int *a1, uint64_t a2, turi::iarchive *this, void *a4, unint64_t a5)
{
  int v9 = *a1;
  if (!*a1)
  {
    *((unsigned char *)a1 + 16) = 0;
    uint64_t v12 = a1 + 4;
    *((void *)a1 + 1) = a2;
    uint64_t v13 = *((void *)this + 2);
    if (v13)
    {
      int v14 = *(unsigned __int8 *)(v13 + *((void *)this + 3));
      *uint64_t v12 = v14;
      ++*((void *)this + 3);
    }
    else
    {
      std::istream::read();
      int v14 = *v12;
    }
    char v37 = v14;
    if ((char)v14 >= 3)
    {
      uint64_t v38 = &v37;
      turi::v2_block_impl::decode_double_stream::read(unsigned long,turi::iarchive &,std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator()(&v38);
    }
    if (v14)
    {
      if (v14 == 1)
      {
        unint64_t v10 = 0;
        unint64_t v15 = *((void *)a1 + 1);
        if (v15) {
          goto LABEL_19;
        }
        goto LABEL_25;
      }
LABEL_17:
      unint64_t v10 = 0;
LABEL_25:
      *a1 = 0;
      return v10 != 0;
    }
LABEL_16:
    BOOL result = turi::v2_block_impl::decode_double_stream_legacy::read((uint64_t)(a1 + 6), *((void *)a1 + 1), this, a4, a5);
    *a1 = 794;
    return result;
  }
  if (v9 == 794)
  {
    if (!a1[6]) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v9 != 801)
  {
    unint64_t v10 = 0;
    return v10 != 0;
  }
  unint64_t v10 = 0;
  int v11 = *((unsigned __int8 *)a1 + 2144);
  do
  {
    while (1)
    {
      if (v11)
      {
        unint64_t v19 = *((void *)a1 + 267) + 1;
        for (*((void *)a1 + 267) = v19; ; *((void *)a1 + 267) = 0)
        {
          unint64_t v20 = *((void *)a1 + 266);
          if (v19 < v20) {
            break;
          }
          unint64_t v15 = *((void *)a1 + 1) - v20;
          *((void *)a1 + 1) = v15;
          if (!v15) {
            goto LABEL_25;
          }
LABEL_19:
          if (v15 <= 0x80) {
            unint64_t v17 = (uint64_t *)(a1 + 2);
          }
          else {
            unint64_t v17 = (uint64_t *)&turi::v2_block_impl::MAX_INTEGERS_PER_BLOCK;
          }
          uint64_t v18 = *v17;
          *((void *)a1 + 266) = *v17;
          turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(this, v18, (void *)a1 + 138);
          unint64_t v19 = 0;
        }
      }
      *((unsigned char *)a1 + 2144) = 0;
      if (!a5) {
        break;
      }
      uint64_t v21 = *((void *)a1 + 267);
      unint64_t v22 = *((void *)a1 + 266) - v21;
      if (a5 < v22) {
        unint64_t v22 = a5;
      }
      if (v22)
      {
        *((void *)a1 + 267) = v21 + v22 - 1;
        a5 -= v22;
        v10 += v22;
        int v11 = 1;
        *((unsigned char *)a1 + 2144) = 1;
        if (!a5) {
          goto LABEL_70;
        }
      }
      else
      {
        int v11 = 0;
      }
    }
    int v11 = 0;
    uint64_t v23 = *a4 + 16 * v10;
    if (*(unsigned char *)(v23 + 12) != 7)
    {
      double v24 = (double)*(uint64_t *)&a1[2 * *((void *)a1 + 267) + 276];
      switch(*(unsigned char *)(v23 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v25 = *(atomic_ullong *volatile *)v23;
            if (!*(void *)v23) {
              goto LABEL_67;
            }
            if (*((char *)v25 + 31) < 0) {
              operator delete((void *)v25[1]);
            }
            atomic_ullong *volatile v26 = v25;
            uint64_t v27 = 0x1012C404EF22A49;
            goto LABEL_66;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v28 = *(atomic_ullong *volatile *)v23;
            if (!*(void *)v23) {
              goto LABEL_67;
            }
            atomic_ullong *volatile v29 = (void *)v28[1];
            if (v29)
            {
              v28[2] = (atomic_ullong)v29;
              operator delete(v29);
            }
            atomic_ullong *volatile v26 = v28;
            uint64_t v27 = 0x1080C409938AC02;
            goto LABEL_66;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v23;
            if (!*(void *)v23) {
              goto LABEL_67;
            }
            uint64_t v38 = (char *)(v30 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
            goto LABEL_52;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v23;
            if (!*(void *)v23) {
              goto LABEL_67;
            }
            uint64_t v38 = (char *)(v30 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
LABEL_52:
            atomic_ullong *volatile v26 = v30;
            uint64_t v27 = 0x1020C405E66F15BLL;
            goto LABEL_66;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)v23;
            if (!*(void *)v23) {
              goto LABEL_67;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v31 + 2);
            atomic_ullong *volatile v26 = v31;
            unsigned int v32 = -235920773;
            goto LABEL_65;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)v23;
            if (*(void *)v23)
            {
              unint64_t v34 = (void *)v33[6];
              if (v34)
              {
                v33[7] = (atomic_ullong)v34;
                operator delete(v34);
              }
              uint64_t v35 = (void *)v33[3];
              if (v35)
              {
                v33[4] = (atomic_ullong)v35;
                operator delete(v35);
              }
              atomic_ullong *volatile v36 = (std::__shared_weak_count *)v33[2];
              if (v36) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              }
              atomic_ullong *volatile v26 = v33;
              unsigned int v32 = 2071181815;
LABEL_65:
              uint64_t v27 = v32 | 0x1030C4000000000;
LABEL_66:
              MEMORY[0x22A614FA0](v26, v27);
            }
LABEL_67:
            *(void *)uint64_t v23 = 0;
          }
          break;
        default:
          break;
      }
      *(double *)uint64_t v23 = v24;
      *(_DWORD *)(v23 + 8) = 0;
      int v11 = 1;
      *(unsigned char *)(v23 + 12) = 1;
      *((unsigned char *)a1 + 2144) = 1;
    }
    a5 = 0;
    ++v10;
LABEL_70:
    ;
  }
  while (v10 < a4[1]);
  *a1 = 801;
  return v10 != 0;
}

void turi::v2_block_impl::decode_double_stream::read(unsigned long,turi::iarchive &,std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator()(unsigned char **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  unint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Assertion failed: (", 19);
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  unint64_t v4 = (void *)std::ostream::operator<<();
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"reserved", 8);
  unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<", 1);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"3", 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  LOBYTE(v16) = **a1;
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v16, 1);
  LOBYTE(v16) = 32;
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"<", 1);
  LOBYTE(v16) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v16, 1);
  uint64_t v13 = (void *)std::ostream::operator<<();
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v14);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v15 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 790, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v15, (uint64_t)&__p);
    if (v18 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v16 = v19;
  turi::v2_block_impl::decode_double_stream::read(unsigned long,turi::iarchive &,std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240EAC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::v2_block_impl::decode_string_stream::read(int *a1, unint64_t a2, turi::iarchive *a3, void *a4, unint64_t a5)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  int v9 = *a1;
  if (!*a1)
  {
    *((void *)a1 + 1) = a2;
    *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 5) = 0;
    v72.__r_.__value_.__r.__words[0] = 0;
    std::vector<turi::flexible_type>::resize((uint64_t *)a1 + 3, a2, (uint64_t)&v72);
    switch(v72.__r_.__value_.__s.__data_[12])
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)v72.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string::size_type v12 = v72.__r_.__value_.__r.__words[0];
          if (v72.__r_.__value_.__r.__words[0])
          {
            if (*(char *)(v72.__r_.__value_.__r.__words[0] + 31) < 0) {
              operator delete(*(void **)(v72.__r_.__value_.__r.__words[0] + 8));
            }
            uint64_t v13 = (void *)v12;
            uint64_t v14 = 0x1012C404EF22A49;
            goto LABEL_32;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)v72.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string::size_type v16 = v72.__r_.__value_.__r.__words[0];
          if (v72.__r_.__value_.__r.__words[0])
          {
            unint64_t v17 = *(void **)(v72.__r_.__value_.__r.__words[0] + 8);
            if (v17)
            {
              *(void *)(v72.__r_.__value_.__r.__words[0] + 16) = v17;
              operator delete(v17);
            }
            uint64_t v13 = (void *)v16;
            uint64_t v14 = 0x1080C409938AC02;
            goto LABEL_32;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)v72.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string::size_type v18 = v72.__r_.__value_.__r.__words[0];
          if (v72.__r_.__value_.__r.__words[0])
          {
            std::string::size_type __n = v72.__r_.__value_.__r.__words[0] + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__n);
            goto LABEL_24;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)v72.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string::size_type v18 = v72.__r_.__value_.__r.__words[0];
          if (v72.__r_.__value_.__r.__words[0])
          {
            std::string::size_type __n = v72.__r_.__value_.__r.__words[0] + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__n);
LABEL_24:
            uint64_t v13 = (void *)v18;
            uint64_t v14 = 0x1020C405E66F15BLL;
            goto LABEL_32;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)v72.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string::size_type v20 = v72.__r_.__value_.__r.__words[0];
          if (v72.__r_.__value_.__r.__words[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(v72.__r_.__value_.__r.__words[0] + 16));
            uint64_t v13 = (void *)v20;
            unsigned int v19 = -235920773;
            goto LABEL_31;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)v72.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1
          && v72.__r_.__value_.__r.__words[0])
        {
          uint64_t v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v72.__r_.__value_.__l.__data_);
          unsigned int v19 = 2071181815;
LABEL_31:
          uint64_t v14 = v19 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v13, v14);
        }
        break;
      default:
        break;
    }
    uint64_t v21 = a1 + 4;
    uint64_t v22 = *((void *)a3 + 2);
    if (v22)
    {
      int v23 = *(unsigned __int8 *)(v22 + *((void *)a3 + 3));
      unsigned char *v21 = v23;
      ++*((void *)a3 + 3);
      if (v23)
      {
LABEL_35:
        turi::integer_pack::variable_decode<turi::iarchive>(a3, (void *)a1 + 6);
        std::vector<turi::flexible_type>::resize((uint64_t *)a1 + 7, *((void *)a1 + 6));
        uint64_t v24 = *((void *)a1 + 7);
        if (v24 != *((void *)a1 + 8))
        {
          memset(&v72, 0, sizeof(v72));
          std::string::size_type __n = 0;
          turi::integer_pack::variable_decode<turi::iarchive>(a3, &__n);
          size_t v25 = __n;
          std::string::resize(&v72, __n, 0);
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            atomic_ullong *volatile v26 = &v72;
          }
          else {
            atomic_ullong *volatile v26 = (std::string *)v72.__r_.__value_.__r.__words[0];
          }
          uint64_t v27 = *((void *)a3 + 2);
          if (v27)
          {
            memcpy(v26, (const void *)(v27 + *((void *)a3 + 3)), v25);
            *((void *)a3 + 3) += v25;
          }
          else
          {
            std::istream::read();
          }
          turi::flexible_type::operator=<std::string>(v24);
        }
        turi::v2_block_impl::decode_number(a3, (uint64_t *)a1 + 3, 0);
        unint64_t v28 = 0;
        unint64_t v10 = 0;
        *((void *)a1 + 12) = 0;
        goto LABEL_46;
      }
    }
    else
    {
      std::istream::read();
      if (*v21) {
        goto LABEL_35;
      }
    }
    turi::v2_block_impl::decode_number(a3, (uint64_t *)a1 + 3, 0);
    unint64_t v29 = 0;
    unint64_t v10 = 0;
    *((void *)a1 + 12) = 0;
    goto LABEL_50;
  }
  if (v9 == 833)
  {
    unint64_t v10 = 0;
    int v15 = *((unsigned __int8 *)a1 + 104);
    while (1)
    {
      if (v15)
      {
        unint64_t v28 = *((void *)a1 + 12) + 1;
        *((void *)a1 + 12) = v28;
LABEL_46:
        if (v28 >= *((void *)a1 + 1))
        {
LABEL_47:
          int v30 = 0;
          goto LABEL_48;
        }
      }
      *((unsigned char *)a1 + 104) = 0;
      if (!a5) {
        break;
      }
      uint64_t v36 = *((void *)a1 + 12);
      unint64_t v37 = *((void *)a1 + 1) - v36;
      if (a5 < v37) {
        unint64_t v37 = a5;
      }
      if (v37)
      {
        *((void *)a1 + 12) = v36 + v37 - 1;
        a5 -= v37;
        v10 += v37;
        int v15 = 1;
        *((unsigned char *)a1 + 104) = 1;
        if (!a5)
        {
LABEL_131:
          if (v10 >= a4[1])
          {
            int v30 = 833;
            goto LABEL_48;
          }
        }
      }
      else
      {
        int v15 = 0;
      }
    }
    int v15 = 0;
    uint64_t v38 = *a4 + 16 * v10;
    if (*(unsigned char *)(v38 + 12) != 7)
    {
      uint64_t v39 = *((void *)a1 + 7) + 16 * *(void *)(*((void *)a1 + 3) + 16 * *((void *)a1 + 12));
      if (v39 != v38)
      {
        switch(*(unsigned char *)(v38 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v40 = *(atomic_ullong *volatile *)v38;
              if (!*(void *)v38) {
                goto LABEL_123;
              }
              if (*((char *)v40 + 31) < 0) {
                operator delete((void *)v40[1]);
              }
              atomic_ullong *volatile v41 = v40;
              uint64_t v42 = 0x1012C404EF22A49;
              goto LABEL_122;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v43 = *(atomic_ullong *volatile *)v38;
              if (!*(void *)v38) {
                goto LABEL_123;
              }
              unsigned int v44 = (void *)v43[1];
              if (v44)
              {
                v43[2] = (atomic_ullong)v44;
                operator delete(v44);
              }
              atomic_ullong *volatile v41 = v43;
              uint64_t v42 = 0x1080C409938AC02;
              goto LABEL_122;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v45 = *(atomic_ullong *volatile *)v38;
              if (!*(void *)v38) {
                goto LABEL_123;
              }
              v72.__r_.__value_.__r.__words[0] = (std::string::size_type)(v45 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
              goto LABEL_108;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v45 = *(atomic_ullong *volatile *)v38;
              if (!*(void *)v38) {
                goto LABEL_123;
              }
              v72.__r_.__value_.__r.__words[0] = (std::string::size_type)(v45 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
LABEL_108:
              atomic_ullong *volatile v41 = v45;
              uint64_t v42 = 0x1020C405E66F15BLL;
              goto LABEL_122;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v46 = *(atomic_ullong *volatile *)v38;
              if (!*(void *)v38) {
                goto LABEL_123;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v46 + 2);
              atomic_ullong *volatile v41 = v46;
              unsigned int v47 = -235920773;
              goto LABEL_121;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v38, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v48 = *(atomic_ullong *volatile *)v38;
              if (*(void *)v38)
              {
                char v49 = (void *)v48[6];
                if (v49)
                {
                  v48[7] = (atomic_ullong)v49;
                  operator delete(v49);
                }
                size_t v50 = (void *)v48[3];
                if (v50)
                {
                  void v48[4] = (atomic_ullong)v50;
                  operator delete(v50);
                }
                uint64_t v51 = (std::__shared_weak_count *)v48[2];
                if (v51) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v51);
                }
                atomic_ullong *volatile v41 = v48;
                unsigned int v47 = 2071181815;
LABEL_121:
                uint64_t v42 = v47 | 0x1030C4000000000;
LABEL_122:
                MEMORY[0x22A614FA0](v41, v42);
              }
LABEL_123:
              *(void *)uint64_t v38 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v52 = *(void *)v39;
        *(void *)(v38 + 5) = *(void *)(v39 + 5);
        *(void *)uint64_t v38 = v52;
        LODWORD(v52) = *(unsigned __int8 *)(v39 + 12);
        *(unsigned char *)(v38 + 12) = v52;
        BOOL v53 = v52 > 9;
        int v54 = (1 << v52) & 0x33C;
        if (!v53 && v54 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v38, 1uLL);
        }
      }
      int v15 = 1;
      *((unsigned char *)a1 + 104) = 1;
    }
    a5 = 0;
    ++v10;
    goto LABEL_131;
  }
  if (v9 != 844)
  {
    unint64_t v10 = 0;
    return v10 != 0;
  }
  unint64_t v10 = 0;
  int v11 = *((unsigned __int8 *)a1 + 104);
  do
  {
    if (v11)
    {
      unint64_t v29 = *((void *)a1 + 12) + 1;
      *((void *)a1 + 12) = v29;
LABEL_50:
      if (v29 >= *((void *)a1 + 1)) {
        goto LABEL_47;
      }
      std::string::size_type v32 = *(void *)(*((void *)a1 + 3) + 16 * v29);
      switch(*((unsigned char *)a1 + 92))
      {
        case 2:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 3:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 4:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 5:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 8:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 9:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        default:
          break;
      }
      std::string::resize((std::string *)(*((void *)a1 + 10) + 8), v32, 0);
      switch(*((unsigned char *)a1 + 92))
      {
        case 2:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 3:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 4:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 5:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 8:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        case 9:
          if (**((void **)a1 + 10) != 1) {
            operator new();
          }
          return result;
        default:
          break;
      }
      uint64_t v33 = *((void *)a1 + 10);
      unint64_t v34 = (void *)(v33 + 8);
      if (*(char *)(v33 + 31) < 0) {
        unint64_t v34 = (void *)*v34;
      }
      uint64_t v35 = *((void *)a3 + 2);
      if (v35)
      {
        memcpy(v34, (const void *)(v35 + *((void *)a3 + 3)), v32);
        *((void *)a3 + 3) += v32;
      }
      else
      {
        std::istream::read();
      }
    }
    *((unsigned char *)a1 + 104) = 0;
    if (a5)
    {
      --a5;
LABEL_175:
      int v11 = 1;
      *((unsigned char *)a1 + 104) = 1;
      goto LABEL_176;
    }
    int v11 = 0;
    uint64_t v56 = *a4 + 16 * v10;
    if (*(unsigned char *)(v56 + 12) != 7)
    {
      a5 = 0;
      if (a1 + 20 != (int *)v56)
      {
        switch(*(unsigned char *)(v56 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v56, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v57 = *(atomic_ullong *volatile *)v56;
              if (!*(void *)v56) {
                goto LABEL_171;
              }
              if (*((char *)v57 + 31) < 0) {
                operator delete((void *)v57[1]);
              }
              atomic_ullong *volatile v58 = v57;
              uint64_t v59 = 0x1012C404EF22A49;
              goto LABEL_170;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v56, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v60 = *(atomic_ullong *volatile *)v56;
              if (!*(void *)v56) {
                goto LABEL_171;
              }
              uint64_t v61 = (void *)v60[1];
              if (v61)
              {
                v60[2] = (atomic_ullong)v61;
                operator delete(v61);
              }
              atomic_ullong *volatile v58 = v60;
              uint64_t v59 = 0x1080C409938AC02;
              goto LABEL_170;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v56, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)v56;
              if (!*(void *)v56) {
                goto LABEL_171;
              }
              v72.__r_.__value_.__r.__words[0] = (std::string::size_type)(v62 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
              goto LABEL_156;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v56, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)v56;
              if (!*(void *)v56) {
                goto LABEL_171;
              }
              v72.__r_.__value_.__r.__words[0] = (std::string::size_type)(v62 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
LABEL_156:
              atomic_ullong *volatile v58 = v62;
              uint64_t v59 = 0x1020C405E66F15BLL;
              goto LABEL_170;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v56, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v63 = *(atomic_ullong *volatile *)v56;
              if (!*(void *)v56) {
                goto LABEL_171;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v63 + 2);
              atomic_ullong *volatile v58 = v63;
              unsigned int v64 = -235920773;
              goto LABEL_169;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v56, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v65 = *(atomic_ullong *volatile *)v56;
              if (*(void *)v56)
              {
                uint64_t v66 = (void *)v65[6];
                if (v66)
                {
                  v65[7] = (atomic_ullong)v66;
                  operator delete(v66);
                }
                char v67 = (void *)v65[3];
                if (v67)
                {
                  v65[4] = (atomic_ullong)v67;
                  operator delete(v67);
                }
                unint64_t v68 = (std::__shared_weak_count *)v65[2];
                if (v68) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v68);
                }
                atomic_ullong *volatile v58 = v65;
                unsigned int v64 = 2071181815;
LABEL_169:
                uint64_t v59 = v64 | 0x1030C4000000000;
LABEL_170:
                MEMORY[0x22A614FA0](v58, v59);
              }
LABEL_171:
              *(void *)uint64_t v56 = 0;
            }
            break;
          default:
            break;
        }
        a5 = 0;
        uint64_t v69 = *((void *)a1 + 10);
        *(void *)(v56 + 5) = *(void *)((char *)a1 + 85);
        *(void *)uint64_t v56 = v69;
        unsigned int v70 = *((unsigned __int8 *)a1 + 92);
        *(unsigned char *)(v56 + 12) = v70;
        if (v70 <= 9 && ((1 << v70) & 0x33C) != 0)
        {
          a5 = 0;
          atomic_fetch_add(*(atomic_ullong *volatile *)v56, 1uLL);
        }
      }
      goto LABEL_175;
    }
LABEL_176:
    ++v10;
  }
  while (a5 || v10 < a4[1]);
  int v30 = 844;
LABEL_48:
  *a1 = v30;
  return v10 != 0;
}

void std::vector<turi::flexible_type>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v7 = *a1 + 16 * a2;
      while (v4 != v7)
      {
        v4 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v4);
      }
      a1[1] = v7;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    std::vector<turi::flexible_type>::__append(a1, v6, a3);
  }
}

turi::iarchive *turi::integer_pack::variable_decode<turi::iarchive>(turi::iarchive *this, void *a2)
{
  unint64_t v3 = this;
  *(void *)std::string __dst = 0;
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 3);
    __dst[0] = *(unsigned char *)(v4 + v5);
    *((void *)this + 3) = v5 + 1;
  }
  else
  {
    this = (turi::iarchive *)std::istream::read();
  }
  if (__dst[0])
  {
    if ((__dst[0] & 3) == 1)
    {
      uint64_t v7 = *((void *)v3 + 2);
      if (v7)
      {
        uint64_t v8 = *((void *)v3 + 3);
        __dst[1] = *(unsigned char *)(v7 + v8);
        *((void *)v3 + 3) = v8 + 1;
      }
      else
      {
        this = (turi::iarchive *)std::istream::read();
      }
      uint64_t v6 = *(void *)__dst >> 2;
    }
    else if ((__dst[0] & 7) == 3)
    {
      uint64_t v9 = *((void *)v3 + 2);
      if (v9)
      {
        uint64_t v10 = *((void *)v3 + 3);
        *(_WORD *)&__dst[1] = *(_WORD *)(v9 + v10);
        *((void *)v3 + 3) = v10 + 2;
      }
      else
      {
        this = (turi::iarchive *)std::istream::read();
      }
      uint64_t v6 = *(void *)__dst >> 3;
    }
    else if ((__dst[0] & 0xF) == 7)
    {
      uint64_t v11 = *((void *)v3 + 2);
      if (v11)
      {
        uint64_t v12 = *((void *)v3 + 3);
        uint64_t v13 = v11 + v12;
        char v14 = *(unsigned char *)(v13 + 2);
        *(_WORD *)&__dst[1] = *(_WORD *)v13;
        __dst[3] = v14;
        *((void *)v3 + 3) = v12 + 3;
      }
      else
      {
        this = (turi::iarchive *)std::istream::read();
      }
      uint64_t v6 = *(void *)__dst >> 4;
    }
    else if ((__dst[0] & 0x1F) == 0xFLL)
    {
      uint64_t v15 = *((void *)v3 + 2);
      if (v15)
      {
        uint64_t v16 = *((void *)v3 + 3);
        *(_DWORD *)&__dst[1] = *(_DWORD *)(v15 + v16);
        *((void *)v3 + 3) = v16 + 4;
      }
      else
      {
        this = (turi::iarchive *)std::istream::read();
      }
      uint64_t v6 = *(void *)__dst >> 5;
    }
    else if ((__dst[0] & 0x3F) == 0x1FLL)
    {
      this = (turi::iarchive *)turi::iarchive::read(v3, &__dst[1], 5uLL);
      uint64_t v6 = *(void *)__dst >> 6;
    }
    else if ((__dst[0] & 0x7F) == 0x3FLL)
    {
      this = (turi::iarchive *)turi::iarchive::read(v3, &__dst[1], 6uLL);
      uint64_t v6 = *(void *)__dst >> 7;
    }
    else
    {
      this = (turi::iarchive *)turi::iarchive::read(v3, __dst, 8uLL);
      uint64_t v6 = *(void *)__dst;
    }
  }
  else
  {
    uint64_t v6 = *(void *)__dst >> 1;
  }
  *a2 = v6;
  return this;
}

BOOL turi::v2_block_impl::decode_vector_stream::read(uint64_t a1, unint64_t a2, turi::iarchive *a3, void *a4, uint64_t a5, int a6)
{
  if (!*(_DWORD *)a1)
  {
    char v11 = a6;
    *(void *)(a1 + 8) = a2;
    if (a6)
    {
      uint64_t v13 = *((void *)a3 + 2);
      if (v13)
      {
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(v13 + (*((void *)a3 + 3))++);
      }
      else
      {
        std::istream::read();
        a2 = *(void *)(a1 + 8);
      }
    }
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 24), a2);
    turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 24), 0);
    *(void *)(a1 + 48) = 0;
    char v14 = *(uint64_t **)(a1 + 24);
    uint64_t v15 = *(uint64_t **)(a1 + 32);
    if (v14 == v15)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *v14;
        v14 += 2;
        v16 += v17;
      }
      while (v14 != v15);
      *(void *)(a1 + 48) = v16;
    }
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 56), v16);
    std::string::size_type v18 = (uint64_t *)(a1 + 56);
    if (v11) {
      turi::v2_block_impl::decode_double(a3, v18, 0);
    }
    else {
      turi::v2_block_impl::decode_double_legacy(a3, v18, 0);
    }
    unint64_t v19 = 0;
    unint64_t v9 = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    goto LABEL_18;
  }
  if (*(_DWORD *)a1 != 895)
  {
    unint64_t v9 = 0;
    return v9 != 0;
  }
  unint64_t v9 = 0;
  int v10 = *(unsigned __int8 *)(a1 + 128);
  do
  {
    if (v10)
    {
      unint64_t v19 = *(void *)(a1 + 112) + 1;
      *(void *)(a1 + 112) = v19;
LABEL_18:
      if (v19 >= *(void *)(a1 + 8))
      {
        int v20 = 0;
        goto LABEL_86;
      }
      switch(*(unsigned char *)(a1 + 108))
      {
        case 2:
          if (**(void **)(a1 + 96) != 1) {
            operator new();
          }
          return result;
        case 3:
          if (**(void **)(a1 + 96) != 1) {
            operator new();
          }
          return result;
        case 4:
          if (**(void **)(a1 + 96) != 1) {
            operator new();
          }
          return result;
        case 5:
          if (**(void **)(a1 + 96) != 1) {
            operator new();
          }
          return result;
        case 8:
          if (**(void **)(a1 + 96) != 1) {
            operator new();
          }
          return result;
        case 9:
          if (**(void **)(a1 + 96) != 1) {
            operator new();
          }
          return result;
        default:
          break;
      }
      uint64_t v21 = *(void *)(a1 + 96);
      std::vector<double>::resize(v21 + 8, *(void *)(*(void *)(a1 + 24) + 16 * *(void *)(a1 + 80)));
      unint64_t v22 = 0;
      ++*(void *)(a1 + 80);
      int v23 = *(void **)(v21 + 8);
      uint64_t v24 = *(void *)(v21 + 16) - (void)v23;
      if (v24)
      {
        unint64_t v22 = v24 >> 3;
        uint64_t v25 = *(void *)(a1 + 88);
        if (v22 <= 1) {
          unint64_t v22 = 1;
        }
        atomic_ullong *volatile v26 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v25);
        unint64_t v27 = v22;
        do
        {
          uint64_t v28 = *v26;
          v26 += 2;
          *v23++ = v28;
          ++v25;
          --v27;
        }
        while (v27);
        *(void *)(a1 + 88) = v25;
      }
      *(void *)(a1 + 120) = v22;
    }
    *(unsigned char *)(a1 + 128) = 0;
    if (a5)
    {
      --a5;
LABEL_80:
      int v10 = 1;
      *(unsigned char *)(a1 + 128) = 1;
      goto LABEL_81;
    }
    int v10 = 0;
    uint64_t v29 = *a4 + 16 * v9;
    if (*(unsigned char *)(v29 + 12) != 7)
    {
      a5 = 0;
      if (a1 + 96 != v29)
      {
        switch(*(unsigned char *)(v29 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v29;
              if (!*(void *)v29) {
                goto LABEL_76;
              }
              if (*((char *)v30 + 31) < 0) {
                operator delete((void *)v30[1]);
              }
              atomic_ullong *volatile v31 = v30;
              uint64_t v32 = 0x1012C404EF22A49;
              goto LABEL_75;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)v29;
              if (!*(void *)v29) {
                goto LABEL_76;
              }
              unint64_t v34 = (void *)v33[1];
              if (v34)
              {
                v33[2] = (atomic_ullong)v34;
                operator delete(v34);
              }
              atomic_ullong *volatile v31 = v33;
              uint64_t v32 = 0x1080C409938AC02;
              goto LABEL_75;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v29;
              if (!*(void *)v29) {
                goto LABEL_76;
              }
              atomic_ullong *volatile v45 = (void **)(v35 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
              goto LABEL_61;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v29;
              if (!*(void *)v29) {
                goto LABEL_76;
              }
              atomic_ullong *volatile v45 = (void **)(v35 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v45);
LABEL_61:
              atomic_ullong *volatile v31 = v35;
              uint64_t v32 = 0x1020C405E66F15BLL;
              goto LABEL_75;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)v29;
              if (!*(void *)v29) {
                goto LABEL_76;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v36 + 2);
              atomic_ullong *volatile v31 = v36;
              unsigned int v37 = -235920773;
              goto LABEL_74;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v29;
              if (*(void *)v29)
              {
                uint64_t v39 = (void *)v38[6];
                if (v39)
                {
                  v38[7] = (atomic_ullong)v39;
                  operator delete(v39);
                }
                atomic_ullong *volatile v40 = (void *)v38[3];
                if (v40)
                {
                  v38[4] = (atomic_ullong)v40;
                  operator delete(v40);
                }
                atomic_ullong *volatile v41 = (std::__shared_weak_count *)v38[2];
                if (v41) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                }
                atomic_ullong *volatile v31 = v38;
                unsigned int v37 = 2071181815;
LABEL_74:
                uint64_t v32 = v37 | 0x1030C4000000000;
LABEL_75:
                MEMORY[0x22A614FA0](v31, v32);
              }
LABEL_76:
              *(void *)uint64_t v29 = 0;
            }
            break;
          default:
            break;
        }
        a5 = 0;
        uint64_t v42 = *(void *)(a1 + 96);
        *(void *)(v29 + 5) = *(void *)(a1 + 101);
        *(void *)uint64_t v29 = v42;
        unsigned int v43 = *(unsigned __int8 *)(a1 + 108);
        *(unsigned char *)(v29 + 12) = v43;
        if (v43 <= 9 && ((1 << v43) & 0x33C) != 0)
        {
          a5 = 0;
          atomic_fetch_add(*(atomic_ullong *volatile *)v29, 1uLL);
        }
      }
      goto LABEL_80;
    }
LABEL_81:
    ++v9;
  }
  while (a5 || v9 < a4[1]);
  int v20 = 895;
LABEL_86:
  *(_DWORD *)a1 = v20;
  return v9 != 0;
}

BOOL turi::v2_block_impl::decode_ndvector_stream::read(uint64_t a1, unint64_t a2, turi::iarchive *a3, void *a4, uint64_t a5)
{
  if (*(_DWORD *)a1)
  {
    if (*(_DWORD *)a1 != 957)
    {
      unint64_t v8 = 0;
      return v8 != 0;
    }
    unint64_t v8 = 0;
    int v9 = *(unsigned __int8 *)(a1 + 264);
LABEL_190:
    if (!v9) {
      goto LABEL_184;
    }
    unint64_t v46 = *(void *)(a1 + 248) + 1;
    *(void *)(a1 + 248) = v46;
  }
  else
  {
    *(void *)(a1 + 8) = a2;
    uint64_t v11 = *((void *)a3 + 2);
    if (v11)
    {
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(v11 + (*((void *)a3 + 3))++);
    }
    else
    {
      std::istream::read();
      a2 = *(void *)(a1 + 8);
    }
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 24), a2);
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 48), *(void *)(a1 + 8));
    turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 24), 0);
    turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 48), 0);
    *(void *)(a1 + 144) = 0;
    uint64_t v12 = *(uint64_t **)(a1 + 24);
    uint64_t v13 = *(uint64_t **)(a1 + 32);
    if (v12 == v13)
    {
      unint64_t v28 = 0;
    }
    else
    {
      do
      {
        uint64_t v14 = *v12;
        switch(*((unsigned char *)v12 + 12))
        {
          case 2:
            atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
            *(void *)(a1 + 144) += v14;
            if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) == 1 && v14 != 0)
            {
              if (*(char *)(v14 + 31) < 0) {
                operator delete(*(void **)(v14 + 8));
              }
              uint64_t v16 = v14;
              uint64_t v17 = 0x1012C404EF22A49;
              goto LABEL_53;
            }
            break;
          case 3:
            atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
            *(void *)(a1 + 144) += v14;
            if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) == 1 && v14 != 0)
            {
              uint64_t v25 = *(void **)(v14 + 8);
              if (v25)
              {
                *(void *)(v14 + 16) = v25;
                operator delete(v25);
              }
              uint64_t v16 = v14;
              uint64_t v17 = 0x1080C409938AC02;
              goto LABEL_53;
            }
            break;
          case 4:
            atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
            *(void *)(a1 + 144) += v14;
            if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) == 1 && v14 != 0)
            {
              __p[0] = (void *)(v14 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_46;
            }
            break;
          case 5:
            atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
            *(void *)(a1 + 144) += v14;
            if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) == 1 && v14 != 0)
            {
              __p[0] = (void *)(v14 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_46:
              uint64_t v16 = v14;
              uint64_t v17 = 0x1020C405E66F15BLL;
              goto LABEL_53;
            }
            break;
          case 8:
            atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
            *(void *)(a1 + 144) += v14;
            if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) == 1 && v14 != 0)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v14 + 16));
              uint64_t v16 = v14;
              unsigned int v23 = -235920773;
              goto LABEL_52;
            }
            break;
          case 9:
            atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
            *(void *)(a1 + 144) += v14;
            if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) == 1 && v14 != 0)
            {
              int v20 = *(void **)(v14 + 48);
              if (v20)
              {
                *(void *)(v14 + 56) = v20;
                operator delete(v20);
              }
              uint64_t v21 = *(void **)(v14 + 24);
              if (v21)
              {
                *(void *)(v14 + 32) = v21;
                operator delete(v21);
              }
              unint64_t v22 = *(std::__shared_weak_count **)(v14 + 16);
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              uint64_t v16 = v14;
              unsigned int v23 = 2071181815;
LABEL_52:
              uint64_t v17 = v23 | 0x1030C4000000000;
LABEL_53:
              MEMORY[0x22A614FA0](v16, v17);
            }
            break;
          default:
            *(void *)(a1 + 144) += v14;
            break;
        }
        v12 += 2;
      }
      while (v12 != v13);
      unint64_t v28 = *(void *)(a1 + 144);
    }
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 72), v28);
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 96), *(void *)(a1 + 144));
    turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 72), 0);
    turi::v2_block_impl::decode_number(a3, (uint64_t *)(a1 + 96), 0);
    *(void *)(a1 + 152) = 0;
    uint64_t v29 = *(uint64_t **)(a1 + 48);
    atomic_ullong *volatile v30 = *(uint64_t **)(a1 + 56);
    if (v29 == v30)
    {
      unint64_t v45 = 0;
    }
    else
    {
      do
      {
        uint64_t v31 = *v29;
        switch(*((unsigned char *)v29 + 12))
        {
          case 2:
            atomic_fetch_add((atomic_ullong *volatile)v31, 1uLL);
            *(void *)(a1 + 152) += v31;
            if (atomic_fetch_add((atomic_ullong *volatile)v31, 0xFFFFFFFFFFFFFFFFLL) == 1 && v31 != 0)
            {
              if (*(char *)(v31 + 31) < 0) {
                operator delete(*(void **)(v31 + 8));
              }
              uint64_t v33 = v31;
              uint64_t v34 = 0x1012C404EF22A49;
              goto LABEL_102;
            }
            break;
          case 3:
            atomic_fetch_add((atomic_ullong *volatile)v31, 1uLL);
            *(void *)(a1 + 152) += v31;
            if (atomic_fetch_add((atomic_ullong *volatile)v31, 0xFFFFFFFFFFFFFFFFLL) == 1 && v31 != 0)
            {
              uint64_t v42 = *(void **)(v31 + 8);
              if (v42)
              {
                *(void *)(v31 + 16) = v42;
                operator delete(v42);
              }
              uint64_t v33 = v31;
              uint64_t v34 = 0x1080C409938AC02;
              goto LABEL_102;
            }
            break;
          case 4:
            atomic_fetch_add((atomic_ullong *volatile)v31, 1uLL);
            *(void *)(a1 + 152) += v31;
            if (atomic_fetch_add((atomic_ullong *volatile)v31, 0xFFFFFFFFFFFFFFFFLL) == 1 && v31 != 0)
            {
              __p[0] = (void *)(v31 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_95;
            }
            break;
          case 5:
            atomic_fetch_add((atomic_ullong *volatile)v31, 1uLL);
            *(void *)(a1 + 152) += v31;
            if (atomic_fetch_add((atomic_ullong *volatile)v31, 0xFFFFFFFFFFFFFFFFLL) == 1 && v31 != 0)
            {
              __p[0] = (void *)(v31 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_95:
              uint64_t v33 = v31;
              uint64_t v34 = 0x1020C405E66F15BLL;
              goto LABEL_102;
            }
            break;
          case 8:
            atomic_fetch_add((atomic_ullong *volatile)v31, 1uLL);
            *(void *)(a1 + 152) += v31;
            if (atomic_fetch_add((atomic_ullong *volatile)v31, 0xFFFFFFFFFFFFFFFFLL) == 1 && v31 != 0)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v31 + 16));
              uint64_t v33 = v31;
              unsigned int v40 = -235920773;
              goto LABEL_101;
            }
            break;
          case 9:
            atomic_fetch_add((atomic_ullong *volatile)v31, 1uLL);
            *(void *)(a1 + 152) += v31;
            if (atomic_fetch_add((atomic_ullong *volatile)v31, 0xFFFFFFFFFFFFFFFFLL) == 1 && v31 != 0)
            {
              unsigned int v37 = *(void **)(v31 + 48);
              if (v37)
              {
                *(void *)(v31 + 56) = v37;
                operator delete(v37);
              }
              atomic_ullong *volatile v38 = *(void **)(v31 + 24);
              if (v38)
              {
                *(void *)(v31 + 32) = v38;
                operator delete(v38);
              }
              uint64_t v39 = *(std::__shared_weak_count **)(v31 + 16);
              if (v39) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
              }
              uint64_t v33 = v31;
              unsigned int v40 = 2071181815;
LABEL_101:
              uint64_t v34 = v40 | 0x1030C4000000000;
LABEL_102:
              MEMORY[0x22A614FA0](v33, v34);
            }
            break;
          default:
            *(void *)(a1 + 152) += v31;
            break;
        }
        v29 += 2;
      }
      while (v29 != v30);
      unint64_t v45 = *(void *)(a1 + 152);
    }
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 120), v45);
    turi::v2_block_impl::decode_double(a3, (uint64_t *)(a1 + 120), 0);
    unint64_t v46 = 0;
    unint64_t v8 = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  if (v46 >= *(void *)(a1 + 8))
  {
    int v91 = 0;
    goto LABEL_193;
  }
  uint64_t v47 = *(void *)(a1 + 24) + 16 * v46;
  unint64_t v48 = 0;
  switch(*(unsigned char *)(v47 + 12))
  {
    case 0:
      unint64_t v48 = *(void *)v47;
      goto LABEL_132;
    case 1:
      unint64_t v48 = (uint64_t)*(double *)v47;
      goto LABEL_132;
    case 2:
      unint64_t v50 = *(void *)v47;
      uint64_t v51 = (char **)(*(void *)v47 + 8);
      size_t __idx = 0;
      uint64_t v52 = (char *)v51;
      if (*(char *)(v50 + 31) < 0) {
        uint64_t v52 = *v51;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v52);
      unint64_t v48 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v94[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v50 + 31) < 0) {
        uint64_t v53 = *(void *)(v50 + 16);
      }
      else {
        uint64_t v53 = *(unsigned __int8 *)(v50 + 31);
      }
      if (__idx != v53)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v86 = std::string::append(&v97, " cannot be interpreted as an integer");
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v94[0] = (void *)v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_132;
    case 3:
      unint64_t v49 = *(void *)v47;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v49 + 8), *(void *)(v49 + 16), (uint64_t)(*(void *)(v49 + 16) - *(void *)(v49 + 8)) >> 3);
      turi::flexible_type_fail(0);
      unint64_t v48 = 0;
      if (!__p[0]) {
        goto LABEL_132;
      }
      __p[1] = __p[0];
      operator delete(__p[0]);
      break;
    case 4:
      unint64_t v54 = *(void *)v47;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v54 + 8), *(uint64_t **)(v54 + 16), (uint64_t)(*(void *)(v54 + 16) - *(void *)(v54 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      break;
    case 5:
      unint64_t v55 = *(void *)v47;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v55 + 8), *(uint64_t **)(v55 + 16), (uint64_t)(*(void *)(v55 + 16) - *(void *)(v55 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      break;
    case 6:
      unint64_t v48 = (uint64_t)(*(void *)v47 << 8) >> 8;
      goto LABEL_132;
    case 7:
      goto LABEL_132;
    case 8:
      unint64_t v56 = *(void *)v47;
      atomic_ullong *volatile v57 = *(atomic_uint **)(v56 + 16);
      __p[0] = *(void **)(v56 + 8);
      __p[1] = v57;
      if (v57) {
        atomic_fetch_add_explicit(v57 + 2, 1u, memory_order_relaxed);
      }
      long long v58 = *(_OWORD *)(v56 + 24);
      long long v59 = *(_OWORD *)(v56 + 56);
      long long v95 = *(_OWORD *)(v56 + 40);
      *(_OWORD *)size_t v96 = v59;
      *(_OWORD *)uint64_t v94 = v58;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v47 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v95 + 1))
      {
        v96[0] = *((void **)&v95 + 1);
        operator delete(*((void **)&v95 + 1));
      }
      if (v94[0])
      {
        v94[1] = v94[0];
        operator delete(v94[0]);
      }
      unint64_t v48 = 0;
      if (!__p[1]) {
        goto LABEL_132;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  unint64_t v48 = 0;
LABEL_132:
  std::vector<unsigned long>::resize(a1 + 176, v48);
  uint64_t v60 = *(void *)(a1 + 24) + 16 * *(void *)(a1 + 248);
  unint64_t v61 = 0;
  switch(*(unsigned char *)(v60 + 12))
  {
    case 0:
      unint64_t v61 = *(void *)v60;
      goto LABEL_156;
    case 1:
      unint64_t v61 = (uint64_t)*(double *)v60;
      goto LABEL_156;
    case 2:
      unint64_t v63 = *(void *)v60;
      unsigned int v64 = (char **)(*(void *)v60 + 8);
      size_t __idx = 0;
      atomic_ullong *volatile v65 = (char *)v64;
      if (*(char *)(v63 + 31) < 0) {
        atomic_ullong *volatile v65 = *v64;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v65);
      unint64_t v61 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v94[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v63 + 31) < 0) {
        uint64_t v66 = *(void *)(v63 + 16);
      }
      else {
        uint64_t v66 = *(unsigned __int8 *)(v63 + 31);
      }
      if (__idx != v66)
      {
        unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v89 = std::string::append(&v97, " cannot be interpreted as an integer");
        long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        v94[0] = (void *)v89->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v88, (const std::string *)__p);
        __cxa_throw(v88, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_156;
    case 3:
      unint64_t v62 = *(void *)v60;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v62 + 8), *(void *)(v62 + 16), (uint64_t)(*(void *)(v62 + 16) - *(void *)(v62 + 8)) >> 3);
      turi::flexible_type_fail(0);
      unint64_t v61 = 0;
      if (!__p[0]) {
        goto LABEL_156;
      }
      __p[1] = __p[0];
      operator delete(__p[0]);
      break;
    case 4:
      unint64_t v67 = *(void *)v60;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v67 + 8), *(uint64_t **)(v67 + 16), (uint64_t)(*(void *)(v67 + 16) - *(void *)(v67 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      break;
    case 5:
      unint64_t v68 = *(void *)v60;
      __p[1] = 0;
      v94[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v68 + 8), *(uint64_t **)(v68 + 16), (uint64_t)(*(void *)(v68 + 16) - *(void *)(v68 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      break;
    case 6:
      unint64_t v61 = (uint64_t)(*(void *)v60 << 8) >> 8;
      goto LABEL_156;
    case 7:
      goto LABEL_156;
    case 8:
      unint64_t v69 = *(void *)v60;
      unsigned int v70 = *(atomic_uint **)(v69 + 16);
      __p[0] = *(void **)(v69 + 8);
      __p[1] = v70;
      if (v70) {
        atomic_fetch_add_explicit(v70 + 2, 1u, memory_order_relaxed);
      }
      long long v71 = *(_OWORD *)(v69 + 24);
      long long v72 = *(_OWORD *)(v69 + 56);
      long long v95 = *(_OWORD *)(v69 + 40);
      *(_OWORD *)size_t v96 = v72;
      *(_OWORD *)uint64_t v94 = v71;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v60 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v95 + 1))
      {
        v96[0] = *((void **)&v95 + 1);
        operator delete(*((void **)&v95 + 1));
      }
      if (v94[0])
      {
        v94[1] = v94[0];
        operator delete(v94[0]);
      }
      unint64_t v61 = 0;
      if (!__p[1]) {
        goto LABEL_156;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  unint64_t v61 = 0;
LABEL_156:
  std::vector<unsigned long>::resize(a1 + 200, v61);
  uint64_t v73 = 0;
  uint64_t v74 = *(void *)(a1 + 24);
  while (2)
  {
    *(void *)(a1 + 256) = v73;
    uint64_t v75 = v74 + 16 * *(void *)(a1 + 248);
    switch(*(unsigned char *)(v75 + 12))
    {
      case 0:
        if (*(void *)v75 <= v73) {
          goto LABEL_165;
        }
        goto LABEL_163;
      case 1:
        if (*(double *)v75 <= (double)v73) {
          goto LABEL_165;
        }
        goto LABEL_163;
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
        turi::flexible_type_fail(0);
        goto LABEL_165;
      case 6:
        if (v73 < (uint64_t)(*(void *)v75 << 8) >> 8)
        {
LABEL_163:
          *(void *)(*(void *)(a1 + 176) + 8 * *(void *)(a1 + 256)) = *(void *)(*(void *)(a1 + 72)
                                                                                       + 16 * *(void *)(a1 + 160));
          *(void *)(*(void *)(a1 + 200) + 8 * *(void *)(a1 + 256)) = *(void *)(*(void *)(a1 + 96)
                                                                                       + 16
                                                                                       * (*(void *)(a1 + 160))++);
          uint64_t v73 = *(void *)(a1 + 256) + 1;
          continue;
        }
LABEL_165:
        *(void *)(a1 + 224) = *(void *)(*(void *)(a1 + 48) + 16 * *(void *)(a1 + 248));
        char v76 = (uint64_t *)(a1 + 224);
        std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long &,void>((unint64_t *)(a1 + 224), __p);
        long long v77 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        atomic_ullong *volatile v78 = *(std::__shared_weak_count **)(a1 + 240);
        *(_OWORD *)(a1 + 232) = v77;
        if (v78)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v78);
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
        }
        uint64_t v79 = *v76;
        if (*v76)
        {
          uint64_t v80 = *(void *)(a1 + 168);
          uint64_t v81 = **(void ***)(a1 + 232);
          uint64_t v82 = (uint64_t *)(*(void *)(a1 + 120) + 16 * v80);
          uint64_t v83 = *v76;
          do
          {
            uint64_t v84 = *v82;
            v82 += 2;
            *v81++ = v84;
            --v83;
          }
          while (v83);
        }
        else
        {
          uint64_t v80 = *(void *)(a1 + 168);
        }
        *(void *)(a1 + 256) = v79;
        *(void *)(a1 + 168) = v80 + v79;
LABEL_184:
        *(unsigned char *)(a1 + 264) = 0;
        if (a5)
        {
          --a5;
          int v9 = 1;
          *(unsigned char *)(a1 + 264) = 1;
        }
        else
        {
          int v9 = 0;
          if (*(unsigned char *)(*a4 + 16 * v8 + 12) != 7)
          {
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, (void *)(a1 + 232), a1 + 176, a1 + 200, 0);
            operator new();
          }
        }
        ++v8;
        if (a5 || v8 < a4[1]) {
          goto LABEL_190;
        }
        int v91 = 957;
LABEL_193:
        *(_DWORD *)a1 = v91;
        return v8 != 0;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
  }
}

void sub_2240EDC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x22A614FA0](v9, 0x1030C407B73B9F7);
  if (atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFFLL) == 1 && v10 != 0)
  {
    uint64_t v12 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v10);
    MEMORY[0x22A614FA0](v12, 0x1030C407B73B9F7);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  JUMPOUT(0x2240EDD0CLL);
}

uint64_t turi::v2_block_impl::typed_decode_stream::typed_decode_stream(uint64_t a1, long long *a2, unsigned char *a3, uint64_t a4)
{
  *(_DWORD *)a1 = 0;
  long long v6 = *a2;
  long long v7 = a2[1];
  long long v8 = a2[2];
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = a4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 136) = 0;
  uint64_t v9 = (int8x8_t **)(a1 + 136);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = a1 + 72;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 300) = 0;
  *(void *)(a1 + 112) = *((void *)a2 + 3);
  int v10 = (unsigned __int8 *)(a1 + 160);
  *(void *)(a1 + 128) = 0;
  if (a3)
  {
    *(unsigned char *)(a1 + 160) = *a3;
    *(void *)(a1 + 96) = 1;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v11 = *((void *)a2 + 4);
  int v12 = (v11 & 4) == 0;
  *(unsigned char *)(a1 + 161) = v12;
  if ((v11 & 2) == 0)
  {
    uint64_t v13 = (int *)global_logger();
    if (v13[169] <= 6)
    {
      if (cppipc::must_cancel((cppipc *)v13)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v14 = (file_logger *)global_logger();
      started = file_logger::start_stream(v14, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode_stream", 976, 1);
      uint64_t v16 = pthread_getspecific(*((void *)started + 74));
      if (v16 && *((unsigned char *)v16 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"Attempting to decode a non-typed block", 38);
      }
      uint64_t v17 = pthread_getspecific(*((void *)started + 74));
      if (v17)
      {
        if (*((unsigned char *)v17 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(v17[2] - 24) + 16));
          std::string::size_type v18 = std::locale::use_facet(&v48, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
          std::locale::~locale(&v48);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    if ((a2[2] & 2) == 0) {
      turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_0::operator()();
    }
    int v12 = *(unsigned __int8 *)(a1 + 161);
  }
  if (v12)
  {
    int v19 = *v10;
    if (v19 == 2)
    {
      LOBYTE(v48.__locale_) = 0;
      uint64_t v23 = *(void *)(a1 + 88);
      if (v23)
      {
        uint64_t v24 = *(void *)(a1 + 96);
        char locale = *(unsigned char *)(v23 + v24);
        LOBYTE(v48.__locale_) = locale;
        *(void *)(a1 + 96) = v24 + 1;
      }
      else
      {
        std::istream::read();
        char locale = (char)v48.__locale_;
      }
      *(unsigned char *)(a1 + 120) = locale;
      unint64_t v26 = *((void *)a2 + 3);
      unint64_t v27 = *(void *)(a1 + 152);
      unint64_t v28 = v26 >> 6;
      if ((v26 & 0x3F) != 0) {
        ++v28;
      }
      *(void *)(a1 + 144) = v26;
      *(void *)(a1 + 152) = v28;
      uint64_t v29 = (char *)malloc_type_realloc(*(void **)(a1 + 136), 8 * v28, 0x100004000313F17uLL);
      atomic_ullong *volatile v30 = v29;
      *(void *)(a1 + 136) = v29;
      uint64_t v31 = *(void *)(a1 + 144) & 0x3FLL;
      if (v31) {
        *(void *)&v29[8 * *(void *)(a1 + 152) - 8] &= ~(-1 << v31);
      }
      uint64_t v32 = *(void *)(a1 + 152);
      if (v32 > v27)
      {
        uint64_t v33 = &v29[8 * v27];
        uint64_t v34 = 8 * v32 - 8 * v27;
        if (v34 >= 1)
        {
          bzero(v33, 8 * (((unint64_t)v34 >> 3) - ((unint64_t)v34 > 7)) + 8);
          uint64_t v32 = *(void *)(a1 + 152);
        }
      }
      if (v32 >= 1)
      {
        bzero(v30, 8 * (v32 - ((v32 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
        uint64_t v32 = *(void *)(a1 + 152);
      }
      size_t v35 = 8 * v32;
      uint64_t v36 = *(void *)(a1 + 88);
      if (v36)
      {
        memcpy(v30, (const void *)(v36 + *(void *)(a1 + 96)), v35);
        *(void *)(a1 + 96) += v35;
      }
      else
      {
        std::istream::read();
      }
      uint64_t v37 = *(void *)(a1 + 152);
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = *v9;
        do
        {
          int8x8_t v40 = *v39++;
          uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
          v41.i16[0] = vaddlv_u8(v41);
          v38 += v41.u32[0];
          --v37;
        }
        while (v37);
      }
      else
      {
        uint64_t v38 = 0;
      }
      *(void *)(a1 + 128) = v38;
    }
    else
    {
      if (v19 != 1)
      {
        if (*((int *)global_logger() + 169) <= 6)
        {
          unsigned int v43 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "typed_decode_stream", 998, 1);
          unsigned int v44 = file_logger::operator<<((pthread_key_t *)v43, "Unexpected value for num_types: ");
          unint64_t v45 = (pthread_key_t *)file_logger::operator<<<int>((uint64_t)v44);
          unint64_t v46 = file_logger::operator<<(v45, " (expected 0, 1, or 2)");
          file_logger::operator<<((uint64_t)v46, (void (*)(unsigned char *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_1::operator()();
      }
      LOBYTE(v48.__locale_) = 0;
      uint64_t v20 = *(void *)(a1 + 88);
      if (v20)
      {
        uint64_t v21 = *(void *)(a1 + 96);
        char v22 = *(unsigned char *)(v20 + v21);
        *(void *)(a1 + 96) = v21 + 1;
      }
      else
      {
        std::istream::read();
        char v22 = (char)v48.__locale_;
      }
      *(unsigned char *)(a1 + 120) = v22;
    }
  }
  *(void *)(a1 + 208) = *(void *)(a1 + 112) - *(void *)(a1 + 128);
  return a1;
}

void sub_2240EE294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::locale a10)
{
  switch(*(unsigned char *)(v10 + 300))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 + 288), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v12 = *(void *)(v10 + 288);
      if (!v12) {
        goto LABEL_27;
      }
      if (*(char *)(v12 + 31) < 0) {
        operator delete(*(void **)(v12 + 8));
      }
      uint64_t v13 = (void *)v12;
      uint64_t v14 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 + 288), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      std::string::size_type v18 = *(void **)(v10 + 288);
      if (!v18) {
        goto LABEL_27;
      }
      int v19 = (void *)v18[1];
      if (v19)
      {
        v18[2] = v19;
        operator delete(v19);
      }
      uint64_t v13 = v18;
      uint64_t v14 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 + 288), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v15 = *(void **)(v10 + 288);
      if (!v15) {
        goto LABEL_27;
      }
      a9 = v15 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 + 288), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v15 = *(void **)(v10 + 288);
      if (!v15) {
        goto LABEL_27;
      }
      a9 = v15 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
LABEL_21:
      uint64_t v13 = v15;
      uint64_t v14 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 + 288), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v20 = *(void *)(v10 + 288);
      if (!v20) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
      uint64_t v13 = (void *)v20;
      unsigned int v17 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 + 288), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v16 = *(void **)(v10 + 288);
      if (!v16) {
        goto LABEL_27;
      }
      uint64_t v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v16);
      unsigned int v17 = 2071181815;
LABEL_25:
      uint64_t v14 = v17 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v13, v14);
LABEL_27:
      *(void *)(v10 + 288) = 0;
LABEL_28:
      *(void *)(v10 + 288) = 0;
      *(_DWORD *)(v10 + 296) = 0;
      *(unsigned char *)(v10 + 300) = 0;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      free(*(void **)(v10 + 136));
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"info.flags & IS_FLEXIBLE_TYPE", 29);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 978, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240EE594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 1001, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::v2_block_impl::typed_decode_stream::typed_decode_stream(turi::v2_block_impl::block_info const&,char *,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240EE794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::typed_decode_stream::~typed_decode_stream(turi::v2_block_impl::typed_decode_stream *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2) {
    MEMORY[0x22A614FA0](v2, 0x1000C400FD881E6);
  }
  uint64_t v3 = *((void *)this + 30);
  if (v3)
  {
    turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy((turi::v2_block_impl::decode_double_stream_legacy *)(v3 + 24));
    MEMORY[0x22A614FA0](v3, 0x1022C4092BDF265);
  }
  uint64_t v4 = (turi::v2_block_impl::decode_double_stream_legacy *)*((void *)this + 31);
  if (v4)
  {
    turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy(v4);
    MEMORY[0x22A614FA0]();
  }
  uint64_t v5 = (turi::v2_block_impl::decode_string_stream *)*((void *)this + 32);
  if (v5)
  {
    turi::v2_block_impl::decode_string_stream::~decode_string_stream(v5);
    MEMORY[0x22A614FA0]();
  }
  long long v6 = (turi::v2_block_impl::decode_vector_stream *)*((void *)this + 33);
  if (v6)
  {
    turi::v2_block_impl::decode_vector_stream::~decode_vector_stream(v6);
    MEMORY[0x22A614FA0]();
  }
  char v7 = (turi::v2_block_impl::decode_ndvector_stream *)*((void *)this + 34);
  if (v7)
  {
    turi::v2_block_impl::decode_ndvector_stream::~decode_ndvector_stream(v7);
    MEMORY[0x22A614FA0]();
  }
  switch(*((unsigned char *)this + 300))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 36), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *((void *)this + 36);
        if (v8)
        {
          if (*(char *)(v8 + 31) < 0) {
            operator delete(*(void **)(v8 + 8));
          }
          uint64_t v9 = (void *)v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 36), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = (void *)*((void *)this + 36);
        if (v11)
        {
          uint64_t v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          uint64_t v9 = v11;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 36), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = *((void *)this + 36);
        if (v13)
        {
          uint64_t v20 = (void **)(v13 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
          goto LABEL_30;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 36), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = *((void *)this + 36);
        if (v13)
        {
          uint64_t v20 = (void **)(v13 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v20);
LABEL_30:
          uint64_t v9 = (void *)v13;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 36), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *((void *)this + 36);
        if (v14)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v14 + 16));
          uint64_t v9 = (void *)v14;
          unsigned int v15 = -235920773;
          goto LABEL_43;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 36), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = (void *)*((void *)this + 36);
        if (v16)
        {
          unsigned int v17 = (void *)v16[6];
          if (v17)
          {
            v16[7] = v17;
            operator delete(v17);
          }
          std::string::size_type v18 = (void *)v16[3];
          if (v18)
          {
            void v16[4] = v18;
            operator delete(v18);
          }
          int v19 = (std::__shared_weak_count *)v16[2];
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          uint64_t v9 = v16;
          unsigned int v15 = 2071181815;
LABEL_43:
          uint64_t v10 = v15 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  *((unsigned char *)this + 300) = 0;
  uint64_t v20 = (void **)((char *)this + 176);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
  free(*((void **)this + 17));
}

unint64_t turi::v2_block_impl::typed_decode_stream::read(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (a3)
  {
    if (v7) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = v6 == 0;
    }
    if (!v8) {
      turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_1::operator()();
    }
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v7) {
      BOOL v9 = v6 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9) {
      turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator()();
    }
  }
  if (!*(unsigned char *)(a1 + 161)) {
    goto LABEL_101;
  }
  int v10 = *(unsigned __int8 *)(a1 + 160);
  if (v10 != 2)
  {
    if (v10 == 1)
    {
      if (v7 && *(unsigned char *)(a1 + 120) == 7)
      {
        if (v6)
        {
          uint64_t v11 = 0;
          unint64_t v12 = 0;
          do
          {
            uint64_t v13 = *a2 + v11;
            if ((uint64_t *)v13 != &turi::FLEX_UNDEFINED)
            {
              switch(*(unsigned char *)(v13 + 12))
              {
                case 2:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v13;
                    if (!*(void *)v13) {
                      goto LABEL_52;
                    }
                    if (*((char *)v14 + 31) < 0) {
                      operator delete((void *)v14[1]);
                    }
                    atomic_ullong *volatile v15 = v14;
                    uint64_t v16 = 0x1012C404EF22A49;
                    goto LABEL_51;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v13;
                    if (!*(void *)v13) {
                      goto LABEL_52;
                    }
                    std::string::size_type v18 = (void *)v17[1];
                    if (v18)
                    {
                      v17[2] = (atomic_ullong)v18;
                      operator delete(v18);
                    }
                    atomic_ullong *volatile v15 = v17;
                    uint64_t v16 = 0x1080C409938AC02;
                    goto LABEL_51;
                  }
                  break;
                case 4:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v13;
                    if (!*(void *)v13) {
                      goto LABEL_52;
                    }
                    uint64_t v111 = (void **)(v19 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v111);
                    goto LABEL_37;
                  }
                  break;
                case 5:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v13;
                    if (!*(void *)v13) {
                      goto LABEL_52;
                    }
                    uint64_t v111 = (void **)(v19 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v111);
LABEL_37:
                    atomic_ullong *volatile v15 = v19;
                    uint64_t v16 = 0x1020C405E66F15BLL;
                    goto LABEL_51;
                  }
                  break;
                case 8:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v13;
                    if (!*(void *)v13) {
                      goto LABEL_52;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
                    atomic_ullong *volatile v15 = v20;
                    unsigned int v21 = -235920773;
                    goto LABEL_50;
                  }
                  break;
                case 9:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)v13;
                    if (*(void *)v13)
                    {
                      uint64_t v23 = (void *)v22[6];
                      if (v23)
                      {
                        v22[7] = (atomic_ullong)v23;
                        operator delete(v23);
                      }
                      uint64_t v24 = (void *)v22[3];
                      if (v24)
                      {
                        void v22[4] = (atomic_ullong)v24;
                        operator delete(v24);
                      }
                      uint64_t v25 = (std::__shared_weak_count *)v22[2];
                      if (v25) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                      }
                      atomic_ullong *volatile v15 = v22;
                      unsigned int v21 = 2071181815;
LABEL_50:
                      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_51:
                      MEMORY[0x22A614FA0](v15, v16);
                    }
LABEL_52:
                    *(void *)uint64_t v13 = 0;
                  }
                  break;
                default:
                  break;
              }
              uint64_t v26 = turi::FLEX_UNDEFINED;
              *(void *)(v13 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
              *(void *)uint64_t v13 = v26;
              LODWORD(v26) = byte_268085A64;
              *(unsigned char *)(v13 + 12) = byte_268085A64;
              BOOL v27 = v26 > 9;
              int v28 = (1 << v26) & 0x33C;
              if (!v27 && v28 != 0) {
                atomic_fetch_add(*(atomic_ullong *volatile *)v13, 1uLL);
              }
            }
            ++v12;
            v11 += 16;
          }
          while (v12 < a2[1]);
        }
      }
      else if (v6)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        do
        {
          uint64_t v35 = *a2 + v33;
          switch(*(unsigned char *)(v35 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)v35;
                if (!*(void *)v35) {
                  goto LABEL_99;
                }
                if (*((char *)v36 + 31) < 0) {
                  operator delete((void *)v36[1]);
                }
                atomic_ullong *volatile v37 = v36;
                uint64_t v38 = 0x1012C404EF22A49;
                goto LABEL_98;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v45 = *(atomic_ullong *volatile *)v35;
                if (!*(void *)v35) {
                  goto LABEL_99;
                }
                unint64_t v46 = (void *)v45[1];
                if (v46)
                {
                  v45[2] = (atomic_ullong)v46;
                  operator delete(v46);
                }
                atomic_ullong *volatile v37 = v45;
                uint64_t v38 = 0x1080C409938AC02;
                goto LABEL_98;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v35;
                if (!*(void *)v35) {
                  goto LABEL_99;
                }
                uint64_t v111 = (void **)(v39 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v111);
                goto LABEL_93;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v35;
                if (!*(void *)v35) {
                  goto LABEL_99;
                }
                uint64_t v111 = (void **)(v39 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v111);
LABEL_93:
                atomic_ullong *volatile v37 = v39;
                uint64_t v38 = 0x1020C405E66F15BLL;
                goto LABEL_98;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)v35;
                if (!*(void *)v35) {
                  goto LABEL_99;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v47 + 2);
                atomic_ullong *volatile v37 = v47;
                unsigned int v44 = -235920773;
                goto LABEL_97;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v35, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v40 = *(atomic_ullong *volatile *)v35;
                if (*(void *)v35)
                {
                  uint8x8_t v41 = (void *)v40[6];
                  if (v41)
                  {
                    v40[7] = (atomic_ullong)v41;
                    operator delete(v41);
                  }
                  uint64_t v42 = (void *)v40[3];
                  if (v42)
                  {
                    v40[4] = (atomic_ullong)v42;
                    operator delete(v42);
                  }
                  unsigned int v43 = (std::__shared_weak_count *)v40[2];
                  if (v43) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
                  }
                  atomic_ullong *volatile v37 = v40;
                  unsigned int v44 = 2071181815;
LABEL_97:
                  uint64_t v38 = v44 | 0x1030C4000000000;
LABEL_98:
                  MEMORY[0x22A614FA0](v37, v38);
                }
LABEL_99:
                *(void *)uint64_t v35 = 0;
              }
              break;
            default:
              break;
          }
          *(void *)uint64_t v35 = 0;
          *(_DWORD *)(v35 + 8) = 0;
          *(unsigned char *)(v35 + 12) = 0;
          ++v34;
          v33 += 16;
        }
        while (v34 < a2[1]);
      }
    }
LABEL_101:
    unint64_t v30 = v3;
    goto LABEL_102;
  }
  if (a3)
  {
    unint64_t v30 = 0;
    uint64_t v31 = *(void *)(a1 + 136);
    unint64_t v32 = *(void *)(a1 + 200);
    do
    {
      v30 += (~*(void *)(v31 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1;
      *(void *)(a1 + 200) = ++v32;
      --v3;
    }
    while (v3);
    if (!v30) {
      return 0;
    }
  }
  else
  {
    unint64_t v30 = 0;
    if (!turi::v2_block_impl::typed_decode_stream::pad_retbuf_with_undefined_positions((void *)a1, a2)) {
      return v3;
    }
  }
LABEL_102:
  unint64_t v3 = 0;
  int v48 = *(_DWORD *)a1;
  if (*(int *)a1 <= 1113)
  {
    if (v48 > 1082)
    {
      if (v48 != 1083)
      {
        if (v48 == 1096)
        {
          unint64_t v50 = (void *)(a1 + 232);
          atomic_ullong *volatile v57 = *(_DWORD **)(a1 + 232);
          if (*v57)
          {
            unint64_t v3 = turi::v2_block_impl::decode_number_stream::read((uint64_t)v57, *(void *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v30);
            int v51 = 1096;
            goto LABEL_325;
          }
          goto LABEL_153;
        }
        if (v48 == 1106)
        {
          unint64_t v50 = (void *)(a1 + 240);
          unint64_t v49 = *(int **)(a1 + 240);
          if (*v49)
          {
            unint64_t v3 = turi::v2_block_impl::decode_double_stream::read(v49, *(void *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v30);
            int v51 = 1106;
            goto LABEL_325;
          }
          turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy((turi::v2_block_impl::decode_double_stream_legacy *)(v49 + 6));
LABEL_153:
          MEMORY[0x22A614FA0]();
          int v51 = 0;
          unint64_t v3 = 0;
          void *v50 = 0;
          goto LABEL_325;
        }
        return v3;
      }
      unint64_t v3 = 0;
      int v56 = *(unsigned __int8 *)(a1 + 224);
      while (1)
      {
        if (v56)
        {
          unint64_t v61 = *(void *)(a1 + 168) + 1;
          *(void *)(a1 + 168) = v61;
LABEL_281:
          if (v61 >= (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 4) {
            return v3;
          }
        }
        *(unsigned char *)(a1 + 224) = 0;
        if (!v30) {
          break;
        }
        uint64_t v97 = *(void *)(a1 + 168);
        unint64_t v98 = ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 4) - v97;
        if (v30 < v98) {
          unint64_t v98 = v30;
        }
        if (v98)
        {
          *(void *)(a1 + 168) = v97 + v98 - 1;
          v30 -= v98;
          v3 += v98;
          int v56 = 1;
          *(unsigned char *)(a1 + 224) = 1;
          if (!v30)
          {
LABEL_321:
            if (v3 >= a2[1])
            {
              int v51 = 1083;
              goto LABEL_325;
            }
          }
        }
        else
        {
          int v56 = 0;
        }
      }
      int v56 = 0;
      size_t v99 = (void **)(*a2 + 16 * v3);
      if (*((unsigned char *)v99 + 12) != 7)
      {
        uint64_t v100 = *(void *)(a1 + 176) + 16 * *(void *)(a1 + 168);
        if ((void **)v100 != v99)
        {
          switch(*((unsigned char *)v99 + 12))
          {
            case 2:
              if (atomic_fetch_add(*v99, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v101 = *v99;
                if (!*v99) {
                  goto LABEL_317;
                }
                if (*((char *)v101 + 31) < 0) {
                  operator delete((void *)v101[1]);
                }
                BOOL v102 = v101;
                uint64_t v103 = 0x1012C404EF22A49;
                goto LABEL_316;
              }
              break;
            case 3:
              if (atomic_fetch_add(*v99, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v104 = *v99;
                if (!*v99) {
                  goto LABEL_317;
                }
                std::locale v105 = (void *)v104[1];
                if (v105)
                {
                  v104[2] = (atomic_ullong)v105;
                  operator delete(v105);
                }
                BOOL v102 = v104;
                uint64_t v103 = 0x1080C409938AC02;
                goto LABEL_316;
              }
              break;
            case 4:
              if (atomic_fetch_add(*v99, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v106 = *v99;
                if (!*v99) {
                  goto LABEL_317;
                }
                uint64_t v111 = (void **)(v106 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v111);
                goto LABEL_308;
              }
              break;
            case 5:
              if (atomic_fetch_add(*v99, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v106 = *v99;
                if (!*v99) {
                  goto LABEL_317;
                }
                uint64_t v111 = (void **)(v106 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v111);
LABEL_308:
                BOOL v102 = v106;
                uint64_t v103 = 0x1020C405E66F15BLL;
                goto LABEL_316;
              }
              break;
            case 8:
              if (atomic_fetch_add(*v99, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v107 = *v99;
                if (!*v99) {
                  goto LABEL_317;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v107 + 2);
                BOOL v102 = v107;
                unsigned int v108 = -235920773;
                goto LABEL_315;
              }
              break;
            case 9:
              if (atomic_fetch_add(*v99, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                if (*v99)
                {
                  BOOL v102 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v99);
                  unsigned int v108 = 2071181815;
LABEL_315:
                  uint64_t v103 = v108 | 0x1030C4000000000;
LABEL_316:
                  MEMORY[0x22A614FA0](v102, v103);
                }
LABEL_317:
                *size_t v99 = 0;
              }
              break;
            default:
              break;
          }
          long long v109 = *(void **)v100;
          *(void **)((char *)v99 + 5) = *(void **)(v100 + 5);
          *size_t v99 = v109;
          *((unsigned char *)v99 + 12) = *(unsigned char *)(v100 + 12);
          *(unsigned char *)(v100 + 12) = 0;
        }
        int v56 = 1;
        *(unsigned char *)(a1 + 224) = 1;
      }
      unint64_t v30 = 0;
      ++v3;
      goto LABEL_321;
    }
    if (v48)
    {
      if (v48 != 1077) {
        return v3;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 161))
      {
        turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec((turi::iarchive *)(a1 + 72), (uint64_t *)(a1 + 176));
        unint64_t v61 = 0;
        unint64_t v3 = 0;
        *(void *)(a1 + 168) = 0;
        goto LABEL_281;
      }
      unint64_t v3 = *(unsigned __int8 *)(a1 + 160);
      if (!*(unsigned char *)(a1 + 160)) {
        return v3;
      }
      if (v3 != 1 || *(unsigned char *)(a1 + 120) != 7)
      {
LABEL_144:
        switch(*(unsigned char *)(a1 + 120))
        {
          case 0:
            operator new();
          case 1:
            if ((*(unsigned char *)(a1 + 40) & 8) == 0) {
              operator new();
            }
            operator new();
          case 2:
            operator new();
          case 3:
            operator new();
          case 9:
            operator new();
          default:
            unint64_t v62 = 0;
            unint64_t v3 = 0;
            *(void *)(a1 + 168) = 0;
            break;
        }
LABEL_165:
        if (v62 >= *(void *)(a1 + 208))
        {
          int v51 = 0;
          goto LABEL_325;
        }
        uint64_t v63 = 0;
        int v64 = *(unsigned __int8 *)(a1 + 120);
        switch(*(unsigned char *)(a1 + 120))
        {
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            uint64_t v63 = 0x1900000000000000;
            break;
          case 8:
            operator new();
          case 9:
            operator new();
          default:
            break;
        }
        atomic_ullong *volatile v65 = (atomic_ullong *volatile *)(a1 + 288);
        switch(*(unsigned char *)(a1 + 300))
        {
          case 2:
            if (atomic_fetch_add(*v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v66 = *v65;
              if (!*v65) {
                goto LABEL_206;
              }
              if (*((char *)v66 + 31) < 0) {
                operator delete((void *)v66[1]);
              }
              atomic_ullong *volatile v67 = v66;
              uint64_t v68 = 0x1012C404EF22A49;
              goto LABEL_205;
            }
            break;
          case 3:
            if (atomic_fetch_add(*v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v69 = *v65;
              if (!*v65) {
                goto LABEL_206;
              }
              unsigned int v70 = (void *)v69[1];
              if (v70)
              {
                v69[2] = (atomic_ullong)v70;
                operator delete(v70);
              }
              atomic_ullong *volatile v67 = v69;
              uint64_t v68 = 0x1080C409938AC02;
              goto LABEL_205;
            }
            break;
          case 4:
            if (atomic_fetch_add(*v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v71 = *v65;
              if (!*v65) {
                goto LABEL_206;
              }
              uint64_t v111 = (void **)(v71 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v111);
              goto LABEL_191;
            }
            break;
          case 5:
            if (atomic_fetch_add(*v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v71 = *v65;
              if (!*v65) {
                goto LABEL_206;
              }
              uint64_t v111 = (void **)(v71 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v111);
LABEL_191:
              atomic_ullong *volatile v67 = v71;
              uint64_t v68 = 0x1020C405E66F15BLL;
              goto LABEL_205;
            }
            break;
          case 8:
            if (atomic_fetch_add(*v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v72 = *v65;
              if (!*v65) {
                goto LABEL_206;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v72 + 2);
              atomic_ullong *volatile v67 = v72;
              unsigned int v73 = -235920773;
              goto LABEL_204;
            }
            break;
          case 9:
            if (atomic_fetch_add(*v65, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v74 = *v65;
              if (*v65)
              {
                uint64_t v75 = (void *)v74[6];
                if (v75)
                {
                  v74[7] = (atomic_ullong)v75;
                  operator delete(v75);
                }
                char v76 = (void *)v74[3];
                if (v76)
                {
                  v74[4] = (atomic_ullong)v76;
                  operator delete(v76);
                }
                long long v77 = (std::__shared_weak_count *)v74[2];
                if (v77) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v77);
                }
                atomic_ullong *volatile v67 = v74;
                unsigned int v73 = 2071181815;
LABEL_204:
                uint64_t v68 = v73 | 0x1030C4000000000;
LABEL_205:
                MEMORY[0x22A614FA0](v67, v68);
              }
LABEL_206:
              atomic_ullong *volatile *v65 = 0;
            }
            break;
          default:
            break;
        }
        *(void *)(a1 + 288) = v63;
        *(_DWORD *)(a1 + 296) = 0;
        *(unsigned char *)(a1 + 300) = v64;
        atomic_ullong *volatile v78 = *(turi::iarchive **)(a1 + 280);
        switch(v64)
        {
          case 0:
          case 1:
            uint64_t v79 = *((void *)v78 + 2);
            if (!v79) {
              goto LABEL_242;
            }
            atomic_ullong *volatile *v65 = *(atomic_ullong *volatile *)(v79 + *((void *)v78 + 3));
            uint64_t v80 = *((void *)v78 + 3) + 8;
            goto LABEL_240;
          case 2:
            if (*(void *)v63 != 1) {
              operator new();
            }
            turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)v78, (std::string *)(*v65 + 1));
            break;
          case 3:
            if (*(void *)v63 != 1) {
              operator new();
            }
            turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec((uint64_t)v78, (void *)*v65 + 1);
            break;
          case 4:
            if (*(void *)v63 != 1) {
              operator new();
            }
            turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(v78, (uint64_t *)*v65 + 1);
            break;
          case 5:
            if (*(void *)v63 != 1) {
              operator new();
            }
            turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,false>::exec(v78, (uint64_t *)*v65 + 1);
            break;
          case 6:
            uint64_t v81 = (_DWORD *)(a1 + 296);
            uint64_t v82 = *((void *)v78 + 2);
            if (v82)
            {
              atomic_ullong *volatile *v65 = *(atomic_ullong *volatile *)(v82 + *((void *)v78 + 3));
              *((void *)v78 + 3) += 8;
            }
            else
            {
              std::istream::read();
            }
            uint64_t v83 = *(uint64_t *)v65 >> 56;
            if ((v83 + 24) > 0x30)
            {
              uint64_t v86 = *((void *)v78 + 2);
              if (v86)
              {
                _DWORD *v81 = *(_DWORD *)(v86 + *((void *)v78 + 3));
                uint64_t v80 = *((void *)v78 + 3) + 4;
LABEL_240:
                *((void *)v78 + 3) = v80;
              }
              else
              {
LABEL_242:
                std::istream::read();
              }
            }
            else
            {
              char v84 = 2 * v83;
              if ((2 * v83 - 49) <= 0xFFFFFF9E) {
                turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
              }
              if ((int)v83 >= 0) {
                char v85 = 25;
              }
              else {
                char v85 = -25;
              }
              atomic_ullong *volatile *v65 = (atomic_ullong *volatile)((uint64_t)*v65 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(v85 + v84) << 56));
              _DWORD *v81 = 0;
            }
            break;
          case 7:
            break;
          case 8:
            if (*(void *)v63 != 1) {
              operator new();
            }
            turi::image_type::load((turi::image_type *)(*v65 + 1), v78);
            break;
          case 9:
            if (*(void *)v63 != 1) {
              operator new();
            }
            turi::flexible_type_impl::ndarray<double>::load((void *)*v65 + 1, (uint64_t)v78);
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        while (1)
        {
          *(unsigned char *)(a1 + 224) = 0;
          if (v30) {
            break;
          }
          int v52 = 0;
          long long v87 = (void **)(*a2 + 16 * v3);
          if (*((unsigned char *)v87 + 12) != 7)
          {
            unint64_t v30 = 0;
            if ((void **)(a1 + 288) != v87)
            {
              switch(*((unsigned char *)v87 + 12))
              {
                case 2:
                  if (atomic_fetch_add(*v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v88 = *v87;
                    if (!*v87) {
                      goto LABEL_273;
                    }
                    if (*((char *)v88 + 31) < 0) {
                      operator delete((void *)v88[1]);
                    }
                    uint64_t v89 = v88;
                    uint64_t v90 = 0x1012C404EF22A49;
                    goto LABEL_272;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(*v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v93 = *v87;
                    if (!*v87) {
                      goto LABEL_273;
                    }
                    uint64_t v94 = (void *)v93[1];
                    if (v94)
                    {
                      v93[2] = (atomic_ullong)v94;
                      operator delete(v94);
                    }
                    uint64_t v89 = v93;
                    uint64_t v90 = 0x1080C409938AC02;
                    goto LABEL_272;
                  }
                  break;
                case 4:
                  if (atomic_fetch_add(*v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v91 = *v87;
                    if (!*v87) {
                      goto LABEL_273;
                    }
                    uint64_t v111 = (void **)(v91 + 1);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v111);
                    goto LABEL_267;
                  }
                  break;
                case 5:
                  if (atomic_fetch_add(*v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v91 = *v87;
                    if (!*v87) {
                      goto LABEL_273;
                    }
                    uint64_t v111 = (void **)(v91 + 1);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v111);
LABEL_267:
                    uint64_t v89 = v91;
                    uint64_t v90 = 0x1020C405E66F15BLL;
                    goto LABEL_272;
                  }
                  break;
                case 8:
                  if (atomic_fetch_add(*v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v95 = *v87;
                    if (!*v87) {
                      goto LABEL_273;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)v95 + 2);
                    uint64_t v89 = v95;
                    unsigned int v92 = -235920773;
                    goto LABEL_271;
                  }
                  break;
                case 9:
                  if (atomic_fetch_add(*v87, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    if (*v87)
                    {
                      uint64_t v89 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v87);
                      unsigned int v92 = 2071181815;
LABEL_271:
                      uint64_t v90 = v92 | 0x1030C4000000000;
LABEL_272:
                      MEMORY[0x22A614FA0](v89, v90);
                    }
LABEL_273:
                    unsigned char *v87 = 0;
                  }
                  break;
                default:
                  break;
              }
              unint64_t v30 = 0;
              size_t v96 = *(void **)(a1 + 288);
              *(void **)((char *)v87 + 5) = *(void **)(a1 + 293);
              unsigned char *v87 = v96;
              *((unsigned char *)v87 + 12) = *(unsigned char *)(a1 + 300);
              *(unsigned char *)(a1 + 300) = 0;
            }
            goto LABEL_275;
          }
LABEL_276:
          ++v3;
          if (!v30 && v3 >= a2[1])
          {
            int v51 = 1149;
            goto LABEL_325;
          }
LABEL_163:
          if (v52)
          {
            unint64_t v62 = *(void *)(a1 + 168) + 1;
            *(void *)(a1 + 168) = v62;
            goto LABEL_165;
          }
        }
        --v30;
LABEL_275:
        int v52 = 1;
        *(unsigned char *)(a1 + 224) = 1;
        goto LABEL_276;
      }
    }
    unint64_t v53 = *(void *)(a1 + 112);
    if (v53)
    {
      unint64_t v54 = a2[1];
      if (v30) {
        unint64_t v54 = v30;
      }
      if (v54 >= v53) {
        unint64_t v3 = *(void *)(a1 + 112);
      }
      else {
        unint64_t v3 = v54;
      }
      *(void *)(a1 + 216) = v3;
      *(void *)(a1 + 112) = v53 - v3;
      int v51 = 1077;
LABEL_325:
      *(_DWORD *)a1 = v51;
      return v3;
    }
    int v51 = *(unsigned __int8 *)(a1 + 161);
    if (!*(unsigned char *)(a1 + 161))
    {
      unint64_t v3 = 0;
      goto LABEL_325;
    }
    goto LABEL_144;
  }
  if (v48 <= 1131)
  {
    if (v48 == 1114)
    {
      unint64_t v50 = (void *)(a1 + 248);
      uint64_t v60 = *(turi::v2_block_impl::decode_double_stream_legacy **)(a1 + 248);
      if (*(_DWORD *)v60)
      {
        unint64_t v3 = turi::v2_block_impl::decode_double_stream_legacy::read((uint64_t)v60, *(void *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v30);
        int v51 = 1114;
        goto LABEL_325;
      }
      turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy(v60);
      goto LABEL_153;
    }
    if (v48 == 1123)
    {
      unint64_t v55 = *(int **)(a1 + 256);
      if (*v55)
      {
        unint64_t v3 = turi::v2_block_impl::decode_string_stream::read(v55, *(void *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v30);
        int v51 = 1123;
        goto LABEL_325;
      }
      unint64_t v50 = (void *)(a1 + 256);
      turi::v2_block_impl::decode_string_stream::~decode_string_stream(*(turi::v2_block_impl::decode_string_stream **)(a1 + 256));
      goto LABEL_153;
    }
  }
  else
  {
    switch(v48)
    {
      case 1132:
        long long v58 = *(_DWORD **)(a1 + 264);
        if (*v58)
        {
          unint64_t v3 = turi::v2_block_impl::decode_vector_stream::read((uint64_t)v58, *(void *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v30, (*(void *)(a1 + 40) >> 3) & 1);
          int v51 = 1132;
          goto LABEL_325;
        }
        unint64_t v50 = (void *)(a1 + 264);
        turi::v2_block_impl::decode_vector_stream::~decode_vector_stream(*(turi::v2_block_impl::decode_vector_stream **)(a1 + 264));
        goto LABEL_153;
      case 1141:
        long long v59 = *(turi::v2_block_impl::decode_ndvector_stream **)(a1 + 272);
        if (*(_DWORD *)v59)
        {
          unint64_t v3 = turi::v2_block_impl::decode_ndvector_stream::read((uint64_t)v59, *(void *)(a1 + 208), (turi::iarchive *)(a1 + 72), a2, v30);
          int v51 = 1141;
          goto LABEL_325;
        }
        unint64_t v50 = (void *)(a1 + 272);
        turi::v2_block_impl::decode_ndvector_stream::~decode_ndvector_stream(v59);
        goto LABEL_153;
      case 1149:
        unint64_t v3 = 0;
        int v52 = *(unsigned __int8 *)(a1 + 224);
        goto LABEL_163;
    }
  }
  return v3;
}

void turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"decodebuffer.first != nullptr && decodebuffer.second > 0", 56);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 1028, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F0414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"decodebuffer.first == nullptr && decodebuffer.second == 0", 57);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 1030, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::v2_block_impl::typed_decode_stream::read(std::pair<turi::flexible_type *,unsigned long> const&,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F0614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::v2_block_impl::typed_decode_stream::pad_retbuf_with_undefined_positions(void *a1, uint64_t *a2)
{
  if (a1[16]) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2 || !a2[1]) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = a1[25];
  do
  {
    uint64_t v9 = *a2;
    uint64_t v10 = *a2 + v5;
    if ((*(void *)(a1[17] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8))
    {
      if ((uint64_t *)v10 != &turi::FLEX_UNDEFINED)
      {
        uint64_t v11 = v9 + v5;
        switch(*(unsigned char *)(v11 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v10;
              if (!*(void *)v10) {
                goto LABEL_47;
              }
              if (*((char *)v12 + 31) < 0) {
                operator delete((void *)v12[1]);
              }
              atomic_ullong *volatile v13 = v12;
              uint64_t v14 = 0x1012C404EF22A49;
              goto LABEL_46;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v10;
              if (!*(void *)v10) {
                goto LABEL_47;
              }
              atomic_ullong *volatile v19 = (void *)v18[1];
              if (v19)
              {
                v18[2] = (atomic_ullong)v19;
                operator delete(v19);
              }
              atomic_ullong *volatile v13 = v18;
              uint64_t v14 = 0x1080C409938AC02;
              goto LABEL_46;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v10;
              if (!*(void *)v10) {
                goto LABEL_47;
              }
              atomic_ullong *volatile v39 = (void **)(v20 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v39);
              goto LABEL_32;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v10;
              if (!*(void *)v10) {
                goto LABEL_47;
              }
              atomic_ullong *volatile v39 = (void **)(v20 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v39);
LABEL_32:
              atomic_ullong *volatile v13 = v20;
              uint64_t v14 = 0x1020C405E66F15BLL;
              goto LABEL_46;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v10;
              if (!*(void *)v10) {
                goto LABEL_47;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
              atomic_ullong *volatile v13 = v21;
              unsigned int v22 = -235920773;
              goto LABEL_45;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)v10;
              if (*(void *)v10)
              {
                uint64_t v24 = (void *)v23[6];
                if (v24)
                {
                  v23[7] = (atomic_ullong)v24;
                  operator delete(v24);
                }
                uint64_t v25 = (void *)v23[3];
                if (v25)
                {
                  void v23[4] = (atomic_ullong)v25;
                  operator delete(v25);
                }
                uint64_t v26 = (std::__shared_weak_count *)v23[2];
                if (v26) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
                }
                atomic_ullong *volatile v13 = v23;
                unsigned int v22 = 2071181815;
LABEL_45:
                uint64_t v14 = v22 | 0x1030C4000000000;
LABEL_46:
                MEMORY[0x22A614FA0](v13, v14);
              }
LABEL_47:
              *(void *)uint64_t v10 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v27 = turi::FLEX_UNDEFINED;
        *(void *)(v10 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(void *)uint64_t v10 = v27;
        LODWORD(v27) = byte_268085A64;
        *(unsigned char *)(v11 + 12) = byte_268085A64;
        switch((int)v27)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            atomic_fetch_add(*(atomic_ullong *volatile *)v10, 1uLL);
            break;
          default:
            break;
        }
      }
    }
    else
    {
      switch(*(unsigned char *)(v10 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v10;
            if (*(void *)v10)
            {
              if (*((char *)v15 + 31) < 0) {
                operator delete((void *)v15[1]);
              }
              atomic_ullong *volatile v16 = v15;
              uint64_t v17 = 0x1012C404EF22A49;
              goto LABEL_75;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v28 = *(atomic_ullong *volatile *)v10;
            if (*(void *)v10)
            {
              uint64_t v29 = (void *)v28[1];
              if (v29)
              {
                v28[2] = (atomic_ullong)v29;
                operator delete(v29);
              }
              atomic_ullong *volatile v16 = v28;
              uint64_t v17 = 0x1080C409938AC02;
              goto LABEL_75;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v10;
            if (*(void *)v10)
            {
              atomic_ullong *volatile v39 = (void **)(v30 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v39);
              goto LABEL_61;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v10;
            if (*(void *)v10)
            {
              atomic_ullong *volatile v39 = (void **)(v30 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v39);
LABEL_61:
              atomic_ullong *volatile v16 = v30;
              uint64_t v17 = 0x1020C405E66F15BLL;
              goto LABEL_75;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)v10;
            if (*(void *)v10)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v31 + 2);
              atomic_ullong *volatile v16 = v31;
              unsigned int v32 = -235920773;
              goto LABEL_74;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)v10;
            if (*(void *)v10)
            {
              unint64_t v34 = (void *)v33[6];
              if (v34)
              {
                v33[7] = (atomic_ullong)v34;
                operator delete(v34);
              }
              uint64_t v35 = (void *)v33[3];
              if (v35)
              {
                v33[4] = (atomic_ullong)v35;
                operator delete(v35);
              }
              atomic_ullong *volatile v36 = (std::__shared_weak_count *)v33[2];
              if (v36) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              }
              atomic_ullong *volatile v16 = v33;
              unsigned int v32 = 2071181815;
LABEL_74:
              uint64_t v17 = v32 | 0x1030C4000000000;
LABEL_75:
              MEMORY[0x22A614FA0](v16, v17);
            }
          }
          break;
        default:
          break;
      }
      uint64_t v37 = v9 + v5;
      *(void *)uint64_t v37 = 0;
      *(_DWORD *)(v37 + 8) = 0;
      *(unsigned char *)(v10 + 12) = 0;
      ++v7;
    }
    unint64_t v8 = a1[25] + 1;
    a1[25] = v8;
    ++v6;
    v5 += 16;
  }
  while (v6 < a2[1]);
  return v7;
}

void turi::v2_block_impl::decode_string_stream::decode_string_stream(turi::v2_block_impl::decode_string_stream *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)((char *)this + 85) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((unsigned char *)this + 92) = 2;
  operator new();
}

void turi::v2_block_impl::decode_vector_stream::decode_vector_stream(turi::v2_block_impl::decode_vector_stream *this)
{
  *(_DWORD *)this = 0;
  *(void *)((char *)this + 101) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((unsigned char *)this + 108) = 3;
  operator new();
}

char *turi::integer_pack::variable_encode<turi::oarchive>(turi::oarchive *this, unint64_t a2)
{
  unint64_t v47 = a2;
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      if (a2 >> 21)
      {
        if (a2 >> 28)
        {
          if (a2 >> 35)
          {
            if (a2 >> 42)
            {
              if (a2 >> 49)
              {
                __src[0] = 127;
                turi::oarchive::direct_assign<unsigned char>((uint64_t)this, __src);
                return turi::oarchive::direct_assign<unsigned long long>((uint64_t)this, &v47);
              }
              *(void *)__src = (a2 << 7) | 0x3F;
              size_t v13 = 7;
            }
            else
            {
              *(void *)__src = (a2 << 6) | 0x1F;
              size_t v13 = 6;
            }
            return (char *)turi::oarchive::write(this, __src, v13);
          }
          *(void *)__src = (32 * a2) | 0xF;
          if (*(void *)this) {
            return (char *)std::ostream::write();
          }
          unint64_t v15 = *((void *)this + 5);
          if (*((void *)this + 4) + 5 > v15)
          {
            size_t v38 = 2 * v15 + 10;
            *((void *)this + 5) = v38;
            atomic_ullong *volatile v39 = (uint64_t *)*((void *)this + 2);
            if (v39)
            {
              BOOL result = (char *)*v39;
              size_t v40 = v39[1] - *v39;
              BOOL v41 = v38 >= v40;
              std::vector<char>::size_type v42 = v38 - v40;
              if (v42 != 0 && v41)
              {
                std::vector<char>::__append(*((std::vector<char> **)this + 2), v42);
                BOOL result = (char *)**((void **)this + 2);
              }
              else if (!v41)
              {
                v39[1] = (uint64_t)&result[v38];
              }
            }
            else
            {
              BOOL result = (char *)malloc_type_realloc(*((void **)this + 3), v38, 0xF6EA6B1uLL);
            }
            *((void *)this + 3) = result;
          }
          else
          {
            BOOL result = (char *)*((void *)this + 3);
          }
          atomic_ullong *volatile v16 = &result[*((void *)this + 4)];
          int v17 = *(_DWORD *)__src;
          void v16[4] = __src[4];
          *(_DWORD *)atomic_ullong *volatile v16 = v17;
          uint64_t v7 = *((void *)this + 4) + 5;
        }
        else
        {
          int v8 = (16 * a2) | 7;
          *(_DWORD *)__src = v8;
          if (*(void *)this) {
            return (char *)std::ostream::write();
          }
          unint64_t v14 = *((void *)this + 5);
          if (*((void *)this + 4) + 4 > v14)
          {
            int v45 = (16 * a2) | 7;
            size_t v33 = 2 * v14 + 8;
            *((void *)this + 5) = v33;
            unint64_t v34 = (uint64_t *)*((void *)this + 2);
            if (v34)
            {
              BOOL result = (char *)*v34;
              size_t v35 = v34[1] - *v34;
              BOOL v36 = v33 >= v35;
              std::vector<char>::size_type v37 = v33 - v35;
              if (v37 != 0 && v36)
              {
                std::vector<char>::__append(*((std::vector<char> **)this + 2), v37);
                BOOL result = (char *)**((void **)this + 2);
              }
              else if (!v36)
              {
                v34[1] = (uint64_t)&result[v33];
              }
            }
            else
            {
              BOOL result = (char *)malloc_type_realloc(*((void **)this + 3), v33, 0xF6EA6B1uLL);
            }
            *((void *)this + 3) = result;
            int v8 = v45;
          }
          else
          {
            BOOL result = (char *)*((void *)this + 3);
          }
          *(_DWORD *)&result[*((void *)this + 4)] = v8;
          uint64_t v7 = *((void *)this + 4) + 4;
        }
      }
      else
      {
        *(_DWORD *)__src = (8 * a2) | 3;
        if (*(void *)this) {
          return (char *)std::ostream::write();
        }
        unint64_t v10 = *((void *)this + 5);
        if (*((void *)this + 4) + 3 > v10)
        {
          size_t v28 = 2 * v10 + 6;
          *((void *)this + 5) = v28;
          uint64_t v29 = (uint64_t *)*((void *)this + 2);
          if (v29)
          {
            BOOL result = (char *)*v29;
            size_t v30 = v29[1] - *v29;
            BOOL v31 = v28 >= v30;
            std::vector<char>::size_type v32 = v28 - v30;
            if (v32 != 0 && v31)
            {
              std::vector<char>::__append(*((std::vector<char> **)this + 2), v32);
              BOOL result = (char *)**((void **)this + 2);
            }
            else if (!v31)
            {
              v29[1] = (uint64_t)&result[v28];
            }
          }
          else
          {
            BOOL result = (char *)malloc_type_realloc(*((void **)this + 3), v28, 0xF6EA6B1uLL);
          }
          *((void *)this + 3) = result;
        }
        else
        {
          BOOL result = (char *)*((void *)this + 3);
        }
        uint64_t v11 = &result[*((void *)this + 4)];
        __int16 v12 = *(_WORD *)__src;
        v11[2] = __src[2];
        *(_WORD *)uint64_t v11 = v12;
        uint64_t v7 = *((void *)this + 4) + 3;
      }
    }
    else
    {
      __int16 v4 = (4 * a2) | 1;
      *(_WORD *)__src = v4;
      if (*(void *)this) {
        return (char *)std::ostream::write();
      }
      unint64_t v9 = *((void *)this + 5);
      if (*((void *)this + 4) + 2 > v9)
      {
        __int16 v44 = (4 * a2) | 1;
        size_t v23 = 2 * v9 + 4;
        *((void *)this + 5) = v23;
        uint64_t v24 = (uint64_t *)*((void *)this + 2);
        if (v24)
        {
          BOOL result = (char *)*v24;
          size_t v25 = v24[1] - *v24;
          BOOL v26 = v23 >= v25;
          std::vector<char>::size_type v27 = v23 - v25;
          if (v27 != 0 && v26)
          {
            std::vector<char>::__append(*((std::vector<char> **)this + 2), v27);
            BOOL result = (char *)**((void **)this + 2);
          }
          else if (!v26)
          {
            v24[1] = (uint64_t)&result[v23];
          }
        }
        else
        {
          BOOL result = (char *)malloc_type_realloc(*((void **)this + 3), v23, 0xF6EA6B1uLL);
        }
        *((void *)this + 3) = result;
        __int16 v4 = v44;
      }
      else
      {
        BOOL result = (char *)*((void *)this + 3);
      }
      *(_WORD *)&result[*((void *)this + 4)] = v4;
      uint64_t v7 = *((void *)this + 4) + 2;
    }
  }
  else
  {
    char v3 = 2 * a2;
    __src[0] = 2 * a2;
    if (*(void *)this) {
      return (char *)std::ostream::write();
    }
    unint64_t v5 = *((void *)this + 5);
    if (*((void *)this + 4) + 1 > v5)
    {
      char v43 = 2 * a2;
      size_t v18 = 2 * v5 + 2;
      *((void *)this + 5) = v18;
      atomic_ullong *volatile v19 = (uint64_t *)*((void *)this + 2);
      if (v19)
      {
        BOOL result = (char *)*v19;
        size_t v20 = v19[1] - *v19;
        BOOL v21 = v18 >= v20;
        std::vector<char>::size_type v22 = v18 - v20;
        if (v22 != 0 && v21)
        {
          std::vector<char>::__append(*((std::vector<char> **)this + 2), v22);
          BOOL result = (char *)**((void **)this + 2);
        }
        else if (!v21)
        {
          v19[1] = (uint64_t)&result[v18];
        }
      }
      else
      {
        BOOL result = (char *)malloc_type_realloc(*((void **)this + 3), v18, 0xF6EA6B1uLL);
      }
      *((void *)this + 3) = result;
      char v3 = v43;
    }
    else
    {
      BOOL result = (char *)*((void *)this + 3);
    }
    result[*((void *)this + 4)] = v3;
    uint64_t v7 = *((void *)this + 4) + 1;
  }
  *((void *)this + 4) = v7;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *size_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_2240F13E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_2240F1498(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned char *turi::oarchive::direct_assign<unsigned char>(uint64_t a1, unsigned char *a2)
{
  if (*(void *)a1)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 1 > v5)
    {
      size_t v6 = 2 * v5 + 2;
      *(void *)(a1 + 40) = v6;
      uint64_t v7 = *(void **)(a1 + 16);
      if (v7)
      {
        BOOL result = (unsigned char *)*v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v10);
          BOOL result = **(unsigned char ***)(a1 + 16);
        }
        else if (!v9)
        {
          v7[1] = &result[v6];
        }
      }
      else
      {
        BOOL result = malloc_type_realloc(*(void **)(a1 + 24), v6, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      BOOL result = *(unsigned char **)(a1 + 24);
    }
    result[(*(void *)(a1 + 32))++] = *a2;
  }
  return result;
}

char *turi::oarchive::direct_assign<unsigned long long>(uint64_t a1, void *a2)
{
  if (*(void *)a1)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v6 = 2 * v5 + 16;
      *(void *)(a1 + 40) = v6;
      uint64_t v7 = *(char ***)(a1 + 16);
      if (v7)
      {
        BOOL result = *v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v10);
          BOOL result = **(char ***)(a1 + 16);
        }
        else if (!v9)
        {
          v7[1] = &result[v6];
        }
      }
      else
      {
        BOOL result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v6, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      BOOL result = *(char **)(a1 + 24);
    }
    *(void *)&result[*(void *)(a1 + 32)] = *a2;
    *(void *)(a1 + 32) += 8;
  }
  return result;
}

void turi::v2_block_impl::encode_nd_vector(turi::v2_block_impl::block_info &,turi::oarchive &,std::vector<turi::flexible_type> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", 118);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  BOOL v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"val->is_valid()", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_v2_type_encoding.cpp", "operator()", 372, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::v2_block_impl::encode_nd_vector(turi::v2_block_impl::block_info &,turi::oarchive &,std::vector<turi::flexible_type> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F1770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::elements(void *a1)
{
  if (!turi::flexible_type_impl::ndarray<double>::is_full(a1)) {
    turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
  }
  return *a1;
}

void turi::dense_bitset::bit_pos_iterator::operator!=(turi::dense_bitset::bit_pos_iterator const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/util/dense_bitset.hpp", 92);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  BOOL v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"db == other.db", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/util/dense_bitset.hpp", "operator()", 287, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::dense_bitset::bit_pos_iterator::operator!=(turi::dense_bitset::bit_pos_iterator const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F19B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::v2_block_impl::decode_double_stream_legacy::~decode_double_stream_legacy(turi::v2_block_impl::decode_double_stream_legacy *this)
{
  switch(*((unsigned char *)this + 1068))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 132), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *((void *)this + 132);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 132), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = (void *)*((void *)this + 132);
        if (v5)
        {
          size_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 132), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 132);
        if (v7)
        {
          unint64_t v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 132), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 132);
        if (v7)
        {
          unint64_t v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 132), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *((void *)this + 132);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 132), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::vector<char>::size_type v10 = (void *)*((void *)this + 132);
        if (v10)
        {
          long long v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint8x8_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          unint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 132) = 0;
  *((_DWORD *)this + 266) = 0;
  *((unsigned char *)this + 1068) = 0;
}

void turi::v2_block_impl::decode_string_stream::~decode_string_stream(turi::v2_block_impl::decode_string_stream *this)
{
  switch(*((unsigned char *)this + 92))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 10), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *((void *)this + 10);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 10), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = (void *)*((void *)this + 10);
        if (v5)
        {
          size_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 10), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 10);
        if (v7)
        {
          unint64_t v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 10), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 10);
        if (v7)
        {
          unint64_t v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 10), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *((void *)this + 10);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 10), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::vector<char>::size_type v10 = (void *)*((void *)this + 10);
        if (v10)
        {
          long long v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint8x8_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          unint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((unsigned char *)this + 92) = 0;
  unint64_t v14 = (void **)((char *)this + 56);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
  unint64_t v14 = (void **)((char *)this + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void turi::v2_block_impl::decode_vector_stream::~decode_vector_stream(turi::v2_block_impl::decode_vector_stream *this)
{
  switch(*((unsigned char *)this + 108))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 12), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *((void *)this + 12);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 12), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = (void *)*((void *)this + 12);
        if (v5)
        {
          size_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 12), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 12);
        if (v7)
        {
          unint64_t v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 12), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 12);
        if (v7)
        {
          unint64_t v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 12), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *((void *)this + 12);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 12), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::vector<char>::size_type v10 = (void *)*((void *)this + 12);
        if (v10)
        {
          long long v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint8x8_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          unint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((unsigned char *)this + 108) = 0;
  unint64_t v14 = (void **)((char *)this + 56);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
  unint64_t v14 = (void **)((char *)this + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void turi::v2_block_impl::decode_ndvector_stream::~decode_ndvector_stream(turi::v2_block_impl::decode_ndvector_stream *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void **)((char *)this + 120);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 96);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 72);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 48);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>(unsigned long long const*,unsigned long,turi::oarchive &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/integer_pack.hpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/integer_pack.hpp", "operator()", 415, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>(unsigned long long const*,unsigned long,turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(turi::iarchive &,unsigned long,unsigned long long *)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/integer_pack.hpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/integer_pack.hpp", "operator()", 488, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(turi::iarchive &,unsigned long,unsigned long long *)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F24E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void **std::vector<turi::flexible_type>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  BOOL result = (void **)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = (uint64_t)*(result - 1);
  if (a2 <= (v8 - v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      uint64_t v17 = v9 + 16 * a2;
      do
      {
        *(void *)uint64_t v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 12) = 0;
        if (v9 != a3)
        {
          atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)a3;
          *(void *)(v9 + 5) = *(void *)(a3 + 5);
          *(void *)uint64_t v9 = v18;
          LODWORD(v18) = *(unsigned __int8 *)(a3 + 12);
          *(unsigned char *)(v9 + 12) = (_BYTE)v18;
          BOOL v19 = v18 > 9;
          int v20 = (1 << (char)v18) & 0x33C;
          if (!v19 && v20 != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)v9, 1uLL);
          }
        }
        v9 += 16;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = v9 - *a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - *a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    BOOL v31 = result;
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    size_t v22 = (atomic_ullong *volatile *)&v15[16 * v12];
    v28[0] = v15;
    v28[1] = (void *)v22;
    uint64_t v29 = v22;
    size_t v30 = &v15[16 * v14];
    uint64_t v23 = 16 * a2;
    unint64_t v24 = &v22[2 * a2];
    do
    {
      *size_t v22 = 0;
      *((_DWORD *)v22 + 2) = 0;
      *((unsigned char *)v22 + 12) = 0;
      if (v22 != (atomic_ullong *volatile *)a3)
      {
        size_t v25 = *(atomic_ullong **)a3;
        *(atomic_ullong *volatile *)((char *)v22 + 5) = *(atomic_ullong *volatile *)(a3 + 5);
        *size_t v22 = v25;
        LODWORD(v25) = *(unsigned __int8 *)(a3 + 12);
        *((unsigned char *)v22 + 12) = (_BYTE)v25;
        BOOL v19 = v25 > 9;
        int v26 = (1 << (char)v25) & 0x33C;
        if (!v19 && v26 != 0) {
          atomic_fetch_add(*v22, 1uLL);
        }
      }
      v22 += 2;
      v23 -= 16;
    }
    while (v23);
    uint64_t v29 = v24;
    std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v28);
    return std::__split_buffer<turi::flexible_type>::~__split_buffer(v28);
  }
  return result;
}

void sub_2240F2784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

turi::sframe *turi::sframe::sframe(turi::sframe *this, const turi::sframe *a2)
{
  *(void *)this = &unk_26D76C528;
  *((void *)this + 1) = -1;
  uint64_t v4 = (_OWORD *)((char *)this + 8);
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  unint64_t v5 = (uint64_t **)((char *)this + 88);
  *((void *)this + 13) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 7) = 0u;
  size_t v6 = (std::string *)((char *)this + 112);
  *((void *)this + 10) = 0;
  *((_OWORD *)this + 10) = 0u;
  uint64_t v17 = (char *)this + 184;
  atomic_ullong *volatile v18 = (std::string *)((char *)this + 136);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  int v7 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 224), 0);
  assert_msg(v7 == 0, "Mutex create error %d", v7);
  *((_WORD *)this + 144) = 0;
  uint64_t v8 = (int *)global_logger();
  if (v8[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "sframe", 23, 1);
    unint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        uint64_t v13 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v19);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*((unsigned char *)a2 + 288))
  {
    if (*((unsigned char *)a2 + 289)) {
      turi::sframe::sframe(turi::sframe const&)::$_0::operator()();
    }
    long long v14 = *(_OWORD *)((char *)a2 + 24);
    *uint64_t v4 = *(_OWORD *)((char *)a2 + 8);
    v4[1] = v14;
    if (this != a2)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 40), *((std::string **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 64), *((std::string **)a2 + 8), *((long long **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v5, *((long long **)a2 + 11), (long long *)a2 + 6);
    }
    std::string::operator=(v6, (const std::string *)((char *)a2 + 112));
    std::string::operator=(v18, (const std::string *)((char *)a2 + 136));
    if (this != a2) {
      std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>((uint64_t)v17, *((uint64_t **)a2 + 23), *((uint64_t **)a2 + 24), (uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 4);
    }
    *((_WORD *)this + 144) = 1;
  }
  return this;
}

void sub_2240F2A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  turi::mutex::~mutex(v16);
  atomic_ullong *volatile v18 = *(std::__shared_weak_count **)(v15 + 216);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  a13 = a11;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v15 + 159) < 0) {
    operator delete(*a12);
  }
  turi::sframe_index_file_information::~sframe_index_file_information(v14);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::operator=(uint64_t a1, uint64_t a2)
{
  assert_msg(*(unsigned char *)(a1 + 289) == 0, "Cannot copy over an array which is currently writing");
  turi::sframe::reset((turi::sframe *)a1);
  if (*(unsigned char *)(a2 + 288))
  {
    assert_msg(*(unsigned char *)(a2 + 289) == 0, "Cannot copy an array which is writing");
    long long v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    if (a1 == a2)
    {
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
    }
    else
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 40), *(std::string **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 64), *(std::string **)(a2 + 64), *(long long **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 88), *(long long **)(a2 + 88), (long long *)(a2 + 96));
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
      std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(a1 + 184, *(uint64_t **)(a2 + 184), *(uint64_t **)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 4);
    }
    *(_WORD *)(a1 + 288) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 288) = 0;
  }
  return a1;
}

{
  long long v4;
  void **v5;
  long long v6;
  void **v7;
  long long v8;
  long long v9;
  std::__shared_weak_count *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void **v15;
  unsigned char v17[56];
  long long v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  long long v23;
  uint64_t v24;
  void **v25;

  long long v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 64));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 88, (void *)(a2 + 88));
  unint64_t v5 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v5);
  }
  size_t v6 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)unint64_t v5 = v6;
  *(unsigned char *)(a2 + 135) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  int v7 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v7);
  }
  uint64_t v8 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)int v7 = v8;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((uint64_t *)(a1 + 184));
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  uint64_t v9 = *(_OWORD *)(a2 + 208);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 216);
  *(_OWORD *)(a1 + 208) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(unsigned char *)(a1 + 289) = *(unsigned char *)(a2 + 289);
  *(void *)uint64_t v17 = -1;
  unint64_t v21 = 0;
  size_t v22 = 0;
  memset(&v17[8], 0, 48);
  atomic_ullong *volatile v18 = 0u;
  std::locale v19 = 0;
  int v20 = &v21;
  unint64_t v24 = 0;
  uint64_t v23 = 0uLL;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v17;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)&v17[16];
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 40));
  *(_OWORD *)(a2 + 40) = *(_OWORD *)&v17[32];
  *(void *)(a2 + 56) = *(void *)&v17[48];
  memset(&v17[32], 0, 24);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 64));
  uint64_t v12 = a2 + 96;
  unint64_t v11 = *(void **)(a2 + 96);
  *(_OWORD *)(a2 + 64) = v18;
  *(void *)(a2 + 80) = v19;
  std::locale v19 = 0;
  atomic_ullong *volatile v18 = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 + 88, v11);
  uint64_t v13 = v21;
  *(void *)(a2 + 88) = v20;
  *(void *)(a2 + 96) = v13;
  long long v14 = v22;
  *(void *)(a2 + 104) = v22;
  if (v14)
  {
    void v13[2] = v12;
    uint64_t v13 = 0;
    int v20 = &v21;
    unint64_t v21 = 0;
    size_t v22 = 0;
  }
  else
  {
    *(void *)(a2 + 88) = v12;
  }
  uint64_t v15 = (void **)(a2 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    operator delete(*v15);
    uint64_t v13 = v21;
  }
  *(_OWORD *)uint64_t v15 = v23;
  *(void *)(a2 + 128) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(v23) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v13);
  size_t v25 = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  size_t v25 = (void **)&v17[32];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
  MEMORY[0x22A614700](a2 + 136, "");
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)(a2 + 184));
  *(_WORD *)(a2 + 288) = 0;
  return a1;
}

void turi::sframe::reset(turi::sframe *this)
{
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "reset", 698, 1);
    unint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        int v7 = std::locale::use_facet((const std::locale *)v15, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale((std::locale *)v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  MEMORY[0x22A614700]((char *)this + 136, "");
  *(void *)uint64_t v15 = -1;
  memset(&v15[8], 0, 48);
  long long v16 = 0u;
  long long v8 = *(_OWORD *)&v15[16];
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)v15;
  std::locale v19 = 0;
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  atomic_ullong *volatile v18 = &v19;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  *(_OWORD *)((char *)this + 24) = v8;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 40));
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)&v15[32];
  *((void *)this + 7) = *(void *)&v15[48];
  memset(&v15[32], 0, 24);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 64));
  *((_OWORD *)this + 4) = v16;
  uint64_t v10 = (char *)this + 96;
  uint64_t v9 = (void *)*((void *)this + 12);
  *((void *)this + 10) = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 88, v9);
  unint64_t v11 = v19;
  *((void *)this + 11) = v18;
  *((void *)this + 12) = v11;
  uint64_t v12 = v20;
  *((void *)this + 13) = v20;
  if (v12)
  {
    v11[2] = v10;
    unint64_t v11 = 0;
    atomic_ullong *volatile v18 = &v19;
    std::locale v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    *((void *)this + 11) = v10;
  }
  uint64_t v13 = (void **)((char *)this + 112);
  if (*((char *)this + 135) < 0)
  {
    operator delete(*v13);
    unint64_t v11 = v19;
  }
  *(_OWORD *)uint64_t v13 = v21;
  *((void *)this + 16) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(v21) = 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v11);
  uint64_t v23 = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
  uint64_t v23 = (void **)&v15[32];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)this + 23);
}

void sub_2240F2ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::sframe::sframe(turi::sframe *this, long long **a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D76C528;
  *((void *)this + 1) = -1;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  int v4 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 224), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  *((_WORD *)this + 144) = 0;
  unint64_t v5 = (int *)global_logger();
  if (v5[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "sframe", 54, 1);
    long long v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet((const std::locale *)&v20, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale((std::locale *)&v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  std::vector<turi::flex_type_enum>::vector(&v18, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  std::vector<std::vector<turi::flexible_type> const*,std::allocator<std::vector<turi::flexible_type> const*>>::vector(&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  std::string::size_type v11 = v19.__r_.__value_.__r.__words[0];
  if (v19.__r_.__value_.__l.__size_ != v19.__r_.__value_.__r.__words[0])
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      long long v14 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(a2 + 3), (const void **)(v11 + v12));
      *((unsigned char *)v18 + v13) = *v14;
      uint64_t v15 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(a2 + 6), (const void **)(v19.__r_.__value_.__r.__words[0] + v12));
      *((void *)__p + v13++) = v15;
      std::string::size_type v11 = v19.__r_.__value_.__r.__words[0];
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  turi::sframe::open_for_write((uint64_t)this, &v19, &v18, &v20, 1, 1);
}

void sub_2240F3614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pthread_mutex_t *a10, uint64_t a11, void **a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::locale::~locale(&a27);
  turi::mutex::~mutex(a10);
  size_t v33 = *(std::__shared_weak_count **)(a13 + 216);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  a23 = a13 + 184;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = a11;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(a13 + 159) < 0) {
    operator delete(*(void **)(a13 + 136));
  }
  turi::sframe_index_file_information::~sframe_index_file_information(a12);
  _Unwind_Resume(a1);
}

void turi::sframe::init_from_csvs(unsigned char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  v26[0] = 0;
  v26[1] = 0;
  size_t v25 = v26;
  memset(v27, 0, sizeof(v27));
  LOBYTE(v23) = a4;
  HIBYTE(v23) = a5;
  char v24 = a6;
  if (&v25 != (char ***)a7) {
    std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>((uint64_t **)&v25, *a7, a7 + 1);
  }
  if (v27 != (unsigned char *)a8) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v27, *(std::string **)a8, *(long long **)(a8 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a8 + 8) - *(void *)a8) >> 3));
  }
  *(void *)&v27[24] = a10;
  *(void *)&v27[32] = a11;
  __int16 v18 = v23;
  char v19 = v24;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](v20, (const void ***)&v25);
  memset(&v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(long long **)v27, *(long long **)&v27[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v27[8] - *(void *)v27) >> 3));
  long long v22 = *(_OWORD *)&v27[24];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::parse_csvs_to_sframe(a2, a3, (unsigned __int8 *)&v18, a1, (uint64_t)__p, a9);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  size_t v28 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v20, (char *)v20[1]);
  size_t v28 = (std::string *)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v25, v26[0]);
}

void sub_2240F3B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  turi::csv_file_handling_options::~csv_file_handling_options(&a15);
  turi::csv_file_handling_options::~csv_file_handling_options(&a24);
  _Unwind_Resume(a1);
}

void turi::sframe::~sframe(turi::sframe *this)
{
  *(void *)this = &unk_26D76C528;
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "~sframe", 127, 1);
    unint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        int v7 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v10);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 224));
  long long v8 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  v10.__locale_ = (turi::sframe *)((char *)this + 184);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v10.__locale_ = (turi::sframe *)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 88, *((void **)this + 12));
  v10.__locale_ = (turi::sframe *)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v10.__locale_ = (turi::sframe *)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

{
  uint64_t vars8;

  turi::sframe::~sframe(this);
  JUMPOUT(0x22A614FA0);
}

void sub_2240F3DE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::sframe::create_arrays_for_reading(uint64_t a1, long long *a2)
{
  int v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      goto LABEL_28;
    }
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_reading", 131, 1);
    int v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    long long v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
LABEL_29:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  std::locale v10 = (int *)global_logger();
  if (v10[169] > 1) {
    goto LABEL_23;
  }
  if (cppipc::must_cancel((cppipc *)v10)) {
LABEL_28:
  }
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  std::string::size_type v11 = (file_logger *)global_logger();
  uint64_t v12 = file_logger::start_stream(v11, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_reading", 132, 1);
  unint64_t v13 = pthread_getspecific(*((void *)v12 + 74));
  if (v13 && *((unsigned char *)v13 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Opening Frame for Reading of size (", 35);
  }
  uint64_t v14 = file_logger::operator<<<unsigned long>((uint64_t)v12);
  uint64_t v15 = pthread_getspecific(*(void *)(v14 + 592));
  if (v15 && *((unsigned char *)v15 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)",", 1);
  }
  uint64_t v16 = file_logger::operator<<<unsigned long>(v14);
  char v17 = pthread_getspecific(*(void *)(v16 + 592));
  if (v17 && *((unsigned char *)v17 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)")", 1);
  }
  __int16 v18 = pthread_getspecific(*(void *)(v16 + 592));
  if (v18)
  {
    if (*((unsigned char *)v18 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(v18[2] - 24) + 16));
      char v19 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v22);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v16);
      if (*(_DWORD *)(v16 + 600) == 7) {
        goto LABEL_29;
      }
    }
  }
LABEL_23:
  turi::sframe::reset((turi::sframe *)a1);
  *(unsigned char *)(a1 + 289) = 0;
  long long v20 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v20;
  if ((long long *)(a1 + 8) != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 40), *((std::string **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 64), *((std::string **)a2 + 7), *((long long **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 88), *((long long **)a2 + 10), (long long *)((char *)a2 + 88));
  }
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)((char *)a2 + 104));
  if (*(void *)(a1 + 24)) {
    operator new();
  }
  v24[0] = 0;
  v24[1] = 0;
  __int16 v23 = v24;
  turi::sframe::keep_array_file_ref((std::__shared_weak_count *)a1);
  std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::destroy((uint64_t)&v23, v24[0]);
}

void sub_2240F4694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,std::locale a51)
{
}

void turi::sframe::keep_array_file_ref(std::__shared_weak_count *this)
{
  unint64_t v1 = this;
  if (SHIBYTE(this[6].__shared_owners_) < 0)
  {
    if (!this[6].__vftable) {
      goto LABEL_15;
    }
  }
  else if (!HIBYTE(this[6].__shared_owners_))
  {
    goto LABEL_15;
  }
  uint64_t instance = turi::fileio::file_handle_pool::get_instance((turi::fileio::file_handle_pool *)this);
  turi::fileio::file_handle_pool::register_file((uint64_t)instance, (std::string *)&v1[5].__shared_weak_owners_, (uint64_t *)&v50);
  this = (std::__shared_weak_count *)((char *)v1 + 176);
  unint64_t shared_owners = v1[7].__shared_owners_;
  int v4 = v1[7].__vftable;
  if ((unint64_t)v4 >= shared_owners)
  {
    uint64_t shared_weak_owners = v1[6].__shared_weak_owners_;
    uint64_t v6 = ((uint64_t)v4 - shared_weak_owners) >> 4;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = shared_owners - shared_weak_owners;
    if (v8 >> 3 > v7) {
      unint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    p_unint64_t shared_owners = &v1[7].__shared_owners_;
    std::locale v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)this, v9);
    std::string::size_type v11 = &v10[16 * v6];
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    unint64_t v53 = &v10[16 * v12];
    *(_OWORD *)std::string::size_type v11 = v50;
    long long v50 = 0uLL;
    v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v11 + 16);
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__swap_out_circular_buffer(&v1[6].__shared_weak_owners_, &v52);
    unint64_t v13 = v1[7].__vftable;
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&v52.__r_.__value_.__l.__data_);
    this = (std::__shared_weak_count *)*((void *)&v50 + 1);
    v1[7].__vftable = v13;
    if (this) {
      std::__shared_weak_count::__release_shared[abi:ne180100](this);
    }
  }
  else
  {
    *(_OWORD *)&v4->~__shared_weak_count = v50;
    v1[7].__vftable = (std::__shared_weak_count_vtbl *)&v4->__on_zero_shared;
  }
LABEL_15:
  if (SHIBYTE(v1[5].__shared_owners_) < 0)
  {
    if (!v1[5].__vftable) {
      goto LABEL_29;
    }
  }
  else if (!HIBYTE(v1[5].__shared_owners_))
  {
    goto LABEL_29;
  }
  uint64_t v14 = turi::fileio::file_handle_pool::get_instance((turi::fileio::file_handle_pool *)this);
  turi::fileio::file_handle_pool::register_file((uint64_t)v14, (std::string *)&v1[4].__shared_weak_owners_, (uint64_t *)&v50);
  unint64_t v15 = v1[7].__shared_owners_;
  uint64_t v16 = v1[7].__vftable;
  if ((unint64_t)v16 >= v15)
  {
    uint64_t v17 = v1[6].__shared_weak_owners_;
    uint64_t v18 = ((uint64_t)v16 - v17) >> 4;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v15 - v17;
    if (v20 >> 3 > v19) {
      unint64_t v19 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    p_unint64_t shared_owners = &v1[7].__shared_owners_;
    std::locale v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v1[7].__shared_owners_, v21);
    __int16 v23 = &v22[16 * v18];
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    unint64_t v53 = &v22[16 * v24];
    *(_OWORD *)__int16 v23 = v50;
    long long v50 = 0uLL;
    v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v23 + 16);
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__swap_out_circular_buffer(&v1[6].__shared_weak_owners_, &v52);
    size_t v25 = v1[7].__vftable;
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&v52.__r_.__value_.__l.__data_);
    int v26 = (std::__shared_weak_count *)*((void *)&v50 + 1);
    v1[7].__vftable = v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
  }
  else
  {
    *(_OWORD *)&v16->~__shared_weak_count = v50;
    v1[7].__vftable = (std::__shared_weak_count_vtbl *)&v16->__on_zero_shared;
  }
LABEL_29:
  *((void *)&v50 + 1) = 0;
  uint64_t v51 = 0;
  *(void *)&long long v50 = (char *)&v50 + 8;
  if (v1[1].__vftable)
  {
    uint64_t v27 = 0;
    size_t v28 = 0;
    do
    {
      uint64_t v29 = (long long *)(v1[2].__shared_weak_owners_ + v27);
      if (*((char *)v29 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v29, *((void *)v29 + 1));
      }
      else
      {
        long long v30 = *v29;
        __p.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
      }
      turi::parse_v2_segment_filename((uint64_t)&__p, &v52);
      std::string v49 = v52;
      memset(&v52, 0, sizeof(v52));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type size = (turi::fileio::file_handle_pool *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v50, (const void **)&v49.__r_.__value_.__l.__data_, (uint64_t)&v49);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      size_t v28 = (std::__shared_weak_count_vtbl *)((char *)v28 + 1);
      v27 += 24;
    }
    while (v28 < v1[1].__vftable);
    std::vector<char>::size_type v32 = (_OWORD *)v50;
    if ((long long *)v50 != (long long *)((char *)&v50 + 8))
    {
      p_uint64_t shared_weak_owners = &v1[6].__shared_weak_owners_;
      do
      {
        unint64_t v34 = turi::fileio::file_handle_pool::get_instance(size);
        std::string::size_type size = (turi::fileio::file_handle_pool *)turi::fileio::file_handle_pool::register_file((uint64_t)v34, (std::string *)(v32 + 2), (uint64_t *)&v49);
        BOOL v36 = v1[7].__vftable;
        unint64_t v35 = v1[7].__shared_owners_;
        if ((unint64_t)v36 >= v35)
        {
          uint64_t v37 = ((uint64_t)v36 - *p_shared_weak_owners) >> 4;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v35 - *p_shared_weak_owners;
          if (v39 >> 3 > v38) {
            unint64_t v38 = v39 >> 3;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          p_unint64_t shared_owners = &v1[7].__shared_owners_;
          BOOL v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v1[7].__shared_owners_, v40);
          std::vector<char>::size_type v42 = &v41[16 * v37];
          v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          v52.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
          unint64_t v53 = &v41[16 * v43];
          *(_OWORD *)std::vector<char>::size_type v42 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
          v52.__r_.__value_.__r.__words[2] = (std::string::size_type)(v42 + 16);
          std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__swap_out_circular_buffer(&v1[6].__shared_weak_owners_, &v52);
          __int16 v44 = v1[7].__vftable;
          std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&v52.__r_.__value_.__l.__data_);
          std::string::size_type size = (turi::fileio::file_handle_pool *)v49.__r_.__value_.__l.__size_;
          v1[7].__vftable = v44;
          if (size) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)size);
          }
        }
        else
        {
          *(_OWORD *)&v36->~__shared_weak_count = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
          v1[7].__vftable = (std::__shared_weak_count_vtbl *)&v36->__on_zero_shared;
        }
        int v45 = (void *)*((void *)v32 + 1);
        if (v45)
        {
          do
          {
            unint64_t v46 = v45;
            int v45 = (void *)*v45;
          }
          while (v45);
        }
        else
        {
          do
          {
            unint64_t v46 = (_OWORD *)*((void *)v32 + 2);
            BOOL v47 = *(void *)v46 == (void)v32;
            std::vector<char>::size_type v32 = v46;
          }
          while (!v47);
        }
        std::vector<char>::size_type v32 = v46;
      }
      while (v46 != (long long *)((char *)&v50 + 8));
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v50, *((char **)&v50 + 1));
}

void sub_2240F4B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,std::__shared_weak_count *a24,uint64_t a25,void *a26)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(a1);
}

__n128 turi::sframe::create_arrays_for_reading(uint64_t a1, uint64_t **a2, const void ***a3, char a4)
{
  unint64_t v7 = (int *)global_logger();
  if (v7[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v7)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_reading", 180, 1);
    std::locale v10 = pthread_getspecific(*((void *)started + 74));
    if (v10 && *((unsigned char *)v10 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Function entry", 14);
    }
    std::string::size_type v11 = pthread_getspecific(*((void *)started + 74));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        uint64_t v12 = std::locale::use_facet((const std::locale *)v74, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale((std::locale *)v74);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::sframe::reset((turi::sframe *)a1);
  *(unsigned char *)(a1 + 289) = 0;
  uint64_t v14 = a2[1];
  if (*a2 != v14)
  {
    if ((uint64_t **)(a1 + 184) != a2) {
      std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(a1 + 184, *a2, v14, ((char *)v14 - (char *)*a2) >> 4);
    }
    std::vector<std::string>::resize((std::vector<std::string> *)(a1 + 64), (uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 4);
    *(void *)(a1 + 8) = 0;
    uint64_t v16 = *(uint64_t **)(a1 + 184);
    unint64_t v15 = *(uint64_t **)(a1 + 192);
    *(void *)(a1 + 24) = ((char *)v15 - (char *)v16) >> 4;
    uint64_t v17 = *v16;
    if (!*(unsigned char *)(*v16 + 248)) {
      goto LABEL_18;
    }
    uint64_t v18 = *(uint64_t **)(v17 + 80);
    uint64_t v19 = *(void *)(v17 + 88) - (void)v18;
    if (v19)
    {
      uint64_t v20 = 0;
      unint64_t v21 = v19 >> 3;
      if (v21 <= 1) {
        unint64_t v21 = 1;
      }
      do
      {
        uint64_t v22 = *v18++;
        v20 += v22;
        --v21;
      }
      while (v21);
    }
    else
    {
LABEL_18:
      uint64_t v20 = 0;
    }
    *(void *)(a1 + 32) = v20;
    if (v16 != v15)
    {
      __int16 v23 = v16;
      do
      {
        uint64_t v24 = *v23;
        if (*(unsigned char *)(*v23 + 248) && (size_t v25 = *(uint64_t **)(v24 + 80), (v26 = *(void *)(v24 + 88) - (void)v25) != 0))
        {
          uint64_t v27 = 0;
          unint64_t v28 = v26 >> 3;
          if (v28 <= 1) {
            unint64_t v28 = 1;
          }
          do
          {
            uint64_t v29 = *v25++;
            v27 += v29;
            --v28;
          }
          while (v28);
        }
        else
        {
          uint64_t v27 = 0;
        }
        if (v27 != v20)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74[0].__end_, (uint64_t)"Columns do not have the same length! ", 37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74[0].__end_, (uint64_t)"Expected ", 9);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74[0].__end_, (uint64_t)", found ", 8);
          uint64_t v60 = *v23;
          if (*(unsigned char *)(*v23 + 248))
          {
            uint64_t v62 = v60 + 80;
            unint64_t v61 = *(uint64_t **)(v60 + 80);
            uint64_t v63 = *(void *)(v62 + 8) - (void)v61;
            if (v63)
            {
              uint64_t v65 = 0;
              unint64_t v66 = v63 >> 3;
              if (v66 <= 1) {
                unint64_t v66 = 1;
              }
              do
              {
                uint64_t v67 = *v61++;
                v65 += v67;
                --v66;
              }
              while (v66);
            }
          }
          uint64_t v68 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)".", 1);
          __p[0] = v74;
          turi::sframe::create_arrays_for_reading(std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>> const&,std::vector<std::string> const&,BOOL)::$_0::operator()();
        }
        v23 += 2;
      }
      while (v23 != v15);
    }
    if (a4)
    {
      std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v74, *a3, a3[1]);
      if ((std::__split_buffer<std::string>::pointer)(0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3)) != v74[0].__end_) {
        turi::sframe::create_arrays_for_reading(std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>> const&,std::vector<std::string> const&,BOOL)::$_1::operator()();
      }
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v74, (char *)v74[0].__begin_);
      uint64_t v16 = *(uint64_t **)(a1 + 184);
      unint64_t v15 = *(uint64_t **)(a1 + 192);
    }
    if (v15 != v16)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      size_t v33 = (void *)(a1 + 40);
      while (0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3) > v32)
      {
        turi::sframe::generate_valid_column_name(a1, (uint64_t)&(*a3)[v31], (uint64_t)__p);
        unint64_t v35 = *(void *)(a1 + 48);
        unint64_t v34 = *(void *)(a1 + 56);
        if (v35 >= v34)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *v33) >> 3);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *v33) >> 3);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 >= 0x555555555555555) {
            unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v43 = v41;
          }
          v74[0].__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 56);
          if (v43) {
            __int16 v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 56, v43);
          }
          else {
            __int16 v44 = 0;
          }
          long long v50 = v44 + v40;
          v74[0].__first_ = v44;
          v74[0].__begin_ = v50;
          v74[0].__end_cap_.__value_ = &v44[v43];
          long long v51 = *(_OWORD *)__p;
          v50->__r_.__value_.__r.__words[2] = v73;
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
          __p[1] = 0;
          std::string::size_type v73 = 0;
          __p[0] = 0;
          v74[0].__end_ = v50 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 40), v74);
          uint64_t v52 = *(void *)(a1 + 48);
          std::__split_buffer<std::string>::~__split_buffer(v74);
          int v53 = SHIBYTE(v73);
          *(void *)(a1 + 48) = v52;
          if ((v53 & 0x80000000) == 0) {
            goto LABEL_65;
          }
          unint64_t v54 = __p[0];
          goto LABEL_64;
        }
        long long v36 = *(_OWORD *)__p;
        *(void *)(v35 + 16) = v73;
        *(_OWORD *)unint64_t v35 = v36;
        *(void *)(a1 + 48) = v35 + 24;
LABEL_65:
        turi::sarray<turi::flexible_type>::get_index_file((*a2)[v30], (std::string *)v74);
        uint64_t v59 = *(void *)(a1 + 64) + v31 * 8;
        if (*(char *)(v59 + 23) < 0) {
          operator delete(*(void **)v59);
        }
        __n128 result = *(__n128 *)&v74[0].__first_;
        *(void *)(v59 + 16) = v74[0].__end_;
        *(__n128 *)uint64_t v59 = result;
        ++v32;
        v31 += 3;
        v30 += 2;
        if (v32 >= (uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 4) {
          return result;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v70, "");
      turi::sframe::generate_valid_column_name(a1, (uint64_t)v70, (uint64_t)__p);
      unint64_t v37 = *(void *)(a1 + 48);
      unint64_t v38 = *(void *)(a1 + 56);
      if (v37 >= v38)
      {
        unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v33) >> 3);
        unint64_t v46 = v45 + 1;
        if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v33) >> 3);
        if (2 * v47 > v46) {
          unint64_t v46 = 2 * v47;
        }
        if (v47 >= 0x555555555555555) {
          unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v48 = v46;
        }
        v74[0].__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 56);
        if (v48) {
          std::string v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 56, v48);
        }
        else {
          std::string v49 = 0;
        }
        unint64_t v55 = v49 + v45;
        v74[0].__first_ = v49;
        v74[0].__begin_ = v55;
        v74[0].__end_cap_.__value_ = &v49[v48];
        long long v56 = *(_OWORD *)__p;
        v55->__r_.__value_.__r.__words[2] = v73;
        *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
        __p[1] = 0;
        std::string::size_type v73 = 0;
        __p[0] = 0;
        v74[0].__end_ = v55 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 40), v74);
        uint64_t v57 = *(void *)(a1 + 48);
        std::__split_buffer<std::string>::~__split_buffer(v74);
        int v58 = SHIBYTE(v73);
        *(void *)(a1 + 48) = v57;
        if (v58 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v39 = *(_OWORD *)__p;
        *(void *)(v37 + 16) = v73;
        *(_OWORD *)unint64_t v37 = v39;
        __p[1] = 0;
        std::string::size_type v73 = 0;
        __p[0] = 0;
        *(void *)(a1 + 48) = v37 + 24;
      }
      if ((v71 & 0x80000000) == 0) {
        goto LABEL_65;
      }
      unint64_t v54 = v70[0];
LABEL_64:
      operator delete(v54);
      goto LABEL_65;
    }
  }
  return result;
}

void sub_2240F5294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23,uint64_t a24)
{
}

void turi::sframe::generate_valid_column_name(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v26[2] = *MEMORY[0x263EF8340];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    std::string::operator=((std::string *)a3, (const std::string *)a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "X");
    std::to_string(&v24, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3) + 1);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v24;
    }
    else {
      uint64_t v6 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = std::string::append(&__str, (const std::string::value_type *)v6, size);
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
    v26[0] = v8->__r_.__value_.__l.__size_;
    *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
    char v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    uint64_t v11 = v26[0];
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v11;
    *(void *)(a3 + 15) = *(void *)((char *)v26 + 7);
    *(unsigned char *)(a3 + 23) = v10;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (turi::sframe::contains_column(a1, (unsigned __int8 **)a3))
  {
    std::string::append((std::string *)a3, ".");
    std::to_string(&v24, 1uLL);
    int v12 = *(char *)(a3 + 23);
    if (v12 >= 0) {
      unint64_t v13 = (const std::string::value_type *)a3;
    }
    else {
      unint64_t v13 = *(const std::string::value_type **)a3;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(a3 + 8);
    }
    unint64_t v15 = std::string::insert(&v24, 0, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    unint64_t v17 = 2;
    while (turi::sframe::contains_column(a1, (unsigned __int8 **)&__str))
    {
      std::to_string(&v24, v17);
      int v18 = *(char *)(a3 + 23);
      if (v18 >= 0) {
        uint64_t v19 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v19 = *(const std::string::value_type **)a3;
      }
      if (v18 >= 0) {
        std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v20 = *(void *)(a3 + 8);
      }
      unint64_t v21 = std::string::insert(&v24, 0, v19, v20);
      std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
      v26[0] = v21->__r_.__value_.__l.__size_;
      *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
      char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v22;
      __str.__r_.__value_.__l.__size_ = v26[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v26 + 7);
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v23;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      ++v17;
    }
    std::string::operator=((std::string *)a3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2240F55C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray<turi::flexible_type>::get_index_file(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 248)) {
    turi::sarray<turi::flexible_type>::get_index_file(void)const::{lambda(void)#1}::operator()();
  }
  if (*(char *)(a1 + 175) < 0)
  {
    uint64_t v2 = *(const std::string::value_type **)(a1 + 152);
    std::string::size_type v3 = *(void *)(a1 + 160);
    std::string::__init_copy_ctor_external(a2, v2, v3);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 152);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 168);
  }
}

void turi::sframe::create_arrays_for_writing(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const std::string *a5, int a6)
{
  std::string::size_type v9 = (int *)global_logger();
  if (v9[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v9)) {
      goto LABEL_111;
    }
    char v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_writing", 236, 1);
    int v12 = pthread_getspecific(*((void *)started + 74));
    if (v12 && *((unsigned char *)v12 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13)
    {
      if (*((unsigned char *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[2] - 24) + 16));
        std::string::size_type v14 = std::locale::use_facet((const std::locale *)&v84, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)&v84);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unint64_t v15 = (int *)global_logger();
  if (v15[169] > 1)
  {
LABEL_31:
    turi::sframe::reset((turi::sframe *)a1);
    *(unsigned char *)(a1 + 289) = 1;
    std::vector<std::string>::resize((std::vector<std::string> *)(a1 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
    *(void *)(a1 + 8) = 0;
    uint64_t v27 = (unsigned __int8 *)*a2;
    unint64_t v28 = (unsigned __int8 *)a2[1];
    *(void *)(a1 + 24) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v28[-*a2] >> 3);
    *(void *)(a1 + 32) = 0;
    std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v81, v27, v28);
    uint64_t v29 = v82;
    std::vector<std::string>::size_type v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v31 = (void *)(a1 + 40);
    std::vector<std::string>::reserve((std::vector<std::string> *)(a1 + 40), v30);
    unint64_t v32 = (unsigned __int8 *)*a2;
    if (a2[1] == *a2)
    {
LABEL_79:
      uint64_t v60 = (turi::fileio::fixed_size_cache_manager *)std::string::basic_string[abi:ne180100]<0>(&v84, ".frame_idx");
      int v61 = SHIBYTE(a5->__r_.__value_.__r.__words[2]);
      if (v61 >= 0) {
        std::string::size_type size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = a5->__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v63 = (const std::string *)a5->__r_.__value_.__r.__words[0];
        if (v61 >= 0) {
          uint64_t v63 = a5;
        }
        std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)&v84;
        if (SHIBYTE(v84.__end_) < 0) {
          std::__split_buffer<std::string>::pointer first = v84.__first_;
        }
        std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v84.__end_);
        if (SHIBYTE(v84.__end_) < 0) {
          std::__split_buffer<std::string>::pointer end_high = v84.__begin_;
        }
        uint64_t v66 = (uint64_t)&v63[-1].__r_.__value_.__r.__words[2] + 7;
        uint64_t v67 = (char *)&first[-1].__r_.__value_.__r.__words[2] + 7;
        std::string::size_type v68 = size;
        while (v68 && end_high)
        {
          int v69 = *(unsigned __int8 *)(v66 + v68);
          int v70 = end_high->__r_.__value_.__s.__data_[(void)v67];
          --v68;
          std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)((char *)end_high - 1);
          if (v69 != v70) {
            goto LABEL_93;
          }
        }
        if (end_high)
        {
LABEL_93:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
          turi::sframe::create_arrays_for_writing(std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,unsigned long,std::string const&,BOOL)::$_1::operator()();
        }
        std::string::operator=((std::string *)(a1 + 136), a5);
      }
      else
      {
        uint64_t instance = turi::fileio::fixed_size_cache_manager::get_instance(v60);
        if (SHIBYTE(v84.__end_) < 0)
        {
          std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)v84.__first_, (std::string::size_type)v84.__begin_);
        }
        else
        {
          *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v84.__first_;
          v79.__r_.__value_.__r.__words[2] = (std::string::size_type)v84.__end_;
        }
        turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)&v79, &__p);
        atomic_ullong *volatile v72 = (void **)(a1 + 136);
        if (*(char *)(a1 + 159) < 0) {
          operator delete(*v72);
        }
        *(_OWORD *)atomic_ullong *volatile v72 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(a1 + 152) = *((void *)&__p.__r_.__value_.__l + 2);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
      }
      if (*(char *)(a1 + 159) < 0) {
        uint64_t v73 = *(void *)(a1 + 144);
      }
      else {
        uint64_t v73 = *(unsigned __int8 *)(a1 + 159);
      }
      std::__split_buffer<std::string>::pointer begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v84.__end_);
      if (SHIBYTE(v84.__end_) < 0) {
        std::__split_buffer<std::string>::pointer begin = v84.__begin_;
      }
      std::string::basic_string(&__p, (const std::string *)(a1 + 136), 0, v73 - (void)begin, (std::allocator<char> *)&v78);
      operator new();
    }
    uint64_t v33 = 0;
    while (1)
    {
      uint64_t v34 = (uint64_t)&v32[24 * v33];
      if (*(char *)(v34 + 23) < 0) {
        uint64_t v35 = *(void *)(v34 + 8);
      }
      else {
        uint64_t v35 = *(unsigned __int8 *)(v34 + 23);
      }
      if (v35) {
        BOOL v36 = v29 == v30;
      }
      else {
        BOOL v36 = 0;
      }
      if (v36)
      {
        unint64_t v40 = *(void *)(a1 + 48);
        if (v40 >= *(void *)(a1 + 56))
        {
          uint64_t v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 40), (long long *)v34);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 40, (long long *)v34);
          uint64_t v41 = v40 + 24;
        }
        *(void *)(a1 + 48) = v41;
      }
      else
      {
        turi::sframe::generate_valid_column_name(a1, v34, (uint64_t)&__p);
        unint64_t v38 = *(void *)(a1 + 48);
        unint64_t v37 = *(void *)(a1 + 56);
        if (v38 >= v37)
        {
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v31) >> 3);
          unint64_t v43 = v42 + 1;
          if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v31) >> 3);
          if (2 * v44 > v43) {
            unint64_t v43 = 2 * v44;
          }
          if (v44 >= 0x555555555555555) {
            unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v45 = v43;
          }
          v84.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 56);
          if (v45) {
            unint64_t v46 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 56, v45);
          }
          else {
            unint64_t v46 = 0;
          }
          unint64_t v47 = v46 + v42;
          v84.__first_ = v46;
          v84.__begin_ = v47;
          v84.__end_cap_.__value_ = &v46[v45];
          long long v48 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v47->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
          memset(&__p, 0, sizeof(__p));
          v84.__end_ = v47 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 40), &v84);
          uint64_t v49 = *(void *)(a1 + 48);
          std::__split_buffer<std::string>::~__split_buffer(&v84);
          int v50 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(void *)(a1 + 48) = v49;
          if (v50 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v38 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v38 = v39;
          *(void *)(a1 + 48) = v38 + 24;
        }
      }
      unint64_t v32 = (unsigned __int8 *)*a2;
      if (!a6) {
        goto LABEL_78;
      }
      long long v51 = &v32[24 * v33];
      unsigned __int8 v52 = v51[23];
      if ((char)v52 < 0)
      {
        if (!*((void *)v51 + 1)) {
          goto LABEL_78;
        }
      }
      else if (!v51[23])
      {
        goto LABEL_78;
      }
      uint64_t v53 = *(void *)(a1 + 48);
      uint64_t v54 = *(unsigned __int8 *)(v53 - 1);
      size_t v55 = *(void *)(v53 - 16);
      if ((v54 & 0x80u) == 0) {
        long long v56 = (unsigned __int8 *)*(unsigned __int8 *)(v53 - 1);
      }
      else {
        long long v56 = *(unsigned __int8 **)(v53 - 16);
      }
      if ((v52 & 0x80u) == 0) {
        uint64_t v57 = (unsigned __int8 *)v51[23];
      }
      else {
        uint64_t v57 = (unsigned __int8 *)*((void *)v51 + 1);
      }
      if (v56 != v57) {
        goto LABEL_109;
      }
      int v58 = (const void **)(v53 - 24);
      if ((v52 & 0x80u) == 0) {
        uint64_t v59 = &v32[24 * v33];
      }
      else {
        uint64_t v59 = *(unsigned __int8 **)v51;
      }
      if ((v54 & 0x80) != 0)
      {
        if (memcmp(*v58, v59, v55)) {
          goto LABEL_109;
        }
      }
      else if (v54)
      {
        while (*(unsigned __int8 *)v58 == *v59)
        {
          int v58 = (const void **)((char *)v58 + 1);
          ++v59;
          if (!--v54) {
            goto LABEL_78;
          }
        }
LABEL_109:
        turi::sframe::create_arrays_for_writing(std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,unsigned long,std::string const&,BOOL)::$_0::operator()();
      }
LABEL_78:
      if (++v33 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - (void)v32) >> 3)) {
        goto LABEL_79;
      }
    }
  }
  if (!cppipc::must_cancel((cppipc *)v15))
  {
    long long v16 = (file_logger *)global_logger();
    unint64_t v17 = file_logger::start_stream(v16, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "create_arrays_for_writing", 237, 1);
    int v18 = pthread_getspecific(*((void *)v17 + 74));
    if (v18 && *((unsigned char *)v18 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Opening Frame for writing to ", 29);
    }
    if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v83, a5->__r_.__value_.__l.__data_, a5->__r_.__value_.__l.__size_);
    }
    else {
      std::string v83 = *a5;
    }
    uint64_t v19 = file_logger::operator<<<std::string>((uint64_t)v17, (uint64_t)&v83);
    std::string::size_type v20 = pthread_getspecific(*(void *)(v19 + 592));
    if (v20 && *((unsigned char *)v20 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)" with ", 6);
    }
    uint64_t v21 = file_logger::operator<<<unsigned long>(v19);
    std::string::size_type v22 = pthread_getspecific(*(void *)(v21 + 592));
    if (v22 && *((unsigned char *)v22 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)" segments and ", 14);
    }
    uint64_t v23 = file_logger::operator<<<unsigned long>(v21);
    std::string v24 = pthread_getspecific(*(void *)(v23 + 592));
    if (v24 && *((unsigned char *)v24 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)" columns", 8);
    }
    size_t v25 = pthread_getspecific(*(void *)(v23 + 592));
    if (v25)
    {
      if (*((unsigned char *)v25 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(v25[2] - 24) + 16));
        uint64_t v26 = std::locale::use_facet((const std::locale *)&v84, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale((std::locale *)&v84);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v23);
        if (*(_DWORD *)(v23 + 600) == 7)
        {
          __print_back_trace();
          char v76 = __cxa_allocate_exception(8uLL);
          *char v76 = "LOG_FATAL encountered";
          __cxa_throw(v76, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    goto LABEL_31;
  }
LABEL_111:
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void sub_2240F61D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (*(char *)(v58 - 121) < 0) {
    operator delete(*(void **)(v58 - 144));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v58 - 216);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::reset[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>(&v2, a2);
}

void turi::sframe::append(turi::sframe *this@<X0>, const turi::sframe *a2@<X1>, turi::sframe *a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  v36.__r_.__value_.__s.__data_[0] = *((unsigned char *)this + 289);
  if (v36.__r_.__value_.__s.__data_[0])
  {
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    turi::sframe::append(turi::sframe const&)const::$_0::operator()();
  }
  int v4 = a2;
  v36.__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 289);
  if (v36.__r_.__value_.__s.__data_[0])
  {
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    turi::sframe::append(turi::sframe const&)const::$_1::operator()();
  }
  if (!*((unsigned char *)a2 + 288))
  {
    uint64_t v34 = a3;
    a2 = this;
LABEL_65:
    turi::sframe::sframe(v34, a2);
    return;
  }
  if (!*((unsigned char *)this + 288))
  {
    uint64_t v34 = a3;
    goto LABEL_65;
  }
  v36.__r_.__value_.__r.__words[0] = *((void *)this + 1);
  __p.__r_.__value_.__r.__words[0] = *((void *)a2 + 1);
  if (v36.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__r.__words[0])
  {
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v37.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
    turi::sframe::append(turi::sframe const&)const::$_2::operator()();
  }
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = *((void *)this + 6);
  v36.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3);
  __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  if (v36.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__r.__words[0])
  {
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    v37.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
    turi::sframe::append(turi::sframe const&)const::$_3::operator()();
  }
  if (v7 != v6)
  {
    unint64_t v8 = 0;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) <= v8) {
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      }
      std::string::size_type v9 = (long long *)(v6 + 24 * v8);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        v37.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v10;
      }
      uint64_t v11 = *((void *)v4 + 5);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)v4 + 6) - v11) >> 3) <= v8) {
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      }
      int v12 = (long long *)(v11 + 24 * v8);
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v13 = *v12;
        v36.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v36;
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
      }
      std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
      }
      if (size == v15)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v37.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v26 = memcmp(v37.__r_.__value_.__l.__data_, p_p, v37.__r_.__value_.__l.__size_) == 0;
          if (v16 < 0) {
            goto LABEL_41;
          }
        }
        else if (*((unsigned char *)&v37.__r_.__value_.__s + 23))
        {
          uint64_t v18 = HIBYTE(v37.__r_.__value_.__r.__words[2]) - 1;
          uint64_t v19 = &v37;
          do
          {
            int v21 = v19->__r_.__value_.__s.__data_[0];
            uint64_t v19 = (std::string *)((char *)v19 + 1);
            int v20 = v21;
            int v23 = p_p->__r_.__value_.__s.__data_[0];
            p_p = (std::string *)((char *)p_p + 1);
            int v22 = v23;
            BOOL v25 = v18-- != 0;
            BOOL v26 = v20 == v22;
          }
          while (v20 == v22 && v25);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_41:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v26)
            {
LABEL_70:
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v36;
              turi::sframe::append(turi::sframe const&)const::$_4::operator()((uint64_t *)&__p);
            }
            goto LABEL_42;
          }
        }
        else
        {
          BOOL v26 = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_41;
          }
        }
      }
      else
      {
        BOOL v26 = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_41;
        }
      }
      if (!v26) {
        goto LABEL_70;
      }
LABEL_42:
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      int v27 = turi::sframe::column_type(this, v8);
      LODWORD(v36.__r_.__value_.__l.__data_) = v27;
      LODWORD(__p.__r_.__value_.__l.__data_) = turi::sframe::column_type(v4, v8);
      if (v27 != LODWORD(__p.__r_.__value_.__l.__data_))
      {
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
        v37.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
        turi::sframe::append(turi::sframe const&)const::$_5::operator()();
      }
      ++v8;
      uint64_t v6 = *((void *)this + 5);
      uint64_t v7 = *((void *)this + 6);
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  }
  turi::sframe::sframe(a3, this);
  unint64_t v28 = (uint64_t *)*((void *)a3 + 23);
  if (*((uint64_t **)a3 + 24) == v28)
  {
    *((void *)a3 + 4) += *((void *)v4 + 4);
  }
  else
  {
    unint64_t v29 = 0;
    do
    {
      turi::sarray<turi::flexible_type>::append(v28[2 * v29], *(void *)(*((void *)v4 + 23) + 16 * v29), (uint64_t)&v37);
      std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>,void>((uint64_t)&v37, &v36);
      uint64_t v30 = *((void *)a3 + 23) + 16 * v29;
      long long v31 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = 0uLL;
      unint64_t v32 = *(std::__shared_weak_count **)(v30 + 8);
      *(_OWORD *)uint64_t v30 = v31;
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (v36.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36.__r_.__value_.__l.__size_);
      }
      turi::sarray<turi::flexible_type>::~sarray((uint64_t)&v37);
      ++v29;
      unint64_t v28 = (uint64_t *)*((void *)a3 + 23);
      uint64_t v33 = (uint64_t *)*((void *)a3 + 24);
    }
    while (v29 < ((char *)v33 - (char *)v28) >> 4);
    *((void *)a3 + 4) += *((void *)v4 + 4);
    while (v28 != v33)
    {
      turi::sarray<turi::flexible_type>::try_compact(*v28);
      v28 += 2;
    }
  }
}

void sub_2240F6838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void turi::sframe::append(turi::sframe const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  std::string::size_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writing", 7);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"false", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 307, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F6A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  std::string::size_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"other.writing", 13);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"false", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 308, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F6CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  std::string::size_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index_info.version", 18);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.index_info.version", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 315, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F6F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_3::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  std::string::size_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_names().size()", 21);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.column_names().size()", 27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 317, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_3::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F71E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_4::operator()(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
  long long v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Assertion failed: (", 19);
  std::string::size_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  int v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"column_name(i)", 14);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"other.column_name(i)", 20);
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  int v10 = *(char *)(*a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = *a1;
  }
  else {
    uint64_t v11 = *(void *)*a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(*a1 + 23);
  }
  else {
    uint64_t v12 = *(void *)(*a1 + 8);
  }
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v24) = 32;
  std::string::size_type v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v24, 1);
  char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v24) = 32;
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v24, 1);
  uint64_t v17 = a1[1];
  int v18 = *(char *)(v17 + 23);
  if (v18 >= 0) {
    uint64_t v19 = a1[1];
  }
  else {
    uint64_t v19 = *(void *)v17;
  }
  if (v18 >= 0) {
    uint64_t v20 = *(unsigned __int8 *)(v17 + 23);
  }
  else {
    uint64_t v20 = *(void *)(v17 + 8);
  }
  int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v19, v20);
  int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v22);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v23 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 319, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v23, (uint64_t)&__p);
    if (v26 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string v24 = v27;
  turi::sframe::append(turi::sframe const&)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F74A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::append(turi::sframe const&)const::$_5::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  std::string::size_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)column_type(i)", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)other.column_type(i)", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 320, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::sframe::append(turi::sframe const&)::$_5::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F7734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::get_reader(turi::sframe *this)
{
  long long v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::string::size_type v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "get_reader", 340, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
      uint64_t v7 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(&v9);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  assert_msg(*((unsigned char *)this + 289) == 0, "SFrame not opened for reading");
  operator new();
}

{
  int *v2;
  file_logger *v3;
  file_logger *started;
  void *v5;
  void *v6;
  const std::locale::facet *v7;
  void *exception;
  std::locale v9;

  long long v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::string::size_type v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "get_reader", 349, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
      uint64_t v7 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(&v9);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  assert_msg(*((unsigned char *)this + 289) == 0, "SFrame not opened for reading");
  operator new();
}

void sub_2240F7A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_2240F7CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::sframe::get_reader(uint64_t a1)
{
  long long v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::string::size_type v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "get_reader", 359, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
      uint64_t v7 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(&v9);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 288), "Invalid SFrame");
  assert_msg(*(unsigned char *)(a1 + 289) == 0, "SFrame not opened for reading");
  operator new();
}

void sub_2240F7F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::string::size_type v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy", 442, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v10);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 248)) {
    BOOL v8 = *(unsigned char *)(a1 + 249) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,unsigned long)::{lambda(void)#1}::operator()();
  }
  turi::sarray<turi::flexible_type>::get_reader(a1);
}

void sub_2240F82BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16)
{
}

uint64_t turi::sframe::select_column@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5 = a2;
  if (*(void *)(this + 24) <= a2)
  {
    int v4 = &v5;
    turi::sframe::select_column(unsigned long)const::$_0::operator()(&v4);
  }
  long long v3 = *(_OWORD *)(*(void *)(this + 184) + 16 * a2);
  *a3 = v3;
  if (*((void *)&v3 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v3 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t turi::sframe::select_column@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(void *)(a1 + 40), *(void *)(a1 + 48), a2);
  if (v5 == *(void *)(a1 + 48)) {
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  return turi::sframe::select_column(a1, 0xAAAAAAAAAAAAAAABLL * ((v5 - *(void *)(a1 + 40)) >> 3), a3);
}

void turi::sframe::select_columns(uint64_t *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "select_columns", 401, 1);
    std::locale v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    std::locale v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(&v16, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  v16.__locale_ = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v12 = *a2;
  long long v13 = a2[1];
  if (*a2 != v13)
  {
    do
    {
      uint64_t v14 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a1[5], a1[6], (unsigned __int8 **)v12);
      if (v14 == a1[6])
      {
        uint64_t v19 = v12;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::push_back[abi:ne180100]((uint64_t *)&v16, (long long *)(a1[23] - 0x5555555555555550 * ((unint64_t)(v14 - a1[5]) >> 3)));
      v12 += 3;
    }
    while (v12 != v13);
  }
  turi::sframe::sframe(a3, (uint64_t **)&v16, a2, 1);
  uint64_t v20 = &v16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_2240F8628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void turi::sframe::add_column(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&long long v32 = *MEMORY[0x263EF8340];
  BOOL v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::locale v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "add_column", 413, 1);
    uint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        long long v13 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*(void *)(a1 + 24))
  {
    if (*(unsigned char *)(a1 + 288)) {
      uint64_t v14 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v16 = *(void *)a2;
    if (*(unsigned char *)(*(void *)a2 + 248)
      && (uint64_t v17 = *(uint64_t **)(v16 + 80), (v18 = *(void *)(v16 + 88) - (void)v17) != 0))
    {
      uint64_t v19 = 0;
      unint64_t v20 = v18 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      do
      {
        uint64_t v21 = *v17++;
        v19 += v21;
        --v20;
      }
      while (v20);
    }
    else
    {
      uint64_t v19 = 0;
    }
    if (v14 != v19) {
      turi::sframe::add_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)const::$_0::operator()();
    }
    v27.__locale_ = 0;
    char locale = 0;
    v29[0] = 0;
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(&v27, *(void **)(a1 + 184), *(void **)(a1 + 192), (uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 4);
    memset(&v26, 0, sizeof(v26));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, *(long long **)(a1 + 40), *(long long **)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::push_back[abi:ne180100]((uint64_t *)&v27, a2);
    if (turi::sframe::contains_column(a1, (unsigned __int8 **)a3))
    {
      v31.__r_.__value_.__r.__words[0] = a3;
      turi::sframe::add_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)const::$_1::operator()();
    }
    turi::sframe::generate_valid_column_name(a1, a3, (uint64_t)&v31);
    std::string::size_type size = (_OWORD *)v26.__r_.__value_.__l.__size_;
    if (v26.__r_.__value_.__l.__size_ >= v26.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v26, (long long *)&v31);
    }
    else
    {
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v26.__r_.__value_.__l.__size_, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v23 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        *(void *)(v26.__r_.__value_.__l.__size_ + 16) = *((void *)&v31.__r_.__value_.__l + 2);
        *std::string::size_type size = v23;
      }
      std::string::size_type v24 = (std::string::size_type)size + 24;
    }
    v26.__r_.__value_.__l.__size_ = v24;
    turi::sframe::sframe(a4, (uint64_t **)&v27, (const void ***)&v26, 1);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  }
  else
  {
    std::string::size_type v15 = *((void *)a2 + 1);
    v31.__r_.__value_.__r.__words[0] = *(void *)a2;
    v31.__r_.__value_.__l.__size_ = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    v27.__locale_ = 0;
    char locale = 0;
    v29[0] = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
    v26.__r_.__value_.__s.__data_[8] = 0;
    v27.__locale_ = (std::locale::__imp *)operator new(0x10uLL);
    char locale = v27.__locale_;
    v29[0] = (char *)v27.__locale_ + 16;
    char locale = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>((uint64_t)v29, &v31, &v31.__r_.__value_.__r.__words[2], v27.__locale_);
    if (v31.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31.__r_.__value_.__l.__size_);
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v31 = *(std::string *)a3;
    }
    memset(&v26, 0, sizeof(v26));
    v29[1] = &v26;
    char v30 = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v26.__r_.__value_.__l.__size_ = v26.__r_.__value_.__r.__words[0];
    v26.__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[0] + 24;
    v26.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v26.__r_.__value_.__r.__words[2], (long long *)&v31, &v32, (std::string *)v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    turi::sframe::sframe(a4, (uint64_t **)&v27, (const void ***)&v26, 1);
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  }
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_2240F8AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::locale *a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, std::locale **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::string __p = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a9 = &a12;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

std::string *turi::sframe::set_column_name(uint64_t a1, unint64_t a2, std::string *__str)
{
  if (*(void *)(a1 + 24) <= a2) {
    turi::sframe::set_column_name(unsigned long,std::string const&)::$_0::operator()();
  }
  long long v3 = (std::string *)(*(void *)(a1 + 40) + 24 * a2);
  return std::string::operator=(v3, __str);
}

void turi::sframe::set_column_name(unsigned long,std::string const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"i", 1);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::locale v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::locale v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 470, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::sframe::set_column_name(unsigned long,std::string const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F8D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::remove_column(turi::sframe *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v13.__r_.__value_.__r.__words[0] = a2;
  uint64_t v18 = (std::string *)*((void *)this + 3);
  if ((unint64_t)v18 <= a2)
  {
    uint64_t v14 = &v13;
    char v15 = (long long *)&v18;
    turi::sframe::remove_column(unsigned long)const::$_0::operator()();
  }
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(&v14, *((void **)this + 23), *((void **)this + 24), (uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 4);
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *((long long **)this + 5), *((long long **)this + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3));
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>((uint64_t)&v17, (long long *)&v14->__r_.__value_.__r.__words[2 * a2 + 2], v15, (uint64_t)v14 + 16 * a2);
  uint64_t v7 = v6;
  for (uint64_t i = v15; i != v7; --i)
  {
    std::locale v9 = (std::__shared_weak_count *)*((void *)i - 1);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  char v15 = v7;
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v17, (long long *)(v13.__r_.__value_.__r.__words[0] + 24 * a2 + 24), (long long *)v13.__r_.__value_.__l.__size_, v13.__r_.__value_.__r.__words[0] + 24 * a2);
  std::string::size_type v11 = v10;
  for (std::string::size_type j = v13.__r_.__value_.__l.__size_; j != v11; j -= 24)
  {
    if (*(char *)(j - 1) < 0) {
      operator delete(*(void **)(j - 24));
    }
  }
  v13.__r_.__value_.__l.__size_ = v11;
  turi::sframe::sframe(a3, (uint64_t **)&v14, (const void ***)&v13, 1);
  uint64_t v18 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void turi::sframe::remove_column(unsigned long)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"i", 1);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::locale v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  std::string::size_type v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 475, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string v13 = v16;
  turi::sframe::remove_column(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F91A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::swap_columns(turi::sframe *this@<X0>, std::string::size_type a2@<X1>, std::string::size_type a3@<X2>, uint64_t a4@<X8>)
{
  v16.__r_.__value_.__r.__words[0] = a2;
  uint64_t v5 = (void **)*((void *)this + 3);
  unint64_t v20 = (std::string *)v5;
  if ((unint64_t)v5 <= a2)
  {
    char v17 = &v16;
    uint64_t v18 = (void ***)&v20;
    turi::sframe::swap_columns(unsigned long,unsigned long)const::$_0::operator()();
  }
  v16.__r_.__value_.__r.__words[0] = a3;
  unint64_t v20 = (std::string *)v5;
  if ((unint64_t)v5 <= a3)
  {
    char v17 = &v16;
    uint64_t v18 = (void ***)&v20;
    turi::sframe::swap_columns(unsigned long,unsigned long)const::$_1::operator()();
  }
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(&v17, *((void **)this + 23), *((void **)this + 24), (uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 4);
  memset(&v16, 0, sizeof(v16));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *((long long **)this + 5), *((long long **)this + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3));
  std::locale v9 = (uint64_t *)v17;
  long long v10 = *((_OWORD *)&v17->__r_.__value_.__l.__data_ + a2);
  *((_OWORD *)&v17->__r_.__value_.__l.__data_ + a2) = *((_OWORD *)&v17->__r_.__value_.__l.__data_ + a3);
  *(_OWORD *)&v9[2 * a3] = v10;
  std::string::size_type v11 = v16.__r_.__value_.__r.__words[0] + 24 * a2;
  std::string::size_type v12 = v16.__r_.__value_.__r.__words[0] + 24 * a3;
  uint64_t v13 = *(void *)(v11 + 16);
  long long v14 = *(_OWORD *)v11;
  uint64_t v15 = *(void *)(v12 + 16);
  *(_OWORD *)std::string::size_type v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = v15;
  *(_OWORD *)std::string::size_type v12 = v14;
  *(void *)(v12 + 16) = v13;
  turi::sframe::sframe(a4, (uint64_t **)&v17, (const void ***)&v16, 1);
  unint64_t v20 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void turi::sframe::swap_columns(unsigned long,unsigned long)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_1", 8);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::locale v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  std::string::size_type v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 485, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sframe::swap_columns(unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F95AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::swap_columns(unsigned long,unsigned long)const::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"column_2", 8);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  std::locale v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  std::string::size_type v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 486, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::sframe::swap_columns(unsigned long,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F9840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::replace_column(uint64_t a1@<X0>, void *a2@<X1>, std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!turi::sframe::contains_column(a1, (unsigned __int8 **)a3)) {
    turi::sframe::replace_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)const::$_0::operator()();
  }
  std::operator+<char>();
  BOOL v8 = std::string::append(&v20, "__");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  while (turi::sframe::contains_column(a1, (unsigned __int8 **)&v19))
    std::string::append(&v19, "__");
  uint64_t v10 = a2[1];
  *(void *)&long long v18 = *a2;
  *((void *)&v18 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  turi::sframe::add_column(a1, &v18, (uint64_t)&v19, (uint64_t)a4);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  uint64_t v11 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a4[5], a4[6], (unsigned __int8 **)a3);
  uint64_t v12 = a4[6];
  if (v11 == v12)
  {
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  uint64_t v13 = v11;
  uint64_t v14 = a4[5];
  uint64_t v15 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v14, v12, (unsigned __int8 **)&v19);
  if (v15 == a4[6])
  {
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
  }
  std::string::size_type v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
  std::string::size_type v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - a4[5]) >> 3);
  turi::sframe::swap_columns((turi::sframe *)a4, v16, v17, (uint64_t)&v20);
  turi::sframe::operator=((uint64_t)a4, (uint64_t)&v20);
  turi::sframe::~sframe((turi::sframe *)&v20);
  turi::sframe::remove_column((turi::sframe *)a4, v17, (uint64_t)&v20);
  turi::sframe::operator=((uint64_t)a4, (uint64_t)&v20);
  turi::sframe::~sframe((turi::sframe *)&v20);
  turi::sframe::set_column_name((uint64_t)a4, v16, a3);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_2240F9B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  turi::sframe::~sframe((turi::sframe *)&a18);
  turi::sframe::~sframe(v23);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::sframe::replace_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  long long v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"contains_column(column_name)", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 499, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sframe::replace_column(std::shared_ptr<turi::sarray<turi::flexible_type>>,std::string const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240F9CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::sframe::set_num_segments(turi::sframe *this, uint64_t a2)
{
  int v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "set_num_segments", 520, 1);
    char v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    BOOL v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        long long v9 = std::locale::use_facet((const std::locale *)&v15, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale((std::locale *)&v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  assert_msg(*((unsigned char *)this + 289) == 0, "SFrame not opened for writing");
  if (a2 && (*(uint64_t (**)(turi::sframe *))(*(void *)this + 24))(this) != a2)
  {
    uint64_t v11 = *((void *)this + 26);
    uint64_t v10 = (char *)this + 208;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
    if (*(char *)(v12 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
    }
    else {
      std::string v15 = *(std::string *)v12;
    }
    (*(void (**)(void))(**(void **)v10 + 32))();
    operator new();
  }
  return a2 != 0;
}

void sub_2240FA1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18.__locale_);
  }
  _Unwind_Resume(exception_object);
}

void turi::sframe::get_output_iterator(size_t *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  assert_msg(*((unsigned __int8 *)this + 289), "SFrame not opened for writing");
  uint64_t v6 = (*(uint64_t (**)(size_t *))(*this + 24))(this) > a2
    || (*(uint64_t (**)(size_t *))(*this + 24))(this) == 0;
  assert_msg(v6, "Invalid segment ID");
  std::vector<turi::flex_type_enum>::vector(&v21, this[3]);
  if (this[3])
  {
    unint64_t v7 = 0;
    do
    {
      char v8 = turi::sframe::column_type((turi::sframe *)this, v7);
      *((unsigned char *)v21 + v7++) = v8;
    }
    while (v7 < this[3]);
  }
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v18, v21, (uint64_t)v22, v22 - (unsigned char *)v21);
  *(void *)&long long v20 = this;
  *((void *)&v20 + 1) = a2;
  unint64_t v28 = 0;
  long long v9 = (char *)operator new(0x30uLL);
  *(void *)long long v9 = &unk_26D76C608;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)v18;
  *((void *)v9 + 3) = v19;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  *((_OWORD *)v9 + 2) = v20;
  unint64_t v28 = v9;
  v15[1] = 0;
  uint64_t v16 = 0;
  v15[0] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v15, v21, (uint64_t)v22, v22 - (unsigned char *)v21);
  *(void *)&long long v17 = this;
  *((void *)&v17 + 1) = a2;
  std::string v26 = 0;
  uint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v10 = &unk_26D76C698;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)v15;
  *((void *)v10 + 3) = v16;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  *((_OWORD *)v10 + 2) = v17;
  std::string v26 = v10;
  __p[1] = 0;
  uint64_t v13 = 0;
  __p[0] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(__p, v21, (uint64_t)v22, v22 - (unsigned char *)v21);
  *(void *)&long long v14 = this;
  *((void *)&v14 + 1) = a2;
  std::string::size_type v24 = 0;
  uint64_t v11 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v11 = &unk_26D76C728;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)__p;
  *((void *)v11 + 3) = v13;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  *((_OWORD *)v11 + 2) = v14;
  std::string::size_type v24 = v11;
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(a3, (uint64_t)v27, (uint64_t)v25, (uint64_t)v23);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v23);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v25);
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v27);
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }
}

void sub_2240FA524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)(v28 - 152));
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100]((void *)(v28 - 120));
  if (a15) {
    operator delete(a15);
  }
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100]((void *)(v28 - 88));
  if (a21) {
    operator delete(a21);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::flush_write_to_segment(turi::sframe *this)
{
  uint64_t v1 = *((void *)this + 26);
  if (!v1) {
    turi::sframe::flush_write_to_segment(unsigned long)::$_0::operator()();
  }
  long long v2 = *(uint64_t (**)(void))(*(void *)v1 + 112);
  return v2();
}

void turi::sframe::close(turi::sframe *this)
{
  (*(void (**)(void))(**((void **)this + 26) + 40))(*((void *)this + 26));
  (*(void (**)(void))(**((void **)this + 26) + 48))(*((void *)this + 26));
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 26) + 32))(*((void *)this + 26));
  uint64_t v3 = v2;
  if (*(char *)(v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)v2;
    v39.__r_.__value_.__r.__words[2] = *(void *)(v2 + 16);
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v4;
  }
  long long v40 = *(_OWORD *)(v3 + 24);
  memset(&v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, *(long long **)(v3 + 40), *(long long **)(v3 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v3 + 48) - *(void *)(v3 + 40)) >> 3));
  memset(&v42, 0, sizeof(v42));
  std::vector<turi::index_file_information>::__init_with_size[abi:ne180100]<turi::index_file_information*,turi::index_file_information*>(&v42, *(turi::index_file_information **)(v3 + 64), *(turi::index_file_information **)(v3 + 72), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v3 + 72) - *(void *)(v3 + 64)) >> 4));
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "close", 635, 1);
    char v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    long long v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(&v43, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v43);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  uint64_t v11 = (turi::fileio::file_handle_pool *)assert_msg(*((unsigned __int8 *)this + 289), "SFrame not opened for writing");
  uint64_t v12 = *((void *)this + 3);
  *((void *)this + 4) = 0;
  if (v12)
  {
    uint64_t v13 = *(void *)((*(uint64_t (**)(void))(**((void **)this + 26) + 32))(*((void *)this + 26)) + 64);
    long long v14 = *(uint64_t **)(v13 + 72);
    std::string v15 = *(uint64_t **)(v13 + 80);
    if (v14 != v15)
    {
      uint64_t v16 = *((void *)this + 4);
      do
      {
        uint64_t v17 = *v14++;
        v16 += v17;
        *((void *)this + 4) = v16;
      }
      while (v14 != v15);
    }
    std::vector<std::string>::resize((std::vector<std::string> *)((char *)this + 64), *((void *)this + 3));
    if (*((void *)this + 3))
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      do
      {
        uint64_t v11 = (turi::fileio::file_handle_pool *)std::string::operator=((std::string *)(*((void *)this + 8) + v18), (const std::string *)(v42.__r_.__value_.__r.__words[0] + v19));
        ++v20;
        v19 += 144;
        v18 += 24;
      }
      while (v20 < *((void *)this + 3));
    }
  }
  std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t instance = turi::fileio::file_handle_pool::get_instance(v11);
    turi::fileio::file_handle_pool::register_file((uint64_t)instance, &v39, (uint64_t *)&v38);
    unint64_t v23 = *((void *)this + 22);
    std::string::size_type v24 = (_OWORD *)*((void *)this + 21);
    if ((unint64_t)v24 >= v23)
    {
      uint64_t v25 = *((void *)this + 20);
      uint64_t v26 = ((uint64_t)v24 - v25) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v23 - v25;
      if (v28 >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      unint64_t v47 = (char *)this + 176;
      char v30 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)this + 176, v29);
      std::string v31 = (_OWORD *)((char *)v30 + 16 * v26);
      v43.__locale_ = v30;
      unint64_t v44 = v31;
      unint64_t v46 = (char *)v30 + 16 * v32;
      *std::string v31 = v38;
      long long v38 = 0uLL;
      unint64_t v45 = v31 + 1;
      std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__swap_out_circular_buffer((uint64_t *)this + 20, &v43);
      uint64_t v33 = *((void *)this + 21);
      std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&v43.__locale_);
      uint64_t v34 = (std::__shared_weak_count *)*((void *)&v38 + 1);
      *((void *)this + 21) = v33;
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
    }
    else
    {
      *std::string::size_type v24 = v38;
      *((void *)this + 21) = v24 + 1;
    }
  }
  uint64_t v35 = (std::__shared_weak_count *)*((void *)this + 27);
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*((char *)this + 159) < 0) {
    std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)this + 17), *((void *)this + 18));
  }
  else {
    std::string v37 = *(std::string *)((char *)this + 136);
  }
  turi::write_sframe_index_file((uint64_t)&v37, (void *)this + 1);
}

void sub_2240FAC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)(v43 - 128));
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  turi::group_index_file_information::~group_index_file_information(&a38);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__append(a1, v5);
  }
}

void turi::sframe::save(turi *a1, uint64_t a2)
{
  if (!*((unsigned char *)a1 + 288)) {
    turi::sframe::save(std::string)const::$_0::operator()();
  }
  if (*((unsigned char *)a1 + 289)) {
    turi::sframe::save(std::string)const::$_1::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v15, ".frame_idx");
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v5 = *(const std::string::value_type **)a2;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if (v4 < 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = (void **)v15[0];
  if ((v16 & 0x80u) == 0) {
    unint64_t v7 = v15;
  }
  unint64_t v8 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v8 = (unint64_t)v15[1];
  }
  long long v9 = v5 - 1;
  uint64_t v10 = (char *)v7 - 1;
  while (v6 && v8)
  {
    int v11 = v9[v6];
    int v12 = v10[v8];
    --v6;
    --v8;
    if (v11 != v12) {
      goto LABEL_16;
    }
  }
  if (!v8)
  {
    if (v4 < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    turi::sframe_save(a1, (uint64_t)&__p);
  }
LABEL_16:
  long long v14 = v15;
  turi::sframe::save(std::string)const::$_2::operator()();
}

void turi::sframe::save(std::string)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inited", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 721, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sframe::save(std::string)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240FAFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::save(std::string)const::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(writing)", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 722, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sframe::save(std::string)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240FB1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::save(turi::sframe *this, turi::oarchive *a2)
{
  turi::oarchive::get_prefix(a2, (unsigned __int8 *)v8);
  if ((v9 & 0x80u) == 0) {
    size_t v3 = v9;
  }
  else {
    size_t v3 = (size_t)v8[1];
  }
  int v4 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v3 + 10);
  if (v7 < 0) {
    int v4 = (void **)__p[0];
  }
  if (v3)
  {
    if ((v9 & 0x80u) == 0) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v5 = (void **)v8[0];
    }
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, ".frame_idx");
  turi::sframe::save(this, (uint64_t)__p);
}

void sub_2240FB3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void turi::sframe::load(turi::sframe *this, turi::iarchive *a2)
{
  turi::iarchive::get_prefix(a2, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v8.__r_.__value_.__l.__size_;
  }
  size_t v3 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 10);
  if (v6 < 0) {
    size_t v3 = (void **)__p[0];
  }
  if (size)
  {
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v4 = &v8;
    }
    else {
      int v4 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    memmove(v3, v4, size);
  }
  strcpy((char *)v3 + size, ".frame_idx");
  turi::read_sframe_index_file((uint64_t)__p, (uint64_t)v7);
}

void sub_2240FB550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32)
{
  turi::sframe_index_file_information::~sframe_index_file_information(&a10);
  turi::sframe_index_file_information::~sframe_index_file_information(&a32);
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  _Unwind_Resume(a1);
}

void turi::sframe::open_for_read(uint64_t a1, const turi::sframe_index_file_information *a2)
{
  int v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "open_for_read", 216, 1);
    char v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    std::string v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        unsigned __int8 v9 = std::locale::use_facet(&v16, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned char *)(a1 + 288) == 0, "Attempting to init an SFrame which has already been inited.");
  *(unsigned char *)(a1 + 288) = 1;
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v11, a2);
  turi::sframe::create_arrays_for_reading(a1, v11);
  if (v15 < 0) {
    operator delete(v14[3]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14, v14[1]);
  v16.__locale_ = (std::locale::__imp *)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  v16.__locale_ = (std::locale::__imp *)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_2240FB794(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::delete_files_on_destruction(turi::sframe *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 23);
  size_t v3 = (uint64_t *)*((void *)this + 24);
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    v2 += 2;
    turi::sarray<turi::flexible_type>::delete_files_on_destruction(v4);
  }
  unint64_t v5 = (uint64_t *)*((void *)this + 20);
  for (uint64_t i = (uint64_t *)*((void *)this + 21); v5 != i; *(unsigned char *)(v7 + 24) = 1)
  {
    uint64_t v7 = *v5;
    v5 += 2;
  }
  return 1;
}

void turi::sarray<turi::flexible_type>::delete_files_on_destruction(uint64_t a1)
{
  uint64_t v1 = *(long long ***)(a1 + 256);
  uint64_t v2 = *(long long ***)(a1 + 264);
  if (v1 != v2)
  {
    size_t v3 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v4 = (int *)global_logger();
      if (v4[169] <= 2)
      {
        if (cppipc::must_cancel((cppipc *)v4)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        unint64_t v5 = (file_logger *)global_logger();
        started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "delete_files_on_destruction", 705, 1);
        uint64_t v7 = pthread_getspecific(*((void *)started + 74));
        if (v7 && *((unsigned char *)v7 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Will delete data file: ", 23);
        }
        std::string v8 = *v1;
        if (*((char *)*v1 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
        }
        else
        {
          long long v9 = *v8;
          __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
        }
        uint64_t v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
        int v11 = pthread_getspecific(*(void *)(v10 + 592));
        if (v11)
        {
          if (*((unsigned char *)v11 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
            uint64_t v12 = std::locale::use_facet(&v16, v3);
            ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
            std::locale::~locale(&v16);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v10);
            if (*(_DWORD *)(v10 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v13 = *v1;
      v1 += 2;
      *((unsigned char *)v13 + 24) = 1;
    }
    while (v1 != v2);
  }
}

void sub_2240FBA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sframe::num_segments(turi::sframe *this)
{
  assert_msg(*((unsigned __int8 *)this + 288), "Invalid SFrame");
  if (*((unsigned char *)this + 289))
  {
    uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 26) + 120);
    return v2();
  }
  if (*((void *)this + 3))
  {
    uint64_t v2 = *(uint64_t (**)(void))(***((void ***)this + 23) + 24);
    return v2();
  }
  return 0;
}

void std::vector<turi::index_file_information>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 144;
        std::allocator<turi::index_file_information>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

turi::sframe_reader *turi::sframe_reader::sframe_reader(turi::sframe_reader *this)
{
  *(void *)this = &unk_26D76C7A8;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = -1;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = (char *)this + 104;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  int v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 168), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 29) = 128;
  return this;
}

void sub_2240FBC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 144);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  turi::sframe_index_file_information::~sframe_index_file_information(v11);
  _Unwind_Resume(a1);
}

std::string *std::vector<turi::index_file_information>::__init_with_size[abi:ne180100]<turi::index_file_information*,turi::index_file_information*>(std::string *result, turi::index_file_information *a2, turi::index_file_information *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<turi::index_file_information>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::index_file_information>,turi::index_file_information*,turi::index_file_information*,turi::index_file_information*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2240FBCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::index_file_information>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::index_file_information>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::index_file_information>,turi::index_file_information*,turi::index_file_information*,turi::index_file_information*>(uint64_t a1, turi::index_file_information *a2, turi::index_file_information *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  int v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      turi::index_file_information::index_file_information(v4, v6);
      char v6 = (const turi::index_file_information *)((char *)v6 + 144);
      uint64_t v4 = v11 + 6;
      v11 += 6;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2240FBDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::index_file_information>,turi::index_file_information*>::operator()[abi:ne180100](uint64_t *a1)
{
  int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 144;
      std::allocator<turi::index_file_information>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    char v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_2240FBFCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2240FBFD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<turi::flexible_type> const*,std::allocator<std::vector<turi::flexible_type> const*>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2240FC038(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::group_index_file_information>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::group_index_file_information>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 88);
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  char v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,turi::group_index_file_information>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::group_index_file_information>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::group_index_file_information>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = (char *)operator new(0x90uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 17) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2240FC258(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::group_index_file_information>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::group_index_file_information>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void turi::sarray<turi::flexible_type>::get_index_file(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inited", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 341, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::sarray<turi::flexible_type>::get_index_file(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240FC3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2240FC530(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::sarray_group_format_writer_v2<turi::flexible_type> *,std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::__shared_ptr_default_delete<turi::sarray_group_format_writer<turi::flexible_type>,turi::sarray_group_format_writer_v2<turi::flexible_type>>,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray_group_format_writer_v2<turi::flexible_type> *,std::shared_ptr<turi::sarray_group_format_writer<turi::flexible_type>>::__shared_ptr_default_delete<turi::sarray_group_format_writer<turi::flexible_type>,turi::sarray_group_format_writer_v2<turi::flexible_type>>,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2240FC604(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D759AA8;
  turi::sarray<turi::flexible_type>::sarray((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2240FC660(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2240FC6D4(_Unwind_Exception *a1)
{
  turi::sarray<turi::flexible_type>::~sarray(v1);
  _Unwind_Resume(a1);
}

void turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"array.is_opened_for_read()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 443, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy<turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,void>(turi::sarray<turi::flexible_type> &,std::insert_iterator<std::vector<turi::flexible_type>>,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240FC7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2240FC950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76C608;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76C608;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26D76C608;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_2240FCA98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::__clone(uint64_t a1, __n128 *a2)
{
  a2->n128_u64[0] = (unint64_t)&unk_26D76C608;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&a2->n128_u64[1], *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_0,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_0>,void ()(std::vector<turi::flexible_type> const&)>::target_type()
{
}

void turi::sframe::get_output_iterator(unsigned long)::$_0::operator()(unsigned __int8 **a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v6 = (v4 - *a2) >> 4;
  char v7 = *a1;
  if (v6 != a1[1] - *a1)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
    uint64_t v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158[16], (uint64_t)"Can not write to SFrame, got the wrong number of columns. ", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"Expected: ", 10);
    long long v138 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)" columns. Got: ", 15);
    int v139 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)" columns.", 9);
    v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
    turi::sframe::get_output_iterator(unsigned long)::$_0::operator() const(std::vector<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
  }
  uint64_t v8 = a1[3];
  if (v4 != v5)
  {
    if (v6 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v6;
    }
    uint64_t v10 = (unsigned __int8 *)(v5 + 12);
    do
    {
      int v12 = *v10;
      v10 += 16;
      int v11 = v12;
      if (v12 != 7)
      {
        int v13 = *v7;
        if (v13 != 7 && v11 != v13)
        {
          std::vector<turi::flexible_type>::vector(v154, v6);
          uint64_t v17 = *a2;
          if (a2[1] == *a2)
          {
LABEL_371:
            (*(void (**)(void, unsigned __int8 *, void *))(**((void **)v8 + 26) + 64))(*((void *)v8 + 26), a1[4], v154);
            *(void *)v158 = v154;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
            return;
          }
          unint64_t v18 = 0;
          while (1)
          {
            uint64_t v19 = (turi::flexible_type_impl *)(v17 + 16 * v18);
            uint64_t v20 = *((char *)v19 + 12);
            if (v20 == 7 || (uint64_t v25 = (char)(*a1)[v18], v25 == 7) || (v26 = (*a1)[v18], v26 == v20))
            {
              if (v17 != v154[0])
              {
                uint64_t v21 = v154[0] + 16 * v18;
                switch(*(unsigned char *)(v21 + 12))
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)v21;
                      if (!*(void *)v21) {
                        goto LABEL_62;
                      }
                      if (*((char *)v22 + 31) < 0) {
                        operator delete((void *)v22[1]);
                      }
                      atomic_ullong *volatile v23 = v22;
                      uint64_t v24 = 0x1012C404EF22A49;
                      goto LABEL_61;
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v37 = *(atomic_ullong *volatile *)v21;
                      if (!*(void *)v21) {
                        goto LABEL_62;
                      }
                      long long v38 = (void *)v37[1];
                      if (v38)
                      {
                        v37[2] = (atomic_ullong)v38;
                        operator delete(v38);
                      }
                      atomic_ullong *volatile v23 = v37;
                      uint64_t v24 = 0x1080C409938AC02;
                      goto LABEL_61;
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)v21;
                      if (!*(void *)v21) {
                        goto LABEL_62;
                      }
                      *(void *)v158 = v31 + 1;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
                      goto LABEL_56;
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)v21;
                      if (!*(void *)v21) {
                        goto LABEL_62;
                      }
                      *(void *)v158 = v31 + 1;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
LABEL_56:
                      atomic_ullong *volatile v23 = v31;
                      uint64_t v24 = 0x1020C405E66F15BLL;
                      goto LABEL_61;
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v21;
                      if (!*(void *)v21) {
                        goto LABEL_62;
                      }
                      boost::detail::shared_count::~shared_count((atomic_uint **)v39 + 2);
                      atomic_ullong *volatile v23 = v39;
                      unsigned int v36 = -235920773;
                      goto LABEL_60;
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v32 = *(atomic_ullong *volatile *)v21;
                      if (*(void *)v21)
                      {
                        uint64_t v33 = (void *)v32[6];
                        if (v33)
                        {
                          v32[7] = (atomic_ullong)v33;
                          operator delete(v33);
                        }
                        uint64_t v34 = (void *)v32[3];
                        if (v34)
                        {
                          v32[4] = (atomic_ullong)v34;
                          operator delete(v34);
                        }
                        uint64_t v35 = (std::__shared_weak_count *)v32[2];
                        if (v35) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
                        }
                        atomic_ullong *volatile v23 = v32;
                        unsigned int v36 = 2071181815;
LABEL_60:
                        uint64_t v24 = v36 | 0x1030C4000000000;
LABEL_61:
                        MEMORY[0x22A614FA0](v23, v24);
                      }
LABEL_62:
                      *(void *)uint64_t v21 = 0;
                    }
                    break;
                  default:
                    break;
                }
                uint64_t v40 = *(void *)v19;
                *(void *)(v21 + 5) = *(void *)((char *)v19 + 5);
                *(void *)uint64_t v21 = v40;
                LODWORD(v40) = *((unsigned __int8 *)v19 + 12);
                *(unsigned char *)(v21 + 12) = v40;
                switch((int)v40)
                {
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 8:
                  case 9:
                    atomic_fetch_add(*(atomic_ullong *volatile *)v21, 1uLL);
                    break;
                  default:
                    break;
                }
              }
            }
            else
            {
              if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * *((char *)v19 + 12) + v25])
              {
                switch(*((unsigned char *)v19 + 12))
                {
                  case 0:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    goto LABEL_379;
                  case 1:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
                    std::ostream::operator<<();
                    std::stringbuf::str();
LABEL_379:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v158);
                    goto LABEL_390;
                  case 2:
                    uint64_t v140 = *(void *)v19;
                    if (*(char *)(*(void *)v19 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)(v140 + 8), *(void *)(v140 + 16));
                    }
                    else
                    {
                      long long v141 = *(_OWORD *)(v140 + 8);
                      v155.__r_.__value_.__r.__words[2] = *(void *)(v140 + 24);
                      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v141;
                    }
                    goto LABEL_390;
                  case 3:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v19 + 8));
                    goto LABEL_390;
                  case 4:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (uint64_t *)(*(void *)v19 + 8));
                    goto LABEL_390;
                  case 5:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v19 + 8));
                    goto LABEL_390;
                  case 6:
                    turi::flexible_type_impl::get_string_visitor::operator()(v19, &v155);
                    goto LABEL_390;
                  case 8:
                    turi::flexible_type_impl::get_string_visitor::operator()();
                    goto LABEL_390;
                  case 9:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v158, (void *)(*(void *)v19 + 8));
LABEL_390:
                    v142 = std::string::insert(&v155, 0, "Cannot convert ");
                    long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
                    __p.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v143;
                    v142->__r_.__value_.__l.__size_ = 0;
                    v142->__r_.__value_.__r.__words[2] = 0;
                    v142->__r_.__value_.__r.__words[0] = 0;
                    v144 = std::string::append(&__p, " to ");
                    long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
                    v157.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v145;
                    v144->__r_.__value_.__l.__size_ = 0;
                    v144->__r_.__value_.__r.__words[2] = 0;
                    v144->__r_.__value_.__r.__words[0] = 0;
                    unint64_t v146 = (char)(*a1)[v18];
                    if (v146 > 9) {
                      v147 = "undefined";
                    }
                    else {
                      v147 = off_2646D6E90[v146];
                    }
                    v148 = std::string::append(&v157, v147);
                    long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
                    *(void *)&v158[16] = *((void *)&v148->__r_.__value_.__l + 2);
                    *(_OWORD *)v158 = v149;
                    v148->__r_.__value_.__l.__size_ = 0;
                    v148->__r_.__value_.__r.__words[2] = 0;
                    v148->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v157.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v155.__r_.__value_.__l.__data_);
                    }
                    if (*((int *)global_logger() + 169) <= 6)
                    {
                      uint64_t v150 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 573, 1);
                      if ((v158[23] & 0x80000000) != 0) {
                        std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)v158, *(std::string::size_type *)&v158[8]);
                      }
                      else {
                        std::string v153 = *(std::string *)v158;
                      }
                      uint64_t v151 = file_logger::operator<<<std::string>((uint64_t)v150, (uint64_t)&v153);
                      file_logger::operator<<(v151, (void (*)(unsigned char *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v153.__r_.__value_.__l.__data_);
                      }
                    }
                    exception = (std::bad_cast *)__cxa_allocate_exception(0x20uLL);
                    turi::bad_cast::bad_cast(exception, (long long *)v158);
                  default:
LABEL_388:
                    turi::flexible_type_fail(0);
                    __break(1u);
                    break;
                }
                return;
              }
              unint64_t v27 = (atomic_ullong *volatile *)(v154[0] + 16 * v18);
              switch(*((unsigned char *)v27 + 12))
              {
                case 2:
                  if (atomic_fetch_add(*v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v28 = *v27;
                    if (!*v27) {
                      goto LABEL_85;
                    }
                    if (*((char *)v28 + 31) < 0) {
                      operator delete((void *)v28[1]);
                    }
                    unint64_t v29 = v28;
                    uint64_t v30 = 0x1012C404EF22A49;
                    goto LABEL_84;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(*v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v43 = *v27;
                    if (!*v27) {
                      goto LABEL_85;
                    }
                    unint64_t v44 = (void *)v43[1];
                    if (v44)
                    {
                      v43[2] = (atomic_ullong)v44;
                      operator delete(v44);
                    }
                    unint64_t v29 = v43;
                    uint64_t v30 = 0x1080C409938AC02;
                    goto LABEL_84;
                  }
                  break;
                case 4:
                  if (atomic_fetch_add(*v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v41 = *v27;
                    if (!*v27) {
                      goto LABEL_85;
                    }
                    *(void *)v158 = v41 + 1;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
                    goto LABEL_79;
                  }
                  break;
                case 5:
                  if (atomic_fetch_add(*v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v41 = *v27;
                    if (!*v27) {
                      goto LABEL_85;
                    }
                    *(void *)v158 = v41 + 1;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v158);
LABEL_79:
                    unint64_t v29 = v41;
                    uint64_t v30 = 0x1020C405E66F15BLL;
                    goto LABEL_84;
                  }
                  break;
                case 8:
                  if (atomic_fetch_add(*v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    atomic_ullong *volatile v45 = *v27;
                    if (!*v27) {
                      goto LABEL_85;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)v45 + 2);
                    unint64_t v29 = v45;
                    unsigned int v42 = -235920773;
                    goto LABEL_83;
                  }
                  break;
                case 9:
                  if (atomic_fetch_add(*v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    if (*v27)
                    {
                      unint64_t v29 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v27);
                      unsigned int v42 = 2071181815;
LABEL_83:
                      uint64_t v30 = v42 | 0x1030C4000000000;
LABEL_84:
                      MEMORY[0x22A614FA0](v29, v30);
                    }
LABEL_85:
                    *unint64_t v27 = 0;
                  }
                  break;
                default:
                  break;
              }
              *unint64_t v27 = 0;
              *((_DWORD *)v27 + 2) = 0;
              *((unsigned char *)v27 + 12) = v26;
              switch(v26)
              {
                case 2:
                  operator new();
                case 3:
                  operator new();
                case 4:
                  operator new();
                case 5:
                  operator new();
                case 6:
                  *unint64_t v27 = (atomic_ullong *volatile)0x1900000000000000;
                  *((_DWORD *)v27 + 2) = 0;
                  break;
                case 8:
                  operator new();
                case 9:
                  operator new();
                default:
                  break;
              }
              if (*a2 != v154[0])
              {
                uint64_t v46 = *a2 + 16 * v18;
                uint64_t v47 = v154[0] + 16 * v18;
                switch(*(unsigned char *)(v46 + 12))
                {
                  case 0:
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                        double v48 = *(double *)v46;
                        goto LABEL_125;
                      case 1:
                        *(double *)&long long v16 = (double)*(uint64_t *)v46;
                        goto LABEL_257;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v80 = *(void **)v47;
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
                        std::ostream::operator<<();
                        std::stringbuf::str();
                        goto LABEL_233;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 6:
                        *(void *)uint64_t v47 = *(void *)v46 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                        *(_DWORD *)(v47 + 8) = 0;
                        goto LABEL_311;
                      case 7:
                        goto LABEL_310;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      default:
                        goto LABEL_388;
                    }
                  case 1:
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                        *(void *)&long long v16 = *(void *)v46;
                        *(void *)&double v48 = (uint64_t)*(double *)v46;
                        goto LABEL_125;
                      case 1:
                        *(void *)&long long v16 = *(void *)v46;
                        goto LABEL_257;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v80 = *(void **)v47;
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v158);
                        std::ostream::operator<<();
                        std::stringbuf::str();
LABEL_233:
                        uint64_t v81 = (void **)(v80 + 1);
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v158);
                        if (*((char *)v80 + 31) < 0) {
                          operator delete(*v81);
                        }
                        long long v16 = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
                        uint64_t v82 = (void *)v157.__r_.__value_.__r.__words[2];
                        goto LABEL_274;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 6:
                        *(void *)&long long v16 = *(void *)v46;
                        int v83 = (int)((*(double *)v46 - (double)(uint64_t)floor(*(double *)v46)) * 1000000.0);
                        if (v83 >= 999999) {
                          int v83 = 999999;
                        }
                        if (v83 >= 0xF4240) {
                          turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                        }
                        *(void *)uint64_t v47 = vcvtmd_s64_f64(*(double *)&v16) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                        *(_DWORD *)(v47 + 8) = v83;
                        goto LABEL_311;
                      case 7:
                        goto LABEL_310;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      default:
                        goto LABEL_388;
                    }
                  case 2:
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_310;
                      case 2:
                        double v54 = *(double *)v46;
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        long long v51 = *(void **)v47;
                        if (*(char *)(*(void *)&v54 + 31) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)v158, *(const std::string::value_type **)(*(void *)&v54 + 8), *(void *)(*(void *)&v54 + 16));
                        }
                        else
                        {
                          long long v55 = *(_OWORD *)(*(void *)&v54 + 8);
                          *(void *)&v158[16] = *(void *)(*(void *)&v54 + 24);
                          *(_OWORD *)v158 = v55;
                        }
                        goto LABEL_314;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      default:
                        goto LABEL_388;
                    }
                  case 3:
                    double v56 = *(double *)v46;
                    uint64_t v57 = (char *)(*(void *)v46 + 8);
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_310;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        long long v51 = *(void **)v47;
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v157, v57);
                        goto LABEL_314;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        if (*(void *)v47 == *(void *)&v56) {
                          goto LABEL_311;
                        }
                        uint64_t v60 = (char *)(*(void *)v47 + 8);
                        int v70 = (uint64_t *)(*(void *)&v56 + 16);
                        break;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(*(void *)v47 + 8), *(void **)(*(void *)&v56 + 8), *(void **)(*(void *)&v56 + 16), (uint64_t)(*(void *)(*(void *)&v56 + 16) - *(void *)(*(void *)&v56 + 8)) >> 3);
                        goto LABEL_311;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v73 = *(void *)v47;
                        memset(&v157, 0, sizeof(v157));
                        memset(&__p, 0, sizeof(__p));
                        std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v57, &v155);
                        turi::flexible_type_impl::ndarray<double>::ndarray(v158, &v155, (uint64_t)&v157, (uint64_t)&__p, 0);
                        if (v155.__r_.__value_.__l.__size_) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v155.__r_.__value_.__l.__size_);
                        }
                        if (__p.__r_.__value_.__r.__words[0])
                        {
                          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                        if (v157.__r_.__value_.__r.__words[0])
                        {
                          v157.__r_.__value_.__l.__size_ = v157.__r_.__value_.__r.__words[0];
                          operator delete(v157.__r_.__value_.__l.__data_);
                        }
                        long long v74 = *(_OWORD *)v158;
                        *(_OWORD *)v158 = 0uLL;
                        uint64_t v75 = *(std::__shared_weak_count **)(v73 + 16);
                        *(_OWORD *)(v73 + 8) = v74;
                        if (v75) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v75);
                        }
                        char v76 = *(void **)(v73 + 24);
                        if (v76)
                        {
                          *(void *)(v73 + 32) = v76;
                          operator delete(v76);
                          *(void *)(v73 + 24) = 0;
                          *(void *)(v73 + 32) = 0;
                          *(void *)(v73 + 40) = 0;
                        }
                        long long v77 = *(void **)(v73 + 48);
                        *(_OWORD *)(v73 + 24) = *(_OWORD *)&v158[16];
                        *(void *)(v73 + 40) = *(void *)v159;
                        *(_OWORD *)&v158[16] = 0uLL;
                        *(void *)v159 = 0;
                        if (v77)
                        {
                          *(void *)(v73 + 56) = v77;
                          operator delete(v77);
                          *(void *)(v73 + 48) = 0;
                          *(void *)(v73 + 56) = 0;
                          *(void *)(v73 + 64) = 0;
                        }
                        *(_OWORD *)(v73 + 48) = *(_OWORD *)&v159[8];
                        *(void *)(v73 + 64) = *(void *)&v159[24];
                        memset(&v159[8], 0, 24);
                        *(void *)(v73 + 72) = v160;
                        goto LABEL_370;
                      default:
                        goto LABEL_388;
                    }
LABEL_157:
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v60, *(char **)v57, *v70, (*v70 - *(void *)v57) >> 3);
                    break;
                  case 4:
                    double v49 = *(double *)v46;
                    int v50 = (uint64_t *)(*(void *)&v49 + 8);
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_310;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        long long v51 = *(void **)v47;
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v157, v50);
                        goto LABEL_314;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v158, (void *)(*(void *)v47 + 8), v50);
                        goto LABEL_311;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        if (*(void *)v47 != *(void *)&v49) {
                          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(*(void *)v47 + 8, *(uint64_t **)(*(void *)&v49 + 8), *(uint64_t **)(*(void *)&v49 + 16), (uint64_t)(*(void *)(*(void *)&v49 + 16) - *(void *)(*(void *)&v49 + 8)) >> 4);
                        }
                        goto LABEL_311;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v65 = *(void *)v47;
                        memset(&v157, 0, sizeof(v157));
                        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v157, *(uint64_t **)(*(void *)&v49 + 8), *(uint64_t **)(*(void *)&v49 + 16), (uint64_t)(*(void *)(*(void *)&v49 + 16) - *(void *)(*(void *)&v49 + 8)) >> 4);
                        turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v157, v158);
                        long long v66 = *(_OWORD *)v158;
                        *(_OWORD *)v158 = 0uLL;
                        uint64_t v67 = *(std::__shared_weak_count **)(v65 + 16);
                        *(_OWORD *)(v65 + 8) = v66;
                        if (v67) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
                        }
                        std::string::size_type v68 = *(void **)(v65 + 24);
                        if (v68)
                        {
                          *(void *)(v65 + 32) = v68;
                          operator delete(v68);
                          *(void *)(v65 + 24) = 0;
                          *(void *)(v65 + 32) = 0;
                          *(void *)(v65 + 40) = 0;
                        }
                        int v69 = *(void **)(v65 + 48);
                        *(_OWORD *)(v65 + 24) = *(_OWORD *)&v158[16];
                        *(void *)(v65 + 40) = *(void *)v159;
                        *(_OWORD *)&v158[16] = 0uLL;
                        *(void *)v159 = 0;
                        if (v69)
                        {
                          *(void *)(v65 + 56) = v69;
                          operator delete(v69);
                          *(void *)(v65 + 48) = 0;
                          *(void *)(v65 + 56) = 0;
                          *(void *)(v65 + 64) = 0;
                        }
                        *(_OWORD *)(v65 + 48) = *(_OWORD *)&v159[8];
                        *(void *)(v65 + 64) = *(void *)&v159[24];
                        memset(&v159[8], 0, 24);
                        *(void *)(v65 + 72) = v160;
                        turi::flexible_type_impl::ndarray<double>::~ndarray(v158);
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        goto LABEL_311;
                      default:
                        goto LABEL_388;
                    }
                  case 5:
                    double v58 = *(double *)v46;
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_310;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        long long v51 = *(void **)v47;
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v157, (void *)(*(void *)&v58 + 8));
                        goto LABEL_314;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        if (*(void *)v47 != *(void *)&v58) {
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(*(void *)v47 + 8), *(uint64_t **)(*(void *)&v58 + 8), *(uint64_t **)(*(void *)&v58 + 16), (uint64_t)(*(void *)(*(void *)&v58 + 16) - *(void *)(*(void *)&v58 + 8)) >> 5);
                        }
                        goto LABEL_311;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      default:
                        goto LABEL_388;
                    }
                  case 6:
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                        *(void *)&double v48 = (uint64_t)(*(void *)v46 << 8) >> 8;
                        goto LABEL_125;
                      case 1:
                        *(double *)&long long v16 = (double)*(int *)(v46 + 8) / 1000000.0
                                        + (double)((uint64_t)(*(void *)v46 << 8) >> 8);
LABEL_257:
                        *(void *)uint64_t v47 = v16;
                        goto LABEL_311;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v94 = *(void *)v47;
                        int v95 = *(_DWORD *)(v46 + 8);
                        v157.__r_.__value_.__r.__words[0] = *(void *)v46;
                        LODWORD(v157.__r_.__value_.__r.__words[1]) = v95;
                        turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v157, (std::string *)v158);
                        uint64_t v81 = (void **)(v94 + 8);
                        if (*(char *)(v94 + 31) < 0) {
                          operator delete(*v81);
                        }
                        long long v16 = *(_OWORD *)v158;
                        uint64_t v82 = *(void **)&v158[16];
LABEL_274:
                        v81[2] = v82;
                        *(_OWORD *)uint64_t v81 = v16;
                        goto LABEL_311;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 6:
                        int v96 = *(_DWORD *)(v46 + 8);
                        *(void *)uint64_t v47 = *(void *)v46;
                        *(_DWORD *)(v47 + 8) = v96;
                        goto LABEL_311;
                      case 7:
                        goto LABEL_310;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      default:
                        goto LABEL_388;
                    }
                  case 7:
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                      case 6:
                        goto LABEL_310;
                      case 1:
                        double v48 = NAN;
LABEL_125:
                        *(double *)uint64_t v47 = v48;
                        goto LABEL_311;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v72 = *(void *)v47 + 8;
                        if (*(char *)(*(void *)v47 + 31) < 0) {
                          operator delete(*(void **)v72);
                        }
                        *(void *)uint64_t v72 = 0;
                        *(void *)(v72 + 8) = 0;
                        *(void *)(v72 + 16) = 0;
                        goto LABEL_311;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 7:
                        goto LABEL_311;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      default:
                        goto LABEL_388;
                    }
                  case 8:
                    uint64_t v59 = (uint64_t *)(*(void *)v46 + 8);
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_310;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        long long v51 = *(void **)v47;
                        turi::flexible_type_impl::get_string_visitor::operator()();
                        goto LABEL_314;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        std::string v78 = *(void **)v47;
                        turi::flexible_type_impl::get_vec_visitor::operator()(v59, (double **)v158, v16);
                        std::string v79 = (void *)v78[1];
                        if (v79)
                        {
                          v78[2] = v79;
                          operator delete(v79);
                          v78[1] = 0;
                          v78[2] = 0;
                          v78[3] = 0;
                        }
                        *(void *)&long long v16 = *(void *)v158;
                        *(_OWORD *)(v78 + 1) = *(_OWORD *)v158;
                        v78[3] = *(void *)&v158[16];
                        goto LABEL_311;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v89 = *(void *)v47;
                        turi::flexible_type_impl::get_ndvec_visitor::operator()(v59, v158, v16);
                        long long v90 = *(_OWORD *)v158;
                        *(_OWORD *)v158 = 0uLL;
                        atomic_ullong *volatile v91 = *(std::__shared_weak_count **)(v89 + 16);
                        *(_OWORD *)(v89 + 8) = v90;
                        if (v91) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v91);
                        }
                        unsigned int v92 = *(void **)(v89 + 24);
                        if (v92)
                        {
                          *(void *)(v89 + 32) = v92;
                          operator delete(v92);
                          *(void *)(v89 + 24) = 0;
                          *(void *)(v89 + 32) = 0;
                          *(void *)(v89 + 40) = 0;
                        }
                        atomic_ullong *volatile v93 = *(void **)(v89 + 48);
                        *(_OWORD *)(v89 + 24) = *(_OWORD *)&v158[16];
                        *(void *)(v89 + 40) = *(void *)v159;
                        *(_OWORD *)&v158[16] = 0uLL;
                        *(void *)v159 = 0;
                        if (v93)
                        {
                          *(void *)(v89 + 56) = v93;
                          operator delete(v93);
                          *(void *)(v89 + 48) = 0;
                          *(void *)(v89 + 56) = 0;
                          *(void *)(v89 + 64) = 0;
                        }
                        *(_OWORD *)(v89 + 48) = *(_OWORD *)&v159[8];
                        *(void *)(v89 + 64) = *(void *)&v159[24];
                        memset(&v159[8], 0, 24);
                        *(void *)(v89 + 72) = v160;
                        goto LABEL_370;
                      default:
                        goto LABEL_388;
                    }
                  case 9:
                    double v52 = *(double *)v46;
                    uint64_t v53 = (char **)(*(void *)v46 + 8);
                    switch(*(unsigned char *)(v47 + 12))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_310;
                      case 2:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        long long v51 = *(void **)v47;
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v157, v53);
LABEL_314:
                        uint64_t v97 = (void **)(v51 + 1);
                        if (*((char *)v51 + 31) < 0) {
                          operator delete(*v97);
                        }
                        long long v16 = *(_OWORD *)v158;
                        v51[3] = *(void *)&v158[16];
                        *(_OWORD *)uint64_t v97 = v16;
                        goto LABEL_311;
                      case 3:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v60 = (char *)(*(void *)v47 + 8);
                        if (*(void *)(*(void *)&v52 + 72)) {
                          goto LABEL_323;
                        }
                        uint64_t v62 = *(uint64_t **)(*(void *)&v52 + 24);
                        int v61 = *(uint64_t **)(*(void *)&v52 + 32);
                        uint64_t v63 = *(void **)(*(void *)&v52 + 8);
                        if (v61 == v62 || v63 == 0)
                        {
                          uint64_t v98 = 0;
                        }
                        else
                        {
                          uint64_t v98 = 1;
                          do
                          {
                            uint64_t v99 = *v62++;
                            v98 *= v99;
                          }
                          while (v62 != v61);
                        }
                        if (v98 == (uint64_t)(v63[1] - *v63) >> 3
                          && turi::flexible_type_impl::ndarray<double>::last_index(v53) == (uint64_t)(*((void *)*v53 + 1) - *(void *)*v53) >> 3)
                        {
                          if (!turi::flexible_type_impl::ndarray<double>::is_full(v53)) {
                            turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                          }
                          uint64_t v57 = *v53;
                          if (v60 != *v53)
                          {
                            int v70 = (uint64_t *)(v57 + 8);
                            goto LABEL_157;
                          }
                        }
                        else
                        {
LABEL_323:
                          if (!turi::flexible_type_impl::ndarray<double>::is_valid(v53)) {
                            turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                          }
                          if (turi::flexible_type_impl::ndarray<double>::is_full(v53))
                          {
                            turi::flexible_type_impl::ndarray<double>::ndarray(v158, (uint64_t)v53);
                          }
                          else
                          {
                            memset(&v157, 0, sizeof(v157));
                            memset(&__p, 0, sizeof(__p));
                            memset(&v155, 0, sizeof(v155));
                            turi::flexible_type_impl::ndarray<double>::ndarray(v158, (uint64_t)&v157, (uint64_t)&__p, (uint64_t)&v155, 0);
                            if (v155.__r_.__value_.__r.__words[0])
                            {
                              v155.__r_.__value_.__l.__size_ = v155.__r_.__value_.__r.__words[0];
                              operator delete(v155.__r_.__value_.__l.__data_);
                            }
                            if (__p.__r_.__value_.__r.__words[0])
                            {
                              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            if (v157.__r_.__value_.__r.__words[0])
                            {
                              v157.__r_.__value_.__l.__size_ = v157.__r_.__value_.__r.__words[0];
                              operator delete(v157.__r_.__value_.__l.__data_);
                            }
                            uint64_t v160 = 0;
                            if (&v158[16] != (unsigned char *)(*(void *)&v52 + 24)) {
                              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v158[16], *(char **)(*(void *)&v52 + 24), *(void *)(*(void *)&v52 + 32), (uint64_t)(*(void *)(*(void *)&v52 + 32) - *(void *)(*(void *)&v52 + 24)) >> 3);
                            }
                            atomic_ullong *volatile v101 = *(uint64_t **)(*(void *)&v52 + 24);
                            uint64_t v100 = *(uint64_t **)(*(void *)&v52 + 32);
                            if (v100 == v101 || !*v53)
                            {
                              unint64_t v102 = 0;
                            }
                            else
                            {
                              unint64_t v102 = 1;
                              do
                              {
                                uint64_t v103 = *v101++;
                                v102 *= v103;
                              }
                              while (v101 != v100);
                            }
                            std::vector<double>::resize(*(uint64_t *)v158, v102);
                            std::vector<unsigned long>::resize((uint64_t)&v159[8], (uint64_t)(*(void *)(*(void *)&v52 + 32) - *(void *)(*(void *)&v52 + 24)) >> 3);
                            if (*(void *)&v158[24] != *(void *)&v158[16]
                              && *(void *)(*(void *)v158 + 8) != **(void **)v158)
                            {
                              std::vector<std::pair<unsigned long,unsigned long>>::vector(&v157, (uint64_t)(*(void *)(*(void *)&v52 + 56) - *(void *)(*(void *)&v52 + 48)) >> 3);
                              uint64_t v104 = *(void *)(*(void *)&v52 + 48);
                              uint64_t v105 = *(void *)(*(void *)&v52 + 56);
                              atomic_ullong *volatile v106 = (unint64_t *)v157.__r_.__value_.__r.__words[0];
                              uint64_t v107 = v105 - v104;
                              if (v105 != v104)
                              {
                                uint64_t v108 = 0;
                                unint64_t v109 = v107 >> 3;
                                if (v109 <= 1) {
                                  unint64_t v109 = 1;
                                }
                                long long v110 = (void *)(v157.__r_.__value_.__r.__words[0] + 8);
                                do
                                {
                                  *(v110 - 1) = *(void *)(v104 + 8 * v108);
                                  *long long v110 = v108++;
                                  v110 += 2;
                                }
                                while (v109 != v108);
                              }
                              std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(v157.__r_.__value_.__l.__size_, (unint64_t *)v157.__r_.__value_.__l.__size_, (uint64_t)v106, v106);
                              std::string::size_type v111 = v157.__r_.__value_.__r.__words[0];
                              uint64_t v112 = *(void *)&v159[8];
                              *(void *)(*(void *)&v159[8] + 8 * *(void *)(v157.__r_.__value_.__r.__words[0] + 8)) = 1;
                              uint64_t v113 = *(void *)(*(void *)&v52 + 56) - *(void *)(*(void *)&v52 + 48);
                              if ((unint64_t)v113 >= 9)
                              {
                                unint64_t v114 = v113 >> 3;
                                uint64_t v115 = *(void *)&v158[16];
                                if (v114 <= 2) {
                                  unint64_t v114 = 2;
                                }
                                size_t v116 = (uint64_t *)(v111 + 24);
                                unint64_t v117 = v114 - 1;
                                do
                                {
                                  uint64_t v118 = *(void *)(v115 + 8 * *(v116 - 2)) * *(void *)(v112 + 8 * *(v116 - 2));
                                  uint64_t v119 = *v116;
                                  v116 += 2;
                                  *(void *)(v112 + 8 * v119) = v118;
                                  --v117;
                                }
                                while (v117);
                              }
                              unint64_t v120 = (uint64_t)(*(void *)(*(void *)&v52 + 32) - *(void *)(*(void *)&v52 + 24)) >> 3;
                              v155.__r_.__value_.__r.__words[0] = 0;
                              std::vector<unsigned long>::vector(&__p, v120, &v155);
                              do
                              {
                                unint64_t v121 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                                if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
                                {
                                  uint64_t v130 = 0;
                                  uint64_t v131 = *(void *)(**(void **)(*(void *)&v52 + 8)
                                                   + 8 * *(void *)(*(void *)&v52 + 72));
                                  uint64_t v132 = *(void **)v158;
                                }
                                else
                                {
                                  uint64_t v122 = 0;
                                  unint64_t v123 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                                  long long v124 = *(uint64_t **)(*(void *)&v52 + 48);
                                  if (v123 <= 1) {
                                    unint64_t v123 = 1;
                                  }
                                  int v125 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                                  unint64_t v126 = v123;
                                  do
                                  {
                                    uint64_t v128 = *v125++;
                                    uint64_t v127 = v128;
                                    uint64_t v129 = *v124++;
                                    v122 += v129 * v127;
                                    --v126;
                                  }
                                  while (v126);
                                  uint64_t v130 = 0;
                                  uint64_t v131 = *(void *)(**(void **)(*(void *)&v52 + 8)
                                                   + 8 * (*(void *)(*(void *)&v52 + 72) + v122));
                                  uint64_t v132 = *(void **)v158;
                                  v133 = *(uint64_t **)&v159[8];
                                  do
                                  {
                                    uint64_t v135 = *v121++;
                                    uint64_t v134 = v135;
                                    uint64_t v136 = *v133++;
                                    v130 += v136 * v134;
                                    --v123;
                                  }
                                  while (v123);
                                }
                                *(void *)(*v132 + 8 * v130) = v131;
                              }
                              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v53, (uint64_t *)&__p));
                              if (__p.__r_.__value_.__r.__words[0])
                              {
                                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                                operator delete(__p.__r_.__value_.__l.__data_);
                              }
                              if (v157.__r_.__value_.__r.__words[0])
                              {
                                v157.__r_.__value_.__l.__size_ = v157.__r_.__value_.__r.__words[0];
                                operator delete(v157.__r_.__value_.__l.__data_);
                              }
                            }
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v158);
                          if (!turi::flexible_type_impl::ndarray<double>::is_full(v158)) {
                            turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                          }
                          if (v60 != *(char **)v158) {
                            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v60, **(char ***)v158, *(void *)(*(void *)v158 + 8), (uint64_t)(*(void *)(*(void *)v158 + 8) - **(void **)v158) >> 3);
                          }
LABEL_370:
                          turi::flexible_type_impl::ndarray<double>::~ndarray(v158);
                        }
                        break;
                      case 4:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        goto LABEL_310;
                      case 5:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
LABEL_310:
                        turi::flexible_type_fail(0);
                        goto LABEL_311;
                      case 8:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v84 = *(void *)v47;
                        turi::flexible_type_impl::get_img_visitor::operator()(*(void *)v46 + 8, (turi::image_type *)v158);
                        long long v85 = *(_OWORD *)v158;
                        *(_OWORD *)v158 = 0uLL;
                        long long v86 = *(_OWORD *)(v84 + 8);
                        *(_OWORD *)(v84 + 8) = v85;
                        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v86;
                        boost::detail::shared_count::~shared_count((atomic_uint **)&v157.__r_.__value_.__l.__size_);
                        long long v87 = *(_OWORD *)&v158[16];
                        long long v88 = *(_OWORD *)v159;
                        *(_OWORD *)(v84 + 56) = *(_OWORD *)&v159[16];
                        *(_OWORD *)(v84 + 40) = v88;
                        *(_OWORD *)(v84 + 24) = v87;
                        boost::detail::shared_count::~shared_count((atomic_uint **)&v158[8]);
                        goto LABEL_311;
                      case 9:
                        if (**(void **)v47 != 1) {
                          operator new();
                        }
                        uint64_t v71 = *(void *)v47;
                        std::shared_ptr<std::vector<double>>::operator=[abi:ne180100]((void *)(*(void *)v47 + 8), (uint64_t *)(*(void *)v46 + 8));
                        if (v71 != *(void *)&v52)
                        {
                          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v71 + 24), *(char **)(*(void *)&v52 + 24), *(void *)(*(void *)&v52 + 32), (uint64_t)(*(void *)(*(void *)&v52 + 32) - *(void *)(*(void *)&v52 + 24)) >> 3);
                          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v71 + 48), *(char **)(*(void *)&v52 + 48), *(void *)(*(void *)&v52 + 56), (uint64_t)(*(void *)(*(void *)&v52 + 56) - *(void *)(*(void *)&v52 + 48)) >> 3);
                        }
                        *(void *)(v71 + 72) = *(void *)(*(void *)&v52 + 72);
                        goto LABEL_311;
                      default:
                        goto LABEL_388;
                    }
                    break;
                  default:
                    goto LABEL_388;
                }
              }
            }
LABEL_311:
            ++v18;
            uint64_t v17 = *a2;
            if (v18 >= (a2[1] - *a2) >> 4) {
              goto LABEL_371;
            }
          }
        }
      }
      ++v7;
      --v9;
    }
    while (v9);
  }
  char v15 = *(void (**)(void))(**((void **)v8 + 26) + 56);
  v15();
}

void sub_2240FF630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  a31 = &a21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::~__func(void *a1)
{
  *a1 = &unk_26D76C698;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::~__func(void *a1)
{
  *a1 = &unk_26D76C698;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26D76C698;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_2240FFCA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::__clone(uint64_t a1, __n128 *a2)
{
  a2->n128_u64[0] = (unint64_t)&unk_26D76C698;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&a2->n128_u64[1], *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::operator()(uint64_t a1, uint64_t *a2, __n128 a3)
{
  return turi::sframe::get_output_iterator(unsigned long)::$_1::operator()((void *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_1,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_1>,void ()(std::vector<turi::flexible_type> &&)>::target_type()
{
}

uint64_t turi::sframe::get_output_iterator(unsigned long)::$_1::operator()(void *a1, uint64_t *a2, __n128 a3)
{
  v174[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (a1[1] - *a1 != (v6 - *a2) >> 4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v168);
    long long v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v168[16], (uint64_t)"Can not write to SFrame, got the wrong number of columns. ", 58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"Expected: ", 10);
    v144 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)" columns. Got: ", 15);
    long long v145 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)" columns.", 9);
    v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
    turi::sframe::get_output_iterator(unsigned long)::$_1::operator() const(std::vector<turi::flexible_type> &&)::{lambda(void)#1}::operator()();
  }
  uint64_t v163 = a1[3];
  if (v6 != v5)
  {
    unint64_t v7 = 0;
    uint64_t v162 = *MEMORY[0x263F8C2B8];
    uint64_t v160 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v161 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    do
    {
      int v8 = *(unsigned __int8 *)(v5 + 16 * v7 + 12);
      uint64_t v9 = *(char *)(*a1 + v7);
      int v10 = *(unsigned __int8 *)(*a1 + v7);
      if (v9 != 7 && v8 != 7 && v8 != v10)
      {
        if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * (char)v8 + v9])
        {
          unint64_t v146 = (turi::flexible_type_impl *)(v5 + 16 * v7);
          switch((char)v8)
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v168);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_389;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v168);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_389:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v168);
              break;
            case 2:
              uint64_t v147 = *(void *)v146;
              if (*(char *)(*(void *)v146 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v147 + 8), *(void *)(v147 + 16));
              }
              else
              {
                long long v148 = *(_OWORD *)(v147 + 8);
                __p.__r_.__value_.__r.__words[2] = *(void *)(v147 + 24);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v148;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v168, (void *)(*(void *)v146 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v168, (uint64_t *)(*(void *)v146 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v168, (void *)(*(void *)v146 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v146, &__p);
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v168, (void *)(*(void *)v146 + 8));
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          long long v149 = std::string::insert(&__p, 0, "Cannot convert ");
          long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
          v166.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v150;
          v149->__r_.__value_.__l.__size_ = 0;
          v149->__r_.__value_.__r.__words[2] = 0;
          v149->__r_.__value_.__r.__words[0] = 0;
          uint64_t v151 = std::string::append(&v166, " to ");
          long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
          v167.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v152;
          v151->__r_.__value_.__l.__size_ = 0;
          v151->__r_.__value_.__r.__words[2] = 0;
          v151->__r_.__value_.__r.__words[0] = 0;
          unint64_t v153 = *(char *)(*a1 + v7);
          if (v153 > 9) {
            v154 = "undefined";
          }
          else {
            v154 = off_2646D6E90[v153];
          }
          std::string v155 = std::string::append(&v167, v154);
          long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
          *(void *)&v168[16] = *((void *)&v155->__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v168 = v156;
          v155->__r_.__value_.__l.__size_ = 0;
          v155->__r_.__value_.__r.__words[2] = 0;
          v155->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v167.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v166.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*((int *)global_logger() + 169) <= 6)
          {
            std::string v157 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.cpp", "operator()", 604, 1);
            if ((v168[23] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)v168, *(std::string::size_type *)&v168[8]);
            }
            else {
              std::string v164 = *(std::string *)v168;
            }
            uint64_t v158 = file_logger::operator<<<std::string>((uint64_t)v157, (uint64_t)&v164);
            file_logger::operator<<(v158, (void (*)(unsigned char *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v164.__r_.__value_.__l.__data_);
            }
          }
          exception = (std::bad_cast *)__cxa_allocate_exception(0x20uLL);
          turi::bad_cast::bad_cast(exception, (long long *)v168);
        }
        uint64_t v13 = 0;
        memset(v174, 0, 13);
        BYTE4(v174[1]) = v10;
        switch(v10)
        {
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            uint64_t v13 = 0x1900000000000000;
            v174[0] = (atomic_ullong *)0x1900000000000000;
            LODWORD(v174[1]) = 0;
            break;
          case 8:
            operator new();
          case 9:
            operator new();
          default:
            break;
        }
        uint64_t v14 = *a2 + 16 * v7;
        if ((atomic_ullong **)v14 != v174)
        {
          switch(*(unsigned char *)(v14 + 12))
          {
            case 0:
              switch(BYTE4(v174[1]))
              {
                case 0:
                  uint64_t v15 = *(void *)v14;
                  goto LABEL_51;
                case 1:
                  a3.n128_f64[0] = (double)*(uint64_t *)v14;
                  goto LABEL_192;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v45 = v174[0];
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v168);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  *(void *)unint64_t v168 = v162;
                  *(void *)&v168[*(void *)(v162 - 24)] = v161;
                  *(void *)&v168[16] = v160;
                  *(void *)&v168[24] = MEMORY[0x263F8C318] + 16;
                  if (v172 < 0) {
                    operator delete(v171);
                  }
                  uint64_t v46 = v45 + 1;
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x22A614E30](v173);
                  if (*((char *)v45 + 31) < 0) {
                    goto LABEL_140;
                  }
                  goto LABEL_141;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 6:
                  v174[0] = (atomic_ullong *)(*(void *)v14 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
                  LODWORD(v174[1]) = 0;
                  goto LABEL_243;
                case 7:
                  goto LABEL_242;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                default:
                  goto LABEL_399;
              }
            case 1:
              switch(BYTE4(v174[1]))
              {
                case 0:
                  a3.n128_u64[0] = *(void *)v14;
                  uint64_t v15 = (uint64_t)*(double *)v14;
                  goto LABEL_51;
                case 1:
                  a3.n128_u64[0] = *(void *)v14;
                  goto LABEL_192;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  double v48 = v174[0];
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v168);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  *(void *)unint64_t v168 = v162;
                  *(void *)&v168[*(void *)(v162 - 24)] = v161;
                  *(void *)&v168[16] = v160;
                  *(void *)&v168[24] = MEMORY[0x263F8C318] + 16;
                  if (v172 < 0) {
                    operator delete(v171);
                  }
                  uint64_t v46 = v48 + 1;
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x22A614E30](v173);
                  if (*((char *)v48 + 31) < 0) {
LABEL_140:
                  }
                    operator delete((void *)*v46);
LABEL_141:
                  a3 = *(__n128 *)&v167.__r_.__value_.__l.__data_;
                  atomic_ullong v47 = v167.__r_.__value_.__r.__words[2];
                  goto LABEL_285;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 6:
                  a3.n128_u64[0] = *(void *)v14;
                  int v49 = (int)((*(double *)v14 - (double)(uint64_t)floor(*(double *)v14)) * 1000000.0);
                  if (v49 >= 999999) {
                    int v49 = 999999;
                  }
                  if (v49 >= 0xF4240) {
                    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                  }
                  v174[0] = (atomic_ullong *)(vcvtmd_s64_f64(a3.n128_f64[0]) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
                  LODWORD(v174[1]) = v49;
                  goto LABEL_243;
                case 7:
                  goto LABEL_242;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                default:
                  goto LABEL_399;
              }
            case 2:
              switch(BYTE4(v174[1]))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_242;
                case 2:
                  double v20 = *(double *)v14;
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  uint64_t v17 = v174[0];
                  if (*(char *)(*(void *)&v20 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v168, *(const std::string::value_type **)(*(void *)&v20 + 8), *(void *)(*(void *)&v20 + 16));
                  }
                  else
                  {
                    long long v21 = *(_OWORD *)(*(void *)&v20 + 8);
                    *(void *)&v168[16] = *(void *)(*(void *)&v20 + 24);
                    *(_OWORD *)unint64_t v168 = v21;
                  }
                  goto LABEL_282;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                default:
                  goto LABEL_399;
              }
            case 3:
              double v22 = *(double *)v14;
              atomic_ullong *volatile v23 = (char **)(*(void *)&v22 + 8);
              switch(BYTE4(v174[1]))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_242;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  uint64_t v17 = v174[0];
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v167, (void *)(*(void *)&v22 + 8));
                  goto LABEL_282;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  if (v174[0] == *(atomic_ullong **)&v22) {
                    goto LABEL_243;
                  }
                  int v26 = (char *)(v174[0] + 1);
                  unsigned int v36 = (uint64_t *)(*(void *)&v22 + 16);
                  break;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v174[0] + 1, *(void **)(*(void *)&v22 + 8), *(void **)(*(void *)&v22 + 16), (uint64_t)(*(void *)(*(void *)&v22 + 16) - *(void *)(*(void *)&v22 + 8)) >> 3);
                  goto LABEL_243;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  unsigned int v42 = v174[0];
                  memset(&v167, 0, sizeof(v167));
                  memset(&v166, 0, sizeof(v166));
                  std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v23, &__p);
                  turi::flexible_type_impl::ndarray<double>::ndarray(v168, &__p, (uint64_t)&v167, (uint64_t)&v166, 0);
                  if (__p.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                  }
                  if (v166.__r_.__value_.__r.__words[0])
                  {
                    v166.__r_.__value_.__l.__size_ = v166.__r_.__value_.__r.__words[0];
                    operator delete(v166.__r_.__value_.__l.__data_);
                  }
                  if (v167.__r_.__value_.__r.__words[0])
                  {
                    v167.__r_.__value_.__l.__size_ = v167.__r_.__value_.__r.__words[0];
                    operator delete(v167.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_178;
                default:
                  goto LABEL_399;
              }
LABEL_87:
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v26, *v23, *v36, (*v36 - (uint64_t)*v23) >> 3);
              break;
            case 4:
              double v16 = *(double *)v14;
              switch(BYTE4(v174[1]))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_242;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  uint64_t v17 = v174[0];
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v167, (uint64_t *)(*(void *)&v16 + 8));
                  goto LABEL_282;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v168, v174[0] + 1, (void *)(*(void *)&v16 + 8));
                  goto LABEL_243;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  if (v174[0] != *(atomic_ullong **)&v16) {
                    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v174[0] + 1), *(uint64_t **)(*(void *)&v16 + 8), *(uint64_t **)(*(void *)&v16 + 16), (uint64_t)(*(void *)(*(void *)&v16 + 16) - *(void *)(*(void *)&v16 + 8)) >> 4);
                  }
                  goto LABEL_243;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v31 = v174[0];
                  memset(&v167, 0, sizeof(v167));
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v167, *(uint64_t **)(*(void *)&v16 + 8), *(uint64_t **)(*(void *)&v16 + 16), (uint64_t)(*(void *)(*(void *)&v16 + 16) - *(void *)(*(void *)&v16 + 8)) >> 4);
                  turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v167, v168);
                  long long v32 = *(_OWORD *)v168;
                  *(_OWORD *)unint64_t v168 = 0uLL;
                  uint64_t v33 = (std::__shared_weak_count *)v31[2];
                  *(_OWORD *)(v31 + 1) = v32;
                  if (v33) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                  }
                  uint64_t v34 = (void *)v31[3];
                  if (v34)
                  {
                    void v31[4] = (atomic_ullong)v34;
                    operator delete(v34);
                    v31[3] = 0;
                    void v31[4] = 0;
                    v31[5] = 0;
                  }
                  uint64_t v35 = (void *)v31[6];
                  *(_OWORD *)(v31 + 3) = *(_OWORD *)&v168[16];
                  v31[5] = *(void *)v169;
                  *(_OWORD *)&v168[16] = 0uLL;
                  *(void *)v169 = 0;
                  if (v35)
                  {
                    v31[7] = (atomic_ullong)v35;
                    operator delete(v35);
                    v31[6] = 0;
                    v31[7] = 0;
                    v31[8] = 0;
                    uint64_t v35 = *(void **)&v168[16];
                  }
                  *((_OWORD *)v31 + 3) = *(_OWORD *)&v169[8];
                  v31[8] = *(void *)&v169[24];
                  memset(&v169[8], 0, 24);
                  v31[9] = v170;
                  if (v35)
                  {
                    *(void *)&v168[24] = v35;
                    operator delete(v35);
                  }
                  if (*(void *)&v168[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v168[8]);
                  }
                  v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
                  goto LABEL_243;
                default:
                  goto LABEL_399;
              }
            case 5:
              double v24 = *(double *)v14;
              switch(BYTE4(v174[1]))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_242;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  uint64_t v17 = v174[0];
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v167, (void *)(*(void *)&v24 + 8));
                  goto LABEL_282;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  if (v174[0] != *(atomic_ullong **)&v24) {
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v174[0] + 1, *(uint64_t **)(*(void *)&v24 + 8), *(uint64_t **)(*(void *)&v24 + 16), (uint64_t)(*(void *)(*(void *)&v24 + 16) - *(void *)(*(void *)&v24 + 8)) >> 5);
                  }
                  goto LABEL_243;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                default:
                  goto LABEL_399;
              }
            case 6:
              switch(BYTE4(v174[1]))
              {
                case 0:
                  uint64_t v15 = (uint64_t)(*(void *)v14 << 8) >> 8;
                  goto LABEL_51;
                case 1:
                  a3.n128_f64[0] = (double)*(int *)(v14 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v14 << 8) >> 8);
LABEL_192:
                  v174[0] = (atomic_ullong *)a3.n128_u64[0];
                  goto LABEL_243;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  uint64_t v17 = v174[0];
                  int v59 = *(_DWORD *)(v14 + 8);
                  v167.__r_.__value_.__r.__words[0] = *(void *)v14;
                  LODWORD(v167.__r_.__value_.__r.__words[1]) = v59;
                  turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v167, (std::string *)v168);
                  goto LABEL_282;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 6:
                  int v60 = *(_DWORD *)(v14 + 8);
                  v174[0] = *(atomic_ullong **)v14;
                  LODWORD(v174[1]) = v60;
                  goto LABEL_243;
                case 7:
                  goto LABEL_242;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                default:
                  goto LABEL_399;
              }
            case 7:
              switch(BYTE4(v174[1]))
              {
                case 0:
                case 6:
                  goto LABEL_242;
                case 1:
                  uint64_t v15 = 0x7FF8000000000000;
LABEL_51:
                  v174[0] = (atomic_ullong *)v15;
                  goto LABEL_243;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v41 = v174[0] + 1;
                  if (*((char *)v174[0] + 31) < 0) {
                    operator delete((void *)*v41);
                  }
                  atomic_ullong *v41 = 0;
                  v41[1] = 0;
                  v41[2] = 0;
                  goto LABEL_243;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 7:
                  goto LABEL_243;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                default:
                  goto LABEL_399;
              }
            case 8:
              uint64_t v25 = (uint64_t *)(*(void *)v14 + 8);
              switch(BYTE4(v174[1]))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_242;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  uint64_t v17 = v174[0];
                  turi::flexible_type_impl::get_string_visitor::operator()();
                  goto LABEL_282;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v43 = v174[0];
                  turi::flexible_type_impl::get_vec_visitor::operator()(v25, (double **)v168, a3.n128_u64[0]);
                  unint64_t v44 = (void *)v43[1];
                  if (v44)
                  {
                    v43[2] = (atomic_ullong)v44;
                    operator delete(v44);
                    v43[1] = 0;
                    v43[2] = 0;
                    v43[3] = 0;
                  }
                  a3.n128_u64[0] = *(void *)v168;
                  *(_OWORD *)(v43 + 1) = *(_OWORD *)v168;
                  v43[3] = *(void *)&v168[16];
                  goto LABEL_243;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  unsigned int v42 = v174[0];
                  turi::flexible_type_impl::get_ndvec_visitor::operator()(v25, v168, a3.n128_u64[0]);
LABEL_178:
                  long long v55 = *(_OWORD *)v168;
                  *(_OWORD *)unint64_t v168 = 0uLL;
                  double v56 = (std::__shared_weak_count *)v42[2];
                  *(_OWORD *)(v42 + 1) = v55;
                  if (v56) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
                  }
                  uint64_t v57 = (void *)v42[3];
                  if (v57)
                  {
                    v42[4] = (atomic_ullong)v57;
                    operator delete(v57);
                    v42[3] = 0;
                    v42[4] = 0;
                    v42[5] = 0;
                  }
                  double v58 = (void *)v42[6];
                  *(_OWORD *)(v42 + 3) = *(_OWORD *)&v168[16];
                  v42[5] = *(void *)v169;
                  *(_OWORD *)&v168[16] = 0uLL;
                  *(void *)v169 = 0;
                  if (v58)
                  {
                    v42[7] = (atomic_ullong)v58;
                    operator delete(v58);
                    v42[6] = 0;
                    v42[7] = 0;
                    v42[8] = 0;
                    double v58 = *(void **)&v168[16];
                  }
                  a3.n128_u64[0] = *(void *)&v169[8];
                  *((_OWORD *)v42 + 3) = *(_OWORD *)&v169[8];
                  v42[8] = *(void *)&v169[24];
                  memset(&v169[8], 0, 24);
                  v42[9] = v170;
                  if (v58)
                  {
                    *(void *)&v168[24] = v58;
                    operator delete(v58);
                  }
                  if (*(void *)&v168[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v168[8]);
                  }
                  goto LABEL_243;
                default:
                  goto LABEL_399;
              }
            case 9:
              double v18 = *(double *)v14;
              uint64_t v19 = *(void *)&v18 + 8;
              switch(BYTE4(v174[1]))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_242;
                case 2:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  uint64_t v17 = v174[0];
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v167, (void *)(*(void *)&v18 + 8));
LABEL_282:
                  uint64_t v46 = v17 + 1;
                  if (*((char *)v17 + 31) < 0) {
                    operator delete((void *)*v46);
                  }
                  a3 = *(__n128 *)v168;
                  atomic_ullong v47 = *(void *)&v168[16];
LABEL_285:
                  v46[2] = v47;
                  *(__n128 *)uint64_t v46 = a3;
                  goto LABEL_243;
                case 3:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  int v26 = (char *)(v174[0] + 1);
                  if (*(void *)(*(void *)&v18 + 72)) {
                    goto LABEL_292;
                  }
                  atomic_ullong *volatile v28 = *(uint64_t **)(*(void *)&v18 + 24);
                  unint64_t v27 = *(uint64_t **)(*(void *)&v18 + 32);
                  unint64_t v29 = *(void **)(*(void *)&v18 + 8);
                  if (v27 == v28 || v29 == 0)
                  {
                    uint64_t v75 = 0;
                  }
                  else
                  {
                    uint64_t v75 = 1;
                    do
                    {
                      uint64_t v76 = *v28++;
                      v75 *= v76;
                    }
                    while (v28 != v27);
                  }
                  if (v75 != (uint64_t)(v29[1] - *v29) >> 3
                    || turi::flexible_type_impl::ndarray<double>::last_index((void *)(*(void *)&v18 + 8)) != (uint64_t)(*(void *)(*(void *)v19 + 8) - **(void **)v19) >> 3)
                  {
LABEL_292:
                    if (!turi::flexible_type_impl::ndarray<double>::is_valid((void *)(*(void *)&v18 + 8))) {
                      turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                    }
                    if (turi::flexible_type_impl::ndarray<double>::is_full((void *)(*(void *)&v18 + 8)))
                    {
                      turi::flexible_type_impl::ndarray<double>::ndarray(v168, *(void *)&v18 + 8);
                    }
                    else
                    {
                      memset(&v167, 0, sizeof(v167));
                      memset(&v166, 0, sizeof(v166));
                      memset(&__p, 0, sizeof(__p));
                      turi::flexible_type_impl::ndarray<double>::ndarray(v168, (uint64_t)&v167, (uint64_t)&v166, (uint64_t)&__p, 0);
                      if (__p.__r_.__value_.__r.__words[0])
                      {
                        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      if (v166.__r_.__value_.__r.__words[0])
                      {
                        v166.__r_.__value_.__l.__size_ = v166.__r_.__value_.__r.__words[0];
                        operator delete(v166.__r_.__value_.__l.__data_);
                      }
                      if (v167.__r_.__value_.__r.__words[0])
                      {
                        v167.__r_.__value_.__l.__size_ = v167.__r_.__value_.__r.__words[0];
                        operator delete(v167.__r_.__value_.__l.__data_);
                      }
                      atomic_ullong v170 = 0;
                      if (&v168[16] != (unsigned char *)(*(void *)&v18 + 24)) {
                        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v168[16], *(char **)(*(void *)&v18 + 24), *(void *)(*(void *)&v18 + 32), (uint64_t)(*(void *)(*(void *)&v18 + 32) - *(void *)(*(void *)&v18 + 24)) >> 3);
                      }
                      std::string v78 = *(uint64_t **)(*(void *)&v18 + 24);
                      long long v77 = *(uint64_t **)(*(void *)&v18 + 32);
                      if (v77 == v78 || !*(void *)v19)
                      {
                        unint64_t v79 = 0;
                      }
                      else
                      {
                        unint64_t v79 = 1;
                        do
                        {
                          uint64_t v80 = *v78++;
                          v79 *= v80;
                        }
                        while (v78 != v77);
                      }
                      std::vector<double>::resize(*(uint64_t *)v168, v79);
                      std::vector<unsigned long>::resize((uint64_t)&v169[8], (uint64_t)(*(void *)(*(void *)&v18 + 32) - *(void *)(*(void *)&v18 + 24)) >> 3);
                      if (*(void *)&v168[24] != *(void *)&v168[16]
                        && *(void *)(*(void *)v168 + 8) != **(void **)v168)
                      {
                        std::vector<std::pair<unsigned long,unsigned long>>::vector(&v167, (uint64_t)(*(void *)(*(void *)&v18 + 56) - *(void *)(*(void *)&v18 + 48)) >> 3);
                        uint64_t v81 = *(void *)(*(void *)&v18 + 48);
                        uint64_t v82 = *(void *)(*(void *)&v18 + 56);
                        int v83 = (unint64_t *)v167.__r_.__value_.__r.__words[0];
                        uint64_t v84 = v82 - v81;
                        if (v82 != v81)
                        {
                          uint64_t v85 = 0;
                          unint64_t v86 = v84 >> 3;
                          if (v86 <= 1) {
                            unint64_t v86 = 1;
                          }
                          long long v87 = (void *)(v167.__r_.__value_.__r.__words[0] + 8);
                          do
                          {
                            *(v87 - 1) = *(void *)(v81 + 8 * v85);
                            void *v87 = v85++;
                            v87 += 2;
                          }
                          while (v86 != v85);
                        }
                        std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(v167.__r_.__value_.__l.__size_, (unint64_t *)v167.__r_.__value_.__l.__size_, (uint64_t)v83, v83);
                        std::string::size_type v88 = v167.__r_.__value_.__r.__words[0];
                        uint64_t v89 = *(void *)&v169[8];
                        *(void *)(*(void *)&v169[8] + 8 * *(void *)(v167.__r_.__value_.__r.__words[0] + 8)) = 1;
                        uint64_t v90 = *(void *)(*(void *)&v18 + 56) - *(void *)(*(void *)&v18 + 48);
                        if ((unint64_t)v90 >= 9)
                        {
                          unint64_t v91 = v90 >> 3;
                          uint64_t v92 = *(void *)&v168[16];
                          if (v91 <= 2) {
                            unint64_t v91 = 2;
                          }
                          atomic_ullong *volatile v93 = (uint64_t *)(v88 + 24);
                          unint64_t v94 = v91 - 1;
                          do
                          {
                            uint64_t v95 = *(void *)(v92 + 8 * *(v93 - 2)) * *(void *)(v89 + 8 * *(v93 - 2));
                            uint64_t v96 = *v93;
                            v93 += 2;
                            *(void *)(v89 + 8 * v96) = v95;
                            --v94;
                          }
                          while (v94);
                        }
                        unint64_t v97 = (uint64_t)(*(void *)(*(void *)&v18 + 32) - *(void *)(*(void *)&v18 + 24)) >> 3;
                        __p.__r_.__value_.__r.__words[0] = 0;
                        std::vector<unsigned long>::vector(&v166, v97, &__p);
                        long long v98 = *(_OWORD *)&v166.__r_.__value_.__l.__data_;
                        int64_t v99 = v166.__r_.__value_.__l.__size_ - v166.__r_.__value_.__r.__words[0];
                        unint64_t v100 = (uint64_t)(v166.__r_.__value_.__l.__size_ - v166.__r_.__value_.__r.__words[0]) >> 3;
                        unint64_t v101 = v100 - 1;
                        if (v100 <= 1) {
                          uint64_t v102 = 1;
                        }
                        else {
                          uint64_t v102 = (uint64_t)(v166.__r_.__value_.__l.__size_ - v166.__r_.__value_.__r.__words[0]) >> 3;
                        }
                        uint64_t v103 = *(uint64_t **)&v169[8];
                        uint64_t v104 = **(void **)v168;
                        do
                        {
                          if (*((void *)&v98 + 1) == (void)v98)
                          {
                            uint64_t v112 = 0;
                            uint64_t v113 = *(void *)(**(void **)(*(void *)&v18 + 8)
                                             + 8 * *(void *)(*(void *)&v18 + 72));
                          }
                          else
                          {
                            uint64_t v105 = 0;
                            atomic_ullong *volatile v106 = *(uint64_t **)(*(void *)&v18 + 48);
                            uint64_t v107 = (uint64_t *)v98;
                            uint64_t v108 = v102;
                            do
                            {
                              uint64_t v110 = *v107++;
                              uint64_t v109 = v110;
                              uint64_t v111 = *v106++;
                              v105 += v111 * v109;
                              --v108;
                            }
                            while (v108);
                            uint64_t v112 = 0;
                            uint64_t v113 = *(void *)(**(void **)(*(void *)&v18 + 8)
                                             + 8 * (*(void *)(*(void *)&v18 + 72) + v105));
                            unint64_t v114 = (uint64_t *)v98;
                            uint64_t v115 = v103;
                            uint64_t v116 = v102;
                            do
                            {
                              uint64_t v118 = *v114++;
                              uint64_t v117 = v118;
                              uint64_t v119 = *v115++;
                              v112 += v119 * v117;
                              --v116;
                            }
                            while (v116);
                          }
                          *(void *)(v104 + 8 * v112) = v113;
                          uint64_t v120 = v100;
                          unint64_t v121 = v100 - 1;
                          if (v99 >= 1)
                          {
                            uint64_t v122 = *(void *)(*(void *)&v18 + 24);
                            unint64_t v123 = *(void *)(v98 + 8 * v101) + 1;
                            *(void *)(v98 + 8 * v101) = v123;
                            if (v123 >= *(void *)(v122 + 8 * v101))
                            {
                              uint64_t v124 = v122 - 16;
                              unint64_t v125 = v100;
                              unint64_t v126 = (unint64_t *)(v98 + (v99 & 0xFFFFFFFFFFFFFFF8) - 16);
                              do
                              {
                                unint64_t v127 = v125 - 1;
                                v126[1] = 0;
                                if ((uint64_t)(v125 - 1) <= 0) {
                                  goto LABEL_341;
                                }
                                unint64_t v128 = *v126 + 1;
                                *v126-- = v128;
                                unint64_t v129 = *(void *)(v124 + 8 * v125--);
                              }
                              while (v128 >= v129);
                              unint64_t v121 = v127 - 1;
                              uint64_t v120 = 1;
                            }
                            else
                            {
                              uint64_t v120 = 1;
                              unint64_t v121 = v100 - 1;
                            }
                          }
                        }
                        while ((v121 & 0x8000000000000000) == 0 && v120);
LABEL_341:
                        if ((void)v98)
                        {
                          v166.__r_.__value_.__l.__size_ = v98;
                          operator delete((void *)v98);
                        }
                        if (v167.__r_.__value_.__r.__words[0])
                        {
                          v167.__r_.__value_.__l.__size_ = v167.__r_.__value_.__r.__words[0];
                          operator delete(v167.__r_.__value_.__l.__data_);
                        }
                      }
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v168);
                    if (!turi::flexible_type_impl::ndarray<double>::is_full(v168)) {
                      turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                    }
                    if (v26 != *(char **)v168) {
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v26, **(char ***)v168, *(void *)(*(void *)v168 + 8), (uint64_t)(*(void *)(*(void *)v168 + 8) - **(void **)v168) >> 3);
                    }
                    turi::flexible_type_impl::ndarray<double>::~ndarray(v168);
                    goto LABEL_243;
                  }
                  if (!turi::flexible_type_impl::ndarray<double>::is_full((void *)(*(void *)&v18 + 8))) {
                    turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                  }
                  atomic_ullong *volatile v23 = *(char ***)v19;
                  if (v26 != (char *)v23)
                  {
                    unsigned int v36 = (uint64_t *)(v23 + 1);
                    goto LABEL_87;
                  }
                  break;
                case 4:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  goto LABEL_242;
                case 5:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
LABEL_242:
                  turi::flexible_type_fail(0);
                  goto LABEL_243;
                case 8:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  int v50 = v174[0];
                  turi::flexible_type_impl::get_img_visitor::operator()(v19, (turi::image_type *)v168);
                  long long v51 = *(_OWORD *)v168;
                  *(_OWORD *)unint64_t v168 = 0uLL;
                  long long v52 = *(_OWORD *)(v50 + 1);
                  *(_OWORD *)(v50 + 1) = v51;
                  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v52;
                  boost::detail::shared_count::~shared_count((atomic_uint **)&v167.__r_.__value_.__l.__size_);
                  long long v53 = *(_OWORD *)&v168[16];
                  long long v54 = *(_OWORD *)v169;
                  *(_OWORD *)(v50 + 7) = *(_OWORD *)&v169[16];
                  *(_OWORD *)(v50 + 5) = v54;
                  *(_OWORD *)(v50 + 3) = v53;
                  boost::detail::shared_count::~shared_count((atomic_uint **)&v168[8]);
                  goto LABEL_243;
                case 9:
                  if (*(void *)v13 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v37 = v174[0];
                  atomic_ullong v39 = *(void *)(*(void *)&v18 + 8);
                  atomic_ullong v38 = *(void *)(*(void *)&v18 + 16);
                  if (v38) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v40 = (std::__shared_weak_count *)v37[2];
                  v37[1] = v39;
                  v37[2] = v38;
                  if (v40) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
                  }
                  if (v37 != *(atomic_ullong **)&v18)
                  {
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v37 + 24, *(char **)(*(void *)&v18 + 24), *(void *)(*(void *)&v18 + 32), (uint64_t)(*(void *)(*(void *)&v18 + 32) - *(void *)(*(void *)&v18 + 24)) >> 3);
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v37 + 48, *(char **)(*(void *)&v18 + 48), *(void *)(*(void *)&v18 + 56), (uint64_t)(*(void *)(*(void *)&v18 + 56) - *(void *)(*(void *)&v18 + 48)) >> 3);
                  }
                  v37[9] = *(void *)(*(void *)&v18 + 72);
                  goto LABEL_243;
                default:
                  goto LABEL_399;
              }
              break;
            default:
LABEL_399:
              uint64_t result = turi::flexible_type_fail(0);
              __break(1u);
              return result;
          }
        }
LABEL_243:
        uint64_t v61 = *a2 + 16 * v7;
        if (v174 == (atomic_ullong **)v61)
        {
          switch(BYTE4(v174[1]))
          {
            case 2:
              if (atomic_fetch_add(v174[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v130 = v174[0];
                if (v174[0])
                {
                  if (*((char *)v174[0] + 31) < 0) {
                    operator delete(*((void **)v174[0] + 1));
                  }
                  uint64_t v131 = v130;
                  uint64_t v132 = 0x1012C404EF22A49;
                  goto LABEL_380;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add(v174[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                int v139 = v174[0];
                if (v174[0])
                {
                  uint64_t v140 = (void *)v174[0][1];
                  if (v140)
                  {
                    v174[0][2] = (atomic_ullong)v140;
                    operator delete(v140);
                  }
                  uint64_t v131 = v139;
                  uint64_t v132 = 0x1080C409938AC02;
                  goto LABEL_380;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add(v174[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                v133 = v174[0];
                if (v174[0])
                {
                  *(void *)unint64_t v168 = v174[0] + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
                  goto LABEL_375;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add(v174[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                v133 = v174[0];
                if (v174[0])
                {
                  *(void *)unint64_t v168 = v174[0] + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
LABEL_375:
                  uint64_t v131 = v133;
                  uint64_t v132 = 0x1020C405E66F15BLL;
                  goto LABEL_380;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add(v174[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                long long v141 = v174[0];
                if (v174[0])
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)v174[0] + 2);
                  uint64_t v131 = v141;
                  unsigned int v138 = -235920773;
                  goto LABEL_379;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add(v174[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v134 = v174[0];
                if (v174[0])
                {
                  uint64_t v135 = (void *)v174[0][6];
                  if (v135)
                  {
                    v174[0][7] = (atomic_ullong)v135;
                    operator delete(v135);
                  }
                  uint64_t v136 = (void *)v134[3];
                  if (v136)
                  {
                    v134[4] = (atomic_ullong)v136;
                    operator delete(v136);
                  }
                  uint64_t v137 = (std::__shared_weak_count *)v134[2];
                  if (v137) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v137);
                  }
                  uint64_t v131 = v134;
                  unsigned int v138 = 2071181815;
LABEL_379:
                  uint64_t v132 = v138 | 0x1030C4000000000;
LABEL_380:
                  MEMORY[0x22A614FA0](v131, v132);
                }
              }
              break;
            default:
              break;
          }
        }
        else
        {
          switch(*(unsigned char *)(v61 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v61, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v62 = *(atomic_ullong *volatile *)v61;
                if (!*(void *)v61) {
                  goto LABEL_276;
                }
                if (*((char *)v62 + 31) < 0) {
                  operator delete((void *)v62[1]);
                }
                atomic_ullong *volatile v63 = v62;
                uint64_t v64 = 0x1012C404EF22A49;
                goto LABEL_275;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v61, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v71 = *(atomic_ullong *volatile *)v61;
                if (!*(void *)v61) {
                  goto LABEL_276;
                }
                uint64_t v72 = (void *)v71[1];
                if (v72)
                {
                  v71[2] = (atomic_ullong)v72;
                  operator delete(v72);
                }
                atomic_ullong *volatile v63 = v71;
                uint64_t v64 = 0x1080C409938AC02;
                goto LABEL_275;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v61, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v65 = *(atomic_ullong *volatile *)v61;
                if (!*(void *)v61) {
                  goto LABEL_276;
                }
                *(void *)unint64_t v168 = v65 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
                goto LABEL_270;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v61, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v65 = *(atomic_ullong *volatile *)v61;
                if (!*(void *)v61) {
                  goto LABEL_276;
                }
                *(void *)unint64_t v168 = v65 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
LABEL_270:
                atomic_ullong *volatile v63 = v65;
                uint64_t v64 = 0x1020C405E66F15BLL;
                goto LABEL_275;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v61, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v73 = *(atomic_ullong *volatile *)v61;
                if (!*(void *)v61) {
                  goto LABEL_276;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v73 + 2);
                atomic_ullong *volatile v63 = v73;
                unsigned int v70 = -235920773;
                goto LABEL_274;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v61, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v66 = *(atomic_ullong *volatile *)v61;
                if (*(void *)v61)
                {
                  uint64_t v67 = (void *)v66[6];
                  if (v67)
                  {
                    v66[7] = (atomic_ullong)v67;
                    operator delete(v67);
                  }
                  std::string::size_type v68 = (void *)v66[3];
                  if (v68)
                  {
                    v66[4] = (atomic_ullong)v68;
                    operator delete(v68);
                  }
                  int v69 = (std::__shared_weak_count *)v66[2];
                  if (v69) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
                  }
                  atomic_ullong *volatile v63 = v66;
                  unsigned int v70 = 2071181815;
LABEL_274:
                  uint64_t v64 = v70 | 0x1030C4000000000;
LABEL_275:
                  MEMORY[0x22A614FA0](v63, v64);
                }
LABEL_276:
                *(void *)uint64_t v61 = 0;
              }
              break;
            default:
              break;
          }
          long long v74 = v174[0];
          *(atomic_ullong **)(v61 + 5) = *(atomic_ullong **)((char *)v174 + 5);
          *(void *)uint64_t v61 = v74;
          *(unsigned char *)(v61 + 12) = BYTE4(v174[1]);
        }
        uint64_t v5 = *a2;
      }
      ++v7;
    }
    while (v7 < (a2[1] - v5) >> 4);
  }
  return (*(uint64_t (**)(void, void, uint64_t *))(**(void **)(v163 + 208) + 64))(*(void *)(v163 + 208), a1[4], a2);
}

void sub_22410290C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a47);
  switch(*(unsigned char *)(v52 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v52 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v54 = *(void *)(v52 - 136);
      if (!v54) {
        goto LABEL_29;
      }
      if (*(char *)(v54 + 31) < 0) {
        operator delete(*(void **)(v54 + 8));
      }
      long long v55 = (void *)v54;
      uint64_t v56 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v52 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      int v60 = *(void **)(v52 - 136);
      if (!v60) {
        goto LABEL_29;
      }
      uint64_t v61 = (void *)v60[1];
      if (v61)
      {
        v60[2] = v61;
        operator delete(v61);
      }
      long long v55 = v60;
      uint64_t v56 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v52 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v57 = *(void **)(v52 - 136);
      if (!v57) {
        goto LABEL_29;
      }
      a33 = v57 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v52 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v57 = *(void **)(v52 - 136);
      if (!v57) {
        goto LABEL_29;
      }
      a33 = v57 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
LABEL_23:
      long long v55 = v57;
      uint64_t v56 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v52 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v62 = *(void *)(v52 - 136);
      if (!v62) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v62 + 16));
      long long v55 = (void *)v62;
      unsigned int v59 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v52 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      double v58 = *(void **)(v52 - 136);
      if (!v58) {
        goto LABEL_29;
      }
      long long v55 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v58);
      unsigned int v59 = 2071181815;
LABEL_27:
      uint64_t v56 = v59 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v55, v56);
LABEL_29:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76C728;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76C728;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26D76C728;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(v2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_22410311C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, __n128 *a2)
{
  a2->n128_u64[0] = (unint64_t)&unk_26D76C728;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&a2->n128_u64[1], *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::operator()(void *a1, turi::sframe_rows *a2)
{
  if (a1[2] - a1[1] != (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Write to sframe with row size mismatch. ", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Expected: ", 10);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" Actual: ", 9);
    std::ostream::operator<<();
    int v8 = (void **)v6;
    turi::sframe::get_output_iterator(unsigned long)::$_2::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator()();
  }
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  turi::sframe_rows::type_check(a2, a1 + 1, v6);
  (*(void (**)(void, uint64_t, uint64_t **))(**(void **)(v3 + 208) + 88))(*(void *)(v3 + 208), v2, v6);
  int v8 = (void **)v6;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_224103308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a9 = *MEMORY[0x263F8C2B8];
  uint64_t v29 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a9 + *(void *)(a9 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a11 = v29;
  a12 = MEMORY[0x263F8C318] + 16;
  if (a25 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](&a28);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sframe::get_output_iterator(unsigned long)::$_2,std::allocator<turi::sframe::get_output_iterator(unsigned long)::$_2>,void ()(turi::sframe_rows const&)>::target_type()
{
}

uint64_t turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_2241034D8(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[16 * v10];
    uint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    double v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_2241035EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_fast_compact(turi *this, const turi::sframe *a2)
{
  if (*((void *)this + 3))
  {
    char v3 = 0;
    unint64_t v4 = 0;
    do
    {
      turi::sframe::select_column((uint64_t)this, v4, &v7);
      char v5 = turi::sarray_fast_compact<turi::flexible_type>(v7);
      if (*((void *)&v7 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
      }
      v3 |= v5;
      ++v4;
    }
    while (v4 < *((void *)this + 3));
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

void sub_224103688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL turi::sframe_config::$_0::__invoke(turi::sframe_config::$_0 *this)
{
  return (unint64_t)this - 1024 < 0xFFFFFFFFFFFFC01;
}

BOOL turi::sframe_config::$_1::__invoke(turi::sframe_config::$_1 *this)
{
  return (uint64_t)this > 0;
}

BOOL turi::$_0::__invoke(turi::$_0 *this)
{
  return (uint64_t)this > 0;
}

{
  return (uint64_t)this > 0;
}

{
  return (uint64_t)this > 0;
}

BOOL turi::$_1::__invoke(uint64_t this)
{
  return this > 63;
}

BOOL turi::$_2::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_3::__invoke(turi::$_3 *this)
{
  return (uint64_t)this > 0;
}

BOOL turi::$_4::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_5::__invoke(uint64_t this)
{
  return this > 63;
}

BOOL turi::$_6::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_7::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_8::__invoke(uint64_t this)
{
  return this > 1023;
}

BOOL turi::$_9::__invoke(turi::$_9 *this)
{
  return (unint64_t)this < 2;
}

BOOL turi::$_10::__invoke(uint64_t this)
{
  return this > 128;
}

BOOL turi::$_11::__invoke(uint64_t this)
{
  return this > 1;
}

BOOL turi::$_12::__invoke(turi::$_12 *this)
{
  return (uint64_t)this > 0;
}

void turi::read_sframe_index_file(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 80) = a2 + 88;
  *(void *)a2 = -1;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v7 = *(std::string *)a1;
  }
  turi::general_ifstream::general_ifstream(v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if ((v8[1].__r_.__value_.__s.__data_[*(void *)(v8[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) == 0)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    operator new();
  }
  __p[0] = (void *)a1;
  turi::read_sframe_index_file(std::string)::$_0::operator()();
}

void sub_2241040E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x224104184);
}

void sub_224104104()
{
}

void sub_224104118(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22410419CLL);
}

void sub_224104128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v24);
  turi::general_ifstream::~general_ifstream((turi::general_ifstream *)&v25);
  turi::sframe_index_file_information::~sframe_index_file_information(v14);
  _Unwind_Resume(a1);
}

void turi::write_sframe_index_file(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v8 = *(std::string *)a1;
  }
  boost::filesystem::path::parent_path((boost::filesystem::path *)&v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v7 = __p;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[5] - a2[4]) >> 3);
  if (v3 == a2[2] && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[8] - a2[7]) >> 3) == v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    operator new();
  }
  turi::write_sframe_index_file(std::string,turi::sframe_index_file_information const&)::$_0::operator()();
}

void sub_224104834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,std::locale *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  a43 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a22);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_row_to_csv(uint64_t *a1, char *a2, size_t a3)
{
  unint64_t v3 = a2;
  v50[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v50, 0, 13);
  if (a3)
  {
    uint64_t v5 = *a1;
    unint64_t v3 = a2;
    if (a1[1] != *a1)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 1;
      size_t v8 = a3;
      unint64_t v3 = a2;
      while (1)
      {
        uint64_t v9 = (atomic_ullong **)(v5 + v6);
        if ((atomic_ullong **)(v5 + v6) == v50) {
          goto LABEL_43;
        }
        switch(BYTE4(v50[1]))
        {
          case 2:
            if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v10 = v50[0];
              if (!v50[0]) {
                goto LABEL_37;
              }
              if (*((char *)v50[0] + 31) < 0) {
                operator delete(*((void **)v50[0] + 1));
              }
              uint64_t v11 = v10;
              uint64_t v12 = 0x1012C404EF22A49;
              goto LABEL_36;
            }
            break;
          case 3:
            if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              char v19 = v50[0];
              if (!v50[0]) {
                goto LABEL_37;
              }
              double v20 = (void *)v50[0][1];
              if (v20)
              {
                v50[0][2] = (atomic_ullong)v20;
                operator delete(v20);
              }
              uint64_t v11 = v19;
              uint64_t v12 = 0x1080C409938AC02;
              goto LABEL_36;
            }
            break;
          case 4:
            if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v13 = v50[0];
              if (!v50[0]) {
                goto LABEL_37;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v50[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_31;
            }
            break;
          case 5:
            if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v13 = v50[0];
              if (!v50[0]) {
                goto LABEL_37;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v50[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_31:
              uint64_t v11 = v13;
              uint64_t v12 = 0x1020C405E66F15BLL;
              goto LABEL_36;
            }
            break;
          case 8:
            if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              char v21 = v50[0];
              if (!v50[0]) {
                goto LABEL_37;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v50[0] + 2);
              uint64_t v11 = v21;
              unsigned int v18 = -235920773;
              goto LABEL_35;
            }
            break;
          case 9:
            if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v14 = v50[0];
              if (v50[0])
              {
                uint64_t v15 = (void *)v50[0][6];
                if (v15)
                {
                  v50[0][7] = (atomic_ullong)v15;
                  operator delete(v15);
                }
                double v16 = (void *)v14[3];
                if (v16)
                {
                  void v14[4] = (atomic_ullong)v16;
                  operator delete(v16);
                }
                char v17 = (std::__shared_weak_count *)v14[2];
                if (v17) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                }
                uint64_t v11 = v14;
                unsigned int v18 = 2071181815;
LABEL_35:
                uint64_t v12 = v18 | 0x1030C4000000000;
LABEL_36:
                MEMORY[0x22A614FA0](v11, v12);
              }
LABEL_37:
              v50[0] = 0;
            }
            break;
          default:
            break;
        }
        double v22 = *v9;
        *(atomic_ullong **)((char *)v50 + 5) = *(atomic_ullong **)((char *)v9 + 5);
        v50[0] = v22;
        BYTE4(v50[1]) = *(unsigned char *)(v5 + v6 + 12);
        int v23 = BYTE4(v50[1]);
        if (BYTE4(v50[1]) <= 9u && ((1 << SBYTE4(v50[1])) & 0x33C) != 0) {
          break;
        }
LABEL_44:
        size_t v25 = 0;
        switch(v23)
        {
          case 0:
            int v26 = snprintf(v3, v8, "%lld");
            goto LABEL_48;
          case 1:
            int v26 = snprintf(v3, v8, "%f");
            goto LABEL_48;
          case 2:
            int v26 = snprintf(v3, v8, "\"%s\"");
LABEL_48:
            size_t v25 = v26;
            break;
          case 7:
            break;
          default:
            switch(v23)
            {
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v49, v50[0] + 1);
                goto LABEL_56;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v49, v50[0] + 1);
                goto LABEL_56;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v49, v50[0] + 1);
                goto LABEL_56;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v50, &__p);
                goto LABEL_56;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_56;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v49, v50[0] + 1);
LABEL_56:
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                int v28 = snprintf(v3, v8, "%s", (const char *)p_p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                size_t v25 = v28;
                goto LABEL_61;
              default:
                uint64_t result = turi::flexible_type_fail(0);
                __break(1u);
                return result;
            }
        }
LABEL_61:
        if (v25 >= v8)
        {
          long long v32 = (char *)a3;
          goto LABEL_70;
        }
        uint64_t v29 = &v3[v25];
        if (v7 - 1 == ((a1[1] - *a1) >> 4) - 1) {
          char v30 = 10;
        }
        else {
          char v30 = 44;
        }
        *uint64_t v29 = v30;
        unint64_t v3 = v29 + 1;
        v8 += ~v25;
        if (v8)
        {
          uint64_t v5 = *a1;
          v6 += 16;
          if (v7++ < (a1[1] - *a1) >> 4) {
            continue;
          }
        }
        goto LABEL_68;
      }
      atomic_fetch_add(v50[0], 1uLL);
LABEL_43:
      int v23 = BYTE4(v50[1]);
      goto LABEL_44;
    }
  }
LABEL_68:
  long long v32 = (char *)(v3 - a2);
LABEL_70:
  switch(BYTE4(v50[1]))
  {
    case 2:
      if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v33 = v50[0];
        if (v50[0])
        {
          if (*((char *)v50[0] + 31) < 0) {
            operator delete(*((void **)v50[0] + 1));
          }
          uint64_t v34 = v33;
          uint64_t v35 = 0x1012C404EF22A49;
          goto LABEL_101;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v42 = v50[0];
        if (v50[0])
        {
          atomic_ullong *volatile v43 = (void *)v50[0][1];
          if (v43)
          {
            v50[0][2] = (atomic_ullong)v43;
            operator delete(v43);
          }
          uint64_t v34 = v42;
          uint64_t v35 = 0x1080C409938AC02;
          goto LABEL_101;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v36 = v50[0];
        if (v50[0])
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v50[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_96;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v36 = v50[0];
        if (v50[0])
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v50[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_96:
          uint64_t v34 = v36;
          uint64_t v35 = 0x1020C405E66F15BLL;
          goto LABEL_101;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v44 = v50[0];
        if (v50[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v50[0] + 2);
          uint64_t v34 = v44;
          unsigned int v41 = -235920773;
          goto LABEL_100;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v50[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v37 = v50[0];
        if (v50[0])
        {
          atomic_ullong v38 = (void *)v50[0][6];
          if (v38)
          {
            v50[0][7] = (atomic_ullong)v38;
            operator delete(v38);
          }
          atomic_ullong v39 = (void *)v37[3];
          if (v39)
          {
            v37[4] = (atomic_ullong)v39;
            operator delete(v39);
          }
          uint64_t v40 = (std::__shared_weak_count *)v37[2];
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          uint64_t v34 = v37;
          unsigned int v41 = 2071181815;
LABEL_100:
          uint64_t v35 = v41 | 0x1030C4000000000;
LABEL_101:
          MEMORY[0x22A614FA0](v34, v35);
        }
      }
      break;
    default:
      return (uint64_t)v32;
  }
  return (uint64_t)v32;
}

void sub_224105030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  switch(a18)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v19 = a16;
      if (!a16) {
        goto LABEL_27;
      }
      if (*(char *)(a16 + 31) < 0) {
        operator delete(*(void **)(a16 + 8));
      }
      double v20 = (void *)v19;
      uint64_t v21 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v24 = a16;
      if (!a16) {
        goto LABEL_27;
      }
      size_t v25 = *(void **)(a16 + 8);
      if (v25)
      {
        *(void *)(a16 + 16) = v25;
        operator delete(v25);
      }
      double v20 = (void *)v24;
      uint64_t v21 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v22 = a16;
      if (!a16) {
        goto LABEL_27;
      }
      a12 = a16 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v22 = a16;
      if (!a16) {
        goto LABEL_27;
      }
      a12 = a16 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_21:
      double v20 = (void *)v22;
      uint64_t v21 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = a16;
      if (!a16) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a16 + 16));
      double v20 = (void *)v26;
      unsigned int v23 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a16) {
        goto LABEL_27;
      }
      double v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a16);
      unsigned int v23 = 2071181815;
LABEL_25:
      uint64_t v21 = v23 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v20, v21);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::sframe_row_to_json(uint64_t *a1, uint64_t *a2, internalJSONNode **a3)
{
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *a2;
      uint64_t v11 = v3 + v7;
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
      }
      else
      {
        __n128 v12 = *(__n128 *)v11;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        *(__n128 *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      turi::flexible_type_to_json(v10 + v8, (uint64_t)&__p, (uint64_t)&v20, v12);
      uint64_t v14 = *a3;
      unint64_t v15 = *((void *)*a3 + 10);
      if (v15 >= 2)
      {
        *((void *)v14 + 10) = v15 - 1;
        internalJSONNode::newInternal(v14, v13);
      }
      *a3 = v14;
      internalJSONNode::push_back(v14);
      char v17 = v20;
      if (v20)
      {
        uint64_t v18 = *((void *)v20 + 10) - 1;
        *((void *)v20 + 10) = v18;
        if (!v18) {
          internalJSONNode::deleteInternal(v17, v16);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v9;
      uint64_t v3 = *a1;
      v8 += 16;
      v7 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

uint64_t turi::flexible_type_to_json@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 0:
      a4.n128_f64[0] = (double)*(uint64_t *)a1;
      goto LABEL_9;
    case 1:
      a4.n128_u64[0] = *(void *)a1;
LABEL_9:
      uint64_t result = JSONNode::JSONNode(a3, a4);
      break;
    case 2:
    case 5:
      uint64_t v4 = *(void *)a1 + 8;
      uint64_t result = JSONNode::JSONNode(a3, a2, v4);
      break;
    case 3:
      internalJSONNode::newInternal((internalJSONNode *)4);
    case 7:
      internalJSONNode::newInternal(0);
    default:
      internalJSONNode::newInternal(0);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::sframe_reader::init(turi::sframe_reader *this, const turi::sframe *a2, uint64_t a3)
{
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "init", 14, 1);
    long long v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(v18, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v18);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*((unsigned char *)this + 8) == 0, "SFrame reader already inited");
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v18, (const turi::sframe *)((char *)a2 + 8));
  long long v12 = v19;
  *((_OWORD *)this + 1) = *(_OWORD *)&v18[0].__locale_;
  *((_OWORD *)this + 2) = v12;
  if ((std::locale *)((char *)this + 16) != v18)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 2, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 3, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 12, v26, &v27);
  }
  std::string::operator=((std::string *)this + 5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v26, (void *)v27);
  long long v15 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  long long v15 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (*((void *)this + 7) == *((void *)this + 6))
  {
    *((void *)this + 39) = 0;
  }
  else
  {
    if (a3 != -1)
    {
      *((void *)this + 39) = a3;
      turi::sarray<turi::flexible_type>::get_reader(**((void **)a2 + 23));
    }
    turi::index_file_information::index_file_information((std::string *)v18, (const turi::index_file_information *)(**((void **)a2 + 23) + 8));
    char v13 = v29;
    *((void *)this + 39) = v20;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p.__r_.__value_.__r.__words[2], v13);
    long long v15 = (char *)&v27 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    if (v25)
    {
      uint64_t v26 = (long long *)v25;
      operator delete(v25);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(v22);
    }
    if (SBYTE7(v19) < 0) {
      operator delete(v18[0].__locale_);
    }
    turi::index_file_information::index_file_information((std::string *)v18, (const turi::index_file_information *)(**((void **)a2 + 23) + 8));
    long long v15 = 0;
    double v16 = 0;
    uint64_t v17 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v15, v25, (uint64_t)v26, ((char *)v26 - (unsigned char *)v25) >> 3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p.__r_.__value_.__r.__words[2], v29);
    char v30 = (void **)&v27 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
    if (v25)
    {
      uint64_t v26 = (long long *)v25;
      operator delete(v25);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(v22);
    }
    if (SBYTE7(v19) < 0) {
      operator delete(v18[0].__locale_);
    }
    if (*((void *)this + 7) != *((void *)this + 6)) {
      turi::sarray<turi::flexible_type>::get_reader(**((void **)a2 + 23));
    }
    if (v15)
    {
      double v16 = v15;
      operator delete(v15);
    }
  }
}

void sub_224105D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, std::locale a12)
{
}

void sub_224105E78(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void turi::sframe_reader::init(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "init", 39, 1);
    long long v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(v20, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned char *)(a1 + 8) == 0, "SFrame reader already inited");
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v20, (const turi::sframe_index_file_information *)(a2 + 8));
  long long v12 = v21;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v20[0].__locale_;
  *(_OWORD *)(a1 + 32) = v12;
  if ((std::locale *)(a1 + 16) != v20)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 72), v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 96), v26, &v27);
  }
  std::string::operator=((std::string *)(a1 + 120), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v26, (void *)v27);
  uint64_t v29 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  uint64_t v29 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  char v13 = *a3;
  long long v14 = a3[1];
  if (*a3 == v14)
  {
    long long v15 = 0;
  }
  else
  {
    long long v15 = 0;
    double v16 = *a3;
    do
    {
      uint64_t v17 = *v16++;
      long long v15 = (void **)((char *)v15 + v17);
    }
    while (v16 != v14);
  }
  uint64_t v29 = (std::string **)v15;
  long long v19 = *(void ***)(a1 + 40);
  if (v15 != v19)
  {
    v20[0].__locale_ = (std::locale::__imp *)&v29;
    v20[1].__locale_ = (std::locale::__imp *)&v19;
    turi::sframe_reader::init(turi::sframe const&,std::vector<unsigned long> const&)::$_0::operator()();
  }
  *(void *)(a1 + 312) = v14 - v13;
  if (*(void *)(a1 + 56) != *(void *)(a1 + 48)) {
    turi::sarray<turi::flexible_type>::get_reader(**(void **)(a2 + 184));
  }
}

void sub_224106240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::sframe_reader::init(turi::sframe const&,std::vector<unsigned long> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sum", 3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"size()", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "operator()", 46, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::sframe_reader::init(turi::sframe const&,std::vector<unsigned long> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22410640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_reader::begin@<X0>(turi::sframe_reader *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(void *)this + 16))(this) <= a2) {
    turi::sframe_reader::begin(unsigned long)const::$_0::operator()();
  }
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(void *)this + 16))(this) <= a2) {
    turi::sframe_reader::begin(unsigned long)const::$_1::operator()();
  }
  return turi::sframe_iterator::sframe_iterator(a3, (void *)this + 18, a2, 1);
}

void turi::sframe_reader::begin(unsigned long)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::sframe_reader::begin(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224106774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_reader::end@<X0>(turi::sframe_reader *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(void *)this + 16))(this) <= a2) {
    turi::sframe_reader::end(unsigned long)const::$_0::operator()();
  }
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(void *)this + 16))(this) <= a2) {
    turi::sframe_reader::end(unsigned long)const::$_1::operator()();
  }
  return turi::sframe_iterator::sframe_iterator(a3, (void *)this + 18, a2, 0);
}

void turi::sframe_reader::end(unsigned long)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "operator()", 61, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::sframe_reader::end(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224106ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::sframe_reader::read_rows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v40 = a1 + 168;
  turi::buffer_pool<std::vector<turi::flexible_type>>::get_new_buffer((pthread_mutex_t *)(a1 + 168), (uint64_t)&v46);
  uint64_t v6 = *(void *)(a1 + 144);
  if (*(void *)(a1 + 152) != v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (uint64_t *)v46.n128_u64[0];
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(v6 + 16 * v7) + 48))(*(void *)(v6 + 16 * v7), a2, a3, v8);
      uint64_t v8 = (uint64_t *)v46.n128_u64[0];
      if (v7)
      {
        uint64_t v9 = *(void *)(v46.n128_u64[0] + 8);
      }
      else
      {
        uint64_t v9 = *(void *)v46.n128_u64[0];
        uint64_t v10 = *(void *)(v46.n128_u64[0] + 8);
        uint64_t v11 = v10 - *(void *)v46.n128_u64[0];
        if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) != v11 >> 4)
        {
          std::vector<std::vector<turi::flexible_type>>::resize(a4, v11 >> 4);
          uint64_t v8 = (uint64_t *)v46.n128_u64[0];
          uint64_t v9 = *(void *)v46.n128_u64[0];
          uint64_t v10 = *(void *)(v46.n128_u64[0] + 8);
        }
        if (v10 != v9)
        {
          uint64_t v12 = 0;
          unint64_t v13 = 0;
          do
          {
            long long v14 = (uint64_t *)(*a4 + v12);
            unint64_t v15 = (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 4;
            if (v15 != (v14[1] - *v14) >> 4)
            {
              std::vector<turi::flexible_type>::resize(v14, v15);
              std::vector<turi::flexible_type>::shrink_to_fit((uint64_t *)(*a4 + v12));
              uint64_t v8 = (uint64_t *)v46.n128_u64[0];
              uint64_t v9 = *(void *)v46.n128_u64[0];
            }
            ++v13;
            v12 += 24;
          }
          while (v13 < (v8[1] - v9) >> 4);
          uint64_t v9 = v8[1];
        }
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      uint64_t v44 = 0;
      unint64_t v45 = v16;
      uint64_t v44 = (v9 - *v8) >> 4;
      if (v16 != v44)
      {
        v43[0] = (void **)&v45;
        v43[1] = (void **)&v44;
        turi::sframe_reader::read_rows(unsigned long,unsigned long,std::vector<std::vector<turi::flexible_type>> &)::$_0::operator()();
      }
      uint64_t v17 = *v8;
      if (v9 != *v8)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        unint64_t v20 = 0;
        do
        {
          long long v21 = (uint64_t *)(v17 + v19);
          uint64_t v22 = *(void *)(*a4 + v18) + 16 * v7;
          if (v17 + v19 != v22)
          {
            switch(*(unsigned char *)(v22 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)v22;
                  if (!*(void *)v22) {
                    goto LABEL_49;
                  }
                  if (*((char *)v23 + 31) < 0) {
                    operator delete((void *)v23[1]);
                  }
                  atomic_ullong *volatile v24 = v23;
                  uint64_t v25 = 0x1012C404EF22A49;
                  goto LABEL_48;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v32 = *(atomic_ullong *volatile *)v22;
                  if (!*(void *)v22) {
                    goto LABEL_49;
                  }
                  uint64_t v33 = (void *)v32[1];
                  if (v33)
                  {
                    v32[2] = (atomic_ullong)v33;
                    operator delete(v33);
                  }
                  atomic_ullong *volatile v24 = v32;
                  uint64_t v25 = 0x1080C409938AC02;
                  goto LABEL_48;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)v22;
                  if (!*(void *)v22) {
                    goto LABEL_49;
                  }
                  v43[0] = (void **)(v26 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v43);
                  goto LABEL_43;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)v22;
                  if (!*(void *)v22) {
                    goto LABEL_49;
                  }
                  v43[0] = (void **)(v26 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v43);
LABEL_43:
                  atomic_ullong *volatile v24 = v26;
                  uint64_t v25 = 0x1020C405E66F15BLL;
                  goto LABEL_48;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)v22;
                  if (!*(void *)v22) {
                    goto LABEL_49;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v34 + 2);
                  atomic_ullong *volatile v24 = v34;
                  unsigned int v31 = -235920773;
                  goto LABEL_47;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v27 = *(atomic_ullong *volatile *)v22;
                  if (*(void *)v22)
                  {
                    int v28 = (void *)v27[6];
                    if (v28)
                    {
                      v27[7] = (atomic_ullong)v28;
                      operator delete(v28);
                    }
                    uint64_t v29 = (void *)v27[3];
                    if (v29)
                    {
                      void v27[4] = (atomic_ullong)v29;
                      operator delete(v29);
                    }
                    char v30 = (std::__shared_weak_count *)v27[2];
                    if (v30) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                    }
                    atomic_ullong *volatile v24 = v27;
                    unsigned int v31 = 2071181815;
LABEL_47:
                    uint64_t v25 = v31 | 0x1030C4000000000;
LABEL_48:
                    MEMORY[0x22A614FA0](v24, v25);
                  }
LABEL_49:
                  *(void *)uint64_t v22 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v35 = *v21;
            *(void *)(v22 + 5) = *(uint64_t *)((char *)v21 + 5);
            *(void *)uint64_t v22 = v35;
            *(unsigned char *)(v22 + 12) = *(unsigned char *)(v17 + v19 + 12);
            *(unsigned char *)(v17 + v19 + 12) = 0;
            uint64_t v8 = (uint64_t *)v46.n128_u64[0];
            uint64_t v17 = *(void *)v46.n128_u64[0];
          }
          ++v20;
          v19 += 16;
          v18 += 24;
        }
        while (v20 < (v8[1] - v17) >> 4);
      }
      ++v7;
      uint64_t v6 = *(void *)(a1 + 144);
    }
    while (v7 < (*(void *)(a1 + 152) - v6) >> 4);
  }
  turi::buffer_pool<std::vector<turi::flexible_type>>::release_buffer(v40, &v46);
  atomic_ullong v38 = a4;
  uint64_t v36 = *a4;
  uint64_t v37 = v38[1];
  if (v46.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v46.n128_u64[1]);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 3);
}

void sub_224106FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void turi::sframe_reader::read_rows(unsigned long,unsigned long,std::vector<std::vector<turi::flexible_type>> &)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"out_obj.size()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"coldata->size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "operator()", 85, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::sframe_reader::read_rows(unsigned long,unsigned long,std::vector<std::vector<turi::flexible_type>> &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241071C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_reader::read_rows(turi::sframe_reader *this, uint64_t a2, uint64_t a3, turi::sframe_rows *a4)
{
  turi::sframe_rows::resize(a4, (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 4, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v8 = *((void *)this + 18);
  if (*((void *)this + 19) != v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v8 + v9);
      if (!*((unsigned char *)a4 + 24)) {
        turi::sframe_rows::ensure_unique(a4);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 48))(v11, a2, a3, *(void *)(*(void *)a4 + v9));
      ++v10;
      uint64_t v8 = *((void *)this + 18);
      v9 += 16;
    }
    while (v10 < (*((void *)this + 19) - v8) >> 4);
  }
  if (*(void *)a4 == *((void *)a4 + 1)) {
    return 0;
  }
  uint64_t v12 = **(void ***)a4;
  if (!v12) {
    return 0;
  }
  else {
    return (uint64_t)(v12[1] - *v12) >> 4;
  }
}

uint64_t turi::sframe_reader::reset_iterators(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 144);
  uint64_t v2 = *(uint64_t **)(this + 152);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    v1 += 2;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  return this;
}

void turi::sframe_reader::~sframe_reader(turi::sframe_reader *this)
{
  turi::sframe_reader::~sframe_reader(this);
  JUMPOUT(0x22A614FA0);
}

{
  pthread_mutex_t *v2;
  void **v3;

  *(void *)this = &unk_26D76C7A8;
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 168);
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((void *)this + 33);
  uint64_t v3 = (void **)((char *)this + 240);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  turi::mutex::~mutex(v2);
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t turi::sframe_reader::num_segments(turi::sframe_reader *this)
{
  return *((void *)this + 39);
}

uint64_t turi::sframe_reader::segment_length(turi::sframe_reader *this, unint64_t a2)
{
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(void *)this + 16))(this) <= a2) {
    turi::sframe_reader::segment_length(unsigned long)const::{lambda(void)#1}::operator()();
  }
  if (!*((void *)this + 4)) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(***((void ***)this + 18) + 24);
  return v3();
}

uint64_t turi::sframe_iterator::sframe_iterator(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  v18[6] = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  unint64_t v7 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v8 = (uint64_t *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::resize((uint64_t *)(a1 + 8), (uint64_t)(a2[1] - *a2) >> 4);
  std::vector<turi::flexible_type>::resize(v8, (uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 4);
  uint64_t v9 = **(char ***)a1;
  unint64_t v10 = *(char **)(*(void *)a1 + 8);
  if (v10 == v9) {
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    unint64_t v14 = (v10 - v9) >> 4;
    if (a4)
    {
      if (v14 <= v13) {
        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
      }
      (*(void (**)(void *__return_ptr))(**(void **)&v9[v12] + 32))(v18);
    }
    else
    {
      if (v14 <= v13) {
        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
      }
      (*(void (**)(void *__return_ptr))(**(void **)&v9[v12] + 40))(v18);
    }
    turi::sarray_iterator<turi::flexible_type>::operator=(*v7 + v11, (uint64_t)v18);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v18);
    ++v13;
    uint64_t v9 = **(char ***)a1;
    unint64_t v10 = *(char **)(*(void *)a1 + 8);
    v12 += 16;
    v11 += 48;
  }
  while (v13 < (v10 - v9) >> 4);
  if (v10 == v9) {
LABEL_16:
  }
    std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)v9 + 24))(*(void *)v9, a3);
  if (a4) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v15;
  return a1;
}

void sub_224107720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_iterator<turi::flexible_type>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((result - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return std::vector<turi::sarray_iterator<turi::flexible_type>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 48 * a2;
    while (result != v7)
      uint64_t result = turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(result - 48);
    a1[1] = v7;
  }
  return result;
}

uint64_t turi::sarray_iterator<turi::flexible_type>::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a2 != a1)
  {
    unint64_t v4 = (atomic_ullong *volatile *)(a1 + 16);
    BOOL v5 = (atomic_ullong **)(a2 + 16);
    switch(*(unsigned char *)(a1 + 28))
    {
      case 2:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v6 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          if (*((char *)v6 + 31) < 0) {
            operator delete((void *)v6[1]);
          }
          atomic_ullong *volatile v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          unint64_t v10 = (void *)v9[1];
          if (v10)
          {
            uint64_t v9[2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          atomic_ullong *volatile v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          atomic_ullong *volatile v23 = (void **)(v11 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          atomic_ullong *volatile v23 = (void **)(v11 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v23);
LABEL_19:
          atomic_ullong *volatile v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v12 + 2);
          atomic_ullong *volatile v7 = v12;
          unsigned int v13 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v14 = *v4;
          if (*v4)
          {
            uint64_t v15 = (void *)v14[6];
            if (v15)
            {
              v14[7] = (atomic_ullong)v15;
              operator delete(v15);
            }
            uint64_t v16 = (void *)v14[3];
            if (v16)
            {
              void v14[4] = (atomic_ullong)v16;
              operator delete(v16);
            }
            uint64_t v17 = (std::__shared_weak_count *)v14[2];
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            atomic_ullong *volatile v7 = v14;
            unsigned int v13 = 2071181815;
LABEL_32:
            uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v7, v8);
          }
LABEL_34:
          *unint64_t v4 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v18 = *v5;
    *(void *)(a1 + 21) = *(void *)(a2 + 21);
    *unint64_t v4 = v18;
    LODWORD(v18) = *(unsigned __int8 *)(a2 + 28);
    *(unsigned char *)(a1 + 28) = (_BYTE)v18;
    BOOL v19 = v18 > 9;
    int v20 = (1 << (char)v18) & 0x33C;
    if (!v19 && v20 != 0) {
      atomic_fetch_add(*v4, 1uLL);
    }
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t std::vector<turi::sarray_iterator<turi::flexible_type>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 48 * a2;
      uint64_t v14 = 48 * a2;
      uint64_t v15 = (void *)(v7 + 32);
      do
      {
        *uint64_t v15 = 0;
        *(v15 - 3) = 0;
        *(v15 - 2) = 0;
        *(v15 - 4) = 0;
        *(void *)((char *)v15 - 11) = 0;
        v15 += 6;
        v14 -= 48;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = *(void *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      atomic_ullong *volatile v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(result, v11);
    }
    else {
      atomic_ullong *volatile v12 = 0;
    }
    BOOL v19 = v12;
    int v20 = &v12[48 * v8];
    uint64_t v22 = &v12[48 * v11];
    uint64_t v16 = &v20[48 * a2];
    uint64_t v17 = 48 * a2;
    uint64_t v18 = v20 + 32;
    do
    {
      *uint64_t v18 = 0;
      *(v18 - 3) = 0;
      *(v18 - 2) = 0;
      *(v18 - 4) = 0;
      *(void *)((char *)v18 - 11) = 0;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
    long long v21 = v16;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<turi::sarray_iterator<turi::flexible_type>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_224107BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_iterator<turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<turi::sarray_iterator<turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_iterator<turi::flexible_type>>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_iterator<turi::flexible_type>>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a7 + v7;
      *(_OWORD *)(v9 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(a7 + v7 - 32) = 0;
      unint64_t v10 = (atomic_ullong *volatile *)(a7 + v7 - 32);
      *(_DWORD *)(v9 - 24) = 0;
      *(unsigned char *)(v9 - 20) = 0;
      if (a7 != a3)
      {
        unint64_t v11 = *(atomic_ullong **)(v8 - 32);
        *(void *)(a7 + v7 - 27) = *(void *)(v8 - 27);
        *unint64_t v10 = v11;
        LODWORD(v11) = *(unsigned __int8 *)(v8 - 20);
        *(unsigned char *)(v9 - 20) = (_BYTE)v11;
        BOOL v12 = v11 > 9;
        int v13 = (1 << (char)v11) & 0x33C;
        if (!v12 && v13 != 0) {
          atomic_fetch_add(*v10, 1uLL);
        }
      }
      __n128 result = *(__n128 *)(v8 - 16);
      *(__n128 *)(v9 - 16) = result;
      v7 -= 48;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<turi::sarray_iterator<turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void turi::sframe_reader::segment_length(unsigned long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segment", 7);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    BOOL v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.hpp", "operator()", 344, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::sframe_reader::segment_length(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224107F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void sub_224108274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,std::vector<unsigned long> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sum", 3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"size()", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    BOOL v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", "operator()", 277, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,std::vector<unsigned long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224108428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>(uint64_t a1, void *a2)
{
  **(void **)(a1 + 8) = *a2;
  operator new();
}

void sub_2241085B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__emplace_back_slow_path<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if (!((unint64_t)(v4 + 1) >> 60))
  {
    uint64_t v7 = (uint64_t)(a1 + 2);
    uint64_t v8 = a1[2] - v3;
    if (v8 >> 3 > v5) {
      unint64_t v5 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v5;
    }
    char v15 = a1 + 2;
    if (v9) {
      unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v9);
    }
    else {
      unint64_t v10 = 0;
    }
    unint64_t v11 = v10;
    BOOL v12 = &v10[16 * v4];
    int v13 = v12;
    uint64_t v14 = &v10[16 * v9];
    *(void *)BOOL v12 = *a2;
    operator new();
  }
  std::vector<float>::__throw_length_error[abi:ne180100]();
}

void sub_2241086D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sframe_rows::resize(turi::sframe_rows *this, unint64_t a2, unint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unint64_t v25 = a3;
  turi::sframe_rows::ensure_unique(this);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *((void *)this + 1);
  if (a2 != (v6 - *(void *)this) >> 4)
  {
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::resize((uint64_t *)this, a2);
    uint64_t v5 = *(void *)this;
    uint64_t v6 = *((void *)this + 1);
  }
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v7 = *(uint64_t **)v5;
      if (*(void *)v5)
      {
        if (v25 != -1 && v25 != (v7[1] - *v7) >> 4)
        {
          *(void *)((char *)&v27 + 5) = 0x700000000000000;
          *(void *)&long long v27 = 0;
          std::vector<turi::flexible_type>::resize(v7, v25, (uint64_t)&v27);
          switch(BYTE12(v27))
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v8 = (void *)v27;
                if ((void)v27)
                {
                  if (*(char *)(v27 + 31) < 0) {
                    operator delete(*(void **)(v27 + 8));
                  }
                  unint64_t v9 = v8;
                  uint64_t v10 = 0x1012C404EF22A49;
                  goto LABEL_48;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v16 = (void *)v27;
                if ((void)v27)
                {
                  uint64_t v17 = *(void **)(v27 + 8);
                  if (v17)
                  {
                    *(void *)(v27 + 16) = v17;
                    operator delete(v17);
                  }
                  unint64_t v9 = v16;
                  uint64_t v10 = 0x1080C409938AC02;
                  goto LABEL_48;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v18 = (void *)v27;
                if ((void)v27)
                {
                  atomic_ullong *volatile v26 = (void **)(v27 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v26);
                  goto LABEL_34;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v18 = (void *)v27;
                if ((void)v27)
                {
                  atomic_ullong *volatile v26 = (void **)(v27 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v26);
LABEL_34:
                  unint64_t v9 = v18;
                  uint64_t v10 = 0x1020C405E66F15BLL;
                  goto LABEL_48;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                BOOL v19 = (void *)v27;
                if ((void)v27)
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v27 + 16));
                  unint64_t v9 = v19;
                  unsigned int v20 = -235920773;
                  goto LABEL_47;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v27, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                long long v21 = (void *)v27;
                if ((void)v27)
                {
                  uint64_t v22 = *(void **)(v27 + 48);
                  if (v22)
                  {
                    *(void *)(v27 + 56) = v22;
                    operator delete(v22);
                  }
                  uint64_t v23 = (void *)v21[3];
                  if (v23)
                  {
                    void v21[4] = v23;
                    operator delete(v23);
                  }
                  atomic_ullong *volatile v24 = (std::__shared_weak_count *)v21[2];
                  if (v24) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
                  }
                  unint64_t v9 = v21;
                  unsigned int v20 = 2071181815;
LABEL_47:
                  uint64_t v10 = v20 | 0x1030C4000000000;
LABEL_48:
                  MEMORY[0x22A614FA0](v9, v10);
                }
              }
              break;
            default:
              goto LABEL_21;
          }
        }
        goto LABEL_21;
      }
      if (v25 != -1) {
        break;
      }
      uint64_t v14 = operator new(0x30uLL);
      v14[1] = 0;
      void v14[2] = 0;
      *uint64_t v14 = &unk_26D7599A8;
      void v14[4] = 0;
      v14[5] = 0;
      long long v14[3] = 0;
      char v15 = *(std::__shared_weak_count **)(v5 + 8);
      *(void *)uint64_t v5 = v14 + 3;
      *(void *)(v5 + 8) = v14;
      if (v15)
      {
        int v13 = v15;
LABEL_20:
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
LABEL_21:
      v5 += 16;
      if (v5 == v6) {
        return;
      }
    }
    std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,long &,turi::flex_undefined,void>(&v25, &v27);
    long long v11 = v27;
    long long v27 = 0uLL;
    BOOL v12 = *(std::__shared_weak_count **)(v5 + 8);
    *(_OWORD *)uint64_t v5 = v11;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    int v13 = (std::__shared_weak_count *)*((void *)&v27 + 1);
    if (!*((void *)&v27 + 1)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
}

void sub_224108A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_ullong *volatile a13, int a14, char a15)
{
  switch(a15)
  {
    case 2:
      turi::gl_sarray::clip(&a13);
      break;
    case 3:
      turi::gl_sarray::clip(&a13);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a13);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a13);
      break;
    case 8:
      turi::gl_sarray::clip(&a13);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a13);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::sframe_rows::ensure_unique(turi::sframe_rows *this)
{
  if (!*((unsigned char *)this + 24))
  {
    uint64_t v2 = *(void *)this;
    uint64_t v3 = *((void *)this + 1);
    while (v2 != v3)
    {
      uint64_t v4 = *(void *)(v2 + 8);
      if (!v4 || *(void *)(v4 + 8))
      {
        std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>&,void>(*(uint64_t ***)v2, &v7);
        long long v5 = v7;
        long long v7 = 0uLL;
        uint64_t v6 = *(std::__shared_weak_count **)(v2 + 8);
        *(_OWORD *)uint64_t v2 = v5;
        if (v6)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          if (*((void *)&v7 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
          }
        }
      }
      v2 += 16;
    }
    *((unsigned char *)this + 24) = 1;
  }
}

void std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        long long v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__append(a1, v5);
  }
}

void turi::sframe_rows::save(turi::sframe_rows *this, turi::oarchive *a2)
{
  uint64_t v4 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4;
  *(void *)&long long v35 = v4;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v5)
    {
      size_t v29 = 2 * v5 + 16;
      *((void *)a2 + 5) = v29;
      char v30 = (char **)*((void *)a2 + 2);
      if (v30)
      {
        uint64_t v6 = *v30;
        size_t v31 = v30[1] - *v30;
        BOOL v32 = v29 >= v31;
        std::vector<char>::size_type v33 = v29 - v31;
        if (v33 != 0 && v32)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v33);
          uint64_t v6 = (char *)**((void **)a2 + 2);
        }
        else if (!v32)
        {
          v30[1] = &v6[v29];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v29, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v6;
    }
    else
    {
      uint64_t v6 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v6[*((void *)a2 + 4)] = v4;
    *((void *)a2 + 4) += 8;
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  long long v7 = *(uint64_t ***)this;
  uint64_t v8 = (uint64_t **)*((void *)this + 1);
  if (*(uint64_t ***)this == v8)
  {
    uint64_t v28 = 0;
  }
  else
  {
    do
    {
      *(void *)atomic_ullong *volatile v34 = -1;
      memset(&v34[8], 0, 34);
      *(void *)&long long v37 = 0;
      turi::v2_block_impl::typed_encode(*v7, v34, (uint64_t)&v35);
      *(void *)&v34[16] = v37;
      if (*(void *)a2)
      {
        std::ostream::write();
      }
      else
      {
        unint64_t v9 = *((void *)a2 + 5);
        if (*((void *)a2 + 4) + 48 > v9)
        {
          size_t v18 = 2 * v9 + 96;
          *((void *)a2 + 5) = v18;
          BOOL v19 = (char **)*((void *)a2 + 2);
          if (v19)
          {
            uint64_t v10 = *v19;
            size_t v20 = v19[1] - *v19;
            BOOL v21 = v18 >= v20;
            std::vector<char>::size_type v22 = v18 - v20;
            if (v22 != 0 && v21)
            {
              std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v22);
              uint64_t v10 = (char *)**((void **)a2 + 2);
            }
            else if (!v21)
            {
              v19[1] = &v10[v18];
            }
          }
          else
          {
            uint64_t v10 = (char *)malloc_type_realloc(*((void **)a2 + 3), v18, 0xF6EA6B1uLL);
          }
          *((void *)a2 + 3) = v10;
        }
        else
        {
          uint64_t v10 = (char *)*((void *)a2 + 3);
        }
        long long v11 = &v10[*((void *)a2 + 4)];
        long long v12 = *(_OWORD *)v34;
        long long v13 = *(_OWORD *)&v34[32];
        *((_OWORD *)v11 + 1) = *(_OWORD *)&v34[16];
        *((_OWORD *)v11 + 2) = v13;
        *(_OWORD *)long long v11 = v12;
        *((void *)a2 + 4) += 48;
      }
      char v15 = (const void *)*((void *)&v36 + 1);
      size_t v14 = v37;
      if (*(void *)a2)
      {
        std::ostream::write();
      }
      else
      {
        unint64_t v16 = *((void *)a2 + 5);
        if (*((void *)a2 + 4) + (void)v37 > v16)
        {
          size_t v23 = 2 * (v16 + v37);
          *((void *)a2 + 5) = v23;
          atomic_ullong *volatile v24 = (char **)*((void *)a2 + 2);
          if (v24)
          {
            uint64_t v17 = *v24;
            size_t v25 = v24[1] - *v24;
            BOOL v26 = v23 >= v25;
            std::vector<char>::size_type v27 = v23 - v25;
            if (v27 != 0 && v26)
            {
              std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v27);
              uint64_t v17 = (char *)**((void **)a2 + 2);
            }
            else if (!v26)
            {
              v24[1] = &v17[v23];
            }
          }
          else
          {
            uint64_t v17 = (char *)malloc_type_realloc(*((void **)a2 + 3), v23, 0xF6EA6B1uLL);
          }
          *((void *)a2 + 3) = v17;
        }
        else
        {
          uint64_t v17 = (char *)*((void *)a2 + 3);
        }
        memcpy(&v17[*((void *)a2 + 4)], v15, v14);
        *((void *)a2 + 4) += v14;
      }
      v7 += 2;
    }
    while (v7 != v8);
    uint64_t v28 = (void *)*((void *)&v36 + 1);
  }
  free(v28);
}

void turi::sframe_rows::load(turi::sframe_rows *this, turi::iarchive *a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 3);
    unint64_t v6 = *(void *)(v4 + v5);
    unint64_t v19 = v6;
    *((void *)a2 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
    unint64_t v6 = v19;
  }
  turi::sframe_rows::resize(this, v6, 0xFFFFFFFFFFFFFFFFLL);
  if (v19)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      *(void *)size_t v18 = -1;
      memset(&v18[8], 0, 34);
      uint64_t v10 = *((void *)a2 + 2);
      if (v10)
      {
        uint64_t v11 = *((void *)a2 + 3);
        long long v12 = (_OWORD *)(v10 + v11);
        long long v14 = v12[1];
        long long v13 = v12[2];
        *(_OWORD *)size_t v18 = *v12;
        *(_OWORD *)&v18[16] = v14;
        *(_OWORD *)&v18[32] = v13;
        *((void *)a2 + 3) = v11 + 48;
      }
      else
      {
        std::istream::read();
      }
      char v15 = malloc_type_realloc(v9, *(size_t *)&v18[16], 0x62E558EDuLL);
      unint64_t v9 = v15;
      uint64_t v16 = *(void *)&v18[16];
      uint64_t v17 = *((void *)a2 + 2);
      if (v17)
      {
        memcpy(v15, (const void *)(v17 + *((void *)a2 + 3)), *(size_t *)&v18[16]);
        *((void *)a2 + 3) += v16;
      }
      else
      {
        std::istream::read();
      }
      turi::v2_block_impl::typed_decode((uint64_t)v18, v9, *(uint64_t *)&v18[16], *(uint64_t **)(*(void *)this + v7));
      ++v8;
      v7 += 16;
    }
    while (v8 < v19);
    if (v9) {
      free(v9);
    }
  }
}

void turi::sframe_rows::type_check_inplace(uint64_t *a1, void *a2, __n128 a3)
{
  v178[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  v176.n128_u64[0] = a2[1] - *a2;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v173 = (v4 - *a1) >> 4;
  if (v176.n128_u64[0] != (v4 - v3) >> 4)
  {
    *(void *)std::string v164 = &v176;
    *(void *)&v164[8] = &v173;
    turi::sframe_rows::type_check_inplace(std::vector<turi::flex_type_enum> const&)::$_0::operator()();
  }
  if (v4 != v3)
  {
    unint64_t v6 = 0;
    uint64_t v160 = *MEMORY[0x263F8C2B8];
    uint64_t v158 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v159 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    do
    {
      int v7 = *(unsigned __int8 *)(*a2 + v6);
      if (v7 == 7) {
        goto LABEL_408;
      }
      unint64_t v8 = (uint64_t **)(v3 + 16 * v6);
      uint64_t v10 = **v8;
      uint64_t v9 = (*v8)[1];
      unint64_t v11 = (v9 - v10) >> 4;
      long long v12 = v8[1];
      if (v12 && !v12[1])
      {
        unint64_t v13 = 0;
      }
      else
      {
        if (v9 == v10) {
          goto LABEL_408;
        }
        unint64_t v13 = 0;
        if (v11 <= 1) {
          uint64_t v14 = 1;
        }
        else {
          uint64_t v14 = (v9 - v10) >> 4;
        }
        char v15 = (unsigned __int8 *)(v10 + 12);
        while (1)
        {
          int v17 = *v15;
          v15 += 16;
          int v16 = v17;
          if (v17 != 7 && v16 != v7) {
            break;
          }
          if (v14 == ++v13) {
            goto LABEL_408;
          }
        }
        std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>&,void>((uint64_t **)*v8, v164);
        a3 = *(__n128 *)v164;
        *(_OWORD *)std::string v164 = 0uLL;
        unint64_t v19 = (std::__shared_weak_count *)v8[1];
        *(__n128 *)unint64_t v8 = a3;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (*(void *)&v164[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v164[8]);
        }
      }
      if (v13 >= v11) {
        goto LABEL_408;
      }
      do
      {
        uint64_t v20 = **v8 + 16 * v13;
        int v21 = *(unsigned __int8 *)(v20 + 12);
        int v22 = *(unsigned __int8 *)(*a2 + v6);
        if (v21 == 7 || v21 == v22) {
          goto LABEL_305;
        }
        uint64_t v24 = 0;
        memset(v178, 0, 13);
        BYTE4(v178[1]) = v22;
        switch(v22)
        {
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            uint64_t v24 = 0x1900000000000000;
            v178[0] = (atomic_ullong *)0x1900000000000000;
            LODWORD(v178[1]) = 0;
            break;
          case 8:
            operator new();
          case 9:
            operator new();
          default:
            break;
        }
        if ((atomic_ullong **)v20 == v178)
        {
          switch(BYTE4(v178[1]))
          {
            case 2:
              if (atomic_fetch_add(v178[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                BOOL v26 = v178[0];
                if (v178[0])
                {
                  if (*((char *)v178[0] + 31) < 0) {
                    operator delete(*((void **)v178[0] + 1));
                  }
                  std::vector<char>::size_type v27 = v26;
                  uint64_t v28 = 0x1012C404EF22A49;
                  goto LABEL_97;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add(v178[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v44 = v178[0];
                if (v178[0])
                {
                  unint64_t v45 = (void *)v178[0][1];
                  if (v45)
                  {
                    v178[0][2] = (atomic_ullong)v45;
                    operator delete(v45);
                  }
                  std::vector<char>::size_type v27 = v44;
                  uint64_t v28 = 0x1080C409938AC02;
                  goto LABEL_97;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add(v178[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong v38 = v178[0];
                if (v178[0])
                {
                  *(void *)std::string v164 = v178[0] + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
                  goto LABEL_92;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add(v178[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong v38 = v178[0];
                if (v178[0])
                {
                  *(void *)std::string v164 = v178[0] + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
LABEL_92:
                  std::vector<char>::size_type v27 = v38;
                  uint64_t v28 = 0x1020C405E66F15BLL;
                  goto LABEL_97;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add(v178[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                __n128 v46 = v178[0];
                if (v178[0])
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)v178[0] + 2);
                  std::vector<char>::size_type v27 = v46;
                  unsigned int v43 = -235920773;
                  goto LABEL_96;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add(v178[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong v39 = v178[0];
                if (v178[0])
                {
                  uint64_t v40 = (void *)v178[0][6];
                  if (v40)
                  {
                    v178[0][7] = (atomic_ullong)v40;
                    operator delete(v40);
                  }
                  unsigned int v41 = (void *)v39[3];
                  if (v41)
                  {
                    v39[4] = (atomic_ullong)v41;
                    operator delete(v41);
                  }
                  unsigned int v42 = (std::__shared_weak_count *)v39[2];
                  if (v42) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
                  }
                  std::vector<char>::size_type v27 = v39;
                  unsigned int v43 = 2071181815;
LABEL_96:
                  uint64_t v28 = v43 | 0x1030C4000000000;
LABEL_97:
                  MEMORY[0x22A614FA0](v27, v28);
                }
              }
              break;
            default:
              goto LABEL_305;
          }
          goto LABEL_305;
        }
        switch(*(unsigned char *)(v20 + 12))
        {
          case 0:
            switch(BYTE4(v178[1]))
            {
              case 0:
                uint64_t v25 = *(void *)v20;
                goto LABEL_68;
              case 1:
                a3.n128_f64[0] = (double)*(uint64_t *)v20;
                goto LABEL_221;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                long long v150 = v178[0];
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v164);
                std::ostream::operator<<();
                std::stringbuf::str();
                *(void *)std::string v164 = v160;
                *(void *)&v164[*(void *)(v160 - 24)] = v159;
                *(void *)&v164[16] = v158;
                *(void *)&v164[24] = MEMORY[0x263F8C318] + 16;
                if (v168 < 0) {
                  operator delete(__p);
                }
                uint64_t v151 = v150 + 1;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v169);
                if (*((char *)v150 + 31) < 0) {
                  operator delete((void *)*v151);
                }
                a3 = v176;
                atomic_ullong v152 = v177;
                goto LABEL_402;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 6:
                v178[0] = (atomic_ullong *)(*(void *)v20 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
                LODWORD(v178[1]) = 0;
                goto LABEL_271;
              case 7:
                goto LABEL_270;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              default:
                goto LABEL_414;
            }
          case 1:
            switch(BYTE4(v178[1]))
            {
              case 0:
                a3.n128_u64[0] = *(void *)v20;
                uint64_t v25 = (uint64_t)*(double *)v20;
                goto LABEL_68;
              case 1:
                a3.n128_u64[0] = *(void *)v20;
                goto LABEL_221;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                unint64_t v153 = v178[0];
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v164);
                std::ostream::operator<<();
                std::stringbuf::str();
                *(void *)std::string v164 = v160;
                *(void *)&v164[*(void *)(v160 - 24)] = v159;
                *(void *)&v164[16] = v158;
                *(void *)&v164[24] = MEMORY[0x263F8C318] + 16;
                if (v168 < 0) {
                  operator delete(__p);
                }
                v154 = v153 + 1;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v169);
                if (*((char *)v153 + 31) < 0) {
                  operator delete((void *)*v154);
                }
                a3 = v176;
                atomic_ullong v155 = v177;
                goto LABEL_407;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 6:
                a3.n128_u64[0] = *(void *)v20;
                int v64 = (int)((*(double *)v20 - (double)(uint64_t)floor(*(double *)v20)) * 1000000.0);
                if (v64 >= 999999) {
                  int v64 = 999999;
                }
                if (v64 >= 0xF4240) {
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                }
                v178[0] = (atomic_ullong *)(vcvtmd_s64_f64(a3.n128_f64[0]) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
                LODWORD(v178[1]) = v64;
                goto LABEL_271;
              case 7:
                goto LABEL_270;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              default:
                goto LABEL_414;
            }
          case 2:
            switch(BYTE4(v178[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_270;
              case 2:
                std::vector<char>::size_type v33 = *(atomic_ullong **)v20;
                if (*(void *)v24 != 1) {
                  operator new();
                }
                uint64_t v147 = v178[0];
                if (*((char *)v33 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v164, (const std::string::value_type *)v33[1], v33[2]);
                }
                else
                {
                  long long v148 = *(_OWORD *)(v33 + 1);
                  *(void *)&v164[16] = v33[3];
                  *(_OWORD *)std::string v164 = v148;
                }
                goto LABEL_404;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              default:
                goto LABEL_414;
            }
          case 3:
            atomic_ullong *volatile v34 = *(atomic_ullong **)v20;
            long long v35 = (void *)(*(void *)v20 + 8);
            switch(BYTE4(v178[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_270;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                unint64_t v146 = v178[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v176, v35);
                goto LABEL_399;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                if (v178[0] != v34) {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v178[0] + 8, (char *)v34[1], v34[2], (v34[2] - v34[1]) >> 3);
                }
                goto LABEL_271;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v178[0] + 1, (void *)v34[1], (void *)v34[2], (v34[2] - v34[1]) >> 3);
                goto LABEL_271;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                uint64_t v61 = v178[0];
                atomic_ullong v177 = 0;
                uint64_t v173 = 0;
                uint64_t v174 = 0;
                uint64_t v175 = 0;
                __n128 v176 = 0uLL;
                std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v35, &v170);
                turi::flexible_type_impl::ndarray<double>::ndarray(v164, &v170, (uint64_t)&v176, (uint64_t)&v173, 0);
                if (v171) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v171);
                }
                if (v173)
                {
                  uint64_t v174 = v173;
                  operator delete((void *)v173);
                }
                if (v176.n128_u64[0])
                {
                  v176.n128_u64[1] = v176.n128_u64[0];
                  operator delete((void *)v176.n128_u64[0]);
                }
                goto LABEL_207;
              default:
                goto LABEL_414;
            }
          case 4:
            size_t v29 = *(atomic_ullong **)v20;
            char v30 = (uint64_t *)(*(void *)v20 + 8);
            switch(BYTE4(v178[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_270;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                unint64_t v146 = v178[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v176, v30);
                goto LABEL_399;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)&v163, v178[0] + 1, v30);
                goto LABEL_271;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                if (v178[0] != v29) {
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v178[0] + 1), (uint64_t *)v29[1], (uint64_t *)v29[2], (v29[2] - v29[1]) >> 4);
                }
                goto LABEL_271;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                uint64_t v52 = v178[0];
                atomic_ullong v177 = 0;
                __n128 v176 = 0uLL;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v176, (uint64_t *)v29[1], (uint64_t *)v29[2], (v29[2] - v29[1]) >> 4);
                turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v176, v164);
                long long v53 = *(_OWORD *)v164;
                *(_OWORD *)std::string v164 = 0uLL;
                uint64_t v54 = (std::__shared_weak_count *)v52[2];
                *(_OWORD *)(v52 + 1) = v53;
                if (v54) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                }
                long long v55 = (void *)v52[3];
                if (v55)
                {
                  v52[4] = (atomic_ullong)v55;
                  operator delete(v55);
                  v52[3] = 0;
                  v52[4] = 0;
                  v52[5] = 0;
                }
                uint64_t v56 = (void *)v52[6];
                *(_OWORD *)(v52 + 3) = *(_OWORD *)&v164[16];
                v52[5] = *(void *)v165;
                *(_OWORD *)&v164[16] = 0uLL;
                *(void *)unint64_t v165 = 0;
                if (v56)
                {
                  v52[7] = (atomic_ullong)v56;
                  operator delete(v56);
                  v52[6] = 0;
                  v52[7] = 0;
                  v52[8] = 0;
                  uint64_t v56 = *(void **)&v164[16];
                }
                *((_OWORD *)v52 + 3) = *(_OWORD *)&v165[8];
                v52[8] = *(void *)&v165[24];
                memset(&v165[8], 0, 24);
                v52[9] = v166;
                if (v56)
                {
                  *(void *)&v164[24] = v56;
                  operator delete(v56);
                }
                if (*(void *)&v164[8]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v164[8]);
                }
                uint64_t v173 = (uint64_t)&v176;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
                goto LABEL_271;
              default:
                goto LABEL_414;
            }
          case 5:
            long long v36 = *(atomic_ullong **)v20;
            switch(BYTE4(v178[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_270;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                long long v156 = v178[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v176, v36 + 1);
                uint64_t v151 = v156 + 1;
                if (*((char *)v156 + 31) < 0) {
                  goto LABEL_400;
                }
                goto LABEL_401;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                if (v178[0] != v36) {
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v178[0] + 1, (uint64_t *)v36[1], (uint64_t *)v36[2], (v36[2] - v36[1]) >> 5);
                }
                goto LABEL_271;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              default:
                goto LABEL_414;
            }
          case 6:
            switch(BYTE4(v178[1]))
            {
              case 0:
                uint64_t v25 = (uint64_t)(*(void *)v20 << 8) >> 8;
                goto LABEL_68;
              case 1:
                a3.n128_f64[0] = (double)*(int *)(v20 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v20 << 8) >> 8);
LABEL_221:
                v178[0] = (atomic_ullong *)a3.n128_u64[0];
                goto LABEL_271;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                uint64_t v147 = v178[0];
                unsigned __int32 v157 = *(_DWORD *)(v20 + 8);
                v176.n128_u64[0] = *(void *)v20;
                v176.n128_u32[2] = v157;
                turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v176, (std::string *)v164);
LABEL_404:
                v154 = v147 + 1;
                if (*((char *)v147 + 31) < 0) {
                  operator delete((void *)*v154);
                }
                a3 = *(__n128 *)v164;
                atomic_ullong v155 = *(void *)&v164[16];
LABEL_407:
                v154[2] = v155;
                *(__n128 *)v154 = a3;
                goto LABEL_271;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 6:
                int v74 = *(_DWORD *)(v20 + 8);
                v178[0] = *(atomic_ullong **)v20;
                LODWORD(v178[1]) = v74;
                goto LABEL_271;
              case 7:
                goto LABEL_270;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              default:
                goto LABEL_414;
            }
          case 7:
            switch(BYTE4(v178[1]))
            {
              case 0:
              case 6:
                goto LABEL_270;
              case 1:
                uint64_t v25 = 0x7FF8000000000000;
LABEL_68:
                v178[0] = (atomic_ullong *)v25;
                goto LABEL_271;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                long long v149 = v178[0] + 1;
                if (*((char *)v178[0] + 31) < 0) {
                  operator delete((void *)*v149);
                }
                *long long v149 = 0;
                v149[1] = 0;
                v149[2] = 0;
                goto LABEL_271;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 7:
                goto LABEL_271;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              default:
                goto LABEL_414;
            }
          case 8:
            long long v37 = (uint64_t *)(*(void *)v20 + 8);
            switch(BYTE4(v178[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_270;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                unint64_t v146 = v178[0];
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_399;
              case 3:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                uint64_t v62 = v178[0];
                turi::flexible_type_impl::get_vec_visitor::operator()(v37, (double **)v164, a3.n128_u64[0]);
                atomic_ullong *volatile v63 = (void *)v62[1];
                if (v63)
                {
                  v62[2] = (atomic_ullong)v63;
                  operator delete(v63);
                  v62[1] = 0;
                  v62[2] = 0;
                  v62[3] = 0;
                }
                a3.n128_u64[0] = *(void *)v164;
                *(_OWORD *)(v62 + 1) = *(_OWORD *)v164;
                v62[3] = *(void *)&v164[16];
                goto LABEL_271;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                uint64_t v61 = v178[0];
                turi::flexible_type_impl::get_ndvec_visitor::operator()(v37, v164, a3.n128_u64[0]);
LABEL_207:
                long long v70 = *(_OWORD *)v164;
                *(_OWORD *)std::string v164 = 0uLL;
                atomic_ullong *volatile v71 = (std::__shared_weak_count *)v61[2];
                *(_OWORD *)(v61 + 1) = v70;
                if (v71) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v71);
                }
                uint64_t v72 = (void *)v61[3];
                if (v72)
                {
                  v61[4] = (atomic_ullong)v72;
                  operator delete(v72);
                  v61[3] = 0;
                  v61[4] = 0;
                  v61[5] = 0;
                }
                atomic_ullong *volatile v73 = (void *)v61[6];
                *(_OWORD *)(v61 + 3) = *(_OWORD *)&v164[16];
                v61[5] = *(void *)v165;
                *(_OWORD *)&v164[16] = 0uLL;
                *(void *)unint64_t v165 = 0;
                if (v73)
                {
                  v61[7] = (atomic_ullong)v73;
                  operator delete(v73);
                  v61[6] = 0;
                  v61[7] = 0;
                  v61[8] = 0;
                  atomic_ullong *volatile v73 = *(void **)&v164[16];
                }
                a3.n128_u64[0] = *(void *)&v165[8];
                *((_OWORD *)v61 + 3) = *(_OWORD *)&v165[8];
                v61[8] = *(void *)&v165[24];
                memset(&v165[8], 0, 24);
                v61[9] = v166;
                if (v73) {
                  goto LABEL_214;
                }
                goto LABEL_215;
              default:
                goto LABEL_414;
            }
          case 9:
            size_t v31 = *(atomic_ullong **)v20;
            BOOL v32 = (char ***)(*(void *)v20 + 8);
            switch(BYTE4(v178[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_270;
              case 2:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                unint64_t v146 = v178[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v176, v32);
LABEL_399:
                uint64_t v151 = v146 + 1;
                if (*((char *)v146 + 31) < 0) {
LABEL_400:
                }
                  operator delete((void *)*v151);
LABEL_401:
                a3 = *(__n128 *)v164;
                atomic_ullong v152 = *(void *)&v164[16];
LABEL_402:
                v151[2] = v152;
                *(__n128 *)uint64_t v151 = a3;
                goto LABEL_271;
              case 3:
                uint64_t v161 = *(atomic_ullong **)v20;
                if (*(void *)v24 != 1) {
                  operator new();
                }
                atomic_ullong v47 = (char *)(v178[0] + 1);
                if (!v161[9])
                {
                  char v49 = (uint64_t *)v161[3];
                  double v48 = (uint64_t *)v161[4];
                  int v50 = (void *)v161[1];
                  if (v48 == v49 || v50 == 0)
                  {
                    uint64_t v88 = 0;
                  }
                  else
                  {
                    uint64_t v88 = 1;
                    do
                    {
                      uint64_t v89 = *v49++;
                      v88 *= v89;
                    }
                    while (v49 != v48);
                  }
                  if (v88 == (uint64_t)(v50[1] - *v50) >> 3
                    && turi::flexible_type_impl::ndarray<double>::last_index(v32) == ((*v32)[1] - **v32) >> 3)
                  {
                    if (!turi::flexible_type_impl::ndarray<double>::is_full(v32)) {
                      turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                    }
                    if (v47 != (char *)*v32) {
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v47, **v32, (uint64_t)(*v32)[1], ((*v32)[1] - **v32) >> 3);
                    }
                    goto LABEL_271;
                  }
                }
                if (!turi::flexible_type_impl::ndarray<double>::is_valid(v32)) {
                  turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                }
                if (turi::flexible_type_impl::ndarray<double>::is_full(v32))
                {
                  turi::flexible_type_impl::ndarray<double>::ndarray(v164, (uint64_t)v32);
                  goto LABEL_370;
                }
                __n128 v176 = 0uLL;
                atomic_ullong v177 = 0;
                uint64_t v174 = 0;
                uint64_t v175 = 0;
                atomic_ullong v170 = 0;
                uint64_t v171 = 0;
                uint64_t v172 = 0;
                uint64_t v173 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(v164, (uint64_t)&v176, (uint64_t)&v173, (uint64_t)&v170, 0);
                if (v170)
                {
                  uint64_t v171 = v170;
                  operator delete(v170);
                }
                if (v173)
                {
                  uint64_t v174 = v173;
                  operator delete((void *)v173);
                }
                if (v176.n128_u64[0])
                {
                  v176.n128_u64[1] = v176.n128_u64[0];
                  operator delete((void *)v176.n128_u64[0]);
                }
                atomic_ullong v166 = 0;
                if (&v164[16] != (unsigned char *)(v161 + 3)) {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v164[16], (char *)v161[3], v161[4], (v161[4] - v161[3]) >> 3);
                }
                unint64_t v91 = (uint64_t *)v161[3];
                uint64_t v90 = (uint64_t *)v161[4];
                if (v90 == v91 || !*v32)
                {
                  unint64_t v92 = 0;
                }
                else
                {
                  unint64_t v92 = 1;
                  do
                  {
                    uint64_t v93 = *v91++;
                    v92 *= v93;
                  }
                  while (v91 != v90);
                }
                std::vector<double>::resize(*(uint64_t *)v164, v92);
                std::vector<unsigned long>::resize((uint64_t)&v165[8], (v161[4] - v161[3]) >> 3);
                if (*(void *)&v164[24] == *(void *)&v164[16]
                  || *(void *)(*(void *)v164 + 8) == **(void **)v164)
                {
                  goto LABEL_370;
                }
                std::vector<std::pair<unsigned long,unsigned long>>::vector(&v176, (v161[7] - v161[6]) >> 3);
                atomic_ullong v94 = v161[6];
                atomic_ullong v95 = v161[7];
                uint64_t v96 = (unint64_t *)v176.n128_u64[0];
                uint64_t v97 = v95 - v94;
                if (v95 != v94)
                {
                  uint64_t v98 = 0;
                  unint64_t v99 = v97 >> 3;
                  if (v99 <= 1) {
                    unint64_t v99 = 1;
                  }
                  unint64_t v100 = (void *)(v176.n128_u64[0] + 8);
                  do
                  {
                    *(v100 - 1) = *(void *)(v94 + 8 * v98);
                    *unint64_t v100 = v98++;
                    v100 += 2;
                  }
                  while (v99 != v98);
                }
                unint64_t v101 = 126 - 2 * __clz((uint64_t)(v176.n128_u64[1] - (void)v96) >> 4);
                if ((unint64_t *)v176.n128_u64[1] == v96) {
                  uint64_t v102 = 0;
                }
                else {
                  uint64_t v102 = v101;
                }
                std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(v176.n128_i64[1], (unint64_t *)v176.n128_u64[1], (uint64_t)v96, v96, (uint64_t)&v170, v102, 1);
                unint64_t v103 = v176.n128_u64[0];
                uint64_t v104 = *(void *)&v165[8];
                *(void *)(*(void *)&v165[8] + 8 * *(void *)(v176.n128_u64[0] + 8)) = 1;
                uint64_t v105 = v161[7] - v161[6];
                if ((unint64_t)v105 >= 9)
                {
                  unint64_t v106 = v105 >> 3;
                  uint64_t v107 = *(void *)&v164[16];
                  if (v106 <= 2) {
                    unint64_t v106 = 2;
                  }
                  uint64_t v108 = (uint64_t *)(v103 + 24);
                  unint64_t v109 = v106 - 1;
                  do
                  {
                    uint64_t v110 = *(void *)(v107 + 8 * *(v108 - 2)) * *(void *)(v104 + 8 * *(v108 - 2));
                    uint64_t v111 = *v108;
                    v108 += 2;
                    *(void *)(v104 + 8 * v111) = v110;
                    --v109;
                  }
                  while (v109);
                }
                unint64_t v112 = (v161[4] - v161[3]) >> 3;
                atomic_ullong v170 = 0;
                std::vector<unsigned long>::vector(&v173, v112, &v170);
                uint64_t v113 = (void **)v173;
                unint64_t v114 = (void **)v174;
                uint64_t v115 = v174 - v173;
                unint64_t v116 = (v174 - v173) >> 3;
                unint64_t v117 = v116 - 1;
                if (v116 <= 1) {
                  uint64_t v118 = 1;
                }
                else {
                  uint64_t v118 = (v174 - v173) >> 3;
                }
                uint64_t v119 = *(uint64_t **)&v165[8];
                uint64_t v120 = **(void **)v164;
                break;
              case 4:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                goto LABEL_270;
              case 5:
                if (*(void *)v24 != 1) {
                  operator new();
                }
LABEL_270:
                turi::flexible_type_fail(0);
                goto LABEL_271;
              case 8:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                atomic_ullong *volatile v65 = v178[0];
                turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v32, (turi::image_type *)v164);
                long long v66 = *(_OWORD *)v164;
                *(_OWORD *)std::string v164 = 0uLL;
                __n128 v67 = *(__n128 *)(v65 + 1);
                *(_OWORD *)(v65 + 1) = v66;
                __n128 v176 = v67;
                boost::detail::shared_count::~shared_count((atomic_uint **)&v176.n128_u64[1]);
                long long v68 = *(_OWORD *)&v164[16];
                long long v69 = *(_OWORD *)v165;
                *(_OWORD *)(v65 + 7) = *(_OWORD *)&v165[16];
                *(_OWORD *)(v65 + 5) = v69;
                *(_OWORD *)(v65 + 3) = v68;
                boost::detail::shared_count::~shared_count((atomic_uint **)&v164[8]);
                goto LABEL_271;
              case 9:
                if (*(void *)v24 != 1) {
                  operator new();
                }
                uint64_t v57 = v178[0];
                atomic_ullong v59 = v31[1];
                atomic_ullong v58 = v31[2];
                if (v58) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
                }
                int v60 = (std::__shared_weak_count *)v57[2];
                v57[1] = v59;
                v57[2] = v58;
                if (v60) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v60);
                }
                if (v57 != v31)
                {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v57 + 24, (char *)v31[3], v31[4], (v31[4] - v31[3]) >> 3);
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v57 + 48, (char *)v31[6], v31[7], (v31[7] - v31[6]) >> 3);
                }
                v57[9] = v31[9];
                goto LABEL_271;
              default:
                goto LABEL_414;
            }
            break;
          default:
LABEL_414:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
        }
        while (1)
        {
          if (v114 == v113)
          {
            uint64_t v128 = 0;
            uint64_t v129 = *(void *)(*(void *)v161[1] + 8 * v161[9]);
          }
          else
          {
            uint64_t v121 = 0;
            uint64_t v122 = (uint64_t *)v161[6];
            unint64_t v123 = v113;
            uint64_t v124 = v118;
            do
            {
              uint64_t v126 = (uint64_t)*v123++;
              uint64_t v125 = v126;
              uint64_t v127 = *v122++;
              v121 += v127 * v125;
              --v124;
            }
            while (v124);
            uint64_t v128 = 0;
            uint64_t v129 = *(void *)(*(void *)v161[1] + 8 * (v161[9] + v121));
            uint64_t v130 = v113;
            uint64_t v131 = v119;
            uint64_t v132 = v118;
            do
            {
              uint64_t v134 = (uint64_t)*v130++;
              uint64_t v133 = v134;
              uint64_t v135 = *v131++;
              v128 += v135 * v133;
              --v132;
            }
            while (v132);
          }
          *(void *)(v120 + 8 * v128) = v129;
          uint64_t v136 = v114 - v113;
          unint64_t v137 = v116 - 1;
          if (v115 < 1) {
            goto LABEL_359;
          }
          atomic_ullong v138 = v161[3];
          unint64_t v139 = (unint64_t)v113[v117] + 1;
          v113[v117] = (void *)v139;
          if (v139 >= *(void *)(v138 + 8 * v117)) {
            break;
          }
          uint64_t v136 = 1;
          unint64_t v137 = v116 - 1;
LABEL_359:
          if ((v137 & 0x8000000000000000) != 0) {
            goto LABEL_366;
          }
LABEL_360:
          if (!v136) {
            goto LABEL_366;
          }
        }
        atomic_ullong v140 = v138 - 16;
        uint64_t v141 = v114 - v113;
        v142 = (unint64_t *)((char *)v113 + (v115 & 0xFFFFFFFFFFFFFFF8) - 16);
        while (1)
        {
          uint64_t v143 = v141 - 1;
          v142[1] = 0;
          if (v141 - 1 <= 0) {
            break;
          }
          unint64_t v144 = *v142 + 1;
          *v142-- = v144;
          unint64_t v145 = *(void *)(v140 + 8 * v141--);
          if (v144 < v145)
          {
            uint64_t v136 = 1;
            if (((v143 - 1) & 0x8000000000000000) == 0) {
              goto LABEL_360;
            }
            break;
          }
        }
LABEL_366:
        if (v113)
        {
          uint64_t v174 = (uint64_t)v113;
          operator delete(v113);
        }
        if (v176.n128_u64[0])
        {
          v176.n128_u64[1] = v176.n128_u64[0];
          operator delete((void *)v176.n128_u64[0]);
        }
LABEL_370:
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v164);
        if (!turi::flexible_type_impl::ndarray<double>::is_full(v164)) {
          turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
        }
        if (v47 != *(char **)v164) {
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v47, **(char ***)v164, *(void *)(*(void *)v164 + 8), (uint64_t)(*(void *)(*(void *)v164 + 8) - **(void **)v164) >> 3);
        }
        if (*(void *)&v165[8])
        {
          *(void *)&v165[16] = *(void *)&v165[8];
          operator delete(*(void **)&v165[8]);
        }
        atomic_ullong *volatile v73 = *(void **)&v164[16];
        if (*(void *)&v164[16])
        {
LABEL_214:
          *(void *)&v164[24] = v73;
          operator delete(v73);
        }
LABEL_215:
        if (*(void *)&v164[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v164[8]);
        }
LABEL_271:
        switch(*(unsigned char *)(v20 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v75 = *(atomic_ullong **)v20;
              if (!*(void *)v20) {
                goto LABEL_303;
              }
              if (*((char *)v75 + 31) < 0) {
                operator delete((void *)v75[1]);
              }
              uint64_t v76 = v75;
              uint64_t v77 = 0x1012C404EF22A49;
              goto LABEL_302;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v84 = *(atomic_ullong **)v20;
              if (!*(void *)v20) {
                goto LABEL_303;
              }
              uint64_t v85 = (void *)v84[1];
              if (v85)
              {
                v84[2] = (atomic_ullong)v85;
                operator delete(v85);
              }
              uint64_t v76 = v84;
              uint64_t v77 = 0x1080C409938AC02;
              goto LABEL_302;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string v78 = *(atomic_ullong **)v20;
              if (!*(void *)v20) {
                goto LABEL_303;
              }
              *(void *)std::string v164 = v78 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
              goto LABEL_297;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string v78 = *(atomic_ullong **)v20;
              if (!*(void *)v20) {
                goto LABEL_303;
              }
              *(void *)std::string v164 = v78 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
LABEL_297:
              uint64_t v76 = v78;
              uint64_t v77 = 0x1020C405E66F15BLL;
              goto LABEL_302;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v86 = *(atomic_ullong **)v20;
              if (!*(void *)v20) {
                goto LABEL_303;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v86 + 2);
              uint64_t v76 = v86;
              unsigned int v83 = -235920773;
              goto LABEL_301;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v79 = *(atomic_ullong **)v20;
              if (*(void *)v20)
              {
                uint64_t v80 = (void *)v79[6];
                if (v80)
                {
                  v79[7] = (atomic_ullong)v80;
                  operator delete(v80);
                }
                uint64_t v81 = (void *)v79[3];
                if (v81)
                {
                  v79[4] = (atomic_ullong)v81;
                  operator delete(v81);
                }
                uint64_t v82 = (std::__shared_weak_count *)v79[2];
                if (v82) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v82);
                }
                uint64_t v76 = v79;
                unsigned int v83 = 2071181815;
LABEL_301:
                uint64_t v77 = v83 | 0x1030C4000000000;
LABEL_302:
                MEMORY[0x22A614FA0](v76, v77);
              }
LABEL_303:
              *(void *)uint64_t v20 = 0;
            }
            break;
          default:
            break;
        }
        long long v87 = v178[0];
        *(atomic_ullong **)(v20 + 5) = *(atomic_ullong **)((char *)v178 + 5);
        *(void *)uint64_t v20 = v87;
        *(unsigned char *)(v20 + 12) = BYTE4(v178[1]);
LABEL_305:
        ++v13;
      }
      while (v13 != v11);
LABEL_408:
      ++v6;
      uint64_t v3 = *a1;
    }
    while (v6 < (a1[1] - *a1) >> 4);
  }
}

void sub_22410BE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  size_t v18 = *(void **)(v15 + 48);
  if (v18)
  {
    *(void *)(v15 + 56) = v18;
    operator delete(v18);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va);
  switch(*(unsigned char *)(v16 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 + 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v19 = *(void *)(v15 + 88);
      if (!v19) {
        goto LABEL_29;
      }
      if (*(char *)(v19 + 31) < 0) {
        operator delete(*(void **)(v19 + 8));
      }
      uint64_t v20 = (void *)v19;
      uint64_t v21 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 + 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v25 = *(void **)(v15 + 88);
      if (!v25) {
        goto LABEL_29;
      }
      BOOL v26 = (void *)v25[1];
      if (v26)
      {
        v25[2] = v26;
        operator delete(v26);
      }
      uint64_t v20 = v25;
      uint64_t v21 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 + 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      int v22 = *(void **)(v15 + 88);
      if (!v22) {
        goto LABEL_29;
      }
      *(void *)(v15 + 24) = v22 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 200));
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 + 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      int v22 = *(void **)(v15 + 88);
      if (!v22) {
        goto LABEL_29;
      }
      *(void *)(v15 + 24) = v22 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 200));
LABEL_23:
      uint64_t v20 = v22;
      uint64_t v21 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 + 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v27 = *(void *)(v15 + 88);
      if (!v27) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v27 + 16));
      uint64_t v20 = (void *)v27;
      unsigned int v24 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 + 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      size_t v23 = *(void **)(v15 + 88);
      if (!v23) {
        goto LABEL_29;
      }
      uint64_t v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v23);
      unsigned int v24 = 2071181815;
LABEL_27:
      uint64_t v21 = v24 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v20, v21);
LABEL_29:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

void turi::sframe_rows::type_check_inplace(std::vector<turi::flex_type_enum> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.cpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"typelist.size()", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.cpp", "operator()", 83, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::sframe_rows::type_check_inplace(std::vector<turi::flex_type_enum> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22410C62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe_rows::type_check(turi::sframe_rows *a1@<X0>, void *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v5 = a2[1] - *a2;
  uint64_t v10 = (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 4;
  uint64_t v11 = v5;
  if (v5 != v10)
  {
    unint64_t v8 = &v11;
    uint64_t v9 = &v10;
    turi::sframe_rows::type_check(std::vector<turi::flex_type_enum> const&)const::$_0::operator()();
  }
  unint64_t v6 = (uint64_t *)turi::sframe_rows::sframe_rows(a3, (uint64_t **)a1);
  turi::sframe_rows::type_check_inplace(v6, a2, v7);
}

void turi::sframe_rows::type_check(std::vector<turi::flex_type_enum> const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.cpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"typelist.size()", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  __n128 v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.cpp", "operator()", 123, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::sframe_rows::type_check(std::vector<turi::flex_type_enum> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22410C94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

turi::sframe_rows *turi::sframe_rows::sframe_rows(uint64_t **this, uint64_t **a2)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  *((unsigned char *)this + 24) = 1;
  if (this != a2) {
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>((uint64_t)this, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)a2 + 24) = 0;
  return (turi::sframe_rows *)this;
}

void sub_22410CAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    char v15 = &v13[16 * v10];
    int v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_22410CBBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,long &,turi::flex_undefined,void>@<X0>(unint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  __n128 result = std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<long &,turi::flex_undefined,std::allocator<std::vector<turi::flexible_type>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22410CC20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<long &,turi::flex_undefined,std::allocator<std::vector<turi::flexible_type>>,0>(void *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7599A8;
  std::allocator<std::vector<turi::flexible_type>>::construct[abi:ne180100]<std::vector<turi::flexible_type>,long &,turi::flex_undefined>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_22410CC94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocator<std::vector<turi::flexible_type>>::construct[abi:ne180100]<std::vector<turi::flexible_type>,long &,turi::flex_undefined>(uint64_t a1, void *a2, unint64_t *a3)
{
  v19[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = *a3;
  *(uint64_t *)((char *)v19 + 5) = 0x700000000000000;
  v19[0] = 0;
  __n128 result = std::vector<turi::flexible_type>::vector(a2, v4, v19);
  switch(BYTE4(v19[1]))
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v19[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v6 = v19[0];
        if (v19[0])
        {
          if (*(char *)(v19[0] + 31) < 0) {
            operator delete(*(void **)(v19[0] + 8));
          }
          uint64_t v7 = (void *)v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v19[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v19[0];
        if (v19[0])
        {
          uint64_t v10 = *(void **)(v19[0] + 8);
          if (v10)
          {
            *(void *)(v19[0] + 16) = v10;
            operator delete(v10);
          }
          uint64_t v7 = (void *)v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v19[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v19[0];
        if (v19[0])
        {
          uint64_t v18 = (void **)(v19[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v19[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v19[0];
        if (v19[0])
        {
          uint64_t v18 = (void **)(v19[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_18:
          uint64_t v7 = (void *)v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v19[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = v19[0];
        if (v19[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v19[0] + 16));
          uint64_t v7 = (void *)v17;
          unsigned int v16 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v19[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v12 = (void *)v19[0];
        if (v19[0])
        {
          unint64_t v13 = *(void **)(v19[0] + 48);
          if (v13)
          {
            *(void *)(v19[0] + 56) = v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            void v12[4] = v14;
            operator delete(v14);
          }
          char v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v7 = v12;
          unsigned int v16 = 2071181815;
LABEL_31:
          uint64_t v8 = v16 | 0x1030C4000000000;
LABEL_32:
          __n128 result = (void *)MEMORY[0x22A614FA0](v7, v8);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_22410CED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::gl_sarray::clip(&a10);
      break;
    case 3:
      turi::gl_sarray::clip(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::gl_sarray::clip(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>&,void>@<X0>(uint64_t **a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::vector<turi::flexible_type>&,std::allocator<std::vector<turi::flexible_type>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_22410CFE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::vector<turi::flexible_type>&,std::allocator<std::vector<turi::flexible_type>>,0>(uint64_t a1, uint64_t **a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D7599A8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((void *)(a1 + 24), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_22410D060(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void turi::sframe_save_naive(turi::sframe *this, const std::string *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  memset(&v34, 0, sizeof(v34));
  std::string __p = 0;
  BOOL v32 = 0;
  std::vector<char>::size_type v33 = 0;
  if (*((void *)this + 3))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *((void *)this + 5);
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 6) - v4) >> 3) <= v3) {
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      }
      uint64_t v5 = (long long *)(v4 + 24 * v3);
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v6 = *v5;
        v36.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v6;
      }
      std::vector<std::string>::pointer end = v34.__end_;
      if (v34.__end_ >= v34.__end_cap_.__value_)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34.__end_ - (char *)v34.__begin_) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3) > v10) {
          unint64_t v10 = 0x5555555555555556 * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v34.__end_cap_.__value_ - (char *)v34.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v10;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v34.__end_cap_;
        if (v11) {
          unint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v34.__end_cap_, v11);
        }
        else {
          unint64_t v12 = 0;
        }
        unint64_t v13 = v12 + v9;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        long long v14 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
        v13->__r_.__value_.__r.__words[2] = v36.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        memset(&v36, 0, sizeof(v36));
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v34, &__v);
        char v15 = v34.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v34.__end_ = v15;
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
        v34.__end_->__r_.__value_.__r.__words[2] = v36.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        v34.__end_ = end + 1;
      }
      char v16 = turi::sframe::column_type(this, v3);
      char v17 = v16;
      uint64_t v18 = v32;
      if (v32 >= v33)
      {
        unint64_t v20 = (unint64_t)__p;
        uint64_t v21 = v32 - (unsigned char *)__p;
        uint64_t v22 = v32 - (unsigned char *)__p + 1;
        if (v22 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = v33 - (unsigned char *)__p;
        if (2 * (v33 - (unsigned char *)__p) > (unint64_t)v22) {
          uint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v24 = v22;
        }
        if (v24) {
          uint64_t v25 = (char *)operator new(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        BOOL v26 = &v25[v21];
        uint64_t v27 = &v25[v21];
        *uint64_t v27 = v17;
        uint64_t v19 = v27 + 1;
        if (v18 != (char *)v20)
        {
          uint64_t v28 = &v18[~v20];
          do
          {
            char v29 = *--v18;
            (v28--)[(void)v25] = v29;
          }
          while (v18 != (char *)v20);
          BOOL v26 = v25;
        }
        std::string __p = v26;
        BOOL v32 = v19;
        std::vector<char>::size_type v33 = &v25[v24];
        if (v20) {
          operator delete((void *)v20);
        }
      }
      else
      {
        *BOOL v32 = v16;
        uint64_t v19 = v18 + 1;
      }
      BOOL v32 = v19;
      ++v3;
    }
    while (v3 < *((void *)this + 3));
  }
  turi::sframe::sframe((turi::sframe *)&__v);
  (*(uint64_t (**)(turi::sframe *))(*(void *)this + 24))(this);
  turi::sframe::open_for_write((uint64_t)&__v, &v34, &__p, a2, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
}

void sub_22410D560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__pa, void *a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a68);
  uint64_t v69 = a15;
  a15 = 0;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  turi::sframe::~sframe((turi::sframe *)&a28);
  if (__pa)
  {
    a19 = __pa;
    operator delete(__pa);
  }
  std::string __p = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::sframe_save_blockwise(unint64_t *a1, const std::string *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)a1);
  int v4 = pthread_mutex_init(&v22, 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  uint64_t v28 = 0;
  uint64_t v23 = 128;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  char v41 = 0;
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    long long v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    long long v6 = a2;
  }
  uint64_t v7 = (uint64_t)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v8 = *(unsigned __int8 *)(v7 + size--);
  }
  while (v8 != 46);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=(&__p, a2);
  }
  else
  {
    std::string::basic_string(&v21, a2, 0, size, (std::allocator<char> *)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v21;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v9 + 5);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_s = &__s;
  }
  else {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(p_s, p_p, v9);
  }
  strcpy((char *)p_s + v9, ".sidx");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v12 = __p.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, v12 + 5);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v13 = &v18;
  }
  else {
    unint64_t v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v14 = &__p;
    }
    else {
      long long v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".0000");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = __s;
  }
  turi::v2_block_impl::block_writer::init((uint64_t)&v22, &v17, 1uLL, a1[3]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v16, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string v16 = v18;
  }
  turi::v2_block_impl::block_writer::open_segment((uint64_t)&v22, 0);
}

void sub_22410ECAC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  turi::v2_block_impl::block_writer::~block_writer((void **)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void turi::sframe_save(turi *this, uint64_t a2)
{
  if (*((void *)this + 3))
  {
    unint64_t v4 = 0;
    char v5 = 0;
    do
    {
      turi::sframe::select_column((uint64_t)this, v4, &v18);
      turi::index_file_information::index_file_information(&v10, (const turi::index_file_information *)(v18 + 8));
      int v6 = v11;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v17, v17[1]);
      uint64_t v19 = (void **)&v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
      if (__p)
      {
        char v15 = __p;
        operator delete(__p);
      }
      if (v13 < 0) {
        operator delete(v12);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      BOOL v7 = v6 < 2;
      if (*((void *)&v18 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
      }
      v5 |= v7;
      ++v4;
    }
    while (v4 < *((void *)this + 3));
    if (v5)
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v9 = *(std::string *)a2;
      }
      turi::sframe_save_naive(this, &v9);
    }
  }
  turi::sframe_fast_compact(this, (const turi::sframe *)a2);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v8 = *(std::string *)a2;
  }
  turi::sframe_save_blockwise((unint64_t *)this, &v8);
}

void sub_22410F0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sframe_save_weak_reference(void *a1, std::string *__str)
{
  uint64_t v180 = *MEMORY[0x263EF8340];
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    char v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    char v5 = __str;
  }
  int v6 = (char *)&v5[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size) {
      goto LABEL_11;
    }
    int v7 = v6[size--];
  }
  while (v7 != 46);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=(&__p, __str);
  }
  else
  {
    std::string::basic_string(&__stra, __str, 0, size, (std::allocator<char> *)&v158);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __stra;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = *__str;
  }
  turi::fileio::get_protocol(&__s, (std::string::size_type)&v152);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  memset(v150, 0, sizeof(v150));
  memset(v149, 0, sizeof(v149));
  memset(&v148, 0, sizeof(v148));
  unint64_t v8 = a1[3];
  std::vector<std::vector<BOOL>>::resize(v150, v8);
  std::vector<BOOL>::resize((uint64_t)v149, v8, 0);
  std::vector<std::string>::resize(&v148, v8);
  unint64_t v122 = v8;
  int v147 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v147);
  uint64_t v121 = (turi::sframe_index_file_information *)(a1 + 1);
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)&v158, (const turi::sframe_index_file_information *)(a1 + 1));
  if (a1[3])
  {
    uint64_t v9 = (uint64_t)a1;
    unint64_t v10 = 0;
    while (1)
    {
      turi::sframe::select_column(v9, v10, &__s1);
      turi::index_file_information::index_file_information(&__stra, (const turi::index_file_information *)(__s1.__r_.__value_.__r.__words[0] + 8));
      if (__s1.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_);
      }
      std::string::operator=(&v148.__begin_[v10], &__stra);
      std::vector<BOOL>::resize(v150[0] + 24 * v10, 0xAAAAAAAAAAAAAAABLL * ((v177 - v176) >> 3), 0);
      uint64_t v11 = v176;
      if (v177 != v176) {
        break;
      }
LABEL_50:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v178, v178[1]);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      if (v174)
      {
        uint64_t v175 = v174;
        operator delete(v174);
      }
      if (v173 < 0) {
        operator delete(v172);
      }
      if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__stra.__r_.__value_.__l.__data_);
      }
      ++v10;
      uint64_t v9 = (uint64_t)a1;
      if (v10 >= a1[3]) {
        goto LABEL_57;
      }
    }
    unint64_t v12 = 0;
    while (1)
    {
      char v13 = (long long *)(v11 + 24 * v12);
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        v146.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v14;
      }
      turi::fileio::get_protocol(&v146, (std::string::size_type)&__s1);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v17 = v154;
      if ((v154 & 0x80u) != 0) {
        uint64_t v17 = v153;
      }
      if (v16 != v17) {
        goto LABEL_43;
      }
      long long v18 = (v154 & 0x80u) == 0 ? &v152 : (void **)v152;
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
        break;
      }
      int v23 = memcmp(__s1.__r_.__value_.__l.__data_, v18, __s1.__r_.__value_.__l.__size_);
      unint64_t v20 = (uint64_t *)(*(void *)(v150[0] + 24 * v10) + 8 * (v12 >> 6));
      uint64_t v21 = 1 << v12;
      if (!v23) {
        goto LABEL_46;
      }
LABEL_44:
      uint64_t v22 = *v20 | v21;
LABEL_47:
      *unint64_t v20 = v22;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      ++v12;
      uint64_t v11 = v176;
      if (v12 >= 0xAAAAAAAAAAAAAAABLL * ((v177 - v176) >> 3)) {
        goto LABEL_50;
      }
    }
    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
LABEL_42:
      unint64_t v20 = (uint64_t *)(*(void *)(v150[0] + 24 * v10) + 8 * (v12 >> 6));
      uint64_t v21 = 1 << v12;
LABEL_46:
      uint64_t v22 = *v20 & ~v21;
      goto LABEL_47;
    }
    p_s1 = &__s1;
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v18)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      long long v18 = (void **)((char *)v18 + 1);
      if (!--v15) {
        goto LABEL_42;
      }
    }
LABEL_43:
    unint64_t v20 = (uint64_t *)(*(void *)(v150[0] + 24 * v10) + 8 * (v12 >> 6));
    uint64_t v21 = 1 << v12;
    goto LABEL_44;
  }
LABEL_57:
  if ((v168[7] & 0x80000000) != 0) {
    operator delete(v167);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v165, (void *)v165[1]);
  __stra.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__stra);
  __stra.__r_.__value_.__r.__words[0] = (std::string::size_type)&v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__stra);
  turi::sframe::sframe((turi::sframe *)&__stra);
  uint64_t v120 = __str;
  if (v8)
  {
    unint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = v150[0] + 24 * v24;
      unint64_t v26 = *(void *)(v25 + 8);
      int v27 = v26 & 0x3F;
      BOOL v28 = v26 <= 0x3F && v27 == 0;
      unint64_t v29 = v24 >> 3;
      if (v28) {
        break;
      }
      int v30 = 0;
      long long v31 = *(void **)v25;
      long long v32 = &v31[v26 >> 6];
      while (((*v31 >> v30) & 1) == 0)
      {
        v31 += v30 == 63;
        if (v30 == 63) {
          int v30 = 0;
        }
        else {
          ++v30;
        }
        if (v30 == v27 && v31 == v32) {
          goto LABEL_72;
        }
      }
      *(void *)((char *)v149[0] + (v29 & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      turi::sframe::select_column((uint64_t)a1, v24, &v145);
      uint64_t v39 = a1[5];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[6] - v39) >> 3) <= v24) {
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      }
      long long v40 = (long long *)(v39 + 24 * v24);
      if (*((char *)v40 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)v40, *((void *)v40 + 1));
      }
      else
      {
        long long v41 = *v40;
        __s1.__r_.__value_.__r.__words[2] = *((void *)v40 + 2);
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v41;
      }
      turi::sframe::add_column((uint64_t)&__stra, &v145, (uint64_t)&__s1, (uint64_t)&v158);
      turi::sframe::operator=((uint64_t)&__stra, (uint64_t)&v158);
      turi::sframe::~sframe((turi::sframe *)&v158);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v145 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v145 + 1));
      }
      if (++v24 == v8) {
        goto LABEL_144;
      }
    }
LABEL_72:
    *(void *)((char *)v149[0] + (v29 & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v24);
    long long v33 = &v148.__begin_[v24];
    if (SHIBYTE(v33->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v33->__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(&v144, v33->__r_.__value_.__l.__data_, v33->__r_.__value_.__l.__size_);
LABEL_77:
        turi::parse_v2_segment_filename((uint64_t)&v144, &v158);
        long long v36 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
        LODWORD(__s1.__r_.__value_.__l.__data_) = v158.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)__s1.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v158.__r_.__value_.__r.__words[2]
                                                                            + 3);
        int v37 = SHIBYTE(v158.__r_.__value_.__r.__words[2]);
        memset(&v158, 0, sizeof(v158));
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v144.__r_.__value_.__l.__data_);
        }
        uint64_t instance = turi::fileio::file_handle_pool::get_instance(v35);
        if (v37 < 0)
        {
          std::string::__init_copy_ctor_external(&v143, (const std::string::value_type *)v36, *((std::string::size_type *)&v36 + 1));
        }
        else
        {
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v36;
          LODWORD(v143.__r_.__value_.__r.__words[2]) = __s1.__r_.__value_.__l.__data_;
          *(_DWORD *)((char *)&v143.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)__s1.__r_.__value_.__r.__words
                                                                                  + 3);
          *((unsigned char *)&v143.__r_.__value_.__s + 23) = v37;
        }
        turi::fileio::file_handle_pool::unmark_file_for_delete(instance, (uint64_t)&v143);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v143.__r_.__value_.__l.__data_);
          if ((v37 & 0x80000000) == 0) {
            goto LABEL_87;
          }
        }
        else if ((v37 & 0x80000000) == 0)
        {
          goto LABEL_87;
        }
        operator delete((void *)v36);
      }
    }
    else if (*((unsigned char *)&v33->__r_.__value_.__s + 23))
    {
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v34;
      goto LABEL_77;
    }
LABEL_87:
    turi::sframe::select_column((uint64_t)a1, v24, &__s1);
    turi::index_file_information::index_file_information(&v158, (const turi::index_file_information *)(__s1.__r_.__value_.__r.__words[0] + 8));
    if (__s1.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_);
    }
    uint64_t v42 = (long long *)v167;
    unsigned int v43 = v166;
    if (v167 == v166)
    {
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (char *)v166) >> 3);
      unsigned int v43 = v167;
LABEL_106:
      memset(&__s1, 0, sizeof(__s1));
      long long v131 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      LODWORD(v129) = 2;
      unint64_t v130 = v52;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v131, v43, v42, v52);
      uint64_t v53 = v133;
      if ((unint64_t)v133 >= *((void *)&v133 + 1))
      {
        uint64_t v54 = std::vector<turi::index_file_information>::__push_back_slow_path<turi::index_file_information const&>((uint64_t *)&v132 + 1, (const turi::index_file_information *)&v158);
      }
      else
      {
        turi::index_file_information::index_file_information((std::string *)v133, (const turi::index_file_information *)&v158);
        uint64_t v54 = v53 + 144;
      }
      *(void *)&long long v133 = v54;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v55 = __p.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v157, v55 + 8);
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v56 = &v157;
      }
      else {
        uint64_t v56 = (std::string *)v157.__r_.__value_.__r.__words[0];
      }
      if (v55)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v56, p_p, v55);
      }
      strcpy((char *)v56 + v55, "-column-");
      std::to_string(&v139, v24);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        atomic_ullong v58 = &v139;
      }
      else {
        atomic_ullong v58 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v59 = v139.__r_.__value_.__l.__size_;
      }
      int v60 = std::string::append(&v157, (const std::string::value_type *)v58, v59);
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      uint64_t v62 = std::string::append(&v140, ".sidx");
      std::string v179 = *v62;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v140.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v139.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v138, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
      }
      else {
        std::string v138 = v179;
      }
      turi::write_array_group_index_file((uint64_t)&v138, (uint64_t)&__s1);
    }
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    while (1)
    {
      __n128 v46 = &v43[v44];
      if (SHIBYTE(v43[v44].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v142, v46->__r_.__value_.__l.__data_, v46->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v47;
      }
      turi::parse_v2_segment_filename((uint64_t)&v142, &__s1);
      long long v49 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
      LODWORD(v179.__r_.__value_.__l.__data_) = __s1.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v179.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&__s1.__r_.__value_.__r.__words[2]
                                                                          + 3);
      int v50 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
      memset(&__s1, 0, sizeof(__s1));
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      long long v51 = turi::fileio::file_handle_pool::get_instance(v48);
      if (v50 < 0)
      {
        std::string::__init_copy_ctor_external(&v141, (const std::string::value_type *)v49, *((std::string::size_type *)&v49 + 1));
      }
      else
      {
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v49;
        LODWORD(v141.__r_.__value_.__r.__words[2]) = v179.__r_.__value_.__l.__data_;
        *(_DWORD *)((char *)&v141.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v179.__r_.__value_.__r.__words
                                                                                + 3);
        *((unsigned char *)&v141.__r_.__value_.__s + 23) = v50;
      }
      turi::fileio::file_handle_pool::unmark_file_for_delete(v51, (uint64_t)&v141);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v141.__r_.__value_.__l.__data_);
        if (v50 < 0) {
LABEL_104:
        }
          operator delete((void *)v49);
      }
      else if (v50 < 0)
      {
        goto LABEL_104;
      }
      ++v45;
      uint64_t v42 = (long long *)v167;
      unsigned int v43 = v166;
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (char *)v166) >> 3);
      ++v44;
      if (v45 >= v52) {
        goto LABEL_106;
      }
    }
  }
LABEL_144:
  if (v171)
  {
    v179.__r_.__value_.__r.__words[0] = boost::uuids::random_generator_pure::operator()((uint64_t)&v147);
    v179.__r_.__value_.__l.__size_ = v63;
    memset(&__s1, 0, sizeof(__s1));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v179, &__s1) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v158);
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v158);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v64 = __p.__r_.__value_.__l.__size_;
    }
    atomic_ullong *volatile v65 = &v179;
    std::string::basic_string[abi:ne180100]((uint64_t)&v179, v64 + 1);
    if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      atomic_ullong *volatile v65 = (std::string *)v179.__r_.__value_.__r.__words[0];
    }
    if (v64)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v66 = &__p;
      }
      else {
        long long v66 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v65, v66, v64);
    }
    *(_WORD *)((char *)&v65->__r_.__value_.__l.__data_ + v64) = 45;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __n128 v67 = &__s1;
    }
    else {
      __n128 v67 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = __s1.__r_.__value_.__l.__size_;
    }
    uint64_t v69 = std::string::append(&v179, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v158.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    atomic_ullong *volatile v71 = std::string::append(&v158, ".frame_idx");
    uint64_t v72 = (const std::string::value_type *)v71->__r_.__value_.__r.__words[0];
    std::string::size_type v73 = v71->__r_.__value_.__l.__size_;
    LODWORD(v140.__r_.__value_.__l.__data_) = v71->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v140.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v71->__r_.__value_.__r.__words[2] + 3);
    int v74 = SHIBYTE(v71->__r_.__value_.__r.__words[2]);
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v158.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v179.__r_.__value_.__l.__data_);
      if ((v74 & 0x80000000) == 0) {
        goto LABEL_166;
      }
    }
    else if ((v74 & 0x80000000) == 0)
    {
LABEL_166:
      v137.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      v137.__r_.__value_.__l.__size_ = v73;
      LODWORD(v137.__r_.__value_.__r.__words[2]) = v140.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v137.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v140.__r_.__value_.__r.__words
                                                                              + 3);
      *((unsigned char *)&v137.__r_.__value_.__s + 23) = v74;
      goto LABEL_169;
    }
    std::string::__init_copy_ctor_external(&v137, v72, v73);
LABEL_169:
    turi::sframe_save((turi *)&__stra, (uint64_t)&v137);
  }
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)&__s1, (const turi::sframe_index_file_information *)&__stra.__r_.__value_.__r.__words[1]);
  if (v8)
  {
    uint64_t v75 = 0;
    unint64_t v76 = 0;
    unint64_t v77 = 0;
    do
    {
      if ((*(void *)((char *)v149[0] + ((v76 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v76))
      {
        turi::sframe::select_column((uint64_t)&__stra, v77, &v179);
        turi::index_file_information::index_file_information(&v158, (const turi::index_file_information *)(v179.__r_.__value_.__r.__words[0] + 8));
        std::string::operator=(&v148.__begin_[v75], &v158);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v168, v169);
        v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v166;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
        if (v164)
        {
          v165[0] = v164;
          operator delete(v164);
        }
        if (v163 < 0) {
          operator delete(v161);
        }
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
        if (v179.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v179.__r_.__value_.__l.__size_);
        }
        ++v77;
      }
      ++v76;
      ++v75;
    }
    while (v122 != v76);
  }
  if (v136 < 0) {
    operator delete(v135);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v133 + 8, v134);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  *(_OWORD *)&v140.__r_.__value_.__r.__words[1] = 0uLL;
  v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140.__r_.__value_.__l.__size_;
  if (!v122)
  {
LABEL_289:
    turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)&v158, v121);
    std::vector<std::string>::pointer begin = v148.__begin_;
    if (v148.__end_ != v148.__begin_)
    {
      uint64_t v118 = 0;
      unint64_t v119 = 0;
      do
      {
        std::string::operator=((std::string *)&v162[v118 * 24], &begin[v118]);
        ++v119;
        std::vector<std::string>::pointer begin = v148.__begin_;
        ++v118;
      }
      while (v119 < 0xAAAAAAAAAAAAAAABLL * (((char *)v148.__end_ - (char *)v148.__begin_) >> 3));
    }
    if (SHIBYTE(v120->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v123, v120->__r_.__value_.__l.__data_, v120->__r_.__value_.__l.__size_);
    }
    else {
      std::string v123 = *v120;
    }
    turi::write_sframe_index_file((uint64_t)&v123, &v158);
  }
  uint64_t v78 = 0;
  while (1)
  {
    unint64_t v79 = &v148.__begin_[v78];
    if (SHIBYTE(v79->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v127, v79->__r_.__value_.__l.__data_, v79->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v80;
    }
    turi::parse_v2_segment_filename((uint64_t)&v127, &__s1);
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
    if (v129 == -1) {
      std::string::size_type v129 = 0;
    }
    uint64_t v81 = &v148.__begin_[v78];
    if (SHIBYTE(v81->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v126, v81->__r_.__value_.__l.__data_, v81->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v126.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v82;
    }
    turi::fileio::get_protocol(&v126, (std::string::size_type)&v158);
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v83 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v83 = v158.__r_.__value_.__l.__size_;
    }
    uint64_t v84 = v154;
    if ((v154 & 0x80u) != 0) {
      uint64_t v84 = v153;
    }
    if (v83 != v84) {
      break;
    }
    if ((v154 & 0x80u) == 0) {
      uint64_t v85 = (unsigned __int8 *)&v152;
    }
    else {
      uint64_t v85 = (unsigned __int8 *)v152;
    }
    if ((*((unsigned char *)&v158.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v93 = (void *)v158.__r_.__value_.__r.__words[0];
      BOOL v91 = memcmp(v158.__r_.__value_.__l.__data_, v85, v158.__r_.__value_.__l.__size_) != 0;
      goto LABEL_219;
    }
    if (*((unsigned char *)&v158.__r_.__value_.__s + 23))
    {
      uint64_t v86 = HIBYTE(v158.__r_.__value_.__r.__words[2]) - 1;
      long long v87 = &v158;
      do
      {
        int v89 = v87->__r_.__value_.__s.__data_[0];
        long long v87 = (std::string *)((char *)v87 + 1);
        int v88 = v89;
        int v90 = *v85++;
        BOOL v91 = v88 != v90;
      }
      while (v88 == v90 && v86-- != 0);
      if ((*((unsigned char *)&v158.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_217;
      }
    }
    else
    {
      BOOL v91 = 0;
    }
LABEL_221:
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v126.__r_.__value_.__l.__data_);
      if (v91)
      {
LABEL_223:
        if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v140, (const void **)&__s1.__r_.__value_.__l.__data_))
        {
          v157.__r_.__value_.__r.__words[0] = boost::uuids::random_generator_pure::operator()((uint64_t)&v147);
          v157.__r_.__value_.__l.__size_ = v94;
          memset(&v179, 0, sizeof(v179));
          if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v157, &v179) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v158);
            v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v158);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v95 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v95 = __p.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v139, v95 + 1);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v96 = &v139;
          }
          else {
            uint64_t v96 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if (v95)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v97 = &__p;
            }
            else {
              uint64_t v97 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            memmove(v96, v97, v95);
          }
          *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v95) = 45;
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v98 = &v179;
          }
          else {
            uint64_t v98 = (std::string *)v179.__r_.__value_.__r.__words[0];
          }
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v99 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v99 = v179.__r_.__value_.__l.__size_;
          }
          unint64_t v100 = std::string::append(&v139, (const std::string::value_type *)v98, v99);
          long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          uint64_t v102 = std::string::append(&v157, ".sidx");
          long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
          v158.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v103;
          v102->__r_.__value_.__l.__size_ = 0;
          v102->__r_.__value_.__r.__words[2] = 0;
          v102->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v157.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v139.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v125, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
          }
          else {
            std::string v125 = __s1;
          }
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v124, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
          }
          else {
            std::string v124 = v158;
          }
          turi::fileio::copy((char *)&v125, (char *)&v124);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v125.__r_.__value_.__l.__data_);
          }
          v157.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
          unint64_t v116 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v140, (const void **)&__s1.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v157);
          std::string::operator=((std::string *)(v116 + 7), &v158);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v158.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v179.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_250;
      }
    }
    else if (v91)
    {
      goto LABEL_223;
    }
    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
    uint64_t v104 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v140, (const void **)&__s1.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v158);
    std::string::operator=((std::string *)(v104 + 7), &__s1);
LABEL_250:
    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
    uint64_t v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v140, (const void **)&__s1.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v158);
    unint64_t v106 = v105;
    if (*((char *)v105 + 79) >= 0) {
      size_t v107 = *((unsigned __int8 *)v105 + 79);
    }
    else {
      size_t v107 = v105[8];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v157, v107 + 1);
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v108 = &v157;
    }
    else {
      uint64_t v108 = (std::string *)v157.__r_.__value_.__r.__words[0];
    }
    if (v107)
    {
      if (*((char *)v106 + 79) >= 0) {
        unint64_t v109 = v106 + 7;
      }
      else {
        unint64_t v109 = (const void *)v106[7];
      }
      memmove(v108, v109, v107);
    }
    *(_WORD *)((char *)&v108->__r_.__value_.__l.__data_ + v107) = 58;
    memset(&v139, 0, sizeof(v139));
    uint64_t v161 = &v158.__r_.__value_.__s.__data_[2];
    uint64_t v162 = v160;
    v179.__r_.__value_.__r.__words[0] = v129;
    v179.__r_.__value_.__l.__size_ = (std::string::size_type)v160;
    v179.__r_.__value_.__s.__data_[16] = 48;
    HIDWORD(v179.__r_.__value_.__r.__words[2]) = 48;
    uint64_t v161 = (void *)boost::detail::lcast_put_unsigned<std::char_traits<char>,unsigned long,char>::convert((uint64_t)&v179);
    uint64_t v162 = v160;
    std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v139, (std::string::value_type *)v161, v160, v160 - (unsigned char *)v161);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v110 = &v139;
    }
    else {
      uint64_t v110 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v111 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v111 = v139.__r_.__value_.__l.__size_;
    }
    unint64_t v112 = std::string::append(&v157, (const std::string::value_type *)v110, v111);
    std::string::size_type v113 = v112->__r_.__value_.__r.__words[0];
    v156[0] = v112->__r_.__value_.__l.__size_;
    *(void *)((char *)v156 + 7) = *(std::string::size_type *)((char *)&v112->__r_.__value_.__r.__words[1] + 7);
    char v114 = HIBYTE(v112->__r_.__value_.__r.__words[2]);
    v112->__r_.__value_.__l.__size_ = 0;
    v112->__r_.__value_.__r.__words[2] = 0;
    v112->__r_.__value_.__r.__words[0] = 0;
    uint64_t v115 = &v148.__begin_[v78];
    if (SHIBYTE(v115->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v115->__r_.__value_.__l.__data_);
    }
    v115->__r_.__value_.__r.__words[0] = v113;
    v115->__r_.__value_.__l.__size_ = v156[0];
    *(std::string::size_type *)((char *)&v115->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v156 + 7);
    *((unsigned char *)&v115->__r_.__value_.__s + 23) = v114;
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v139.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v157.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    if (++v78 == v122) {
      goto LABEL_289;
    }
  }
  BOOL v91 = 1;
  if ((*((unsigned char *)&v158.__r_.__value_.__s + 23) & 0x80) == 0) {
    goto LABEL_221;
  }
LABEL_217:
  uint64_t v93 = (void *)v158.__r_.__value_.__r.__words[0];
LABEL_219:
  operator delete(v93);
  goto LABEL_221;
}

void sub_224110650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (v44 < 0) {
    operator delete(v45);
  }
  if (a44 < 0) {
    operator delete(__p);
  }
  turi::sframe::~sframe((turi::sframe *)&STACK[0x478]);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&STACK[0x284]);
  STACK[0x478] = (unint64_t)&STACK[0x288];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x478]);
  if (STACK[0x2A0]) {
    operator delete((void *)STACK[0x2A0]);
  }
  STACK[0x478] = (unint64_t)&STACK[0x2B8];
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x478]);
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BOOL>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<BOOL>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != v7)
    {
      uint64_t v9 = *(void **)(v3 - 24);
      v3 -= 24;
      unint64_t v8 = v9;
      if (v9) {
        operator delete(v8);
      }
    }
    a1[1] = v7;
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      uint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      char v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      int v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      uint64_t v17 = v19;
      LODWORD(v18) = v20;
      uint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      uint64_t v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_224110D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sframe::sframe(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D76C528;
  *(void *)(a1 + 8) = -1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  int v4 = pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  *(_WORD *)(a1 + 288) = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v5 = *(std::string *)a2;
  }
  turi::read_sframe_index_file((uint64_t)&v5, (uint64_t)v6);
}

void sub_224110ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  turi::mutex::~mutex(v35);
  int v37 = *(std::__shared_weak_count **)(v33 + 216);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  a33 = v33 + 184;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (*(char *)(v33 + 159) < 0) {
    operator delete(*(void **)(v33 + 136));
  }
  turi::sframe_index_file_information::~sframe_index_file_information(v34);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::destroy(boost::uuids::detail::random_provider_base *this)
{
  uint64_t result = *(unsigned int *)this;
  if ((result & 0x80000000) == 0) {
    return close(result);
  }
  return result;
}

void *turi::sframe_save_naive(turi::sframe const&,std::string)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  turi::sframe::get_output_iterator(*(size_t **)a1, a2, (uint64_t)v14);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v5 = v4 * a2;
  if (**(void **)(a1 + 16) - 1 == a2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v6 + 288)) {
      unint64_t v7 = *(void *)(v6 + 32);
    }
    else {
      unint64_t v7 = 0;
    }
  }
  else
  {
    unint64_t v7 = v4 + v5;
  }
  memset(v11, 0, sizeof(v11));
  char v12 = 1;
  while (1)
  {
    unint64_t v8 = v7 - v5;
    if (v7 <= v5) {
      break;
    }
    if (v8 >= turi::sframe_config::SFRAME_READ_BATCH_SIZE) {
      unint64_t v8 = turi::sframe_config::SFRAME_READ_BATCH_SIZE;
    }
    unint64_t v9 = v8 + v5;
    turi::sframe_reader::read_rows(**(turi::sframe_reader ***)(a1 + 32), v5, v8 + v5, (turi::sframe_rows *)v11);
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v17 + 48))(v17, v11);
    unint64_t v5 = v9;
  }
  char v13 = (void **)v11;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v13);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](v15);
  return std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](v14);
}

void sub_2241110DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sframe_save_naive(turi::sframe const&,std::string)::$_0>(unsigned long,unsigned long,turi::sframe_save_naive(turi::sframe const&,std::string)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_17sframe_save_naiveERKNS_6sframeENSt3__112basic_string"
                                        "IcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_17sframe_save_naiveERKNS_6sframeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sframe_save_naive(turi::sframe const&,std::string)::$_0>(unsigned long,unsigned long,turi::sframe_save_naive(turi::sframe const&,std::string)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
      uint64_t result = turi::sframe_save_naive(turi::sframe const&,std::string)::$_0::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::vector<turi::sframe_saving_impl::column_blocks>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216;
        std::allocator<turi::index_file_information>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<turi::sframe_saving_impl::column_blocks>::__push_back_slow_path<turi::sframe_saving_impl::column_blocks const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x12F684BDA12F684) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x97B425ED097B42) {
    unint64_t v9 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v21 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe_saving_impl::column_blocks>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v17 = v10;
  uint64_t v18 = (std::string *)&v10[216 * v4];
  uint64_t v19 = v18;
  int v20 = &v10[216 * v9];
  turi::index_file_information::index_file_information(v18, (const turi::index_file_information *)a2);
  unint64_t v11 = v18;
  *(_OWORD *)&v18[6].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 176);
  long long v12 = *(_OWORD *)(a2 + 192);
  long long v14 = *(_OWORD *)(a2 + 160);
  v11[8].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 208);
  *(_OWORD *)&v11[7].__r_.__value_.__r.__words[1] = v13;
  *(_OWORD *)&v11[8].__r_.__value_.__l.__data_ = v12;
  *(_OWORD *)&v11[6].__r_.__value_.__r.__words[2] = v14;
  v19 += 9;
  std::vector<turi::sframe_saving_impl::column_blocks>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<turi::sframe_saving_impl::column_blocks>::~__split_buffer(&v17);
  return v15;
}

void sub_2241113C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sframe_saving_impl::column_blocks>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sframe_saving_impl::column_blocks>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe_saving_impl::column_blocks>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(216 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (long long *)((char *)v9 - 216);
      std::allocator<turi::sframe_saving_impl::column_blocks>::construct[abi:ne180100]<turi::sframe_saving_impl::column_blocks,turi::sframe_saving_impl::column_blocks>(a1, v7 - 216, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 216;
      *((void *)&v16 + 1) -= 216;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<turi::sframe_saving_impl::column_blocks>::construct[abi:ne180100]<turi::sframe_saving_impl::column_blocks,turi::sframe_saving_impl::column_blocks>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 120) = *((void *)a3 + 15);
  uint64_t v6 = a3 + 8;
  uint64_t v7 = *((void *)a3 + 16);
  *(void *)(a2 + 128) = v7;
  uint64_t v8 = a2 + 128;
  uint64_t v9 = *((void *)a3 + 17);
  *(void *)(a2 + 136) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *((void *)a3 + 15) = v6;
    *uint64_t v6 = 0;
    *((void *)a3 + 17) = 0;
  }
  else
  {
    *(void *)(a2 + 120) = v8;
  }
  *(_OWORD *)(a2 + 144) = a3[9];
  __n128 result = (__n128)a3[10];
  long long v11 = a3[11];
  long long v12 = a3[12];
  *(unsigned char *)(a2 + 208) = *((unsigned char *)a3 + 208);
  *(_OWORD *)(a2 + 176) = v11;
  *(_OWORD *)(a2 + 192) = v12;
  *(__n128 *)(a2 + 160) = result;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::index_file_information>::destroy[abi:ne180100](v3, v1);
      v1 += 216;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sframe_saving_impl::column_blocks>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::sframe_saving_impl::column_blocks>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 216;
    std::allocator<turi::index_file_information>::destroy[abi:ne180100](v4, i - 216);
  }
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sframe_save_blockwise(turi::sframe const&,std::string)::$_0 &,std::__wrap_iter<turi::sframe_saving_impl::column_blocks *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    v52[12] = v3;
    v52[13] = v4;
    unint64_t v7 = v5 >> 1;
    if (*(void *)(a1 + 216 * (v5 >> 1) + 200) > *(void *)(a2 - 16))
    {
      uint64_t v8 = (long long *)(a2 - 216);
      uint64_t v35 = *(void *)(a2 - 200);
      *(_OWORD *)long long v34 = *(_OWORD *)(a2 - 216);
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *(void *)uint64_t v8 = 0;
      uint64_t v37 = *(void *)(a2 - 176);
      long long v36 = *(_OWORD *)(a2 - 192);
      uint64_t v39 = *(void *)(a2 - 152);
      *(_OWORD *)long long v38 = *(_OWORD *)(a2 - 168);
      *(void *)(a2 - 160) = 0;
      *(void *)(a2 - 152) = 0;
      *(void *)(a2 - 168) = 0;
      *(_OWORD *)std::string __p = *(_OWORD *)(a2 - 144);
      uint64_t v41 = *(void *)(a2 - 128);
      *(void *)(a2 - 144) = 0;
      *(void *)(a2 - 136) = 0;
      *(void *)(a2 - 128) = 0;
      long long v42 = *(_OWORD *)(a2 - 120);
      uint64_t v43 = *(void *)(a2 - 104);
      *(void *)(a2 - 120) = 0;
      *(void *)(a2 - 112) = 0;
      *(void *)(a2 - 104) = 0;
      int v44 = *(void **)(a2 - 96);
      uint64_t v9 = (void *)(a2 - 88);
      unint64_t v10 = *(void **)(a2 - 88);
      unint64_t v45 = v10;
      uint64_t v46 = *(void *)(a2 - 80);
      if (v46)
      {
        v10[2] = &v45;
        *(void *)(a2 - 96) = v9;
        *uint64_t v9 = 0;
        *(void *)(a2 - 80) = 0;
      }
      else
      {
        int v44 = &v45;
      }
      long long v47 = *(_OWORD *)(a2 - 72);
      long long v11 = *(_OWORD *)(a2 - 56);
      long long v12 = *(_OWORD *)(a2 - 40);
      long long v13 = *(_OWORD *)(a2 - 24);
      char v51 = *(unsigned char *)(a2 - 8);
      long long v49 = v12;
      long long v50 = v13;
      long long v48 = v11;
      do
      {
        if (*((char *)v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        char v14 = (long long *)(a1 + 216 * v7);
        long long v15 = *v14;
        *((void *)v8 + 2) = *((void *)v14 + 2);
        long long *v8 = v15;
        *((unsigned char *)v14 + 23) = 0;
        *(unsigned char *)char v14 = 0;
        uint64_t v16 = *((void *)v14 + 5);
        *(long long *)((char *)v8 + 24) = *(long long *)((char *)v14 + 24);
        *((void *)v8 + 5) = v16;
        uint64_t v17 = (void **)(v8 + 3);
        if (*((char *)v8 + 71) < 0) {
          operator delete(*v17);
        }
        long long v18 = v14[3];
        *((void *)v8 + 8) = *((void *)v14 + 8);
        *(_OWORD *)uint64_t v17 = v18;
        *((unsigned char *)v14 + 71) = 0;
        *((unsigned char *)v14 + 48) = 0;
        uint64_t v33 = (void **)v14 + 9;
        _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)v8 + 72, (__n128 *)((char *)v14 + 72));
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v8 + 4);
        v8[6] = v14[6];
        *((void *)v8 + 14) = *((void *)v14 + 14);
        *((void *)v14 + 12) = 0;
        *((void *)v14 + 13) = 0;
        *((void *)v14 + 14) = 0;
        uint64_t v19 = (void *)v14 + 15;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v8 + 120, (void *)v14 + 15);
        uint64_t v20 = a1 + 216 * v7;
        long long v21 = *(_OWORD *)(v20 + 144);
        long long v22 = *(_OWORD *)(v20 + 160);
        *((void *)v8 + 22) = *(void *)(v20 + 176);
        v8[9] = v21;
        v8[10] = v22;
        *((void *)v8 + 23) = *(void *)(v20 + 184);
        *((void *)v8 + 24) = *(void *)(v20 + 192);
        uint64_t v23 = *(void *)(v20 + 200);
        *((unsigned char *)v8 + 208) = *(unsigned char *)(v20 + 208);
        *((void *)v8 + 25) = v23;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = v14;
      }
      while (*(void *)(a1 + 216 * v7 + 200) > *((void *)&v50 + 1));
      if (*((char *)v14 + 23) < 0) {
        operator delete(*(void **)v14);
      }
      int v24 = (void **)(v14 + 3);
      *((void *)v14 + 2) = v35;
      *char v14 = *(_OWORD *)v34;
      *(long long *)((char *)v14 + 24) = v36;
      *((void *)v14 + 5) = v37;
      if (*((char *)v14 + 71) < 0) {
        operator delete(*v24);
      }
      *((void *)v14 + 8) = v39;
      *(_OWORD *)int v24 = *(_OWORD *)v38;
      uint64_t v25 = *v33;
      if (*v33)
      {
        *((void *)v14 + 10) = v25;
        operator delete(v25);
        std::string *v33 = 0;
        *((void *)v14 + 10) = 0;
        *((void *)v14 + 11) = 0;
      }
      *(long long *)((char *)v14 + 72) = *(_OWORD *)__p;
      *((void *)v14 + 11) = v41;
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v14 + 4);
      v14[6] = v42;
      *((void *)v14 + 14) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      int v27 = (void *)*((void *)v14 + 16);
      unint64_t v26 = v14 + 8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v19, v27);
      *(v26 - 1) = v44;
      BOOL v28 = v45;
      *unint64_t v26 = v45;
      uint64_t v29 = v46;
      v26[1] = v46;
      if (v29)
      {
        v28[2] = v26;
        BOOL v28 = 0;
        int v44 = &v45;
        unint64_t v45 = 0;
        uint64_t v46 = 0;
      }
      else
      {
        *uint64_t v19 = v26;
      }
      long long v30 = v47;
      long long v31 = v48;
      *(void *)(v20 + 176) = v49;
      *(_OWORD *)(v20 + 144) = v30;
      *(_OWORD *)(v20 + 160) = v31;
      *(void *)(v20 + 184) = *((void *)&v49 + 1);
      *(void *)(v20 + 192) = v50;
      uint64_t v32 = *((void *)&v50 + 1);
      *(unsigned char *)(v20 + 208) = v51;
      *(void *)(v20 + 200) = v32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v44, v28);
      v52[0] = (void **)&v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v52);
    }
  }
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    unint64_t v5 = *(void **)(i - 24);
    uint64_t v4 = v5;
    if (v5) {
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::vector<BOOL>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    long long v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    long long v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<BOOL>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<BOOL>>::~__split_buffer(&v15);
  }
}

void sub_224111D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<BOOL>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<BOOL>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>,std::reverse_iterator<std::vector<BOOL>*>,std::reverse_iterator<std::vector<BOOL>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>,std::reverse_iterator<std::vector<BOOL>*>,std::reverse_iterator<std::vector<BOOL>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  long long v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(a3 - 3);
      a3 -= 3;
      *(void *)(v7 - 24) = v8;
      *(void *)(v7 - 16) = a3[1];
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*v1) {
      operator delete(*v1);
    }
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<BOOL>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<BOOL>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    uint64_t v5 = *(void **)(v1 - 24);
    v1 -= 24;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v1;
    if (v5)
    {
      operator delete(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    uint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    uint64_t v4 = *a1;
    *a1 = v10;
    unint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_22411201C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    uint64_t *v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void turi::sframe_saving_impl::advance_column_blocks_to_next_block(turi::v2_block_impl::block_manager *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 176) + 1;
  *(void *)(a2 + 176) = v2;
  if (v2 >= *(void *)(a2 + 160))
  {
    turi::v2_block_impl::block_manager::close_column((uint64_t)a1, *(void *)(a2 + 184));
    while (1)
    {
      unint64_t v5 = *(void *)(a2 + 168) + 1;
      *(void *)(a2 + 168) = v5;
      *(void *)(a2 + 176) = 0;
      if (v5 >= *(void *)(a2 + 152)) {
        break;
      }
      uint64_t v6 = *(void *)(a2 + 96) + 24 * v5;
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      }
      else
      {
        long long v7 = *(_OWORD *)v6;
        v13.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v13;
      }
      unint64_t v8 = turi::v2_block_impl::block_manager::open_column((uint64_t)a1, (uint64_t)&__p);
      unint64_t v10 = v9;
      *(void *)(a2 + 184) = v8;
      *(void *)(a2 + 192) = v9;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        unint64_t v8 = *(void *)(a2 + 184);
        unint64_t v10 = *(void *)(a2 + 192);
      }
      unint64_t v11 = turi::v2_block_impl::block_manager::num_blocks_in_column(a1, v8, v10);
      *(void *)(a2 + 160) = v11;
      if (!v11) {
        turi::v2_block_impl::block_manager::close_column((uint64_t)a1, *(void *)(a2 + 184));
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v11) {
        return;
      }
    }
    *(unsigned char *)(a2 + 208) = 1;
  }
}

void sub_2241124A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::shuffle(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  v21[24] = *(void **)MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  v21[0] = a2;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 288)) {
      unint64_t v6 = *(void *)(a1 + 32);
    }
    else {
      unint64_t v6 = 0;
    }
    unint64_t v19 = v6;
    unint64_t v7 = turi::thread::cpu_count((turi::thread *)a1);
    unint64_t v17 = v6 / v7;
    unint64_t v18 = v7;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    std::vector<turi::sframe>::resize(a3, (unint64_t)a2);
    uint64_t v8 = *a3;
    if (*a3 != a3[1])
    {
      std::vector<turi::flex_type_enum>::vector(v21, *(void *)(a1 + 24));
      if (*(void *)(a1 + 24))
      {
        unint64_t v9 = 0;
        do
        {
          char v10 = turi::sframe::column_type((turi::sframe *)a1, v9);
          *((unsigned char *)v21[0] + v9++) = v10;
        }
        while (v9 < *(void *)(a1 + 24));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      turi::sframe::open_for_write(v8, (void *)(a1 + 40), v21, &__p, 1, 1);
    }
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    if (v20) {
      operator new();
    }
    turi::sframe::get_reader((turi::sframe *)a1);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_0::operator()();
}

void sub_224112A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&__p);
  uint64_t v42 = a25;
  a25 = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  a13 = &a26;
  std::vector<std::unique_ptr<turi::mutex>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a29;
  std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/shuffle.cpp", 102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"n", 1);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  char v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/shuffle.cpp", "operator()", 19, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224112CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<turi::sframe>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = 0x14C1BACF914C1BADLL * ((v3 - *result) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (uint64_t *)std::vector<turi::sframe>::__append(result, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *result + 296 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = v3 - 296;
      unint64_t v9 = (uint64_t (***)(void))(v3 - 296);
      do
      {
        uint64_t result = (uint64_t *)(**v9)(v9);
        v8 -= 296;
        BOOL v10 = v9 == (uint64_t (***)(void))v7;
        v9 -= 37;
      }
      while (!v10);
    }
    v2[1] = v7;
  }
  return result;
}

turi::sframe *std::vector<turi::sframe>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (turi::sframe *)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (turi::sframe *)*((void *)result - 1);
  if (0x14C1BACF914C1BADLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (turi::sframe *)((char *)v7 + 296 * a2);
      uint64_t v14 = 296 * a2;
      do
      {
        uint64_t result = turi::sframe::sframe(v7);
        uint64_t v7 = (turi::sframe *)((char *)v7 + 296);
        v14 -= 296;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = 0x14C1BACF914C1BADLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xDD67C8A60DD67CLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x14C1BACF914C1BADLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x6EB3E45306EB3ELL) {
      unint64_t v11 = 0xDD67C8A60DD67CLL;
    }
    else {
      unint64_t v11 = v9;
    }
    int v21 = result;
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe>>((uint64_t)result, v11);
    }
    else {
      long long v12 = 0;
    }
    char v15 = (turi::sframe *)&v12[296 * v8];
    v18[0] = v12;
    v18[1] = v15;
    unint64_t v19 = v15;
    uint64_t v20 = &v12[296 * v11];
    uint64_t v16 = 296 * a2;
    unint64_t v17 = (turi::sframe *)((char *)v15 + 296 * a2);
    do
    {
      turi::sframe::sframe(v15);
      char v15 = (turi::sframe *)((char *)v15 + 296);
      v16 -= 296;
    }
    while (v16);
    unint64_t v19 = v17;
    std::vector<turi::sframe>::__swap_out_circular_buffer(a1, v18);
    return (turi::sframe *)std::__split_buffer<turi::sframe>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_224113030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sframe>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sframe>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe>,std::reverse_iterator<turi::sframe*>,std::reverse_iterator<turi::sframe*>,std::reverse_iterator<turi::sframe*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe>,std::reverse_iterator<turi::sframe*>,std::reverse_iterator<turi::sframe*>,std::reverse_iterator<turi::sframe*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; turi::sframe::sframe((turi::sframe *)(i + a7), (const turi::sframe *)(i + a3)))
    i -= 296;
  return a6;
}

uint64_t std::__split_buffer<turi::sframe>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 296;
    (**(void (***)(void))(i - 296))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__push_back_slow_path<std::function<void ()(turi::sframe_rows const&)>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[96 * v3];
  uint64_t v13 = &v7[96 * v6];
  std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::construct[abi:ne180100]<std::function<void ()(turi::sframe_rows const&)>,std::function<void ()(turi::sframe_rows const&)>>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 96;
  std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer(&v10);
  return v8;
}

void sub_2241132C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<turi::mutex>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (pthread_mutex_t **)**a1;
  if (v2)
  {
    unint64_t v4 = (pthread_mutex_t **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<turi::mutex>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

pthread_mutex_t *std::unique_ptr<turi::mutex>::reset[abi:ne180100](pthread_mutex_t **a1, pthread_mutex_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::mutex::~mutex(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<turi::mutex>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<turi::mutex>::reset[abi:ne180100]((pthread_mutex_t **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1::operator()(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = **a1;
  if (*a1[1] - 1 == a2) {
    unint64_t v5 = *a1[2];
  }
  else {
    unint64_t v5 = v4 + v4 * a2;
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v6 = *a1[3];
  unint64_t v32 = v5;
  if (v6)
  {
    uint64_t v33 = v4;
    uint64_t v7 = 0;
    for (unint64_t i = 0; i < v6; ++i)
    {
      turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(&v36, *a1[4] + v7, *(void *)(*a1[5] + 8 * i), 0x1000uLL, 0x2800uLL);
      unint64_t v9 = v41;
      if ((unint64_t)v41 >= v42)
      {
        uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v41 - v40) >> 3);
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) > 0x492492492492492) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v42 - v40) >> 3) > v13) {
          unint64_t v13 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v42 - v40) >> 3);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v42 - v40) >> 3)) >= 0x249249249249249) {
          unint64_t v14 = 0x492492492492492;
        }
        else {
          unint64_t v14 = v13;
        }
        long long v48 = &v42;
        char v15 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>((uint64_t)&v42, v14);
        uint64_t v16 = (char *)v15 + 56 * v12;
        int v44 = v15;
        unint64_t v45 = (long long *)v16;
        long long v47 = (char *)v15 + 56 * v17;
        long long v18 = v37;
        *(_OWORD *)uint64_t v16 = v36;
        *((_OWORD *)v16 + 1) = v18;
        *((void *)v16 + 5) = 0;
        *((void *)v16 + 6) = 0;
        *((void *)v16 + 4) = 0;
        *((_OWORD *)v16 + 2) = v38;
        *((void *)v16 + 6) = v39;
        long long v38 = 0uLL;
        uint64_t v39 = 0;
        uint64_t v46 = v16 + 56;
        std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__swap_out_circular_buffer(&v40, &v44);
        unint64_t v11 = v41;
        std::__split_buffer<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::~__split_buffer((void **)&v44);
      }
      else
      {
        long long v10 = v37;
        _OWORD *v41 = v36;
        v9[1] = v10;
        *((void *)v9 + 5) = 0;
        *((void *)v9 + 6) = 0;
        *((void *)v9 + 4) = 0;
        uint64_t v9[2] = v38;
        *((void *)v9 + 6) = v39;
        long long v38 = 0uLL;
        uint64_t v39 = 0;
        unint64_t v11 = (_OWORD *)((char *)v9 + 56);
      }
      uint64_t v41 = v11;
      int v44 = &v38;
      std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      unint64_t v6 = *a1[3];
      v7 += 96;
    }
    unint64_t v5 = v32;
    uint64_t v4 = v33;
  }
  unint64_t v19 = v4 * a2;
  if (v4 * a2 < v5)
  {
    do
    {
      long long v36 = 0uLL;
      *(void *)&long long v37 = 0;
      BYTE8(v37) = 1;
      uint64_t v20 = v5 - v19;
      if (v5 - v19 > 0x400) {
        uint64_t v20 = 1024;
      }
      uint64_t rows = turi::sframe_reader::read_rows((turi::sframe_reader *)*a1[6], v19, v20 + v19, (turi::sframe_rows *)&v36);
      if (BYTE8(v37))
      {
        int v44 = 0;
        unint64_t v45 = &v36;
        uint64_t v46 = 0;
      }
      else
      {
        turi::sframe_rows::ensure_unique((turi::sframe_rows *)&v36);
        int v44 = 0;
        unint64_t v45 = &v36;
        uint64_t v46 = 0;
        if (!BYTE8(v37)) {
          turi::sframe_rows::ensure_unique((turi::sframe_rows *)&v36);
        }
      }
      uint64_t v34 = rows;
      if ((void)v36 == *((void *)&v36 + 1) || !*(void *)v36) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = (uint64_t)(*(void *)(*(void *)v36 + 8) - **(void **)v36) >> 4;
      }
      if (!v44)
      {
        uint64_t v23 = v46;
        goto LABEL_30;
      }
      do
      {
        do
        {
          int v24 = a1[7];
          turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v45, (uint64_t *)v35);
          uint64_t v25 = v24[3];
          if (!v25) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          unint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)v25 + 48))(v25, v35);
          unint64_t v27 = *a1[3];
          uint64_t v43 = (void **)v35;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
          uint64_t v28 = (uint64_t)a1[8];
          if (*(void *)(v28 + 24))
          {
            turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v45, (uint64_t *)v35);
            std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>::operator()(v28, (uint64_t)v35, a2);
            uint64_t v43 = (void **)v35;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
          }
          uint64_t v29 = v40;
          turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v45, (uint64_t *)v35);
          turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::write(v29 + 56 * (v26 % v27), v35);
          uint64_t v43 = (void **)v35;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
          uint64_t v23 = ++v46;
        }
        while (v44);
LABEL_30:
        ;
      }
      while (v23 != (char *)v22);
      v19 += v34;
      int v44 = &v36;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      unint64_t v5 = v32;
    }
    while (v19 < v32);
    unint64_t v6 = *a1[3];
  }
  if (v6)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    do
    {
      turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::flush(v40 + v30, 0);
      ++v31;
      v30 += 56;
    }
    while (v31 < *a1[3]);
  }
  *(void *)&long long v36 = &v40;
  std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_224113868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  *(void *)(v23 - 128) = &a16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 128));
  a16 = (void **)&a23;
  std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::write(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 >= *(void *)(a1 + 48))
  {
    uint64_t result = std::vector<std::vector<turi::flexible_type>>::__push_back_slow_path<std::vector<turi::flexible_type> const&>(v3, a2);
  }
  else
  {
    std::vector<std::vector<turi::flexible_type>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::flexible_type> const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  *(void *)(a1 + 40) = result;
  if (0xAAAAAAAAAAAAAAABLL * ((result - *(void *)(a1 + 32)) >> 3) >= *(void *)(a1 + 16))
  {
    uint64_t result = pthread_mutex_trylock(*(pthread_mutex_t **)(a1 + 8));
    if (!result
      || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3) >= *(void *)(a1 + 24))
    {
      return turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::flush(a1, result == 0);
    }
  }
  return result;
}

uint64_t turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::flush(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  uint64_t v3 = *(pthread_mutex_t **)(a1 + 8);
  unint64_t v4 = *(void ***)(a1 + 32);
  uint64_t v5 = *(void ***)(a1 + 40);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = *(void *)(*(void *)a1 + 56);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v6 + 48))(v6, v4);
      v4 += 3;
    }
    while (v4 != v5);
    unint64_t v4 = *(void ***)(a1 + 32);
    uint64_t v7 = *(void ***)(a1 + 40);
    while (v7 != v4)
    {
      v7 -= 3;
      unint64_t v9 = v7;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v9);
    }
  }
  *(void *)(a1 + 40) = v4;
  return pthread_mutex_unlock(v3);
}

void sub_224113AD8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  long long v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = (void **)(v1 + 32);
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 56;
  }
}

void **std::__split_buffer<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    unint64_t v4 = (void **)(i - 24);
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

void *turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(void *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[4] = 0;
  result[2] = a4;
  result[3] = a5;
  result[5] = 0;
  result[6] = 0;
  if (a5 <= a4) {
    turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(std::function<void ()(turi::sframe_rows const&)>&,turi::mutex &,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  return result;
}

void sub_224113D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(std::function<void ()(turi::sframe_rows const&)>&,turi::mutex &,unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/buffered_writer.hpp", 105);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"hard_limit", 10);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"soft_limit", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/buffered_writer.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(std::function<void ()(turi::sframe_rows const&)>&,turi::mutex &,unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224113F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 56;
        uint64_t v7 = (void **)(v4 - 24);
        std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v7);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1>(unsigned long,unsigned long,turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_7shuffleENS_6sframeEmNSt3__18functionIFmRKNS2_6vectorI"
                                        "NS_13flexible_typeENS2_9allocatorIS5_EEEEEEENS3_IFvSA_mEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_7shuffleENS_6sframeEmNSt3__18functionIFmRKNS2_6vectorINS_13flexible_typeENS2_9allocatorIS5_EEEEEEENS3_IFvSA_mEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1>(unsigned long,unsigned long,turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  for (unint64_t i = *(void *)(a1 + 8); i < *(void *)(a1 + 16); ++i)
    turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1::operator()(*(uint64_t ***)a1, i);
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_224114204(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<long long>::set[abi:ne180100]<std::__wrap_iter<long long *>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22411428C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<long long>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<long long>::__find_equal<long long>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          uint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          long long v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        long long v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          long long v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        long long v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t turi::unfair_lock::lock(turi::unfair_lock *this)
{
  pthread_mutex_lock((pthread_mutex_t *)this + 1);
  if (*((unsigned char *)this + 128)
    || *((void *)this + 19) && *(void *)(*((void *)this + 17) + 32) < *(void *)unfair_lock_priority)
  {
    long long v5 = (uint64_t *)unfair_lock_priority;
    std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 17, (unint64_t *)unfair_lock_priority, (uint64_t)&std::piecewise_construct, &v5)[5] = (uint64_t)(unfair_lock_priority + 8);
    while (*((unsigned char *)this + 128)
         || *((void *)this + 19) && *(void *)(*((void *)this + 17) + 32) < *(void *)unfair_lock_priority)
    {
      int v3 = pthread_cond_wait((pthread_cond_t *)(unfair_lock_priority + 8), (pthread_mutex_t *)this + 1);
      assert_msg(v3 == 0, "Condition variable wait error %d", v3);
      if (*(void *)unfair_lock_priority > *((void *)this + 20))
      {
        pthread_mutex_unlock((pthread_mutex_t *)this + 1);
        turi::timer::sleep_ms(*((int *)this + 46));
        pthread_mutex_lock((pthread_mutex_t *)this + 1);
      }
    }
    std::__tree<std::__value_type<unsigned long,turi::conditional *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::conditional *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::conditional *>>>::__erase_unique<unsigned long>((uint64_t)this + 136, (unint64_t *)unfair_lock_priority);
  }
  pthread_mutex_lock((pthread_mutex_t *)this);
  *((unsigned char *)this + 128) = 1;
  return pthread_mutex_unlock((pthread_mutex_t *)this + 1);
}

void *turi::anonymous namespace'::get_unfair_lock_priority(turi::_anonymous_namespace_ *this)
{
  uint64_t v2 = pthread_getspecific(priority_tls_key_id);
  if (!v2) {
    operator new();
  }
  return v2;
}

void sub_22411469C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1000C4021716A34);
  _Unwind_Resume(a1);
}

uint64_t turi::unfair_lock::unlock(turi::unfair_lock *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 64);
  pthread_mutex_lock((pthread_mutex_t *)this + 1);
  uint64_t v3 = *((void *)this + 25) + 1;
  *((void *)this + 25) = v3;
  if (v3 == 100)
  {
    gettimeofday(&v14, 0);
    double v4 = (double)(v14.tv_usec - *((_DWORD *)this + 56)) / 1000000.0 + (double)(v14.tv_sec - *((void *)this + 27));
    *((double *)this + 24) = v4;
    double v5 = *((double *)this + 22);
    if (*((unsigned char *)this + 208)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v4 <= v5 + 0.5;
    }
    if (v6)
    {
      *((unsigned char *)this + 208) = 0;
      int v7 = *((_DWORD *)this + 46);
      if (v5 <= v4)
      {
        int v8 = *((_DWORD *)this + 46);
        if (v5 < v4) {
          int v8 = *((_DWORD *)this + 42);
        }
      }
      else
      {
        int v8 = 2 * v7 - *((_DWORD *)this + 42);
      }
      unsigned int v9 = v8 & ~(v8 >> 31);
      if (v9 >= 0x64) {
        unsigned int v9 = 100;
      }
      *((_DWORD *)this + 42) = v7;
      *((double *)this + 22) = v4;
      if (v9 == v7) {
        unsigned int v10 = v9 + 5;
      }
      else {
        unsigned int v10 = v9;
      }
      *((void *)this + 25) = 0;
      *((_DWORD *)this + 46) = v10;
    }
    else
    {
      *((_DWORD *)this + 42) = 0;
      *((void *)this + 22) = 0;
      *((_DWORD *)this + 46) = 50;
      *((void *)this + 24) = 0;
      *((void *)this + 25) = 0;
      *((unsigned char *)this + 208) = 1;
    }
    gettimeofday((timeval *)((char *)this + 216), 0);
  }
  uint64_t v11 = pthread_mutex_unlock((pthread_mutex_t *)this);
  if (*((void *)this + 19))
  {
    int v12 = pthread_cond_signal(*(pthread_cond_t **)(*((void *)this + 17) + 40));
    uint64_t v11 = assert_msg(v12 == 0, "Condition variable signal error %d", v12);
  }
  *((unsigned char *)this + 128) = 0;
  return pthread_mutex_unlock(v2);
}

uint64_t turi::anonymous namespace'::destroy_tls_data(uint64_t this, void *a2)
{
  if (this)
  {
    turi::conditional::~conditional((pthread_cond_t *)(this + 8));
    JUMPOUT(0x22A614FA0);
  }
  return this;
}

uint64_t std::__tree<std::__value_type<unsigned long,turi::conditional *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::conditional *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::conditional *>>>::__erase_unique<unsigned long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  double v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      int v7 = v2;
    }
    else {
      int v7 = v2 + 1;
    }
    if (v6) {
      double v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void turi::unity_sarray::unity_sarray(turi::unity_sarray *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26D76C860;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  turi::unity_sarray::clear(this);
}

void sub_224114978(_Unwind_Exception *a1)
{
  std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100](v1 + 8, 0);
  std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100](v1 + 7, 0);
  uint64_t v3 = v1[6];
  v1[6] = 0;
  if (v3) {
    turi::unity_sarray::unity_sarray(v3);
  }
  double v4 = (std::__shared_weak_count *)v1[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  cppipc::ipc_object_base::~ipc_object_base((cppipc::ipc_object_base *)v1);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::~unity_sarray(turi::unity_sarray *this)
{
  *(void *)this = &unk_26D76C860;
  std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100]((uint64_t *)this + 7, 0);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  cppipc::ipc_object_base::~ipc_object_base(this);
}

{
  uint64_t vars8;

  turi::unity_sarray::~unity_sarray(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::unity_sarray::unity_sarray(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D76C860;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void turi::unity_sarray::construct_from_vector(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v1);
  turi::sarray<turi::flexible_type>::open_for_write(v1);
}

void sub_224114C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

turi::thread_pool *turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 248)) {
    BOOL v3 = *(unsigned char *)(a3 + 249) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
  }
  return turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(a1, a2, (uint64_t *)a3);
}

void turi::unity_sarray::construct_from_sarray(uint64_t a1, uint64_t *a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v3 = a2[1];
  v4[0] = *a2;
  v4[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::make_planner_node(v4, 0, -1);
}

void sub_224114D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::construct_from_const(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v139[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  int v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unsigned int v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_const", 104, 1);
    uint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    int v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        long long v13 = std::locale::use_facet((const std::locale *)&v127, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v127);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v15 = 0;
  char v16 = *(unsigned char *)(a2 + 12);
  if (a4 != 7) {
    char v16 = a4;
  }
  if (v16 == 7) {
    char v17 = 1;
  }
  else {
    char v17 = v16;
  }
  memset(v139, 0, 13);
  BYTE4(v139[1]) = v17;
  switch(v17)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      uint64_t v15 = 0x1900000000000000;
      v139[0] = (atomic_ullong *)0x1900000000000000;
      LODWORD(v139[1]) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      break;
  }
  int v18 = *(unsigned __int8 *)(a2 + 12);
  if (v18 == 7 || v18 == v17)
  {
    if (v139 != (atomic_ullong **)a2)
    {
      switch(BYTE4(v139[1]))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v20 = v139[0];
            if (v139[0])
            {
              if (*((char *)v139[0] + 31) < 0) {
                operator delete(*((void **)v139[0] + 1));
              }
              int v21 = v20;
              uint64_t v22 = 0x1012C404EF22A49;
              goto LABEL_54;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v25 = v139[0];
            if (v139[0])
            {
              unint64_t v26 = (void *)v139[0][1];
              if (v26)
              {
                v139[0][2] = (atomic_ullong)v26;
                operator delete(v26);
              }
              int v21 = v25;
              uint64_t v22 = 0x1080C409938AC02;
              goto LABEL_54;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v23 = v139[0];
            if (v139[0])
            {
              *(void *)&long long v127 = v139[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
              goto LABEL_49;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v23 = v139[0];
            if (v139[0])
            {
              *(void *)&long long v127 = v139[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
LABEL_49:
              int v21 = v23;
              uint64_t v22 = 0x1020C405E66F15BLL;
              goto LABEL_54;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v27 = v139[0];
            if (v139[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v139[0] + 2);
              int v21 = v27;
              unsigned int v24 = -235920773;
              goto LABEL_53;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v15, 0xFFFFFFFFFFFFFFFFLL) == 1 && v139[0])
          {
            int v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v139[0]);
            unsigned int v24 = 2071181815;
LABEL_53:
            uint64_t v22 = v24 | 0x1030C4000000000;
LABEL_54:
            MEMORY[0x22A614FA0](v21, v22);
          }
          break;
        default:
          break;
      }
      *(atomic_ullong **)((char *)v139 + 5) = *(atomic_ullong **)(a2 + 5);
      v139[0] = *(atomic_ullong **)a2;
      BYTE4(v139[1]) = *(unsigned char *)(a2 + 12);
      switch(BYTE4(v139[1]))
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(v139[0], 1uLL);
          break;
        default:
          break;
      }
    }
  }
  else if (v139 != (atomic_ullong **)a2)
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 0:
        switch(BYTE4(v139[1]))
        {
          case 0:
            uint64_t v19 = *(void *)a2;
            goto LABEL_86;
          case 1:
            double v64 = (double)*(uint64_t *)a2;
            goto LABEL_233;
          case 2:
            if (*(void *)v15 != 1) {
              operator new();
            }
            long long v70 = v139[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v127);
            std::ostream::operator<<();
            std::stringbuf::str();
            atomic_ullong *volatile v71 = (void **)(v70 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v127);
            if (*((char *)v70 + 31) < 0) {
              operator delete(*v71);
            }
            long long v72 = v137;
            v70[3] = v138;
            *(_OWORD *)atomic_ullong *volatile v71 = v72;
            goto LABEL_248;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 6:
            v139[0] = (atomic_ullong *)(*(void *)a2 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v139[1]) = 0;
            goto LABEL_248;
          case 7:
            goto LABEL_247;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          default:
            goto LABEL_342;
        }
      case 1:
        switch(BYTE4(v139[1]))
        {
          case 0:
            uint64_t v19 = (uint64_t)*(double *)a2;
            goto LABEL_86;
          case 1:
            double v64 = *(double *)a2;
            goto LABEL_233;
          case 2:
            if (*(void *)v15 != 1) {
              operator new();
            }
            atomic_ullong *volatile v65 = v139[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v127);
            std::ostream::operator<<();
            std::stringbuf::str();
            long long v66 = v65 + 1;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v127);
            if (*((char *)v65 + 31) < 0) {
              operator delete((void *)*v66);
            }
            long long v67 = v137;
            atomic_ullong v68 = v138;
            goto LABEL_304;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 6:
            int v69 = (int)((*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0);
            if (v69 >= 999999) {
              int v69 = 999999;
            }
            if (v69 >= 0xF4240) {
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            }
            v139[0] = (atomic_ullong *)(vcvtmd_s64_f64(*(double *)a2) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v139[1]) = v69;
            goto LABEL_248;
          case 7:
            goto LABEL_247;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          default:
            goto LABEL_342;
        }
      case 2:
        switch(BYTE4(v139[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_247;
          case 2:
            uint64_t v34 = *(atomic_ullong **)a2;
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v30 = v139[0];
            if (*((char *)v34 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v127, (const std::string::value_type *)v34[1], v34[2]);
            }
            else
            {
              long long v35 = *(_OWORD *)(v34 + 1);
              *(void *)&long long v128 = v34[3];
              long long v127 = v35;
            }
            goto LABEL_301;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          default:
            goto LABEL_342;
        }
      case 3:
        long long v37 = *(atomic_ullong **)a2;
        long long v38 = (char *)(*(void *)a2 + 8);
        switch(BYTE4(v139[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_247;
          case 2:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v30 = v139[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v137, v38);
            goto LABEL_301;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            if (v139[0] == v37) {
              goto LABEL_248;
            }
            uint64_t v39 = (char *)(v139[0] + 1);
            unint64_t v45 = v37 + 2;
            break;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v139[0] + 1, (void *)v37[1], (void *)v37[2], (v37[2] - v37[1]) >> 3);
            goto LABEL_248;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            std::string::size_type v59 = v139[0];
            long long v137 = 0uLL;
            atomic_ullong v138 = 0;
            uint64_t v134 = 0;
            uint64_t v135 = 0;
            uint64_t v136 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v38, &v131);
            turi::flexible_type_impl::ndarray<double>::ndarray(&v127, &v131, (uint64_t)&v137, (uint64_t)&v134, 0);
            if (v132) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v132);
            }
            if (v134)
            {
              uint64_t v135 = v134;
              operator delete(v134);
            }
            if ((void)v137)
            {
              *((void *)&v137 + 1) = v137;
              operator delete((void *)v137);
            }
            goto LABEL_156;
          default:
            goto LABEL_342;
        }
LABEL_122:
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v39, *(char **)v38, *v45, (*v45 - *(void *)v38) >> 3);
        break;
      case 4:
        unint64_t v31 = *(atomic_ullong **)a2;
        unint64_t v32 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v139[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_247;
          case 2:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v30 = v139[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v137, v32);
            goto LABEL_301;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)&v127, v139[0] + 1, v32);
            goto LABEL_248;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            if (v139[0] != v31) {
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v139[0] + 1), (uint64_t *)v31[1], (uint64_t *)v31[2], (v31[2] - v31[1]) >> 4);
            }
            goto LABEL_248;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            long long v49 = v139[0];
            atomic_ullong v138 = 0;
            long long v137 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v137, (uint64_t *)v31[1], (uint64_t *)v31[2], (v31[2] - v31[1]) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v137, &v127);
            long long v50 = v127;
            long long v127 = 0uLL;
            char v51 = (std::__shared_weak_count *)v49[2];
            *(_OWORD *)(v49 + 1) = v50;
            if (v51) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v51);
            }
            unint64_t v52 = (void *)v49[3];
            if (v52)
            {
              v49[4] = (atomic_ullong)v52;
              operator delete(v52);
              v49[3] = 0;
              v49[4] = 0;
              v49[5] = 0;
            }
            uint64_t v53 = (void *)v49[6];
            *(_OWORD *)(v49 + 3) = v128;
            v49[5] = *(void *)v129;
            long long v128 = 0uLL;
            *(void *)std::string::size_type v129 = 0;
            if (v53)
            {
              v49[7] = (atomic_ullong)v53;
              operator delete(v53);
              void v49[6] = 0;
              v49[7] = 0;
              v49[8] = 0;
            }
            *((_OWORD *)v49 + 3) = *(_OWORD *)&v129[8];
            v49[8] = *(void *)&v129[24];
            memset(&v129[8], 0, 24);
            v49[9] = v130;
            turi::flexible_type_impl::ndarray<double>::~ndarray(&v127);
            uint64_t v134 = (void **)&v137;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v134);
            goto LABEL_248;
          default:
            goto LABEL_342;
        }
      case 5:
        uint64_t v33 = *(atomic_ullong **)a2;
        switch(BYTE4(v139[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_247;
          case 2:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v30 = v139[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v137, v33 + 1);
            goto LABEL_301;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
            if (v139[0] != v33) {
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v139[0] + 1, (uint64_t *)v33[1], (uint64_t *)v33[2], (v33[2] - v33[1]) >> 5);
            }
            goto LABEL_248;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          default:
            goto LABEL_342;
        }
      case 6:
        switch(BYTE4(v139[1]))
        {
          case 0:
            uint64_t v19 = (uint64_t)(*(void *)a2 << 8) >> 8;
LABEL_86:
            v139[0] = (atomic_ullong *)v19;
            goto LABEL_248;
          case 1:
            double v64 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
LABEL_233:
            v139[0] = *(atomic_ullong **)&v64;
            goto LABEL_248;
          case 2:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v30 = v139[0];
            int v73 = *(_DWORD *)(a2 + 8);
            *(void *)&long long v137 = *(void *)a2;
            DWORD2(v137) = v73;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v137, (std::string *)&v127);
            goto LABEL_301;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 6:
            int v74 = *(_DWORD *)(a2 + 8);
            v139[0] = *(atomic_ullong **)a2;
            LODWORD(v139[1]) = v74;
            goto LABEL_248;
          case 7:
            goto LABEL_247;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          default:
            goto LABEL_342;
        }
      case 8:
        long long v36 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v139[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_247;
          case 2:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v30 = v139[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_301;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            long long v47 = v139[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v36, (double **)&v127, v14);
            long long v48 = (void *)v47[1];
            if (v48)
            {
              v47[2] = (atomic_ullong)v48;
              operator delete(v48);
              v47[1] = 0;
              v47[2] = 0;
              v47[3] = 0;
            }
            *(_OWORD *)(v47 + 1) = v127;
            v47[3] = v128;
            goto LABEL_248;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            std::string::size_type v59 = v139[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v36, &v127, v14);
LABEL_156:
            long long v60 = v127;
            long long v127 = 0uLL;
            long long v61 = (std::__shared_weak_count *)v59[2];
            *(_OWORD *)(v59 + 1) = v60;
            if (v61) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v61);
            }
            uint64_t v62 = (void *)v59[3];
            if (v62)
            {
              v59[4] = (atomic_ullong)v62;
              operator delete(v62);
              v59[3] = 0;
              v59[4] = 0;
              v59[5] = 0;
            }
            std::string::size_type v63 = (void *)v59[6];
            *(_OWORD *)(v59 + 3) = v128;
            v59[5] = *(void *)v129;
            long long v128 = 0uLL;
            *(void *)std::string::size_type v129 = 0;
            if (v63)
            {
              v59[7] = (atomic_ullong)v63;
              operator delete(v63);
              v59[6] = 0;
              v59[7] = 0;
              v59[8] = 0;
            }
            *((_OWORD *)v59 + 3) = *(_OWORD *)&v129[8];
            v59[8] = *(void *)&v129[24];
            memset(&v129[8], 0, 24);
            v59[9] = v130;
            goto LABEL_336;
          default:
            goto LABEL_342;
        }
      case 9:
        uint64_t v28 = *(atomic_ullong **)a2;
        uint64_t v29 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v139[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_247;
          case 2:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v30 = v139[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v137, v29);
LABEL_301:
            long long v66 = v30 + 1;
            if (*((char *)v30 + 31) < 0) {
              operator delete((void *)*v66);
            }
            long long v67 = v127;
            atomic_ullong v68 = v128;
LABEL_304:
            v66[2] = v68;
            *(_OWORD *)long long v66 = v67;
            goto LABEL_248;
          case 3:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v39 = (char *)(v139[0] + 1);
            uint64_t v40 = v28[9];
            if (v40) {
              goto LABEL_284;
            }
            unint64_t v42 = (uint64_t *)v28[3];
            uint64_t v41 = (uint64_t *)v28[4];
            uint64_t v43 = (void *)v28[1];
            if (v41 != v42 && v43)
            {
              uint64_t v40 = 1;
              do
              {
                uint64_t v44 = *v42++;
                v40 *= v44;
              }
              while (v42 != v41);
            }
            if (v40 == (uint64_t)(v43[1] - *v43) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index(v29) == (uint64_t)(*(void *)(*v29 + 8)
                                                                                       - *(void *)*v29) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v29)) {
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              }
              long long v38 = (char *)*v29;
              if (v39 != v38)
              {
                unint64_t v45 = (uint64_t *)(v38 + 8);
                goto LABEL_122;
              }
            }
            else
            {
LABEL_284:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid(v29)) {
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              }
              if (turi::flexible_type_impl::ndarray<double>::is_full(v29))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(&v127, (uint64_t)v29);
              }
              else
              {
                long long v137 = 0uLL;
                atomic_ullong v138 = 0;
                uint64_t v134 = 0;
                uint64_t v135 = 0;
                uint64_t v136 = 0;
                long long v131 = 0;
                long long v132 = 0;
                uint64_t v133 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(&v127, (uint64_t)&v137, (uint64_t)&v134, (uint64_t)&v131, 0);
                if (v131)
                {
                  long long v132 = v131;
                  operator delete(v131);
                }
                if (v134)
                {
                  uint64_t v135 = v134;
                  operator delete(v134);
                }
                if ((void)v137)
                {
                  *((void *)&v137 + 1) = v137;
                  operator delete((void *)v137);
                }
                atomic_ullong v130 = 0;
                if (&v127 != (long long *)(v28 + 1)) {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v128, (char *)v28[3], v28[4], (v28[4] - v28[3]) >> 3);
                }
                int v90 = (uint64_t *)v28[3];
                int v89 = (uint64_t *)v28[4];
                if (v89 == v90 || !*v29)
                {
                  unint64_t v91 = 0;
                }
                else
                {
                  unint64_t v91 = 1;
                  do
                  {
                    uint64_t v92 = *v90++;
                    v91 *= v92;
                  }
                  while (v90 != v89);
                }
                std::vector<double>::resize(v127, v91);
                std::vector<unsigned long>::resize((uint64_t)&v129[8], (v28[4] - v28[3]) >> 3);
                if (*((void *)&v128 + 1) != (void)v128 && *(void *)(v127 + 8) != *(void *)v127)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v137, (v28[7] - v28[6]) >> 3);
                  atomic_ullong v93 = v28[6];
                  atomic_ullong v94 = v28[7];
                  size_t v95 = (unint64_t *)v137;
                  uint64_t v96 = v94 - v93;
                  if (v94 != v93)
                  {
                    uint64_t v97 = 0;
                    unint64_t v98 = v96 >> 3;
                    if (v98 <= 1) {
                      unint64_t v98 = 1;
                    }
                    std::string::size_type v99 = (void *)(v137 + 8);
                    do
                    {
                      *(v99 - 1) = *(void *)(v93 + 8 * v97);
                      *std::string::size_type v99 = v97++;
                      v99 += 2;
                    }
                    while (v98 != v97);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v137 + 1), *((unint64_t **)&v137 + 1), (uint64_t)v95, v95);
                  uint64_t v100 = v137;
                  uint64_t v101 = *(void *)&v129[8];
                  *(void *)(*(void *)&v129[8] + 8 * *(void *)(v137 + 8)) = 1;
                  uint64_t v102 = v28[7] - v28[6];
                  if ((unint64_t)v102 >= 9)
                  {
                    unint64_t v103 = v102 >> 3;
                    uint64_t v104 = v128;
                    if (v103 <= 2) {
                      unint64_t v103 = 2;
                    }
                    uint64_t v105 = (uint64_t *)(v100 + 24);
                    unint64_t v106 = v103 - 1;
                    do
                    {
                      uint64_t v107 = *(void *)(v104 + 8 * *(v105 - 2)) * *(void *)(v101 + 8 * *(v105 - 2));
                      uint64_t v108 = *v105;
                      v105 += 2;
                      *(void *)(v101 + 8 * v108) = v107;
                      --v106;
                    }
                    while (v106);
                  }
                  unint64_t v109 = (v28[4] - v28[3]) >> 3;
                  long long v131 = 0;
                  std::vector<unsigned long>::vector(&v134, v109, &v131);
                  do
                  {
                    uint64_t v110 = v134;
                    if (v135 == v134)
                    {
                      uint64_t v119 = 0;
                      uint64_t v120 = *(void *)(*(void *)v28[1] + 8 * v28[9]);
                      uint64_t v121 = (void *)v127;
                    }
                    else
                    {
                      uint64_t v111 = 0;
                      unint64_t v112 = v135 - v134;
                      std::string::size_type v113 = (uint64_t *)v28[6];
                      if (v112 <= 1) {
                        unint64_t v112 = 1;
                      }
                      char v114 = v134;
                      unint64_t v115 = v112;
                      do
                      {
                        uint64_t v117 = (uint64_t)*v114++;
                        uint64_t v116 = v117;
                        uint64_t v118 = *v113++;
                        v111 += v118 * v116;
                        --v115;
                      }
                      while (v115);
                      uint64_t v119 = 0;
                      uint64_t v120 = *(void *)(*(void *)v28[1] + 8 * (v28[9] + v111));
                      uint64_t v121 = (void *)v127;
                      unint64_t v122 = *(uint64_t **)&v129[8];
                      do
                      {
                        uint64_t v124 = (uint64_t)*v110++;
                        uint64_t v123 = v124;
                        uint64_t v125 = *v122++;
                        v119 += v125 * v123;
                        --v112;
                      }
                      while (v112);
                    }
                    *(void *)(*v121 + 8 * v119) = v120;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v29, (uint64_t *)&v134));
                  if (v134)
                  {
                    uint64_t v135 = v134;
                    operator delete(v134);
                  }
                  if ((void)v137)
                  {
                    *((void *)&v137 + 1) = v137;
                    operator delete((void *)v137);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)&v127);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(&v127)) {
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              }
              if (v39 != (char *)v127) {
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v39, *(char **)v127, *(void *)(v127 + 8), (uint64_t)(*(void *)(v127 + 8) - *(void *)v127) >> 3);
              }
LABEL_336:
              turi::flexible_type_impl::ndarray<double>::~ndarray(&v127);
            }
            break;
          case 4:
            if (*(void *)v15 != 1) {
              operator new();
            }
            goto LABEL_247;
          case 5:
            if (*(void *)v15 != 1) {
              operator new();
            }
LABEL_247:
            turi::flexible_type_fail(0);
            goto LABEL_248;
          case 8:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v54 = v139[0];
            turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v29, (turi::image_type *)&v127);
            long long v55 = v127;
            long long v127 = 0uLL;
            long long v56 = *(_OWORD *)(v54 + 1);
            *(_OWORD *)(v54 + 1) = v55;
            long long v137 = v56;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v137 + 1);
            long long v57 = v128;
            long long v58 = *(_OWORD *)v129;
            *(_OWORD *)(v54 + 7) = *(_OWORD *)&v129[16];
            *(_OWORD *)(v54 + 5) = v58;
            *(_OWORD *)(v54 + 3) = v57;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v127 + 1);
            goto LABEL_248;
          case 9:
            if (*(void *)v15 != 1) {
              operator new();
            }
            uint64_t v46 = v139[0];
            std::shared_ptr<std::vector<double>>::operator=[abi:ne180100](v139[0] + 1, v29);
            if (v46 != v28)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v46 + 24, (char *)v28[3], v28[4], (v28[4] - v28[3]) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v46 + 48, (char *)v28[6], v28[7], (v28[7] - v28[6]) >> 3);
            }
            v46[9] = v28[9];
            goto LABEL_248;
          default:
            goto LABEL_342;
        }
        break;
      default:
LABEL_342:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
LABEL_248:
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node((uint64_t)v139, v17, a3, &v127);
  long long v75 = v127;
  long long v127 = 0uLL;
  unint64_t v76 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v75;
  if (v76)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    if (*((void *)&v127 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v127 + 1));
    }
  }
  switch(BYTE4(v139[1]))
  {
    case 2:
      if (atomic_fetch_add(v139[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v77 = v139[0];
        if (v139[0])
        {
          if (*((char *)v139[0] + 31) < 0) {
            operator delete(*((void **)v139[0] + 1));
          }
          uint64_t v78 = v77;
          uint64_t v79 = 0x1012C404EF22A49;
          goto LABEL_282;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v139[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v86 = v139[0];
        if (v139[0])
        {
          long long v87 = (void *)v139[0][1];
          if (v87)
          {
            v139[0][2] = (atomic_ullong)v87;
            operator delete(v87);
          }
          uint64_t v78 = v86;
          uint64_t v79 = 0x1080C409938AC02;
          goto LABEL_282;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v139[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v80 = v139[0];
        if (v139[0])
        {
          *(void *)&long long v127 = v139[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
          goto LABEL_277;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v139[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v80 = v139[0];
        if (v139[0])
        {
          *(void *)&long long v127 = v139[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
LABEL_277:
          uint64_t v78 = v80;
          uint64_t v79 = 0x1020C405E66F15BLL;
          goto LABEL_282;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v139[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v88 = v139[0];
        if (v139[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v139[0] + 2);
          uint64_t v78 = v88;
          unsigned int v85 = -235920773;
          goto LABEL_281;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v139[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v81 = v139[0];
        if (v139[0])
        {
          long long v82 = (void *)v139[0][6];
          if (v82)
          {
            v139[0][7] = (atomic_ullong)v82;
            operator delete(v82);
          }
          std::string::size_type v83 = (void *)v81[3];
          if (v83)
          {
            v81[4] = (atomic_ullong)v83;
            operator delete(v83);
          }
          uint64_t v84 = (std::__shared_weak_count *)v81[2];
          if (v84) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v84);
          }
          uint64_t v78 = v81;
          unsigned int v85 = 2071181815;
LABEL_281:
          uint64_t v79 = v85 | 0x1030C4000000000;
LABEL_282:
          MEMORY[0x22A614FA0](v78, v79);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2241171E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)(v9 - 144);
  if (v11)
  {
    *(void *)(v9 - 136) = v11;
    operator delete(v11);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  switch(*(unsigned char *)(v9 - 92))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v9 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v12 = *(void *)(v9 - 104);
      if (!v12) {
        goto LABEL_29;
      }
      if (*(char *)(v12 + 31) < 0) {
        operator delete(*(void **)(v12 + 8));
      }
      long long v13 = (void *)v12;
      uint64_t v14 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v9 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      int v18 = *(void **)(v9 - 104);
      if (!v18) {
        goto LABEL_29;
      }
      uint64_t v19 = (void *)v18[1];
      if (v19)
      {
        void v18[2] = v19;
        operator delete(v19);
      }
      long long v13 = v18;
      uint64_t v14 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v9 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v15 = *(void **)(v9 - 104);
      if (!v15) {
        goto LABEL_29;
      }
      *(void *)(v9 - 112) = v15 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 112));
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v9 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v15 = *(void **)(v9 - 104);
      if (!v15) {
        goto LABEL_29;
      }
      *(void *)(v9 - 112) = v15 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 112));
LABEL_23:
      long long v13 = v15;
      uint64_t v14 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v9 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v20 = *(void *)(v9 - 104);
      if (!v20) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
      long long v13 = (void *)v20;
      unsigned int v17 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v9 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      char v16 = *(void **)(v9 - 104);
      if (!v16) {
        goto LABEL_29;
      }
      long long v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v16);
      unsigned int v17 = 2071181815;
LABEL_27:
      uint64_t v14 = v17 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v13, v14);
LABEL_29:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int8 *)(a1 + 12);
  if (v5 != a2 && v5 != 7) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node(turi::flexible_type const&,turi::flex_type_enum,unsigned long)::{lambda(void)#1}::operator()();
  }
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type const&,0>(&v18, "value", a1);
  std::string::basic_string[abi:ne180100]<0>(v19, "type");
  char v21 = 0;
  int v20 = 0;
  uint64_t v19[3] = a2;
  std::string::basic_string[abi:ne180100]<0>(v22, "begin_index");
  memset(&v22[3], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v23, "end_index");
  char v25 = 0;
  int v24 = 0;
  void v23[3] = a3;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v14, &v18, 4);
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = (const void **)v13;
  memset(v11, 0, sizeof(v11));
  int v16 = 0;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v16, (uint64_t)v14, &v12, v11, a4);
  unsigned int v17 = (void **)v11;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v17);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v12, v13[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v14, v15);
  for (uint64_t i = 120; i != -40; i -= 40)
    uint64_t result = std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v18 + i);
  return result;
}

void sub_2241179AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, uint64_t a20,void **a21,char a22)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a21);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a17, a18);
  for (uint64_t i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(&a22 + i));
  _Unwind_Resume(a1);
}

void *turi::unity_sarray::construct_from_planner_node(uint64_t a1, uint64_t *a2)
{
  v36[3] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v30 = 0;
  *(void *)unint64_t v32 = 0;
  *(_DWORD *)&v32[7] = 0x10000;
  char v33 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v34, "");
  memset(v36, 0, 24);
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v22 = *a2;
  uint64_t v23 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::optimize_planner_graph(&v22, (uint64_t)&v30, v24);
  long long v5 = *(_OWORD *)&v24[0].__locale_;
  v24[0].__locale_ = 0;
  v24[1].__locale_ = 0;
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (v24[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v24[1].__locale_);
    }
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 32);
  unint64_t v20 = *(void *)(a1 + 24);
  char v21 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v8 = turi::query_eval::planner::online_materialization_recommended((uint64_t)v24, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v8)
  {
    uint64_t v9 = (int *)global_logger();
    if (v9[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v9)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      unsigned int v10 = (file_logger *)global_logger();
      started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_planner_node", 138, 1);
      uint64_t v12 = pthread_getspecific(*((void *)started + 74));
      if (v12 && *((unsigned char *)v12 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Forced materialization of SArray due to size of lazy graph: ", 60);
      }
      long long v13 = pthread_getspecific(*((void *)started + 74));
      if (v13)
      {
        if (*((unsigned char *)v13 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[2] - 24) + 16));
          uint64_t v14 = std::locale::use_facet(v24, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
          std::locale::~locale(v24);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    uint64_t v15 = *(void *)(a1 + 32);
    v18[0] = *(void *)(a1 + 24);
    v18[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    long long v26 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long __p = 0u;
    memset(v25, 0, sizeof(v25));
    BYTE11(v26) = 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    *((void *)&v28 + 1) = 0;
    long long v29 = 0uLL;
    turi::query_eval::planner::materialize_as_planner_node((uint64_t)&v19, v18, (uint64_t *)v25);
  }
  v24[0].__locale_ = (std::locale::__imp *)v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  if (v35 < 0) {
    operator delete(v34);
  }
  return std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v31);
}

void sub_224117DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::locale::~locale(&a17);
  turi::query_eval::materialize_options::~materialize_options((void **)(v21 - 168));
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_sarray_index(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_sarray_index", 144, 1);
    int v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Construct sarray from location: ", 32);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v30 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v30, &v31);
    uint64_t v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v31);
    uint64_t v9 = pthread_getspecific(*(void *)(v8 + 592));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        unsigned int v10 = std::locale::use_facet(&v33, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v33);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v32 < 0) {
      operator delete((void *)v31.n128_u64[0]);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  turi::fileio::get_file_status(a2, (uint64_t)&v26);
  int v11 = v26;
  if (v26 == 3 || v26 == 0)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v25 = *(std::string *)a2;
    }
    BOOL is_web_protocol = turi::fileio::is_web_protocol((uint64_t)&v25);
  }
  else
  {
    BOOL is_web_protocol = 0;
  }
  if ((v11 == 3 || !v11) && SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (is_web_protocol)
    {
LABEL_29:
      if (*(char *)(a2 + 23) >= 0) {
        size_t v14 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v14 = *(void *)(a2 + 8);
      }
      uint64_t v15 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 16);
      if (v24 < 0) {
        uint64_t v15 = (void **)__p[0];
      }
      if (v14)
      {
        if (*(char *)(a2 + 23) >= 0) {
          int v16 = (const void *)a2;
        }
        else {
          int v16 = *(const void **)a2;
        }
        memmove(v15, v16, v14);
      }
      strcpy((char *)v15 + v14, "/dir_archive.ini");
      BOOL v17 = turi::fileio::try_to_open_file((uint64_t)__p);
      BOOL v18 = v17;
      if (v24 < 0)
      {
        operator delete(__p[0]);
        if (v18) {
          goto LABEL_41;
        }
      }
      else if (v17)
      {
LABEL_41:
        int v19 = 2;
        goto LABEL_46;
      }
      int v19 = 1;
LABEL_46:
      int v26 = v19;
      if (v29 < 0)
      {
        *(unsigned char *)unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        LOBYTE(v27) = 0;
        char v29 = 0;
      }
    }
  }
  else if (is_web_protocol)
  {
    goto LABEL_29;
  }
  switch(v26)
  {
    case 0:
      v33.__locale_ = (std::locale::__imp *)a2;
      uint64_t v34 = &v26;
      turi::unity_sarray::construct_from_sarray_index(std::string)::$_0::operator()((long long **)&v33);
    case 1:
      std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,std::string &,void>((uint64_t)&v21, a2);
    case 2:
      v33.__locale_ = (std::locale::__imp *)-1;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      long long v37 = v38;
      v38[0] = 0;
      v38[1] = 0;
      uint64_t v43 = 0;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v22 = *(std::string *)a2;
      }
      turi::dir_archive::open_directory_for_read((uint64_t)&v33, (uint64_t)&v22);
    case 3:
      v33.__locale_ = (std::locale::__imp *)&v26;
      turi::unity_sarray::construct_from_sarray_index(std::string)::$_2::operator()();
    default:
      if (v29 < 0) {
        operator delete(v27);
      }
      return;
  }
}

void sub_224118494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  turi::dir_archive::~dir_archive((turi::dir_archive *)(v43 - 208));
  if (a43 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_files(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  turi::fileio::get_glob_files(a2, v32);
  BOOL v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      goto LABEL_36;
    }
    int v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_files", 201, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    unsigned int v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        int v11 = std::locale::use_facet(&v33, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v33);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v12 = (int *)global_logger();
  if (v12[169] > 2) {
    goto LABEL_35;
  }
  if (!cppipc::must_cancel((cppipc *)v12))
  {
    long long v13 = (file_logger *)global_logger();
    size_t v14 = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_files", 202, 1);
    uint64_t v15 = pthread_getspecific(*((void *)v14 + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Construct sarray from url: ", 27);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v29 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v29, &__p);
    uint64_t v16 = file_logger::operator<<<std::string>((uint64_t)v14, (uint64_t)&__p);
    BOOL v17 = pthread_getspecific(*(void *)(v16 + 592));
    if (v17 && *((unsigned char *)v17 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)" type: ", 7);
    }
    if (a3 > 9) {
      BOOL v18 = "undefined";
    }
    else {
      BOOL v18 = off_2646D6EE0[a3];
    }
    int v19 = (char *)pthread_getspecific(*(void *)(v16 + 592));
    if (v19)
    {
      if (v19[280])
      {
        unint64_t v20 = v19 + 16;
        size_t v21 = strlen(v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v18, v21);
        size_t v22 = strlen(v18);
        if (v22)
        {
          if (v18[v22 - 1] == 10) {
            file_logger::stream_flush((file_logger *)v16);
          }
        }
      }
    }
    uint64_t v23 = pthread_getspecific(*(void *)(v16 + 592));
    if (v23)
    {
      if (*((unsigned char *)v23 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(v23[2] - 24) + 16));
        char v24 = std::locale::use_facet(&v33, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v33);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v16);
        if (*(_DWORD *)(v16 + 600) == 7)
        {
          __print_back_trace();
          int v26 = __cxa_allocate_exception(8uLL);
          *int v26 = "LOG_FATAL encountered";
          __cxa_throw(v26, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v31 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
LABEL_35:
    (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
    turi::csv_line_tokenizer::csv_line_tokenizer((turi::csv_line_tokenizer *)v27);
    MEMORY[0x22A614700](&v28, "\n");
    turi::csv_line_tokenizer::init((turi::csv_line_tokenizer *)v27);
  }
LABEL_36:
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

void sub_224118B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  std::locale::~locale((std::locale *)&STACK[0x200]);
  if (a70 < 0) {
    operator delete(__p);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  a23 = (uint64_t)&a71;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_json_record_files()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v0);
  turi::sarray<turi::flexible_type>::open_for_write(v0);
}

void sub_224119A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,std::locale a33)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&STACK[0x448]);
  turi::general_ifstream::~general_ifstream((turi::general_ifstream *)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  STACK[0x260] = v33 - 240;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  uint64_t v35 = *(void **)(v33 - 216);
  if (v35)
  {
    *(void *)(v33 - 208) = v35;
    operator delete(v35);
  }
  turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0::~$_0((uint64_t)&STACK[0x2A0]);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v33 - 192));
  if (STACK[0x2D0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2D0]);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_autodetect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  turi::fileio::get_file_status(a2, (uint64_t)&v44);
  int v6 = v44;
  if (v44 == 3 || v44 == 0)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __s = *(std::string *)a2;
    }
    turi::fileio::get_protocol(&__s, (std::string::size_type)v42);
    BOOL is_web_protocol = turi::fileio::is_web_protocol((uint64_t)v42);
  }
  else
  {
    BOOL is_web_protocol = 0;
  }
  if (v6 != 3 && v6 != 0) {
    goto LABEL_20;
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if ((v6 == 3 || !v6) && SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if (!is_web_protocol) {
      goto LABEL_40;
    }
  }
  else
  {
LABEL_20:
    if (!is_web_protocol) {
      goto LABEL_40;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  int v11 = v39;
  std::string::basic_string[abi:ne180100]((uint64_t)v39, v10 + 16);
  if (v40 < 0) {
    int v11 = (void **)v39[0];
  }
  if (v10)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v12 = (const void *)a2;
    }
    else {
      uint64_t v12 = *(const void **)a2;
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/dir_archive.ini");
  BOOL v13 = turi::fileio::try_to_open_file((uint64_t)v39);
  BOOL v14 = v13;
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (v14) {
      goto LABEL_33;
    }
  }
  else if (v13)
  {
LABEL_33:
    int v15 = 2;
    goto LABEL_36;
  }
  int v15 = 1;
LABEL_36:
  int v44 = v15;
  if (v47 < 0)
  {
    unsigned char *v45 = 0;
    uint64_t v46 = 0;
  }
  else
  {
    LOBYTE(v45) = 0;
    char v47 = 0;
  }
LABEL_40:
  switch(v44)
  {
    case 0:
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v38 = *(std::string *)a2;
      }
      (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)a1 + 56))(a1, &v38, a3);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_91;
      }
      char v31 = &v38;
      goto LABEL_90;
    case 1:
      uint64_t v21 = 0;
      int v22 = *(char *)(a2 + 23);
      uint64_t v23 = *(const std::string::value_type **)a2;
      std::string::size_type v24 = *(void *)(a2 + 8);
      if (v22 >= 0) {
        uint64_t v25 = a2;
      }
      else {
        uint64_t v25 = *(void *)a2;
      }
      uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
      if (v22 < 0) {
        uint64_t v26 = *(void *)(a2 + 8);
      }
      uint64_t v27 = v26 + v25 - 1;
      uint64_t v28 = -v26;
      break;
    case 2:
      if (*(char *)(a2 + 23) >= 0) {
        size_t v16 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v16 = *(void *)(a2 + 8);
      }
      BOOL v17 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 16);
      if (v37 < 0) {
        BOOL v17 = (void **)__p[0];
      }
      if (v16)
      {
        if (*(char *)(a2 + 23) >= 0) {
          BOOL v18 = (const void *)a2;
        }
        else {
          BOOL v18 = *(const void **)a2;
        }
        memmove(v17, v18, v16);
      }
      strcpy((char *)v17 + v16, "/dir_archive.ini");
      BOOL v19 = turi::fileio::try_to_open_file((uint64_t)__p);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      int v20 = *(char *)(a2 + 23);
      if (v19)
      {
        if (v20 < 0) {
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v35 = *(std::string *)a2;
        }
        (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 48))(a1, &v35);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        {
          char v31 = &v35;
          goto LABEL_90;
        }
      }
      else
      {
        if (v20 < 0) {
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v34 = *(std::string *)a2;
        }
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)a1 + 56))(a1, &v34, a3);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        {
          char v31 = &v34;
          goto LABEL_90;
        }
      }
      goto LABEL_91;
    case 3:
      turi::unity_sarray::construct_from_autodetect(std::string,turi::flex_type_enum)::$_0::operator()();
    default:
      goto LABEL_91;
  }
  while (v28 != v21 && v21 != -5)
  {
    int v29 = *(unsigned __int8 *)(v27 + v21);
    int v30 = aSidx[v21-- + 4];
    if (v29 != v30) {
      goto LABEL_69;
    }
  }
  if (v21 == -5)
  {
    if (v22 < 0) {
      std::string::__init_copy_ctor_external(&v33, v23, v24);
    }
    else {
      std::string v33 = *(std::string *)a2;
    }
    (*(void (**)(uint64_t, std::string *, std::string::size_type))(*(void *)a1 + 48))(a1, &v33, v24);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      char v31 = &v33;
      goto LABEL_90;
    }
  }
  else
  {
LABEL_69:
    if (v22 < 0) {
      std::string::__init_copy_ctor_external(&v32, v23, v24);
    }
    else {
      std::string v32 = *(std::string *)a2;
    }
    (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)a1 + 56))(a1, &v32, a3);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      char v31 = &v32;
LABEL_90:
      operator delete(v31->__r_.__value_.__l.__data_);
    }
  }
LABEL_91:
  if (v47 < 0) {
    operator delete(v45);
  }
}

void sub_22411A258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v49 - 65) < 0) {
    operator delete(*(void **)(v49 - 88));
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::save_array(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 24))
  {
    v3[0] = -1;
    memset(&v3[1], 0, 24);
    v3[4] = v4;
    v4[0] = 0;
    v4[1] = 0;
    uint64_t v9 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v2 = *(std::string *)a2;
    }
    turi::dir_archive::open_directory_for_write((uint64_t)v3, (uint64_t)&v2, 0);
  }
  turi::unity_sarray::save_array(std::string)::$_0::operator()();
}

void sub_22411A53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  turi::dir_archive::~dir_archive((turi::dir_archive *)&a40);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::save_array_by_index_file(turi::unity_sarray *a1, uint64_t a2)
{
  turi::unity_sarray::get_underlying_sarray(a1, &v5);
  uint64_t v3 = (turi::v2_block_impl::block_manager *)v5;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  turi::sarray<turi::flexible_type>::save(v3, (uint64_t)&__p);
}

void sub_22411A648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::get_underlying_sarray(turi::unity_sarray *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "get_underlying_sarray", 440, 1);
    long long v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    long long v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v21);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v10 = *((void *)this + 3);
  int v11 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v13 = v10;
  BOOL v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v16, 0, sizeof(v16));
  BYTE11(v17) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((void *)&v19 + 1) = 0;
  long long v20 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v13, (uint64_t)v16, (const turi::sframe *)&v21);
  int v15 = (void **)&v19 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((void *)v16 + 1);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  int v15 = v22;
  if (v22 != (void **)1) {
    turi::unity_sarray::get_underlying_sarray(void)::$_0::operator()();
  }
  turi::sframe::select_column((uint64_t)&v21, 0, a2);
  turi::sframe::~sframe((turi::sframe *)&v21);
}

void sub_22411A8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
}

void turi::unity_sarray::clear(turi::unity_sarray *this)
{
  {
    turi::mutex::mutex(&turi::get_empty_sarray(void)::static_sa_lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::get_empty_sarray(void)::static_sa_lock, &dword_223D44000);
  }
  pthread_mutex_lock(&turi::get_empty_sarray(void)::static_sa_lock);
  if (!turi::get_empty_sarray(void)::empty_sarray) {
    operator new();
  }
  uint64_t v1 = *(void *)(turi::get_empty_sarray(void)::empty_sarray + 8);
  v2[0] = *(void *)turi::get_empty_sarray(void)::empty_sarray;
  v2[1] = v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&turi::get_empty_sarray(void)::static_sa_lock);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::make_planner_node(v2, 0, -1);
}

void sub_22411AB04(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::save(turi::unity_sarray *this, turi::oarchive *a2)
{
  LOBYTE(v16[0]) = 1;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v4)
    {
      size_t v9 = 2 * v4 + 2;
      *((void *)a2 + 5) = v9;
      uint64_t v10 = (void *)*((void *)a2 + 2);
      if (v10)
      {
        long long v5 = (unsigned char *)*v10;
        size_t v11 = v10[1] - *v10;
        BOOL v12 = v9 >= v11;
        std::vector<char>::size_type v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v13);
          long long v5 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        long long v5 = malloc_type_realloc(*((void **)a2 + 3), v9, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      long long v5 = (unsigned char *)*((void *)a2 + 3);
    }
    v5[(*((void *)a2 + 4))++] = 1;
  }
  turi::oarchive::get_prefix(a2, (unsigned __int8 *)v16);
  if ((v17 & 0x80u) == 0) {
    size_t v6 = v17;
  }
  else {
    size_t v6 = (size_t)v16[1];
  }
  long long v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 5);
  if (v15 < 0) {
    long long v7 = (void **)__p[0];
  }
  if (v6)
  {
    if ((v17 & 0x80u) == 0) {
      long long v8 = v16;
    }
    else {
      long long v8 = (void **)v16[0];
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".sidx");
  turi::unity_sarray::save_array_by_index_file(this, (uint64_t)__p);
}

void sub_22411ACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::load(turi::unity_sarray *this, turi::iarchive *a2)
{
  (*(void (**)(turi::unity_sarray *))(*(void *)this + 88))(this);
  char v14 = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (!v4)
  {
    std::istream::read();
    return;
  }
  uint64_t v5 = *((void *)a2 + 3);
  int v6 = *(unsigned __int8 *)(v4 + v5);
  char v14 = v6;
  *((void *)a2 + 3) = v5 + 1;
  if (v6)
  {
    turi::iarchive::get_prefix(a2, &v12);
    long long v7 = std::string::append(&v12, ".sidx");
    long long v8 = (std::string::value_type *)v7->__r_.__value_.__r.__words[0];
    std::string::size_type size = v7->__r_.__value_.__l.__size_;
    *(_DWORD *)std::vector<char>::size_type v13 = v7->__r_.__value_.__r.__words[2];
    *(_DWORD *)&void v13[3] = *(_DWORD *)((char *)&v7->__r_.__value_.__r.__words[2] + 3);
    int v10 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
LABEL_7:
      v11.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v11.__r_.__value_.__l.__size_ = size;
      LODWORD(v11.__r_.__value_.__r.__words[2]) = *(_DWORD *)v13;
      *(_DWORD *)((char *)&v11.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v13[3];
      *((unsigned char *)&v11.__r_.__value_.__s + 23) = v10;
      goto LABEL_10;
    }
    std::string::__init_copy_ctor_external(&v11, v8, size);
LABEL_10:
    (*(void (**)(turi::unity_sarray *, std::string *))(*(void *)this + 48))(this, &v11);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        return;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v8);
  }
}

void sub_22411AE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  operator delete(v21);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::size(turi::unity_sarray *this)
{
  std::string v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "size", 425, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    int v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        long long v7 = std::locale::use_facet((const std::locale *)&v16, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale((std::locale *)&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v17 = *((void *)this + 3);
  BOOL v18 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = turi::query_eval::infer_planner_node_length((uint64_t)&v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v9 == -1)
  {
    turi::unity_sarray::get_underlying_sarray(this, &v16);
    if (*(unsigned char *)(v16 + 248) && (int v10 = *(uint64_t **)(v16 + 80), (v11 = *(void *)(v16 + 88) - (void)v10) != 0))
    {
      uint64_t v9 = 0;
      unint64_t v12 = v11 >> 3;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        uint64_t v13 = *v10++;
        v9 += v13;
        --v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (*((void *)&v16 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  return v9;
}

void sub_22411B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

BOOL turi::unity_sarray::has_size(turi::unity_sarray *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::infer_planner_node_length((uint64_t)&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2 != -1;
}

void sub_22411B144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::get_underlying_sarray(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sf.num_columns()", 16);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  long long v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "operator()", 442, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::unity_sarray::get_underlying_sarray(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22411B2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::get_planner_node@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t turi::unity_sarray::dtype(turi::unity_sarray *this)
{
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dtype", 451, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    int v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        long long v7 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v12 = *((void *)this + 3);
  uint64_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::infer_planner_node_type(&v12, (unint64_t *)&v14);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if ((std::locale::__imp *)(locale - v14.__locale_) != (std::locale::__imp *)1) {
    turi::unity_sarray::dtype(void)::$_0::operator()();
  }
  uint64_t v9 = *(char *)v14.__locale_;
  char locale = v14.__locale_;
  operator delete(v14.__locale_);
  return v9;
}

void sub_22411B5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15)
{
}

void turi::unity_sarray::dtype(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nodetype.size()", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  long long v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "operator()", 453, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::unity_sarray::dtype(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22411B7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::head(turi::unity_sarray *this)
{
  v1[32] = *MEMORY[0x263EF8340];
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v1);
  turi::sarray<turi::flexible_type>::open_for_write(v1[0]);
}

void sub_22411BB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  turi::query_eval::materialize_options::~materialize_options(&a19);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](&a32);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((void *)(v32 - 152));
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sarray::transform()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "transform", 488, 1);
    uint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      uint64_t v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::unity_sarray::transform(std::string const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator()();
}

void sub_22411BCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_sarray::transform_native(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = a4;
  int v10 = a3;
  uint64_t v27 = *MEMORY[0x263EF8340];
  turi::get_unity_global_singleton(a3, a4, a5, a6, a7, a8, (uint64_t *)&v23);
  uint64_t v13 = turi::neural_net::external_float_array::shape(v23);
  turi::toolkit_function_registry::get_native_function(v13, a2, (uint64_t)v26);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)&v23, (uint64_t)v26);
  char v25 = v9;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v18);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  v17[0] = v14;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)&v23);
  char v20 = v25;
  int v22 = 0;
  long long v16 = operator new(0x30uLL);
  *(void *)long long v16 = &unk_26D76CBA0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v16 + 8), (uint64_t)v19);
  v16[40] = v20;
  int v22 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node((uint64_t)v17, (uint64_t)v21, v10, a5);
}

void sub_22411BEA8(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, ...)
{
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v8 - 104));
  _Unwind_Resume(a1);
}

void sub_22411BF1C()
{
}

void sub_22411BF24()
{
}

void sub_22411BF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  JUMPOUT(0x22411BF14);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v7, "output_type");
  char v10 = 0;
  int v9 = 0;
  uint64_t v8 = a3;
  std::string::basic_string[abi:ne180100]<0>(v11, "random_seed");
  char v13 = 0;
  int v12 = 0;
  void v11[3] = a4;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v6, &v7, 2);
  turi::any::any<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>();
}

void sub_22411C180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a14, a15);
  std::pair<std::string const,turi::any>::~pair((uint64_t)&a26);
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a18, a19);
  for (uint64_t i = 40; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v26 - 152 + i);
  _Unwind_Resume(a1);
}

void sub_22411C238()
{
}

void sub_22411C240()
{
  std::pair<std::string const,turi::flexible_type>::~pair(v0 - 152);
  JUMPOUT(0x22411C230);
}

void sub_22411C250()
{
}

void turi::unity_sarray::transform_lambda(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
  LOBYTE(v19) = a3;
  HIBYTE(v19) = a4;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v13);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  v12[0] = v9;
  v12[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v18);
  __int16 v15 = v19;
  uint64_t v17 = 0;
  uint64_t v11 = operator new(0x30uLL);
  *(void *)uint64_t v11 = &unk_26D76CC20;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v11 + 4), (uint64_t)v14);
  v11[20] = v15;
  uint64_t v17 = v11;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node((uint64_t)v12, (uint64_t)v16, a3, a5);
}

void sub_22411C3B4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(v8 - 96));
  _Unwind_Resume(a1);
}

void sub_22411C420()
{
}

void turi::unity_sarray::append(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  if (v8 != (*(unsigned int (**)(void))(*(void *)*a2 + 112))()) {
    turi::unity_sarray::append(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()();
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v18);
  uint64_t v9 = v18;
  uint64_t v10 = (std::__shared_weak_count *)a1[4];
  uint64_t v14 = a1[3];
  uint64_t v15 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 32);
  uint64_t v12 = *(void *)(v7 + 24);
  uint64_t v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::make_planner_node(&v14, &v12, &v16);
  turi::unity_sarray::construct_from_planner_node(v9, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *a3 = v18;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_22411C574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::vector_slice(turi::unity_sarray *this, unint64_t a2, unint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "vector_slice", 583, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(v21, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v21);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  int v12 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  if ((v12 - 5) > 0xFDu)
  {
    if (a3 > a2)
    {
      char v13 = v12;
      if (v12 == 3 && a2 + 1 == a3) {
        char v15 = 1;
      }
      else {
        char v15 = v12;
      }
      _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v21);
      uint64_t v16 = *((void *)this + 3);
      uint64_t v17 = *((void *)this + 4);
      v20[0] = v16;
      v20[1] = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = 0;
      long long v18 = operator new(0x28uLL);
      *long long v18 = &unk_26D76CCA0;
      v18[1] = a3;
      *((unsigned char *)v18 + 16) = v15;
      v18[3] = a2;
      *((unsigned char *)v18 + 32) = v13;
      uint64_t v23 = v18;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node((uint64_t)v20, (uint64_t)v22, v15, -1);
    }
    turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_1::operator()();
  }
  turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_0::operator()();
}

void sub_22411C89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, char a16)
{
}

void turi::unity_sarray::filter(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v4);
  uint64_t v3 = v4;
  uint64_t v2 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 168))(a1, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_22411C9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::logical_filter(uint64_t a1, uint64_t *a2)
{
  void v21[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "logical_filter", 649, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(v16, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    uint64_t v11 = a2[1];
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    int v12 = *(std::__shared_weak_count **)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 24);
    uint64_t v20 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v13 = *(std::__shared_weak_count **)(v10 + 32);
    uint64_t v17 = *(void *)(v10 + 24);
    long long v18 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v14 = turi::query_eval::planner::test_equal_length((uint64_t)v16, &v19, &v17);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v14)
    {
      v21[0] = &unk_26D76CD20;
      v21[3] = v21;
      turi::unity_sarray::transform_lambda(v10, (uint64_t)v21, 0, 1, 0);
    }
    turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1::operator()();
  }
  turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()();
}

void sub_22411CD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index != nullptr", 16);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "operator()", 651, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22411CECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::topk_index(turi::unity_sarray *this, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "topk_index", 678, 1);
    int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v11 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  unsigned int v12 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "<");
  turi::unity_sarray_binary_operations::check_operation_feasibility(v11, v12, (unsigned __int8 *)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  turi::unity_sarray::get_underlying_sarray(this, &v17);
  v21[3].__locale_ = 0;
  if (a3) {
    char v13 = (std::locale::__imp *)&unk_26D76CDA0;
  }
  else {
    char v13 = (std::locale::__imp *)&unk_26D76CE48;
  }
  v22[0].__locale_ = v13;
  uint64_t v23 = v22;
  std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::swap(v22, v21);
  BOOL v14 = (turi::thread *)std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~function(v22);
  uint64_t v15 = v17;
  turi::thread::cpu_count(v14);
  turi::sarray<turi::flexible_type>::get_reader(v15);
}

void sub_22411D970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,std::locale a48,uint64_t a49)
{
}

void *boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~priority_queue(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  std::vector<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~function((void *)a1);
}

void *boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::push(void *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  memset(v27, 0, 13);
  if (v27 != (atomic_ullong **)a2)
  {
    *(atomic_ullong **)((char *)v27 + 5) = *(atomic_ullong **)(a2 + 5);
    v27[0] = *(atomic_ullong **)a2;
    BYTE4(v27[1]) = *(unsigned char *)(a2 + 12);
    if (BYTE4(v27[1]) <= 9u && ((1 << SBYTE4(v27[1])) & 0x33C) != 0) {
      atomic_fetch_add(v27[0], 1uLL);
    }
  }
  long long v28 = *(_OWORD *)(a2 + 16);
  unint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  if (v4 >= v5)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = (uint64_t)(v4 - v8) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - v8;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 32 * v9;
    unint64_t v15 = v12 + 32 * v13;
    *(void *)unint64_t v14 = 0;
    *(_DWORD *)(v14 + 8) = 0;
    *(unsigned char *)(v14 + 12) = 0;
    uint64_t v16 = v27[0];
    *(atomic_ullong **)(v14 + 5) = *(atomic_ullong **)((char *)v27 + 5);
    *(void *)unint64_t v14 = v16;
    *(unsigned char *)(v14 + 12) = BYTE4(v27[1]);
    BYTE4(v27[1]) = 0;
    *(_OWORD *)(v14 + 16) = v28;
    unint64_t v7 = v14 + 32;
    long long v17 = (char *)a1[4];
    long long v18 = (char *)a1[5];
    if (v18 == v17)
    {
      a1[4] = v14;
      a1[5] = v7;
      a1[6] = v15;
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = v14 + v19;
        *(void *)(v20 - 32) = 0;
        *(_DWORD *)(v20 - 24) = 0;
        *(unsigned char *)(v20 - 20) = 0;
        uint64_t v21 = *(void *)&v18[v19 - 32];
        *(void *)(v20 - 27) = *(void *)&v18[v19 - 27];
        *(void *)(v20 - 32) = v21;
        *(unsigned char *)(v20 - 20) = v18[v19 - 20];
        v18[v19 - 20] = 0;
        *(_OWORD *)(v20 - 16) = *(_OWORD *)&v18[v19 - 16];
        v19 -= 32;
      }
      while (&v18[v19] != v17);
      long long v18 = (char *)a1[4];
      uint64_t v22 = a1[5];
      a1[4] = v14 + v19;
      a1[5] = v7;
      a1[6] = v15;
      while ((char *)v22 != v18)
        uint64_t v22 = turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type(v22 - 32);
    }
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *(void *)unint64_t v4 = 0;
    *(_DWORD *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 12) = 0;
    uint64_t v6 = v27[0];
    *(atomic_ullong **)(v4 + 5) = *(atomic_ullong **)((char *)v27 + 5);
    *(void *)unint64_t v4 = v6;
    *(unsigned char *)(v4 + 12) = BYTE4(v27[1]);
    BYTE4(v27[1]) = 0;
    *(_OWORD *)(v4 + 16) = v28;
    unint64_t v7 = v4 + 32;
  }
  a1[5] = v7;
  turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)v27);
  uint64_t v23 = a1[4];
  uint64_t v24 = a1[5];
  std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::function((uint64_t)v26, (uint64_t)a1);
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::heap::detail::heap_base<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>,false,unsigned long,false> &,std::__wrap_iter<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type*>>(v23, v24, (uint64_t)v26, (v24 - v23) >> 5);
  return std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~function(v26);
}

void sub_22411DDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::pop(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::function((uint64_t)v12, a1);
  if (v3 - v2 >= 33)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (v3 - v2) >> 5;
    uint64_t v6 = *(void *)v2;
    *(void *)&v14[5] = *(void *)(v2 + 5);
    *(void *)unint64_t v14 = v6;
    v14[12] = *(unsigned char *)(v2 + 12);
    *(unsigned char *)(v2 + 12) = 0;
    long long v15 = *(_OWORD *)(v2 + 16);
    uint64_t v7 = v2;
    do
    {
      uint64_t v8 = (uint64_t *)(v7 + 32 * v4 + 32);
      uint64_t v9 = (2 * v4) | 1;
      uint64_t v10 = 2 * v4 + 2;
      if (v10 < v5)
      {
        if (!v13) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 48))(v13, v7 + 32 * v4 + 32, v7 + 32 * v4 + 64))
        {
          v8 += 4;
          uint64_t v9 = v10;
        }
      }
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=(v7, v8);
      uint64_t v7 = (uint64_t)v8;
      uint64_t v4 = v9;
    }
    while (v9 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
    if (v8 == (uint64_t *)(v3 - 32))
    {
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=((uint64_t)v8, (uint64_t *)v14);
    }
    else
    {
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=((uint64_t)v8, (uint64_t *)(v3 - 32));
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=(v3 - 32, (uint64_t *)v14);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::heap::detail::heap_base<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>,false,unsigned long,false> &,std::__wrap_iter<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type*>>(v2, (uint64_t)(v8 + 4), (uint64_t)v12, ((uint64_t)v8 - v2 + 32) >> 5);
    }
    turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)v14);
  }
  std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~function(v12);
  uint64_t result = turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type(*(void *)(a1 + 40) - 32);
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_22411DFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void turi::unity_sarray::num_missing(turi::unity_sarray *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "num_missing", 792, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  void v12[2] = 0;
  void v12[3] = 0;
  v12[0] = (uint64_t (**)(void))&unk_26D76CF08;
  v11[0] = v8;
  v11[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v11, v12);
}

void sub_22411E734(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::all(turi::unity_sarray *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "all", 805, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = (uint64_t (**)(void))&unk_26D76CFA8;
  *(uint64_t (***)(void))((char *)&v12[1] + 4) = (uint64_t (**)(void))0x100000001;
  v11[0] = v8;
  v11[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v11, v12);
}

void sub_22411EFBC(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::any(turi::unity_sarray *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "any", 822, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v15, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = (uint64_t (**)(void))&unk_26D76D048;
  int v13 = 0;
  int v14 = 0;
  v11[0] = v8;
  v11[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v11, &v12);
}

void sub_22411F888(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::max(turi::unity_sarray *this@<X0>, void **a2@<X8>)
{
  v31[6] = *(uint64_t (***)(void))MEMORY[0x263EF8340];
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "max", 839, 1);
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        uint64_t v8 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unsigned int v9 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  if (v9 >= 2 && v9 != 6) {
    turi::unity_sarray::max(void)::$_1::operator()();
  }
  *a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((unsigned char *)a2 + 12) = 0;
  if (v9 == 6)
  {
    uint64_t time_rep = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(3);
    uint64_t v13 = turi::flexible_type_impl::ptime_to_time_t(&time_rep) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
    int v14 = (uint64_t *)a2;
    switch(*((unsigned char *)a2 + 12))
    {
      case 2:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v15 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        if (*((char *)v15 + 31) < 0) {
          operator delete((void *)v15[1]);
        }
        uint64_t v16 = v15;
        uint64_t v17 = 0x1012C404EF22A49;
        goto LABEL_45;
      case 3:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v20 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        uint64_t v21 = (void *)v20[1];
        if (v21)
        {
          void v20[2] = (atomic_ullong)v21;
          operator delete(v21);
        }
        uint64_t v16 = v20;
        uint64_t v17 = 0x1080C409938AC02;
        goto LABEL_45;
      case 4:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v18 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        v30.__locale_ = (std::locale::__imp *)(v18 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        goto LABEL_40;
      case 5:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v18 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        v30.__locale_ = (std::locale::__imp *)(v18 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
LABEL_40:
        uint64_t v16 = v18;
        uint64_t v17 = 0x1020C405E66F15BLL;
        goto LABEL_45;
      case 8:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v22 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)v22 + 2);
        uint64_t v16 = v22;
        unsigned int v19 = -235920773;
        goto LABEL_44;
      case 9:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        if (!*a2) {
          goto LABEL_46;
        }
        uint64_t v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a2);
        unsigned int v19 = 2071181815;
LABEL_44:
        uint64_t v17 = v19 | 0x1030C4000000000;
LABEL_45:
        MEMORY[0x22A614FA0](v16, v17);
LABEL_46:
        int v14 = (uint64_t *)a2;
        *a2 = 0;
LABEL_47:
        *((unsigned char *)v14 + 12) = 6;
        *int v14 = v13;
        *((_DWORD *)v14 + 2) = 0;
        break;
      default:
        goto LABEL_47;
    }
  }
  else
  {
    if (v9 == 1)
    {
      uint64_t v11 = (unint64_t *)a2;
      *((_DWORD *)a2 + 2) = 0;
      *((unsigned char *)a2 + 12) = 1;
      unint64_t v12 = 0xFFEFFFFFFFFFFFFFLL;
    }
    else
    {
      if ((_BYTE)v9) {
        goto LABEL_48;
      }
      uint64_t v11 = (unint64_t *)a2;
      *((_DWORD *)a2 + 2) = 0;
      *((unsigned char *)a2 + 12) = 0;
      unint64_t v12 = 0x8000000000000000;
    }
    unint64_t *v11 = v12;
  }
LABEL_48:
  uint64_t v23 = *((void *)this + 3);
  uint64_t v24 = *((void *)this + 4);
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v29[5] = 0x700000000000000;
  *(void *)uint64_t v29 = 0;
  void v27[4] = a2;
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::generic_aggregator((uint64_t)v31, (uint64_t)a2, (uint64_t)v29);
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v27, v31);
}

void sub_224120B64(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::min(turi::unity_sarray *this@<X0>, void **a2@<X8>)
{
  v31[6] = *(uint64_t (***)(void))MEMORY[0x263EF8340];
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "min", 875, 1);
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        uint64_t v8 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unsigned int v9 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  if (v9 >= 2 && v9 != 6) {
    turi::unity_sarray::min(void)::$_1::operator()();
  }
  *a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((unsigned char *)a2 + 12) = 0;
  if (v9 == 6)
  {
    uint64_t time_rep = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(4);
    uint64_t v13 = turi::flexible_type_impl::ptime_to_time_t(&time_rep) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
    int v14 = (uint64_t *)a2;
    switch(*((unsigned char *)a2 + 12))
    {
      case 2:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v15 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        if (*((char *)v15 + 31) < 0) {
          operator delete((void *)v15[1]);
        }
        uint64_t v16 = v15;
        uint64_t v17 = 0x1012C404EF22A49;
        goto LABEL_45;
      case 3:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v20 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        uint64_t v21 = (void *)v20[1];
        if (v21)
        {
          void v20[2] = (atomic_ullong)v21;
          operator delete(v21);
        }
        uint64_t v16 = v20;
        uint64_t v17 = 0x1080C409938AC02;
        goto LABEL_45;
      case 4:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v18 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        v30.__locale_ = (std::locale::__imp *)(v18 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
        goto LABEL_40;
      case 5:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v18 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        v30.__locale_ = (std::locale::__imp *)(v18 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
LABEL_40:
        uint64_t v16 = v18;
        uint64_t v17 = 0x1020C405E66F15BLL;
        goto LABEL_45;
      case 8:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        atomic_ullong *volatile v22 = *a2;
        if (!*a2) {
          goto LABEL_46;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)v22 + 2);
        uint64_t v16 = v22;
        unsigned int v19 = -235920773;
        goto LABEL_44;
      case 9:
        if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_47;
        }
        if (!*a2) {
          goto LABEL_46;
        }
        uint64_t v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a2);
        unsigned int v19 = 2071181815;
LABEL_44:
        uint64_t v17 = v19 | 0x1030C4000000000;
LABEL_45:
        MEMORY[0x22A614FA0](v16, v17);
LABEL_46:
        int v14 = (uint64_t *)a2;
        *a2 = 0;
LABEL_47:
        *((unsigned char *)v14 + 12) = 6;
        *int v14 = v13;
        *((_DWORD *)v14 + 2) = 0;
        break;
      default:
        goto LABEL_47;
    }
  }
  else
  {
    if (v9 == 1)
    {
      uint64_t v11 = (uint64_t *)a2;
      *((_DWORD *)a2 + 2) = 0;
      *((unsigned char *)a2 + 12) = 1;
      uint64_t v12 = 0x7FEFFFFFFFFFFFFFLL;
    }
    else
    {
      if ((_BYTE)v9) {
        goto LABEL_48;
      }
      uint64_t v11 = (uint64_t *)a2;
      *((_DWORD *)a2 + 2) = 0;
      *((unsigned char *)a2 + 12) = 0;
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t *v11 = v12;
  }
LABEL_48:
  uint64_t v23 = *((void *)this + 3);
  uint64_t v24 = *((void *)this + 4);
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&v29[5] = 0x700000000000000;
  *(void *)uint64_t v29 = 0;
  void v27[4] = a2;
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::generic_aggregator((uint64_t)v31, (uint64_t)a2, (uint64_t)v29);
  v27[0] = v23;
  v27[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v27, v31);
}

void sub_224122544(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::sum(turi::unity_sarray *this)
{
  v23[8] = *(uint64_t (***)(void))MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "sum", 910, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unsigned int v8 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  if (v8 <= 1)
  {
    uint64_t v10 = *((void *)this + 3);
    uint64_t v9 = *((void *)this + 4);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    memset(v21, 0, 13);
    v21[12] = v8 != 0;
    turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::generic_aggregator((uint64_t)v23, (uint64_t)v21);
    v20[0] = v10;
    v20[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v20, v23);
  }
  if (v8 != 9 && v8 != 3) {
    turi::unity_sarray::sum(void)::$_5::operator()();
  }
  char v16 = 0;
  LOBYTE(v20[0]) = 0;
  memset(&v20[1], 0, 13);
  BYTE4(v20[2]) = v8;
  switch((char)v8)
  {
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      v20[1] = 0x1900000000000000;
      LODWORD(v20[2]) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      break;
  }
  uint64_t v13 = *((void *)this + 3);
  uint64_t v12 = *((void *)this + 4);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v12;
  v18[0] = v20[0];
  *(void *)&v19[5] = *(void *)((char *)&v20[1] + 5);
  *(void *)unsigned int v19 = v20[1];
  v19[12] = BYTE4(v20[2]);
  if (BYTE4(v20[2]) <= 9u && ((1 << SBYTE4(v20[2])) & 0x33C) != 0) {
    atomic_fetch_add(*(atomic_ullong *volatile *)v19, 1uLL);
  }
  void v17[2] = &v16;
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::generic_aggregator((uint64_t)v23, (uint64_t)&v16, v18);
  v17[0] = v13;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v17, v23);
}

void sub_22412417C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1030C407B73B9F7);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)&STACK[0x248]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::mean(turi::unity_sarray *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "mean", 1008, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v20, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unsigned int v8 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  if (v8 <= 1)
  {
    uint64_t v9 = *((void *)this + 3);
    uint64_t v10 = *((void *)this + 4);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    v21[0] = (uint64_t (**)(void))&unk_26D76D368;
    long long v22 = 0u;
    long long v23 = 0u;
    *(void *)&long long v18 = v9;
    *((void *)&v18 + 1) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)&v18, v21);
  }
  if (v8 != 9 && v8 != 3) {
    turi::unity_sarray::mean(void)::$_4::operator()();
  }
  unsigned int v19 = 0;
  *(void *)&long long v18 = 0;
  *(void *)((char *)&v18 + 5) = 0;
  uint64_t v13 = *((void *)this + 3);
  uint64_t v12 = *((void *)this + 4);
  uint64_t v15 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    *(atomic_ullong **)((char *)v17 + 5) = *(atomic_ullong **)((char *)&v18 + 5);
    v17[0] = (atomic_ullong *)v18;
    BYTE4(v17[1]) = BYTE12(v18);
    if (BYTE12(v18) <= 9u && ((1 << SBYTE12(v18)) & 0x33C) != 0) {
      atomic_fetch_add(v17[0], 1uLL);
    }
  }
  else
  {
    memset(v17, 0, 13);
  }
  void v17[2] = v19;
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::generic_aggregator((uint64_t)v21, (uint64_t)v17);
  v16[0] = v13;
  v16[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v16, v21);
}

void sub_22412583C(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::std(turi::unity_sarray *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "std", 1106, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet((const std::locale *)v38, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)v38);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  (*(void (**)(unsigned char *__return_ptr, turi::unity_sarray *, uint64_t))(*(void *)this + 240))(v44, this, a2);
  if (v44[12] == 7)
  {
    *(void *)(a3 + 5) = *(void *)&v44[5];
    *(void *)a3 = *(void *)v44;
    *(unsigned char *)(a3 + 12) = 7;
  }
  else
  {
    switch(v44[12])
    {
      case 0:
        double v12 = (double)*(uint64_t *)v44;
        goto LABEL_38;
      case 1:
        double v12 = *(double *)v44;
        goto LABEL_38;
      case 2:
        uint64_t v13 = *(void *)v44;
        size_t __idx = 0;
        int v14 = (char *)(*(void *)v44 + 8);
        if (*(char *)(*(void *)v44 + 31) < 0) {
          int v14 = *(char **)(*(void *)v44 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(v38, v14);
        double v15 = std::stod((const std::string *)v38, &__idx);
        if (SHIBYTE(v39[0]) < 0) {
          operator delete(v38[0]);
        }
        if (*(char *)(v13 + 31) < 0) {
          uint64_t v16 = *(void *)(v13 + 16);
        }
        else {
          uint64_t v16 = *(unsigned __int8 *)(v13 + 31);
        }
        if (__idx != v16)
        {
          std::string v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v36 = std::string::append(&v42, " cannot be interpreted as a float");
          long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v39[0] = (void *)v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string v38 = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v35, (const std::string *)v38);
          __cxa_throw(v35, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v21 = v15;
        double v12 = v21;
        goto LABEL_38;
      case 3:
        v38[1] = 0;
        v39[0] = 0;
        v38[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v38, *(const void **)(*(void *)v44 + 8), *(void *)(*(void *)v44 + 16), (uint64_t)(*(void *)(*(void *)v44 + 16) - *(void *)(*(void *)v44 + 8)) >> 3);
        turi::flexible_type_fail(0);
        double v12 = 0.0;
        if (v38[0])
        {
          v38[1] = v38[0];
          operator delete(v38[0]);
        }
        goto LABEL_38;
      case 4:
        v38[1] = 0;
        v39[0] = 0;
        v38[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v38, *(uint64_t **)(*(void *)v44 + 8), *(uint64_t **)(*(void *)v44 + 16), (uint64_t)(*(void *)(*(void *)v44 + 16) - *(void *)(*(void *)v44 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        goto LABEL_30;
      case 5:
        v38[1] = 0;
        v39[0] = 0;
        v38[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v38, *(uint64_t **)(*(void *)v44 + 8), *(uint64_t **)(*(void *)v44 + 16), (uint64_t)(*(void *)(*(void *)v44 + 16) - *(void *)(*(void *)v44 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        goto LABEL_30;
      case 6:
        double v12 = (double)*(int *)&v44[8] / 1000000.0 + (double)((uint64_t)(*(void *)v44 << 8) >> 8);
        goto LABEL_38;
      case 8:
        uint64_t v17 = *(void *)v44;
        long long v18 = *(atomic_uint **)(*(void *)v44 + 16);
        v38[0] = *(void **)(*(void *)v44 + 8);
        v38[1] = v18;
        if (v18) {
          atomic_fetch_add_explicit(v18 + 2, 1u, memory_order_relaxed);
        }
        long long v19 = *(_OWORD *)(v17 + 24);
        long long v20 = *(_OWORD *)(v17 + 56);
        long long v40 = *(_OWORD *)(v17 + 40);
        long long v41 = v20;
        *(_OWORD *)long long v39 = v19;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&v38[1]);
LABEL_30:
        double v12 = 0.0;
        goto LABEL_38;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v38, *(void *)v44 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v40 + 1))
        {
          *(void *)&long long v41 = *((void *)&v40 + 1);
          operator delete(*((void **)&v40 + 1));
        }
        if (v39[0])
        {
          v39[1] = v39[0];
          operator delete(v39[0]);
        }
        double v12 = 0.0;
        if (v38[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38[1]);
        }
LABEL_38:
        *(_DWORD *)(a3 + 8) = 0;
        *(unsigned char *)(a3 + 12) = 1;
        *(double *)a3 = sqrt(v12);
        switch(v44[12])
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              long long v22 = *(void **)v44;
              if (*(void *)v44)
              {
                if (*(char *)(*(void *)v44 + 31) < 0) {
                  operator delete(*(void **)(*(void *)v44 + 8));
                }
                long long v23 = v22;
                uint64_t v24 = 0x1012C404EF22A49;
                goto LABEL_69;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              char v31 = *(void **)v44;
              if (*(void *)v44)
              {
                uint64_t v32 = *(void **)(*(void *)v44 + 8);
                if (v32)
                {
                  *(void *)(*(void *)v44 + 16) = v32;
                  operator delete(v32);
                }
                long long v23 = v31;
                uint64_t v24 = 0x1080C409938AC02;
                goto LABEL_69;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              char v25 = *(void **)v44;
              if (*(void *)v44)
              {
                v38[0] = (void *)(*(void *)v44 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
                goto LABEL_64;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              char v25 = *(void **)v44;
              if (*(void *)v44)
              {
                v38[0] = (void *)(*(void *)v44 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
LABEL_64:
                long long v23 = v25;
                uint64_t v24 = 0x1020C405E66F15BLL;
                goto LABEL_69;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::string v33 = *(void **)v44;
              if (*(void *)v44)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v44 + 16));
                long long v23 = v33;
                unsigned int v30 = -235920773;
                goto LABEL_68;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v26 = *(void **)v44;
              if (*(void *)v44)
              {
                uint64_t v27 = *(void **)(*(void *)v44 + 48);
                if (v27)
                {
                  *(void *)(*(void *)v44 + 56) = v27;
                  operator delete(v27);
                }
                long long v28 = (void *)v26[3];
                if (v28)
                {
                  void v26[4] = v28;
                  operator delete(v28);
                }
                uint64_t v29 = (std::__shared_weak_count *)v26[2];
                if (v29) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
                }
                long long v23 = v26;
                unsigned int v30 = 2071181815;
LABEL_68:
                uint64_t v24 = v30 | 0x1030C4000000000;
LABEL_69:
                MEMORY[0x22A614FA0](v23, v24);
              }
            }
            break;
          default:
            return;
        }
        break;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
}

void sub_224126148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v27)
  {
LABEL_8:
    switch(*(unsigned char *)(v28 - 76))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        uint64_t v30 = *(void *)(v28 - 88);
        if (!v30) {
          goto LABEL_34;
        }
        if (*(char *)(v30 + 31) < 0) {
          operator delete(*(void **)(v30 + 8));
        }
        char v31 = (void *)v30;
        uint64_t v32 = 0x1012C404EF22A49;
        goto LABEL_33;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        uint64_t v36 = *(void **)(v28 - 88);
        if (!v36) {
          goto LABEL_34;
        }
        long long v37 = (void *)v36[1];
        if (v37)
        {
          v36[2] = v37;
          operator delete(v37);
        }
        char v31 = v36;
        uint64_t v32 = 0x1080C409938AC02;
        goto LABEL_33;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        std::string v33 = *(void **)(v28 - 88);
        if (!v33) {
          goto LABEL_34;
        }
        a21 = v33 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        goto LABEL_28;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        std::string v33 = *(void **)(v28 - 88);
        if (!v33) {
          goto LABEL_34;
        }
        a21 = v33 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
LABEL_28:
        char v31 = v33;
        uint64_t v32 = 0x1020C405E66F15BLL;
        goto LABEL_33;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        uint64_t v38 = *(void *)(v28 - 88);
        if (!v38) {
          goto LABEL_34;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v38 + 16));
        char v31 = (void *)v38;
        unsigned int v35 = -235920773;
        goto LABEL_32;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v28 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_34;
        }
        std::string v34 = *(void **)(v28 - 88);
        if (!v34) {
          goto LABEL_34;
        }
        char v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v34);
        unsigned int v35 = 2071181815;
LABEL_32:
        uint64_t v32 = v35 | 0x1030C4000000000;
LABEL_33:
        MEMORY[0x22A614FA0](v31, v32);
LABEL_34:
        _Unwind_Resume(a1);
        return;
      default:
        goto LABEL_34;
    }
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

uint64_t turi::unity_sarray::var@<X0>(turi::unity_sarray *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = (int *)global_logger();
  if (v5[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "var", 1117, 1);
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        uint64_t v10 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (!(*(unsigned int (**)(turi::unity_sarray *))(*(void *)this + 104))(this)
    || (uint64_t result = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 96))(this)) != 0)
  {
    unint64_t v12 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 96))(this);
    if ((*(unsigned int (**)(turi::unity_sarray *))(*(void *)this + 112))(this) <= 1)
    {
      if (v12 > a2)
      {
        uint64_t v13 = *((void *)this + 3);
        uint64_t v14 = *((void *)this + 4);
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        long long v18 = (uint64_t (**)(void))&unk_26D76D4A8;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        v17[0] = v13;
        v17[1] = v14;
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v17, &v18);
      }
      turi::unity_sarray::var(unsigned long)::$_0::operator()();
    }
    turi::unity_sarray::var(unsigned long)::$_3::operator()();
  }
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 12) = 7;
  return result;
}

void sub_224126D18(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::str_to_datetime(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "str_to_datetime", 1174, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    unsigned int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v10 = (turi::thread *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (v10 != 2) {
    turi::unity_sarray::str_to_datetime(std::string)::$_0::operator()();
  }
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0)
  {
    if (*(void *)(a2 + 8) != 3) {
      goto LABEL_21;
    }
    unint64_t v12 = *(const std::string::value_type **)a2;
  }
  else
  {
    unint64_t v12 = (const std::string::value_type *)a2;
    if (v11 != 3) {
      goto LABEL_21;
    }
  }
  int v13 = *(unsigned __int16 *)v12;
  int v14 = *((unsigned __int8 *)v12 + 2);
  if (v13 == 21321 && v14 == 79) {
    uint64_t v10 = (turi::thread *)MEMORY[0x22A614700](a2, "%Y%m%dT%H%M%S%F%q");
  }
LABEL_21:
  unint64_t v16 = turi::thread::cpu_count(v10);
  std::vector<std::shared_ptr<std::istringstream>>::vector(&v26, v16);
  if (v16) {
    operator new();
  }
  v22.__locale_ = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  std::vector<std::shared_ptr<std::istringstream>>::__init_with_size[abi:ne180100]<std::shared_ptr<std::istringstream>*,std::shared_ptr<std::istringstream>*>(&v22, v26, v27, (v27 - v26) >> 4);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v25 = *(std::string *)a2;
  }
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  std::vector<std::shared_ptr<std::istringstream>>::__init_with_size[abi:ne180100]<std::shared_ptr<std::istringstream>*,std::shared_ptr<std::istringstream>*>(&v19, v22.__locale_, v23, (v23 - (char *)v22.__locale_) >> 4);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v25;
  }
  uint64_t v29 = 0;
  uint64_t v17 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v17 = &unk_26D76D5C0;
  *(_OWORD *)(v17 + 8) = v19;
  *((void *)v17 + 3) = v20;
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  *(std::string *)(v17 + 32) = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v29 = v17;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v28, 6, 1, 0);
}

void sub_2241273E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,std::locale a22,std::locale a23,char a24)
{
  *(void *)(v24 - 136) = &a9;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 136));
  turi::unity_sarray::str_to_datetime(std::string)::$_1::~$_1((uint64_t)&a15);
  a15.__locale_ = (std::locale::__imp *)&a24;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::str_to_datetime(std::string)::$_1::~$_1(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v3 = (void **)a1;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void turi::unity_sarray::datetime_to_str(uint64_t a1)
{
  v11[7] = *MEMORY[0x263EF8340];
  uint64_t v1 = (turi::thread *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (v1 == 6)
  {
    unint64_t v2 = turi::thread::cpu_count(v1);
    std::vector<std::shared_ptr<std::ostringstream>>::vector(v11, v2);
    if (v2) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v3, "");
    std::string::basic_string[abi:ne180100]<0>(&v8, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    std::string::basic_string[abi:ne180100]<0>(__loc, "");
    boost::date_time::time_zone_names_base<char>::time_zone_names_base(&v10, (long long *)&v3, &v8, (long long *)v6, (long long *)__loc);
    if (v5 < 0) {
      operator delete(__loc[0].__locale_);
    }
    if (v7 < 0) {
      operator delete(v6[0].__locale_);
    }
    if (v9 < 0) {
      operator delete((void *)v8);
    }
    if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v3.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  turi::unity_sarray::datetime_to_str(std::string)::$_0::operator()();
}

void sub_224127BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,atomic_uint *a36,uint64_t a37,uint64_t a38)
{
  operator delete(v38);
  turi::unity_sarray::datetime_to_str(std::string)::$_1::~$_1((uint64_t)&__p);
  turi::unity_sarray::datetime_to_str(std::string)::$_1::~$_1((uint64_t)&a19);
  boost::detail::shared_count::~shared_count(&a36);
  boost::date_time::time_zone_names_base<char>::~time_zone_names_base((uint64_t)&a38);
  a38 = v39 - 152;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::datetime_to_str(std::string)::$_1::~$_1(uint64_t a1)
{
  boost::detail::shared_count::~shared_count((atomic_uint **)(a1 + 56));
  std::string v3 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t turi::unity_sarray::astype@<X0>(uint64_t a1@<X0>, char a2@<W2>, void *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  if ((a2 & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    if (result == 2) {
      return (*(uint64_t (**)(void))(*(void *)*a3 + 392))(*a3);
    }
  }
  return result;
}

void sub_224127F48(_Unwind_Exception *exception_object)
{
  std::string v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::lazy_astype(void *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, std::locale::__imp **a4@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  long long v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    char v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "lazy_astype", 1320, 1);
    int v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        int v13 = std::locale::use_facet(v31, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(v31);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  int v14 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  if (a2 == 3 && v14 == 8)
  {
    std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v41, a1 + 1);
    v46[0] = (uint64_t)v41;
    v46[1] = v42;
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    turi::image_util::image_sarray_to_vector_sarray(v46, a3);
  }
  if (a2 == 8 && v14 == 2)
  {
    unint64_t v52 = &unk_26D76D880;
    char v53 = a3;
    uint64_t v54 = &v52;
    turi::unity_sarray::transform_lambda((uint64_t)a1, (uint64_t)&v52, 8, 1, 0);
  }
  if (v14 != a2)
  {
    BOOL v20 = (a2 < 2 || a2 - 3 < 3) && v14 == 2;
    BOOL v21 = v14 == 4 && a2 == 3;
    if (v21
      || v20
      || turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * v14 + a2])
    {
      if (v14 == 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, ",");
        *(_OWORD *)&v31[0].__locale_ = 0u;
        long long v32 = 0u;
        LODWORD(v33) = 1065353216;
        memset(v37, 0, sizeof(v37));
        int v38 = 1065353216;
        memset(v35, 0, sizeof(v35));
        int v36 = 1065353216;
        turi::flexible_type_parser::flexible_type_parser(&v41, __p, 1, 92, v31, v37, v35, 0);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v35);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v37);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v31);
        if (v40 < 0) {
          operator delete(__p[0]);
        }
        LOBYTE(v31[0].__locale_) = a2;
        BYTE1(v31[0].__locale_) = a3;
        uint64_t v23 = v41;
        uint64_t v22 = v42;
        v31[1].__locale_ = v41;
        *(void *)&long long v32 = v42;
        if (v42) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = v43;
        uint64_t v24 = v44;
        *((void *)&v32 + 1) = v43;
        uint64_t v33 = v44;
        if (v44) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
        }
        char v26 = v45;
        char v34 = v45;
        __int16 locale = (__int16)v31[0].__locale_;
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
        }
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        char v51 = 0;
        uint64_t v28 = operator new(0x38uLL);
        *(void *)uint64_t v28 = &unk_26D76D900;
        void v28[4] = locale;
        *((void *)v28 + 2) = v23;
        *((void *)v28 + 3) = v22;
        *((void *)v28 + 4) = v25;
        *((void *)v28 + 5) = v24;
        *((unsigned char *)v28 + 48) = v26;
        char v51 = v28;
        turi::unity_sarray::transform_lambda((uint64_t)a1, (uint64_t)v50, a2, 1, 0);
      }
      if (a3) {
        __int16 v29 = 256;
      }
      else {
        __int16 v29 = 0;
      }
      char v47 = &unk_26D76D980;
      __int16 v48 = v29 & 0xFF00 | a2;
      uint64_t v49 = &v47;
      turi::unity_sarray::transform_lambda((uint64_t)a1, (uint64_t)&v47, a2, 1, 0);
    }
    turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_1::operator()();
  }
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(v31, a1 + 1);
  double v15 = v31[0].__locale_;
  unint64_t v16 = v31[1].__locale_;
  if (v31[1].__locale_)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v31[1].__locale_ + 1, 1uLL, memory_order_relaxed);
    uint64_t v17 = (std::__shared_weak_count *)v31[1].__locale_;
    *a4 = v15;
    a4[1] = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  else
  {
    *a4 = v31[0].__locale_;
    a4[1] = 0;
  }
}

void sub_224128478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(v39 - 152));
  turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::~$_2((uint64_t)&a9);
  turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::~$_2((uint64_t)&a15);
  turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0::~$_0((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_2::~$_2(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::string v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::unity_sarray::clip(void *a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  long long v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    char v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "clip", 1444, 1);
    int v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        int v13 = std::locale::use_facet((const std::locale *)v110, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)v110);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unsigned int v14 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  if (v14 >= 2 && v14 != 3) {
    turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_3::operator()();
  }
  unsigned int v17 = *((unsigned __int8 *)a2 + 12);
  BOOL v18 = v17 < 2 || v17 == 7;
  if (!v18 || (unsigned int v19 = v14, v20 = *((unsigned __int8 *)a3 + 12), v20 >= 2) && v20 != 7) {
    turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_0::operator()();
  }
  BOOL v21 = v20 != 7;
  BOOL v22 = v17 != 7;
  if (v17 != 7 && v20 != 7)
  {
    switch(*((unsigned char *)a3 + 12))
    {
      case 0:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            if ((uint64_t)*a2 > (uint64_t)*a3) {
              goto LABEL_123;
            }
            goto LABEL_59;
          case 1:
            v15.n128_u64[0] = (unint64_t)*a2;
            double v52 = (double)(uint64_t)*a3;
            goto LABEL_112;
          case 2:
          case 3:
          case 4:
          case 5:
            goto LABEL_58;
          case 6:
            if ((uint64_t)*a3 < (uint64_t)((void)*a2 << 8) >> 8) {
              goto LABEL_123;
            }
            goto LABEL_59;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 1:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            v15.n128_u64[0] = (unint64_t)*a3;
            if (*(double *)a3 < (double)(uint64_t)*a2) {
              goto LABEL_123;
            }
            goto LABEL_59;
          case 1:
            v15.n128_u64[0] = (unint64_t)*a2;
            double v52 = *(double *)a3;
LABEL_112:
            if (v15.n128_f64[0] > v52) {
              goto LABEL_123;
            }
            goto LABEL_59;
          case 2:
          case 3:
          case 4:
          case 5:
            goto LABEL_58;
          case 6:
            v15.n128_f64[0] = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)((void)*a2 << 8) >> 8);
            if (v15.n128_f64[0] > *(double *)a3) {
              goto LABEL_123;
            }
            goto LABEL_59;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 2:
        if (v17 > 6) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v17 != 2) {
          goto LABEL_58;
        }
        BOOL v32 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*a3 + 1, *a2 + 1);
        goto LABEL_55;
      case 3:
        if (v17 > 6) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v17 != 3) {
          goto LABEL_58;
        }
        char v26 = (unint64_t *)(*a2)[1];
        int v27 = (double *)(*a3)[1];
        unint64_t v28 = (uint64_t)((*a3)[2] - (void)v27) >> 3;
        unint64_t v29 = (uint64_t)((*a2)[2] - (void)v26) >> 3;
        if ((unint64_t *)(*a2)[2] == v26) {
          goto LABEL_44;
        }
        if (v29 <= 1) {
          uint64_t v30 = 1;
        }
        else {
          uint64_t v30 = (uint64_t)((*a2)[2] - (void)v26) >> 3;
        }
        uint64_t v31 = (uint64_t)((*a3)[2] - (void)v27) >> 3;
        break;
      case 4:
        if (v17 > 6) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v17 != 4) {
          goto LABEL_58;
        }
        BOOL v32 = turi::flexible_type_impl::gt_operator::operator()(v15, (uint64_t)v110, *a2 + 1, *a3 + 1);
LABEL_55:
        if (v32) {
          goto LABEL_123;
        }
        goto LABEL_59;
      case 5:
LABEL_58:
        turi::flexible_type_fail(0);
        goto LABEL_59;
      case 6:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            if ((uint64_t)*a2 > (uint64_t)((void)*a3 << 8) >> 8) {
              goto LABEL_123;
            }
            goto LABEL_59;
          case 1:
            v15.n128_f64[0] = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)((void)*a3 << 8) >> 8);
            if (v15.n128_f64[0] < *(double *)a2) {
              goto LABEL_123;
            }
            goto LABEL_59;
          case 2:
          case 3:
          case 4:
          case 5:
            goto LABEL_58;
          case 6:
            uint64_t v53 = (uint64_t)((void)*a2 << 8) >> 8;
            if (v53 > (uint64_t)((void)*a3 << 8) >> 8
              || v53 == (uint64_t)((void)*a3 << 8) >> 8 && *((_DWORD *)a2 + 2) > *((_DWORD *)a3 + 2))
            {
              goto LABEL_123;
            }
            goto LABEL_59;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
    do
    {
      if (!v31) {
        goto LABEL_123;
      }
      v15.n128_u64[0] = *v26;
      if (*(double *)v26 > *v27) {
        goto LABEL_123;
      }
      if (*(double *)v26 < *v27) {
        goto LABEL_59;
      }
      --v31;
      ++v27;
      ++v26;
      --v30;
    }
    while (v30);
LABEL_44:
    if (v29 > v28) {
LABEL_123:
    }
      turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_1::operator()();
LABEL_59:
    if (*((unsigned char *)a2 + 12) == 1)
    {
      if ((v19 & 0xFE) == 0) {
        LOBYTE(v19) = 1;
      }
    }
    else
    {
      int v34 = *((unsigned __int8 *)a3 + 12);
      if (v34 == 1 && v19 == 0) {
        char v36 = 1;
      }
      else {
        char v36 = v19;
      }
      BOOL v37 = v19 == 1;
      if (v19 == 1) {
        LOBYTE(v19) = 1;
      }
      else {
        LOBYTE(v19) = v36;
      }
      if (v37 && v34 != 1)
      {
        if (v17 != 7)
        {
          double v38 = 0.0;
          switch(*((unsigned char *)a2 + 12))
          {
            case 0:
              v15.n128_u64[0] = (unint64_t)*a2;
              double v38 = (double)(uint64_t)*a2;
              break;
            case 2:
              uint64_t v41 = (uint64_t)*a2;
              uint64_t v42 = (char **)(*a2 + 1);
              __idx.__r_.__value_.__r.__words[0] = 0;
              uint64_t v43 = (char *)v42;
              if (*(char *)(v41 + 31) < 0) {
                uint64_t v43 = *v42;
              }
              uint64_t v44 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v110, v43);
              v15.n128_f64[0] = std::stod(v44, (size_t *)&__idx);
              double v45 = v15.n128_f64[0];
              if ((v110[23] & 0x80000000) != 0) {
                operator delete(*(void **)v110);
              }
              if (*(char *)(v41 + 31) < 0) {
                uint64_t v46 = *(void *)(v41 + 16);
              }
              else {
                uint64_t v46 = *(unsigned __int8 *)(v41 + 31);
              }
              if (__idx.__r_.__value_.__r.__words[0] != v46)
              {
                unsigned int v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                uint64_t v86 = std::string::append((std::string *)&v91, " cannot be interpreted as a float");
                long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
                *(void *)&v110[16] = *((void *)&v86->__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v110 = v87;
                v86->__r_.__value_.__l.__size_ = 0;
                v86->__r_.__value_.__r.__words[2] = 0;
                v86->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v85, (const std::string *)v110);
                __cxa_throw(v85, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              v15.n128_f32[0] = v45;
              double v38 = v15.n128_f32[0];
              break;
            case 3:
              uint64_t v51 = (uint64_t)*a2;
              memset(v110, 0, 24);
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v110, *(const void **)(v51 + 8), *(void *)(v51 + 16), (uint64_t)(*(void *)(v51 + 16) - *(void *)(v51 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (*(void *)v110)
              {
                *(void *)&v110[8] = *(void *)v110;
                operator delete(*(void **)v110);
              }
              break;
            case 4:
              uint64_t v39 = (uint64_t)*a2;
              memset(v110, 0, 24);
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v110, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(void *)(v39 + 16) - *(void *)(v39 + 8)) >> 4);
              turi::flexible_type_fail(0);
              unint64_t v91 = (void **)v110;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v91);
              break;
            case 5:
              uint64_t v40 = (uint64_t)*a2;
              memset(v110, 0, 24);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v110, *(uint64_t **)(v40 + 8), *(uint64_t **)(v40 + 16), (uint64_t)(*(void *)(v40 + 16) - *(void *)(v40 + 8)) >> 5);
              turi::flexible_type_fail(0);
              unint64_t v91 = (void **)v110;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v91);
              break;
            case 6:
              v15.n128_f64[0] = (double)((uint64_t)((void)*a2 << 8) >> 8);
              double v38 = (double)*((int *)a2 + 2) / 1000000.0 + v15.n128_f64[0];
              break;
            case 7:
              break;
            case 8:
              uint64_t v47 = (uint64_t)*a2;
              uint64_t v48 = (*a2)[2];
              *(void *)uint64_t v110 = (*a2)[1];
              *(void *)&v110[8] = v48;
              if (v48) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v48 + 8), 1u, memory_order_relaxed);
              }
              long long v49 = *(_OWORD *)(v47 + 24);
              long long v50 = *(_OWORD *)(v47 + 56);
              v111[0] = *(_OWORD *)(v47 + 40);
              v111[1] = v50;
              *(_OWORD *)&v110[16] = v49;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((atomic_uint **)&v110[8]);
              break;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(v110, (uint64_t)(*a2 + 1));
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(v110);
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          switch(*((unsigned char *)a2 + 12))
          {
            case 2:
              if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_154;
              }
              atomic_ullong *volatile v54 = *a2;
              if (!*a2) {
                goto LABEL_153;
              }
              if (*((char *)v54 + 31) < 0) {
                operator delete((void *)v54[1]);
              }
              uint64_t v55 = v54;
              uint64_t v56 = 0x1012C404EF22A49;
              goto LABEL_152;
            case 3:
              if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_154;
              }
              atomic_ullong *volatile v59 = *a2;
              if (!*a2) {
                goto LABEL_153;
              }
              long long v60 = (void *)v59[1];
              if (v60)
              {
                v59[2] = (atomic_ullong)v60;
                operator delete(v60);
              }
              uint64_t v55 = v59;
              uint64_t v56 = 0x1080C409938AC02;
              goto LABEL_152;
            case 4:
              if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_154;
              }
              atomic_ullong *volatile v57 = *a2;
              if (!*a2) {
                goto LABEL_153;
              }
              *(void *)uint64_t v110 = v57 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
              goto LABEL_147;
            case 5:
              if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_154;
              }
              atomic_ullong *volatile v57 = *a2;
              if (!*a2) {
                goto LABEL_153;
              }
              *(void *)uint64_t v110 = v57 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
LABEL_147:
              uint64_t v55 = v57;
              uint64_t v56 = 0x1020C405E66F15BLL;
              goto LABEL_152;
            case 8:
              if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_154;
              }
              atomic_ullong *volatile v61 = *a2;
              if (!*a2) {
                goto LABEL_153;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v61 + 2);
              uint64_t v55 = v61;
              unsigned int v58 = -235920773;
              goto LABEL_151;
            case 9:
              if (atomic_fetch_add(*a2, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_154;
              }
              if (!*a2) {
                goto LABEL_153;
              }
              uint64_t v55 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a2);
              unsigned int v58 = 2071181815;
LABEL_151:
              uint64_t v56 = v58 | 0x1030C4000000000;
LABEL_152:
              MEMORY[0x22A614FA0](v55, v56, v15);
LABEL_153:
              *a2 = 0;
LABEL_154:
              *((_DWORD *)a2 + 2) = 0;
              *((unsigned char *)a2 + 12) = 1;
              *(double *)a2 = v38;
              break;
            default:
              goto LABEL_154;
          }
        }
        if (v20 == 7)
        {
          LOBYTE(v19) = 1;
        }
        else
        {
          double v62 = 0.0;
          switch(*((unsigned char *)a3 + 12))
          {
            case 0:
              double v62 = (double)(uint64_t)*a3;
              goto LABEL_205;
            case 1:
              double v62 = *(double *)a3;
              goto LABEL_205;
            case 2:
              uint64_t v64 = (uint64_t)*a3;
              atomic_ullong *volatile v65 = (char **)(*a3 + 1);
              size_t v103 = 0;
              long long v66 = (char *)v65;
              if (*(char *)(v64 + 31) < 0) {
                long long v66 = *v65;
              }
              std::string::basic_string[abi:ne180100]<0>(&__idx, v66);
              double v67 = std::stod(&__idx, &v103);
              if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__idx.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v64 + 31) < 0) {
                uint64_t v68 = *(void *)(v64 + 16);
              }
              else {
                uint64_t v68 = *(unsigned __int8 *)(v64 + 31);
              }
              if (v103 != v68)
              {
                int v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                int v89 = std::string::append(&v101, " cannot be interpreted as a float");
                long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                __idx.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v90;
                v89->__r_.__value_.__l.__size_ = 0;
                v89->__r_.__value_.__r.__words[2] = 0;
                v89->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v88, &__idx);
                __cxa_throw(v88, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              float v75 = v67;
              double v62 = v75;
              goto LABEL_178;
            case 3:
              uint64_t v63 = (uint64_t)*a3;
              std::string::size_type v99 = 0;
              uint64_t v100 = 0;
              std::string __p = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v63 + 8), *(void *)(v63 + 16), (uint64_t)(*(void *)(v63 + 16) - *(void *)(v63 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p)
              {
                std::string::size_type v99 = __p;
                operator delete(__p);
              }
              goto LABEL_178;
            case 4:
              uint64_t v69 = (uint64_t)*a3;
              memset(v97, 0, sizeof(v97));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v97, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(void *)(v69 + 16) - *(void *)(v69 + 8)) >> 4);
              turi::flexible_type_fail(0);
              __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
              goto LABEL_178;
            case 5:
              uint64_t v70 = (uint64_t)*a3;
              memset(v96, 0, sizeof(v96));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v96, *(uint64_t **)(v70 + 8), *(uint64_t **)(v70 + 16), (uint64_t)(*(void *)(v70 + 16) - *(void *)(v70 + 8)) >> 5);
              turi::flexible_type_fail(0);
              __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
              goto LABEL_178;
            case 6:
              double v62 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)((void)*a3 << 8) >> 8);
              goto LABEL_178;
            case 7:
              goto LABEL_205;
            case 8:
              uint64_t v71 = (uint64_t)*a3;
              long long v72 = (atomic_uint *)(*a3)[2];
              unint64_t v91 = (void **)(*a3)[1];
              uint64_t v92 = v72;
              if (v72) {
                atomic_fetch_add_explicit(v72 + 2, 1u, memory_order_relaxed);
              }
              long long v73 = *(_OWORD *)(v71 + 24);
              long long v74 = *(_OWORD *)(v71 + 56);
              long long v94 = *(_OWORD *)(v71 + 40);
              long long v95 = v74;
              long long v93 = v73;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v92);
              goto LABEL_178;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(v110, (uint64_t)(*a3 + 1));
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(v110);
LABEL_178:
              switch(*((unsigned char *)a3 + 12))
              {
                case 2:
                  if (atomic_fetch_add(*a3, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    break;
                  }
                  atomic_ullong *volatile v76 = *a3;
                  if (!*a3) {
                    goto LABEL_204;
                  }
                  if (*((char *)v76 + 31) < 0) {
                    operator delete((void *)v76[1]);
                  }
                  unint64_t v77 = v76;
                  uint64_t v78 = 0x1012C404EF22A49;
                  goto LABEL_203;
                case 3:
                  if (atomic_fetch_add(*a3, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    break;
                  }
                  atomic_ullong *volatile v81 = *a3;
                  if (!*a3) {
                    goto LABEL_204;
                  }
                  long long v82 = (void *)v81[1];
                  if (v82)
                  {
                    v81[2] = (atomic_ullong)v82;
                    operator delete(v82);
                  }
                  unint64_t v77 = v81;
                  uint64_t v78 = 0x1080C409938AC02;
                  goto LABEL_203;
                case 4:
                  if (atomic_fetch_add(*a3, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    break;
                  }
                  atomic_ullong *volatile v79 = *a3;
                  if (!*a3) {
                    goto LABEL_204;
                  }
                  *(void *)uint64_t v110 = v79 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
                  goto LABEL_198;
                case 5:
                  if (atomic_fetch_add(*a3, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    break;
                  }
                  atomic_ullong *volatile v79 = *a3;
                  if (!*a3) {
                    goto LABEL_204;
                  }
                  *(void *)uint64_t v110 = v79 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
LABEL_198:
                  unint64_t v77 = v79;
                  uint64_t v78 = 0x1020C405E66F15BLL;
                  goto LABEL_203;
                case 8:
                  if (atomic_fetch_add(*a3, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    break;
                  }
                  atomic_ullong *volatile v83 = *a3;
                  if (!*a3) {
                    goto LABEL_204;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v83 + 2);
                  unint64_t v77 = v83;
                  unsigned int v80 = -235920773;
                  goto LABEL_202;
                case 9:
                  if (atomic_fetch_add(*a3, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                    break;
                  }
                  if (!*a3) {
                    goto LABEL_204;
                  }
                  unint64_t v77 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a3);
                  unsigned int v80 = 2071181815;
LABEL_202:
                  uint64_t v78 = v80 | 0x1030C4000000000;
LABEL_203:
                  MEMORY[0x22A614FA0](v77, v78);
LABEL_204:
                  *a3 = 0;
                  break;
                default:
                  break;
              }
LABEL_205:
              *((_DWORD *)a3 + 2) = 0;
              LOBYTE(v19) = 1;
              *((unsigned char *)a3 + 12) = 1;
              *(double *)a3 = v62;
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        }
      }
    }
    v110[0] = v22;
    *(void *)&v110[8] = 0;
    *(_DWORD *)&v110[16] = 0;
    v110[20] = 0;
    if (&v110[8] != (unsigned char *)a2)
    {
      *(void *)&v110[13] = *(void **)((char *)a2 + 5);
      *(void *)&v110[8] = *a2;
      v110[20] = *((unsigned char *)a2 + 12);
      if (v110[20] <= 9u && ((1 << v110[20]) & 0x33C) != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)&v110[8], 1uLL);
      }
    }
    v110[24] = v21;
    *(void *)&v111[0] = 0;
    DWORD2(v111[0]) = 0;
    BYTE12(v111[0]) = 0;
    if (v111 != (_OWORD *)a3)
    {
      *(void *)((char *)v111 + 5) = *(void **)((char *)a3 + 5);
      *(void *)&v111[0] = *a3;
      BYTE12(v111[0]) = *((unsigned char *)a3 + 12);
      if (BYTE12(v111[0]) <= 9u && ((1 << SBYTE12(v111[0])) & 0x33C) != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)&v111[0], 1uLL);
      }
    }
    char v104 = v110[0];
    *(void *)&v105[5] = *(void *)&v110[13];
    *(void *)uint64_t v105 = *(void *)&v110[8];
    v105[12] = v110[20];
    if (v110[20] <= 9u && ((1 << v110[20]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v105, 1uLL);
    }
    char v106 = v110[24];
    *(void *)&v107[5] = *(void *)((char *)v111 + 5);
    *(void *)uint64_t v107 = *(void *)&v111[0];
    v107[12] = BYTE12(v111[0]);
    if (BYTE12(v111[0]) <= 9u && ((1 << SBYTE12(v111[0])) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v107, 1uLL);
    }
    unint64_t v109 = 0;
    uint64_t v33 = (char *)operator new(0x38uLL);
    *(void *)uint64_t v33 = &unk_26D76DA00;
    v33[8] = v104;
    *(void *)(v33 + 21) = *(void *)&v105[5];
    *((void *)v33 + 2) = *(void *)v105;
    v33[28] = v105[12];
    v105[12] = 0;
    v33[32] = v106;
    *(void *)(v33 + 45) = *(void *)&v107[5];
    *((void *)v33 + 5) = *(void *)v107;
    v33[52] = v107[12];
    v107[12] = 0;
    unint64_t v109 = v33;
    turi::unity_sarray::transform_lambda((uint64_t)a1, (uint64_t)v108, (char)v19, 1, 0);
  }
  if (v17 != 7 || v20 != 7) {
    goto LABEL_59;
  }
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(v110, a1 + 1);
  uint64_t v23 = *(void *)v110;
  uint64_t v24 = *(void *)&v110[8];
  if (*(void *)&v110[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v110[8] + 8), 1uLL, memory_order_relaxed);
    uint64_t v25 = *(std::__shared_weak_count **)&v110[8];
    *a4 = v23;
    a4[1] = v24;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  else
  {
    *a4 = *(void *)v110;
    a4[1] = 0;
  }
}

void sub_224129594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v43 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v43)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v42);
  goto LABEL_8;
}

uint64_t turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 32);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          std::string v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v5 = *(void **)(a1 + 32);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          std::string v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          int v27 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          int v27 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_18:
          std::string v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          std::string v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v10 = *(void **)(a1 + 32);
        if (v10)
        {
          int v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          unint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          std::string v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *(void *)(a1 + 8);
        if (v14)
        {
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          __n128 v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v17 = *(void **)(a1 + 8);
        if (v17)
        {
          BOOL v18 = (void *)v17[1];
          if (v18)
          {
            void v17[2] = v18;
            operator delete(v18);
          }
          __n128 v15 = v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 8);
        if (v19)
        {
          int v27 = (void **)(v19 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 8);
        if (v19)
        {
          int v27 = (void **)(v19 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_50:
          __n128 v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = *(void *)(a1 + 8);
        if (v20)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
          __n128 v15 = (void *)v20;
          unsigned int v21 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v22 = *(void **)(a1 + 8);
        if (v22)
        {
          uint64_t v23 = (void *)v22[6];
          if (v23)
          {
            v22[7] = v23;
            operator delete(v23);
          }
          uint64_t v24 = (void *)v22[3];
          if (v24)
          {
            void v22[4] = v24;
            operator delete(v24);
          }
          uint64_t v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          __n128 v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_63:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  return a1;
}

void turi::unity_sarray::nnz(turi::unity_sarray *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::string v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "nnz", 1520, 1);
    char v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  void v12[2] = 0;
  void v12[3] = 0;
  v12[0] = (uint64_t (**)(void))&unk_26D76DA80;
  v11[0] = v8;
  v11[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v11, v12);
}

void sub_22412A388(_Unwind_Exception *a1)
{
}

void turi::unity_sarray::scalar_operator(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void v12[4] = *MEMORY[0x263EF8340];
  if (a4)
  {
    char v7 = *(unsigned char *)(a2 + 12);
    char v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  }
  else
  {
    char v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    char v8 = *(unsigned char *)(a2 + 12);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v11 = *(std::string *)a3;
  }
  turi::unity_sarray_binary_operations::check_operation_feasibility(v7, v8, (unsigned __int8 *)&v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v10 = *(std::string *)a3;
  }
  turi::unity_sarray_binary_operations::get_output_type(v7, v8, (unsigned __int8 **)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v9 = *(std::string *)a3;
  }
  turi::unity_sarray_binary_operations::get_binary_operator(v7, v8, (unsigned __int8 *)&v9, v12);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1))
  {
    if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
      operator new();
    }
  }
  operator new();
}

void sub_22412AB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(v43 - 120));
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 52))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 40);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          std::string v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v5 = *(void **)(a1 + 40);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          std::string v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        if (v7)
        {
          __n128 v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        if (v7)
        {
          __n128 v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          std::string v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          std::string v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v10 = *(void **)(a1 + 40);
        if (v10)
        {
          std::string v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          unint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          std::locale v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          std::string v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 52))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 40);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          std::string v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v5 = *(void **)(a1 + 40);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          std::string v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        if (v7)
        {
          __n128 v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        if (v7)
        {
          __n128 v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          std::string v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          std::string v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v10 = *(void **)(a1 + 40);
        if (v10)
        {
          std::string v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          unint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          std::locale v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          std::string v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

void turi::unity_sarray::left_scalar_operator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "left_scalar_operator", 1610, 1);
    unsigned int v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    std::string v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        std::string v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  memset(v15, 0, 13);
  if (v15 != (atomic_ullong **)a2)
  {
    *(atomic_ullong **)((char *)v15 + 5) = *(atomic_ullong **)(a2 + 5);
    v15[0] = *(atomic_ullong **)a2;
    BYTE4(v15[1]) = *(unsigned char *)(a2 + 12);
    if (BYTE4(v15[1]) <= 9u && ((1 << SBYTE4(v15[1])) & 0x33C) != 0) {
      atomic_fetch_add(v15[0], 1uLL);
    }
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  turi::unity_sarray::scalar_operator(a1, (uint64_t)v15, (uint64_t)&__p, 0);
}

void sub_22412B50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, char a19)
{
  switch(a19)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      if (*(char *)(a17 + 31) < 0) {
        operator delete(*(void **)(a17 + 8));
      }
      unsigned int v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v25 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      char v26 = *(void **)(a17 + 8);
      if (v26)
      {
        *(void *)(a17 + 16) = v26;
        operator delete(v26);
      }
      unsigned int v21 = (void *)v25;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      a16.__locale_ = (std::locale::__imp *)(a17 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      a16.__locale_ = (std::locale::__imp *)(a17 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_21:
      unsigned int v21 = (void *)v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v27 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a17 + 16));
      unsigned int v21 = (void *)v27;
      unsigned int v24 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a17) {
        goto LABEL_27;
      }
      unsigned int v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a17);
      unsigned int v24 = 2071181815;
LABEL_25:
      uint64_t v22 = v24 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::unity_sarray::right_scalar_operator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "right_scalar_operator", 1616, 1);
    unsigned int v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    std::string v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        std::string v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  memset(v15, 0, 13);
  if (v15 != (atomic_ullong **)a2)
  {
    *(atomic_ullong **)((char *)v15 + 5) = *(atomic_ullong **)(a2 + 5);
    v15[0] = *(atomic_ullong **)a2;
    BYTE4(v15[1]) = *(unsigned char *)(a2 + 12);
    if (BYTE4(v15[1]) <= 9u && ((1 << SBYTE4(v15[1])) & 0x33C) != 0) {
      atomic_fetch_add(v15[0], 1uLL);
    }
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  turi::unity_sarray::scalar_operator(a1, (uint64_t)v15, (uint64_t)&__p, 1);
}

void sub_22412BB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, char a19)
{
  switch(a19)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      if (*(char *)(a17 + 31) < 0) {
        operator delete(*(void **)(a17 + 8));
      }
      unsigned int v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v25 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      char v26 = *(void **)(a17 + 8);
      if (v26)
      {
        *(void *)(a17 + 16) = v26;
        operator delete(v26);
      }
      unsigned int v21 = (void *)v25;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      a16.__locale_ = (std::locale::__imp *)(a17 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      a16.__locale_ = (std::locale::__imp *)(a17 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_21:
      unsigned int v21 = (void *)v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v27 = a17;
      if (!a17) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a17 + 16));
      unsigned int v21 = (void *)v27;
      unsigned int v24 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a17, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a17) {
        goto LABEL_27;
      }
      unsigned int v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a17);
      unsigned int v24 = 2071181815;
LABEL_25:
      uint64_t v22 = v24 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::unity_sarray::vector_operator(void *a1, void *a2, const std::string::value_type **a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "vector_operator", 1622, 1);
    unsigned int v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    std::string v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        std::string v11 = std::locale::use_facet(v47, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v47);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  unsigned int v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 112))();
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v41, *a3, (std::string::size_type)a3[1]);
  }
  else {
    std::string v41 = *(std::string *)a3;
  }
  turi::unity_sarray_binary_operations::check_operation_feasibility(v12, v13, (unsigned __int8 *)&v41);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  int v14 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  int v15 = (*(uint64_t (**)(void))(*(void *)*a2 + 112))();
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v40, *a3, (std::string::size_type)a3[1]);
  }
  else {
    std::string v40 = *(std::string *)a3;
  }
  output_uint64_t type = turi::unity_sarray_binary_operations::get_output_type(v14, v15, (unsigned __int8 **)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = *a2;
  uint64_t v17 = a2[1];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)a1[4];
  uint64_t v38 = a1[3];
  uint64_t v39 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 + 32);
  uint64_t v36 = *(void *)(v18 + 24);
  BOOL v37 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v21 = turi::query_eval::planner::test_equal_length((uint64_t)v47, &v38, &v36);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (!v21) {
    turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_0::operator()();
  }
  uint64_t v22 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
  unsigned int v23 = (*(uint64_t (**)(void))(*(void *)*a2 + 112))();
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v35, *a3, (std::string::size_type)a3[1]);
  }
  else {
    std::string v35 = *(std::string *)a3;
  }
  turi::unity_sarray_binary_operations::get_binary_operator(v22, v23, (unsigned __int8 *)&v35, v45);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  v44[3] = 0;
  int v24 = *((unsigned __int8 *)a3 + 23);
  if ((v24 & 0x80) != 0)
  {
    char v26 = (unsigned __int16 *)a3[1];
    if (v26 != (unsigned __int16 *)1)
    {
      if (v26 == (unsigned __int16 *)2)
      {
        if (*(_WORD *)*a3 != 15677)
        {
          int v25 = *(unsigned __int16 *)*a3;
LABEL_44:
          if (v25 == 15649)
          {
            std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v45);
            std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)v43);
            uint64_t v27 = operator new(0x28uLL);
            unint64_t v28 = &unk_26D76DCB0;
            goto LABEL_53;
          }
          goto LABEL_52;
        }
LABEL_47:
        std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v45);
        std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)v43);
        uint64_t v27 = operator new(0x28uLL);
        unint64_t v28 = &unk_26D76DC20;
        goto LABEL_53;
      }
LABEL_52:
      std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v45);
      std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)v43);
      uint64_t v27 = operator new(0x28uLL);
      unint64_t v28 = &unk_26D76DDB0;
LABEL_53:
      *uint64_t v27 = v28;
      std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v27 + 1), (uint64_t)v46);
      uint64_t v48 = v27;
      std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::swap[abi:ne180100](v47, v44);
      std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](v47);
      std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](v46);
      std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](v43);
      _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v47);
      uint64_t v30 = a1[4];
      v34[0] = a1[3];
      v34[1] = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *(void *)(v18 + 32);
      v33[0] = *(void *)(v18 + 24);
      v33[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__value_func[abi:ne180100]((uint64_t)v42, (uint64_t)v44);
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::make_planner_node((uint64_t)v34, (uint64_t)v33, (uint64_t)v42, output_type);
    }
    int v29 = *(unsigned __int8 *)*a3;
  }
  else
  {
    if (v24 != 1)
    {
      if (v24 == 2)
      {
        if (*(_WORD *)a3 != 15677)
        {
          int v25 = *(unsigned __int16 *)a3;
          goto LABEL_44;
        }
        goto LABEL_47;
      }
      goto LABEL_52;
    }
    int v29 = *(unsigned __int8 *)a3;
  }
  if (v29 == 38 || v29 == 124)
  {
    std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v43, (uint64_t)v45);
    std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)v43);
    uint64_t v27 = operator new(0x28uLL);
    unint64_t v28 = &unk_26D76DD30;
    goto LABEL_53;
  }
  goto LABEL_52;
}

void sub_22412C3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(v45 - 160));
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100](&a44);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100]((void *)(v45 - 224));
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(v45 - 192));
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::make_planner_node(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v6, "output_type");
  char v9 = 0;
  int v8 = 0;
  uint64_t v7 = a4;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v5, &v6, 1);
  turi::any::any<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>();
}

void sub_22412C758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  uint64_t v27 = 24;
  while (1)
  {
    unint64_t v28 = *(std::__shared_weak_count **)(&a25 + v27);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    v27 -= 16;
    if (v27 == -8)
    {
      std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a15, a16);
      std::pair<std::string const,turi::any>::~pair(v25 - 128);
      if (a14) {
        (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
      }
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a19, a20);
      std::pair<std::string const,turi::flexible_type>::~pair(v25 - 96);
      _Unwind_Resume(a1);
    }
  }
}

void sub_22412C810()
{
}

void sub_22412C818()
{
}

void turi::unity_sarray::drop_missing_values(turi::unity_sarray *this)
{
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::string v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "drop_missing_values", 1704, 1);
    char v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    std::string v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
      uint64_t v7 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale(&v9);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::unity_sarray::missing_mask(this, 0, 0);
}

void sub_22412C9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

void turi::unity_sarray::missing_mask(turi::unity_sarray *this, int a2, int a3)
{
  void v11[4] = *MEMORY[0x263EF8340];
  unsigned int v6 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  void v10[3] = 0;
  if (!a2 || (v6 <= 9 ? (BOOL v7 = ((1 << v6) & 0x238) == 0) : (BOOL v7 = 1), v7))
  {
    if (a3) {
      int v8 = &unk_26D76DF30;
    }
    else {
      int v8 = &unk_26D76DFB0;
    }
  }
  else if (a3)
  {
    int v8 = &unk_26D76DE30;
  }
  else
  {
    int v8 = &unk_26D76DEB0;
  }
  v11[0] = v8;
  void v11[3] = v11;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::swap[abi:ne180100](v11, v10);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v10);
  turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v9, 0, 0, 0);
}

void sub_22412CB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::fill_missing_values(uint64_t a1, uint64_t a2)
{
  uint64_t v18[2] = *(std::locale *)MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "fill_missing_values", 1743, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    int v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        std::locale v9 = std::locale::use_facet(v18, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(v18);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  int v10 = *(char *)(a2 + 12);
  if (turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * v10
                                                                                         + (*(int (**)(uint64_t))(*(void *)a1 + 112))(a1)])
  {
    memset(v18, 0, 13);
    if (v18 == (std::locale *)a2)
    {
      LOBYTE(v11) = 0;
      *(void *)&v14[5] = *(void *)(a2 + 5);
      *(void *)int v14 = *(void *)a2;
      v14[12] = 0;
    }
    else
    {
      *(std::locale::__imp **)((char *)&v18[0].__locale_ + 5) = *(std::locale::__imp **)(a2 + 5);
      v18[0] = *(std::locale *)a2;
      BYTE4(v18[1].__locale_) = *(unsigned char *)(a2 + 12);
      unsigned int v11 = BYTE4(v18[1].__locale_);
      if (BYTE4(v18[1].__locale_) <= 9u && ((1 << SBYTE4(v18[1].__locale_)) & 0x33C) != 0)
      {
        atomic_fetch_add((atomic_ullong *volatile)v18[0].__locale_, 1uLL);
        unsigned int v11 = BYTE4(v18[1].__locale_);
      }
      *(std::locale *)&v14[5] = *(std::locale *)((char *)&v18[0].__locale_ + 5);
      *(std::locale *)int v14 = v18[0];
      v14[12] = v11;
      if (v11 <= 9 && ((1 << v11) & 0x33C) != 0)
      {
        atomic_fetch_add(*(atomic_ullong *volatile *)v14, 1uLL);
        LOBYTE(v11) = v14[12];
      }
    }
    *(void *)&void v16[5] = *(void *)&v14[5];
    int v15 = &unk_26D76E030;
    *(void *)uint64_t v16 = *(void *)v14;
    v16[12] = v11;
    v14[12] = 0;
    uint64_t v17 = &v15;
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    turi::unity_sarray::transform_lambda(a1, (uint64_t)&v15, v12, 0, 0);
  }
  turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_0::operator()();
}

void sub_22412CEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16)
{
}

uint64_t turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          int v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          int v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unsigned int v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          int v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          unsigned int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t turi::unity_sarray::tail(turi::unity_sarray *this, unint64_t a2)
{
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "tail", 1760, 1);
    atomic_ullong *volatile v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    atomic_ullong *volatile v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        unsigned int v9 = std::locale::use_facet(&v15, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  unint64_t v10 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 96))(this);
  if (v10 < a2) {
    a2 = v10;
  }
  uint64_t v11 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 96))(this);
  int v12 = *(uint64_t (**)(turi::unity_sarray *, unint64_t, uint64_t, uint64_t))(*(void *)this + 528);
  return v12(this, v11 - a2, 1, v11);
}

void sub_22412D37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

double turi::unity_sarray::make_uniform_BOOLean_array@<D0>(turi::unity_sarray *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, _OWORD *a5@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    turi::unity_sarray::create_sequential_sarray((uint64_t)this, 0, 0, &v23);
    uint64_t v9 = v23;
    if (*((void *)&v23 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
      if (*((void *)&v23 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
      }
    }
    BYTE12(v23) = 0;
    DWORD2(v23) = 0;
    *(void *)&long long v23 = a3;
    unint64_t v10 = (turi *)turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)&v23);
    uint64_t v11 = v10;
    switch(BYTE12(v23))
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)v23, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_36;
        }
        int v12 = (void *)v23;
        if (!(void)v23) {
          goto LABEL_36;
        }
        if (*(char *)(v23 + 31) < 0) {
          operator delete(*(void **)(v23 + 8));
        }
        unsigned int v13 = v12;
        uint64_t v14 = 0x1012C404EF22A49;
        goto LABEL_35;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)v23, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_36;
        }
        std::locale v15 = (void *)v23;
        if (!(void)v23) {
          goto LABEL_36;
        }
        uint64_t v16 = *(void **)(v23 + 8);
        if (v16)
        {
          *(void *)(v23 + 16) = v16;
          operator delete(v16);
        }
        unsigned int v13 = v15;
        uint64_t v14 = 0x1080C409938AC02;
        goto LABEL_35;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)v23, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_36;
        }
        uint64_t v17 = (void *)v23;
        if (!(void)v23) {
          goto LABEL_36;
        }
        BOOL v21 = (void **)(v23 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v21);
        goto LABEL_27;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)v23, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_36;
        }
        uint64_t v17 = (void *)v23;
        if (!(void)v23) {
          goto LABEL_36;
        }
        BOOL v21 = (void **)(v23 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v21);
LABEL_27:
        unsigned int v13 = v17;
        uint64_t v14 = 0x1020C405E66F15BLL;
        goto LABEL_35;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)v23, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_36;
        }
        uint64_t v19 = (void *)v23;
        if (!(void)v23) {
          goto LABEL_36;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v23 + 16));
        unsigned int v13 = v19;
        unsigned int v18 = -235920773;
        goto LABEL_34;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)v23, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_36;
        }
        unint64_t v10 = (turi *)v23;
        if (!(void)v23) {
          goto LABEL_36;
        }
        unsigned int v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v23);
        unsigned int v18 = 2071181815;
LABEL_34:
        uint64_t v14 = v18 | 0x1030C4000000000;
LABEL_35:
        unint64_t v10 = (turi *)MEMORY[0x22A614FA0](v13, v14);
LABEL_36:
        unint64_t v20 = turi::hash64_proportion_cutoff(v10, a2);
        v22[0] = &unk_26D76E0B0;
        v22[1] = v20;
        std::locale v22[2] = v11;
        v22[3] = v22;
        turi::unity_sarray::transform_lambda(v9, (uint64_t)v22, 0, 0, 0);
      default:
        goto LABEL_36;
    }
  }
  float v7 = 0.0;
  if (a2 >= 0.0) {
    float v7 = a2;
  }
  return turi::unity_sarray::make_exact_uniform_BOOLean_array(this, (unint64_t)(float)(v7 * (float)(unint64_t)this), a5);
}

void sub_22412D6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

double turi::unity_sarray::make_exact_uniform_BOOLean_array@<D0>(turi::unity_sarray *this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a2 < (unint64_t)this)
    {
      turi::unity_sarray::create_sequential_sarray((uint64_t)this, 0, 0, &v16);
      (*(void (**)(void **__return_ptr))(*(void *)v16 + 352))(__p);
      if (__p[1])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
      }
      operator new();
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    BYTE4(v17.__end_) = 0;
    LODWORD(v17.__end_) = 0;
    v17.__begin_ = (std::vector<std::string>::pointer)1;
    (*(void (**)(void *, std::vector<std::string> *, turi::unity_sarray *, void))(*(void *)__p[0] + 40))(__p[0], &v17, this, 0);
    switch(BYTE4(v17.__end_))
    {
      case 2:
        goto LABEL_9;
      case 3:
        goto LABEL_14;
      case 4:
        goto LABEL_19;
      case 5:
        goto LABEL_22;
      case 8:
        goto LABEL_29;
      case 9:
        goto LABEL_26;
      default:
        break;
    }
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    *(std::vector<std::string>::pointer *)((char *)&v17.__begin_ + 5) = 0;
    v17.__begin_ = 0;
    (*(void (**)(void *, std::vector<std::string> *, turi::unity_sarray *, void))(*(void *)__p[0] + 40))(__p[0], &v17, this, 0);
    switch(BYTE4(v17.__end_))
    {
      case 2:
LABEL_9:
        if (atomic_fetch_add((atomic_ullong *volatile)v17.__begin_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::vector<std::string>::pointer begin = v17.__begin_;
          if (v17.__begin_)
          {
            if (v17.__begin_[1].__r_.__value_.__s.__data_[7] < 0) {
              operator delete((void *)v17.__begin_->__r_.__value_.__l.__size_);
            }
            uint64_t v6 = (std::string::__raw *)begin;
            uint64_t v7 = 0x1012C404EF22A49;
            goto LABEL_33;
          }
        }
        break;
      case 3:
LABEL_14:
        if (atomic_fetch_add((atomic_ullong *volatile)v17.__begin_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::vector<std::string>::pointer v8 = v17.__begin_;
          if (v17.__begin_)
          {
            std::string::size_type size = (void *)v17.__begin_->__r_.__value_.__l.__size_;
            if (size)
            {
              v17.__begin_->__r_.__value_.__r.__words[2] = (std::string::size_type)size;
              operator delete(size);
            }
            uint64_t v6 = (std::string::__raw *)v8;
            uint64_t v7 = 0x1080C409938AC02;
            goto LABEL_33;
          }
        }
        break;
      case 4:
LABEL_19:
        if (atomic_fetch_add((atomic_ullong *volatile)v17.__begin_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::vector<std::string>::pointer v10 = v17.__begin_;
          if (v17.__begin_)
          {
            __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17.__begin_->__r_.__value_.__l.__size_;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
            goto LABEL_25;
          }
        }
        break;
      case 5:
LABEL_22:
        if (atomic_fetch_add((atomic_ullong *volatile)v17.__begin_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::vector<std::string>::pointer v10 = v17.__begin_;
          if (v17.__begin_)
          {
            __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17.__begin_->__r_.__value_.__l.__size_;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
LABEL_25:
            uint64_t v6 = (std::string::__raw *)v10;
            uint64_t v7 = 0x1020C405E66F15BLL;
            goto LABEL_33;
          }
        }
        break;
      case 8:
LABEL_29:
        if (atomic_fetch_add((atomic_ullong *volatile)v17.__begin_, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::vector<std::string>::pointer v12 = v17.__begin_;
          if (v17.__begin_)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)&v17.__begin_->__r_.__value_.__r.__words[2]);
            uint64_t v6 = (std::string::__raw *)v12;
            unsigned int v11 = -235920773;
            goto LABEL_32;
          }
        }
        break;
      case 9:
LABEL_26:
        if (atomic_fetch_add((atomic_ullong *volatile)v17.__begin_, 0xFFFFFFFFFFFFFFFFLL) == 1 && v17.__begin_)
        {
          uint64_t v6 = (std::string::__raw *)std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v17.__begin_->__r_.__value_.__r.__words);
          unsigned int v11 = 2071181815;
LABEL_32:
          uint64_t v7 = v11 | 0x1030C4000000000;
LABEL_33:
          MEMORY[0x22A614FA0](v6, v7);
        }
        break;
      default:
        break;
    }
  }
  double result = *(double *)__p;
  *a3 = *(_OWORD *)__p;
  return result;
}

void sub_22412DEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(v40 - 128));
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a29);
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 152);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v43 = *(std::__shared_weak_count **)(v40 - 136);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  _Unwind_Resume(a1);
}

void turi::unity_sarray::create_sequential_sarray(uint64_t this@<X0>, void *a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (this < 0) {
    turi::unity_sarray::create_sequential_sarray(long,long,BOOL)::$_0::operator()();
  }
  if (a3)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v26);
    BYTE4(v29) = 0;
    LODWORD(v29) = 0;
    unint64_t v28 = a2;
    (*(void (**)(void, void **, uint64_t, void))(*(void *)v26 + 40))(v26, &v28, this, 0);
    switch(BYTE4(v29))
    {
      case 2:
        if (atomic_fetch_add(v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v7 = v28;
          if (v28)
          {
            if (*((char *)v28 + 31) < 0) {
              operator delete((void *)v28[1]);
            }
            std::vector<std::string>::pointer v8 = v7;
            uint64_t v9 = 0x1012C404EF22A49;
            goto LABEL_31;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unsigned int v11 = v28;
          if (v28)
          {
            std::vector<std::string>::pointer v12 = (void *)v28[1];
            if (v12)
            {
              v28[2] = v12;
              operator delete(v12);
            }
            std::vector<std::string>::pointer v8 = v11;
            uint64_t v9 = 0x1080C409938AC02;
            goto LABEL_31;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unsigned int v13 = v28;
          if (v28)
          {
            uint64_t v27 = (void **)(v28 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
            goto LABEL_23;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unsigned int v13 = v28;
          if (v28)
          {
            uint64_t v27 = (void **)(v28 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_23:
            std::vector<std::string>::pointer v8 = v13;
            uint64_t v9 = 0x1020C405E66F15BLL;
            goto LABEL_31;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::locale v15 = v28;
          if (v28)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v28 + 2);
            std::vector<std::string>::pointer v8 = v15;
            unsigned int v14 = -235920773;
            goto LABEL_30;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v28, 0xFFFFFFFFFFFFFFFFLL) == 1 && v28)
        {
          std::vector<std::string>::pointer v8 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v28);
          unsigned int v14 = 2071181815;
LABEL_30:
          uint64_t v9 = v14 | 0x1030C4000000000;
LABEL_31:
          MEMORY[0x22A614FA0](v8, v9);
        }
        break;
      default:
        break;
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v28);
    long long v16 = v28;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::make_planner_node(0, this, &v22);
    turi::unity_sarray::construct_from_planner_node((uint64_t)v16, &v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    uint64_t v17 = v26;
    unint64_t v20 = v28;
    BOOL v21 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "-");
    (*(void (**)(uint64_t, void **, void **))(*(void *)v17 + 312))(v17, &v20, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v26);
    uint64_t v10 = v26;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::make_planner_node((uint64_t)a2, (uint64_t)a2 + this, &v24);
    turi::unity_sarray::construct_from_planner_node(v10, &v24);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    *a4 = v26;
  }
}

void sub_22412E4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 48);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::sample(turi::unity_sarray *this, float a2, uint64_t a3, int a4)
{
  std::vector<std::string>::pointer v8 = (turi::unity_sarray *)(*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 96))(this);
  v9.n128_f64[0] = turi::unity_sarray::make_uniform_BOOLean_array(v8, a2, a3, a4, &v12);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v12 + 1);
  long long v11 = v12;
  if (*((void *)&v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(turi::unity_sarray *, long long *, __n128))(*(void *)this + 168))(this, &v11, v9);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_22412E70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::hash(turi::unity_sarray *this, atomic_ullong *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v20 = 0;
  int v19 = 0;
  uint64_t v18 = a2;
  unint64_t v3 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)&v18);
  switch(v20)
  {
    case 2:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v4 = v18;
      if (!v18) {
        goto LABEL_33;
      }
      if (*((char *)v18 + 31) < 0) {
        operator delete((void *)v18[1]);
      }
      atomic_ullong *volatile v5 = v4;
      uint64_t v6 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v7 = v18;
      if (!v18) {
        goto LABEL_33;
      }
      std::vector<std::string>::pointer v8 = (void *)v18[1];
      if (v8)
      {
        uint64_t v18[2] = (atomic_ullong)v8;
        operator delete(v8);
      }
      atomic_ullong *volatile v5 = v7;
      uint64_t v6 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      __n128 v9 = v18;
      if (!v18) {
        goto LABEL_33;
      }
      long long v16 = (void **)(v18 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      __n128 v9 = v18;
      if (!v18) {
        goto LABEL_33;
      }
      long long v16 = (void **)(v18 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v16);
LABEL_18:
      atomic_ullong *volatile v5 = v9;
      uint64_t v6 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      std::locale v15 = v18;
      if (!v18) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v18 + 2);
      atomic_ullong *volatile v5 = v15;
      unsigned int v14 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v10 = v18;
      if (!v18) {
        goto LABEL_33;
      }
      long long v11 = (void *)v18[6];
      if (v11)
      {
        void v18[7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      long long v12 = (void *)v10[3];
      if (v12)
      {
        void v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      unsigned int v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      atomic_ullong *volatile v5 = v10;
      unsigned int v14 = 2071181815;
LABEL_31:
      uint64_t v6 = v14 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v5, v6);
LABEL_33:
      v17[0] = &unk_26D76E1B0;
      v17[1] = v3;
      void v17[3] = v17;
      turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v17, 0, 0, 0);
    default:
      goto LABEL_33;
  }
}

void sub_22412E9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::count_bag_of_words(uint64_t a1, uint64_t **a2)
{
  v104[0] = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "count_bag_of_words", 1860, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    std::vector<std::string>::pointer v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        __n128 v9 = std::locale::use_facet(v91, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(v91);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1) != 2) {
    turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_0::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v91, "to_lower");
  uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a2, (const void **)&v91[0].__locale_);
  long long v11 = a2 + 1;
  if (SBYTE7(v92) < 0) {
    operator delete(v91[0].__locale_);
  }
  if (v11 == (uint64_t **)v10)
  {
    BOOL v14 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v89, "to_lower");
    v91[0].__locale_ = (std::locale::__imp *)v89;
    long long v12 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v89, (uint64_t)&std::piecewise_construct, v91);
    uint64_t v13 = 0;
    switch(*((unsigned char *)v12 + 68))
    {
      case 0:
        uint64_t v13 = *((void *)v12 + 7);
        goto LABEL_38;
      case 1:
        uint64_t v13 = (uint64_t)*((double *)v12 + 7);
        goto LABEL_38;
      case 2:
        uint64_t v16 = *((void *)v12 + 7);
        __idx.__r_.__value_.__r.__words[0] = 0;
        uint64_t v17 = (char *)(v16 + 8);
        if (*(char *)(v16 + 31) < 0) {
          uint64_t v17 = *(char **)(v16 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(v91, v17);
        uint64_t v13 = std::stoll((const std::string *)v91, (size_t *)&__idx, 10);
        if (SBYTE7(v92) < 0) {
          operator delete(v91[0].__locale_);
        }
        if (*(char *)(v16 + 31) < 0) {
          uint64_t v18 = *(void *)(v16 + 16);
        }
        else {
          uint64_t v18 = *(unsigned __int8 *)(v16 + 31);
        }
        if (__idx.__r_.__value_.__r.__words[0] != v18)
        {
          atomic_ullong *volatile v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          unint64_t v77 = std::string::append(&v98, " cannot be interpreted as an integer");
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          *(void *)&long long v92 = *((void *)&v77->__r_.__value_.__l + 2);
          *(_OWORD *)&v91[0].__locale_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v76, (const std::string *)v91);
          __cxa_throw(v76, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_38;
      case 3:
        uint64_t v15 = *((void *)v12 + 7);
        v91[1].__locale_ = 0;
        *(void *)&long long v92 = 0;
        v91[0].__locale_ = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v91, *(const void **)(v15 + 8), *(void *)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v91[0].__locale_)
        {
          v91[1] = v91[0];
          operator delete(v91[0].__locale_);
        }
        goto LABEL_37;
      case 4:
        uint64_t v19 = *((void *)v12 + 7);
        v91[1].__locale_ = 0;
        *(void *)&long long v92 = 0;
        v91[0].__locale_ = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v91, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
        goto LABEL_37;
      case 5:
        uint64_t v20 = *((void *)v12 + 7);
        v91[1].__locale_ = 0;
        *(void *)&long long v92 = 0;
        v91[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v91, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
        goto LABEL_37;
      case 6:
        uint64_t v13 = (uint64_t)(*((void *)v12 + 7) << 8) >> 8;
        goto LABEL_38;
      case 7:
        goto LABEL_38;
      case 8:
        uint64_t v21 = *((void *)v12 + 7);
        uint64_t v22 = *(atomic_uint **)(v21 + 16);
        v91[0] = *(std::locale *)(v21 + 8);
        v91[1].__locale_ = (std::locale::__imp *)v22;
        if (v22) {
          atomic_fetch_add_explicit(v22 + 2, 1u, memory_order_relaxed);
        }
        long long v23 = *(_OWORD *)(v21 + 24);
        long long v24 = *(_OWORD *)(v21 + 56);
        long long v93 = *(_OWORD *)(v21 + 40);
        long long v94 = v24;
        long long v92 = v23;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&v91[1]);
        goto LABEL_37;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v91, *((void *)v12 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v93 + 1))
        {
          *(void *)&long long v94 = *((void *)&v93 + 1);
          operator delete(*((void **)&v93 + 1));
        }
        if ((void)v92)
        {
          *((void *)&v92 + 1) = v92;
          operator delete((void *)v92);
        }
        if (v91[1].__locale_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1].__locale_);
        }
LABEL_37:
        uint64_t v13 = 0;
LABEL_38:
        BOOL v14 = v13 != 0;
        if (SHIBYTE(v90[0]) < 0) {
          operator delete(v89[0]);
        }
        break;
      default:
        uint64_t result = turi::flexible_type_fail(0);
LABEL_163:
        __break(1u);
        return result;
    }
  }
  memset(&v98, 0, sizeof(v98));
  std::string::basic_string[abi:ne180100]<0>(v91, "delimiters");
  uint64_t v25 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a2, (const void **)&v91[0].__locale_);
  BOOL v81 = v14;
  if (SBYTE7(v92) < 0) {
    operator delete(v91[0].__locale_);
  }
  uint64_t v82 = a1;
  if (v11 != (uint64_t **)v25)
  {
    std::string::basic_string[abi:ne180100]<0>(&__idx, "delimiters");
    v91[0].__locale_ = (std::locale::__imp *)&__idx;
    long long v26 = (void ***)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)&__idx.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v91);
    switch(*((unsigned char *)v26 + 68))
    {
      case 0:
        uint64_t v27 = v26[7];
        char v103 = 0;
        int v102 = 0;
        double v101 = *(double *)&v27;
        v89[1] = 0;
        v90[0] = 0;
        v89[0] = 0;
        v91[0].__locale_ = (std::locale::__imp *)v89;
        LOBYTE(v91[1].__locale_) = 0;
        v89[0] = operator new(0x10uLL);
        v89[1] = v89[0];
        v90[0] = (char *)v89[0] + 16;
        v89[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v90, (uint64_t *)&v101, v104, (uint64_t)v89[0]);
        switch(v103)
        {
          case 2:
            goto LABEL_94;
          case 3:
            goto LABEL_114;
          case 4:
            goto LABEL_102;
          case 5:
            goto LABEL_119;
          case 8:
            goto LABEL_123;
          case 9:
            goto LABEL_105;
          default:
            goto LABEL_128;
        }
      case 1:
        uint64_t v46 = v26[7];
        int v102 = 0;
        char v103 = 1;
        double v101 = *(double *)&v46;
        v89[1] = 0;
        v90[0] = 0;
        v89[0] = 0;
        v91[0].__locale_ = (std::locale::__imp *)v89;
        LOBYTE(v91[1].__locale_) = 0;
        v89[0] = operator new(0x10uLL);
        v89[1] = v89[0];
        v90[0] = (char *)v89[0] + 16;
        v89[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v90, (uint64_t *)&v101, v104, (uint64_t)v89[0]);
        switch(v103)
        {
          case 2:
            goto LABEL_94;
          case 3:
            goto LABEL_114;
          case 4:
            goto LABEL_102;
          case 5:
            goto LABEL_119;
          case 8:
            goto LABEL_123;
          case 9:
            goto LABEL_105;
          default:
            goto LABEL_128;
        }
      case 2:
        double v101 = 0.0;
        int v102 = 0;
        char v103 = 0;
        turi::flexible_type::operator=<std::string>((uint64_t)&v101);
      case 3:
        int v29 = v26[7];
        std::vector<turi::flexible_type>::vector(v89, ((unsigned char *)v29[2] - (unsigned char *)v29[1]) >> 3);
        uint64_t v30 = v29[1];
        if (v29[2] != v30)
        {
          uint64_t v31 = 0;
          unint64_t v32 = 0;
          while (2)
          {
            uint64_t v33 = (char *)v89[0] + v31;
            switch(*((unsigned char *)v89[0] + v31 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_88;
                }
                atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)v33;
                if (!*(void *)v33) {
                  goto LABEL_87;
                }
                if (*((char *)v34 + 31) < 0) {
                  operator delete((void *)v34[1]);
                }
                atomic_ullong *volatile v35 = v34;
                uint64_t v36 = 0x1012C404EF22A49;
                goto LABEL_86;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_88;
                }
                atomic_ullong *volatile v43 = *(atomic_ullong *volatile *)v33;
                if (!*(void *)v33) {
                  goto LABEL_87;
                }
                uint64_t v44 = (void *)v43[1];
                if (v44)
                {
                  v43[2] = (atomic_ullong)v44;
                  operator delete(v44);
                }
                atomic_ullong *volatile v35 = v43;
                uint64_t v36 = 0x1080C409938AC02;
                goto LABEL_86;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_88;
                }
                atomic_ullong *volatile v37 = *(atomic_ullong *volatile *)v33;
                if (!*(void *)v33) {
                  goto LABEL_87;
                }
                v91[0].__locale_ = (std::locale::__imp *)(v37 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
                goto LABEL_81;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_88;
                }
                atomic_ullong *volatile v37 = *(atomic_ullong *volatile *)v33;
                if (!*(void *)v33) {
                  goto LABEL_87;
                }
                v91[0].__locale_ = (std::locale::__imp *)(v37 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
LABEL_81:
                atomic_ullong *volatile v35 = v37;
                uint64_t v36 = 0x1020C405E66F15BLL;
                goto LABEL_86;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_88;
                }
                atomic_ullong *volatile v45 = *(atomic_ullong *volatile *)v33;
                if (!*(void *)v33) {
                  goto LABEL_87;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v45 + 2);
                atomic_ullong *volatile v35 = v45;
                unsigned int v42 = -235920773;
                goto LABEL_85;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_88;
                }
                atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v33;
                if (!*(void *)v33) {
                  goto LABEL_87;
                }
                uint64_t v39 = (void *)v38[6];
                if (v39)
                {
                  v38[7] = (atomic_ullong)v39;
                  operator delete(v39);
                }
                uint64_t v40 = (void *)v38[3];
                if (v40)
                {
                  v38[4] = (atomic_ullong)v40;
                  operator delete(v40);
                }
                std::string v41 = (std::__shared_weak_count *)v38[2];
                if (v41) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                }
                atomic_ullong *volatile v35 = v38;
                unsigned int v42 = 2071181815;
LABEL_85:
                uint64_t v36 = v42 | 0x1030C4000000000;
LABEL_86:
                MEMORY[0x22A614FA0](v35, v36);
LABEL_87:
                *(void *)uint64_t v33 = 0;
LABEL_88:
                *(void *)uint64_t v33 = 0;
                *((_DWORD *)v33 + 2) = 0;
                v33[12] = 1;
                *(void *)uint64_t v33 = v30[v32++];
                uint64_t v30 = v29[1];
                v31 += 16;
                if (v32 >= ((unsigned char *)v29[2] - (unsigned char *)v30) >> 3) {
                  goto LABEL_128;
                }
                continue;
              default:
                goto LABEL_88;
            }
          }
        }
        goto LABEL_128;
      case 4:
        unint64_t v28 = v26[7];
        v89[1] = 0;
        v90[0] = 0;
        v89[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v89, (uint64_t *)v28[1], (uint64_t *)v28[2], ((unsigned char *)v28[2] - (unsigned char *)v28[1]) >> 4);
        goto LABEL_128;
      case 5:
        uint64_t v47 = v26[7];
        v91[1].__locale_ = 0;
        *(void *)&long long v92 = 0;
        v91[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v91, (uint64_t *)v47[1], (uint64_t *)v47[2], ((unsigned char *)v47[2] - (unsigned char *)v47[1]) >> 5);
        turi::flexible_type_fail(0);
        v89[0] = 0;
        v89[1] = 0;
        v90[0] = 0;
        double v101 = COERCE_DOUBLE(v91);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
        goto LABEL_128;
      case 6:
        double v48 = (double)((uint64_t)((void)v26[7] << 8) >> 8);
        double v49 = (double)*((int *)v26 + 16) / 1000000.0;
        int v102 = 0;
        char v103 = 1;
        double v101 = v49 + v48;
        v89[1] = 0;
        v90[0] = 0;
        v89[0] = 0;
        v91[0].__locale_ = (std::locale::__imp *)v89;
        LOBYTE(v91[1].__locale_) = 0;
        v89[0] = operator new(0x10uLL);
        v89[1] = v89[0];
        v90[0] = (char *)v89[0] + 16;
        v89[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v90, (uint64_t *)&v101, v104, (uint64_t)v89[0]);
        switch(v103)
        {
          case 2:
LABEL_94:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v101, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_128;
            }
            double v50 = v101;
            if (v101 == 0.0) {
              goto LABEL_128;
            }
            if (*(char *)(*(void *)&v101 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v101 + 8));
            }
            double v51 = v50;
            uint64_t v52 = 0x1012C404EF22A49;
            goto LABEL_127;
          case 3:
LABEL_114:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v101, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_128;
            }
            double v63 = v101;
            if (v101 == 0.0) {
              goto LABEL_128;
            }
            uint64_t v64 = *(void **)(*(void *)&v101 + 8);
            if (v64)
            {
              *(void *)(*(void *)&v101 + 16) = v64;
              operator delete(v64);
            }
            double v51 = v63;
            uint64_t v52 = 0x1080C409938AC02;
            goto LABEL_127;
          case 4:
LABEL_102:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v101, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_128;
            }
            double v57 = v101;
            if (v101 == 0.0) {
              goto LABEL_128;
            }
            v91[0].__locale_ = (std::locale::__imp *)(*(void *)&v101 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
            goto LABEL_122;
          case 5:
LABEL_119:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v101, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_128;
            }
            double v57 = v101;
            if (v101 == 0.0) {
              goto LABEL_128;
            }
            v91[0].__locale_ = (std::locale::__imp *)(*(void *)&v101 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
LABEL_122:
            double v51 = v57;
            uint64_t v52 = 0x1020C405E66F15BLL;
            goto LABEL_127;
          case 8:
LABEL_123:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v101, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_128;
            }
            double v65 = v101;
            if (v101 == 0.0) {
              goto LABEL_128;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v101 + 16));
            double v51 = v65;
            unsigned int v62 = -235920773;
            goto LABEL_126;
          case 9:
LABEL_105:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v101, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_128;
            }
            double v58 = v101;
            if (v101 == 0.0) {
              goto LABEL_128;
            }
            atomic_ullong *volatile v59 = *(void **)(*(void *)&v101 + 48);
            if (v59)
            {
              *(void *)(*(void *)&v101 + 56) = v59;
              operator delete(v59);
            }
            long long v60 = *(void **)(*(void *)&v58 + 24);
            if (v60)
            {
              *(void *)(*(void *)&v58 + 32) = v60;
              operator delete(v60);
            }
            atomic_ullong *volatile v61 = *(std::__shared_weak_count **)(*(void *)&v58 + 16);
            if (v61) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v61);
            }
            double v51 = v58;
            unsigned int v62 = 2071181815;
LABEL_126:
            uint64_t v52 = v62 | 0x1030C4000000000;
LABEL_127:
            MEMORY[0x22A614FA0](*(void *)&v51, v52);
            break;
          default:
            goto LABEL_128;
        }
        goto LABEL_128;
      case 7:
        v89[0] = 0;
        v89[1] = 0;
        v90[0] = 0;
        goto LABEL_128;
      case 8:
        uint64_t v53 = v26[7];
        atomic_ullong *volatile v54 = (atomic_uint *)v53[2];
        v91[0].__locale_ = (std::locale::__imp *)v53[1];
        v91[1].__locale_ = (std::locale::__imp *)v54;
        if (v54) {
          atomic_fetch_add_explicit(v54 + 2, 1u, memory_order_relaxed);
        }
        long long v55 = *(_OWORD *)(v53 + 3);
        long long v56 = *(_OWORD *)(v53 + 7);
        long long v93 = *(_OWORD *)(v53 + 5);
        long long v94 = v56;
        long long v92 = v55;
        turi::flexible_type_fail(0);
        v89[0] = 0;
        v89[1] = 0;
        v90[0] = 0;
        boost::detail::shared_count::~shared_count((atomic_uint **)&v91[1]);
        goto LABEL_128;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v91, (uint64_t)(v26[7] + 1));
        turi::flexible_type_fail(0);
        v89[0] = 0;
        v89[1] = 0;
        v90[0] = 0;
        if (*((void *)&v93 + 1))
        {
          *(void *)&long long v94 = *((void *)&v93 + 1);
          operator delete(*((void **)&v93 + 1));
        }
        if ((void)v92)
        {
          *((void *)&v92 + 1) = v92;
          operator delete((void *)v92);
        }
        if (v91[1].__locale_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v91[1].__locale_);
        }
LABEL_128:
        std::vector<turi::flexible_type>::__vdeallocate((void **)&v98.__r_.__value_.__l.__data_);
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)v89;
        v98.__r_.__value_.__r.__words[2] = v90[0];
        v89[1] = 0;
        v90[0] = 0;
        v89[0] = 0;
        v91[0].__locale_ = (std::locale::__imp *)v89;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
        if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__idx.__r_.__value_.__l.__data_);
        }
        break;
      default:
LABEL_162:
        uint64_t result = turi::flexible_type_fail(0);
        goto LABEL_163;
    }
  }
  v89[1] = 0;
  v90[0] = 0;
  v89[0] = &v89[1];
  long long v66 = (turi::flexible_type_impl *)v98.__r_.__value_.__r.__words[0];
  if (v98.__r_.__value_.__r.__words[0] != v98.__r_.__value_.__l.__size_)
  {
    atomic_ullong *volatile v83 = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
    double v67 = *(std::locale::__imp **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v68 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    while (2)
    {
      switch(*((unsigned char *)v66 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v91);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_141;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v91);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_141:
          v91[0].__locale_ = v83;
          *(std::locale::__imp **)((char *)&v91[0].__locale_ + *((void *)v83 - 3)) = v67;
          *(void *)&long long v92 = v68;
          *((void *)&v92 + 1) = MEMORY[0x263F8C318] + 16;
          if (v96 < 0) {
            operator delete(v95);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](&v97);
          goto LABEL_148;
        case 2:
          uint64_t v69 = *(void *)v66;
          if (*(char *)(*(void *)v66 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__idx, *(const std::string::value_type **)(v69 + 8), *(void *)(v69 + 16));
          }
          else
          {
            long long v70 = *(_OWORD *)(v69 + 8);
            __idx.__r_.__value_.__r.__words[2] = *(void *)(v69 + 24);
            *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v70;
          }
          goto LABEL_148;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v91, (void *)(*(void *)v66 + 8));
          goto LABEL_148;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v91, (uint64_t *)(*(void *)v66 + 8));
          goto LABEL_148;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v91, (void *)(*(void *)v66 + 8));
          goto LABEL_148;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v66, &__idx);
          goto LABEL_148;
        case 7:
          memset(&__idx, 0, sizeof(__idx));
          goto LABEL_148;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_148;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v91, (void *)(*(void *)v66 + 8));
LABEL_148:
          uint64_t v71 = std::string::at(&__idx, 0);
          std::__tree<turi::flex_type_enum>::__emplace_unique_key_args<turi::flex_type_enum,turi::flex_type_enum>((uint64_t **)v89, v71, v71);
          if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__idx.__r_.__value_.__l.__data_);
          }
          long long v66 = (turi::flexible_type_impl *)((char *)v66 + 16);
          if (v66 == (turi::flexible_type_impl *)v98.__r_.__value_.__l.__size_) {
            break;
          }
          continue;
        default:
          goto LABEL_162;
      }
      break;
    }
  }
  std::set<char>::set[abi:ne180100]((uint64_t *)&__idx, (uint64_t)v89);
  LOBYTE(v91[0].__locale_) = v81;
  std::set<char>::set[abi:ne180100]((uint64_t *)&v91[1], (uint64_t)&__idx);
  char locale = (char)v91[0].__locale_;
  std::set<char>::set[abi:ne180100]((uint64_t *)&v85, (uint64_t)&v91[1]);
  uint64_t v100 = 0;
  long long v72 = (char *)operator new(0x28uLL);
  *(void *)long long v72 = &unk_26D76E230;
  v72[8] = locale;
  uint64_t v73 = v86;
  *((void *)v72 + 2) = v85;
  *((void *)v72 + 3) = v73;
  long long v74 = v72 + 24;
  uint64_t v75 = v87;
  *((void *)v72 + 4) = v87;
  if (v75)
  {
    *(void *)(v73 + 16) = v74;
    unsigned int v85 = &v86;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
  }
  else
  {
    *((void *)v72 + 2) = v74;
  }
  uint64_t v100 = v72;
  turi::unity_sarray::transform_lambda(v82, (uint64_t)v99, 5, 1, 0);
}

void sub_22412FB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 169) < 0)
  {
    operator delete(*(void **)(v38 - 192));
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (a29 < 0) {
        operator delete(a24);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t turi::unity_sarray::count_ngrams(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v39[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "count_ngrams", 1945, 1);
    __n128 v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        long long v11 = std::locale::use_facet(v33, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v33);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1) != 2) {
    turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "to_lower");
  uint64_t v12 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a3, (const void **)&v33[0].__locale_);
  if (SBYTE7(v34) < 0) {
    operator delete(v33[0].__locale_);
  }
  if (a3 + 1 == (uint64_t **)v12)
  {
    BOOL v15 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "to_lower");
    v33[0].__locale_ = (std::locale::__imp *)v31;
    uint64_t v13 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v31, (uint64_t)&std::piecewise_construct, v33);
    uint64_t v14 = 0;
    switch(*((unsigned char *)v13 + 68))
    {
      case 0:
        uint64_t v14 = *((void *)v13 + 7);
        goto LABEL_38;
      case 1:
        uint64_t v14 = (uint64_t)*((double *)v13 + 7);
        goto LABEL_38;
      case 2:
        uint64_t v17 = *((void *)v13 + 7);
        size_t __idx = 0;
        uint64_t v18 = (char *)(v17 + 8);
        if (*(char *)(v17 + 31) < 0) {
          uint64_t v18 = *(char **)(v17 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(v33, v18);
        uint64_t v14 = std::stoll((const std::string *)v33, &__idx, 10);
        if (SBYTE7(v34) < 0) {
          operator delete(v33[0].__locale_);
        }
        if (*(char *)(v17 + 31) < 0) {
          uint64_t v19 = *(void *)(v17 + 16);
        }
        else {
          uint64_t v19 = *(unsigned __int8 *)(v17 + 31);
        }
        if (__idx != v19)
        {
          long long v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v27 = std::string::append(&v37, " cannot be interpreted as an integer");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          *(void *)&long long v34 = *((void *)&v27->__r_.__value_.__l + 2);
          *(_OWORD *)&v33[0].__locale_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v26, (const std::string *)v33);
          __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_38;
      case 3:
        uint64_t v16 = *((void *)v13 + 7);
        v33[1].__locale_ = 0;
        *(void *)&long long v34 = 0;
        v33[0].__locale_ = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v33, *(const void **)(v16 + 8), *(void *)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v33[0].__locale_)
        {
          v33[1] = v33[0];
          operator delete(v33[0].__locale_);
        }
        goto LABEL_37;
      case 4:
        uint64_t v20 = *((void *)v13 + 7);
        v33[1].__locale_ = 0;
        *(void *)&long long v34 = 0;
        v33[0].__locale_ = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v33, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        goto LABEL_37;
      case 5:
        uint64_t v21 = *((void *)v13 + 7);
        v33[1].__locale_ = 0;
        *(void *)&long long v34 = 0;
        v33[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v33, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(void *)(v21 + 16) - *(void *)(v21 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        goto LABEL_37;
      case 6:
        uint64_t v14 = (uint64_t)(*((void *)v13 + 7) << 8) >> 8;
        goto LABEL_38;
      case 7:
        goto LABEL_38;
      case 8:
        uint64_t v22 = *((void *)v13 + 7);
        long long v23 = *(atomic_uint **)(v22 + 16);
        v33[0] = *(std::locale *)(v22 + 8);
        v33[1].__locale_ = (std::locale::__imp *)v23;
        if (v23) {
          atomic_fetch_add_explicit(v23 + 2, 1u, memory_order_relaxed);
        }
        long long v24 = *(_OWORD *)(v22 + 24);
        long long v25 = *(_OWORD *)(v22 + 56);
        long long v35 = *(_OWORD *)(v22 + 40);
        long long v36 = v25;
        long long v34 = v24;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&v33[1]);
        goto LABEL_37;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v33, *((void *)v13 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v35 + 1))
        {
          *(void *)&long long v36 = *((void *)&v35 + 1);
          operator delete(*((void **)&v35 + 1));
        }
        if ((void)v34)
        {
          *((void *)&v34 + 1) = v34;
          operator delete((void *)v34);
        }
        if (v33[1].__locale_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33[1].__locale_);
        }
LABEL_37:
        uint64_t v14 = 0;
LABEL_38:
        if (v32 < 0) {
          operator delete(v31[0]);
        }
        BOOL v15 = v14 != 0;
        break;
      default:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  v39[0] = &unk_26D76E2B0;
  v39[1] = v15;
  v39[2] = a2;
  v39[3] = v39;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v39, 5, 1, 0);
}

void sub_2241307E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

uint64_t turi::unity_sarray::count_character_ngrams(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v57[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "count_character_ngrams", 2079, 1);
    __n128 v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        long long v11 = std::locale::use_facet(v51, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v51);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1) != 2) {
    turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(v51, "to_lower");
  uint64_t v12 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a3, (const void **)&v51[0].__locale_);
  uint64_t v13 = a3 + 1;
  if (SBYTE7(v52) < 0) {
    operator delete(v51[0].__locale_);
  }
  if (v13 == (uint64_t **)v12)
  {
    BOOL v16 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v49, "to_lower");
    v51[0].__locale_ = (std::locale::__imp *)v49;
    uint64_t v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v49, (uint64_t)&std::piecewise_construct, v51);
    uint64_t v15 = 0;
    switch(*((unsigned char *)v14 + 68))
    {
      case 0:
        uint64_t v15 = *((void *)v14 + 7);
        goto LABEL_38;
      case 1:
        uint64_t v15 = (uint64_t)*((double *)v14 + 7);
        goto LABEL_38;
      case 2:
        uint64_t v18 = *((void *)v14 + 7);
        size_t __idx = 0;
        uint64_t v19 = (char *)(v18 + 8);
        if (*(char *)(v18 + 31) < 0) {
          uint64_t v19 = *(char **)(v18 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(v51, v19);
        uint64_t v15 = std::stoll((const std::string *)v51, &__idx, 10);
        if (SBYTE7(v52) < 0) {
          operator delete(v51[0].__locale_);
        }
        if (*(char *)(v18 + 31) < 0) {
          uint64_t v20 = *(void *)(v18 + 16);
        }
        else {
          uint64_t v20 = *(unsigned __int8 *)(v18 + 31);
        }
        if (__idx != v20)
        {
          std::string v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          unsigned int v42 = std::string::append(&v55, " cannot be interpreted as an integer");
          long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          *(void *)&long long v52 = *((void *)&v42->__r_.__value_.__l + 2);
          *(_OWORD *)&v51[0].__locale_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v41, (const std::string *)v51);
          __cxa_throw(v41, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_38;
      case 3:
        uint64_t v17 = *((void *)v14 + 7);
        v51[1].__locale_ = 0;
        *(void *)&long long v52 = 0;
        v51[0].__locale_ = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v51, *(const void **)(v17 + 8), *(void *)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v51[0].__locale_)
        {
          v51[1] = v51[0];
          operator delete(v51[0].__locale_);
        }
        goto LABEL_37;
      case 4:
        uint64_t v21 = *((void *)v14 + 7);
        v51[1].__locale_ = 0;
        *(void *)&long long v52 = 0;
        v51[0].__locale_ = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v51, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(void *)(v21 + 16) - *(void *)(v21 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
        goto LABEL_37;
      case 5:
        uint64_t v22 = *((void *)v14 + 7);
        v51[1].__locale_ = 0;
        *(void *)&long long v52 = 0;
        v51[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v51, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(void *)(v22 + 16) - *(void *)(v22 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
        goto LABEL_37;
      case 6:
        uint64_t v15 = (uint64_t)(*((void *)v14 + 7) << 8) >> 8;
        goto LABEL_38;
      case 7:
        goto LABEL_38;
      case 8:
        uint64_t v23 = *((void *)v14 + 7);
        long long v24 = *(atomic_uint **)(v23 + 16);
        v51[0] = *(std::locale *)(v23 + 8);
        v51[1].__locale_ = (std::locale::__imp *)v24;
        if (v24) {
          atomic_fetch_add_explicit(v24 + 2, 1u, memory_order_relaxed);
        }
        long long v25 = *(_OWORD *)(v23 + 24);
        long long v26 = *(_OWORD *)(v23 + 56);
        long long v53 = *(_OWORD *)(v23 + 40);
        long long v54 = v26;
        long long v52 = v25;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&v51[1]);
        goto LABEL_37;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v51, *((void *)v14 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v53 + 1))
        {
          *(void *)&long long v54 = *((void *)&v53 + 1);
          operator delete(*((void **)&v53 + 1));
        }
        if ((void)v52)
        {
          *((void *)&v52 + 1) = v52;
          operator delete((void *)v52);
        }
        if (v51[1].__locale_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51[1].__locale_);
        }
LABEL_37:
        uint64_t v15 = 0;
LABEL_38:
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        BOOL v16 = v15 != 0;
        break;
      default:
LABEL_82:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v51, "ignore_space");
  uint64_t v27 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a3, (const void **)&v51[0].__locale_);
  if (SBYTE7(v52) < 0) {
    operator delete(v51[0].__locale_);
  }
  if (v13 != (uint64_t **)v27)
  {
    std::string::basic_string[abi:ne180100]<0>(v49, "ignore_space");
    v51[0].__locale_ = (std::locale::__imp *)v49;
    long long v28 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v49, (uint64_t)&std::piecewise_construct, v51);
    uint64_t v29 = 0;
    switch(*((unsigned char *)v28 + 68))
    {
      case 0:
        uint64_t v29 = *((void *)v28 + 7);
        goto LABEL_69;
      case 1:
        uint64_t v29 = (uint64_t)*((double *)v28 + 7);
        goto LABEL_69;
      case 2:
        uint64_t v32 = *((void *)v28 + 7);
        size_t __idx = 0;
        uint64_t v33 = (char *)(v32 + 8);
        if (*(char *)(v32 + 31) < 0) {
          uint64_t v33 = *(char **)(v32 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(v51, v33);
        uint64_t v29 = std::stoll((const std::string *)v51, &__idx, 10);
        if (SBYTE7(v52) < 0) {
          operator delete(v51[0].__locale_);
        }
        if (*(char *)(v32 + 31) < 0) {
          uint64_t v34 = *(void *)(v32 + 16);
        }
        else {
          uint64_t v34 = *(unsigned __int8 *)(v32 + 31);
        }
        if (__idx != v34)
        {
          uint64_t v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          atomic_ullong *volatile v45 = std::string::append(&v55, " cannot be interpreted as an integer");
          long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          *(void *)&long long v52 = *((void *)&v45->__r_.__value_.__l + 2);
          *(_OWORD *)&v51[0].__locale_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v44, (const std::string *)v51);
          __cxa_throw(v44, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_69;
      case 3:
        uint64_t v31 = *((void *)v28 + 7);
        v51[1].__locale_ = 0;
        *(void *)&long long v52 = 0;
        v51[0].__locale_ = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v51, *(const void **)(v31 + 8), *(void *)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v51[0].__locale_)
        {
          v51[1] = v51[0];
          operator delete(v51[0].__locale_);
        }
        goto LABEL_68;
      case 4:
        uint64_t v35 = *((void *)v28 + 7);
        v51[1].__locale_ = 0;
        *(void *)&long long v52 = 0;
        v51[0].__locale_ = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v51, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(void *)(v35 + 16) - *(void *)(v35 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
        goto LABEL_68;
      case 5:
        uint64_t v36 = *((void *)v28 + 7);
        v51[1].__locale_ = 0;
        *(void *)&long long v52 = 0;
        v51[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v51, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(void *)(v36 + 16) - *(void *)(v36 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
        goto LABEL_68;
      case 6:
        uint64_t v29 = (uint64_t)(*((void *)v28 + 7) << 8) >> 8;
        goto LABEL_69;
      case 7:
        goto LABEL_69;
      case 8:
        uint64_t v37 = *((void *)v28 + 7);
        uint64_t v38 = *(atomic_uint **)(v37 + 16);
        v51[0] = *(std::locale *)(v37 + 8);
        v51[1].__locale_ = (std::locale::__imp *)v38;
        if (v38) {
          atomic_fetch_add_explicit(v38 + 2, 1u, memory_order_relaxed);
        }
        long long v39 = *(_OWORD *)(v37 + 24);
        long long v40 = *(_OWORD *)(v37 + 56);
        long long v53 = *(_OWORD *)(v37 + 40);
        long long v54 = v40;
        long long v52 = v39;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&v51[1]);
        goto LABEL_68;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v51, *((void *)v28 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v53 + 1))
        {
          *(void *)&long long v54 = *((void *)&v53 + 1);
          operator delete(*((void **)&v53 + 1));
        }
        if ((void)v52)
        {
          *((void *)&v52 + 1) = v52;
          operator delete((void *)v52);
        }
        if (v51[1].__locale_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51[1].__locale_);
        }
LABEL_68:
        uint64_t v29 = 0;
LABEL_69:
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        unint64_t v30 = (unint64_t)(v29 != 0) << 8;
        goto LABEL_72;
      default:
        goto LABEL_82;
    }
  }
  unint64_t v30 = 256;
LABEL_72:
  v57[0] = &unk_26D76E330;
  v57[1] = v30 | v16;
  v57[2] = a2;
  v57[3] = v57;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v57, 5, 1, 0);
}

void sub_2241311B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void turi::unity_sarray::dict_trim_by_keys(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_trim_by_keys", 2198, 1);
    __n128 v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        long long v11 = std::locale::use_facet(&v24, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v24);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1) == 5)
  {
    std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type*>>((uint64_t)v26, *a2, a2[1], v12);
    LOBYTE(v24.__locale_) = a3;
    std::set<turi::flexible_type>::set[abi:ne180100](&v25, (uint64_t)v26, v13);
    char locale = (char)v24.__locale_;
    std::set<turi::flexible_type>::set[abi:ne180100]((uint64_t *)&v21, (uint64_t)&v25, v14);
    long long v28 = 0;
    uint64_t v15 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v15 = &unk_26D76E3B0;
    v15[8] = locale;
    uint64_t v16 = v22;
    *((void *)v15 + 2) = v21;
    *((void *)v15 + 3) = v16;
    uint64_t v17 = v15 + 24;
    uint64_t v18 = v23;
    *((void *)v15 + 4) = v23;
    if (v18)
    {
      *(void *)(v16 + 16) = v17;
      uint64_t v21 = &v22;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
    }
    else
    {
      *((void *)v15 + 2) = v17;
    }
    long long v28 = v15;
    turi::unity_sarray::transform_lambda(a1, (uint64_t)v27, 5, 1, 0);
  }
  turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_0::operator()();
}

void sub_224131650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
}

void turi::unity_sarray::dict_trim_by_values(turi::unity_sarray *this@<X0>, atomic_ullong **a2@<X1>, atomic_ullong **a3@<X2>, std::locale::__imp **a4@<X8>)
{
  v42[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  std::vector<std::string>::pointer v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    __n128 v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_trim_by_values", 2227, 1);
    long long v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    __n128 v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        __n128 v13 = std::locale::use_facet(&v39, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v39);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(turi::unity_sarray *))(*(void *)this + 112))(this) != 5) {
    turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_0::operator()();
  }
  unsigned int v15 = *((unsigned __int8 *)a2 + 12);
  int v16 = *((unsigned __int8 *)a3 + 12);
  if (v16 != 7 && v15 != 7)
  {
    switch(*((unsigned char *)a3 + 12))
    {
      case 0:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            if ((uint64_t)*a2 > (uint64_t)*a3) {
              goto LABEL_98;
            }
            goto LABEL_75;
          case 1:
            double v28 = *(double *)a2;
            double v29 = (double)(uint64_t)*a3;
            goto LABEL_74;
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_55;
          case 6:
            if ((uint64_t)*a3 < (uint64_t)((void)*a2 << 8) >> 8) {
              goto LABEL_98;
            }
            goto LABEL_75;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 1:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            if (*(double *)a3 < (double)(uint64_t)*a2) {
              goto LABEL_98;
            }
            goto LABEL_75;
          case 1:
            double v28 = *(double *)a2;
            double v29 = *(double *)a3;
LABEL_74:
            if (v28 <= v29) {
              goto LABEL_75;
            }
            goto LABEL_98;
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_55;
          case 6:
            if ((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)((void)*a2 << 8) >> 8) > *(double *)a3) {
              goto LABEL_98;
            }
            goto LABEL_75;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 2:
        if (v15 > 9) {
          goto LABEL_105;
        }
        if (((1 << v15) & 0x37B) != 0) {
          goto LABEL_55;
        }
        if (v15 != 2) {
LABEL_105:
        }
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        BOOL v18 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*a3 + 1, *a2 + 1);
        goto LABEL_32;
      case 3:
        if (v15 > 9) {
          goto LABEL_106;
        }
        if (((1 << v15) & 0x377) != 0) {
          goto LABEL_55;
        }
        if (v15 != 3) {
LABEL_106:
        }
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        uint64_t v19 = (double *)(*a2)[1];
        uint64_t v20 = (double *)(*a3)[1];
        unint64_t v21 = ((*a3)[2] - (uint64_t)v20) >> 3;
        unint64_t v22 = ((*a2)[2] - (uint64_t)v19) >> 3;
        if ((double *)(*a2)[2] == v19) {
          goto LABEL_49;
        }
        if (v22 <= 1) {
          uint64_t v23 = 1;
        }
        else {
          uint64_t v23 = ((*a2)[2] - (uint64_t)v19) >> 3;
        }
        uint64_t v24 = ((*a3)[2] - (uint64_t)v20) >> 3;
        do
        {
          if (!v24 || *v19 > *v20) {
            goto LABEL_98;
          }
          if (*v19 < *v20) {
            goto LABEL_56;
          }
          --v24;
          ++v20;
          ++v19;
          --v23;
        }
        while (v23);
LABEL_49:
        if (v22 > v21) {
          goto LABEL_98;
        }
        break;
      case 4:
        if (v15 > 9) {
          goto LABEL_104;
        }
        if (((1 << v15) & 0x36F) == 0)
        {
          if (v15 != 4) {
LABEL_104:
          }
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          BOOL v18 = turi::flexible_type_impl::gt_operator::operator()(v14, (uint64_t)&v39, *a2 + 1, *a3 + 1);
LABEL_32:
          if (v18) {
LABEL_98:
          }
            turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_1::operator()();
LABEL_75:
          LOBYTE(v39.__locale_) = v15 != 7;
          memset(v40, 0, 13);
          if (v40 != a2)
          {
            *(atomic_ullong **)((char *)v40 + 5) = *(atomic_ullong **)((char *)a2 + 5);
            v40[0] = *a2;
            BYTE4(v40[1]) = *((unsigned char *)a2 + 12);
            if (BYTE4(v40[1]) <= 9u && ((1 << SBYTE4(v40[1])) & 0x33C) != 0) {
              atomic_fetch_add(v40[0], 1uLL);
            }
          }
          BOOL v41 = v16 != 7;
          memset(v42, 0, 13);
          if (v42 != a3)
          {
            *(atomic_ullong **)((char *)v42 + 5) = *(atomic_ullong **)((char *)a3 + 5);
            v42[0] = *a3;
            BYTE4(v42[1]) = *((unsigned char *)a3 + 12);
            if (BYTE4(v42[1]) <= 9u && ((1 << SBYTE4(v42[1])) & 0x33C) != 0) {
              atomic_fetch_add(v42[0], 1uLL);
            }
          }
          char locale = (char)v39.__locale_;
          *(atomic_ullong **)&v34[5] = *(atomic_ullong **)((char *)v40 + 5);
          *(atomic_ullong **)int v34 = v40[0];
          v34[12] = BYTE4(v40[1]);
          if (BYTE4(v40[1]) <= 9u && ((1 << SBYTE4(v40[1])) & 0x33C) != 0) {
            atomic_fetch_add(v40[0], 1uLL);
          }
          BOOL v35 = v41;
          *(atomic_ullong **)&v36[5] = *(atomic_ullong **)((char *)v42 + 5);
          *(atomic_ullong **)uint64_t v36 = v42[0];
          v36[12] = BYTE4(v42[1]);
          if (BYTE4(v42[1]) <= 9u && ((1 << SBYTE4(v42[1])) & 0x33C) != 0) {
            atomic_fetch_add(v42[0], 1uLL);
          }
          uint64_t v38 = 0;
          uint64_t v31 = (char *)operator new(0x38uLL);
          *(void *)uint64_t v31 = &unk_26D76E430;
          *((void *)v31 + 2) = *(void *)v34;
          v31[8] = locale;
          *(void *)(v31 + 21) = *(void *)&v34[5];
          v31[28] = v34[12];
          if (v34[12] <= 9u && ((1 << v34[12]) & 0x33C) != 0) {
            atomic_fetch_add(*((atomic_ullong *volatile *)v31 + 2), 1uLL);
          }
          *((void *)v31 + 5) = *(void *)v36;
          v31[32] = v35;
          *(void *)(v31 + 45) = *(void *)&v36[5];
          v31[52] = v36[12];
          if (v36[12] <= 9u && ((1 << v36[12]) & 0x33C) != 0) {
            atomic_fetch_add(*((atomic_ullong *volatile *)v31 + 5), 1uLL);
          }
          uint64_t v38 = v31;
          turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v37, 5, 1, 0);
        }
LABEL_55:
        turi::flexible_type_fail(0);
        break;
      case 5:
        if (v15 >= 7 && v15 - 8 >= 2) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_55;
      case 6:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            if ((uint64_t)*a2 > (uint64_t)((void)*a3 << 8) >> 8) {
              goto LABEL_98;
            }
            goto LABEL_75;
          case 1:
            if ((double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)((void)*a3 << 8) >> 8) < *(double *)a2) {
              goto LABEL_98;
            }
            goto LABEL_75;
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_55;
          case 6:
            uint64_t v30 = (uint64_t)((void)*a2 << 8) >> 8;
            if (v30 > (uint64_t)((void)*a3 << 8) >> 8) {
              goto LABEL_98;
            }
            if (v30 != (uint64_t)((void)*a3 << 8) >> 8) {
              goto LABEL_56;
            }
            if (*((_DWORD *)a2 + 2) > *((_DWORD *)a3 + 2)) {
              goto LABEL_98;
            }
            goto LABEL_75;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 8:
        if (v15 >= 7 && v15 - 8 >= 2) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_55;
      case 9:
        if (v15 >= 7 && v15 - 8 >= 2) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_55;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
  }
LABEL_56:
  if (v16 != 7 || v15 != 7) {
    goto LABEL_75;
  }
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v39, (void *)this + 1);
  uint64_t v25 = v39.__locale_;
  long long v26 = v40[0];
  if (v40[0])
  {
    atomic_fetch_add_explicit(v40[0] + 1, 1uLL, memory_order_relaxed);
    uint64_t v27 = (std::__shared_weak_count *)v40[0];
    *a4 = v25;
    a4[1] = (std::locale::__imp *)v26;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
  }
  else
  {
    *a4 = v39.__locale_;
    a4[1] = 0;
  }
}

void sub_224131ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
}

uint64_t turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 32);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          unint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(void **)(a1 + 32);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          unint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v27 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          uint64_t v27 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_18:
          unint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          unint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 32);
        if (v10)
        {
          long long v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          __n128 v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          __n128 v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          unint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *(void *)(a1 + 8);
        if (v14)
        {
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          unsigned int v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = *(void **)(a1 + 8);
        if (v17)
        {
          BOOL v18 = (void *)v17[1];
          if (v18)
          {
            void v17[2] = v18;
            operator delete(v18);
          }
          unsigned int v15 = v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 8);
        if (v19)
        {
          uint64_t v27 = (void **)(v19 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(a1 + 8);
        if (v19)
        {
          uint64_t v27 = (void **)(v19 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_50:
          unsigned int v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = *(void *)(a1 + 8);
        if (v20)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
          unsigned int v15 = (void *)v20;
          unsigned int v21 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v22 = *(void **)(a1 + 8);
        if (v22)
        {
          uint64_t v23 = (void *)v22[6];
          if (v23)
          {
            v22[7] = v23;
            operator delete(v23);
          }
          uint64_t v24 = (void *)v22[3];
          if (v24)
          {
            void v22[4] = v24;
            operator delete(v24);
          }
          uint64_t v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          unsigned int v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_63:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  return a1;
}

void turi::unity_sarray::dict_keys(turi::unity_sarray *this)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_keys", 2275, 1);
    atomic_ullong *volatile v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v9);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(turi::unity_sarray *))(*(void *)this + 112))(this) == 5)
  {
    v10[0] = &unk_26D76E4B0;
    void v10[3] = v10;
    turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v10, 4, 1, 0);
  }
  turi::unity_sarray::dict_keys(void)::$_0::operator()();
}

void sub_2241325E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void turi::unity_sarray::dict_values(turi::unity_sarray *this)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_values", 2288, 1);
    atomic_ullong *volatile v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v9);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(turi::unity_sarray *))(*(void *)this + 112))(this) == 5)
  {
    v10[0] = &unk_26D76E530;
    void v10[3] = v10;
    turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v10, 4, 1, 0);
  }
  turi::unity_sarray::dict_values(void)::$_0::operator()();
}

void sub_224132838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void turi::unity_sarray::dict_has_any_keys(uint64_t a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_has_any_keys", 2304, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        std::locale v9 = std::locale::use_facet(&v23, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v23);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1) == 5)
  {
    std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type*>>((uint64_t)&v23, *a2, a2[1], v10);
    std::set<turi::flexible_type>::set[abi:ne180100](&v22, (uint64_t)&v23, v11);
    std::set<turi::flexible_type>::set[abi:ne180100]((uint64_t *)&v19, (uint64_t)&v22, v12);
    uint64_t v25 = 0;
    __n128 v13 = operator new(0x20uLL);
    uint64_t v14 = (uint64_t)v19;
    uint64_t v15 = v20;
    *__n128 v13 = &unk_26D76E5B0;
    v13[1] = v14;
    void v13[2] = v15;
    uint64_t v16 = v13 + 2;
    uint64_t v17 = v21;
    void v13[3] = v21;
    if (v17)
    {
      *(void *)(v15 + 16) = v16;
      uint64_t v19 = &v20;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    else
    {
      v13[1] = v16;
    }
    uint64_t v25 = v13;
    turi::unity_sarray::transform_lambda(a1, (uint64_t)v24, 0, 1, 0);
  }
  turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_0::operator()();
}

void sub_224132B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, char a18)
{
}

void turi::unity_sarray::dict_has_all_keys(uint64_t a1, uint64_t **a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_has_all_keys", 2328, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        std::locale v9 = std::locale::use_facet(&v15, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1) == 5)
  {
    v15.__locale_ = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v15, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
    __n128 v12 = 0;
    __n128 v13 = 0;
    uint64_t v14 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v12, (uint64_t *)v15.__locale_, v16, ((char *)v16 - (char *)v15.__locale_) >> 4);
    uint64_t v19 = 0;
    __n128 v10 = operator new(0x20uLL);
    *__n128 v10 = &unk_26D76E630;
    v10[2] = 0;
    void v10[3] = 0;
    v10[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v10 + 1, v12, v13, ((char *)v13 - (char *)v12) >> 4);
    uint64_t v19 = v10;
    turi::unity_sarray::transform_lambda(a1, (uint64_t)v18, 0, 1, 0);
  }
  turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_0::operator()();
}

void sub_224132E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void turi::unity_sarray::item_length(turi::unity_sarray *this)
{
  void v16[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "item_length", 2350, 1);
    atomic_ullong *volatile v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  __int16 v12 = 773;
  char v13 = 4;
  std::set<turi::flex_type_enum>::set[abi:ne180100]((uint64_t)&v14, (char *)&v12, 3);
  int v8 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 112))(this);
  for (uint64_t i = v15; i; uint64_t i = (uint64_t **)*i)
  {
    int v10 = *((char *)i + 25);
    if (v8 >= v10)
    {
      if (v10 >= v8)
      {
        v16[0] = &unk_26D76E6B0;
        void v16[3] = v16;
        turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v16, 0, 1, 0);
      }
      ++i;
    }
  }
  turi::unity_sarray::item_length(void)::$_0::operator()();
}

void sub_22413310C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, char a14)
{
}

void turi::unity_sarray::unpack_dict(void *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  atomic_ullong *volatile v5 = (int *)global_logger();
  if (v5[169] > 2) {
    goto LABEL_9;
  }
  if (cppipc::must_cancel((cppipc *)v5)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  uint64_t v6 = (file_logger *)global_logger();
  started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "unpack_dict", 2372, 1);
  int v8 = pthread_getspecific(*((void *)started + 74));
  if (v8 && *((unsigned char *)v8 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
  }
  std::locale v9 = pthread_getspecific(*((void *)started + 74));
  if (!v9) {
    goto LABEL_9;
  }
  if (v9[280]
    && (std::ios_base::getloc((const std::ios_base *)&v9[*(void *)(*((void *)v9 + 2) - 24) + 16]),
        int v10 = std::locale::use_facet((const std::locale *)v41, MEMORY[0x263F8C108]),
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10),
        std::locale::~locale((std::locale *)v41),
        std::ostream::put(),
        std::ostream::flush(),
        file_logger::stream_flush(started),
        *((_DWORD *)started + 150) == 7))
  {
    __print_back_trace();
    exception = __cxa_allocate_exception(8uLL);
    uint64_t v33 = "LOG_FATAL encountered";
  }
  else
  {
LABEL_9:
    if ((*(unsigned int (**)(void *))(*a1 + 112))(a1) == 5)
    {
      (*(void (**)(void *))(*a1 + 392))(a1);
      __int16 v12 = *a3;
      char v13 = a3[1];
      v37[0] = 0;
      v37[1] = 0;
      uint64_t v36 = v37;
      int v34 = v12;
      if (v13 != v12)
      {
        std::locale v14 = v12;
        while (2)
        {
          *(void *)BOOL v41 = 0;
          *(_DWORD *)&v41[8] = 0;
          v41[12] = 0;
          if (v14 != (uint64_t *)v41)
          {
            uint64_t v15 = *v14;
            *(void *)&v41[5] = *(uint64_t *)((char *)v14 + 5);
            *(void *)BOOL v41 = v15;
            v41[12] = *((unsigned char *)v14 + 12);
            if (v41[12] <= 9u && ((1 << v41[12]) & 0x33C) != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v41, 1uLL);
            }
          }
          long long v40 = v41;
          *((unsigned char *)std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(&v36, (uint64_t)v41, v11, (uint64_t)&std::piecewise_construct, (void **)&v40)+ 48) = 7;
          switch(v41[12])
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_50;
              }
              uint64_t v17 = *(void **)v41;
              if (!*(void *)v41) {
                goto LABEL_50;
              }
              if (*(char *)(*(void *)v41 + 31) < 0) {
                operator delete(*(void **)(*(void *)v41 + 8));
              }
              BOOL v18 = v17;
              uint64_t v19 = 0x1012C404EF22A49;
              goto LABEL_49;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_50;
              }
              uint64_t v26 = *(void **)v41;
              if (!*(void *)v41) {
                goto LABEL_50;
              }
              uint64_t v27 = *(void **)(*(void *)v41 + 8);
              if (v27)
              {
                *(void *)(*(void *)v41 + 16) = v27;
                operator delete(v27);
              }
              BOOL v18 = v26;
              uint64_t v19 = 0x1080C409938AC02;
              goto LABEL_49;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_50;
              }
              uint64_t v20 = *(void **)v41;
              if (!*(void *)v41) {
                goto LABEL_50;
              }
              long long v40 = (unsigned char *)(*(void *)v41 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
              goto LABEL_44;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_50;
              }
              uint64_t v20 = *(void **)v41;
              if (!*(void *)v41) {
                goto LABEL_50;
              }
              long long v40 = (unsigned char *)(*(void *)v41 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
LABEL_44:
              BOOL v18 = v20;
              uint64_t v19 = 0x1020C405E66F15BLL;
              goto LABEL_49;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_50;
              }
              double v28 = *(void **)v41;
              if (!*(void *)v41) {
                goto LABEL_50;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v41 + 16));
              BOOL v18 = v28;
              unsigned int v25 = -235920773;
              goto LABEL_48;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_50;
              }
              uint64_t v21 = *(void **)v41;
              if (!*(void *)v41) {
                goto LABEL_50;
              }
              uint64_t v22 = *(void **)(*(void *)v41 + 48);
              if (v22)
              {
                *(void *)(*(void *)v41 + 56) = v22;
                operator delete(v22);
              }
              std::locale v23 = (void *)v21[3];
              if (v23)
              {
                std::locale v21[4] = v23;
                operator delete(v23);
              }
              uint64_t v24 = (std::__shared_weak_count *)v21[2];
              if (v24) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v24);
              }
              BOOL v18 = v21;
              unsigned int v25 = 2071181815;
LABEL_48:
              uint64_t v19 = v25 | 0x1030C4000000000;
LABEL_49:
              MEMORY[0x22A614FA0](v18, v19);
LABEL_50:
              v14 += 2;
              if (v14 == v13) {
                break;
              }
              continue;
            default:
              goto LABEL_50;
          }
          break;
        }
      }
      uint64_t v29 = a1[3];
      uint64_t v30 = a1[4];
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100](&v35, (uint64_t)&v36, v11);
      turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::generic_aggregator((uint64_t)v39, v13 != v34, (uint64_t)&v35, v31);
      v38[0] = v29;
      v38[1] = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t)v38, v39);
    }
    exception = __cxa_allocate_exception(8uLL);
    uint64_t v33 = "unpack_dict is only applicable to SArray of dictionary type.";
  }
  void *exception = v33;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void sub_2241340E0(_Unwind_Exception *a1)
{
}

uint64_t turi::unity_sarray::expand(uint64_t a1, const void **a2, turi::flexible_type_impl **a3, uint64_t *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v7 = (int *)global_logger();
  if (v7[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v7)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "expand", 2485, 1);
    int v10 = pthread_getspecific(*((void *)started + 74));
    if (v10 && *((unsigned char *)v10 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Function entry", 14);
    }
    __n128 v11 = pthread_getspecific(*((void *)started + 74));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        __int16 v12 = std::locale::use_facet((const std::locale *)v65, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale((std::locale *)v65);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          long long v53 = "LOG_FATAL encountered";
LABEL_105:
          void *exception = v53;
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 112))(a1) != 6)
  {
    exception = __cxa_allocate_exception(8uLL);
    long long v53 = "Cannot expand an SArray of type that is not datetime type";
    goto LABEL_105;
  }
  char v13 = a3[1];
  std::vector<std::string>::size_type v14 = (v13 - *a3) >> 4;
  if (v14 != a4[1] - *a4)
  {
    exception = __cxa_allocate_exception(8uLL);
    long long v53 = "Expanded column names and types length do not match";
    goto LABEL_105;
  }
  if (v13 == *a3)
  {
    exception = __cxa_allocate_exception(8uLL);
    long long v53 = "Please provide at least one column to expand datetime to";
    goto LABEL_105;
  }
  memset(&v64, 0, sizeof(v64));
  std::vector<std::string>::reserve(&v64, v14);
  uint64_t v54 = a1;
  std::string v55 = a4;
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  if (*a3 == v16)
  {
    memset(&v63, 0, sizeof(v63));
  }
  else
  {
    double v57 = *(std::string **)(MEMORY[0x263F8C2B8] + 64);
    double v58 = (std::string *)*MEMORY[0x263F8C2B8];
    long long v56 = *(std::string **)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      if (*((char *)a2 + 23) >= 0) {
        size_t v17 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v17 = (size_t)a2[1];
      }
      if (v17)
      {
        std::string::basic_string[abi:ne180100]((uint64_t)&v63, v17 + 1);
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v18 = &v63;
        }
        else {
          BOOL v18 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v19 = a2;
        }
        else {
          uint64_t v19 = *a2;
        }
        memmove(v18, v19, v17);
        *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 46;
        switch(*((unsigned char *)v15 + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v65);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_35;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v65);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_35:
            v65[0].__first_ = v58;
            *(std::__split_buffer<std::string>::pointer *)((char *)&v65[0].__first_
                                                         + v58[-1].__r_.__value_.__r.__words[0]) = v57;
            v65[0].__end_ = v56;
            v65[0].__end_cap_.__value_ = (std::string *)(MEMORY[0x263F8C318] + 16);
            if (v67 < 0) {
              operator delete(__p);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x22A614E30](v68);
            goto LABEL_55;
          case 2:
            uint64_t v20 = *(void *)v15;
            if (*(char *)(*(void *)v15 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v20 + 8), *(void *)(v20 + 16));
            }
            else
            {
              long long v21 = *(_OWORD *)(v20 + 8);
              v72.__r_.__value_.__r.__words[2] = *(void *)(v20 + 24);
              *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v21;
            }
            goto LABEL_55;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v65, (void *)(*(void *)v15 + 8));
            goto LABEL_55;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v65, (uint64_t *)(*(void *)v15 + 8));
            goto LABEL_55;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v65, (void *)(*(void *)v15 + 8));
            goto LABEL_55;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v15, &v72);
            goto LABEL_55;
          case 7:
            memset(&v72, 0, sizeof(v72));
            goto LABEL_55;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_55;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v65, (void *)(*(void *)v15 + 8));
LABEL_55:
            if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v24 = &v72;
            }
            else {
              uint64_t v24 = (std::string *)v72.__r_.__value_.__r.__words[0];
            }
            if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v72.__r_.__value_.__l.__size_;
            }
            uint64_t v26 = std::string::append(&v63, (const std::string::value_type *)v24, size);
            uint64_t v27 = (char *)v26->__r_.__value_.__r.__words[0];
            *(void *)&long long v69 = v26->__r_.__value_.__l.__size_;
            *(void *)((char *)&v69 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
            char v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            std::vector<std::string>::pointer end = v64.__end_;
            if (v64.__end_ >= v64.__end_cap_.__value_)
            {
              unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
              unint64_t v32 = v31 + 1;
              if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v32) {
                unint64_t v32 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v33 = v32;
              }
              v65[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v64.__end_cap_;
              if (v33) {
                int v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v64.__end_cap_, v33);
              }
              else {
                int v34 = 0;
              }
              uint64_t v35 = v34 + v31;
              v65[0].__first_ = v34;
              v65[0].__begin_ = v35;
              v65[0].__end_cap_.__value_ = &v34[v33];
              v35->__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
              v35->__r_.__value_.__l.__size_ = v69;
              *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v69 + 7);
              *((unsigned char *)&v35->__r_.__value_.__s + 23) = v28;
              v65[0].__end_ = v35 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v64, v65);
              uint64_t v30 = v64.__end_;
              std::__split_buffer<std::string>::~__split_buffer(v65);
            }
            else
            {
              v64.__end_->__r_.__value_.__l.__data_ = v27;
              end->__r_.__value_.__l.__size_ = v69;
              *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v69 + 7);
              *((unsigned char *)&end->__r_.__value_.__s + 23) = v28;
              uint64_t v30 = end + 1;
            }
            v64.__end_ = v30;
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v72.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_90;
            }
            goto LABEL_91;
          default:
            goto LABEL_101;
        }
      }
      switch(*((unsigned char *)v15 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v65);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_48;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v65);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_48:
          v65[0].__first_ = v58;
          *(std::__split_buffer<std::string>::pointer *)((char *)&v65[0].__first_ + v58[-1].__r_.__value_.__r.__words[0]) = v57;
          v65[0].__end_ = v56;
          v65[0].__end_cap_.__value_ = (std::string *)(MEMORY[0x263F8C318] + 16);
          if (v67 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v68);
          break;
        case 2:
          uint64_t v22 = *(void *)v15;
          if (*(char *)(*(void *)v15 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)(v22 + 8), *(void *)(v22 + 16));
          }
          else
          {
            long long v23 = *(_OWORD *)(v22 + 8);
            v63.__r_.__value_.__r.__words[2] = *(void *)(v22 + 24);
            *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v23;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v65, (void *)(*(void *)v15 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v65, (uint64_t *)(*(void *)v15 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v65, (void *)(*(void *)v15 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v15, &v63);
          break;
        case 7:
          memset(&v63, 0, sizeof(v63));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v65, (void *)(*(void *)v15 + 8));
          break;
        default:
LABEL_101:
          uint64_t result = turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
      std::vector<std::string>::pointer v36 = v64.__end_;
      if (v64.__end_ >= v64.__end_cap_.__value_)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v39) {
          unint64_t v39 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v40 = v39;
        }
        v65[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v64.__end_cap_;
        if (v40) {
          BOOL v41 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v64.__end_cap_, v40);
        }
        else {
          BOOL v41 = 0;
        }
        uint64_t v42 = v41 + v38;
        v65[0].__first_ = v41;
        v65[0].__begin_ = v42;
        v65[0].__end_cap_.__value_ = &v41[v40];
        long long v43 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        v42->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
        memset(&v63, 0, sizeof(v63));
        v65[0].__end_ = v42 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v64, v65);
        uint64_t v44 = v64.__end_;
        std::__split_buffer<std::string>::~__split_buffer(v65);
        v64.__end_ = v44;
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
LABEL_90:
        }
          operator delete(v63.__r_.__value_.__l.__data_);
      }
      else
      {
        long long v37 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        v64.__end_->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
        v64.__end_ = v36 + 1;
      }
LABEL_91:
      uint64_t v15 = (turi::flexible_type_impl *)((char *)v15 + 16);
    }
    while (v15 != v16);
    long long v46 = *a3;
    atomic_ullong *volatile v45 = a3[1];
    memset(&v63, 0, sizeof(v63));
    uint64_t v47 = v45 - v46;
    if (v45 != v46)
    {
      std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::__vallocate[abi:ne180100](&v63, v47 >> 4);
      std::string::size_type v48 = v63.__r_.__value_.__l.__size_;
      bzero((void *)v63.__r_.__value_.__l.__size_, v47 >> 2);
      v63.__r_.__value_.__l.__size_ = v48 + (v47 >> 2);
      if (a3[1] != *a3)
      {
        v72.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v72.__r_.__value_.__r.__words[1]) = 0;
        v72.__r_.__value_.__s.__data_[12] = 0;
        std::string::basic_string[abi:ne180100]<0>(v65, "year");
        turi::flexible_type::operator=<std::string>((uint64_t)&v72);
      }
    }
  }
  std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(v65, (uint64_t)&v63);
  uint64_t v49 = *(void *)(v54 + 32);
  v62[0] = *(void *)(v54 + 24);
  v62[1] = v49;
  if (v49) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
  }
  std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(v60, (uint64_t)v65);
  uint64_t v71 = 0;
  char v50 = (char *)operator new(0x20uLL);
  *(void *)char v50 = &unk_26D76E7D0;
  *(_OWORD *)(v50 + 8) = *(_OWORD *)v60;
  *((void *)v50 + 3) = v61;
  v60[0] = 0;
  v60[1] = 0;
  uint64_t v61 = 0;
  uint64_t v71 = v50;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::make_planner_node((uint64_t)v62, (uint64_t)v70, v55);
}

void sub_22413A038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,char *a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  switch(*(unsigned char *)(v42 - 132))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 144), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v44 = *(void *)(v42 - 144);
      if (!v44) {
        goto LABEL_29;
      }
      if (*(char *)(v44 + 31) < 0) {
        operator delete(*(void **)(v44 + 8));
      }
      atomic_ullong *volatile v45 = (void *)v44;
      uint64_t v46 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 144), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v47 = *(void **)(v42 - 144);
      if (!v47) {
        goto LABEL_29;
      }
      std::string::size_type v48 = (void *)v47[1];
      if (v48)
      {
        std::locale v47[2] = v48;
        operator delete(v48);
      }
      atomic_ullong *volatile v45 = v47;
      uint64_t v46 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 144), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v49 = *(void **)(v42 - 144);
      if (!v49) {
        goto LABEL_29;
      }
      *(void *)(v42 - 192) = v49 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 144), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v49 = *(void **)(v42 - 144);
      if (!v49) {
        goto LABEL_29;
      }
      *(void *)(v42 - 192) = v49 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
LABEL_23:
      atomic_ullong *volatile v45 = v49;
      uint64_t v46 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 144), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v52 = *(void *)(v42 - 144);
      if (!v52) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v52 + 16));
      atomic_ullong *volatile v45 = (void *)v52;
      unsigned int v51 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 144), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      char v50 = *(void **)(v42 - 144);
      if (!v50) {
        goto LABEL_29;
      }
      atomic_ullong *volatile v45 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v50);
      unsigned int v51 = 2071181815;
LABEL_27:
      uint64_t v46 = v51 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v45, v46);
LABEL_29:
      if (a27)
      {
        a28 = a27;
        operator delete(a27);
      }
      a27 = &a34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

void *std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::__vallocate[abi:ne180100](a1, v5 >> 2);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[4 * (v5 >> 2)];
  }
  return a1;
}

void sub_22413B698(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::make_planner_node(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v23[10] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v4 = a3 + 1;
  std::vector<turi::flexible_type>::vector(v22, a3[1] - *a3);
  uint64_t v5 = *a3;
  if (*v4 != *a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (2)
    {
      uint64_t v8 = *(char *)(v5 + v7);
      uint64_t v9 = v22[0] + v6;
      switch(*(unsigned char *)(v22[0] + v6 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_35;
          }
          if (*((char *)v10 + 31) < 0) {
            operator delete((void *)v10[1]);
          }
          atomic_ullong *volatile v11 = v10;
          uint64_t v12 = 0x1012C404EF22A49;
          goto LABEL_34;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_35;
          }
          std::vector<std::string>::size_type v14 = (void *)v13[1];
          if (v14)
          {
            void v13[2] = (atomic_ullong)v14;
            operator delete(v14);
          }
          atomic_ullong *volatile v11 = v13;
          uint64_t v12 = 0x1080C409938AC02;
          goto LABEL_34;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_35;
          }
          v23[0] = (void **)(v15 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v23);
          goto LABEL_20;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_35;
          }
          v23[0] = (void **)(v15 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v23);
LABEL_20:
          atomic_ullong *volatile v11 = v15;
          uint64_t v12 = 0x1020C405E66F15BLL;
          goto LABEL_34;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_35;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v16 + 2);
          atomic_ullong *volatile v11 = v16;
          unsigned int v17 = -235920773;
          goto LABEL_33;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v9;
          if (!*(void *)v9) {
            goto LABEL_35;
          }
          uint64_t v19 = (void *)v18[6];
          if (v19)
          {
            void v18[7] = (atomic_ullong)v19;
            operator delete(v19);
          }
          uint64_t v20 = (void *)v18[3];
          if (v20)
          {
            void v18[4] = (atomic_ullong)v20;
            operator delete(v20);
          }
          long long v21 = (std::__shared_weak_count *)v18[2];
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          atomic_ullong *volatile v11 = v18;
          unsigned int v17 = 2071181815;
LABEL_33:
          uint64_t v12 = v17 | 0x1030C4000000000;
LABEL_34:
          MEMORY[0x22A614FA0](v11, v12);
LABEL_35:
          *(void *)uint64_t v9 = 0;
LABEL_36:
          *(_DWORD *)(v9 + 8) = 0;
          *(unsigned char *)(v9 + 12) = 0;
          *(void *)uint64_t v9 = v8;
          ++v7;
          uint64_t v5 = *a3;
          v6 += 16;
          if (v7 >= a3[1] - *a3) {
            break;
          }
          continue;
        default:
          goto LABEL_36;
      }
      break;
    }
  }
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::vector<turi::flexible_type> &,0>(v23, "output_types");
}

void sub_22413BB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a26);
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a16, a17);
  std::pair<std::string const,turi::any>::~pair((uint64_t)&a31);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a20, a21);
  for (uint64_t i = 40; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v31 - 176 + i);
  *(void *)(v31 - 176) = &a23;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 176));
  _Unwind_Resume(a1);
}

void sub_22413BBDC()
{
}

void sub_22413BBE4()
{
  std::pair<std::string const,turi::flexible_type>::~pair(v0 - 176);
  JUMPOUT(0x22413BBC4);
}

void sub_22413BBF4()
{
}

void turi::unity_sarray::unpack(void *a1, const void **a2, uint64_t **a3, uint64_t *a4, uint64_t a5)
{
  v80[19] = *MEMORY[0x263EF8340];
  atomic_ullong *volatile v10 = (int *)global_logger();
  if (v10[169] > 2) {
    goto LABEL_9;
  }
  if (cppipc::must_cancel((cppipc *)v10)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  atomic_ullong *volatile v11 = (file_logger *)global_logger();
  started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "unpack", 2607, 1);
  atomic_ullong *volatile v13 = pthread_getspecific(*((void *)started + 74));
  if (v13 && *((unsigned char *)v13 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
  }
  std::vector<std::string>::size_type v14 = pthread_getspecific(*((void *)started + 74));
  if (!v14) {
    goto LABEL_9;
  }
  if (v14[280]
    && (std::ios_base::getloc((const std::ios_base *)&v14[*(void *)(*((void *)v14 + 2) - 24) + 16]),
        atomic_ullong *volatile v15 = std::locale::use_facet(&v73, MEMORY[0x263F8C108]),
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10),
        std::locale::~locale(&v73),
        std::ostream::put(),
        std::ostream::flush(),
        file_logger::stream_flush(started),
        *((_DWORD *)started + 150) == 7))
  {
LABEL_113:
    __print_back_trace();
    exception = __cxa_allocate_exception(8uLL);
    uint64_t v54 = "LOG_FATAL encountered";
  }
  else
  {
LABEL_9:
    if (((*(uint64_t (**)(void *))(*a1 + 112))(a1) - 6) <= 0xFCu)
    {
      exception = __cxa_allocate_exception(8uLL);
      uint64_t v54 = "Cannot unpack an SArray of type that is not list/array/dict type";
    }
    else
    {
      atomic_ullong *volatile v16 = a3[1];
      std::vector<std::string>::size_type v17 = ((char *)v16 - (char *)*a3) >> 4;
      if (v17 == a4[1] - *a4)
      {
        if (v16 != *a3)
        {
          uint64_t v56 = a5;
          double v57 = a1;
          memset(&v64, 0, sizeof(v64));
          std::vector<std::string>::reserve(&v64, v17);
          uint64_t v19 = *a3;
          atomic_ullong *volatile v18 = a3[1];
          std::string v55 = a3;
          if (*a3 != v18)
          {
            atomic_ullong *volatile v59 = *(std::locale::__imp **)(MEMORY[0x263F8C2B8] + 64);
            long long v60 = (std::locale::__imp *)*MEMORY[0x263F8C2B8];
            double v58 = *(uint64_t **)(MEMORY[0x263F8C2B8] + 72);
            while (2)
            {
              if (*((char *)a2 + 23) >= 0) {
                size_t v20 = *((unsigned __int8 *)a2 + 23);
              }
              else {
                size_t v20 = (size_t)a2[1];
              }
              if (v20)
              {
                std::string::basic_string[abi:ne180100]((uint64_t)&v63, v20 + 1);
                if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v21 = &v63;
                }
                else {
                  long long v21 = (std::string *)v63.__r_.__value_.__r.__words[0];
                }
                if (*((char *)a2 + 23) >= 0) {
                  uint64_t v22 = a2;
                }
                else {
                  uint64_t v22 = *a2;
                }
                memmove(v21, v22, v20);
                *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 46;
                switch(*((unsigned char *)v19 + 12))
                {
                  case 0:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v73);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    goto LABEL_35;
                  case 1:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v73);
                    std::ostream::operator<<();
                    std::stringbuf::str();
LABEL_35:
                    v73.__locale_ = v60;
                    *(std::locale::__imp **)((char *)&v73.__locale_ + *((void *)v60 - 3)) = v59;
                    uint64_t v75 = v58;
                    uint64_t v76 = MEMORY[0x263F8C318] + 16;
                    if (v79 < 0) {
                      operator delete(__p);
                    }
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x22A614E30](v80);
                    goto LABEL_55;
                  case 2:
                    uint64_t v23 = *v19;
                    if (*(char *)(*v19 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(v23 + 8), *(void *)(v23 + 16));
                    }
                    else
                    {
                      long long v24 = *(_OWORD *)(v23 + 8);
                      v62.__r_.__value_.__r.__words[2] = *(void *)(v23 + 24);
                      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v24;
                    }
                    goto LABEL_55;
                  case 3:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v73, (void *)(*v19 + 8));
                    goto LABEL_55;
                  case 4:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v73, (uint64_t *)(*v19 + 8));
                    goto LABEL_55;
                  case 5:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v73, (void *)(*v19 + 8));
                    goto LABEL_55;
                  case 6:
                    turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v19, &v62);
                    goto LABEL_55;
                  case 7:
                    memset(&v62, 0, sizeof(v62));
                    goto LABEL_55;
                  case 8:
                    turi::flexible_type_impl::get_string_visitor::operator()();
                    goto LABEL_55;
                  case 9:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v73, (void *)(*v19 + 8));
LABEL_55:
                    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v27 = &v62;
                    }
                    else {
                      uint64_t v27 = (std::string *)v62.__r_.__value_.__r.__words[0];
                    }
                    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = v62.__r_.__value_.__l.__size_;
                    }
                    uint64_t v29 = std::string::append(&v63, (const std::string::value_type *)v27, size);
                    uint64_t v30 = (char *)v29->__r_.__value_.__r.__words[0];
                    v72[0] = v29->__r_.__value_.__l.__size_;
                    *(void *)((char *)v72 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1]
                                                                             + 7);
                    char v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
                    v29->__r_.__value_.__l.__size_ = 0;
                    v29->__r_.__value_.__r.__words[2] = 0;
                    v29->__r_.__value_.__r.__words[0] = 0;
                    std::vector<std::string>::pointer end = v64.__end_;
                    if (v64.__end_ >= v64.__end_cap_.__value_)
                    {
                      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
                      unint64_t v36 = v35 + 1;
                      if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v36) {
                        unint64_t v36 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555) {
                        unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v37 = v36;
                      }
                      v77[0] = (atomic_ullong *)&v64.__end_cap_;
                      if (v37) {
                        unint64_t v38 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v64.__end_cap_, v37);
                      }
                      else {
                        unint64_t v38 = 0;
                      }
                      unint64_t v39 = (uint64_t *)((char *)v38 + 24 * v35);
                      v73.__locale_ = v38;
                      long long v74 = v39;
                      uint64_t v76 = (uint64_t)v38 + 24 * v37;
                      uint64_t v40 = v72[0];
                      *unint64_t v39 = (uint64_t)v30;
                      v39[1] = v40;
                      *(uint64_t *)((char *)v39 + 15) = *(void *)((char *)v72 + 7);
                      *((unsigned char *)v39 + 23) = v31;
                      uint64_t v75 = v39 + 3;
                      std::vector<std::string>::__swap_out_circular_buffer(&v64, (std::__split_buffer<std::string> *)&v73);
                      int v34 = v64.__end_;
                      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&v73);
                    }
                    else
                    {
                      std::string::size_type v33 = v72[0];
                      v64.__end_->__r_.__value_.__l.__data_ = v30;
                      end->__r_.__value_.__l.__size_ = v33;
                      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v72 + 7);
                      *((unsigned char *)&end->__r_.__value_.__s + 23) = v31;
                      int v34 = end + 1;
                    }
                    v64.__end_ = v34;
                    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v62.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
                      goto LABEL_90;
                    }
                    goto LABEL_91;
                  default:
                    goto LABEL_107;
                }
              }
              switch(*((unsigned char *)v19 + 12))
              {
                case 0:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v73);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  goto LABEL_48;
                case 1:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v73);
                  std::ostream::operator<<();
                  std::stringbuf::str();
LABEL_48:
                  v73.__locale_ = v60;
                  *(std::locale::__imp **)((char *)&v73.__locale_ + *((void *)v60 - 3)) = v59;
                  uint64_t v75 = v58;
                  uint64_t v76 = MEMORY[0x263F8C318] + 16;
                  if (v79 < 0) {
                    operator delete(__p);
                  }
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x22A614E30](v80);
                  goto LABEL_78;
                case 2:
                  uint64_t v25 = *v19;
                  if (*(char *)(*v19 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)(v25 + 8), *(void *)(v25 + 16));
                  }
                  else
                  {
                    long long v26 = *(_OWORD *)(v25 + 8);
                    v63.__r_.__value_.__r.__words[2] = *(void *)(v25 + 24);
                    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v26;
                  }
                  goto LABEL_78;
                case 3:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v73, (void *)(*v19 + 8));
                  goto LABEL_78;
                case 4:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v73, (uint64_t *)(*v19 + 8));
                  goto LABEL_78;
                case 5:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v73, (void *)(*v19 + 8));
                  goto LABEL_78;
                case 6:
                  turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v19, &v63);
                  goto LABEL_78;
                case 7:
                  memset(&v63, 0, sizeof(v63));
                  goto LABEL_78;
                case 8:
                  turi::flexible_type_impl::get_string_visitor::operator()();
                  goto LABEL_78;
                case 9:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v73, (void *)(*v19 + 8));
LABEL_78:
                  std::vector<std::string>::pointer v41 = v64.__end_;
                  if (v64.__end_ >= v64.__end_cap_.__value_)
                  {
                    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_ - (char *)v64.__begin_) >> 3);
                    unint64_t v44 = v43 + 1;
                    if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) > v44) {
                      unint64_t v44 = 0x5555555555555556 * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)v64.__end_cap_.__value_ - (char *)v64.__begin_) >> 3) >= 0x555555555555555) {
                      unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v45 = v44;
                    }
                    v77[0] = (atomic_ullong *)&v64.__end_cap_;
                    if (v45) {
                      uint64_t v46 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v64.__end_cap_, v45);
                    }
                    else {
                      uint64_t v46 = 0;
                    }
                    uint64_t v47 = (uint64_t *)((char *)v46 + 24 * v43);
                    v73.__locale_ = v46;
                    long long v74 = v47;
                    uint64_t v76 = (uint64_t)v46 + 24 * v45;
                    long long v48 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
                    std::locale v47[2] = v63.__r_.__value_.__r.__words[2];
                    *(_OWORD *)uint64_t v47 = v48;
                    memset(&v63, 0, sizeof(v63));
                    uint64_t v75 = v47 + 3;
                    std::vector<std::string>::__swap_out_circular_buffer(&v64, (std::__split_buffer<std::string> *)&v73);
                    uint64_t v49 = v64.__end_;
                    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&v73);
                    v64.__end_ = v49;
                    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
LABEL_90:
                    }
                      operator delete(v63.__r_.__value_.__l.__data_);
                  }
                  else
                  {
                    long long v42 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
                    v64.__end_->__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
                    v64.__end_ = v41 + 1;
                  }
LABEL_91:
                  v19 += 2;
                  if (v19 == v18) {
                    break;
                  }
                  continue;
                default:
LABEL_107:
                  turi::flexible_type_fail(0);
                  __break(1u);
                  goto LABEL_113;
              }
              break;
            }
          }
          LOBYTE(v73.__locale_) = (*(uint64_t (**)(void *))(*v57 + 112))(v57);
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          long long v74 = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v74, *v55, v55[1], ((char *)v55[1] - (char *)*v55) >> 4);
          memset(v77, 0, 13);
          if (v77 != (atomic_ullong **)v56)
          {
            *(atomic_ullong **)((char *)v77 + 5) = *(atomic_ullong **)(v56 + 5);
            v77[0] = *(atomic_ullong **)v56;
            BYTE4(v77[1]) = *(unsigned char *)(v56 + 12);
            if (BYTE4(v77[1]) <= 9u && ((1 << SBYTE4(v77[1])) & 0x33C) != 0) {
              atomic_fetch_add(v77[0], 1uLL);
            }
          }
          uint64_t v50 = v57[4];
          v61[0] = v57[3];
          v61[1] = v50;
          if (v50) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
          }
          char locale = (char)v73.__locale_;
          char v67 = 0;
          uint64_t v68 = 0;
          long long v66 = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v66, v74, v75, ((char *)v75 - (char *)v74) >> 4);
          *(atomic_ullong **)&v69[5] = *(atomic_ullong **)((char *)v77 + 5);
          *(atomic_ullong **)long long v69 = v77[0];
          v69[12] = BYTE4(v77[1]);
          if (BYTE4(v77[1]) <= 9u && ((1 << SBYTE4(v77[1])) & 0x33C) != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)v69, 1uLL);
          }
          uint64_t v71 = 0;
          unsigned int v51 = (char *)operator new(0x38uLL);
          *(void *)unsigned int v51 = &unk_26D76E860;
          v51[8] = locale;
          *((void *)v51 + 3) = 0;
          *((void *)v51 + 4) = 0;
          *((void *)v51 + 2) = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((void *)v51 + 2, v66, v67, ((char *)v67 - (char *)v66) >> 4);
          *((void *)v51 + 5) = *(void *)v69;
          *(void *)(v51 + 45) = *(void *)&v69[5];
          unsigned int v52 = v69[12];
          v51[52] = v69[12];
          if (v52 <= 9 && ((1 << v52) & 0x33C) != 0) {
            atomic_fetch_add(*((atomic_ullong *volatile *)v51 + 5), 1uLL);
          }
          uint64_t v71 = v51;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::make_planner_node((uint64_t)v61, (uint64_t)v70, a4);
        }
        exception = __cxa_allocate_exception(8uLL);
        uint64_t v54 = "Please provide at least one column to unpack to";
      }
      else
      {
        exception = __cxa_allocate_exception(8uLL);
        uint64_t v54 = "unpacked column names and types length do not match";
      }
    }
  }
  void *exception = v54;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void sub_22413C924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::locale a53)
{
}

uint64_t turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 32);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *(void **)(a1 + 32);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          atomic_ullong *volatile v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7)
        {
          atomic_ullong *volatile v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(void **)(a1 + 32);
        if (v10)
        {
          atomic_ullong *volatile v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          atomic_ullong *volatile v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  atomic_ullong *volatile v15 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
  return a1;
}

void turi::unity_sarray::begin_iterator(turi::unity_sarray *this)
{
  uint64_t v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "begin_iterator", 2685, 1);
    uint64_t v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[2] - 24) + 16));
        uint64_t v7 = std::locale::use_facet((const std::locale *)&v9, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale((std::locale *)&v9);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  turi::unity_sarray::get_underlying_sarray(this, &v9);
  if ((void)v9 && (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 96))(this)) {
    turi::sarray<turi::flexible_type>::get_reader(v9);
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_22413D008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, std::__shared_weak_count *a12)
{
  MEMORY[0x22A614FA0](v12, 0x1022C400F6C8D84);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void turi::unity_sarray::subslice(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v9 = *a2;
  int v10 = *((unsigned __int8 *)a2 + 12);
  int v11 = 1;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
    case 7:
      uint64_t v12 = *(void *)a3;
      int v13 = *(unsigned __int8 *)(a3 + 12);
      int v11 = 1;
      switch(*(unsigned char *)(a3 + 12))
      {
        case 0:
        case 7:
          uint64_t v14 = *a4;
          switch(*((unsigned char *)a4 + 12))
          {
            case 2:
              int v11 = 1;
              atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
              if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || v14 == 0) {
                goto LABEL_59;
              }
              if (*(char *)(v14 + 31) < 0)
              {
                uint64_t v16 = v14;
                operator delete(*(void **)(v14 + 8));
                uint64_t v14 = v16;
              }
              uint64_t v17 = v14;
              uint64_t v18 = 0x1012C404EF22A49;
              goto LABEL_58;
            case 3:
              int v11 = 1;
              atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
              if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || v14 == 0) {
                goto LABEL_59;
              }
              long long v26 = *(void **)(v14 + 8);
              if (v26)
              {
                *(void *)(v14 + 16) = v26;
                uint64_t v27 = v14;
                operator delete(v26);
                uint64_t v14 = v27;
              }
              uint64_t v17 = v14;
              uint64_t v18 = 0x1080C409938AC02;
              goto LABEL_58;
            case 4:
              int v11 = 1;
              atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
              if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || v14 == 0) {
                goto LABEL_59;
              }
              long long v60 = (void **)(v14 + 8);
              uint64_t v20 = v14;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v60);
              goto LABEL_51;
            case 5:
              int v11 = 1;
              atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
              if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || v14 == 0) {
                goto LABEL_59;
              }
              long long v60 = (void **)(v14 + 8);
              uint64_t v20 = v14;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v60);
LABEL_51:
              uint64_t v17 = v20;
              uint64_t v18 = 0x1020C405E66F15BLL;
              goto LABEL_58;
            case 8:
              int v11 = 1;
              atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
              if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || v14 == 0) {
                goto LABEL_59;
              }
              uint64_t v30 = v14;
              boost::detail::shared_count::~shared_count((atomic_uint **)(v14 + 16));
              uint64_t v17 = v30;
              unsigned int v23 = -235920773;
              goto LABEL_57;
            case 9:
              int v11 = 1;
              atomic_fetch_add((atomic_ullong *volatile)v14, 1uLL);
              if (atomic_fetch_add((atomic_ullong *volatile)v14, 0xFFFFFFFFFFFFFFFFLL) != 1 || v14 == 0) {
                goto LABEL_59;
              }
              uint64_t v22 = v14;
              std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v14);
              uint64_t v17 = v22;
              unsigned int v23 = 2071181815;
LABEL_57:
              uint64_t v18 = v23 | 0x1030C4000000000;
LABEL_58:
              MEMORY[0x22A614FA0](v17, v18);
              int v11 = 1;
              break;
            default:
              if (*((unsigned char *)a4 + 12)) {
                BOOL v24 = *((unsigned char *)a4 + 12) == 7;
              }
              else {
                BOOL v24 = 1;
              }
              int v11 = !v24;
              goto LABEL_59;
          }
          goto LABEL_59;
        case 2:
          int v11 = 1;
          atomic_fetch_add((atomic_ullong *volatile)v12, 1uLL);
LABEL_60:
          if (atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL) != 1 || v12 == 0) {
            goto LABEL_97;
          }
          if (*(char *)(v12 + 31) < 0) {
            operator delete(*(void **)(v12 + 8));
          }
          unint64_t v32 = (void *)v12;
          uint64_t v33 = 0x1012C404EF22A49;
          goto LABEL_96;
        case 3:
          int v11 = 1;
          atomic_fetch_add((atomic_ullong *volatile)v12, 1uLL);
LABEL_89:
          if (atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL) != 1 || v12 == 0) {
            goto LABEL_97;
          }
          uint64_t v40 = *(void **)(v12 + 8);
          if (v40)
          {
            *(void *)(v12 + 16) = v40;
            operator delete(v40);
          }
          unint64_t v32 = (void *)v12;
          uint64_t v33 = 0x1080C409938AC02;
          goto LABEL_96;
        case 4:
          int v11 = 1;
          atomic_fetch_add((atomic_ullong *volatile)v12, 1uLL);
LABEL_77:
          if (atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL) != 1 || v12 == 0) {
            goto LABEL_97;
          }
          long long v60 = (void **)(v12 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v60);
          goto LABEL_82;
        case 5:
          int v11 = 1;
          atomic_fetch_add((atomic_ullong *volatile)v12, 1uLL);
LABEL_67:
          if (atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL) != 1 || v12 == 0) {
            goto LABEL_97;
          }
          long long v60 = (void **)(v12 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v60);
LABEL_82:
          unint64_t v32 = (void *)v12;
          uint64_t v33 = 0x1020C405E66F15BLL;
          goto LABEL_96;
        case 8:
          int v11 = 1;
          atomic_fetch_add((atomic_ullong *volatile)v12, 1uLL);
LABEL_83:
          if (atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL) != 1 || v12 == 0) {
            goto LABEL_97;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v12 + 16));
          unint64_t v32 = (void *)v12;
          unsigned int v36 = -235920773;
          goto LABEL_88;
        case 9:
          int v11 = 1;
          atomic_fetch_add((atomic_ullong *volatile)v12, 1uLL);
LABEL_72:
          if (atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL) != 1 || v12 == 0) {
            goto LABEL_97;
          }
          unint64_t v32 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v12);
          unsigned int v36 = 2071181815;
LABEL_88:
          uint64_t v33 = v36 | 0x1030C4000000000;
LABEL_96:
          MEMORY[0x22A614FA0](v32, v33);
          break;
        default:
LABEL_59:
          switch(v13)
          {
            case 2:
              goto LABEL_60;
            case 3:
              goto LABEL_89;
            case 4:
              goto LABEL_77;
            case 5:
              goto LABEL_67;
            case 8:
              goto LABEL_83;
            case 9:
              goto LABEL_72;
            default:
              goto LABEL_97;
          }
      }
      goto LABEL_97;
    case 2:
      int v11 = 1;
      atomic_fetch_add((atomic_ullong *volatile)v9, 1uLL);
LABEL_98:
      if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) != 1 || v9 == 0) {
        goto LABEL_138;
      }
      if (*(char *)(v9 + 31) < 0) {
        operator delete(*(void **)(v9 + 8));
      }
      uint64_t v42 = v9;
      uint64_t v43 = 0x1012C404EF22A49;
      goto LABEL_155;
    case 3:
      int v11 = 1;
      atomic_fetch_add((atomic_ullong *volatile)v9, 1uLL);
LABEL_133:
      if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) != 1 || v9 == 0) {
        goto LABEL_138;
      }
      atomic_ullong *volatile v59 = *(void **)(v9 + 8);
      if (v59)
      {
        *(void *)(v9 + 16) = v59;
        operator delete(v59);
      }
      uint64_t v42 = v9;
      uint64_t v43 = 0x1080C409938AC02;
      goto LABEL_155;
    case 4:
      int v11 = 1;
      atomic_fetch_add((atomic_ullong *volatile)v9, 1uLL);
LABEL_121:
      if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) != 1 || v9 == 0) {
        goto LABEL_138;
      }
      long long v60 = (void **)(v9 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v60);
      goto LABEL_126;
    case 5:
      int v11 = 1;
      atomic_fetch_add((atomic_ullong *volatile)v9, 1uLL);
LABEL_105:
      if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) != 1 || v9 == 0) {
        goto LABEL_138;
      }
      long long v60 = (void **)(v9 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v60);
LABEL_126:
      uint64_t v42 = v9;
      uint64_t v43 = 0x1020C405E66F15BLL;
      goto LABEL_155;
    case 8:
      int v11 = 1;
      atomic_fetch_add((atomic_ullong *volatile)v9, 1uLL);
LABEL_127:
      if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) != 1 || v9 == 0) {
        goto LABEL_138;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v9 + 16));
      uint64_t v42 = v9;
      unsigned int v49 = -235920773;
      goto LABEL_132;
    case 9:
      int v11 = 1;
      atomic_fetch_add((atomic_ullong *volatile)v9, 1uLL);
LABEL_110:
      if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) != 1 || v9 == 0)
      {
LABEL_138:
        if (v11) {
          goto LABEL_156;
        }
      }
      else
      {
        uint64_t v46 = *(void **)(v9 + 48);
        if (v46)
        {
          *(void *)(v9 + 56) = v46;
          operator delete(v46);
        }
        uint64_t v47 = *(void **)(v9 + 24);
        if (v47)
        {
          *(void *)(v9 + 32) = v47;
          operator delete(v47);
        }
        long long v48 = *(std::__shared_weak_count **)(v9 + 16);
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        uint64_t v42 = v9;
        unsigned int v49 = 2071181815;
LABEL_132:
        uint64_t v43 = v49 | 0x1030C4000000000;
LABEL_155:
        MEMORY[0x22A614FA0](v42, v43);
        if (v11) {
LABEL_156:
        }
          turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_1::operator()();
      }
      if ((v8 - 5) > 0xFCu)
      {
        if (*((unsigned char *)a2 + 12))
        {
          char v53 = 0;
          uint64_t v54 = 0;
        }
        else
        {
          uint64_t v54 = *a2;
          char v53 = 1;
        }
        if (*(unsigned char *)(a3 + 12))
        {
          uint64_t v55 = 1;
        }
        else if (*(void *)a3 <= 1uLL)
        {
          uint64_t v55 = 1;
        }
        else
        {
          uint64_t v55 = *(void *)a3;
        }
        if (*((unsigned char *)a4 + 12))
        {
          uint64_t v56 = 0;
          char v57 = 0;
        }
        else
        {
          uint64_t v56 = *a4;
          char v57 = 1;
        }
        double v58 = operator new(0x30uLL);
        *double v58 = &unk_26D76E8E0;
        v58[1] = v54;
        *((unsigned char *)v58 + 16) = v53;
        v58[3] = v55;
        *((unsigned char *)v58 + 32) = v57;
        v58[5] = v56;
        std::string v62 = v58;
        turi::unity_sarray::transform_lambda(a1, (uint64_t)v61, v8, 0, 0);
      }
      turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_2::operator()();
    default:
LABEL_97:
      switch(v10)
      {
        case 2:
          goto LABEL_98;
        case 3:
          goto LABEL_133;
        case 4:
          goto LABEL_121;
        case 5:
          goto LABEL_105;
        case 8:
          goto LABEL_127;
        case 9:
          goto LABEL_110;
        default:
          goto LABEL_138;
      }
  }
}

void sub_22413D81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::ternary_operator(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7 = *(void **)a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void **)a3;
  int v8 = *(std::__shared_weak_count **)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v36 = *(void *)(a1 + 24);
  unint64_t v37 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = (std::__shared_weak_count *)v7[4];
  uint64_t v34 = v7[3];
  unint64_t v35 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v12 = turi::query_eval::planner::test_equal_length((uint64_t)&v29, &v36, &v34);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (!v12) {
    turi::unity_sarray::ternary_operator(std::shared_ptr<turi::unity_sarray_base>,std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()();
  }
  int v13 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v33 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)v9[4];
  uint64_t v30 = v9[3];
  char v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v15 = turi::query_eval::planner::test_equal_length((uint64_t)&v29, &v32, &v30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (!v15) {
    turi::unity_sarray::ternary_operator(std::shared_ptr<turi::unity_sarray_base>,std::shared_ptr<turi::unity_sarray_base>)::$_1::operator()();
  }
  int v16 = (*(uint64_t (**)(void *))(*v7 + 112))(v7);
  if (v16 != (*(unsigned int (**)(void *))(*v9 + 112))(v9)) {
    turi::unity_sarray::ternary_operator(std::shared_ptr<turi::unity_sarray_base>,std::shared_ptr<turi::unity_sarray_base>)::$_2::operator()();
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v29);
  uint64_t v17 = v29;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v25 = *(void *)(a1 + 24);
  long long v26 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)v7[4];
  uint64_t v23 = v7[3];
  BOOL v24 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = (std::__shared_weak_count *)v9[4];
  uint64_t v21 = v9[3];
  uint64_t v22 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::make_planner_node(&v25, &v23, &v21, &v27);
  turi::unity_sarray::construct_from_planner_node(v17, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  *a4 = v29;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_22413DB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::make_planner_node(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  v16[0] = 0;
  v16[1] = 0;
  v14[1] = 0;
  BOOL v15 = v16;
  int v13 = (const void **)v14;
  v14[0] = 0;
  uint64_t v5 = a1[1];
  v20[0] = *a1;
  v20[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a2[1];
  void v20[2] = *a2;
  void v20[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a3[1];
  void v20[4] = *a3;
  v20[5] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = 0;
  int v11 = 0;
  BOOL v12 = 0;
  uint64_t v17 = (void **)&v10;
  char v18 = 0;
  int v10 = operator new(0x30uLL);
  int v11 = v10;
  BOOL v12 = v10 + 6;
  int v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((uint64_t)&v12, v20, &v21, v10);
  int v19 = 14;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v19, (uint64_t)&v15, &v13, &v10, a4);
  uint64_t v17 = (void **)&v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v17);
  for (uint64_t i = 5; i != -1; i -= 2)
  {
    uint64_t v9 = (std::__shared_weak_count *)v20[i];
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v13, v14[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v15, v16[0]);
}

void sub_22413DD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v9 = va_arg(va1, void);
  int v11 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  BOOL v15 = va_arg(va2, void *);
  uint64_t v16 = va_arg(va2, void);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  uint64_t v7 = 40;
  while (1)
  {
    int v8 = *(std::__shared_weak_count **)(v5 - 88 + v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    v7 -= 16;
    if (v7 == -8)
    {
      std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v11);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v15);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t turi::unity_sarray::to_const@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>, unint64_t a5@<D0>)
{
  uint64_t v9 = 0;
  v137[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v137, 0, 13);
  BYTE4(v137[1]) = a3;
  switch((int)a3)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      uint64_t v9 = 0x1900000000000000;
      v137[0] = (atomic_ullong *)0x1900000000000000;
      LODWORD(v137[1]) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      break;
  }
  int v10 = *(unsigned __int8 *)(a2 + 12);
  if (v10 == 7 || v10 == a3)
  {
    if (v137 != (atomic_ullong **)a2)
    {
      switch(BYTE4(v137[1]))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v12 = v137[0];
            if (v137[0])
            {
              if (*((char *)v137[0] + 31) < 0) {
                operator delete(*((void **)v137[0] + 1));
              }
              uint64_t v13 = v12;
              uint64_t v14 = 0x1012C404EF22A49;
              goto LABEL_41;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v17 = v137[0];
            if (v137[0])
            {
              char v18 = (void *)v137[0][1];
              if (v18)
              {
                v137[0][2] = (atomic_ullong)v18;
                operator delete(v18);
              }
              uint64_t v13 = v17;
              uint64_t v14 = 0x1080C409938AC02;
              goto LABEL_41;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            BOOL v15 = v137[0];
            if (v137[0])
            {
              *(void *)unint64_t v122 = v137[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v122);
              goto LABEL_36;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            BOOL v15 = v137[0];
            if (v137[0])
            {
              *(void *)unint64_t v122 = v137[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v122);
LABEL_36:
              uint64_t v13 = v15;
              uint64_t v14 = 0x1020C405E66F15BLL;
              goto LABEL_41;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v19 = v137[0];
            if (v137[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v137[0] + 2);
              uint64_t v13 = v19;
              unsigned int v16 = -235920773;
              goto LABEL_40;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v9, 0xFFFFFFFFFFFFFFFFLL) == 1 && v137[0])
          {
            uint64_t v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v137[0]);
            unsigned int v16 = 2071181815;
LABEL_40:
            uint64_t v14 = v16 | 0x1030C4000000000;
LABEL_41:
            MEMORY[0x22A614FA0](v13, v14);
          }
          break;
        default:
          break;
      }
      *(atomic_ullong **)((char *)v137 + 5) = *(atomic_ullong **)(a2 + 5);
      v137[0] = *(atomic_ullong **)a2;
      BYTE4(v137[1]) = *(unsigned char *)(a2 + 12);
      switch(BYTE4(v137[1]))
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(v137[0], 1uLL);
          break;
        default:
          break;
      }
    }
  }
  else if (v137 != (atomic_ullong **)a2)
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 0:
        switch(BYTE4(v137[1]))
        {
          case 0:
            uint64_t v11 = *(void *)a2;
            goto LABEL_73;
          case 1:
            double v55 = (double)*(uint64_t *)a2;
            goto LABEL_217;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v61 = v137[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v122);
            std::ostream::operator<<();
            std::stringbuf::str();
            std::string v62 = (void **)(v61 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v122);
            if (*((char *)v61 + 31) < 0) {
              operator delete(*v62);
            }
            long long v63 = v131;
            v61[3] = v132;
            *(_OWORD *)std::string v62 = v63;
            goto LABEL_232;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 6:
            v137[0] = (atomic_ullong *)(*(void *)a2 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v137[1]) = 0;
            goto LABEL_232;
          case 7:
            goto LABEL_231;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          default:
            goto LABEL_337;
        }
      case 1:
        switch(BYTE4(v137[1]))
        {
          case 0:
            uint64_t v11 = (uint64_t)*(double *)a2;
            goto LABEL_73;
          case 1:
            double v55 = *(double *)a2;
            goto LABEL_217;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v56 = v137[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v122);
            std::ostream::operator<<();
            std::stringbuf::str();
            char v57 = v56 + 1;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v122);
            if (*((char *)v56 + 31) < 0) {
              operator delete((void *)*v57);
            }
            long long v58 = v131;
            atomic_ullong v59 = v132;
            goto LABEL_279;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 6:
            int v60 = (int)((*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0);
            if (v60 >= 999999) {
              int v60 = 999999;
            }
            if (v60 >= 0xF4240) {
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            }
            v137[0] = (atomic_ullong *)(vcvtmd_s64_f64(*(double *)a2) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v137[1]) = v60;
            goto LABEL_232;
          case 7:
            goto LABEL_231;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          default:
            goto LABEL_337;
        }
      case 2:
        switch(BYTE4(v137[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_231;
          case 2:
            long long v26 = *(atomic_ullong **)a2;
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v22 = v137[0];
            if (*((char *)v26 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v122, (const std::string::value_type *)v26[1], v26[2]);
            }
            else
            {
              long long v27 = *(_OWORD *)(v26 + 1);
              *(void *)&v122[16] = v26[3];
              *(_OWORD *)unint64_t v122 = v27;
            }
            goto LABEL_276;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          default:
            goto LABEL_337;
        }
      case 3:
        long long v29 = *(atomic_ullong **)a2;
        uint64_t v30 = (char *)(*(void *)a2 + 8);
        switch(BYTE4(v137[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_231;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v22 = v137[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v131, v30);
            goto LABEL_276;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            if (v137[0] == v29) {
              goto LABEL_232;
            }
            char v31 = (char *)(v137[0] + 1);
            unint64_t v39 = v29 + 2;
            break;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v137[0] + 1, (void *)v29[1], (void *)v29[2], (v29[2] - v29[1]) >> 3);
            goto LABEL_232;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v50 = v137[0];
            long long v131 = 0uLL;
            atomic_ullong v132 = 0;
            long long v128 = 0;
            std::string::size_type v129 = 0;
            uint64_t v130 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v30, &v125);
            turi::flexible_type_impl::ndarray<double>::ndarray(v122, &v125, (uint64_t)&v131, (uint64_t)&v128, 0);
            if (v126) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v126);
            }
            if (v128)
            {
              std::string::size_type v129 = v128;
              operator delete(v128);
            }
            if ((void)v131)
            {
              *((void *)&v131 + 1) = v131;
              operator delete((void *)v131);
            }
            goto LABEL_140;
          default:
            goto LABEL_337;
        }
LABEL_106:
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v31, *(char **)v30, *v39, (*v39 - *(void *)v30) >> 3);
        break;
      case 4:
        uint64_t v23 = *(atomic_ullong **)a2;
        BOOL v24 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v137[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_231;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v22 = v137[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v131, v24);
            goto LABEL_276;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v122, v137[0] + 1, v24);
            goto LABEL_232;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            if (v137[0] != v23) {
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v137[0] + 1), (uint64_t *)v23[1], (uint64_t *)v23[2], (v23[2] - v23[1]) >> 4);
            }
            goto LABEL_232;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v40 = v137[0];
            atomic_ullong v132 = 0;
            long long v131 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v131, (uint64_t *)v23[1], (uint64_t *)v23[2], (v23[2] - v23[1]) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v131, v122);
            long long v41 = *(_OWORD *)v122;
            *(_OWORD *)unint64_t v122 = 0uLL;
            uint64_t v42 = (std::__shared_weak_count *)v40[2];
            *(_OWORD *)(v40 + 1) = v41;
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
            uint64_t v43 = (void *)v40[3];
            if (v43)
            {
              v40[4] = (atomic_ullong)v43;
              operator delete(v43);
              v40[3] = 0;
              v40[4] = 0;
              v40[5] = 0;
            }
            unint64_t v44 = (void *)v40[6];
            *(_OWORD *)(v40 + 3) = *(_OWORD *)&v122[16];
            v40[5] = *(void *)v123;
            *(_OWORD *)&v122[16] = 0uLL;
            *(void *)uint64_t v123 = 0;
            if (v44)
            {
              v40[7] = (atomic_ullong)v44;
              operator delete(v44);
              v40[6] = 0;
              v40[7] = 0;
              v40[8] = 0;
            }
            *((_OWORD *)v40 + 3) = *(_OWORD *)&v123[8];
            v40[8] = *(void *)&v123[24];
            memset(&v123[8], 0, 24);
            v40[9] = v124;
            turi::flexible_type_impl::ndarray<double>::~ndarray(v122);
            long long v128 = (void **)&v131;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v128);
            goto LABEL_232;
          default:
            goto LABEL_337;
        }
      case 5:
        uint64_t v25 = *(atomic_ullong **)a2;
        switch(BYTE4(v137[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_231;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v22 = v137[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v131, v25 + 1);
            goto LABEL_276;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            if (v137[0] != v25) {
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v137[0] + 1, (uint64_t *)v25[1], (uint64_t *)v25[2], (v25[2] - v25[1]) >> 5);
            }
            goto LABEL_232;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          default:
            goto LABEL_337;
        }
      case 6:
        switch(BYTE4(v137[1]))
        {
          case 0:
            uint64_t v11 = (uint64_t)(*(void *)a2 << 8) >> 8;
LABEL_73:
            v137[0] = (atomic_ullong *)v11;
            goto LABEL_232;
          case 1:
            double v55 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
LABEL_217:
            v137[0] = *(atomic_ullong **)&v55;
            goto LABEL_232;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v22 = v137[0];
            int v64 = *(_DWORD *)(a2 + 8);
            *(void *)&long long v131 = *(void *)a2;
            DWORD2(v131) = v64;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v131, (std::string *)v122);
            goto LABEL_276;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 6:
            int v65 = *(_DWORD *)(a2 + 8);
            v137[0] = *(atomic_ullong **)a2;
            LODWORD(v137[1]) = v65;
            goto LABEL_232;
          case 7:
            goto LABEL_231;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          default:
            goto LABEL_337;
        }
      case 8:
        char v28 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v137[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_231;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v22 = v137[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_276;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            unint64_t v37 = v137[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v28, (double **)v122, a5);
            unint64_t v38 = (void *)v37[1];
            if (v38)
            {
              void v37[2] = (atomic_ullong)v38;
              operator delete(v38);
              v37[1] = 0;
              void v37[2] = 0;
              v37[3] = 0;
            }
            *(_OWORD *)(v37 + 1) = *(_OWORD *)v122;
            v37[3] = *(void *)&v122[16];
            goto LABEL_232;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v50 = v137[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v28, v122, a5);
LABEL_140:
            long long v51 = *(_OWORD *)v122;
            *(_OWORD *)unint64_t v122 = 0uLL;
            unsigned int v52 = (std::__shared_weak_count *)v50[2];
            *(_OWORD *)(v50 + 1) = v51;
            if (v52) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v52);
            }
            char v53 = (void *)v50[3];
            if (v53)
            {
              v50[4] = (atomic_ullong)v53;
              operator delete(v53);
              v50[3] = 0;
              v50[4] = 0;
              v50[5] = 0;
            }
            uint64_t v54 = (void *)v50[6];
            *(_OWORD *)(v50 + 3) = *(_OWORD *)&v122[16];
            v50[5] = *(void *)v123;
            *(_OWORD *)&v122[16] = 0uLL;
            *(void *)uint64_t v123 = 0;
            if (v54)
            {
              v50[7] = (atomic_ullong)v54;
              operator delete(v54);
              v50[6] = 0;
              v50[7] = 0;
              v50[8] = 0;
            }
            *((_OWORD *)v50 + 3) = *(_OWORD *)&v123[8];
            v50[8] = *(void *)&v123[24];
            memset(&v123[8], 0, 24);
            v50[9] = v124;
            goto LABEL_333;
          default:
            goto LABEL_337;
        }
      case 9:
        uint64_t v20 = *(atomic_ullong **)a2;
        uint64_t v21 = (uint64_t *)(*(void *)a2 + 8);
        switch(BYTE4(v137[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_231;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v22 = v137[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v131, v21);
LABEL_276:
            char v57 = v22 + 1;
            if (*((char *)v22 + 31) < 0) {
              operator delete((void *)*v57);
            }
            long long v58 = *(_OWORD *)v122;
            atomic_ullong v59 = *(void *)&v122[16];
LABEL_279:
            v57[2] = v59;
            *(_OWORD *)char v57 = v58;
            goto LABEL_232;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            char v31 = (char *)(v137[0] + 1);
            if (v20[9]) {
              goto LABEL_286;
            }
            uint64_t v33 = (uint64_t *)v20[3];
            uint64_t v32 = (uint64_t *)v20[4];
            uint64_t v34 = (void *)v20[1];
            if (v32 == v33 || v34 == 0)
            {
              uint64_t v81 = 0;
            }
            else
            {
              uint64_t v81 = 1;
              do
              {
                uint64_t v82 = *v33++;
                v81 *= v82;
              }
              while (v33 != v32);
            }
            if (v81 == (uint64_t)(v34[1] - *v34) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index(v21) == (uint64_t)(*(void *)(*v21 + 8)
                                                                                       - *(void *)*v21) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v21)) {
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              }
              uint64_t v30 = (char *)*v21;
              if (v31 != v30)
              {
                unint64_t v39 = (uint64_t *)(v30 + 8);
                goto LABEL_106;
              }
            }
            else
            {
LABEL_286:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid(v21)) {
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              }
              if (turi::flexible_type_impl::ndarray<double>::is_full(v21))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(v122, (uint64_t)v21);
              }
              else
              {
                long long v131 = 0uLL;
                atomic_ullong v132 = 0;
                long long v128 = 0;
                std::string::size_type v129 = 0;
                uint64_t v130 = 0;
                uint64_t v125 = 0;
                std::string v126 = 0;
                uint64_t v127 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(v122, (uint64_t)&v131, (uint64_t)&v128, (uint64_t)&v125, 0);
                if (v125)
                {
                  std::string v126 = v125;
                  operator delete(v125);
                }
                if (v128)
                {
                  std::string::size_type v129 = v128;
                  operator delete(v128);
                }
                if ((void)v131)
                {
                  *((void *)&v131 + 1) = v131;
                  operator delete((void *)v131);
                }
                atomic_ullong v124 = 0;
                if (v122 != (unsigned char *)(v20 + 1)) {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v122[16], (char *)v20[3], v20[4], (v20[4] - v20[3]) >> 3);
                }
                uint64_t v84 = (uint64_t *)v20[3];
                atomic_ullong *volatile v83 = (uint64_t *)v20[4];
                if (v83 == v84 || !*v21)
                {
                  unint64_t v85 = 0;
                }
                else
                {
                  unint64_t v85 = 1;
                  do
                  {
                    uint64_t v86 = *v84++;
                    v85 *= v86;
                  }
                  while (v84 != v83);
                }
                std::vector<double>::resize(*(uint64_t *)v122, v85);
                std::vector<unsigned long>::resize((uint64_t)&v123[8], (v20[4] - v20[3]) >> 3);
                if (*(void *)&v122[24] != *(void *)&v122[16]
                  && *(void *)(*(void *)v122 + 8) != **(void **)v122)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v131, (v20[7] - v20[6]) >> 3);
                  atomic_ullong v87 = v20[6];
                  atomic_ullong v88 = v20[7];
                  int v89 = (unint64_t *)v131;
                  uint64_t v90 = v88 - v87;
                  if (v88 != v87)
                  {
                    uint64_t v91 = 0;
                    unint64_t v92 = v90 >> 3;
                    if (v92 <= 1) {
                      unint64_t v92 = 1;
                    }
                    long long v93 = (void *)(v131 + 8);
                    do
                    {
                      *(v93 - 1) = *(void *)(v87 + 8 * v91);
                      void *v93 = v91++;
                      v93 += 2;
                    }
                    while (v92 != v91);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v131 + 1), *((unint64_t **)&v131 + 1), (uint64_t)v89, v89);
                  uint64_t v94 = v131;
                  uint64_t v95 = *(void *)&v123[8];
                  *(void *)(*(void *)&v123[8] + 8 * *(void *)(v131 + 8)) = 1;
                  uint64_t v96 = v20[7] - v20[6];
                  if ((unint64_t)v96 >= 9)
                  {
                    unint64_t v97 = v96 >> 3;
                    uint64_t v98 = *(void *)&v122[16];
                    if (v97 <= 2) {
                      unint64_t v97 = 2;
                    }
                    std::string::size_type v99 = (uint64_t *)(v94 + 24);
                    unint64_t v100 = v97 - 1;
                    do
                    {
                      uint64_t v101 = *(void *)(v98 + 8 * *(v99 - 2)) * *(void *)(v95 + 8 * *(v99 - 2));
                      uint64_t v102 = *v99;
                      v99 += 2;
                      *(void *)(v95 + 8 * v102) = v101;
                      --v100;
                    }
                    while (v100);
                  }
                  unint64_t v103 = (v20[4] - v20[3]) >> 3;
                  uint64_t v125 = 0;
                  std::vector<unsigned long>::vector(&v128, v103, &v125);
                  do
                  {
                    char v104 = v128;
                    if (v129 == v128)
                    {
                      uint64_t v113 = 0;
                      uint64_t v114 = *(void *)(*(void *)v20[1] + 8 * v20[9]);
                      unint64_t v115 = *(void **)v122;
                    }
                    else
                    {
                      uint64_t v105 = 0;
                      unint64_t v106 = v129 - v128;
                      uint64_t v107 = (uint64_t *)v20[6];
                      if (v106 <= 1) {
                        unint64_t v106 = 1;
                      }
                      uint64_t v108 = v128;
                      unint64_t v109 = v106;
                      do
                      {
                        uint64_t v111 = (uint64_t)*v108++;
                        uint64_t v110 = v111;
                        uint64_t v112 = *v107++;
                        v105 += v112 * v110;
                        --v109;
                      }
                      while (v109);
                      uint64_t v113 = 0;
                      uint64_t v114 = *(void *)(*(void *)v20[1] + 8 * (v20[9] + v105));
                      unint64_t v115 = *(void **)v122;
                      uint64_t v116 = *(uint64_t **)&v123[8];
                      do
                      {
                        uint64_t v118 = (uint64_t)*v104++;
                        uint64_t v117 = v118;
                        uint64_t v119 = *v116++;
                        v113 += v119 * v117;
                        --v106;
                      }
                      while (v106);
                    }
                    *(void *)(*v115 + 8 * v113) = v114;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v21, (uint64_t *)&v128));
                  if (v128)
                  {
                    std::string::size_type v129 = v128;
                    operator delete(v128);
                  }
                  if ((void)v131)
                  {
                    *((void *)&v131 + 1) = v131;
                    operator delete((void *)v131);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v122);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v122)) {
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              }
              if (v31 != *(char **)v122) {
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v31, **(char ***)v122, *(void *)(*(void *)v122 + 8), (uint64_t)(*(void *)(*(void *)v122 + 8) - **(void **)v122) >> 3);
              }
LABEL_333:
              turi::flexible_type_impl::ndarray<double>::~ndarray(v122);
            }
            break;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_231;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
LABEL_231:
            turi::flexible_type_fail(0);
            goto LABEL_232;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            unint64_t v45 = v137[0];
            turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v21, (turi::image_type *)v122);
            long long v46 = *(_OWORD *)v122;
            *(_OWORD *)unint64_t v122 = 0uLL;
            long long v47 = *(_OWORD *)(v45 + 1);
            *(_OWORD *)(v45 + 1) = v46;
            long long v131 = v47;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v131 + 1);
            long long v48 = *(_OWORD *)&v122[16];
            long long v49 = *(_OWORD *)v123;
            *(_OWORD *)(v45 + 7) = *(_OWORD *)&v123[16];
            *(_OWORD *)(v45 + 5) = v49;
            *(_OWORD *)(v45 + 3) = v48;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v122[8]);
            goto LABEL_232;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v36 = v137[0];
            std::shared_ptr<std::vector<double>>::operator=[abi:ne180100](v137[0] + 1, v21);
            if (v36 != v20)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v36 + 24, (char *)v20[3], v20[4], (v20[4] - v20[3]) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v36 + 48, (char *)v20[6], v20[7], (v20[7] - v20[6]) >> 3);
            }
            v36[9] = v20[9];
            goto LABEL_232;
          default:
            goto LABEL_337;
        }
        break;
      default:
LABEL_337:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
LABEL_232:
  long long v66 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v120 = *(void *)(a1 + 24);
  uint64_t v121 = v66;
  if (v66) {
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v67 = turi::query_eval::infer_planner_node_length((uint64_t)&v120);
  if (v121) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v121);
  }
  if (v67 < 0)
  {
    *(atomic_ullong **)&v133[5] = *(atomic_ullong **)((char *)v137 + 5);
    *(atomic_ullong **)uint64_t v133 = v137[0];
    v133[12] = BYTE4(v137[1]);
    if (BYTE4(v137[1]) <= 9u && ((1 << SBYTE4(v137[1])) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v133, 1uLL);
    }
    *(void *)&v135[5] = *(void *)&v133[5];
    uint64_t v134 = &unk_26D76E960;
    *(void *)uint64_t v135 = *(void *)v133;
    v135[12] = v133[12];
    v133[12] = 0;
    uint64_t v136 = &v134;
    turi::unity_sarray::transform_lambda(a1, (uint64_t)&v134, a3, 0, 0);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v122);
  uint64_t result = (*(uint64_t (**)(void, atomic_ullong **, uint64_t, uint64_t))(**(void **)v122 + 40))(*(void *)v122, v137, v67, a3);
  *a4 = *(_OWORD *)v122;
  switch(BYTE4(v137[1]))
  {
    case 2:
      if (atomic_fetch_add(v137[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v69 = v137[0];
        if (v137[0])
        {
          if (*((char *)v137[0] + 31) < 0) {
            operator delete(*((void **)v137[0] + 1));
          }
          long long v70 = v69;
          uint64_t v71 = 0x1012C404EF22A49;
          goto LABEL_273;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v137[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v78 = v137[0];
        if (v137[0])
        {
          char v79 = (void *)v137[0][1];
          if (v79)
          {
            v137[0][2] = (atomic_ullong)v79;
            operator delete(v79);
          }
          long long v70 = v78;
          uint64_t v71 = 0x1080C409938AC02;
          goto LABEL_273;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v137[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v72 = v137[0];
        if (v137[0])
        {
          *(void *)unint64_t v122 = v137[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v122);
          goto LABEL_268;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v137[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v72 = v137[0];
        if (v137[0])
        {
          *(void *)unint64_t v122 = v137[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v122);
LABEL_268:
          long long v70 = v72;
          uint64_t v71 = 0x1020C405E66F15BLL;
          goto LABEL_273;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v137[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v80 = v137[0];
        if (v137[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v137[0] + 2);
          long long v70 = v80;
          unsigned int v77 = -235920773;
          goto LABEL_272;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v137[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::locale v73 = v137[0];
        if (v137[0])
        {
          long long v74 = (void *)v137[0][6];
          if (v74)
          {
            v137[0][7] = (atomic_ullong)v74;
            operator delete(v74);
          }
          uint64_t v75 = (void *)v73[3];
          if (v75)
          {
            v73[4] = (atomic_ullong)v75;
            operator delete(v75);
          }
          uint64_t v76 = (std::__shared_weak_count *)v73[2];
          if (v76) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          }
          long long v70 = v73;
          unsigned int v77 = 2071181815;
LABEL_272:
          uint64_t v71 = v77 | 0x1030C4000000000;
LABEL_273:
          uint64_t result = MEMORY[0x22A614FA0](v70, v71);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2241401F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = *(void **)(v3 - 208);
  if (v5)
  {
    *(void *)(v3 - 200) = v5;
    operator delete(v5);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va);
  switch(*(unsigned char *)(v3 - 108))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v3 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v6 = *(void *)(v3 - 120);
      if (!v6) {
        goto LABEL_29;
      }
      if (*(char *)(v6 + 31) < 0) {
        operator delete(*(void **)(v6 + 8));
      }
      uint64_t v7 = (void *)v6;
      uint64_t v8 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v3 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v12 = *(void **)(v3 - 120);
      if (!v12) {
        goto LABEL_29;
      }
      uint64_t v13 = (void *)v12[1];
      if (v13)
      {
        void v12[2] = v13;
        operator delete(v13);
      }
      uint64_t v7 = v12;
      uint64_t v8 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v3 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v9 = *(void **)(v3 - 120);
      if (!v9) {
        goto LABEL_29;
      }
      *(void *)(v3 - 176) = v9 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 176));
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v3 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v9 = *(void **)(v3 - 120);
      if (!v9) {
        goto LABEL_29;
      }
      *(void *)(v3 - 176) = v9 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 176));
LABEL_23:
      uint64_t v7 = v9;
      uint64_t v8 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v3 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v14 = *(void *)(v3 - 120);
      if (!v14) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v14 + 16));
      uint64_t v7 = (void *)v14;
      unsigned int v11 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v3 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      int v10 = *(void **)(v3 - 120);
      if (!v10) {
        goto LABEL_29;
      }
      uint64_t v7 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v10);
      unsigned int v11 = 2071181815;
LABEL_27:
      uint64_t v8 = v11 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v7, v8);
LABEL_29:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

uint64_t turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          BOOL v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          BOOL v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unsigned int v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void turi::unity_sarray::iterator_get_next(turi::unity_sarray *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    atomic_ullong *volatile v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "iterator_get_next", 2863, 1);
    unsigned int v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    atomic_ullong *volatile v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        unsigned int v11 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((void *)this + 6) && (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 96))(this))
  {
    std::vector<turi::flexible_type>::reserve(a3, a2);
    uint64_t v12 = (uint64_t *)((char *)this + 56);
    uint64_t v13 = (void *)((char *)this + 64);
    while (1)
    {
      uint64_t v14 = (void *)*v12;
      BOOL v15 = (void *)*v13;
      if (*(void *)*v12 == *(void *)*v13 && v14[1] == v15[1] && v14[4] == v15[4]) {
        break;
      }
      uint64_t v17 = (atomic_ullong *volatile *)(v14 + 2);
      unint64_t v18 = a3[1];
      if (v18 >= a3[2])
      {
        uint64_t v24 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a3, v17);
      }
      else
      {
        *(void *)unint64_t v18 = 0;
        *(_DWORD *)(v18 + 8) = 0;
        *(unsigned char *)(v18 + 12) = 0;
        if ((atomic_ullong *volatile *)v18 != v17)
        {
          atomic_ullong *volatile v19 = *v17;
          *(void *)(v18 + 5) = *(void *)((char *)v14 + 21);
          *(void *)unint64_t v18 = v19;
          unsigned int v20 = *((unsigned __int8 *)v14 + 28);
          *(unsigned char *)(v18 + 12) = v20;
          BOOL v21 = v20 > 9;
          int v22 = (1 << v20) & 0x33C;
          if (!v21 && v22 != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)v18, 1uLL);
          }
        }
        uint64_t v24 = v18 + 16;
      }
      a3[1] = v24;
      turi::sarray_iterator<turi::flexible_type>::operator++(*v12);
      unint64_t v16 = (a3[1] - *a3) >> 4;
      if (v16 >= a2) {
        goto LABEL_26;
      }
    }
    unint64_t v16 = (a3[1] - *a3) >> 4;
LABEL_26:
    if (v16 < a2)
    {
      unint64_t v25 = *((void *)this + 5);
      if (v25 < (*(uint64_t (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6))) {
        operator new();
      }
    }
  }
}

void sub_224140E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_sarray::materialize(turi::unity_sarray *this)
{
  turi::unity_sarray::get_underlying_sarray(this, &v1);
  if (*((void *)&v1 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v1 + 1));
  }
}

unint64_t turi::unity_sarray::is_materialized(turi::unity_sarray *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  atomic_ullong *volatile v2 = (std::__shared_weak_count *)*((void *)this + 4);
  uint64_t v8 = *((void *)this + 3);
  unsigned int v9 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v13, 0, sizeof(v13));
  BYTE11(v14) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((void *)&v16 + 1) = 0;
  long long v17 = 0uLL;
  turi::query_eval::optimization_engine::optimize_planner_graph(&v8, (uint64_t)v13, &v10);
  uint64_t v12 = (void **)&v16 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (SBYTE7(v16) < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((void *)v13 + 1);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  unint64_t is_source_node = turi::query_eval::is_source_node(&v10);
  if (is_source_node)
  {
    atomic_ullong *volatile v5 = v10;
    uint64_t v4 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
    *((void *)this + 3) = v5;
    *((void *)this + 4) = v4;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return is_source_node;
}

void sub_224140FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, char a15)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_sarray::get_content_identifier(turi::unity_sarray *this)
{
  atomic_ullong *volatile v2 = (turi::random *)(*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 400))(this);
  if (v2)
  {
    turi::unity_sarray::get_underlying_sarray(this, &v20);
    turi::index_file_information::index_file_information(&v21, (const turi::index_file_information *)(v20 + 8));
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    uint64_t v4 = v26;
    uint64_t v3 = v27;
    unint64_t v5 = 0xC6A4A7935BD1E995 * ((0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3)) ^ 0xC3A5C85C97CB3127);
    for (uint64_t i = 0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47)); v4 != v3; v4 += 24)
    {
      int v7 = *(char *)(v4 + 23);
      if (v7 >= 0) {
        uint64_t v8 = (turi::cityhash_local *)v4;
      }
      else {
        uint64_t v8 = *(turi::cityhash_local **)v4;
      }
      if (v7 >= 0) {
        unint64_t v9 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        unint64_t v9 = *(void *)(v4 + 8);
      }
      unint64_t v10 = turi::cityhash_local::CityHash64(v8, v9);
      uint64_t v11 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * i) | ((0x87C37B91114253D5 * i) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
      uint64_t i = (5
         * (__ROR8__((0x87C37B91114253D5 * ((0x93A2C9BF80000000 * v10) | ((0x4CF5AD432745937FLL * v10) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v11)+ 944331445) ^ v11;
    }
    uint64_t v12 = (uint64_t *)__p;
    if (__p != v25)
    {
      do
      {
        uint64_t v13 = *v12++;
        unint64_t v14 = (0xC6A4A7935BD1E995 * (v13 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                      * (v13 ^ 0xC3A5C85C97CB3127)) >> 47);
        uint64_t v15 = 5
            * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * i) | ((0x87C37B91114253D5 * i) >> 31))) ^ 0x73A3916AE45D01E5, 27);
        uint64_t i = (5
           * (__ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v14) | ((0x60004CFCBE6C6FEBLL * v14) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v15+ 0x4231D716C8ADF0A2)+ 944331445) ^ (v15 + 0x4231D716C8ADF0A2);
      }
      while (v12 != v25);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v28, v28[1]);
    *(void *)&long long v20 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    if (__p)
    {
      unint64_t v25 = __p;
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    source = (char *)turi::random::get_source(v2);
    long long v17 = (pthread_mutex_t *)(source + 6288);
    pthread_mutex_lock((pthread_mutex_t *)(source + 6288));
    unint64_t v18 = 0x5DEECE66DLL * *((void *)source + 785) + 11;
    *((void *)source + 785) = v18 & 0xFFFFFFFFFFFFLL;
    uint64_t i = (v18 >> 17) & 0x7FFFFFFF;
    pthread_mutex_unlock(v17);
  }
  return i;
}

void sub_22414130C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::copy_range(turi::unity_sarray *this, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (int *)global_logger();
  if (v5[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v5)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "copy_range", 2928, 1);
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9)
    {
      if (*((unsigned char *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(v9[2] - 24) + 16));
        unint64_t v10 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (a3)
  {
    (*(void (**)(turi::unity_sarray *))(*(void *)this + 96))(this);
    operator new();
  }
  turi::unity_sarray::copy_range(unsigned long,unsigned long,unsigned long)::$_0::operator()();
}

void sub_22414172C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::locale a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a4;
  uint64_t v16 = a3;
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    int v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_range", 603, 1);
    unint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 248)) {
    BOOL v12 = *(unsigned char *)(a1 + 249) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  }
  if (*(unsigned char *)(a2 + 248))
  {
    if (*(unsigned char *)(a2 + 249)) {
      turi::sarray<turi::flexible_type>::get_reader(a1);
    }
  }
  turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()();
}

void sub_224141A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void turi::unity_sarray::builtin_rolling_apply()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "builtin_rolling_apply", 2991, 1);
    uint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      unint64_t v5 = std::locale::use_facet(v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  operator new();
}

void sub_224141D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20)
{
}

void turi::unity_sarray::show(uint64_t a1, uint64_t a2, const turi::flexible_type *a3, const turi::flexible_type *a4, const turi::flexible_type *a5)
{
  std::allocate_shared[abi:ne180100]<turi::unity_sarray,std::allocator<turi::unity_sarray>,turi::unity_sarray&,void>(a1, &v9);
  turi::gl_sarray::gl_sarray(v11, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  turi::gl_sarray::show((turi::gl_sarray *)v11, a2, a3, a4, a5);
}

void sub_224141E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::plot(turi::unity_sarray *this, const turi::flexible_type *a2, const turi::flexible_type *a3, const turi::flexible_type *a4)
{
  std::allocate_shared[abi:ne180100]<turi::unity_sarray,std::allocator<turi::unity_sarray>,turi::unity_sarray&,void>((uint64_t)this, &v7);
  turi::gl_sarray::gl_sarray(v9, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  turi::gl_sarray::plot((turi::gl_sarray *)v9, a2, a3, a4);
}

void sub_224141F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::builtin_cumulative_aggregate(uint64_t a1@<X0>, std::string::size_type a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "builtin_cumulative_aggregate", 3025, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v17);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  std::allocate_shared[abi:ne180100]<turi::unity_sarray,std::allocator<turi::unity_sarray>,turi::unity_sarray&,void>(a1, &v15);
  turi::gl_sarray::gl_sarray(&v17, &v15);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  turi::gl_sarray::builtin_cumulative_aggregate((turi::gl_sarray *)&v17, a2, (turi::gl_sarray *)v13);
  turi::gl_sarray::get_proxy((uint64_t)v13, &v14);
  *a3 = v14;
  long long v14 = 0uLL;
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v13);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v17);
}

void sub_22414211C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
}

void sub_224142150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  JUMPOUT(0x224142148);
}

void turi::unity_sarray::_head(turi::unity_sarray *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 120))(&v1);
  (*(void (**)(void))(*(void *)v1 + 544))();
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_224142200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::_tail(turi::unity_sarray *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 360))(&v1);
  (*(void (**)(void))(*(void *)v1 + 544))();
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_2241422BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_sarray::to_vector(turi::unity_sarray *this)
{
  (*(void (**)(turi::unity_sarray *))(*(void *)this + 376))(this);
  uint64_t v2 = (*(uint64_t (**)(turi::unity_sarray *))(*(void *)this + 96))(this);
  uint64_t v3 = *(uint64_t (**)(turi::unity_sarray *, uint64_t))(*(void *)this + 384);
  return v3(this, v2);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node(turi::flexible_type const&,turi::flex_type_enum,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"val.get_type() == type || val.get_type() == flex_type_enum::UNDEFINED", 69);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 82, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node(turi::flexible_type const&,turi::flex_type_enum,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224142498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type const&,0>(void *a1, char *a2, uint64_t a3)
{
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  result[3] = 0;
  unint64_t v5 = (atomic_ullong *volatile *)(result + 3);
  *((_DWORD *)result + 8) = 0;
  *((unsigned char *)result + 36) = 0;
  if (result + 3 != (void *)a3)
  {
    uint64_t v6 = *(atomic_ullong **)a3;
    *(void *)((char *)result + 29) = *(void *)(a3 + 5);
    atomic_ullong *volatile *v5 = v6;
    LODWORD(v6) = *(unsigned __int8 *)(a3 + 12);
    *((unsigned char *)result + 36) = (_BYTE)v6;
    BOOL v7 = v6 > 9;
    int v8 = (1 << (char)v6) & 0x33C;
    if (!v7 && v8 != 0) {
      atomic_fetch_add(*v5, 1uLL);
    }
  }
  return result;
}

void turi::any::any<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>()
{
}

void sub_22414268C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void std::vector<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type(v4 - 32);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          BOOL v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void *std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~function(void *a1)
{
  atomic_ullong *volatile v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::pair<BOOL,turi::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 8);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          atomic_ullong *volatile v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(void **)(a1 + 8);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        if (v7)
        {
          uint64_t v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        if (v7)
        {
          uint64_t v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 8);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          atomic_ullong *volatile v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(void **)(a1 + 8);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          BOOL v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  return a1;
}

void turi::any::any<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>()
{
}

void sub_224142C5C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            uint64_t v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          BOOL v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::vector<turi::flexible_type> &,0>(void *a1, char *a2)
{
  atomic_ullong *volatile v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 4;
  operator new();
}

void sub_2241432B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      uint64_t v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      unint64_t v18 = (void *)v17[1];
      if (v18)
      {
        void v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      uint64_t v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      uint64_t v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      uint64_t v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *BOOL v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void turi::any::any<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>()
{
}

void sub_2241435A0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  atomic_ullong *volatile v2 = (void *)std::ostream::operator<<();
  atomic_ullong *volatile v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong *volatile v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2241436C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  unint64_t v9 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
  double v8 = (double)(unint64_t)((a2 - a1) >> 4) / (double)v9;
  v7[0] = &v11;
  v7[1] = (uint64_t *)&v8;
  std::locale v7[2] = (uint64_t *)&v9;
  v7[3] = &v10;
  void v7[4] = a3;
  return turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(0, v9, v7);
}

turi::thread_pool *turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  char v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    _OWORD v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<turi::flexible_type const*> const&)::{lambda(void)#1}>(std::__wrap_iter<turi::flexible_type const*>)::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      uint64_t result = (turi::thread_pool *)turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_2241439C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  void v11[4] = *MEMORY[0x263EF8340];
  double v3 = *(double *)a1[1];
  uint64_t v4 = **a1;
  if (*a1[2] - 1 == a2) {
    uint64_t v5 = *a1[3];
  }
  else {
    uint64_t v5 = v4 + 16 * (uint64_t)(v3 * (double)(a2 + 1));
  }
  (*(void (**)(void *__return_ptr))(*a1[4] + 32))(v8);
  for (uint64_t i = v4 + 16 * (uint64_t)(v3 * (double)a2); i != v5; i += 16)
  {
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, i);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v10);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v8);
}

void sub_224143B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<turi::flexible_type const*> const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246D40F4 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246D40F4 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<turi::flexible_type const*> const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    atomic_ullong *volatile v2 = result;
    do
      uint64_t result = (uint64_t ***)turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,std::string &,void>(uint64_t a1, uint64_t a2)
{
  double v3 = operator new(0x130uLL);
  std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::sarray<turi::flexible_type>>,0>(v3, a2);
}

void sub_224143C90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::sarray<turi::flexible_type>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D759AA8;
  std::allocator<turi::sarray<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray<turi::flexible_type>,std::string &>((uint64_t)&v2, (uint64_t)(a1 + 3), a2);
}

void sub_224143D00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sarray<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray<turi::flexible_type>,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  turi::sarray<turi::flexible_type>::sarray(a2, (uint64_t)&__p);
}

void sub_224143D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray<turi::flexible_type>::sarray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D759AF8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  int v4 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  *(_WORD *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v5 = *(std::string *)a2;
  }
  turi::sarray<turi::flexible_type>::open_for_read(a1, &v5);
}

void sub_224143EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  a17 = v17 + 256;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  turi::mutex::~mutex(v19);
  if (*(char *)(v17 + 175) < 0) {
    operator delete(*v20);
  }
  turi::index_file_information::~index_file_information(v18);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,std::string,void>(uint64_t a1, uint64_t a2)
{
  double v3 = operator new(0x130uLL);
  std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<turi::sarray<turi::flexible_type>>,0>(v3, a2);
}

void sub_224143F60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<turi::sarray<turi::flexible_type>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D759AA8;
  std::allocator<turi::sarray<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray<turi::flexible_type>,std::string>((uint64_t)&v2, (uint64_t)(a1 + 3), a2);
}

void sub_224143FD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sarray<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray<turi::flexible_type>,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  turi::sarray<turi::flexible_type>::sarray(a2, (uint64_t)__p);
}

void sub_22414403C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_2241440C0(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = &unk_26D76CB20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76CB20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(void *a1, uint64_t a2, turi::sframe_rows **a3)
{
  uint64_t v4 = *a3;
  if (!*((unsigned char *)*a3 + 24))
  {
    turi::sframe_rows::ensure_unique(*a3);
    if (!*((unsigned char *)v4 + 24)) {
      turi::sframe_rows::ensure_unique(v4);
    }
  }
  if (*(void *)v4 == *((void *)v4 + 1)) {
    return 0;
  }
  uint64_t v5 = **(void ***)v4;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(**(void **)v4 + 8) - *v5;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (v6 >> 4) - 1;
  do
  {
    uint64_t v9 = *(void *)(a1[1] + 24);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, ***(void ***)v4 + v7);
    uint64_t v10 = (uint64_t *)a1[2];
    uint64_t v11 = *v10 + 1;
    *uint64_t v10 = v11;
    uint64_t v12 = a1[3];
    BOOL result = v11 == v12;
    BOOL v14 = v11 == v12 || v8-- == 0;
    v7 += 16;
  }
  while (!v14);
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76CBA0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76CBA0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

unsigned char *std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &unk_26D76CBA0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 8), v2);
  v3[40] = *(unsigned char *)(a1 + 40);
  return v3;
}

void sub_22414445C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76CBA0;
  uint64_t result = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

void *std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t ****a2@<X1>, uint64_t a3@<X8>)
{
  v24[9] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v5 = a2[1];
  uint64_t v6 = ****a2;
  if (*(unsigned char *)(a1 + 40) && *(unsigned char *)(v6 + 16 * (void)v5 + 12) == 7)
  {
    *(void *)(a3 + 5) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 12) = 7;
  }
  else
  {
    uint64_t v7 = v6 + 16 * (void)v5;
    memset(v24, 0, 13);
    if (v24 == (atomic_ullong **)v7)
    {
      int v12 = 0;
      int v23 = 0;
      uint64_t v13 = *(atomic_ullong **)v7;
      *(void *)&void v21[5] = *(void *)(v7 + 5);
      *(void *)unsigned int v21 = v13;
      v21[12] = 0;
    }
    else
    {
      uint64_t v8 = *(atomic_ullong **)v7;
      *(atomic_ullong **)((char *)v24 + 5) = *(atomic_ullong **)(v7 + 5);
      v24[0] = v8;
      BYTE4(v24[1]) = *(unsigned char *)(v7 + 12);
      unsigned int v9 = BYTE4(v24[1]);
      if (BYTE4(v24[1]) <= 9u && ((1 << SBYTE4(v24[1])) & 0x33C) != 0)
      {
        atomic_fetch_add(v24[0], 1uLL);
        unsigned int v9 = BYTE4(v24[1]);
      }
      int v23 = 0;
      *(atomic_ullong **)&void v21[5] = *(atomic_ullong **)((char *)v24 + 5);
      *(atomic_ullong **)unsigned int v21 = v24[0];
      v21[12] = v9;
      if (v9 > 9 || ((1 << v9) & 0x33C) == 0)
      {
        int v12 = 0;
      }
      else
      {
        atomic_fetch_add(*(atomic_ullong *volatile *)v21, 1uLL);
        int v12 = v23;
      }
    }
    int v20 = v12 ^ (v12 >> 31);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    unint64_t v18 = &v15;
    char v19 = 0;
    uint64_t v15 = (char *)operator new(0x50uLL);
    uint64_t v16 = (uint64_t)v15;
    uint64_t v17 = v15 + 80;
    uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>((uint64_t)&v17, (uint64_t)&v20, (uint64_t)v22, (uint64_t)v15);
    uint64_t v14 = *(void *)(a1 + 32);
    if (!v14) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(unsigned int *__return_ptr))(*(void *)v14 + 48))(v22);
    turi::variant_converter<turi::flexible_type,void>::get((int *)v22, a3);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v22);
    unint64_t v18 = &v15;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v20);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v23);
  }
}

void sub_224144738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, unsigned int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int a26)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a26);
  a13 = (void **)&a10;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a16);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v26 - 136));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v10 = (std::string *)(a4 + v7 + 8);
      uint64_t v8 = a2 + v7 + 8;
      boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*(unsigned int *)(a2 + v7), *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31), &v10, v8);
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31);
      v7 += 80;
    }
    while (v8 + 72 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2241448F0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 80;
    do
    {
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v4 + v2));
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76CC20;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D76CC20;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

_WORD *std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &unk_26D76CC20;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v3 + 4), v2);
  v3[20] = *(_WORD *)(a1 + 40);
  return v3;
}

void sub_224144A24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76CC20;
  uint64_t result = std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  return result;
}

void *std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 33))
  {
    int v5 = *(unsigned __int8 *)(****(void ****)a2 + 16 * *(void *)(a2 + 8) + 12);
    if (v5 == 7)
    {
      *(void *)(a3 + 5) = 0;
      *(void *)a3 = 0;
LABEL_10:
      a3[12] = v5;
      return;
    }
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v6 + 48))(v113);
  LOBYTE(v5) = v113[12];
  if (v113[12] == 7 || (int v8 = *(unsigned __int8 *)(a1 + 32), v113[12] == v8))
  {
    *(void *)(a3 + 5) = *(void *)&v113[5];
    *(void *)a3 = *(void *)v113;
    goto LABEL_10;
  }
  uint64_t v9 = 0;
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  a3[12] = v8;
  switch(v8)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      uint64_t v9 = 0x1900000000000000;
      *(void *)a3 = 0x1900000000000000;
      *((_DWORD *)a3 + 2) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      break;
  }
  if (v113 != a3)
  {
    switch(v113[12])
    {
      case 0:
        switch(a3[12])
        {
          case 0:
            uint64_t v10 = *(void *)v113;
            goto LABEL_49;
          case 1:
            double v39 = (double)*(uint64_t *)v113;
            goto LABEL_178;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v35 = *(void *)a3;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v101);
            std::ostream::operator<<();
            std::stringbuf::str();
            uint64_t v36 = v35 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v101);
            if (*(char *)(v35 + 31) < 0) {
              goto LABEL_131;
            }
            goto LABEL_132;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 6:
            *(void *)a3 = *(void *)v113 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            *((_DWORD *)a3 + 2) = 0;
            goto LABEL_229;
          case 7:
            goto LABEL_228;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          default:
            goto LABEL_318;
        }
      case 1:
        switch(a3[12])
        {
          case 0:
            uint64_t v10 = (uint64_t)*(double *)v113;
            goto LABEL_49;
          case 1:
            double v39 = *(double *)v113;
            goto LABEL_178;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v40 = *(void *)a3;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v101);
            std::ostream::operator<<();
            std::stringbuf::str();
            uint64_t v36 = v40 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v101);
            if (*(char *)(v40 + 31) < 0) {
LABEL_131:
            }
              operator delete(*(void **)v36);
LABEL_132:
            long long v37 = v111;
            uint64_t v38 = v112;
            goto LABEL_281;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 6:
            int v41 = (int)((*(double *)v113 - (double)(uint64_t)floor(*(double *)v113)) * 1000000.0);
            if (v41 >= 999999) {
              int v41 = 999999;
            }
            if (v41 >= 0xF4240) {
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            }
            *(void *)a3 = vcvtmd_s64_f64(*(double *)v113) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            *((_DWORD *)a3 + 2) = v41;
            goto LABEL_229;
          case 7:
            goto LABEL_228;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          default:
            goto LABEL_318;
        }
      case 2:
        switch(a3[12])
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_228;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v11 = *(void *)a3;
            if (*(char *)(*(void *)v113 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v101, *(const std::string::value_type **)(*(void *)v113 + 8), *(void *)(*(void *)v113 + 16));
            }
            else
            {
              long long v14 = *(_OWORD *)(*(void *)v113 + 8);
              *(void *)&long long v102 = *(void *)(*(void *)v113 + 24);
              long long v101 = v14;
            }
            goto LABEL_278;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          default:
            goto LABEL_318;
        }
      case 3:
        uint64_t v15 = (char **)(*(void *)v113 + 8);
        switch(a3[12])
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_228;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v11 = *(void *)a3;
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v111, (void *)(*(void *)v113 + 8));
            goto LABEL_278;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            if (*(void *)a3 == *(void *)v113) {
              goto LABEL_229;
            }
            uint64_t v17 = (char *)(*(void *)a3 + 8);
            int v23 = (uint64_t *)(*(void *)v113 + 16);
            break;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(*(void *)a3 + 8), *(void **)(*(void *)v113 + 8), *(void **)(*(void *)v113 + 16), (uint64_t)(*(void *)(*(void *)v113 + 16) - *(void *)(*(void *)v113 + 8)) >> 3);
            goto LABEL_229;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v32 = *(void *)a3;
            long long v111 = 0uLL;
            uint64_t v112 = 0;
            uint64_t v108 = 0;
            unint64_t v109 = 0;
            uint64_t v110 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>(*(void *)v113 + 8, &v105);
            turi::flexible_type_impl::ndarray<double>::ndarray(&v101, &v105, (uint64_t)&v111, (uint64_t)&v108, 0);
            if (v106) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v106);
            }
            if (v108)
            {
              unint64_t v109 = v108;
              operator delete(v108);
            }
            if ((void)v111)
            {
              *((void *)&v111 + 1) = v111;
              operator delete((void *)v111);
            }
            goto LABEL_167;
          default:
            goto LABEL_318;
        }
LABEL_84:
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v17, *v15, *v23, (*v23 - (uint64_t)*v15) >> 3);
        break;
      case 4:
        switch(a3[12])
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_228;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v11 = *(void *)a3;
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v111, (uint64_t *)(*(void *)v113 + 8));
            goto LABEL_278;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)&v101, (void *)(*(void *)a3 + 8), (void *)(*(void *)v113 + 8));
            goto LABEL_229;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            if (*(void *)a3 != *(void *)v113) {
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(*(void *)a3 + 8, *(uint64_t **)(*(void *)v113 + 8), *(uint64_t **)(*(void *)v113 + 16), (uint64_t)(*(void *)(*(void *)v113 + 16) - *(void *)(*(void *)v113 + 8)) >> 4);
            }
            goto LABEL_229;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v24 = *(void *)a3;
            uint64_t v112 = 0;
            long long v111 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v111, *(uint64_t **)(*(void *)v113 + 8), *(uint64_t **)(*(void *)v113 + 16), (uint64_t)(*(void *)(*(void *)v113 + 16) - *(void *)(*(void *)v113 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v111, &v101);
            long long v25 = v101;
            long long v101 = 0uLL;
            uint64_t v26 = *(std::__shared_weak_count **)(v24 + 16);
            *(_OWORD *)(v24 + 8) = v25;
            if (v26) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
            uint64_t v27 = *(void **)(v24 + 24);
            if (v27)
            {
              *(void *)(v24 + 32) = v27;
              operator delete(v27);
              *(void *)(v24 + 24) = 0;
              *(void *)(v24 + 32) = 0;
              *(void *)(v24 + 40) = 0;
            }
            char v28 = *(void **)(v24 + 48);
            *(_OWORD *)(v24 + 24) = v102;
            *(void *)(v24 + 40) = *(void *)v103;
            long long v102 = 0uLL;
            *(void *)unint64_t v103 = 0;
            if (v28)
            {
              *(void *)(v24 + 56) = v28;
              operator delete(v28);
              *(void *)(v24 + 48) = 0;
              *(void *)(v24 + 56) = 0;
              *(void *)(v24 + 64) = 0;
            }
            *(_OWORD *)(v24 + 48) = *(_OWORD *)&v103[8];
            *(void *)(v24 + 64) = *(void *)&v103[24];
            memset(&v103[8], 0, 24);
            *(void *)(v24 + 72) = v104;
            turi::flexible_type_impl::ndarray<double>::~ndarray(&v101);
            uint64_t v108 = (void **)&v111;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v108);
            goto LABEL_229;
          default:
            goto LABEL_318;
        }
      case 5:
        switch(a3[12])
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_228;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v11 = *(void *)a3;
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v111, (void *)(*(void *)v113 + 8));
            goto LABEL_278;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            if (*(void *)a3 != *(void *)v113) {
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(*(void *)a3 + 8), *(uint64_t **)(*(void *)v113 + 8), *(uint64_t **)(*(void *)v113 + 16), (uint64_t)(*(void *)(*(void *)v113 + 16) - *(void *)(*(void *)v113 + 8)) >> 5);
            }
            goto LABEL_229;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          default:
            goto LABEL_318;
        }
      case 6:
        switch(a3[12])
        {
          case 0:
            uint64_t v10 = (uint64_t)(*(void *)v113 << 8) >> 8;
            goto LABEL_49;
          case 1:
            double v39 = (double)*(int *)&v113[8] / 1000000.0 + (double)((uint64_t)(*(void *)v113 << 8) >> 8);
LABEL_178:
            *(double *)a3 = v39;
            goto LABEL_229;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v11 = *(void *)a3;
            *(void *)&long long v111 = *(void *)v113;
            DWORD2(v111) = *(_DWORD *)&v113[8];
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v111, (std::string *)&v101);
            goto LABEL_278;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 6:
            int v51 = *(_DWORD *)&v113[8];
            *(void *)a3 = *(void *)v113;
            *((_DWORD *)a3 + 2) = v51;
            goto LABEL_229;
          case 7:
            goto LABEL_228;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          default:
            goto LABEL_318;
        }
      case 7:
        switch(a3[12])
        {
          case 0:
          case 6:
            goto LABEL_228;
          case 1:
            uint64_t v10 = 0x7FF8000000000000;
LABEL_49:
            *(void *)a3 = v10;
            goto LABEL_229;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v30 = *(void *)a3;
            uint64_t v31 = *(void *)a3 + 8;
            if (*(char *)(v30 + 31) < 0) {
              operator delete(*(void **)v31);
            }
            *(void *)uint64_t v31 = 0;
            *(void *)(v31 + 8) = 0;
            *(void *)(v31 + 16) = 0;
            goto LABEL_229;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 7:
            goto LABEL_229;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          default:
            goto LABEL_318;
        }
      case 8:
        uint64_t v16 = (uint64_t *)(*(void *)v113 + 8);
        switch(a3[12])
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_228;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v11 = *(void *)a3;
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_278;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v33 = *(void **)a3;
            turi::flexible_type_impl::get_vec_visitor::operator()(v16, (double **)&v101, v7);
            uint64_t v34 = (void *)v33[1];
            if (v34)
            {
              std::locale v33[2] = v34;
              operator delete(v34);
              v33[1] = 0;
              std::locale v33[2] = 0;
              v33[3] = 0;
            }
            *(_OWORD *)(v33 + 1) = v101;
            v33[3] = v102;
            goto LABEL_229;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v32 = *(void *)a3;
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v16, &v101, v7);
LABEL_167:
            long long v47 = v101;
            long long v101 = 0uLL;
            long long v48 = *(std::__shared_weak_count **)(v32 + 16);
            *(_OWORD *)(v32 + 8) = v47;
            if (v48) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v48);
            }
            long long v49 = *(void **)(v32 + 24);
            if (v49)
            {
              *(void *)(v32 + 32) = v49;
              operator delete(v49);
              *(void *)(v32 + 24) = 0;
              *(void *)(v32 + 32) = 0;
              *(void *)(v32 + 40) = 0;
            }
            uint64_t v50 = *(void **)(v32 + 48);
            *(_OWORD *)(v32 + 24) = v102;
            *(void *)(v32 + 40) = *(void *)v103;
            long long v102 = 0uLL;
            *(void *)unint64_t v103 = 0;
            if (v50)
            {
              *(void *)(v32 + 56) = v50;
              operator delete(v50);
              *(void *)(v32 + 48) = 0;
              *(void *)(v32 + 56) = 0;
              *(void *)(v32 + 64) = 0;
            }
            *(_OWORD *)(v32 + 48) = *(_OWORD *)&v103[8];
            *(void *)(v32 + 64) = *(void *)&v103[24];
            memset(&v103[8], 0, 24);
            *(void *)(v32 + 72) = v104;
            goto LABEL_313;
          default:
            goto LABEL_318;
        }
      case 9:
        uint64_t v12 = *(void *)v113;
        uint64_t v13 = *(void *)v113 + 8;
        switch(a3[12])
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_228;
          case 2:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v11 = *(void *)a3;
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v111, (void *)(*(void *)v113 + 8));
LABEL_278:
            uint64_t v36 = v11 + 8;
            if (*(char *)(v11 + 31) < 0) {
              operator delete(*(void **)v36);
            }
            long long v37 = v101;
            uint64_t v38 = v102;
LABEL_281:
            *(void *)(v36 + 16) = v38;
            *(_OWORD *)uint64_t v36 = v37;
            goto LABEL_229;
          case 3:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v17 = (char *)(*(void *)a3 + 8);
            uint64_t v18 = *(void *)(*(void *)v113 + 72);
            if (v18) {
              goto LABEL_261;
            }
            int v20 = *(uint64_t **)(*(void *)v113 + 24);
            char v19 = *(uint64_t **)(*(void *)v113 + 32);
            unsigned int v21 = *(void **)(*(void *)v113 + 8);
            if (v19 != v20 && v21)
            {
              uint64_t v18 = 1;
              do
              {
                uint64_t v22 = *v20++;
                v18 *= v22;
              }
              while (v20 != v19);
            }
            if (v18 == (uint64_t)(v21[1] - *v21) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index((void *)(*(void *)v113 + 8)) == (uint64_t)(*(void *)(*(void *)v13 + 8) - **(void **)v13) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full((void *)(v12 + 8))) {
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              }
              uint64_t v15 = *(char ***)v13;
              if (v17 != (char *)v15)
              {
                int v23 = (uint64_t *)(v15 + 1);
                goto LABEL_84;
              }
            }
            else
            {
LABEL_261:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid((void *)(v12 + 8))) {
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              }
              if (turi::flexible_type_impl::ndarray<double>::is_full((void *)(v12 + 8)))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(&v101, v12 + 8);
              }
              else
              {
                long long v111 = 0uLL;
                uint64_t v112 = 0;
                uint64_t v108 = 0;
                unint64_t v109 = 0;
                uint64_t v110 = 0;
                uint64_t v105 = 0;
                unint64_t v106 = 0;
                uint64_t v107 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(&v101, (uint64_t)&v111, (uint64_t)&v108, (uint64_t)&v105, 0);
                if (v105)
                {
                  unint64_t v106 = v105;
                  operator delete(v105);
                }
                if (v108)
                {
                  unint64_t v109 = v108;
                  operator delete(v108);
                }
                if ((void)v111)
                {
                  *((void *)&v111 + 1) = v111;
                  operator delete((void *)v111);
                }
                uint64_t v104 = 0;
                if (&v101 != (long long *)(v12 + 8)) {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v102, *(char **)(v12 + 24), *(void *)(v12 + 32), (uint64_t)(*(void *)(v12 + 32) - *(void *)(v12 + 24)) >> 3);
                }
                int v65 = *(uint64_t **)(v12 + 24);
                int v64 = *(uint64_t **)(v12 + 32);
                if (v64 == v65 || !*(void *)v13)
                {
                  unint64_t v66 = 0;
                }
                else
                {
                  unint64_t v66 = 1;
                  do
                  {
                    uint64_t v67 = *v65++;
                    v66 *= v67;
                  }
                  while (v65 != v64);
                }
                std::vector<double>::resize(v101, v66);
                std::vector<unsigned long>::resize((uint64_t)&v103[8], (uint64_t)(*(void *)(v12 + 32) - *(void *)(v12 + 24)) >> 3);
                if (*((void *)&v102 + 1) != (void)v102 && *(void *)(v101 + 8) != *(void *)v101)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v111, (uint64_t)(*(void *)(v12 + 56) - *(void *)(v12 + 48)) >> 3);
                  uint64_t v68 = *(void *)(v12 + 48);
                  uint64_t v69 = *(void *)(v12 + 56);
                  long long v70 = (unint64_t *)v111;
                  uint64_t v71 = v69 - v68;
                  if (v69 != v68)
                  {
                    uint64_t v72 = 0;
                    unint64_t v73 = v71 >> 3;
                    if (v73 <= 1) {
                      unint64_t v73 = 1;
                    }
                    long long v74 = (void *)(v111 + 8);
                    do
                    {
                      *(v74 - 1) = *(void *)(v68 + 8 * v72);
                      void *v74 = v72++;
                      v74 += 2;
                    }
                    while (v73 != v72);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v111 + 1), *((unint64_t **)&v111 + 1), (uint64_t)v70, v70);
                  uint64_t v75 = v111;
                  uint64_t v76 = *(void *)&v103[8];
                  *(void *)(*(void *)&v103[8] + 8 * *(void *)(v111 + 8)) = 1;
                  uint64_t v77 = *(void *)(v12 + 56) - *(void *)(v12 + 48);
                  if ((unint64_t)v77 >= 9)
                  {
                    unint64_t v78 = v77 >> 3;
                    uint64_t v79 = v102;
                    if (v78 <= 2) {
                      unint64_t v78 = 2;
                    }
                    unsigned int v80 = (uint64_t *)(v75 + 24);
                    unint64_t v81 = v78 - 1;
                    do
                    {
                      uint64_t v82 = *(void *)(v79 + 8 * *(v80 - 2)) * *(void *)(v76 + 8 * *(v80 - 2));
                      uint64_t v83 = *v80;
                      v80 += 2;
                      *(void *)(v76 + 8 * v83) = v82;
                      --v81;
                    }
                    while (v81);
                  }
                  unint64_t v84 = (uint64_t)(*(void *)(v12 + 32) - *(void *)(v12 + 24)) >> 3;
                  uint64_t v105 = 0;
                  std::vector<unsigned long>::vector(&v108, v84, &v105);
                  do
                  {
                    unint64_t v85 = v108;
                    if (v109 == v108)
                    {
                      uint64_t v94 = 0;
                      uint64_t v95 = *(void *)(**(void **)(v12 + 8) + 8 * *(void *)(v12 + 72));
                      uint64_t v96 = (void *)v101;
                    }
                    else
                    {
                      uint64_t v86 = 0;
                      unint64_t v87 = v109 - v108;
                      atomic_ullong v88 = *(uint64_t **)(v12 + 48);
                      if (v87 <= 1) {
                        unint64_t v87 = 1;
                      }
                      int v89 = v108;
                      unint64_t v90 = v87;
                      do
                      {
                        uint64_t v92 = (uint64_t)*v89++;
                        uint64_t v91 = v92;
                        uint64_t v93 = *v88++;
                        v86 += v93 * v91;
                        --v90;
                      }
                      while (v90);
                      uint64_t v94 = 0;
                      uint64_t v95 = *(void *)(**(void **)(v12 + 8) + 8 * (*(void *)(v12 + 72) + v86));
                      uint64_t v96 = (void *)v101;
                      unint64_t v97 = *(uint64_t **)&v103[8];
                      do
                      {
                        uint64_t v99 = (uint64_t)*v85++;
                        uint64_t v98 = v99;
                        uint64_t v100 = *v97++;
                        v94 += v100 * v98;
                        --v87;
                      }
                      while (v87);
                    }
                    *(void *)(*v96 + 8 * v94) = v95;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(v12 + 8, (uint64_t *)&v108));
                  if (v108)
                  {
                    unint64_t v109 = v108;
                    operator delete(v108);
                  }
                  if ((void)v111)
                  {
                    *((void *)&v111 + 1) = v111;
                    operator delete((void *)v111);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)&v101);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(&v101)) {
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              }
              if (v17 != (char *)v101) {
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v17, *(char **)v101, *(void *)(v101 + 8), (uint64_t)(*(void *)(v101 + 8) - *(void *)v101) >> 3);
              }
LABEL_313:
              turi::flexible_type_impl::ndarray<double>::~ndarray(&v101);
            }
            break;
          case 4:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_228;
          case 5:
            if (*(void *)v9 != 1) {
              operator new();
            }
LABEL_228:
            turi::flexible_type_fail(0);
            goto LABEL_229;
          case 8:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v42 = *(void *)a3;
            turi::flexible_type_impl::get_img_visitor::operator()(*(void *)v113 + 8, (turi::image_type *)&v101);
            long long v43 = v101;
            long long v101 = 0uLL;
            long long v44 = *(_OWORD *)(v42 + 8);
            *(_OWORD *)(v42 + 8) = v43;
            long long v111 = v44;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v111 + 1);
            long long v45 = v102;
            long long v46 = *(_OWORD *)v103;
            *(_OWORD *)(v42 + 56) = *(_OWORD *)&v103[16];
            *(_OWORD *)(v42 + 40) = v46;
            *(_OWORD *)(v42 + 24) = v45;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v101 + 1);
            goto LABEL_229;
          case 9:
            if (*(void *)v9 != 1) {
              operator new();
            }
            uint64_t v29 = *(void *)a3;
            std::shared_ptr<std::vector<double>>::operator=[abi:ne180100]((void *)(*(void *)a3 + 8), (uint64_t *)(*(void *)v113 + 8));
            if (v29 != v12)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v29 + 24), *(char **)(v12 + 24), *(void *)(v12 + 32), (uint64_t)(*(void *)(v12 + 32) - *(void *)(v12 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v29 + 48), *(char **)(v12 + 48), *(void *)(v12 + 56), (uint64_t)(*(void *)(v12 + 56) - *(void *)(v12 + 48)) >> 3);
            }
            *(void *)(v29 + 72) = *(void *)(v12 + 72);
            goto LABEL_229;
          default:
            goto LABEL_318;
        }
        break;
      default:
LABEL_318:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
LABEL_229:
  switch(v113[12])
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v113, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v52 = *(void **)v113;
        if (*(void *)v113)
        {
          if (*(char *)(*(void *)v113 + 31) < 0) {
            operator delete(*(void **)(*(void *)v113 + 8));
          }
          char v53 = v52;
          uint64_t v54 = 0x1012C404EF22A49;
          goto LABEL_260;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v113, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v61 = *(void **)v113;
        if (*(void *)v113)
        {
          std::string v62 = *(void **)(*(void *)v113 + 8);
          if (v62)
          {
            *(void *)(*(void *)v113 + 16) = v62;
            operator delete(v62);
          }
          char v53 = v61;
          uint64_t v54 = 0x1080C409938AC02;
          goto LABEL_260;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v113, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v55 = *(void **)v113;
        if (*(void *)v113)
        {
          *(void *)&long long v101 = *(void *)v113 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
          goto LABEL_255;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v113, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v55 = *(void **)v113;
        if (*(void *)v113)
        {
          *(void *)&long long v101 = *(void *)v113 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
LABEL_255:
          char v53 = v55;
          uint64_t v54 = 0x1020C405E66F15BLL;
          goto LABEL_260;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v113, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v63 = *(void **)v113;
        if (*(void *)v113)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v113 + 16));
          char v53 = v63;
          unsigned int v60 = -235920773;
          goto LABEL_259;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v113, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v56 = *(void **)v113;
        if (*(void *)v113)
        {
          char v57 = *(void **)(*(void *)v113 + 48);
          if (v57)
          {
            *(void *)(*(void *)v113 + 56) = v57;
            operator delete(v57);
          }
          long long v58 = (void *)v56[3];
          if (v58)
          {
            v56[4] = v58;
            operator delete(v58);
          }
          atomic_ullong v59 = (std::__shared_weak_count *)v56[2];
          if (v59) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          }
          char v53 = v56;
          unsigned int v60 = 2071181815;
LABEL_259:
          uint64_t v54 = v60 | 0x1030C4000000000;
LABEL_260:
          MEMORY[0x22A614FA0](v53, v54);
        }
      }
      break;
    default:
      return;
  }
}

void sub_224146EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *(void **)(v10 - 128);
  if (v12)
  {
    *(void *)(v10 - 120) = v12;
    operator delete(v12);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  switch(*((unsigned char *)v9 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v13 = *v9;
      if (!*v9) {
        goto LABEL_29;
      }
      if (*((char *)v13 + 31) < 0) {
        operator delete((void *)v13[1]);
      }
      long long v14 = v13;
      uint64_t v15 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v18 = *v9;
      if (!*v9) {
        goto LABEL_29;
      }
      char v19 = (void *)v18[1];
      if (v19)
      {
        uint64_t v18[2] = (atomic_ullong)v19;
        operator delete(v19);
      }
      long long v14 = v18;
      uint64_t v15 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v16 = *v9;
      if (!*v9) {
        goto LABEL_29;
      }
      *(void *)(v10 - 96) = v16 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 96));
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v16 = *v9;
      if (!*v9) {
        goto LABEL_29;
      }
      *(void *)(v10 - 96) = v16 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 96));
LABEL_23:
      long long v14 = v16;
      uint64_t v15 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v20 = *v9;
      if (!*v9) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      long long v14 = v20;
      unsigned int v17 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*v9, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      if (!*v9) {
        goto LABEL_29;
      }
      long long v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v9);
      unsigned int v17 = 2071181815;
LABEL_27:
      uint64_t v15 = v17 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v14, v15);
LABEL_29:
      *uint64_t v9 = 0;
LABEL_30:
      *uint64_t v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      *((unsigned char *)v9 + 12) = 0;
      switch(*(unsigned char *)(v10 - 76))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_56;
          }
          uint64_t v21 = *(void *)(v10 - 88);
          if (!v21) {
            goto LABEL_56;
          }
          if (*(char *)(v21 + 31) < 0) {
            operator delete(*(void **)(v21 + 8));
          }
          uint64_t v22 = (void *)v21;
          uint64_t v23 = 0x1012C404EF22A49;
          goto LABEL_55;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_56;
          }
          uint64_t v27 = *(void **)(v10 - 88);
          if (!v27) {
            goto LABEL_56;
          }
          char v28 = (void *)v27[1];
          if (v28)
          {
            v27[2] = v28;
            operator delete(v28);
          }
          uint64_t v22 = v27;
          uint64_t v23 = 0x1080C409938AC02;
          goto LABEL_55;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_56;
          }
          uint64_t v24 = *(void **)(v10 - 88);
          if (!v24) {
            goto LABEL_56;
          }
          *(void *)(v10 - 96) = v24 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 96));
          goto LABEL_50;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_56;
          }
          uint64_t v24 = *(void **)(v10 - 88);
          if (!v24) {
            goto LABEL_56;
          }
          *(void *)(v10 - 96) = v24 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 96));
LABEL_50:
          uint64_t v22 = v24;
          uint64_t v23 = 0x1020C405E66F15BLL;
          goto LABEL_55;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_56;
          }
          uint64_t v29 = *(void *)(v10 - 88);
          if (!v29) {
            goto LABEL_56;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v29 + 16));
          uint64_t v22 = (void *)v29;
          unsigned int v26 = -235920773;
          goto LABEL_54;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v10 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_56;
          }
          long long v25 = *(void **)(v10 - 88);
          if (!v25) {
            goto LABEL_56;
          }
          uint64_t v22 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v25);
          unsigned int v26 = 2071181815;
LABEL_54:
          uint64_t v23 = v26 | 0x1030C4000000000;
LABEL_55:
          MEMORY[0x22A614FA0](v22, v23);
LABEL_56:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_56;
      }
    default:
      goto LABEL_30;
  }
}

void std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
}

__n128 std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D76CCA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D76CCA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t *)(****(void ****)a2 + 16 * *(void *)(a2 + 8));
  if (*((unsigned char *)v4 + 12) == 7)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    if (v4 != (uint64_t *)a3)
    {
      uint64_t v5 = *v4;
      *(void *)(a3 + 5) = *(uint64_t *)((char *)v4 + 5);
      *(void *)a3 = v5;
      LODWORD(v5) = *((unsigned __int8 *)v4 + 12);
      *(unsigned char *)(a3 + 12) = v5;
      switch((int)v5)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_12;
        default:
          return;
      }
    }
    return;
  }
  unint64_t v7 = *(void *)a1;
  unint64_t v8 = 1;
  switch(*((unsigned char *)v4 + 12))
  {
    case 3:
      uint64_t v9 = (void *)(*v4 + 8);
      uint64_t v10 = (void *)(*v4 + 16);
      char v11 = 3;
      goto LABEL_8;
    case 4:
      uint64_t v9 = (void *)(*v4 + 8);
      uint64_t v10 = (void *)(*v4 + 16);
      char v11 = 4;
      goto LABEL_8;
    case 5:
      uint64_t v9 = (void *)(*v4 + 8);
      uint64_t v10 = (void *)(*v4 + 16);
      char v11 = 5;
LABEL_8:
      unint64_t v8 = (uint64_t)(*v10 - *v9) >> v11;
      break;
    case 9:
      atomic_ullong *volatile v18 = *(uint64_t **)(*v4 + 24);
      unsigned int v17 = *(uint64_t **)(*v4 + 32);
      if (v17 == v18)
      {
        unint64_t v8 = 0;
      }
      else
      {
        unint64_t v8 = *(void *)(*v4 + 8);
        if (v8)
        {
          unint64_t v8 = 1;
          do
          {
            uint64_t v19 = *v18++;
            v8 *= v19;
          }
          while (v18 != v17);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (v7 > v8)
  {
    if ((uint64_t *)a3 != &turi::FLEX_UNDEFINED)
    {
      *(void *)(a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(void *)a3 = turi::FLEX_UNDEFINED;
      int v12 = byte_268085B9C;
      *(unsigned char *)(a3 + 12) = byte_268085B9C;
      switch(v12)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
LABEL_12:
          atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
          break;
        default:
          return;
      }
    }
    return;
  }
  int v13 = *(unsigned __int8 *)(a1 + 8);
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  if (v13 == 1)
  {
    *(unsigned char *)(a3 + 12) = 1;
    uint64_t v14 = *(void *)(a1 + 16);
    int v15 = *((unsigned __int8 *)v4 + 12);
    switch(v15)
    {
      case 1:
        if (!v14) {
          goto LABEL_29;
        }
        break;
      case 9:
        uint64_t v20 = *v4;
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v20 + 8));
        atomic_ullong *volatile v16 = *(void **)(v20 + 8);
        v14 += *(void *)(v20 + 72);
        goto LABEL_27;
      case 3:
        atomic_ullong *volatile v16 = (void *)(*v4 + 8);
LABEL_27:
        uint64_t v4 = (uint64_t *)(*v16 + 8 * v14);
LABEL_29:
        turi::flexible_type::flexible_type<double>((uint64_t)&v192, v4);
        if (&v192 != (double *)a3)
        {
          switch(v194)
          {
            case 0:
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                  uint64_t v22 = *(void *)&v192;
                  goto LABEL_195;
                case 1:
                  double v119 = (double)*(uint64_t *)&v192;
                  goto LABEL_328;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v118 = *(atomic_ullong *volatile *)a3;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  atomic_ullong *volatile v97 = v118 + 1;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
                  if (*((char *)v118 + 31) < 0) {
                    goto LABEL_280;
                  }
                  goto LABEL_281;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 6:
                  *(void *)a3 = *(void *)&v192 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                  *(_DWORD *)(a3 + 8) = 0;
                  goto LABEL_379;
                case 7:
                  goto LABEL_378;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                default:
                  goto LABEL_464;
              }
            case 1:
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                  uint64_t v22 = (uint64_t)v192;
                  goto LABEL_195;
                case 1:
                  double v119 = v192;
                  goto LABEL_328;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v120 = *(atomic_ullong *volatile *)a3;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  atomic_ullong *volatile v97 = v120 + 1;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
                  if (*((char *)v120 + 31) < 0) {
LABEL_280:
                  }
                    operator delete((void *)*v97);
LABEL_281:
                  long long v98 = v187;
                  uint64_t v99 = (void *)v188;
                  goto LABEL_282;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 6:
                  int v121 = (int)((v192 - (double)(uint64_t)floor(v192)) * 1000000.0);
                  if (v121 >= 999999) {
                    int v121 = 999999;
                  }
                  if (v121 >= 0xF4240) {
                    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                  }
                  *(void *)a3 = vcvtmd_s64_f64(v192) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                  *(_DWORD *)(a3 + 8) = v121;
                  goto LABEL_379;
                case 7:
                  goto LABEL_378;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                default:
                  goto LABEL_464;
              }
            case 2:
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_378;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v93 = *(atomic_ullong *volatile *)a3;
                  if (*(char *)(*(void *)&v192 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(*(void *)&v192 + 8), *(void *)(*(void *)&v192 + 16));
                  }
                  else
                  {
                    long long v94 = *(_OWORD *)(*(void *)&v192 + 8);
                    v181[0] = *(void **)(*(void *)&v192 + 24);
                    *(_OWORD *)std::string __p = v94;
                  }
                  goto LABEL_422;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                default:
                  goto LABEL_464;
              }
            case 3:
              uint64_t v95 = (char **)(*(void *)&v192 + 8);
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_378;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v90 = *(atomic_ullong *volatile *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v187, (void *)(*(void *)&v192 + 8));
                  goto LABEL_200;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  if (*(void *)a3 == *(void *)&v192) {
                    goto LABEL_379;
                  }
                  uint64_t v100 = (char *)(*(void *)a3 + 8);
                  unint64_t v106 = (uint64_t *)(*(void *)&v192 + 16);
                  break;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(*(void *)a3 + 8), *(void **)(*(void *)&v192 + 8), *(void **)(*(void *)&v192 + 16), (uint64_t)(*(void *)(*(void *)&v192 + 16) - *(void *)(*(void *)&v192 + 8)) >> 3);
                  goto LABEL_379;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v115 = *(atomic_ullong *volatile *)a3;
                  long long v187 = 0uLL;
                  *(void *)&long long v188 = 0;
                  memset(&v191, 0, sizeof(v191));
                  std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>(*(void *)&v192 + 8, &__idx);
                  turi::flexible_type_impl::ndarray<double>::ndarray(__p, &__idx, (uint64_t)&v187, (uint64_t)&v191, 0);
                  if (v185) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v185);
                  }
                  if (v191.__r_.__value_.__r.__words[0])
                  {
                    v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[0];
                    operator delete(v191.__r_.__value_.__l.__data_);
                  }
                  if ((void)v187)
                  {
                    *((void *)&v187 + 1) = v187;
                    operator delete((void *)v187);
                  }
                  goto LABEL_317;
                default:
                  goto LABEL_464;
              }
LABEL_233:
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v100, *v95, *v106, (*v106 - (uint64_t)*v95) >> 3);
              break;
            case 4:
              int v89 = (uint64_t *)(*(void *)&v192 + 8);
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_378;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v90 = *(atomic_ullong *volatile *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v187, v89);
                  goto LABEL_200;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)__p, (void *)(*(void *)a3 + 8), v89);
                  goto LABEL_379;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  if (*(void *)a3 != *(void *)&v192) {
                    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(*(void *)a3 + 8, *(uint64_t **)(*(void *)&v192 + 8), *(uint64_t **)(*(void *)&v192 + 16), (uint64_t)(*(void *)(*(void *)&v192 + 16) - *(void *)(*(void *)&v192 + 8)) >> 4);
                  }
                  goto LABEL_379;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v107 = *(atomic_ullong *volatile *)a3;
                  *(void *)&long long v188 = 0;
                  long long v187 = 0uLL;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v187, *(uint64_t **)(*(void *)&v192 + 8), *(uint64_t **)(*(void *)&v192 + 16), (uint64_t)(*(void *)(*(void *)&v192 + 16) - *(void *)(*(void *)&v192 + 8)) >> 4);
                  turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v187, __p);
                  long long v108 = *(_OWORD *)__p;
                  __p[0] = 0;
                  __p[1] = 0;
                  unint64_t v109 = (std::__shared_weak_count *)v107[2];
                  *(_OWORD *)(v107 + 1) = v108;
                  if (v109) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v109);
                  }
                  uint64_t v110 = (void *)v107[3];
                  if (v110)
                  {
                    v107[4] = (atomic_ullong)v110;
                    operator delete(v110);
                    uint64_t v107[3] = 0;
                    v107[4] = 0;
                    v107[5] = 0;
                  }
                  long long v111 = (void *)v107[6];
                  *(_OWORD *)(v107 + 3) = *(_OWORD *)v181;
                  v107[5] = *(void *)v182;
                  v181[0] = 0;
                  v181[1] = 0;
                  *(void *)v182 = 0;
                  if (v111)
                  {
                    v107[7] = (atomic_ullong)v111;
                    operator delete(v111);
                    v107[6] = 0;
                    v107[7] = 0;
                    v107[8] = 0;
                  }
                  *((_OWORD *)v107 + 3) = *(_OWORD *)&v182[8];
                  v107[8] = *(void *)&v182[24];
                  memset(&v182[8], 0, 24);
                  v107[9] = v183;
                  turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
                  v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
                  goto LABEL_379;
                default:
                  goto LABEL_464;
              }
            case 5:
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_378;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v93 = *(atomic_ullong *volatile *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v187, (void *)(*(void *)&v192 + 8));
                  goto LABEL_422;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  if (*(void *)a3 != *(void *)&v192) {
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(*(void *)a3 + 8), *(uint64_t **)(*(void *)&v192 + 8), *(uint64_t **)(*(void *)&v192 + 16), (uint64_t)(*(void *)(*(void *)&v192 + 16) - *(void *)(*(void *)&v192 + 8)) >> 5);
                  }
                  goto LABEL_379;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                default:
                  goto LABEL_464;
              }
            case 6:
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                  uint64_t v22 = (uint64_t)(*(void *)&v192 << 8) >> 8;
                  goto LABEL_195;
                case 1:
                  double v119 = (double)v193 / 1000000.0 + (double)((uint64_t)(*(void *)&v192 << 8) >> 8);
LABEL_328:
                  *(double *)a3 = v119;
                  goto LABEL_379;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v93 = *(atomic_ullong *volatile *)a3;
                  *(double *)&long long v187 = v192;
                  DWORD2(v187) = v193;
                  turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v187, (std::string *)__p);
LABEL_422:
                  atomic_ullong *volatile v97 = v93 + 1;
                  if (*((char *)v93 + 31) < 0) {
                    goto LABEL_201;
                  }
                  goto LABEL_202;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 6:
                  int v131 = v193;
                  *(double *)a3 = v192;
                  *(_DWORD *)(a3 + 8) = v131;
                  goto LABEL_379;
                case 7:
                  goto LABEL_378;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                default:
                  goto LABEL_464;
              }
            case 7:
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                case 6:
                  goto LABEL_378;
                case 1:
                  uint64_t v22 = 0x7FF8000000000000;
LABEL_195:
                  *(void *)a3 = v22;
                  goto LABEL_379;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v113 = *(atomic_ullong *volatile *)a3;
                  uint64_t v114 = *(void *)a3 + 8;
                  if (*((char *)v113 + 31) < 0) {
                    operator delete(*(void **)v114);
                  }
                  *(void *)uint64_t v114 = 0;
                  *(void *)(v114 + 8) = 0;
                  *(void *)(v114 + 16) = 0;
                  goto LABEL_379;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 7:
                  goto LABEL_379;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                default:
                  goto LABEL_464;
              }
            case 8:
              uint64_t v96 = (uint64_t *)(*(void *)&v192 + 8);
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_378;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v90 = *(atomic_ullong *volatile *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()();
                  goto LABEL_200;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v116 = *(atomic_ullong *volatile *)a3;
                  turi::flexible_type_impl::get_vec_visitor::operator()(v96, (double **)__p, v21);
                  uint64_t v117 = (void *)v116[1];
                  if (v117)
                  {
                    v116[2] = (atomic_ullong)v117;
                    operator delete(v117);
                    v116[1] = 0;
                    v116[2] = 0;
                    v116[3] = 0;
                  }
                  *(_OWORD *)(v116 + 1) = *(_OWORD *)__p;
                  v116[3] = (atomic_ullong)v181[0];
                  goto LABEL_379;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v115 = *(atomic_ullong *volatile *)a3;
                  turi::flexible_type_impl::get_ndvec_visitor::operator()(v96, __p, v21);
LABEL_317:
                  long long v127 = *(_OWORD *)__p;
                  __p[0] = 0;
                  __p[1] = 0;
                  long long v128 = (std::__shared_weak_count *)v115[2];
                  *(_OWORD *)(v115 + 1) = v127;
                  if (v128) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v128);
                  }
                  std::string::size_type v129 = (void *)v115[3];
                  if (v129)
                  {
                    v115[4] = (atomic_ullong)v129;
                    operator delete(v129);
                    v115[3] = 0;
                    v115[4] = 0;
                    v115[5] = 0;
                  }
                  uint64_t v130 = (void *)v115[6];
                  *(_OWORD *)(v115 + 3) = *(_OWORD *)v181;
                  v115[5] = *(void *)v182;
                  v181[0] = 0;
                  v181[1] = 0;
                  *(void *)v182 = 0;
                  if (v130)
                  {
                    v115[7] = (atomic_ullong)v130;
                    operator delete(v130);
                    v115[6] = 0;
                    v115[7] = 0;
                    v115[8] = 0;
                  }
                  *((_OWORD *)v115 + 3) = *(_OWORD *)&v182[8];
                  v115[8] = *(void *)&v182[24];
                  memset(&v182[8], 0, 24);
                  v115[9] = v183;
                  goto LABEL_455;
                default:
                  goto LABEL_464;
              }
            case 9:
              double v91 = v192;
              uint64_t v92 = (char ***)(*(void *)&v192 + 8);
              switch(*(unsigned char *)(a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_378;
                case 2:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v90 = *(atomic_ullong *volatile *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v187, (void *)(*(void *)&v192 + 8));
LABEL_200:
                  atomic_ullong *volatile v97 = v90 + 1;
                  if (*((char *)v90 + 31) < 0) {
LABEL_201:
                  }
                    operator delete((void *)*v97);
LABEL_202:
                  long long v98 = *(_OWORD *)__p;
                  uint64_t v99 = v181[0];
LABEL_282:
                  v97[2] = (atomic_ullong)v99;
                  *(_OWORD *)atomic_ullong *volatile v97 = v98;
                  goto LABEL_379;
                case 3:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  uint64_t v100 = (char *)(*(void *)a3 + 8);
                  uint64_t v101 = *(void *)(*(void *)&v192 + 72);
                  if (v101) {
                    goto LABEL_405;
                  }
                  unint64_t v103 = *(uint64_t **)(*(void *)&v192 + 24);
                  long long v102 = *(uint64_t **)(*(void *)&v192 + 32);
                  uint64_t v104 = *(void **)(*(void *)&v192 + 8);
                  if (v102 != v103 && v104)
                  {
                    uint64_t v101 = 1;
                    do
                    {
                      uint64_t v105 = *v103++;
                      v101 *= v105;
                    }
                    while (v103 != v102);
                  }
                  if (v101 == (uint64_t)(v104[1] - *v104) >> 3
                    && turi::flexible_type_impl::ndarray<double>::last_index((void *)(*(void *)&v192 + 8)) == ((*v92)[1] - **v92) >> 3)
                  {
                    if (!turi::flexible_type_impl::ndarray<double>::is_full((void *)(*(void *)&v91 + 8))) {
                      turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                    }
                    uint64_t v95 = *v92;
                    if (v100 != (char *)v95)
                    {
                      unint64_t v106 = (uint64_t *)(v95 + 1);
                      goto LABEL_233;
                    }
                  }
                  else
                  {
LABEL_405:
                    if (!turi::flexible_type_impl::ndarray<double>::is_valid((void *)(*(void *)&v91 + 8))) {
                      turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                    }
                    if (turi::flexible_type_impl::ndarray<double>::is_full((void *)(*(void *)&v91 + 8)))
                    {
                      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)&v91 + 8);
                    }
                    else
                    {
                      long long v187 = 0uLL;
                      *(void *)&long long v188 = 0;
                      memset(&v191, 0, sizeof(v191));
                      size_t __idx = 0;
                      BOOL v185 = 0;
                      uint64_t v186 = 0;
                      turi::flexible_type_impl::ndarray<double>::ndarray(__p, (uint64_t)&v187, (uint64_t)&v191, (uint64_t)&__idx, 0);
                      if (__idx)
                      {
                        BOOL v185 = (std::__shared_weak_count *)__idx;
                        operator delete((void *)__idx);
                      }
                      if (v191.__r_.__value_.__r.__words[0])
                      {
                        v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[0];
                        operator delete(v191.__r_.__value_.__l.__data_);
                      }
                      if ((void)v187)
                      {
                        *((void *)&v187 + 1) = v187;
                        operator delete((void *)v187);
                      }
                      atomic_ullong v183 = 0;
                      if (__p != (void **)(*(void *)&v91 + 8)) {
                        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v181, *(char **)(*(void *)&v91 + 24), *(void *)(*(void *)&v91 + 32), (uint64_t)(*(void *)(*(void *)&v91 + 32) - *(void *)(*(void *)&v91 + 24)) >> 3);
                      }
                      std::string v141 = *(uint64_t **)(*(void *)&v91 + 24);
                      std::string v140 = *(uint64_t **)(*(void *)&v91 + 32);
                      if (v140 == v141 || !*v92)
                      {
                        unint64_t v142 = 0;
                      }
                      else
                      {
                        unint64_t v142 = 1;
                        do
                        {
                          uint64_t v143 = *v141++;
                          v142 *= v143;
                        }
                        while (v141 != v140);
                      }
                      std::vector<double>::resize((uint64_t)__p[0], v142);
                      std::vector<unsigned long>::resize((uint64_t)&v182[8], (uint64_t)(*(void *)(*(void *)&v91 + 32) - *(void *)(*(void *)&v91 + 24)) >> 3);
                      if (v181[1] != v181[0] && *((void *)__p[0] + 1) != *(void *)__p[0])
                      {
                        std::vector<std::pair<unsigned long,unsigned long>>::vector(&v187, (uint64_t)(*(void *)(*(void *)&v91 + 56) - *(void *)(*(void *)&v91 + 48)) >> 3);
                        uint64_t v144 = *(void *)(*(void *)&v91 + 48);
                        uint64_t v145 = *(void *)(*(void *)&v91 + 56);
                        std::string v146 = (unint64_t *)v187;
                        uint64_t v147 = v145 - v144;
                        if (v145 != v144)
                        {
                          uint64_t v148 = 0;
                          unint64_t v149 = v147 >> 3;
                          if (v149 <= 1) {
                            unint64_t v149 = 1;
                          }
                          long long v150 = (void *)(v187 + 8);
                          do
                          {
                            *(v150 - 1) = *(void *)(v144 + 8 * v148);
                            *long long v150 = v148++;
                            v150 += 2;
                          }
                          while (v149 != v148);
                        }
                        std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v187 + 1), *((unint64_t **)&v187 + 1), (uint64_t)v146, v146);
                        uint64_t v151 = v187;
                        uint64_t v152 = *(void *)&v182[8];
                        *(void *)(*(void *)&v182[8] + 8 * *(void *)(v187 + 8)) = 1;
                        uint64_t v153 = *(void *)(*(void *)&v91 + 56) - *(void *)(*(void *)&v91 + 48);
                        if ((unint64_t)v153 >= 9)
                        {
                          unint64_t v154 = v153 >> 3;
                          atomic_ullong v155 = v181[0];
                          if (v154 <= 2) {
                            unint64_t v154 = 2;
                          }
                          long long v156 = (uint64_t *)(v151 + 24);
                          unint64_t v157 = v154 - 1;
                          do
                          {
                            uint64_t v158 = v155[*(v156 - 2)] * *(void *)(v152 + 8 * *(v156 - 2));
                            uint64_t v159 = *v156;
                            v156 += 2;
                            *(void *)(v152 + 8 * v159) = v158;
                            --v157;
                          }
                          while (v157);
                        }
                        unint64_t v160 = (uint64_t)(*(void *)(*(void *)&v91 + 32) - *(void *)(*(void *)&v91 + 24)) >> 3;
                        size_t __idx = 0;
                        std::vector<unsigned long>::vector(&v191, v160, &__idx);
                        do
                        {
                          uint64_t v161 = (uint64_t *)v191.__r_.__value_.__r.__words[0];
                          if (v191.__r_.__value_.__l.__size_ == v191.__r_.__value_.__r.__words[0])
                          {
                            uint64_t v170 = 0;
                            uint64_t v171 = *(void *)(**(void **)(*(void *)&v91 + 8)
                                             + 8 * *(void *)(*(void *)&v91 + 72));
                            uint64_t v172 = __p[0];
                          }
                          else
                          {
                            uint64_t v162 = 0;
                            unint64_t v163 = (uint64_t)(v191.__r_.__value_.__l.__size_ - v191.__r_.__value_.__r.__words[0]) >> 3;
                            std::string v164 = *(uint64_t **)(*(void *)&v91 + 48);
                            if (v163 <= 1) {
                              unint64_t v163 = 1;
                            }
                            unint64_t v165 = (uint64_t *)v191.__r_.__value_.__r.__words[0];
                            unint64_t v166 = v163;
                            do
                            {
                              uint64_t v168 = *v165++;
                              uint64_t v167 = v168;
                              uint64_t v169 = *v164++;
                              v162 += v169 * v167;
                              --v166;
                            }
                            while (v166);
                            uint64_t v170 = 0;
                            uint64_t v171 = *(void *)(**(void **)(*(void *)&v91 + 8)
                                             + 8 * (*(void *)(*(void *)&v91 + 72) + v162));
                            uint64_t v172 = __p[0];
                            char v173 = *(uint64_t **)&v182[8];
                            do
                            {
                              uint64_t v175 = *v161++;
                              uint64_t v174 = v175;
                              uint64_t v176 = *v173++;
                              v170 += v176 * v174;
                              --v163;
                            }
                            while (v163);
                          }
                          *(void *)(*v172 + 8 * v170) = v171;
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(void *)&v91 + 8, (uint64_t *)&v191));
                        if (v191.__r_.__value_.__r.__words[0])
                        {
                          v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[0];
                          operator delete(v191.__r_.__value_.__l.__data_);
                        }
                        if ((void)v187)
                        {
                          *((void *)&v187 + 1) = v187;
                          operator delete((void *)v187);
                        }
                      }
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)__p);
                    if (!turi::flexible_type_impl::ndarray<double>::is_full(__p)) {
                      turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                    }
                    if (v100 != __p[0]) {
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v100, *(char **)__p[0], *((void *)__p[0] + 1), (uint64_t)(*((void *)__p[0] + 1) - *(void *)__p[0]) >> 3);
                    }
LABEL_455:
                    turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
                  }
                  break;
                case 4:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  goto LABEL_378;
                case 5:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
LABEL_378:
                  turi::flexible_type_fail(0);
                  goto LABEL_379;
                case 8:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v122 = *(atomic_ullong *volatile *)a3;
                  turi::flexible_type_impl::get_img_visitor::operator()(*(void *)&v192 + 8, (turi::image_type *)__p);
                  long long v123 = *(_OWORD *)__p;
                  __p[0] = 0;
                  __p[1] = 0;
                  long long v124 = *(_OWORD *)(v122 + 1);
                  *(_OWORD *)(v122 + 1) = v123;
                  long long v187 = v124;
                  boost::detail::shared_count::~shared_count((atomic_uint **)&v187 + 1);
                  long long v125 = *(_OWORD *)v181;
                  long long v126 = *(_OWORD *)v182;
                  *(_OWORD *)(v122 + 7) = *(_OWORD *)&v182[16];
                  *(_OWORD *)(v122 + 5) = v126;
                  *(_OWORD *)(v122 + 3) = v125;
                  boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
                  goto LABEL_379;
                case 9:
                  if (**(void **)a3 != 1) {
                    operator new();
                  }
                  atomic_ullong *volatile v112 = *(atomic_ullong *volatile *)a3;
                  std::shared_ptr<std::vector<double>>::operator=[abi:ne180100]((void *)(*(void *)a3 + 8), (uint64_t *)(*(void *)&v192 + 8));
                  if (v112 != *(atomic_ullong *volatile *)&v91)
                  {
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v112 + 24, *(char **)(*(void *)&v91 + 24), *(void *)(*(void *)&v91 + 32), (uint64_t)(*(void *)(*(void *)&v91 + 32) - *(void *)(*(void *)&v91 + 24)) >> 3);
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v112 + 48, *(char **)(*(void *)&v91 + 48), *(void *)(*(void *)&v91 + 56), (uint64_t)(*(void *)(*(void *)&v91 + 56) - *(void *)(*(void *)&v91 + 48)) >> 3);
                  }
                  v112[9] = *(void *)(*(void *)&v91 + 72);
                  goto LABEL_379;
                default:
                  goto LABEL_464;
              }
              break;
            default:
LABEL_464:
              turi::flexible_type_fail(0);
              goto LABEL_466;
          }
        }
LABEL_379:
        switch(v194)
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v192, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v132 = v192;
              if (v192 != 0.0)
              {
                if (*(char *)(*(void *)&v192 + 31) < 0) {
                  operator delete(*(void **)(*(void *)&v192 + 8));
                }
                double v133 = v132;
                uint64_t v134 = 0x1012C404EF22A49;
                goto LABEL_404;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v192, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v137 = v192;
              if (v192 != 0.0)
              {
                atomic_ullong v138 = *(void **)(*(void *)&v192 + 8);
                if (v138)
                {
                  *(void *)(*(void *)&v192 + 16) = v138;
                  operator delete(v138);
                }
                double v133 = v137;
                uint64_t v134 = 0x1080C409938AC02;
                goto LABEL_404;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v192, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v135 = v192;
              if (v192 != 0.0)
              {
                __p[0] = (void *)(*(void *)&v192 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_399;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v192, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v135 = v192;
              if (v192 != 0.0)
              {
                __p[0] = (void *)(*(void *)&v192 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_399:
                double v133 = v135;
                uint64_t v134 = 0x1020C405E66F15BLL;
                goto LABEL_404;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v192, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v139 = v192;
              if (v192 != 0.0)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v192 + 16));
                double v133 = v139;
                unsigned int v136 = -235920773;
                goto LABEL_403;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v192, 0xFFFFFFFFFFFFFFFFLL) == 1 && v192 != 0.0)
            {
              double v133 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v192));
              unsigned int v136 = 2071181815;
LABEL_403:
              uint64_t v134 = v136 | 0x1030C4000000000;
LABEL_404:
              MEMORY[0x22A614FA0](*(void *)&v133, v134);
            }
            break;
          default:
            return;
        }
        return;
    }
    turi::flexible_type_fail(0);
LABEL_466:
    __break(1u);
  }
  else
  {
    *(unsigned char *)(a3 + 12) = v13;
    switch(v13)
    {
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        *(void *)a3 = 0x1900000000000000;
        *(_DWORD *)(a3 + 8) = 0;
        break;
      case 8:
        operator new();
      case 9:
        operator new();
      default:
        break;
    }
    for (unint64_t i = *(void *)(a1 + 16); i < *(void *)a1; ++i)
    {
      if (*(unsigned char *)(a1 + 24) == 3)
      {
        int v24 = *((unsigned __int8 *)v4 + 12);
        if (v24 == 1)
        {
          uint64_t v30 = v4;
          if (i)
          {
LABEL_456:
            turi::flexible_type_fail(0);
            goto LABEL_466;
          }
        }
        else
        {
          if (v24 == 9)
          {
            uint64_t v29 = *v4;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*v4 + 8));
            long long v25 = *(void **)(v29 + 8);
            unint64_t v26 = *(void *)(v29 + 72) + i;
          }
          else
          {
            if (v24 != 3) {
              goto LABEL_456;
            }
            long long v25 = (void *)(*v4 + 8);
            unint64_t v26 = i;
          }
          uint64_t v30 = (uint64_t *)(*v25 + 8 * v26);
        }
        uint64_t v31 = *v30;
        int v32 = *(unsigned __int8 *)(a3 + 12);
        switch(*(unsigned char *)(a3 + 12))
        {
          case 2:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_95;
          case 3:
            uint64_t v35 = *(uint64_t **)a3;
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_93;
          case 4:
            uint64_t v35 = *(uint64_t **)a3;
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_97;
          case 5:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_95;
          case 8:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_95;
          case 9:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_95;
          default:
            if (v32 == 4)
            {
              uint64_t v35 = *(uint64_t **)a3;
LABEL_97:
              unint64_t v47 = v35[3];
              unint64_t v48 = v35[2];
              if (v48 >= v47)
              {
                uint64_t v49 = v35[1];
                uint64_t v50 = (uint64_t)(v48 - v49) >> 4;
                unint64_t v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v52 = v47 - v49;
                if (v52 >> 3 > v51) {
                  unint64_t v51 = v52 >> 3;
                }
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v53 = v51;
                }
                *(void *)v182 = v35 + 3;
                if (v53) {
                  uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(v35 + 3), v53);
                }
                else {
                  uint64_t v54 = 0;
                }
                uint64_t v61 = &v54[16 * v50];
                __p[0] = v54;
                __p[1] = v61;
                v181[1] = &v54[16 * v53];
                *(void *)uint64_t v61 = v31;
                *((_DWORD *)v61 + 2) = 0;
                v61[12] = 1;
                v181[0] = v61 + 16;
                std::vector<turi::flexible_type>::__swap_out_circular_buffer(v35 + 1, __p);
                long long v46 = (void *)v35[2];
                std::__split_buffer<turi::flexible_type>::~__split_buffer(__p);
              }
              else
              {
                *(void *)unint64_t v48 = v31;
                *(_DWORD *)(v48 + 8) = 0;
                *(unsigned char *)(v48 + 12) = 1;
                long long v46 = (void *)(v48 + 16);
                _OWORD v35[2] = v48 + 16;
              }
            }
            else
            {
              if (v32 != 3) {
                goto LABEL_95;
              }
              uint64_t v35 = *(uint64_t **)a3;
LABEL_93:
              unint64_t v43 = v35[3];
              long long v44 = (char *)v35[2];
              if ((unint64_t)v44 >= v43)
              {
                double v55 = (char *)v35[1];
                uint64_t v56 = (v44 - v55) >> 3;
                if ((unint64_t)(v56 + 1) >> 61) {
                  goto LABEL_459;
                }
                unint64_t v57 = v43 - (void)v55;
                unint64_t v58 = (uint64_t)(v43 - (void)v55) >> 2;
                if (v58 <= v56 + 1) {
                  unint64_t v58 = v56 + 1;
                }
                if (v57 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v59 = v58;
                }
                if (v59)
                {
                  unsigned int v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v35 + 3), v59);
                  double v55 = (char *)v35[1];
                  long long v44 = (char *)v35[2];
                }
                else
                {
                  unsigned int v60 = 0;
                }
                std::string v62 = &v60[8 * v56];
                *(void *)std::string v62 = v31;
                long long v46 = v62 + 8;
                while (v44 != v55)
                {
                  uint64_t v63 = *((void *)v44 - 1);
                  v44 -= 8;
                  *((void *)v62 - 1) = v63;
                  v62 -= 8;
                }
                v35[1] = (uint64_t)v62;
                _OWORD v35[2] = (uint64_t)v46;
                v35[3] = (uint64_t)&v60[8 * v59];
                if (v55) {
                  operator delete(v55);
                }
              }
              else
              {
                *(void *)long long v44 = v31;
                long long v45 = v44 + 8;
                _OWORD v35[2] = (uint64_t)v45;
                long long v46 = v45;
              }
            }
            _OWORD v35[2] = (uint64_t)v46;
            break;
        }
      }
      else
      {
        uint64_t v27 = *(void *)(*v4 + 8) + 16 * i;
        int v28 = *(unsigned __int8 *)(a3 + 12);
        switch(*(unsigned char *)(a3 + 12))
        {
          case 2:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_95;
          case 3:
            atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)a3;
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_77;
          case 4:
            uint64_t v33 = *(uint64_t **)a3;
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_80;
          case 5:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_95;
          case 8:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_95;
          case 9:
            if (**(void **)a3 != 1) {
              operator new();
            }
            goto LABEL_95;
          default:
            if (v28 == 4)
            {
              uint64_t v33 = *(uint64_t **)a3;
LABEL_80:
              unint64_t v37 = v33[2];
              if (v37 >= v33[3])
              {
                uint64_t v42 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(v33 + 1, (atomic_ullong *volatile *)v27);
              }
              else
              {
                *(void *)unint64_t v37 = 0;
                *(_DWORD *)(v37 + 8) = 0;
                *(unsigned char *)(v37 + 12) = 0;
                if (v37 != v27)
                {
                  atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v27;
                  *(void *)(v37 + 5) = *(void *)(v27 + 5);
                  *(void *)unint64_t v37 = v38;
                  LODWORD(v38) = *(unsigned __int8 *)(v27 + 12);
                  *(unsigned char *)(v37 + 12) = (_BYTE)v38;
                  BOOL v39 = v38 > 9;
                  int v40 = (1 << (char)v38) & 0x33C;
                  if (!v39 && v40 != 0) {
                    atomic_fetch_add(*(atomic_ullong *volatile *)v37, 1uLL);
                  }
                }
                uint64_t v42 = v37 + 16;
                std::locale v33[2] = v37 + 16;
              }
              std::locale v33[2] = v42;
            }
            else if (v28 == 3)
            {
              atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)a3;
LABEL_77:
              double v36 = 0.0;
              switch(*(unsigned char *)(v27 + 12))
              {
                case 0:
                  double v36 = (double)*(uint64_t *)v27;
                  goto LABEL_148;
                case 1:
                  double v36 = *(double *)v27;
                  goto LABEL_148;
                case 2:
                  atomic_ullong *volatile v65 = *(atomic_ullong *volatile *)v27;
                  unint64_t v66 = (char **)(*(void *)v27 + 8);
                  size_t __idx = 0;
                  uint64_t v67 = (char *)v66;
                  if (*((char *)v65 + 31) < 0) {
                    uint64_t v67 = *v66;
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, v67);
                  double v68 = std::stod((const std::string *)__p, &__idx);
                  if (SHIBYTE(v181[0]) < 0) {
                    operator delete(__p[0]);
                  }
                  if (*((char *)v65 + 31) < 0) {
                    atomic_ullong v69 = v65[2];
                  }
                  else {
                    atomic_ullong v69 = *((unsigned __int8 *)v65 + 31);
                  }
                  if (__idx != v69)
                  {
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    v178 = std::string::append(&v191, " cannot be interpreted as a float");
                    long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
                    v181[0] = (void *)v178->__r_.__value_.__r.__words[2];
                    *(_OWORD *)std::string __p = v179;
                    v178->__r_.__value_.__l.__size_ = 0;
                    v178->__r_.__value_.__r.__words[2] = 0;
                    v178->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(exception, (const std::string *)__p);
                    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                  }
                  float v76 = v68;
                  double v36 = v76;
                  goto LABEL_148;
                case 3:
                  atomic_ullong *volatile v64 = *(atomic_ullong *volatile *)v27;
                  __p[1] = 0;
                  v181[0] = 0;
                  __p[0] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, (const void *)v64[1], v64[2], (v64[2] - v64[1]) >> 3);
                  turi::flexible_type_fail(0);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  goto LABEL_148;
                case 4:
                  atomic_ullong *volatile v70 = *(atomic_ullong *volatile *)v27;
                  __p[1] = 0;
                  v181[0] = 0;
                  __p[0] = 0;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, (uint64_t *)v70[1], (uint64_t *)v70[2], (v70[2] - v70[1]) >> 4);
                  turi::flexible_type_fail(0);
                  v191.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
                  goto LABEL_148;
                case 5:
                  atomic_ullong *volatile v71 = *(atomic_ullong *volatile *)v27;
                  __p[1] = 0;
                  v181[0] = 0;
                  __p[0] = 0;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, (uint64_t *)v71[1], (uint64_t *)v71[2], (v71[2] - v71[1]) >> 5);
                  turi::flexible_type_fail(0);
                  v191.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
                  goto LABEL_148;
                case 6:
                  double v36 = (double)*(int *)(v27 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v27 << 8) >> 8);
                  goto LABEL_148;
                case 7:
                  goto LABEL_148;
                case 8:
                  atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)v27;
                  uint64_t v73 = *(void *)(*(void *)v27 + 16);
                  *(void *)&long long v187 = *(void *)(*(void *)v27 + 8);
                  *((void *)&v187 + 1) = v73;
                  if (v73) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 + 8), 1u, memory_order_relaxed);
                  }
                  long long v74 = *(_OWORD *)(v72 + 3);
                  long long v75 = *(_OWORD *)(v72 + 7);
                  long long v189 = *(_OWORD *)(v72 + 5);
                  long long v190 = v75;
                  long long v188 = v74;
                  turi::flexible_type_fail(0);
                  boost::detail::shared_count::~shared_count((atomic_uint **)&v187 + 1);
                  goto LABEL_148;
                case 9:
                  turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v27 + 8);
                  turi::flexible_type_fail(0);
                  if (*(void *)&v182[8])
                  {
                    *(void *)&v182[16] = *(void *)&v182[8];
                    operator delete(*(void **)&v182[8]);
                  }
                  if (v181[0])
                  {
                    v181[1] = v181[0];
                    operator delete(v181[0]);
                  }
                  if (__p[1]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                  }
LABEL_148:
                  unint64_t v77 = v34[3];
                  unint64_t v78 = (double *)v34[2];
                  if ((unint64_t)v78 >= v77)
                  {
                    unint64_t v81 = (double *)v34[1];
                    uint64_t v82 = v78 - v81;
                    if ((unint64_t)(v82 + 1) >> 61) {
LABEL_459:
                    }
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    unint64_t v83 = v77 - (void)v81;
                    unint64_t v84 = (uint64_t)(v77 - (void)v81) >> 2;
                    if (v84 <= v82 + 1) {
                      unint64_t v84 = v82 + 1;
                    }
                    if (v83 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v85 = v84;
                    }
                    if (v85)
                    {
                      uint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v34 + 3), v85);
                      unint64_t v81 = (double *)v34[1];
                      unint64_t v78 = (double *)v34[2];
                    }
                    else
                    {
                      uint64_t v86 = 0;
                    }
                    unint64_t v87 = (double *)&v86[8 * v82];
                    double *v87 = v36;
                    unsigned int v80 = v87 + 1;
                    while (v78 != v81)
                    {
                      uint64_t v88 = *((void *)v78-- - 1);
                      *((void *)v87-- - 1) = v88;
                    }
                    v34[1] = (atomic_ullong)v87;
                    void v34[2] = (atomic_ullong)v80;
                    v34[3] = (atomic_ullong)&v86[8 * v85];
                    if (v81) {
                      operator delete(v81);
                    }
                  }
                  else
                  {
                    *unint64_t v78 = v36;
                    uint64_t v79 = v78 + 1;
                    void v34[2] = (atomic_ullong)v79;
                    unsigned int v80 = v79;
                  }
                  void v34[2] = (atomic_ullong)v80;
                  break;
                default:
                  goto LABEL_456;
              }
            }
            else
            {
LABEL_95:
              turi::flexible_type_fail(0);
            }
            break;
        }
      }
    }
  }
}