uint64_t _GLOBAL__sub_I_thread_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_thread_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_column_statistics_cpp()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD");
  v2[3] = 0;
  turi::globals::register_global<long long>::register_global(&turi::ml_data_internal::__ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD__register__instance, __p, &turi::ml_data_internal::ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD, 1, v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D46474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_column_statistics_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_testing_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  qword_268081268 = 0;
  unk_268081270 = 0;
  turi::__list_of_directories_to_clean_up = 0;
  __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &turi::__list_of_directories_to_clean_up, &dword_223D44000);
  uint64_t v0 = pthread_mutex_init(&turi::__list_of_directories_lock, 0);
  assert_msg(v0 == 0, v1, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::__list_of_directories_lock, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_testing_utils_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_testing_utils_cpp_1()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_testing_utils_cpp_2()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_utils_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D4696C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_utils_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_1()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_2()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_3()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D46E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_4()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_5()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_6()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_class_registrations_cpp_7()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D47448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087C28 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D475F4()
{
}

void sub_223D47604()
{
}

void sub_223D47614()
{
}

void sub_223D47624()
{
}

void sub_223D47634()
{
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_8()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_9()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_10()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_11()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_12()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_13()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_14()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_15()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_16()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D47B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_17()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_18()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_19()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_linear_regression_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D47FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_linear_regression_cpp_0()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D4835C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 36))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 24);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          std::string v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *(void **)(a1 + 24);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          std::string v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 24);
        if (v7)
        {
          char v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 24);
        if (v7)
        {
          char v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          std::string v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          std::string v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 24);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          std::string::size_type v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          std::string v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::map<std::string,turi::flexible_type>::map[abi:ne180100](uint64_t a1, std::string *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>((uint64_t **)a1, v4, (const void **)&a2->__r_.__value_.__l.__data_, a2);
      a2 = (std::string *)((char *)a2 + 40);
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_223D48690(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_223D48710(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__construct_node<std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__construct_node<std::pair<std::string const,turi::flex_type_enum> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  v6[56] = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_223D48838(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>(uint64_t **a1, uint64_t *a2, const void **a3, std::string *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

const void **std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      int v14 = (const void **)a2[1];
      do
      {
        char v15 = v14;
        int v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      int v18 = (const void **)a2;
      do
      {
        char v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        int v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return (const void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

BOOL boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 180) + 1;
  *(_DWORD *)(a1 + 180) = v2;
  if (v2 >= 0x191)
  {
    uint64_t v3 = (const char *)(*(void *)(a1 + 136) - *(void *)(a1 + 120));
    std::string::basic_string[abi:ne180100]<0>(__p, "Exceeded nested brace limit.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 18, v3, (uint64_t)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  do
  {
    uint64_t v5 = *(void *)(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 136);
    if (v4 == v5) {
      break;
    }
    uint64_t v6 = *(uint64_t (**)(void *))(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 112);
    uint64_t v8 = (void *)(a1 + (v7 >> 1));
    if (v7) {
      uint64_t v6 = *(uint64_t (**)(void *))(*v8 + v6);
    }
  }
  while ((v6(v8) & 1) != 0);
  BOOL result = v4 == v5;
  --*(_DWORD *)(a1 + 180);
  return result;
}

void sub_223D48BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended(std::string *a1)
{
  unsigned int v2 = (unsigned __int8 *)a1[5].__r_.__value_.__r.__words[2];
  uint64_t v3 = 0;
  switch(*(unsigned char *)(*(void *)a1->__r_.__value_.__l.__size_ + *v2 + 32))
  {
    case 1:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_open_paren((uint64_t)a1);
    case 2:
      return v3;
    case 3:
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      BOOL v5 = (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0x400) == 0;
      int v6 = 12;
      int v7 = 4;
      goto LABEL_7;
    case 4:
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      BOOL v5 = (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0x400) == 0;
      int v6 = 11;
      int v7 = 3;
LABEL_7:
      if (v5) {
        int v8 = v7;
      }
      else {
        int v8 = v6;
      }
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, v8, 0x10uLL);
      return 1;
    case 5:
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      int v9 = *(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40);
      uint64_t v3 = 1;
      if ((v9 & 0x1000) != 0) {
        char v10 = 2;
      }
      else {
        char v10 = 1;
      }
      if ((v9 & 0x2000) != 0) {
        char v11 = 0;
      }
      else {
        char v11 = v10;
      }
      *((unsigned char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 5, 0x18uLL)+ 16) = v11;
      return v3;
    case 6:
      if (v2 != (unsigned __int8 *)a1[5].__r_.__value_.__l.__data_)
      {
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
        uint64_t v12 = 0;
        goto LABEL_23;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "The repeat operator \"*\" cannot start a regular expression.");
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 13, 0, (uint64_t)__p);
      goto LABEL_58;
    case 7:
      if (v2 == (unsigned __int8 *)a1[5].__r_.__value_.__l.__data_)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "The repeat operator \"+\" cannot start a regular expression.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 13, 0, (uint64_t)__p);
        goto LABEL_58;
      }
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      uint64_t v12 = 1;
LABEL_23:
      uint64_t v13 = -1;
      goto LABEL_26;
    case 8:
      if (v2 == (unsigned __int8 *)a1[5].__r_.__value_.__l.__data_)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "The repeat operator \"?\" cannot start a regular expression.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 13, 0, (uint64_t)__p);
LABEL_58:
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        return 0;
      }
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      uint64_t v12 = 0;
      uint64_t v13 = 1;
LABEL_26:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat((uint64_t)a1, v12, v13);
    case 9:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set((uint64_t)a1);
    case 0xB:
      goto LABEL_52;
    case 0xC:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended_escape((uint64_t)a1);
    case 0xD:
      if ((*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0xA00) != 0x800) {
        goto LABEL_49;
      }
      size = (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_;
      uint64_t v3 = 1;
      break;
    case 0xF:
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat_range((uint64_t)a1, 0);
    case 0x10:
      if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 41) & 2) == 0) {
        goto LABEL_49;
      }
      v20 = (const char *)&v2[-a1[5].__r_.__value_.__r.__words[0]];
      std::string::basic_string[abi:ne180100]<0>(__p, "Found a closing repetition operator } with no corresponding {.");
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 9, v20, (uint64_t)__p);
      goto LABEL_58;
    case 0x1A:
      if ((*(unsigned char *)(a1->__r_.__value_.__r.__words[0] + 42) & 2) == 0) {
        goto LABEL_49;
      }
LABEL_52:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt((uint64_t)a1);
    default:
LABEL_49:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal((uint64_t)a1);
  }
  while (v2 != size)
  {
    char v15 = v2 + 1;
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v2 + 1);
    unsigned int v16 = *v2;
    BOOL v17 = v16 > 0xD;
    int v18 = (1 << v16) & 0x3400;
    BOOL v19 = v17 || v18 == 0;
    unsigned int v2 = v15;
    if (!v19) {
      return v3;
    }
  }
  return 1;
}

void sub_223D48FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v4 = (unsigned __int8 *)(v2 + 1);
  *(void *)(a1 + 136) = v2 + 1;
  if (v2 + 1 == v3)
  {
    char v15 = (const char *)&v4[-*(void *)(a1 + 120)];
    std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set(void)::incomplete_message[0]);
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 7, v15, (uint64_t)&__p);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
    return 0;
  }
  __p = &v19;
  BOOL v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  v29[0] = 0;
  v29[1] = 0;
  long long v28 = v29;
  __int16 v24 = 0;
  int v25 = 0;
  int v26 = 0;
  BOOL v5 = (char *)(v2 + 2);
  int v6 = (unsigned __int8 *)(v2 + 1);
  int v7 = (unsigned __int8 *)(v2 + 1);
  char v27 = 1;
  while (2)
  {
    uint64_t v8 = **(void **)(a1 + 8);
    switch(*(unsigned char *)(v8 + *v6 + 32))
    {
      case 4:
        if (v6 != v4) {
          goto LABEL_19;
        }
        LOBYTE(v24) = 1;
        int v9 = v5;
        int v7 = (unsigned __int8 *)v5;
        goto LABEL_17;
      case 9:
        if (!boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_inner_set((std::string *)a1, (uint64_t)&__p))goto LABEL_29; {
        goto LABEL_20;
        }
      case 0xA:
        if (v6 == v7)
        {
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set_literal(a1, (uint64_t)&__p);
          int v7 = v6;
LABEL_20:
          int v6 = *(unsigned __int8 **)(a1 + 136);
          if (v6 == *(unsigned __int8 **)(a1 + 128)) {
            goto LABEL_21;
          }
          continue;
        }
        *(void *)(a1 + 136) = v6 + 1;
        if (HIBYTE(v24)) {
          uint64_t appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&__p);
        }
        else {
          uint64_t appended = (uint64_t)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&__p);
        }
        if (appended)
        {
LABEL_29:
          uint64_t v14 = 1;
        }
        else
        {
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, (const char *)(*(void *)(a1 + 136) - *(void *)(a1 + 120)));
LABEL_21:
          uint64_t v14 = 0;
        }
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v28, v29[0]);
        if (v21)
        {
          char v22 = v21;
          operator delete(v21);
        }
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&__p, v19);
        return v14;
      case 0xC:
        char v10 = (char *)(v6 + 1);
        *(void *)(a1 + 136) = v6 + 1;
        int v11 = *(unsigned __int8 *)(v8 + v6[1] + 32);
        if (v11 == 23)
        {
          int v13 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v8, v10, (char *)v6 + 2);
          char v10 = *(char **)(a1 + 136);
          if (v13)
          {
            v26 |= v13;
LABEL_16:
            char v27 = 0;
            int v9 = v10 + 1;
LABEL_17:
            *(void *)(a1 + 136) = v9;
            goto LABEL_20;
          }
        }
        else if (v11 == 22)
        {
          int v12 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v8, v10, (char *)v6 + 2);
          char v10 = *(char **)(a1 + 136);
          if (v12)
          {
            v25 |= v12;
            goto LABEL_16;
          }
        }
        *(void *)(a1 + 136) = v10 - 1;
LABEL_19:
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set_literal(a1, (uint64_t)&__p);
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
}

void sub_223D49260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname_imp(a1, a2, a3);
  if (!v6)
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, a2, a3, a3 - a2);
    uint64_t v7 = v14;
    if ((v14 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if ((v14 & 0x80u) != 0) {
      uint64_t v7 = v13;
    }
    (*(void (**)(void, char *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), p_p, &p_p[v7]);
    uint64_t v9 = v14;
    if ((v14 & 0x80u) == 0) {
      char v10 = (char *)&__p;
    }
    else {
      char v10 = (char *)__p;
    }
    if ((v14 & 0x80u) != 0) {
      uint64_t v9 = v13;
    }
    uint64_t v6 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname_imp(a1, v10, &v10[v9]);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  return v6;
}

void sub_223D493C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname_imp(uint64_t a1, char *a2, char *a3)
{
  if (!*(void *)(a1 + 328)) {
    goto LABEL_6;
  }
  uint64_t v6 = a1 + 312;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
  uint64_t v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v6, (const void **)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 320 == v7) {
LABEL_6:
  }
    uint64_t v8 = (unsigned int *)((char *)&boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname_imp(char const*,char const*)const::masks
                        + 4 * (int)boost::re_detail_106800::get_default_class_id<char>(a2, (uint64_t)a3)
                        + 4);
  else {
    uint64_t v8 = (unsigned int *)(v7 + 56);
  }
  return *v8;
}

void sub_223D49494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::re_detail_106800::get_default_class_id<char>(const void *a1, uint64_t a2)
{
  BOOL v5 = a1;
  uint64_t v6 = a2;
  char v7 = 0;
  uint64_t v2 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,boost::re_detail_106800::character_pointer_range<char> const*,boost::re_detail_106800::character_pointer_range<char> const*,boost::re_detail_106800::character_pointer_range<char>,std::__identity,std::__less<void,void>>(boost::re_detail_106800::get_default_class_id<char>(char const*,char const*)::ranges_begin, (char **)boost::re_detail_106800::get_default_class_id<char>(char const*,char const*)::ranges_end, &v5);
  if (v2 != (char **)boost::re_detail_106800::get_default_class_id<char>(char const*,char const*)::ranges_end
    && (uint64_t v3 = (char *)v2, v6 - (void)v5 == *((void *)v3 + 1) - *(void *)v3)
    && !memcmp(v5, *v2, v6 - (void)v5))
  {
    return (unint64_t)(v3
                            - (char *)&boost::re_detail_106800::get_default_class_id<char>(char const*,char const*)::ranges) >> 4;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

char **std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,boost::re_detail_106800::character_pointer_range<char> const*,boost::re_detail_106800::character_pointer_range<char> const*,boost::re_detail_106800::character_pointer_range<char>,std::__identity,std::__less<void,void>>(char **a1, char **a2, void *a3)
{
  if (a2 != a1)
  {
    unint64_t v3 = ((char *)a2 - (char *)a1) >> 4;
    uint64_t v4 = a3[1];
    a2 = a1;
    do
    {
      unint64_t v5 = v3 >> 1;
      if (*a3 != v4)
      {
        uint64_t v6 = &a2[2 * v5];
        char v7 = *v6;
        uint64_t v8 = *a3 + 1;
        while (v7 != v6[1])
        {
          int v9 = *v7;
          int v10 = *(char *)(v8 - 1);
          if (v9 < v10) {
            break;
          }
          ++v7;
          if (v10 < v9 || v8++ == v4) {
            goto LABEL_14;
          }
        }
        a2 = v6 + 2;
        unint64_t v5 = v3 + ~v5;
      }
LABEL_14:
      unint64_t v3 = v5;
    }
    while (v5);
  }
  return a2;
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_set_literal(uint64_t a1, uint64_t a2)
{
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_next_set_literal((std::string *)a1, a2, (uint64_t)&v15);
  unint64_t v5 = *(unsigned __int8 **)(a1 + 128);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 136);
  if (v5 == v4) {
    goto LABEL_9;
  }
  uint64_t v6 = **(void **)(a1 + 8);
  if (*(unsigned char *)(v6 + *v4 + 32) == 14)
  {
    *(void *)(a1 + 136) = v4 + 1;
    if (v5 != v4 + 1)
    {
      if (*(unsigned char *)(v6 + v4[1] + 32) == 10)
      {
        *(void *)(a1 + 136) = v4;
        goto LABEL_6;
      }
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_next_set_literal((std::string *)a1, a2, (uint64_t)v14);
      boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_range(a2, (char *)&v15, v14);
      int v10 = *(unsigned __int8 **)(a1 + 136);
      uint64_t v11 = **(void **)(a1 + 8);
      if (*(unsigned char *)(v11 + *v10 + 32) != 14) {
        return;
      }
      int v12 = *(unsigned __int8 **)(a1 + 128);
      uint64_t v13 = v10 + 1;
      *(void *)(a1 + 136) = v10 + 1;
      if (v12 != v10 + 1)
      {
        if (*(unsigned char *)(v11 + *v13 + 32) == 10)
        {
          *(void *)(a1 + 136) = v10;
          return;
        }
        char v7 = (const char *)&v13[-*(void *)(a1 + 120)];
        uint64_t v8 = (std::string *)a1;
        int v9 = 11;
        goto LABEL_11;
      }
      char v7 = (const char *)&v12[-*(void *)(a1 + 120)];
LABEL_10:
      uint64_t v8 = (std::string *)a1;
      int v9 = 7;
LABEL_11:
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(v8, v9, v7);
      return;
    }
LABEL_9:
    char v7 = (const char *)&v5[-*(void *)(a1 + 120)];
    goto LABEL_10;
  }
LABEL_6:
  std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)a2, (char *)&v15, &v15);
  if (HIBYTE(v15)) {
    *(unsigned char *)(a2 + 49) = 1;
  }
  *(unsigned char *)(a2 + 60) = 0;
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_next_set_literal(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = 0;
  unint64_t v5 = (unsigned char *)a1[5].__r_.__value_.__r.__words[2];
  uint64_t v6 = *(void *)a1->__r_.__value_.__l.__size_;
  int v7 = *(unsigned __int8 *)(v6 + *v5 + 32);
  if (v7 != 9)
  {
    if (v7 == 12)
    {
      int v8 = *(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40);
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v5 + 1);
      if ((v8 & 0x10000) == 0)
      {
        *(unsigned char *)a3 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unescape_character(a1);
LABEL_18:
        *(unsigned char *)(a3 + 1) = 0;
        return;
      }
    }
    else
    {
      if (v7 == 14)
      {
        if (*(unsigned char *)(a2 + 60))
        {
LABEL_5:
          a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v5 + 1);
          *(unsigned char *)a3 = *v5;
          return;
        }
        int v18 = v5 + 1;
        a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v5 + 1);
        if (v5 + 1 != (unsigned char *)a1[5].__r_.__value_.__l.__size_ && *(unsigned char *)(v6 + *v18 + 32) == 10)
        {
          a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
          goto LABEL_5;
        }
        BOOL v17 = (const char *)&v18[-a1[5].__r_.__value_.__r.__words[0]];
        BOOL v19 = a1;
        int v20 = 11;
        goto LABEL_34;
      }
      a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v5 + 1);
    }
    *(unsigned char *)a3 = *v5;
    goto LABEL_18;
  }
  size = (unsigned __int8 *)a1[5].__r_.__value_.__l.__size_;
  int v10 = v5 + 1;
  a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v5 + 1);
  if (size == v5 + 1) {
    goto LABEL_20;
  }
  if (*(unsigned char *)(v6 + *v10 + 32) != 5)
  {
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
    *(unsigned char *)a3 = *v5;
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
    return;
  }
  uint64_t v11 = v5 + 2;
  a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v5 + 2);
  if (size == v5 + 2)
  {
LABEL_20:
    BOOL v17 = (const char *)&size[-a1[5].__r_.__value_.__r.__words[0]];
LABEL_33:
    BOOL v19 = a1;
    int v20 = 3;
LABEL_34:
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(v19, v20, v17);
    return;
  }
  int v12 = v5 + 3;
  a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v5 + 3);
  if (size == v5 + 3) {
    goto LABEL_32;
  }
  uint64_t v13 = (char *)&__p + 1;
  unsigned __int8 v14 = v5 + 3;
  while (1)
  {
    unsigned int v15 = *v14++;
    int v16 = *(unsigned __int8 *)(v6 + v15 + 32);
    a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v14;
    if (v16 == 5) {
      break;
    }
    int v12 = v14;
    if (v14 == size) {
      goto LABEL_32;
    }
  }
  if (v12 + 1 == size || *(unsigned char *)(v6 + v12[1] + 32) != 10)
  {
LABEL_32:
    BOOL v17 = &v11[-a1[5].__r_.__value_.__r.__words[0]];
    goto LABEL_33;
  }
  a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)(v12 + 2);
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_collatename(v6, v11, (char *)v12, (uint64_t)&__p);
  unsigned int v21 = v26;
  if (((char)v26 & 0x80000000) == 0)
  {
    if (v26 - 3 > 0xFFFFFFFD)
    {
      *(unsigned char *)a3 = (_BYTE)__p;
      if (v21 <= 1) {
        goto LABEL_42;
      }
LABEL_41:
      *(unsigned char *)(a3 + 1) = *v13;
      goto LABEL_43;
    }
LABEL_38:
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 3, &v11[-a1[5].__r_.__value_.__r.__words[0]]);
    LOBYTE(v21) = v26;
    goto LABEL_43;
  }
  unint64_t v22 = v25;
  if (v25 - 3 < 0xFFFFFFFFFFFFFFFELL) {
    goto LABEL_38;
  }
  uint64_t v23 = (char *)__p;
  *(unsigned char *)a3 = *(unsigned char *)__p;
  if (v22 > 1)
  {
    uint64_t v13 = v23 + 1;
    goto LABEL_41;
  }
LABEL_42:
  *(unsigned char *)(a3 + 1) = 0;
LABEL_43:
  if ((v21 & 0x80) != 0) {
    operator delete(__p);
  }
}

void sub_223D499AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>(uint64_t **a1, char *a2, _WORD *a3)
{
  unint64_t v5 = std::__tree<boost::re_detail_106800::digraph<char>>::__find_equal<boost::re_detail_106800::digraph<char>>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x20uLL);
    *(_WORD *)(v6 + 25) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  BOOL result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::__tree<boost::re_detail_106800::digraph<char>>::__find_equal<boost::re_detail_106800::digraph<char>>(uint64_t a1, void *a2, char *a3)
{
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  BOOL result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        int v8 = v4;
        int v9 = *((char *)v4 + 25);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v8;
        BOOL result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        int v10 = *((char *)v8 + 26);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      BOOL result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  int v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

_OWORD *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(uint64_t a1, uint64_t a2)
{
  uint64_t appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 15, 0x110uLL);
  int v67 = *(unsigned __int8 *)(a2 + 48);
  appended[1] = 0u;
  v70 = appended + 1;
  appended[15] = 0u;
  appended[16] = 0u;
  appended[13] = 0u;
  appended[14] = 0u;
  appended[11] = 0u;
  appended[12] = 0u;
  appended[9] = 0u;
  appended[10] = 0u;
  appended[7] = 0u;
  appended[8] = 0u;
  appended[5] = 0u;
  appended[6] = 0u;
  appended[3] = 0u;
  appended[4] = 0u;
  v71 = appended;
  appended[2] = 0u;
  unint64_t v5 = *(void **)a2;
  if (*(void *)a2 != a2 + 8)
  {
    int v6 = appended + 1;
    do
    {
      for (uint64_t i = 0; i != 256; ++i)
      {
        if (*(unsigned char *)(a1 + 24))
        {
          uint64_t v8 = *(void *)(**(void **)(a1 + 8) + 8);
          char v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 40))(v8, (char)i);
          char v10 = *((unsigned char *)v5 + 25);
          if (*(unsigned char *)(a1 + 24)) {
            char v10 = (*(uint64_t (**)(void, void))(**(void **)(**(void **)(a1 + 8) + 8) + 40))(*(void *)(**(void **)(a1 + 8) + 8), v10);
          }
        }
        else
        {
          char v10 = *((unsigned char *)v5 + 25);
          char v9 = i;
        }
        if (v9 == v10) {
          *((unsigned char *)v6 + i) = 1;
        }
      }
      uint64_t v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v5[2];
          BOOL v13 = *v12 == (void)v5;
          unint64_t v5 = v12;
        }
        while (!v13);
      }
      unint64_t v5 = v12;
    }
    while (v12 != (void *)(a2 + 8));
  }
  unsigned int v15 = *(unsigned __int8 **)(a2 + 24);
  unsigned __int8 v14 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v68 = a2;
  if (v15 == v14)
  {
LABEL_84:
    int v45 = *(_DWORD *)(a2 + 52);
    int v46 = *(_DWORD *)(*(void *)a1 + 40);
    if ((v46 & 0x100000) != 0 && ((*(_DWORD *)(a1 + 88) & ~v45) == 0 || (*(_DWORD *)(a1 + 92) & ~v45) == 0)) {
      v45 |= *(_DWORD *)(a1 + 96);
    }
    if (v45)
    {
      for (uint64_t j = 0; j != 256; ++j)
      {
        if (boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), (char)j, v45)) {
          *((unsigned char *)v71 + j + 16) = 1;
        }
      }
      int v46 = *(_DWORD *)(*(void *)a1 + 40);
    }
    int v48 = *(_DWORD *)(a2 + 56);
    if ((v46 & 0x100000) != 0 && ((*(_DWORD *)(a1 + 88) & ~v48) == 0 || (*(_DWORD *)(a1 + 92) & ~v48) == 0)) {
      v48 |= *(_DWORD *)(a1 + 96);
    }
    if (v48)
    {
      for (uint64_t k = 0; k != 256; ++k)
      {
        if (!boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), (char)k, v48)) {
          *((unsigned char *)v71 + k + 16) = 1;
        }
      }
    }
    v50 = *(std::string::value_type **)(a2 + 64);
    if (v50 != (std::string::value_type *)(a2 + 72))
    {
      do
      {
        memset(&v74, 0, sizeof(v74));
        boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(**(void **)(a1 + 8), v50 + 25, v50 + 26, (uint64_t *)&__p);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        std::string v74 = __p;
        char v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          size_t size = v74.__r_.__value_.__l.__size_;
          if (!v74.__r_.__value_.__l.__size_) {
            goto LABEL_146;
          }
        }
        else
        {
          if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
            return 0;
          }
          size_t size = v74.__r_.__value_.__l.__size_;
        }
        uint64_t v53 = 0;
        uint64_t v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v55 = size;
        }
        v56 = (const void *)v74.__r_.__value_.__r.__words[0];
        do
        {
          LOWORD(v72.__r_.__value_.__l.__data_) = v53;
          boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform_primary(**(void **)(a1 + 8), (std::string::value_type *)&v72, &v72.__r_.__value_.__s.__data_[1], (uint64_t *)&__p);
          std::string::size_type v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          int v58 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v57 = __p.__r_.__value_.__l.__size_;
          }
          if (v55 == v57)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if (v51 < 0)
            {
              if (!memcmp(v56, p_p, size)) {
LABEL_126:
              }
                *((unsigned char *)v71 + v53 + 16) = 1;
            }
            else
            {
              v60 = &v74;
              uint64_t v61 = v54;
              while (v60->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
              {
                v60 = (std::string *)((char *)v60 + 1);
                p_p = (std::string *)((char *)p_p + 1);
                if (!--v61) {
                  goto LABEL_126;
                }
              }
            }
          }
          if (v58 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          ++v53;
        }
        while (v53 != 256);
        v62 = (std::string::value_type *)*((void *)v50 + 1);
        v63 = v50;
        if (v62)
        {
          do
          {
            v50 = v62;
            v62 = *(std::string::value_type **)v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            v50 = (std::string::value_type *)*((void *)v63 + 2);
            BOOL v13 = *(void *)v50 == (void)v63;
            v63 = v50;
          }
          while (!v13);
        }
        if (v51 < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
      }
      while (v50 != (std::string::value_type *)(v68 + 72));
    }
    if (!v67) {
      return v71;
    }
    uint64_t v64 = 1;
    v65.i64[0] = 0x101010101010101;
    v65.i64[1] = 0x101010101010101;
    BOOL result = v71;
    do
    {
      v71[v64] = vandq_s8(vceqzq_s8((int8x16_t)v71[v64]), v65);
      ++v64;
    }
    while (v64 != 17);
    return result;
  }
  v69 = *(unsigned __int8 **)(a2 + 32);
  while (1)
  {
    unsigned __int8 v16 = *v15;
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v17 = *(void *)(**(void **)(a1 + 8) + 8);
      unsigned __int8 v16 = (*(uint64_t (**)(uint64_t, void))(*(void *)v17 + 40))(v17, (char)v16);
      unsigned __int8 v18 = v15[2];
      if (*(unsigned char *)(a1 + 24))
      {
        uint64_t v19 = *(void *)(**(void **)(a1 + 8) + 8);
        unsigned __int8 v18 = (*(uint64_t (**)(uint64_t, void))(*(void *)v19 + 40))(v19, (char)v18);
      }
    }
    else
    {
      unsigned __int8 v18 = v15[2];
    }
    if ((*(unsigned char *)(*(void *)a1 + 42) & 0x20) != 0) {
      break;
    }
    if (v18 < v16) {
      return 0;
    }
    memset((char *)v70 + v16, 1, v18 - (unint64_t)v16 + 1);
LABEL_83:
    v15 += 4;
    if (v15 == v14) {
      goto LABEL_84;
    }
  }
  unsigned __int8 v75 = v16;
  char v76 = 0;
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(void **)(a1 + 8), &v74);
  unsigned __int8 v75 = v18;
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(void **)(a1 + 8), &__p);
  char v20 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  int v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  unint64_t v22 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v24 = &__p;
  }
  else {
    __int16 v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v74.__r_.__value_.__l.__size_;
  }
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned __int8 v26 = &v74;
  }
  else {
    unsigned __int8 v26 = (std::string *)v74.__r_.__value_.__r.__words[0];
  }
  if (v25 >= v23) {
    size_t v27 = v23;
  }
  else {
    size_t v27 = v25;
  }
  int v28 = memcmp(v24, v26, v27);
  BOOL v29 = v23 < v25;
  if (v28) {
    BOOL v29 = v28 < 0;
  }
  if (!v29)
  {
    for (uint64_t m = 0; m != 256; ++m)
    {
      unsigned __int8 v75 = m;
      boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(**(void **)(a1 + 8), &v72);
      int v31 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
      v32 = (void *)v72.__r_.__value_.__r.__words[0];
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v72.__r_.__value_.__l.__size_;
      }
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v34 = &v72;
      }
      else {
        v34 = (std::string *)v72.__r_.__value_.__r.__words[0];
      }
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v74.__r_.__value_.__l.__size_;
      }
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v36 = &v74;
      }
      else {
        v36 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      if (v35 >= v33) {
        size_t v37 = v33;
      }
      else {
        size_t v37 = v35;
      }
      int v38 = memcmp(v34, v36, v37);
      BOOL v39 = v33 >= v35;
      if (v38) {
        BOOL v39 = v38 >= 0;
      }
      if (v39)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v40 = __p.__r_.__value_.__l.__size_;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v41 = &__p;
        }
        else {
          v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v33 >= v40) {
          size_t v42 = v40;
        }
        else {
          size_t v42 = v33;
        }
        int v43 = memcmp(v41, v34, v42);
        BOOL v44 = v40 >= v33;
        if (v43) {
          BOOL v44 = v43 >= 0;
        }
        if (v44) {
          *((unsigned char *)v71 + m + 16) = 1;
        }
      }
      if (v31 < 0) {
        operator delete(v32);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v14 = v69;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    goto LABEL_83;
  }
  if (v21 < 0)
  {
    operator delete(v22);
    char v20 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  }
  if (v20 < 0) {
LABEL_146:
  }
    operator delete(v74.__r_.__value_.__l.__data_);
  return 0;
}

{
  if (*(unsigned char *)(a2 + 49)) {
    return (_OWORD *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, a2);
  }
  else {
    return boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, a2);
  }
}

void sub_223D4A3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::cpp_regex_traits<char>::isctype(uint64_t a1, int a2, int a3)
{
  if ((a2 & 0x80000000) == 0
    && (a3 & 0x5F700) != 0
    && (*(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 8) + 16) + 4 * a2) & a3 & 0x5F700) != 0
    || a2 == 95 && (a3 & 0x2000000) != 0)
  {
    return 1;
  }
  if ((a2 & 0x80) != 0
    || (a3 & 0x1000000) == 0
    || (*(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 8) + 16) + 4 * a2) & 0x4000) == 0
    || (uint64_t v3 = 1, a2 <= 0xDu) && ((1 << a2) & 0x3400) != 0)
  {
    if (a2 - 10 <= 3 && (a3 & 0x10000000) != 0) {
      return 1;
    }
    uint64_t v3 = 0;
    if ((a2 & 0x80) == 0 && (a3 & 0x8000000) != 0) {
      return (*(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 8) + 16) + 4 * a2) & 0x4000) != 0
    }
          && a2 - 14 < 0xFFFFFFFC;
  }
  return v3;
}

void *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        char v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    int v6 = a2;
  }
  else {
    int v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_repeat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v7 = *(char **)(a1 + 128);
  int v6 = *(unsigned __int8 **)(a1 + 136);
  if (v6 == (unsigned __int8 *)v7
    || ((*(_DWORD *)(*(void *)a1 + 40) & 0x203) != 0
      ? (BOOL v8 = (*(_DWORD *)(*(void *)a1 + 40) & 0x1003) == 4097)
      : (BOOL v8 = 1),
        !v8))
  {
    int v10 = 0;
    BOOL v11 = 1;
    goto LABEL_23;
  }
  if ((*(_DWORD *)(*(void *)a1 + 40) & 0xA03) == 0x800)
  {
    while (1)
    {
      BOOL v9 = boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), (char)*v6, *(_DWORD *)(a1 + 84));
      size_t v7 = *(char **)(a1 + 128);
      int v6 = *(unsigned __int8 **)(a1 + 136);
      if (!v9) {
        break;
      }
      *(void *)(a1 + 136) = ++v6;
      if (v6 == (unsigned __int8 *)v7) {
        goto LABEL_19;
      }
    }
  }
  if (v6 == (unsigned __int8 *)v7)
  {
LABEL_19:
    int v10 = 0;
    BOOL v11 = 1;
LABEL_22:
    int v6 = (unsigned __int8 *)v7;
    goto LABEL_23;
  }
  int v12 = *(unsigned __int8 *)(**(void **)(a1 + 8) + *v6 + 32);
  BOOL v11 = v12 != 8;
  if (v12 == 8) {
    *(void *)(a1 + 136) = ++v6;
  }
  if (v6 == (unsigned __int8 *)v7)
  {
    int v10 = 0;
    goto LABEL_22;
  }
  if ((*(unsigned char *)(*(void *)a1 + 40) & 3) != 0 || *(unsigned char *)(**(void **)(a1 + 8) + *v6 + 32) != 7)
  {
    int v10 = 0;
  }
  else
  {
    *(void *)(a1 + 136) = ++v6;
    int v10 = 1;
  }
LABEL_23:
  BOOL v13 = *(_DWORD **)(a1 + 16);
  if (!v13)
  {
    unsigned __int8 v16 = (const char *)&v6[-*(void *)(a1 + 120)];
    std::string::basic_string[abi:ne180100]<0>(__p, "Nothing to repeat.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 13, v16, (uint64_t)__p);
    if (v45 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  int v14 = *v13;
  if (*v13 > 0x1Au)
  {
LABEL_36:
    uint64_t v23 = (uint64_t)v13 - *(void *)(*(void *)a1 + 352);
    goto LABEL_38;
  }
  if (((1 << v14) & 0x4331F99) != 0)
  {
    unsigned int v15 = (const char *)&v6[-*(void *)(a1 + 120)];
LABEL_27:
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 13, v15);
    return 0;
  }
  if (v14 != 1)
  {
    if (v14 == 2)
    {
      unsigned int v19 = v13[4];
      if (v19 >= 2)
      {
        uint64_t v20 = v19 - 1;
        char v21 = *((unsigned char *)v13 + v20 + 24);
        v13[4] = v20;
        uint64_t appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 2, 0x19uLL);
        appended[4] = 1;
        *((unsigned char *)appended + 24) = v21;
        uint64_t v23 = *(void *)(a1 + 16) - *(void *)(*(void *)a1 + 352);
        goto LABEL_38;
      }
    }
    goto LABEL_36;
  }
  uint64_t v23 = *(void *)(a1 + 160);
LABEL_38:
  inserted = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((void *)a1, v23, 18, 0x138uLL);
  *((void *)inserted + 36) = a2;
  *((void *)inserted + 37) = a3;
  inserted[309] = v11;
  inserted[308] = 0;
  std::string::size_type v25 = &inserted[-*(void *)(*(void *)a1 + 352)];
  unsigned __int8 v26 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 16, 0x18uLL);
  *((void *)v26 + 2) = v25 - (char *)v26 + *(void *)(*(void *)a1 + 352);
  uint64_t v27 = *(void *)(*(void *)a1 + 352);
  unint64_t v28 = (*(void *)(*(void *)a1 + 360) - v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(*(void *)a1 + 360) = v27 + v28;
  *(void *)&v25[v27 + 16] = v28 - (void)v25;
  if (!v10) {
    return 1;
  }
  unint64_t v29 = *(void *)(a1 + 128);
  v30 = *(unsigned __int8 **)(a1 + 136);
  if (v30 != (unsigned __int8 *)v29)
  {
    char v31 = 0;
    v32 = *(char **)(a1 + 136);
LABEL_41:
    while (1)
    {
      char v33 = v31;
      if ((*(_DWORD *)(*(void *)a1 + 40) & 0xA03) == 0x800) {
        break;
      }
LABEL_46:
      if (v32 == (char *)v29) {
        goto LABEL_62;
      }
      uint64_t v35 = **(void **)(a1 + 8);
      int v36 = *(unsigned __int8 *)(v35 + *v32 + 32);
      if (v36 == 1)
      {
        if ((unint64_t)(v32 + 2) >= v29
          || *(unsigned char *)(v35 + v32[1] + 32) != 8
          || *(unsigned char *)(v35 + v32[2] + 32) != 13)
        {
          goto LABEL_62;
        }
        while (v30 != (unsigned __int8 *)v29)
        {
          v32 = (char *)(v30 + 1);
          *(void *)(a1 + 136) = v30 + 1;
          int v38 = *(unsigned __int8 *)(v35 + *v30++ + 32);
          if (v38 == 2)
          {
            char v31 = 1;
            v30 = (unsigned __int8 *)v32;
            goto LABEL_41;
          }
        }
        char v31 = 1;
        v30 = (unsigned __int8 *)v29;
        v32 = (char *)v29;
      }
      else
      {
        if ((v36 - 6) < 3 || v36 == 15)
        {
          unsigned int v15 = &v32[-*(void *)(a1 + 120)];
          goto LABEL_27;
        }
        char v31 = 1;
        if ((v33 & 1) == 0) {
          goto LABEL_62;
        }
      }
    }
    while (v32 != (char *)v29)
    {
      BOOL v34 = boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), *v32, *(_DWORD *)(a1 + 84));
      unint64_t v29 = *(void *)(a1 + 128);
      v30 = *(unsigned __int8 **)(a1 + 136);
      if (!v34)
      {
        v32 = *(char **)(a1 + 136);
        goto LABEL_46;
      }
      v32 = (char *)(v30 + 1);
      *(void *)(a1 + 136) = v30 + 1;
    }
  }
LABEL_62:
  BOOL v39 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((void *)a1, v23, 0, 0x18uLL);
  *((_DWORD *)v39 + 4) = -3;
  v39[20] = (*(_DWORD *)(*(void *)a1 + 40) & 0x100000) != 0;
  std::string::size_type v40 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((void *)a1, v23 + 24, 16, 0x18uLL);
  uint64_t v41 = *(void *)(*(void *)a1 + 352);
  unint64_t v42 = (*(void *)(*(void *)a1 + 360) - v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(*(void *)a1 + 360) = v41 + v42;
  *((void *)v40 + 2) = v41 - (void)v40 + v42;
  uint64_t v17 = 1;
  int v43 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 1, 0x18uLL);
  v43[4] = -3;
  *((unsigned char *)v43 + 20) = (*(_DWORD *)(*(void *)a1 + 40) & 0x100000) != 0;
  return v17;
}

void sub_223D4AAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state(void *a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + 352);
  unint64_t v9 = (*(void *)(*a1 + 360) - v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(*a1 + 360) = v8 + v9;
  uint64_t v10 = a1[2];
  if (v10)
  {
    *(void *)(v10 + 8) = v9 - v10 + v8;
    uint64_t v11 = a1[2];
    uint64_t v7 = *a1;
    uint64_t v8 = *(void *)(*a1 + 352);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 + a4 - v8;
  BOOL result = boost::re_detail_106800::raw_storage::insert((boost::re_detail_106800::raw_storage *)(v7 + 344), a2, a4);
  *((void *)result + 1) = a4;
  *(_DWORD *)BOOL result = a3;
  a1[2] = *(void *)(*a1 + 352) + v12;
  return result;
}

char *boost::re_detail_106800::raw_storage::insert(boost::re_detail_106800::raw_storage *this, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *((void *)this + 2);
  if (*(void *)this - v6 < a3)
  {
    boost::re_detail_106800::raw_storage::resize(this, v6 + a3 - *((void *)this + 1));
    uint64_t v6 = *((void *)this + 2);
  }
  uint64_t v7 = (char *)(*((void *)this + 1) + a2);
  memmove(&v7[a3], v7, v6 - (void)v7);
  *((void *)this + 2) += a3;
  return v7;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_open_paren(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 128);
  int v3 = (unsigned __int8 *)(*(void *)(a1 + 136) + 1);
  *(void *)(a1 + 136) = v3;
  if (v3 == v2) {
    goto LABEL_46;
  }
  int v4 = *(void **)a1;
  int v5 = *(_DWORD *)(*(void *)a1 + 40);
  if ((v5 & 0x203) != 0 && (*(_DWORD *)(*(void *)a1 + 40) & 0x1003) != 4097)
  {
LABEL_12:
    if ((v5 & 0x400000) != 0)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = *(_DWORD *)(a1 + 144) + 1;
      *(_DWORD *)(a1 + 144) = v9;
      if ((v5 & 0x800000) != 0)
      {
        uint64_t v10 = &v3[~*(void *)(a1 + 120)];
        uint64_t v12 = (char *)v4[48];
        unint64_t v11 = v4[49];
        if ((unint64_t)v12 >= v11)
        {
          int v14 = (char *)v4[47];
          uint64_t v15 = (v12 - v14) >> 4;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 3 > v16) {
            unint64_t v16 = v17 >> 3;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(v4 + 49), v18);
            int v14 = (char *)v4[47];
            uint64_t v12 = (char *)v4[48];
          }
          else
          {
            unsigned int v19 = 0;
          }
          uint64_t v20 = (unsigned __int8 **)&v19[16 * v15];
          char v21 = &v19[16 * v18];
          const char *v20 = v10;
          v20[1] = 0;
          BOOL v13 = v20 + 2;
          if (v12 != v14)
          {
            do
            {
              *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
              v20 -= 2;
              v12 -= 16;
            }
            while (v12 != v14);
            int v14 = (char *)v4[47];
          }
          v4[47] = v20;
          v4[48] = v13;
          v4[49] = v21;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v12 = v10;
          *((void *)v12 + 1) = 0;
          BOOL v13 = v12 + 16;
        }
        v4[48] = v13;
      }
    }
    uint64_t appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 0, 0x18uLL);
    appended[4] = v9;
    uint64_t v23 = *(void *)a1;
    unsigned int v24 = *(_DWORD *)(*(void *)a1 + 40);
    *((unsigned char *)appended + 20) = (v24 & 0x100000) != 0;
    uint64_t v25 = *(void *)(v23 + 352);
    uint64_t v26 = (uint64_t)appended - v25;
    uint64_t v27 = *(void *)(a1 + 168);
    unint64_t v28 = (*(void *)(v23 + 360) - v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v23 + 360) = v25 + v28;
    *(void *)(a1 + 168) = v28;
    char v29 = *(unsigned char *)(a1 + 176);
    *(unsigned char *)(a1 + 176) = 0;
    int v30 = *(_DWORD *)(a1 + 148);
    *(_DWORD *)(a1 + 148) = -1;
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(a1);
    uint64_t v31 = 0;
    if (!boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unwind_alts((std::string *)a1, v26))return v31; {
    if (*(unsigned char *)(a1 + 176))
    }
      *((unsigned char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = (v24 & 0x100000) != 0;
    uint64_t v32 = *(void *)a1;
    *(_DWORD *)(*(void *)a1 + 40) = v24;
    if (((v24 >> 20) & 1) != *(unsigned char *)(a1 + 24)) {
      *(unsigned char *)(a1 + 24) = (v24 & 0x100000) != 0;
    }
    *(unsigned char *)(a1 + 176) = v29;
    *(_DWORD *)(a1 + 148) = v30;
    int v3 = *(unsigned __int8 **)(a1 + 136);
    if (v3 != *(unsigned __int8 **)(a1 + 128))
    {
      if (*(unsigned char *)(**(void **)(a1 + 8) + *v3 + 32) == 2)
      {
        if (v9 && (v24 & 0x800000) != 0)
        {
          unint64_t v33 = (v9 - 1);
          uint64_t v34 = *(void *)(v32 + 376);
          if (v33 >= (*(void *)(v32 + 384) - v34) >> 4) {
            std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
          }
          *(void *)(v34 + 16 * v33 + 8) = &v3[-*(void *)(a1 + 120)];
        }
        else
        {
          LODWORD(v33) = v9 - 1;
        }
        *(void *)(a1 + 136) = v3 + 1;
        uint64_t v31 = 1;
        uint64_t v35 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 1, 0x18uLL);
        v35[4] = v9;
        *((unsigned char *)v35 + 20) = (*(_DWORD *)(*(void *)a1 + 40) & 0x100000) != 0;
        *(void *)(a1 + 160) = v26;
        *(void *)(a1 + 168) = v27;
        if (v33 <= 0x1E) {
          *(_DWORD *)(a1 + 36) |= 1 << v33;
        }
        return v31;
      }
      return 0;
    }
LABEL_46:
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 8, (const char *)&v3[-*(void *)(a1 + 120)]);
    return 0;
  }
  int v7 = *(unsigned __int8 *)(**(void **)(a1 + 8) + *v3 + 32);
  if (v7 == 6)
  {
    return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_perl_verb(a1);
  }
  else
  {
    if (v7 != 8) {
      goto LABEL_12;
    }
    return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_perl_extension(a1);
  }
}

_DWORD *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(uint64_t *a1, int a2, unint64_t a3)
{
  if (a2 == 13) {
    *((unsigned char *)a1 + 32) = 1;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 352);
  unint64_t v7 = (*(void *)(*a1 + 360) - v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(*a1 + 360) = v6 + v7;
  uint64_t v8 = a1[2];
  if (v8)
  {
    *(void *)(v8 + 8) = v7 - v8 + v6;
    uint64_t v5 = *a1;
  }
  uint64_t v9 = boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(v5 + 344), a3);
  a1[2] = v9;
  *(void *)(v9 + 8) = 0;
  BOOL result = (_DWORD *)a1[2];
  _DWORD *result = a2;
  return result;
}

uint64_t boost::re_detail_106800::raw_storage::extend(boost::re_detail_106800::raw_storage *this, unint64_t a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t result = *((void *)this + 2);
  if (v4 - result < a2)
  {
    boost::re_detail_106800::raw_storage::resize(this, result + a2 - *((void *)this + 1));
    uint64_t result = *((void *)this + 2);
  }
  *((void *)this + 2) = result + a2;
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unwind_alts(std::string *a1, uint64_t a2)
{
  if (a1[7].__r_.__value_.__r.__words[0] != *(void *)(a1->__r_.__value_.__r.__words[0] + 360)
                                           - *(void *)(a1->__r_.__value_.__r.__words[0] + 352))
    goto LABEL_8;
  uint64_t v4 = (char *)a1[7].__r_.__value_.__r.__words[2];
  std::string::pointer data = a1[8].__r_.__value_.__l.__data_;
  if (data == v4) {
    return 1;
  }
  if (*((void *)data - 1) <= a2 || (*(_DWORD *)(a1->__r_.__value_.__r.__words[0] + 40) & 0x1000003) == 0)
  {
    while (data != v4)
    {
      uint64_t v9 = *((void *)data - 1);
      std::string::size_type v7 = (std::string::size_type)(data - 8);
      uint64_t v8 = v9;
      if (v9 <= a2) {
        break;
      }
      a1[8].__r_.__value_.__r.__words[0] = v7;
      uint64_t v10 = *(void *)(a1->__r_.__value_.__r.__words[0] + 352);
      unint64_t v11 = (*(void *)(a1->__r_.__value_.__r.__words[0] + 360) - v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1->__r_.__value_.__r.__words[0] + 360) = v10 + v11;
      *(void *)(v10 + v8 + 16) = v11 - v8;
LABEL_8:
      uint64_t v4 = (char *)a1[7].__r_.__value_.__r.__words[2];
      std::string::pointer data = a1[8].__r_.__value_.__l.__data_;
    }
    return 1;
  }
  uint64_t v5 = (const char *)(a1[5].__r_.__value_.__r.__words[2] - a1[5].__r_.__value_.__r.__words[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Can't terminate a sub-expression with an alternation operator |.");
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail(a1, 17, v5, (uint64_t)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223D4B1F4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100](std::string *this, std::string *a2)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = (atomic_ullong *volatile *)&this[1];
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  if (a2 != this)
  {
    std::string::pointer data = (atomic_ullong *)a2[1].__r_.__value_.__l.__data_;
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2[1].__r_.__value_.__r.__words + 5);
    *uint64_t v5 = data;
    unsigned int v7 = a2[1].__r_.__value_.__s.__data_[12];
    this[1].__r_.__value_.__s.__data_[12] = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0) {
      atomic_fetch_add(*v5, 1uLL);
    }
  }
  return this;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void boost::re_detail_106800::raw_storage::resize(boost::re_detail_106800::raw_storage *this, unint64_t a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    uint64_t v4 = *(void *)this - v3;
  }
  else {
    uint64_t v4 = 1024;
  }
  do
  {
    unint64_t v5 = v4;
    v4 *= 2;
  }
  while (v5 < a2);
  size_t v6 = *((void *)this + 2) - v3;
  size_t v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (char *)operator new(v7);
  uint64_t v9 = v8;
  uint64_t v10 = (void *)*((void *)this + 1);
  if (v10) {
    memcpy(v8, *((const void **)this + 1), v6);
  }
  operator delete(v10);
  *((void *)this + 1) = v9;
  *((void *)this + 2) = &v9[v6];
  *(void *)this = &v9[v7];
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_alt(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 16);
  if (v2 && *v2 || (*(_DWORD *)(*(void *)a1 + 40) & 0x1000003) == 0)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 144);
    if (*(_DWORD *)(a1 + 152) < v5) {
      *(_DWORD *)(a1 + 152) = v5;
    }
    int v6 = *(_DWORD *)(a1 + 148);
    if ((v6 & 0x80000000) == 0) {
      *(_DWORD *)(a1 + 144) = v6;
    }
    ++*(void *)(a1 + 136);
    size_t v7 = (char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 16, 0x18uLL)- *(void *)(*(void *)a1 + 352);
    inserted = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::insert_state((void *)a1, *(void *)(a1 + 168), 17, 0x120uLL);
    uint64_t v9 = v7 + 288;
    uint64_t v10 = *(void *)(*(void *)a1 + 352);
    unint64_t v11 = (*(void *)(*(void *)a1 + 360) - v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(*(void *)a1 + 360) = v10 + v11;
    *((void *)inserted + 2) = v10 - (void)inserted + v11;
    *(void *)(a1 + 168) = *(void *)(*(void *)a1 + 360) - *(void *)(*(void *)a1 + 352);
    if (*(unsigned char *)(a1 + 176))
    {
      char v12 = *(unsigned char *)(a1 + 24);
      *((unsigned char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 28, 0x18uLL)+ 16) = v12;
    }
    unint64_t v13 = *(void *)(a1 + 200);
    int v14 = *(char **)(a1 + 192);
    if ((unint64_t)v14 >= v13)
    {
      unint64_t v16 = *(char **)(a1 + 184);
      uint64_t v17 = (v14 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = v13 - (void)v16;
      unint64_t v19 = (uint64_t)(v13 - (void)v16) >> 2;
      if (v19 <= v17 + 1) {
        unint64_t v19 = v17 + 1;
      }
      if (v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20)
      {
        char v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 200, v20);
        unint64_t v16 = *(char **)(a1 + 184);
        int v14 = *(char **)(a1 + 192);
      }
      else
      {
        char v21 = 0;
      }
      unint64_t v22 = (char **)&v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      *unint64_t v22 = v9;
      uint64_t v15 = v22 + 1;
      while (v14 != v16)
      {
        unsigned int v24 = (char *)*((void *)v14 - 1);
        v14 -= 8;
        *--unint64_t v22 = v24;
      }
      *(void *)(a1 + 184) = v22;
      *(void *)(a1 + 192) = v15;
      *(void *)(a1 + 200) = v23;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *(void *)int v14 = v9;
      uint64_t v15 = v14 + 8;
    }
    *(void *)(a1 + 192) = v15;
    return 1;
  }
  else
  {
    uint64_t v3 = (const char *)(*(void *)(a1 + 136) - *(void *)(a1 + 120));
    std::string::basic_string[abi:ne180100]<0>(__p, "A regular expression cannot start with the alternation operator |.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 17, v3, (uint64_t)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
}

void sub_223D4B5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended_escape(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 128);
  uint64_t v3 = *(char **)(a1 + 136);
  uint64_t v4 = v3 + 1;
  *(void *)(a1 + 136) = v3 + 1;
  if (v3 + 1 == v2)
  {
    uint64_t v10 = &v4[-*(void *)(a1 + 120)];
    std::string::basic_string[abi:ne180100]<0>(&__p, "Incomplete escape sequence found.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v10, (uint64_t)&__p);
LABEL_7:
    if (SHIBYTE(v54) < 0) {
      operator delete(__p);
    }
    return 0;
  }
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  int v7 = 0;
  int v8 = 0;
  switch(*(unsigned char *)(*v5 + *v4 + 32))
  {
    case 0x11:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_backref(a1);
    case 0x12:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 7;
      goto LABEL_36;
    case 0x13:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 8;
      goto LABEL_36;
    case 0x14:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 9;
      goto LABEL_36;
    case 0x15:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 10;
      goto LABEL_36;
    case 0x16:
      goto LABEL_45;
    case 0x17:
      int v7 = 1;
      goto LABEL_45;
    case 0x18:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 11;
      goto LABEL_36;
    case 0x19:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 12;
      goto LABEL_36;
    case 0x21:
      if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) == 0) {
        goto LABEL_44;
      }
      goto LABEL_50;
    case 0x30:
      return boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_QE(a1);
    case 0x31:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 19;
      goto LABEL_36;
    case 0x32:
      *(void *)(a1 + 136) = v3 + 2;
      int v16 = *(_DWORD *)(*(void *)a1 + 40);
      BOOL v11 = 1;
      if ((v16 & 0x1000) != 0) {
        char v17 = 2;
      }
      else {
        char v17 = 1;
      }
      if ((v16 & 0x2000) != 0) {
        char v18 = 0;
      }
      else {
        char v18 = v17;
      }
      *((unsigned char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 5, 0x18uLL)+ 16) = v18;
      return v11;
    case 0x33:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 20;
      goto LABEL_36;
    case 0x34:
      *(void *)(a1 + 136) = v3 + 2;
      char v12 = (uint64_t *)a1;
      int v13 = 21;
LABEL_36:
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(v12, v13, 0x10uLL);
      return 1;
    case 0x36:
      goto LABEL_38;
    case 0x37:
      int v8 = 1;
LABEL_38:
      unint64_t v20 = v3 + 2;
      *(void *)(a1 + 136) = v3 + 2;
      if (v3 + 2 == v2)
      {
        char v26 = &v2[-*(void *)(a1 + 120)];
        std::string::basic_string[abi:ne180100]<0>(&__p, "Incomplete property escape found.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v26, (uint64_t)&__p);
        goto LABEL_7;
      }
      if (*(unsigned char *)(v6 + *v20 + 32) == 15)
      {
        while (*(unsigned char *)(v6 + *v20 + 32) != 16)
        {
          *(void *)(a1 + 136) = ++v20;
          if (v20 == v2)
          {
            char v21 = &v2[-*(void *)(a1 + 120)];
            std::string::basic_string[abi:ne180100]<0>(&__p, "Closing } missing from property escape sequence.");
            boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v21, (uint64_t)&__p);
            goto LABEL_7;
          }
        }
        *(void *)(a1 + 136) = v20 + 1;
        int v27 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v6, v3 + 3, v20);
      }
      else
      {
        int v27 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v6, v3 + 2, v3 + 3);
        ++*(void *)(a1 + 136);
      }
      if (!v27)
      {
        size_t v37 = (const char *)(*(void *)(a1 + 136) - *(void *)(a1 + 120));
        std::string::basic_string[abi:ne180100]<0>(&__p, "Escape sequence was neither a valid property nor a valid character class name.");
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, v37, (uint64_t)&__p);
        goto LABEL_7;
      }
      std::string __p = &v53;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      size_t v55 = 0;
      v56 = 0;
      uint64_t v57 = 0;
      v63 = 0;
      uint64_t v64 = 0;
      v62 = &v63;
      __int16 v58 = 0;
      int v60 = 0;
      if (v8) {
        LOBYTE(v58) = 1;
      }
      int v59 = v27;
      char v61 = 0;
      uint64_t appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&__p);
      BOOL v11 = appended != 0;
      if (!appended) {
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, (const char *)(*(void *)(a1 + 136) - *(void *)(a1 + 120)));
      }
      boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::~basic_char_set((uint64_t)&__p);
      return v11;
    case 0x39:
      if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) != 0) {
        goto LABEL_44;
      }
      unint64_t v28 = v3 + 2;
      *(void *)(a1 + 136) = v3 + 2;
      if (v3 + 2 == v2) {
        goto LABEL_102;
      }
      uint64_t v29 = *v28;
      unsigned int v30 = *(unsigned __int8 *)(v6 + v29 + 32);
      BOOL v31 = v30 == 20;
      if (v30 == 25) {
        BOOL v31 = 1;
      }
      char v32 = v30 == 15 || v31;
      if (v30 > 0x19 || ((1 << v30) & 0x2108000) == 0)
      {
        int v35 = 0;
      }
      else
      {
        unint64_t v28 = v3 + 3;
        *(void *)(a1 + 136) = v3 + 3;
        if (v3 + 3 == v2)
        {
LABEL_102:
          int v46 = &v2[-*(void *)(a1 + 120)];
          std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended_escape(void)::incomplete_message[0]);
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v46, (uint64_t)&__p);
          goto LABEL_7;
        }
        if (v30 == 20) {
          int v34 = 21;
        }
        else {
          int v34 = 25;
        }
        if (v30 == 15) {
          int v35 = 16;
        }
        else {
          int v35 = v34;
        }
        LODWORD(v29) = *v28;
      }
      if (v29 == 45)
      {
        *(void *)(a1 + 136) = ++v28;
        if (v28 == v2) {
          goto LABEL_102;
        }
      }
      char v51 = (unsigned __int8 *)v28;
      uint64_t v38 = boost::cpp_regex_traits<char>::toi((uint64_t)v5, &v51, v2, 10);
      char v39 = v32 ^ 1;
      if (v38 >= 0) {
        char v39 = 1;
      }
      if ((v39 & 1) == 0)
      {
        uint64_t v41 = *(unsigned __int8 **)(a1 + 128);
        std::string::size_type v40 = *(char **)(a1 + 136);
        if (v40 == (char *)v41)
        {
          uint64_t v38 = 10000;
        }
        else
        {
          uint64_t v42 = **(void **)(a1 + 8);
          int v43 = *(unsigned __int8 **)(a1 + 136);
          while (v35 != *(unsigned __int8 *)(v42 + *v43 + 32))
          {
            *(void *)(a1 + 136) = ++v43;
            if (v43 == v41)
            {
              int v43 = v41;
              break;
            }
          }
          if (v40 == (char *)v43)
          {
            uint64_t v38 = 10000;
          }
          else
          {
            unint64_t v44 = 0;
            do
            {
              uint64_t v45 = *v40++;
              v44 ^= (v44 << 6) + (v44 >> 2) + 2654435769u + v45;
            }
            while (v40 != (char *)v43);
            uint64_t v38 = v44 % 0x7FFFD8EE + 10000;
          }
          std::string::size_type v40 = (char *)v43;
        }
        char v51 = (unsigned __int8 *)v40;
      }
      if (v29 == 45) {
        uint64_t v38 = (*(_DWORD *)(a1 + 144) + 1) - v38;
      }
      if ((unint64_t)(v38 - 1) > 0x1E)
      {
        if (v38 >= 10001
          && (int)boost::re_detail_106800::named_subexpressions::get_id(*(unsigned int ***)a1, v38) >= 1
          && (int)boost::re_detail_106800::named_subexpressions::get_id(*(unsigned int ***)a1, v38) <= 32)
        {
          unsigned int v49 = *(_DWORD *)(a1 + 36);
          if ((v49 >> (boost::re_detail_106800::named_subexpressions::get_id(*(unsigned int ***)a1, v38) - 1))) {
            goto LABEL_111;
          }
        }
      }
      else if ((*(_DWORD *)(a1 + 36) >> (v38 - 1)))
      {
LABEL_111:
        *(void *)(a1 + 136) = v51;
        v47 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 13, 0x18uLL);
        v47[4] = v38;
        *((unsigned char *)v47 + 20) = (*(_DWORD *)(*(void *)a1 + 40) & 0x100000) != 0;
        int v48 = v51;
        *(void *)(a1 + 136) = v51;
        BOOL v11 = 1;
        if (v30 > 0x19 || ((1 << v30) & 0x2108000) == 0) {
          return v11;
        }
        if (v48 != *(unsigned __int8 **)(a1 + 128) && v35 == *(unsigned __int8 *)(**(void **)(a1 + 8) + *v48 + 32))
        {
          *(void *)(a1 + 136) = v48 + 1;
          return v11;
        }
        v50 = (const char *)&v48[-*(void *)(a1 + 120)];
        std::string::basic_string[abi:ne180100]<0>(&__p, boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended_escape(void)::incomplete_message[0]);
        boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 5, v50, (uint64_t)&__p);
        goto LABEL_7;
      }
      boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 6, (const char *)(*(void *)(a1 + 136) - *(void *)(a1 + 120)));
      return 0;
    case 0x3A:
      if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) != 0) {
        goto LABEL_44;
      }
      int v14 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 0, 0x18uLL);
      v14[4] = -5;
      uint64_t v15 = *(unsigned int ***)a1;
      *((unsigned char *)v14 + 20) = (*(_DWORD *)(*(void *)a1 + 40) & 0x100000) != 0;
      v15[45] = (unsigned int *)((char *)v15[44] + (((char *)v15[45] - (char *)v15[44] + 7) & 0xFFFFFFFFFFFFFFF8));
      ++*(void *)(a1 + 136);
      return 1;
    case 0x3B:
      if ((*(_WORD *)(*(void *)a1 + 40) & 0x203) == 0)
      {
        uint64_t v19 = *(void *)(a1 + 120);
        *(void *)(a1 + 120) = "(?>\\x0D\\x0A?|[\\x0A\\x0B\\x0C\\x85])";
        *(void *)(a1 + 128) = "";
        *(void *)(a1 + 136) = "(?>\\x0D\\x0A?|[\\x0A\\x0B\\x0C\\x85])";
        uint64_t result = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(a1);
        *(void *)(a1 + 128) = v2;
        *(void *)(a1 + 136) = v3 + 2;
        *(void *)(a1 + 120) = v19;
        return result;
      }
LABEL_44:
      int v7 = 0;
LABEL_45:
      int v22 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(v6, v4, v3 + 2);
      if (v22)
      {
        std::string __p = &v53;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        size_t v55 = 0;
        v56 = 0;
        uint64_t v57 = 0;
        v63 = 0;
        uint64_t v64 = 0;
        v62 = &v63;
        __int16 v58 = 0;
        int v60 = 0;
        if (v7) {
          LOBYTE(v58) = 1;
        }
        int v59 = v22;
        char v61 = 0;
        uint64_t v23 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_set(a1, (uint64_t)&__p);
        BOOL v11 = v23 != 0;
        uint64_t v24 = *(void *)(a1 + 136);
        if (v23) {
          *(void *)(a1 + 136) = v24 + 1;
        }
        else {
          boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 4, (const char *)(v24 - *(void *)(a1 + 120)));
        }
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v62, v63);
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&__p, v53);
      }
      else
      {
LABEL_50:
        uint64_t v25 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unescape_character((std::string *)a1);
        boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal((void *)a1, v25);
        return 1;
      }
      return v11;
    default:
      goto LABEL_50;
  }
}

void sub_223D4BEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::basic_char_set<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::add_range(uint64_t a1, char *a2, char *a3)
{
  int v7 = (char **)(a1 + 40);
  uint64_t v6 = *(char **)(a1 + 40);
  int v8 = (void **)(a1 + 24);
  uint64_t v9 = *(char **)(a1 + 32);
  if (v9 >= v6)
  {
    BOOL v11 = (char *)*v8;
    uint64_t v12 = v9 - (unsigned char *)*v8;
    if (v12 <= -3) {
      goto LABEL_43;
    }
    uint64_t v13 = v12 >> 1;
    unint64_t v14 = v6 - v11;
    if (v14 <= (v12 >> 1) + 1) {
      unint64_t v15 = v13 + 1;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v16 = v15;
    }
    if (v16)
    {
      char v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)v7, v16);
      BOOL v11 = *(char **)(a1 + 24);
      uint64_t v9 = *(char **)(a1 + 32);
    }
    else
    {
      char v17 = 0;
    }
    char v18 = &v17[2 * v13];
    uint64_t v6 = &v17[2 * v16];
    *char v18 = *a2;
    v18[1] = a2[1];
    uint64_t v10 = v18 + 2;
    while (v9 != v11)
    {
      char v19 = *(v9 - 2);
      v9 -= 2;
      *(v18 - 2) = v19;
      v18 -= 2;
      v18[1] = v9[1];
    }
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v6;
    if (v11)
    {
      operator delete(v11);
      uint64_t v6 = *v7;
    }
  }
  else
  {
    *uint64_t v9 = *a2;
    v9[1] = a2[1];
    uint64_t v10 = v9 + 2;
  }
  *(void *)(a1 + 32) = v10;
  if (v10 < v6)
  {
    *uint64_t v10 = *a3;
    v10[1] = a3[1];
    unint64_t v20 = v10 + 2;
    goto LABEL_35;
  }
  char v21 = (char *)*v8;
  uint64_t v22 = v10 - (unsigned char *)*v8;
  if (v22 <= -3) {
LABEL_43:
  }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  uint64_t v23 = v22 >> 1;
  unint64_t v24 = v6 - v21;
  if (v24 <= (v22 >> 1) + 1) {
    unint64_t v25 = v23 + 1;
  }
  else {
    unint64_t v25 = v24;
  }
  if (v24 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v26 = v25;
  }
  if (v26)
  {
    int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)v7, v26);
    char v21 = *(char **)(a1 + 24);
    uint64_t v10 = *(char **)(a1 + 32);
  }
  else
  {
    int v27 = 0;
  }
  unint64_t v28 = &v27[2 * v23];
  uint64_t v29 = &v27[2 * v26];
  *unint64_t v28 = *a3;
  v28[1] = a3[1];
  unint64_t v20 = v28 + 2;
  while (v10 != v21)
  {
    char v30 = *(v10 - 2);
    v10 -= 2;
    *(v28 - 2) = v30;
    v28 -= 2;
    v28[1] = v10[1];
  }
  *(void *)(a1 + 24) = v28;
  *(void *)(a1 + 32) = v20;
  *(void *)(a1 + 40) = v29;
  if (v21) {
    operator delete(v21);
  }
LABEL_35:
  *(void *)(a1 + 32) = v20;
  if (a2[1])
  {
    *(unsigned char *)(a1 + 49) = 1;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)a1, a2, a2);
    if (a2[1]) {
      *(unsigned char *)(a1 + 49) = 1;
    }
    *(unsigned char *)(a1 + 60) = 0;
  }
  if (a3[1])
  {
    *(unsigned char *)(a1 + 49) = 1;
    std::__tree<boost::re_detail_106800::digraph<char>>::__emplace_unique_key_args<boost::re_detail_106800::digraph<char>,boost::re_detail_106800::digraph<char> const&>((uint64_t **)a1, a3, a3);
    if (a3[1]) {
      *(unsigned char *)(a1 + 49) = 1;
    }
  }
  *(unsigned char *)(a1 + 60) = 0;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

uint64_t boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal(uint64_t a1)
{
  if ((*(_DWORD *)(*(void *)a1 + 40) & 0xA03) != 0x800
    || !boost::cpp_regex_traits<char>::isctype(*(void *)(a1 + 8), **(char **)(a1 + 136), *(_DWORD *)(a1 + 84)))
  {
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal((void *)a1, **(char **)(a1 + 136));
  }
  ++*(void *)(a1 + 136);
  return 1;
}

char *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_literal(void *a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)a1[2];
  if (v4 && *v4 == 2)
  {
    unsigned int v5 = (char *)v4 - *(void *)(*a1 + 352);
    boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(*a1 + 344), 1uLL);
    uint64_t appended = &v5[*(void *)(*a1 + 352)];
    a1[2] = appended;
    if (*((unsigned char *)a1 + 24))
    {
      uint64_t v7 = *(void *)(*(void *)a1[1] + 8);
      LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, a2);
    }
    uint64_t v8 = *((unsigned int *)appended + 4);
    appended[v8 + 24] = a2;
    *((_DWORD *)appended + 4) = v8 + 1;
  }
  else
  {
    uint64_t appended = (char *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(a1, 2, 0x19uLL);
    *((_DWORD *)appended + 4) = 1;
    if (*((unsigned char *)a1 + 24))
    {
      uint64_t v9 = *(void *)(*(void *)a1[1] + 8);
      LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, a2);
    }
    appended[24] = a2;
  }
  return appended;
}

void __cxx_global_var_init_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_3()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_4()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_5()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_6()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_7()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_8()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_9()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_10()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_11()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_12()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_13()
{
  {
    boost::interprocess::mapped_region::page_size_holder<0>::PageSize = sysconf(29);
  }
}

void __cxx_global_var_init_4_14()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_15()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_16()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_17()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_18()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_19()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_20()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_21()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_22()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_23()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_24()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_25()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_26()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_27()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_28()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_29()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_30()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_31()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_32()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_33()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_34()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_35()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_36()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_37()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_4_38()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void _GLOBAL__sub_I_transform_to_flat_dictionary_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  uint64_t v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  unint64_t v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D4E594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087EC8 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D4E740()
{
}

void sub_223D4E750()
{
}

void sub_223D4E760()
{
}

void sub_223D4E770()
{
}

void sub_223D4E780()
{
}

void *std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::do_assign(a1);
}

void sub_223D4E858(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 8));
  _Unwind_Resume(a1);
}

void boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::do_assign(void *a1)
{
  long long v1 = 0uLL;
  if (*a1) {
    operator new();
  }
  operator new();
}

void sub_223D4E9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x22A614FA0](v4, 0x1070C40DD0CB916);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::~shared_count(atomic_uint **this)
{
  long long v1 = *this;
  if (v1) {
    boost::detail::sp_counted_base::release(v1);
  }
}

atomic_uint *boost::detail::sp_counted_base::release(atomic_uint *this)
{
  if (atomic_fetch_add(this + 2, 0xFFFFFFFF) == 1)
  {
    long long v1 = this;
    uint64_t v2 = this + 3;
    this = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)this + 16))(this);
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
    {
      long long v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 24);
      return (atomic_uint *)v3(v1);
    }
  }
  return this;
}

void boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::assign(uint64_t a1, const void *a2, uint64_t a3, unsigned int a4)
{
  boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator((uint64_t)v7, a1);
  unint64_t v10 = 0xFFFFFFFF00000000;
  int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v14 = 0;
  memset(__p, 0, sizeof(__p));
  int v16 = 0;
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse((uint64_t)v7, a2, a3, a4);
  if (*(void **)((char *)__p + 4))
  {
    *(void **)((char *)&__p[1] + 4) = *(void **)((char *)__p + 4);
    operator delete(*(void **)((char *)__p + 4));
  }
  if (v8)
  {
    std::string::size_type v9 = v8;
    operator delete(v8);
  }
}

void sub_223D4EB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(uint64_t a1, uint64_t a2)
{
  long long v3 = *(uint64_t **)(a2 + 24);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a2 + 360) = *(void *)(a2 + 352);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 80) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(*v3, boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::w, boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::s);
  *(_DWORD *)(a1 + 84) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(void **)(a1 + 8), boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::s, boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::l);
  *(_DWORD *)(a1 + 88) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(void **)(a1 + 8), boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::l, boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::u);
  *(_DWORD *)(a1 + 92) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(void **)(a1 + 8), boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::u, boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::a);
  *(_DWORD *)(a1 + 96) = boost::re_detail_106800::cpp_regex_traits_implementation<char>::lookup_classname(**(void **)(a1 + 8), boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex_creator(boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>> *)::a, "(?>\\x0D\\x0A?|[\\x0A\\x0B\\x0C\\x85])");
  *(_DWORD *)(*(void *)a1 + 368) = *(_DWORD *)(a1 + 80);
  return a1;
}

void sub_223D4EC90(_Unwind_Exception *exception_object)
{
  long long v3 = v2;
  std::string::size_type v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::finalize(uint64_t *result, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(*result + 44))
  {
    uint64_t v5 = (uint64_t)result;
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state(result, 6, 0x10uLL);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 56) = a3 - (void)a2;
    long long v7 = (unsigned char *)boost::re_detail_106800::raw_storage::extend((boost::re_detail_106800::raw_storage *)(v6 + 344), a3 - (void)a2 + 1);
    uint64_t v8 = v7;
    *(void *)(*(void *)v5 + 48) = v7;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      memmove(v7, a2, v9);
    }
    v8[v9] = 0;
    uint64_t v10 = *(void *)v5;
    *(_DWORD *)(v10 + 44) = 0;
    uint64_t v11 = *(void *)(v10 + 352);
    *(void *)(v10 + 72) = v11;
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fixup_pointers(v5, v11);
    uint64_t v13 = *(void *)v5;
    if (*(unsigned char *)(v5 + 48))
    {
      *(unsigned char *)(v13 + 400) = 1;
      uint64_t result = (uint64_t *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fixup_recursions(v5, *(int **)(v13 + 72));
      uint64_t v13 = *(void *)v5;
      if (*(_DWORD *)(*(void *)v5 + 44)) {
        return result;
      }
    }
    else
    {
      *(unsigned char *)(v13 + 400) = 0;
    }
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmaps(v5, *(int **)(v13 + 72), v12);
    char v14 = *(_OWORD **)v5;
    __n128 v15 = 0uLL;
    *(_OWORD *)((char *)v14 + 84) = 0u;
    char v14 = (_OWORD *)((char *)v14 + 84);
    v14[14] = 0u;
    v14[15] = 0u;
    v14[12] = 0u;
    v14[13] = 0u;
    v14[10] = 0u;
    v14[11] = 0u;
    v14[8] = 0u;
    v14[9] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v14[4] = 0u;
    v14[5] = 0u;
    char v14[2] = 0u;
    v14[3] = 0u;
    v14[1] = 0u;
    uint64_t v16 = *(void *)v5;
    *(_DWORD *)(*(void *)v5 + 340) = 0;
    *(void *)(v5 + 40) = 0;
    if (*(unsigned char *)(v5 + 48))
    {
      unint64_t v17 = *(void *)(v16 + 64) + 1;
      char v20 = 0;
      std::vector<unsigned char>::assign((char **)(v5 + 56), v17, &v20);
      uint64_t v16 = *(void *)v5;
    }
    boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v5, *(void *)(v16 + 72), (char *)(v16 + 84), (_DWORD *)(v16 + 340), 3u, v15);
    int restart_type = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_restart_type(v5, *(void *)(*(void *)v5 + 72));
    uint64_t v19 = *(void *)v5;
    *(_DWORD *)(v19 + 80) = restart_type;
    return (uint64_t *)boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::probe_leading_repeat(v5, *(int **)(v19 + 72));
  }
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::probe_leading_repeat(uint64_t result, int *a2)
{
  do
  {
    unsigned int v2 = *a2;
    if (*a2 > 0x19) {
      break;
    }
    if (((1 << v2) & 0x201F9A) == 0)
    {
      if (v2)
      {
        if (((1 << v2) & 0x3C00000) != 0 && !*(unsigned char *)(result + 32)) {
          *((unsigned char *)a2 + 308) = 1;
        }
        return result;
      }
      unsigned int v3 = a2[4];
      if ((v3 & 0x80000000) != 0)
      {
        if (v3 < 0xFFFFFFFE)
        {
          if (v3 != -3) {
            return result;
          }
          uint64_t v4 = (int **)(a2 + 2);
        }
        else
        {
          uint64_t v4 = (int **)(*((void *)a2 + 1) + 16);
        }
        a2 = *v4;
      }
    }
    a2 = (int *)*((void *)a2 + 1);
  }
  while (a2);
  return result;
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_restart_type(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  while (1)
  {
    int v2 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 >= 2u) {
      break;
    }
    a2 = *(void *)(a2 + 8);
    if (!a2) {
      return 0;
    }
  }
  if (v2 > 10)
  {
    if (v2 == 11)
    {
      return 3;
    }
    else
    {
      if (v2 != 21) {
        return 0;
      }
      return 4;
    }
  }
  else
  {
    if (v2 != 3) {
      return v2 == 9;
    }
    return 2;
  }
}

void boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmaps(uint64_t a1, int *a2, __n128 a3)
{
  char v3 = *(unsigned char *)(a1 + 24);
  std::string::size_type v29 = 0;
  char v30 = 0;
  BOOL v31 = 0;
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      int v6 = *v4;
      if (*v4 <= 0x1C)
      {
        if (((1 << v6) & 0x3C60000) != 0)
        {
          char v7 = *(unsigned char *)(a1 + 24);
          uint64_t v8 = v30;
          if (v30 >= (__n128 *)v31)
          {
            uint64_t v10 = v30 - v29;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v12 = v31 - (char *)v29;
            if ((v31 - (char *)v29) >> 3 > v11) {
              unint64_t v11 = v12 >> 3;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13) {
              char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v31, v13);
            }
            else {
              char v14 = 0;
            }
            __n128 v15 = &v14[16 * v10];
            *__n128 v15 = v7;
            *((void *)v15 + 1) = v4;
            unint64_t v17 = v29;
            uint64_t v16 = v30;
            char v18 = (__n128 *)v15;
            if (v30 != v29)
            {
              do
              {
                a3 = v16[-1];
                v18[-1] = a3;
                --v18;
                --v16;
              }
              while (v16 != v17);
              uint64_t v16 = v29;
            }
            size_t v9 = (__n128 *)(v15 + 16);
            std::string::size_type v29 = v18;
            char v30 = (__n128 *)(v15 + 16);
            BOOL v31 = &v14[16 * v13];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            v30->n128_u8[0] = v7;
            v8->n128_u64[1] = (unint64_t)v4;
            size_t v9 = v8 + 1;
          }
          char v30 = v9;
        }
        else if (v6 == 26)
        {
          int v19 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::calculate_backstep(a1, *((void *)v4 + 1));
          v4[4] = v19;
          if (v19 < 0)
          {
            uint64_t v20 = *(void *)a1;
            if (!*(_DWORD *)(*(void *)a1 + 44)) {
              *(_DWORD *)(v20 + 44) = 2;
            }
            *(void *)(v20 + 48) = 0;
            *(void *)(v20 + 56) = 0;
            if ((*(unsigned char *)(v20 + 42) & 4) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid lookbehind assertion encountered in the regular expression.");
              boost::regex_error::regex_error(v27, &__p, 2, 0);
              boost::regex_error::raise((boost::regex_error *)v27);
            }
          }
        }
        else if (v6 == 28)
        {
          *(unsigned char *)(a1 + 24) = *((unsigned char *)v4 + 16);
        }
      }
      uint64_t v4 = (int *)*((void *)v4 + 1);
    }
    while (v4);
    for (uint64_t i = v29; v30 != v29; uint64_t i = v30)
    {
      if (*(unsigned char *)(a1 + 48))
      {
        unint64_t v22 = *(void *)(*(void *)a1 + 64) + 1;
        LOBYTE(v27[0].__vftable) = 0;
        std::vector<unsigned char>::assign((char **)(a1 + 56), v22, (char *)v27);
      }
      unsigned __int8 v23 = v30 - 1;
      *(unsigned char *)(a1 + 24) = v30[-1].n128_u8[0];
      uint64_t v24 = v23->n128_i64[1];
      char v30 = v23;
      *(void *)(a1 + 40) = 0;
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(a1, *(void *)(v24 + 8), (char *)(v24 + 24), (_DWORD *)(v24 + 280), 1u, a3);
      *(void *)(a1 + 40) = 0;
      if (*(unsigned char *)(a1 + 48))
      {
        unint64_t v26 = *(void *)(*(void *)a1 + 64) + 1;
        LOBYTE(v27[0].__vftable) = 0;
        std::vector<unsigned char>::assign((char **)(a1 + 56), v26, (char *)v27);
      }
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(a1, *(void *)(v24 + 16), (char *)(v24 + 24), (_DWORD *)(v24 + 280), 2u, v25);
      *(_DWORD *)uint64_t v24 = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_repeat_type(a1, (unsigned int *)v24);
    }
    *(unsigned char *)(a1 + 24) = v3;
    if (i)
    {
      char v30 = i;
      operator delete(i);
    }
  }
}

void sub_223D4F1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(uint64_t result, uint64_t a2, char *a3, _DWORD *a4, unsigned int a5, __n128 a6)
{
  if (!a2) {
    return result;
  }
  uint64_t v7 = a2;
  uint64_t v8 = result;
  __n128 v9 = (__n128)vdupq_n_s8(a5);
  unsigned int v49 = a5;
  while (2)
  {
    uint64_t v10 = (__n128 *)(a3 + 1);
LABEL_4:
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    BOOL v14 = *(unsigned char *)(v8 + 24) != 0;
    int v15 = 1;
LABEL_5:
    int v16 = *(_DWORD *)v7;
    switch(*(_DWORD *)v7)
    {
      case 0:
        if (*(_DWORD *)(v7 + 16) != -3) {
          goto LABEL_33;
        }
        uint64_t v17 = *(void *)(*(void *)(v7 + 8) + 8);
        goto LABEL_34;
      case 1:
        uint64_t v20 = *(int *)(v7 + 16);
        if ((v20 & 0x80000000) != 0)
        {
          if (!a3) {
            goto LABEL_128;
          }
          if (*a3)
          {
            for (uint64_t i = 0; i != 256; i += 16)
              *(int8x16_t *)&a3[i] = vorrq_s8(*(int8x16_t *)&a3[i], (int8x16_t)v9);
            goto LABEL_126;
          }
          goto LABEL_121;
        }
        if (v13 && v12 && v12 == v20)
        {
          uint64_t v13 = 0;
          uint64_t v17 = v11;
        }
        else
        {
          if (v20)
          {
            if (*(unsigned char *)(*(void *)v8 + 400))
            {
              uint64_t v22 = *(void *)(*(void *)v8 + 72);
              if (v22)
              {
                while (1)
                {
                  if (*(_DWORD *)v22 == 29)
                  {
                    unsigned __int8 v23 = *(_DWORD **)(v22 + 16);
                    if (!*v23 && v23[4] == v20) {
                      break;
                    }
                  }
                  uint64_t v22 = *(void *)(v22 + 8);
                  if (!v22) {
                    goto LABEL_33;
                  }
                }
                uint64_t v24 = *(void *)(v8 + 56);
                if ((*(unsigned char *)(v24 + v20) & 2) == 0)
                {
                  *(unsigned char *)(v24 + v20) |= 2u;
                  __n128 v25 = a4;
                  __n128 v47 = v9;
                  uint64_t result = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v8, *(void *)(v22 + 8), a3, a4, v49, a6, v9);
                  __n128 v9 = v47;
                  a4 = v25;
                  a5 = v49;
                }
              }
            }
          }
LABEL_33:
          uint64_t v17 = *(void *)(v7 + 8);
        }
        goto LABEL_34;
      case 2:
        if (a3)
        {
          uint64_t v32 = 0;
          *a3 |= 4u;
          int v33 = *(unsigned __int8 *)(v7 + 24);
          do
          {
            if (v14)
            {
              uint64_t v34 = *(void *)(**(void **)(v8 + 8) + 8);
              uint64_t result = (*(uint64_t (**)(uint64_t, void, __n128, __n128))(*(void *)v34 + 40))(v34, (char)v32, a6, v9);
              LOBYTE(a5) = v49;
            }
            else
            {
              uint64_t result = v32;
            }
            if (v33 == result) {
              a3[v32] |= a5;
            }
            ++v32;
          }
          while (v32 != 256);
        }
        return result;
      case 4:
        if (a3)
        {
          *a3 |= 4u;
          a3[10] |= a5;
          a3[13] |= a5;
          a3[12] |= a5;
          a3[133] |= a5;
        }
        if (a4)
        {
          a3 = 0;
          uint64_t v7 = *(void *)(v7 + 8);
          if (v7) {
            continue;
          }
        }
        return result;
      case 5:
        goto LABEL_116;
      case 6:
      case 0x1F:
        if (!a3) {
          goto LABEL_128;
        }
        if (!*a3) {
          goto LABEL_121;
        }
        for (uint64_t j = 0; j != 256; j += 16)
          *(int8x16_t *)&a3[j] = vorrq_s8(*(int8x16_t *)&a3[j], (int8x16_t)v9);
        goto LABEL_126;
      case 9:
        uint64_t result = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v8, *(void *)(v7 + 8), a3, a4, v49, a6, v9);
        if (a3)
        {
          uint64_t v35 = 0;
          *a3 |= 4u;
          do
          {
            uint64_t result = boost::cpp_regex_traits<char>::isctype(*(void *)(v8 + 8), (char)v35, *(_DWORD *)(v8 + 80));
            if ((result & 1) == 0) {
              a3[v35] &= ~(_BYTE)v49;
            }
            ++v35;
          }
          while (v35 != 256);
        }
        return result;
      case 0xA:
        uint64_t result = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v8, *(void *)(v7 + 8), a3, a4, v49, a6, v9);
        if (a3)
        {
          uint64_t v36 = 0;
          *a3 |= 4u;
          do
          {
            uint64_t result = boost::cpp_regex_traits<char>::isctype(*(void *)(v8 + 8), (char)v36, *(_DWORD *)(v8 + 80));
            if (result) {
              a3[v36] &= ~(_BYTE)v49;
            }
            ++v36;
          }
          while (v36 != 256);
        }
        return result;
      case 0xC:
        goto LABEL_128;
      case 0xD:
        goto LABEL_114;
      case 0xE:
        if (!a3) {
          return result;
        }
        if (*(unsigned char *)(v7 + 37))
        {
          uint64_t v37 = 0;
          *a3 |= 4u;
          do
          {
            LOBYTE(v50.__vftable) = v37;
            uint64_t result = (uint64_t)boost::re_detail_106800::re_is_set_member<char *,char,boost::regex_traits<char,boost::cpp_regex_traits<char>>,unsigned int>((std::string::value_type *)&v50, (std::string::value_type *)&v50.__vftable + 1, v7, *(void *)v8, v14);
            if (&v50 != (std::runtime_error *)result) {
              a3[v37] |= v49;
            }
            ++v37;
          }
          while (v37 != 256);
          return result;
        }
        if (!*a3) {
          goto LABEL_134;
        }
        for (uint64_t k = 0; k != 256; k += 16)
          *(int8x16_t *)&a3[k] = vorrq_s8(*(int8x16_t *)&a3[k], (int8x16_t)v9);
        goto LABEL_120;
      case 0xF:
        if (a3)
        {
          uint64_t v38 = 0;
          *a3 |= 4u;
          do
          {
            if (v14)
            {
              uint64_t v39 = *(void *)(**(void **)(v8 + 8) + 8);
              uint64_t result = (*(uint64_t (**)(uint64_t, void, __n128, __n128))(*(void *)v39 + 40))(v39, (char)v38, a6, v9);
              LOBYTE(a5) = v49;
            }
            else
            {
              uint64_t result = v38;
            }
            if (*(unsigned char *)(v7 + result + 16)) {
              a3[v38] |= a5;
            }
            ++v38;
          }
          while (v38 != 256);
        }
        return result;
      case 0x10:
        uint64_t v17 = *(void *)(v7 + 16);
        int v15 = -1;
        goto LABEL_34;
      case 0x11:
      case 0x12:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
        if ((*(unsigned char *)(v7 + 24) & 4) != 0)
        {
          if (a3)
          {
            uint64_t v46 = 0;
            *a3 |= 4u;
            do
            {
              if ((*(unsigned char *)(v7 + 24 + v46) & 3) != 0) {
                a3[v46] |= a5;
              }
              ++v46;
            }
            while (v46 != 256);
          }
          if (!a4 || (*(unsigned char *)(v7 + 280) & 3) == 0) {
            return result;
          }
          goto LABEL_129;
        }
        __n128 v48 = v9;
        if ((v16 - 22) >= 4 && v16 != 18) {
          goto LABEL_48;
        }
        unsigned int v27 = *(_DWORD *)(v7 + 304);
        if (v27 > 0x3F || (uint64_t v28 = *(void *)(v8 + 40), v29 = 1 << v27, (v28 & v29) != 0))
        {
          if (!a3) {
            goto LABEL_128;
          }
          if (*a3)
          {
            for (uint64_t m = 0; m != 256; m += 16)
              *(int8x16_t *)&a3[m] = vorrq_s8(*(int8x16_t *)&a3[m], (int8x16_t)v9);
LABEL_126:
            char v43 = *a3;
LABEL_127:
            *a3 = v43 | 4;
LABEL_128:
            if (!a4) {
              return result;
            }
LABEL_129:
            *a4 |= a5;
            return result;
          }
LABEL_121:
          *((__n128 *)a3 + 15) = v9;
          *(__n128 *)(a3 + 209) = v9;
          *(__n128 *)(a3 + 225) = v9;
          *(__n128 *)(a3 + 177) = v9;
          *(__n128 *)(a3 + 193) = v9;
          *(__n128 *)(a3 + 145) = v9;
          *(__n128 *)(a3 + 161) = v9;
          *(__n128 *)(a3 + 113) = v9;
          *(__n128 *)(a3 + 129) = v9;
          *(__n128 *)(a3 + 81) = v9;
          *(__n128 *)(a3 + 97) = v9;
          *(__n128 *)(a3 + 49) = v9;
          *(__n128 *)(a3 + 65) = v9;
          *(__n128 *)(a3 + 17) = v9;
          *(__n128 *)(a3 + 33) = v9;
          *uint64_t v10 = v9;
          char v43 = a5;
          goto LABEL_127;
        }
        if ((v16 - 22) < 4 || v16 == 18) {
          *(void *)(v8 + 40) = v28 | v29;
        }
LABEL_48:
        char v30 = a4;
        uint64_t result = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::create_startmap(v8, *(void *)(v7 + 8), a3, a4, v49, a6, v9);
        a4 = v30;
        a5 = v49;
        __n128 v9 = v48;
        if (*(_DWORD *)v7 != 17 && *(void *)(v7 + 288) && v15) {
          return result;
        }
        uint64_t v7 = *(void *)(v7 + 16);
        if (!v7) {
          return result;
        }
        goto LABEL_4;
      case 0x14:
        if (a3)
        {
          *a3 |= 4u;
          a3[10] |= a5;
          a3[13] |= a5;
        }
        goto LABEL_128;
      case 0x1C:
        BOOL v14 = *(unsigned char *)(v7 + 16) != 0;
        goto LABEL_33;
      case 0x1D:
        uint64_t v17 = *(void *)(v7 + 16);
        int v12 = *(_DWORD *)(v17 + 16);
        uint64_t v21 = *(void *)(v8 + 56);
        if ((*(unsigned char *)(v21 + v12) & 1) == 0)
        {
          if (v13) {
            goto LABEL_113;
          }
          uint64_t v11 = *(void *)(v7 + 8);
          *(unsigned char *)(v21 + v12) |= 1u;
          uint64_t v13 = v7;
LABEL_34:
          ++v15;
          uint64_t v7 = v17;
          if (!v17) {
            return result;
          }
          goto LABEL_5;
        }
        uint64_t v41 = *(void *)v8;
        if (!*(_DWORD *)(*(void *)v8 + 44)) {
          *(_DWORD *)(v41 + 44) = 2;
        }
        *(void *)(v41 + 48) = 0;
        *(void *)(v41 + 56) = 0;
        if ((*(unsigned char *)(v41 + 42) & 4) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Encountered an infinite recursion.");
          boost::regex_error::regex_error(&v50, &__p, 2, 0);
          boost::regex_error::raise((boost::regex_error *)&v50);
        }
LABEL_113:
        *(unsigned char *)(v21 + v12) |= 1u;
LABEL_114:
        if (a4) {
          *a4 |= a5;
        }
LABEL_116:
        if (a3)
        {
          if (*a3)
          {
            for (uint64_t n = 0; n != 256; n += 16)
              *(int8x16_t *)&a3[n] = vorrq_s8(*(int8x16_t *)&a3[n], (int8x16_t)v9);
LABEL_120:
            LOBYTE(a5) = *a3;
          }
          else
          {
LABEL_134:
            *((__n128 *)a3 + 15) = v9;
            *(__n128 *)(a3 + 209) = v9;
            *(__n128 *)(a3 + 225) = v9;
            *(__n128 *)(a3 + 177) = v9;
            *(__n128 *)(a3 + 193) = v9;
            *(__n128 *)(a3 + 145) = v9;
            *(__n128 *)(a3 + 161) = v9;
            *(__n128 *)(a3 + 113) = v9;
            *(__n128 *)(a3 + 129) = v9;
            *(__n128 *)(a3 + 81) = v9;
            *(__n128 *)(a3 + 97) = v9;
            *(__n128 *)(a3 + 49) = v9;
            *(__n128 *)(a3 + 65) = v9;
            *(__n128 *)(a3 + 17) = v9;
            *(__n128 *)(a3 + 33) = v9;
            *uint64_t v10 = v9;
          }
          *a3 = a5 | 4;
        }
        return result;
      case 0x20:
        if (a3)
        {
          if (*a3)
          {
            for (iuint64_t i = 0; ii != 256; ii += 16)
            {
              a6 = (__n128)vorrq_s8(*(int8x16_t *)&a3[ii], (int8x16_t)v9);
              *(__n128 *)&a3[ii] = a6;
            }
            char v19 = *a3;
          }
          else
          {
            *((__n128 *)a3 + 15) = v9;
            *(__n128 *)(a3 + 209) = v9;
            *(__n128 *)(a3 + 225) = v9;
            *(__n128 *)(a3 + 177) = v9;
            *(__n128 *)(a3 + 193) = v9;
            *(__n128 *)(a3 + 145) = v9;
            *(__n128 *)(a3 + 161) = v9;
            *(__n128 *)(a3 + 113) = v9;
            *(__n128 *)(a3 + 129) = v9;
            *(__n128 *)(a3 + 81) = v9;
            *(__n128 *)(a3 + 97) = v9;
            *(__n128 *)(a3 + 49) = v9;
            *(__n128 *)(a3 + 65) = v9;
            *(__n128 *)(a3 + 17) = v9;
            *(__n128 *)(a3 + 33) = v9;
            char v19 = a5;
            *uint64_t v10 = v9;
          }
          *a3 = v19 | 4;
        }
        goto LABEL_33;
      default:
        goto LABEL_33;
    }
  }
}

void sub_223D4FA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::get_repeat_type(uint64_t a1, unsigned int *a2)
{
  uint64_t result = *a2;
  if (result == 18)
  {
    uint64_t v3 = *((void *)a2 + 1);
    if (*(void *)(*(void *)(v3 + 8) + 8) == *((void *)a2 + 2))
    {
      int v4 = *(_DWORD *)v3;
      if (*(int *)v3 > 13)
      {
        if (v4 == 14)
        {
          if (*(unsigned char *)(v3 + 37)) {
            return 25;
          }
        }
        else if (v4 == 15)
        {
          return 24;
        }
      }
      else if (v4 == 2)
      {
        return 23;
      }
      else if (v4 == 5)
      {
        return 22;
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fixup_pointers(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    while (1)
    {
      switch(*(_DWORD *)a2)
      {
        case 0x10:
          goto LABEL_5;
        case 0x11:
          goto LABEL_4;
        case 0x12:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
          int v2 = *(_DWORD *)(result + 28);
          *(_DWORD *)(result + 28) = v2 + 1;
          *(_DWORD *)(a2 + 304) = v2;
LABEL_4:
          *(_OWORD *)(a2 + 24) = 0uLL;
          *(_DWORD *)(a2 + 280) = 0;
          *(_OWORD *)(a2 + 248) = 0uLL;
          *(_OWORD *)(a2 + 264) = 0uLL;
          *(_OWORD *)(a2 + 216) = 0uLL;
          *(_OWORD *)(a2 + 232) = 0uLL;
          *(_OWORD *)(a2 + 184) = 0uLL;
          *(_OWORD *)(a2 + 200) = 0uLL;
          *(_OWORD *)(a2 + 152) = 0uLL;
          *(_OWORD *)(a2 + 168) = 0uLL;
          *(_OWORD *)(a2 + 120) = 0uLL;
          *(_OWORD *)(a2 + 136) = 0uLL;
          *(_OWORD *)(a2 + 88) = 0uLL;
          *(_OWORD *)(a2 + 104) = 0uLL;
          *(_OWORD *)(a2 + 56) = 0uLL;
          *(_OWORD *)(a2 + 72) = 0uLL;
          *(_OWORD *)(a2 + 40) = 0uLL;
LABEL_5:
          *(void *)(a2 + 16) += a2;
          break;
        case 0x1D:
          *(unsigned char *)(result + 48) = 1;
          break;
        default:
          break;
      }
      uint64_t v3 = *(void *)(a2 + 8);
      if (!v3) {
        break;
      }
      *(void *)(a2 + 8) = a2 + v3;
      a2 += v3;
    }
    *(void *)(a2 + 8) = 0;
  }
  return result;
}

void boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse(uint64_t a1, const void *a2, uint64_t a3, unsigned int a4)
{
  *(_DWORD *)(*(void *)a1 + 40) = a4;
  int v8 = (a4 >> 20) & 1;
  *(unsigned char *)(a1 + 24) = (a4 & 0x100000) != 0;
  *(void *)(a1 + 128) = a3;
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 120) = a2;
  if (a2 == (const void *)a3 && (a4 & 0x1000003) != 0)
  {
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 17, 0);
    return;
  }
  if ((a4 & 3) == 2)
  {
    uint64_t v10 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_literal;
LABEL_12:
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = 0;
    goto LABEL_13;
  }
  if ((a4 & 3) == 1)
  {
    uint64_t v10 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_basic;
    goto LABEL_12;
  }
  if ((a4 & 3) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "An invalid combination of regular expression syntax flags was used.");
    boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 21, 0, (uint64_t)__p);
    goto LABEL_22;
  }
  *(void *)(a1 + 104) = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_extended;
  *(void *)(a1 + 112) = 0;
  uint64_t appended = boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::append_state((uint64_t *)a1, 0, 0x18uLL);
  appended[4] = 0;
  *((unsigned char *)appended + 20) = (*(_DWORD *)(*(void *)a1 + 40) & 0x100000) != 0;
LABEL_13:
  BOOL v11 = boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::parse_all(a1);
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::unwind_alts((std::string *)a1, -1);
  uint64_t v12 = *(void *)a1;
  *(_DWORD *)(*(void *)a1 + 40) = a4;
  if (v8 != *(unsigned __int8 *)(a1 + 24)) {
    *(unsigned char *)(a1 + 24) = v8;
  }
  if (v11)
  {
    if (!*(_DWORD *)(v12 + 44))
    {
      *(void *)(v12 + 64) = (*(_DWORD *)(a1 + 144) + 1);
      boost::re_detail_106800::basic_regex_creator<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::finalize((uint64_t *)a1, a2, a3);
    }
    return;
  }
  uint64_t v13 = (const char *)(*(void *)(a1 + 136) - *(void *)(a1 + 120));
  std::string::basic_string[abi:ne180100]<0>(__p, "Found a closing) with no corresponding openening parenthesis.");
  boost::re_detail_106800::basic_regex_parser<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::fail((std::string *)a1, 8, v13, (uint64_t)__p);
LABEL_22:
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D4FDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::regex_data<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::regex_data(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  operator new();
}

void sub_223D4FE5C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x22A614FA0](v3, 0x60C405C6656D0);
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void *boost::cpp_regex_traits<char>::cpp_regex_traits(void *a1)
{
  MEMORY[0x22A614D20](&v3);
  boost::re_detail_106800::cpp_regex_traits_base<char>::cpp_regex_traits_base((uint64_t)&v4, &v3);
  boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::get(&v4, a1);
  std::locale::~locale(&v4);
  std::locale::~locale(&v3);
  return a1;
}

void sub_223D4FEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11)
{
}

uint64_t boost::re_detail_106800::cpp_regex_traits_base<char>::cpp_regex_traits_base(uint64_t a1, const std::locale *a2)
{
  std::locale v4 = (std::locale *)MEMORY[0x22A614D20]();
  boost::re_detail_106800::cpp_regex_traits_base<char>::imbue(v4, a2, &v6);
  std::locale::~locale(&v6);
  return a1;
}

void sub_223D4FF68(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale::__imp *boost::re_detail_106800::cpp_regex_traits_base<char>::imbue@<X0>(std::locale *a1@<X0>, const std::locale *a2@<X1>, std::locale *a3@<X8>)
{
  std::locale::locale(a3, a1);
  std::locale::operator=(a1, a2);
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(a2, MEMORY[0x263F8C108]);
  if (std::locale::has_facet(a2, MEMORY[0x263F8C148])) {
    uint64_t v5 = (std::locale::__imp *)std::locale::use_facet(a2, MEMORY[0x263F8C148]);
  }
  else {
    uint64_t v5 = 0;
  }
  a1[2].__locale_ = v5;
  uint64_t result = (std::locale::__imp *)std::locale::use_facet(a2, MEMORY[0x263F8C130]);
  a1[3].__locale_ = result;
  return result;
}

void sub_223D50020(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::get(void *a1@<X0>, void *a2@<X8>)
{
  boost::scoped_static_mutex_lock::scoped_static_mutex_lock((uint64_t)v5, &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::mut, 1);
  if (!v5[8])
  {
    std::runtime_error::runtime_error(&v4, "Error in thread safety code: could not acquire a lock");
    boost::throw_exception<std::runtime_error>(&v4);
  }
  boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(a1, a2);
  boost::scoped_static_mutex_lock::~scoped_static_mutex_lock((boost::scoped_static_mutex_lock *)v5);
}

void sub_223D500BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, char a10)
{
}

void boost::scoped_static_mutex_lock::~scoped_static_mutex_lock(pthread_mutex_t **this)
{
  if (*((unsigned char *)this + 8))
  {
    pthread_mutex_unlock(*this);
    *((unsigned char *)this + 8) = 0;
  }
}

uint64_t boost::scoped_static_mutex_lock::scoped_static_mutex_lock(uint64_t a1, pthread_mutex_t *a2, int a3)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  if (a3) {
    *(unsigned char *)(a1 + 8) = pthread_mutex_lock(a2) == 0;
  }
  return a1;
}

void boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(void *a1@<X0>, void *a2@<X8>)
{
  {
    boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_std::string::pointer data = &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
    off_268067520 = &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
    qword_268067540 = 0;
    qword_268067538 = 0;
    qword_268067528 = 0;
    qword_268067530 = &qword_268067538;
    __cxa_atexit((void (*)(void *))boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::data::~data, &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data, &dword_223D44000);
  }
  std::runtime_error v4 = std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::find<boost::re_detail_106800::cpp_regex_traits_base<char>>((uint64_t)&qword_268067530, a1);
  if (v4 == &qword_268067538) {
    operator new();
  }
  uint64_t v5 = boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
  uint64_t v6 = v4[8];
  if (boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data != (_UNKNOWN *)v6)
  {
    uint64_t v7 = &v16;
    int v16 = (atomic_uint *)&v16;
    long long v17 = (unint64_t)&v16;
    if (&v16 == (atomic_uint **)v6 || (int v8 = *(atomic_uint ***)(v6 + 8), v8 == &v16))
    {
      uint64_t v11 = -1;
    }
    else
    {
      uint64_t v9 = *(void *)v6;
      *(void *)(v9 + 8) = v8;
      **(void **)(v6 + 8) = v9;
      uint64_t v10 = v16;
      *((void *)v16 + 1) = v6;
      *(void *)uint64_t v6 = v10;
      *(void *)(v6 + 8) = &v16;
      --qword_268067528;
      int v16 = (atomic_uint *)v6;
      *((void *)&v17 + 1) = 1;
      uint64_t v7 = (atomic_uint **)v17;
      if ((_UNKNOWN **)v17 == &boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data)
      {
LABEL_12:
        v4[8] = (uint64_t)boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
        std::__list_imp<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>>::clear(&v16);
        uint64_t v5 = boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
        goto LABEL_13;
      }
      uint64_t v11 = 0;
    }
    uint64_t v12 = v7[1];
    if (v12 != (atomic_uint *)&boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data)
    {
      uint64_t v13 = *v7;
      *((void *)v13 + 1) = v12;
      *(void *)v7[1] = v13;
      BOOL v14 = (atomic_uint *)boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
      *((void *)boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data
      + 1) = v7;
      *uint64_t v7 = v14;
      v7[1] = (atomic_uint *)&boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_data;
      boost::object_cache<boost::re_detail_106800::cpp_regex_traits_base<char>,boost::re_detail_106800::cpp_regex_traits_implementation<char>>::do_get(boost::re_detail_106800::cpp_regex_traits_base<char> const&,unsigned long)::s_std::string::pointer data = v7;
      *((void *)&v17 + 1) = v11;
      ++qword_268067528;
    }
    goto LABEL_12;
  }
LABEL_13:
  *a2 = v5[2];
  uint64_t v15 = v5[3];
  a2[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 1u, memory_order_relaxed);
  }
}

void sub_223D50498(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::find<boost::re_detail_106800::cpp_regex_traits_base<char>>(uint64_t a1, void *a2)
{
  std::locale v3 = (void *)(a1 + 8);
  uint64_t result = std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__lower_bound<boost::re_detail_106800::cpp_regex_traits_base<char>>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 != result)
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = result[5];
    BOOL v7 = v5 >= v6;
    if (v5 == v6 && (v8 = a2[2], v9 = result[6], BOOL v7 = v8 >= v9, v8 == v9))
    {
      if (a2[3] >= result[7]) {
        return result;
      }
    }
    else if (v7)
    {
      return result;
    }
  }
  return v3;
}

void *std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__lower_bound<boost::re_detail_106800::cpp_regex_traits_base<char>>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = a2[2];
    do
    {
      unint64_t v7 = a3[5];
      BOOL v8 = v7 >= v5;
      if (v7 == v5)
      {
        unint64_t v9 = a3[6];
        BOOL v8 = v9 >= v6;
        if (v9 == v6) {
          BOOL v8 = a3[7] >= a2[3];
        }
      }
      int v10 = !v8;
      BOOL v11 = v10 == 0;
      if (v10) {
        uint64_t v12 = a3 + 1;
      }
      else {
        uint64_t v12 = a3;
      }
      if (v11) {
        uint64_t result = a3;
      }
      a3 = (void *)*v12;
    }
    while (*v12);
  }
  return result;
}

void boost::shared_ptr<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::shared_ptr<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(&v2);
}

void sub_223D5060C(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223D50690(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::regex_traits_wrapper<boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(v1);
  __cxa_rethrow();
}

void sub_223D506A4(_Unwind_Exception *a1)
{
}

void boost::shared_ptr<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>::shared_ptr<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(&v2);
}

void sub_223D50710(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223D50794(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::re_detail_106800::basic_regex_implementation<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>>(v1);
  __cxa_rethrow();
}

void sub_223D507A8(_Unwind_Exception *a1)
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>> const*,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  std::runtime_error v4 = a4;
  int v10 = a4;
  BOOL v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>::pair[abi:ne180100](v4, v6);
      v6 += 6;
      std::runtime_error v4 = v11 + 6;
      v11 += 6;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_223D508CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>::pair[abi:ne180100](void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  std::__function::__value_func<BOOL ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void sub_223D50930(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>,std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__function::__func<turi::transform_utils::$_1,std::allocator<turi::transform_utils::$_1>,BOOL ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D77DD88;
}

{
  *a2 = &unk_26D77DE88;
}

{
  *a2 = &unk_26D77DF88;
}

{
  *a2 = &unk_26D77E088;
}

{
  *a2 = &unk_26D77E188;
}

{
  *a2 = &unk_26D77E288;
}

{
  *a2 = &unk_26D77E388;
}

{
  *a2 = &unk_26D77E488;
}

{
  *a2 = &unk_26D77E588;
}

{
  *a2 = &unk_26D77E688;
}

{
  *a2 = &unk_26D77E788;
}

{
  *a2 = &unk_26D77E888;
}

{
  *a2 = &unk_26D77E988;
}

{
  *a2 = &unk_26D77ED48;
}

{
  *a2 = &unk_26D77EE48;
}

{
  *a2 = &unk_26D77EF48;
}

void std::__function::__func<turi::transform_utils::$_0,std::allocator<turi::transform_utils::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D77DCF8;
}

{
  *a2 = &unk_26D77DE08;
}

{
  *a2 = &unk_26D77DF08;
}

{
  *a2 = &unk_26D77E008;
}

{
  *a2 = &unk_26D77E108;
}

{
  *a2 = &unk_26D77E208;
}

{
  *a2 = &unk_26D77E308;
}

{
  *a2 = &unk_26D77E408;
}

{
  *a2 = &unk_26D77E508;
}

{
  *a2 = &unk_26D77E608;
}

{
  *a2 = &unk_26D77E708;
}

{
  *a2 = &unk_26D77E808;
}

{
  *a2 = &unk_26D77E908;
}

{
  *a2 = &unk_26D77ECC8;
}

{
  *a2 = &unk_26D77EDC8;
}

{
  *a2 = &unk_26D77EEC8;
}

char *std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__emplace_unique_key_args<boost::re_detail_106800::cpp_regex_traits_base<char>,std::pair<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__find_equal<boost::re_detail_106800::cpp_regex_traits_base<char>>((uint64_t)a1, &v12, a2);
  unint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (char *)operator new(0x48uLL);
    v10[1] = a1 + 1;
    std::locale::locale((std::locale *)v6 + 4, (const std::locale *)a3);
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 8);
    uint64_t v8 = *(void *)(a3 + 32);
    *((void *)v6 + 7) = *(void *)(a3 + 24);
    *((void *)v6 + 8) = v8;
    char v11 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

void *std::__tree<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::__map_value_compare<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,std::less<boost::re_detail_106800::cpp_regex_traits_base<char>>,true>,std::allocator<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>>>::__find_equal<boost::re_detail_106800::cpp_regex_traits_base<char>>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  std::runtime_error v4 = v5;
  if (v5)
  {
    unint64_t v6 = a3[1];
    unint64_t v7 = a3[2];
    unint64_t v8 = a3[3];
    while (1)
    {
      while (1)
      {
        char v9 = v4;
        unint64_t v10 = v4[5];
        if (v6 != v10) {
          break;
        }
        unint64_t v11 = v9[6];
        if (v7 == v11)
        {
          unint64_t v12 = v9[7];
          if (v8 >= v12)
          {
            if (v12 >= v8) {
              goto LABEL_18;
            }
            goto LABEL_15;
          }
        }
        else if (v7 >= v11)
        {
          if (v11 >= v7) {
            goto LABEL_18;
          }
          goto LABEL_15;
        }
LABEL_12:
        std::runtime_error v4 = (void *)*v9;
        uint64_t result = v9;
        if (!*v9) {
          goto LABEL_18;
        }
      }
      if (v6 < v10) {
        goto LABEL_12;
      }
      if (v10 >= v6) {
        goto LABEL_18;
      }
LABEL_15:
      uint64_t result = v9 + 1;
      std::runtime_error v4 = (void *)v9[1];
      if (!v4) {
        goto LABEL_18;
      }
    }
  }
  char v9 = result;
LABEL_18:
  *a2 = v9;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::re_detail_106800::cpp_regex_traits_base<char>,std::__list_iterator<std::pair<boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>,boost::re_detail_106800::cpp_regex_traits_base<char> const*>,void *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::locale **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::locale::~locale(v2 + 4);
    }
    operator delete(v2);
  }
}

std::locale *boost::re_detail_106800::cpp_regex_traits_implementation<char>::cpp_regex_traits_implementation(std::locale *a1, uint64_t a2)
{
  uint64_t v3 = boost::re_detail_106800::cpp_regex_traits_char_layer<char>::cpp_regex_traits_char_layer(a1, a2);
  v3[36].__locale_ = (std::locale::__imp *)&v3[37];
  v3[37].__locale_ = 0;
  v3[40].__locale_ = 0;
  v3[41].__locale_ = 0;
  v3[38].__locale_ = 0;
  v3[39].__locale_ = (std::locale::__imp *)&v3[40];
  v3[43].__locale_ = 0;
  v3[44].__locale_ = 0;
  v3[42].__locale_ = (std::locale::__imp *)&v3[43];
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::init((uint64_t)v3);
  return a1;
}

void sub_223D51020(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v4, *(void **)(v1 + 344));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v3, *(char **)(v1 + 320));
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v2, *(char **)(v1 + 296));
  std::locale::~locale((std::locale *)v1);
  _Unwind_Resume(a1);
}

std::locale *boost::re_detail_106800::cpp_regex_traits_char_layer<char>::cpp_regex_traits_char_layer(std::locale *a1, uint64_t a2)
{
  uint64_t v4 = std::locale::locale(a1, (const std::locale *)a2);
  long long v5 = *(_OWORD *)(a2 + 8);
  v4[3].__locale_ = *(std::locale::__imp **)(a2 + 24);
  *(_OWORD *)&v4[1].__locale_ = v5;
  boost::re_detail_106800::cpp_regex_traits_char_layer<char>::init((uint64_t)v4);
  return a1;
}

void sub_223D51098(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void boost::re_detail_106800::cpp_regex_traits_char_layer<char>::init(uint64_t a1)
{
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  boost::cpp_regex_traits<char>::get_catalog_name(&v29);
  std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  if (size && (uint64_t v3 = *(void *)(a1 + 16)) != 0)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v3 + 24))(v3, &v29, a1);
    if ((v4 & 0x80000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Unable to open message catalog: ");
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)&v29.__r_.__value_.__l.__data_, (uint64_t)&v25);
      std::runtime_error::runtime_error(&v26, &v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      boost::re_detail_106800::raise_runtime_error(&v26, v5);
    }
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = *(void *)(a1 + 16);
      default_syntax = (char *)boost::re_detail_106800::get_default_syntax((boost::re_detail_106800 *)v6);
      std::string::basic_string[abi:ne180100]<0>(&v25, default_syntax);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void, uint64_t, std::string *))(*(void *)v7 + 32))(__p, v7, v4, 0, v6, &v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      unint64_t v9 = 0;
      unint64_t v10 = v28;
      unint64_t v11 = (void **)__p[0];
      unint64_t v12 = __p[1];
      if ((v28 & 0x80) != 0)
      {
        while (1)
        {
          uint64_t v13 = v11;
          if (v9 >= (unint64_t)v12) {
            break;
          }
LABEL_16:
          *(unsigned char *)(a1 + *((unsigned __int8 *)v13 + v9++) + 32) = v6;
          if ((v10 & 0x80) == 0) {
            goto LABEL_13;
          }
        }
        operator delete(v11);
      }
      else
      {
LABEL_13:
        if (v9 < v10)
        {
          uint64_t v13 = __p;
          goto LABEL_16;
        }
      }
      uint64_t v6 = (v6 + 1);
    }
    while (v6 != 60);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), v4);
  }
  else
  {
    unsigned __int8 v14 = 1;
    do
    {
      uint64_t v15 = boost::re_detail_106800::get_default_syntax((boost::re_detail_106800 *)v14);
      if (v15)
      {
        unsigned int v16 = *(unsigned __int8 *)v15;
        if (*v15)
        {
          long long v17 = (unsigned __int8 *)(v15 + 1);
          do
          {
            *(unsigned char *)(a1 + v16 + 32) = v14;
            unsigned int v18 = *v17++;
            unsigned int v16 = v18;
          }
          while (v18);
        }
      }
      unsigned int v19 = v14++;
    }
    while (v19 < 0x3B);
  }
  uint64_t v20 = 0;
  uint64_t v21 = a1 + 97;
  do
  {
    if (*(unsigned char *)(v21 + v20)) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = (((_BYTE)v20 + 65) & 0x80) == 0;
    }
    if (v22)
    {
      int v23 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * v20 + 260);
      if ((v23 & 0x1000) != 0)
      {
        char v24 = 22;
      }
      else
      {
        if ((v23 & 0x8000) == 0) {
          goto LABEL_38;
        }
        char v24 = 23;
      }
      *(unsigned char *)(v21 + v20) = v24;
    }
LABEL_38:
    ++v20;
  }
  while (v20 != 191);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_223D5134C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::runtime_error a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::runtime_error::~runtime_error(&a16);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 33) < 0) {
    operator delete(*(void **)(v22 - 56));
  }
  _Unwind_Resume(a1);
}

const char *boost::re_detail_106800::get_default_syntax(boost::re_detail_106800 *this)
{
  if (this <= 0x3B) {
    return (const char *)*((void *)&off_2646D7200 + this);
  }
  else {
    return "";
  }
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(uint64_t a1)
{
  boost::cpp_regex_traits<char>::get_catalog_name(&v26);
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      if (((*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v3 + 24))(v3, &v26, a1) & 0x80000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v25, "Unable to open message catalog: ");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v25.__r_.__value_.__l.__data_, (const void **)&v26.__r_.__value_.__l.__data_, (uint64_t)&__p);
        std::runtime_error::runtime_error((std::runtime_error *)&__str, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        boost::re_detail_106800::raise_runtime_error((const std::runtime_error *)&__str, v21);
      }
      for (int i = 0; i != 22; ++i)
      {
        default_error_string = boost::re_detail_106800::get_default_error_string(i);
        memset(&v25, 0, sizeof(v25));
        char v6 = *default_error_string;
        if (*default_error_string)
        {
          uint64_t v7 = (unsigned __int8 *)(default_error_string + 1);
          do
          {
            std::string::value_type v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), v6);
            std::string::append(&v25, 1uLL, v8);
            int v9 = *v7++;
            char v6 = v9;
          }
          while (v9);
        }
        (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&__p);
        memset(&__str, 0, sizeof(__str));
        BOOL v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
        }
        if (v11)
        {
          std::string::size_type v12 = 0;
          do
          {
            if (v10) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else {
              p_p = &__p;
            }
            std::string::value_type v14 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), p_p->__r_.__value_.__s.__data_[v12], 0);
            std::string::append(&__str, 1uLL, v14);
            ++v12;
            BOOL v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
            }
          }
          while (v12 < v15);
        }
        int v22 = i;
        unsigned int v27 = &v22;
        unsigned int v16 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(a1 + 288), &v22, (uint64_t)&std::piecewise_construct, &v27);
        std::string::operator=((std::string *)(v16 + 5), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
      {
        boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(void)::null_string = 0;
        unk_2680674C0 = 0;
        qword_2680674C8 = 0;
        __cxa_atexit(MEMORY[0x263F8C0B8], &boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(void)::null_string, &dword_223D44000);
      }
      for (uint64_t j = 0; j != 14; ++j)
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v25);
        std::string::size_type v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
        char v19 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v18 = v25.__r_.__value_.__l.__size_;
        }
        if (v18)
        {
          int v20 = boost::re_detail_106800::cpp_regex_traits_implementation<char>::init(void)::masks[j];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), (const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 14) = v20;
          char v19 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
        }
        if (v19 < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 360) = boost::re_detail_106800::find_sort_syntax<boost::re_detail_106800::cpp_regex_traits_implementation<char>,char>(a1, (unsigned char *)(a1 + 364));
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_223D5182C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

void boost::cpp_regex_traits<char>::get_catalog_name(std::string *a1@<X8>)
{
  boost::scoped_static_mutex_lock::scoped_static_mutex_lock((uint64_t)v4, &boost::cpp_regex_traits<char>::get_mutex_inst(void)::s_mutex, 1);
  catalog_name_inst = boost::cpp_regex_traits<char>::get_catalog_name_inst();
  if (*((char *)catalog_name_inst + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)*catalog_name_inst, catalog_name_inst[1]);
  }
  else
  {
    long long v3 = *(_OWORD *)catalog_name_inst;
    a1->__r_.__value_.__r.__words[2] = catalog_name_inst[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v3;
  }
  boost::scoped_static_mutex_lock::~scoped_static_mutex_lock((boost::scoped_static_mutex_lock *)v4);
}

void sub_223D5192C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *boost::cpp_regex_traits<char>::get_catalog_name_inst()
{
  {
    boost::cpp_regex_traits<char>::get_catalog_name_inst(void)::s_name = 0;
    *(void *)algn_268067498 = 0;
    qword_2680674A0 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &boost::cpp_regex_traits<char>::get_catalog_name_inst(void)::s_name, &dword_223D44000);
  }
  return &boost::cpp_regex_traits<char>::get_catalog_name_inst(void)::s_name;
}

uint64_t boost::re_detail_106800::find_sort_syntax<boost::re_detail_106800::cpp_regex_traits_implementation<char>,char>(uint64_t a1, unsigned char *a2)
{
  strcpy(__s, "a");
  boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(a1, &__s1);
  size_t v4 = strlen(__s);
  size_t v5 = v4;
  char v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_9;
    }
    if (v4 != -1)
    {
      p_s1 = &__s1;
      goto LABEL_8;
    }
LABEL_93:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v4 != __s1.__r_.__value_.__l.__size_) {
    goto LABEL_9;
  }
  if (v4 == -1) {
    goto LABEL_93;
  }
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_8:
  if (memcmp(p_s1, __s, v5))
  {
LABEL_9:
    __int16 v39 = 65;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(a1, &v38);
    __int16 v37 = 59;
    boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(a1, &__p);
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __s1.__r_.__value_.__l.__size_;
    }
    if ((size & 0x80000000) != 0)
    {
LABEL_39:
      LOBYTE(v15) = 0;
      uint64_t v18 = 3;
      goto LABEL_86;
    }
    uint64_t v9 = 0;
    int v10 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v10 = v38.__r_.__value_.__r.__words[1];
    }
    std::string::size_type v11 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = &v38;
    }
    if (v10 < 0) {
      int v10 = -1;
    }
    std::string::size_type v12 = &__s1;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v12 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    uint64_t v13 = (v10 + 1);
    while (1)
    {
      if (v13 == v9) {
        goto LABEL_25;
      }
      if (v12->__r_.__value_.__s.__data_[v9] != v11->__r_.__value_.__s.__data_[v9]) {
        break;
      }
      if (size + 1 == ++v9)
      {
        LODWORD(v13) = size + 1;
LABEL_25:
        if (!v13) {
          goto LABEL_39;
        }
        goto LABEL_26;
      }
    }
    LODWORD(v13) = v9;
    if (!v9) {
      goto LABEL_39;
    }
LABEL_26:
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::value_type v14 = &__s1;
    }
    else {
      std::string::value_type v14 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    if (v13 == 1)
    {
      std::string::size_type v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      std::string::size_type v20 = v38.__r_.__value_.__l.__size_;
      char v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else
    {
      int v15 = v14->__r_.__value_.__s.__data_[(v13 - 1)];
      if (size)
      {
        uint64_t v16 = 0;
        int v17 = 0;
        do
        {
          if (v14->__r_.__value_.__s.__data_[v16] == v15) {
            ++v17;
          }
          ++v16;
        }
        while (size > v16);
      }
      else
      {
        int v17 = 0;
      }
      std::string::size_type v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      char v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      std::string::size_type v20 = v38.__r_.__value_.__l.__size_;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v38.__r_.__value_.__l.__size_;
      }
      if (v22)
      {
        uint64_t v23 = 0;
        int v24 = 0;
        std::string v25 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v25 = &v38;
        }
        do
        {
          if (v25->__r_.__value_.__s.__data_[v23] == v15) {
            ++v24;
          }
          ++v23;
        }
        while (v22 > v23);
      }
      else
      {
        int v24 = 0;
      }
      if (v17 == v24)
      {
        if (size)
        {
          uint64_t v26 = 0;
          int v27 = 0;
          do
          {
            if (v14->__r_.__value_.__s.__data_[v26] == v15) {
              ++v27;
            }
            ++v26;
          }
          while (size > v26);
        }
        else
        {
          int v27 = 0;
        }
        std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v28)
        {
          uint64_t v29 = 0;
          int v30 = 0;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          do
          {
            if (p_p->__r_.__value_.__s.__data_[v29] == v15) {
              ++v30;
            }
            ++v29;
          }
          while (v28 > v29);
        }
        else
        {
          int v30 = 0;
        }
        if (v27 == v30)
        {
          uint64_t v18 = 2;
          goto LABEL_86;
        }
      }
    }
    if (v21 >= 0) {
      std::string::size_type v32 = v19;
    }
    else {
      std::string::size_type v32 = v20;
    }
    uint64_t v18 = 3;
    if (size == v32)
    {
      std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
      }
      BOOL v34 = size == v33;
      if (size == v33) {
        LOBYTE(v15) = v13;
      }
      else {
        LOBYTE(v15) = 0;
      }
      if (v34) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = 3;
      }
    }
    else
    {
      LOBYTE(v15) = 0;
    }
LABEL_86:
    *a2 = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_91;
    }
    return v18;
  }
  uint64_t v18 = 0;
  *a2 = 0;
  if (v6 < 0) {
LABEL_91:
  }
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v18;
}

void sub_223D51D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void boost::re_detail_106800::cpp_regex_traits_implementation<char>::transform(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&i, 0, sizeof(i));
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 24) + 32))(&v15);
  for (std::string i = v15; SHIBYTE(i.__r_.__value_.__r.__words[2]) < 0; std::string::erase(&i, size - 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::string::size_type size = i.__r_.__value_.__l.__size_;
    if (!i.__r_.__value_.__l.__size_ || *(unsigned char *)(i.__r_.__value_.__r.__words[0] + i.__r_.__value_.__l.__size_ - 1)) {
      goto LABEL_10;
    }
LABEL_8:
    ;
  }
  std::string::size_type size = HIBYTE(i.__r_.__value_.__r.__words[2]);
  if (*((unsigned char *)&i.__r_.__value_.__s + 23))
  {
    if (*((unsigned char *)&v15.__r_.__value_.__r.__words[2] + HIBYTE(i.__r_.__value_.__r.__words[2]) + 7)) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  std::string::size_type size = 0;
LABEL_10:
  std::string::reserve(a2, 2 * size + 2);
  char v4 = HIBYTE(i.__r_.__value_.__r.__words[2]);
  std::string::size_type v5 = i.__r_.__value_.__l.__size_;
  if ((i.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v5 = HIBYTE(i.__r_.__value_.__r.__words[2]);
  }
  if (v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = SHIBYTE(i.__r_.__value_.__r.__words[2]) >> 31;
    unsigned int v8 = 1;
    do
    {
      if (v7) {
        p_std::string i = (std::string *)i.__r_.__value_.__r.__words[0];
      }
      else {
        p_std::string i = &i;
      }
      int v10 = p_i->__r_.__value_.__s.__data_[v6];
      if (v10 == 255)
      {
        std::string::size_type v11 = std::string::append(a2, 1uLL, -1);
        std::string::value_type v12 = 98;
      }
      else
      {
        std::string::size_type v11 = std::string::append(a2, 1uLL, v10 + 1);
        std::string::value_type v12 = 97;
      }
      std::string::append(v11, 1uLL, v12);
      uint64_t v6 = v8;
      unsigned int v7 = SHIBYTE(i.__r_.__value_.__r.__words[2]) >> 31;
      std::string::size_type v13 = i.__r_.__value_.__l.__size_;
      if ((i.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(i.__r_.__value_.__r.__words[2]);
      }
    }
    while (v13 > v8++);
    char v4 = HIBYTE(i.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0) {
    operator delete(i.__r_.__value_.__l.__data_);
  }
}

void sub_223D51ED4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    JUMPOUT(0x223D51EB8);
  }
  JUMPOUT(0x223D51EC0);
}

void sub_223D51EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>,0>((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char> const>::shared_ptr<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(&v2);
}

void sub_223D51F70(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223D51FF4(void *a1)
{
  __cxa_begin_catch(a1);
  boost::checked_delete<boost::re_detail_106800::cpp_regex_traits_implementation<char>>(v1);
  __cxa_rethrow();
}

void sub_223D52008(_Unwind_Exception *a1)
{
}

void _GLOBAL__sub_I_sgraph_constants_cpp()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t v0 = (turi::thread *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS = turi::thread::cpu_count(v0);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_TRIPLE_APPLY_LOCK_ARRAY_SIZE");
  long long v3 = &unk_26D75CF70;
  char v4 = turi::$_0::__invoke;
  uint64_t v5 = &v3;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_TRIPLE_APPLY_LOCK_ARRAY_SIZE__register__instance, __p, &turi::SGRAPH_TRIPLE_APPLY_LOCK_ARRAY_SIZE, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_BATCH_TRIPLE_APPLY_LOCK_ARRAY_SIZE");
  long long v3 = &unk_26D75CF70;
  char v4 = turi::$_1::__invoke;
  uint64_t v5 = &v3;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_BATCH_TRIPLE_APPLY_LOCK_ARRAY_SIZE__register__instance, __p, &turi::SGRAPH_BATCH_TRIPLE_APPLY_LOCK_ARRAY_SIZE, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_TRIPLE_APPLY_EDGE_BATCH_SIZE");
  long long v3 = &unk_26D75CF70;
  char v4 = turi::$_2::__invoke;
  uint64_t v5 = &v3;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_TRIPLE_APPLY_EDGE_BATCH_SIZE__register__instance, __p, &turi::SGRAPH_TRIPLE_APPLY_EDGE_BATCH_SIZE, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_DEFAULT_NUM_PARTITIONS");
  long long v3 = &unk_26D75CF70;
  char v4 = turi::$_3::__invoke;
  uint64_t v5 = &v3;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_DEFAULT_NUM_PARTITIONS__register__instance, __p, &turi::SGRAPH_DEFAULT_NUM_PARTITIONS, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_INGRESS_VID_BUFFER_SIZE");
  long long v3 = &unk_26D75CF70;
  char v4 = turi::$_4::__invoke;
  uint64_t v5 = &v3;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_INGRESS_VID_BUFFER_SIZE__register__instance, __p, &turi::SGRAPH_INGRESS_VID_BUFFER_SIZE, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS");
  long long v3 = &unk_26D75CF70;
  char v4 = turi::$_5::__invoke;
  uint64_t v5 = &v3;
  turi::globals::register_global<long long>::register_global(&turi::__SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS__register__instance, __p, &turi::SGRAPH_HILBERT_CURVE_PARALLEL_FOR_NUM_THREADS, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D52394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::thread::cpu_count(turi::thread *this)
{
  uint64_t v1 = getenv("OMP_NUM_THREADS");
  if (v1)
  {
    LODWORD(result) = atoi(v1);
    if ((int)result > 0) {
      return result;
    }
  }
  return sysconf(58);
}

void _GLOBAL__sub_I_table_printer_cpp()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_MIN_SECONDS_BETWEEN_TICK_PRINTS");
  v2[3] = 0;
  turi::globals::register_global<double>::register_global(&turi::__MIN_SECONDS_BETWEEN_TICK_PRINTS__register__instance, __p, &turi::MIN_SECONDS_BETWEEN_TICK_PRINTS, 1, v2);
  std::__function::__value_func<BOOL ()(double)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D524F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_worker_pool_cpp()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_LAMBDA_WORKER_CONNECTION_TIMEOUT");
  v2[3] = 0;
  turi::globals::register_global<double>::register_global(&turi::__LAMBDA_WORKER_CONNECTION_TIMEOUT__register__instance, __p, &turi::LAMBDA_WORKER_CONNECTION_TIMEOUT, 1, v2);
  std::__function::__value_func<BOOL ()(double)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D525F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

turi::globals *turi::globals::register_global<double>::register_global(turi::globals *a1, std::string::size_type a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  turi::globals::get_global_registry_map(a1);
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2))
  {
    int v10 = (int *)global_logger();
    if (v10[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v10)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      std::string::size_type v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 159, 1);
      std::string::size_type v13 = pthread_getspecific(*((void *)started + 74));
      if (v13 && *((unsigned char *)v13 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Configuration variable ", 23);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v52 = *(std::string *)a2;
      }
      uint64_t v29 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v52);
      int v30 = pthread_getspecific(*(void *)(v29 + 592));
      if (v30 && *((unsigned char *)v30 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)" already registered", 19);
      }
      BOOL v31 = pthread_getspecific(*(void *)(v29 + 592));
      if (v31)
      {
        if (*((unsigned char *)v31 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[2] - 24) + 16));
          std::string::size_type v32 = std::locale::use_facet((const std::locale *)&v56, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
          std::locale::~locale((std::locale *)&v56);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v29);
          if (*(_DWORD *)(v29 + 600) == 7)
          {
            __print_back_trace();
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            *exceptiouint64_t n = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v33 = &v52;
LABEL_65:
        operator delete(v33->__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    global_registry = turi::globals::get_global_registry(0);
    uint64_t v16 = turi::globals::get_global_registry(void)::global_registry;
    uint64_t v15 = qword_2680815B8;
    turi::globals::get_global_registry_map((turi::globals *)global_registry);
    v56.__r_.__value_.__r.__words[0] = a2;
    int v17 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v56);
    v17[7] = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 4);
    turi::globals::get_global_registry((turi::globals *)v17);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v56 = *(std::string *)a2;
    }
    std::__function::__value_func<BOOL ()(double)>::__value_func[abi:ne180100]((uint64_t)v53, a5);
    uint64_t v54 = a3;
    std::__function::__value_func<BOOL ()(double)>::__value_func[abi:ne180100]((uint64_t)v55, (uint64_t)v53);
    uint64_t v58 = v54;
    std::__function::__value_func<BOOL ()(double)>::__value_func[abi:ne180100]((uint64_t)&v59, (uint64_t)v55);
    int v57 = 0;
    char v60 = a4;
    uint64_t v18 = qword_2680815B8;
    if (qword_2680815B8 >= (unint64_t)qword_2680815C0)
    {
      uint64_t v20 = std::vector<turi::globals::global_value>::__push_back_slow_path<turi::globals::global_value>(&turi::globals::get_global_registry(void)::global_registry, (long long *)&v56);
    }
    else
    {
      long long v19 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
      *(void *)(qword_2680815B8 + 16) = *((void *)&v56.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v18 = v19;
      memset(&v56, 0, sizeof(v56));
      boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(v18 + 24, (unsigned int *)&v57);
      *(unsigned char *)(v18 + 72) = v60;
      uint64_t v20 = v18 + 80;
    }
    qword_2680815B8 = v20;
    boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content(&v57);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    std::__function::__value_func<BOOL ()(double)>::~__value_func[abi:ne180100](v55);
    std::__function::__value_func<BOOL ()(double)>::~__value_func[abi:ne180100](v53);
    char v21 = (cppipc *)global_logger();
    int v22 = *((_DWORD *)v21 + 169);
    if (a4)
    {
      if (v22 <= 2)
      {
        if (cppipc::must_cancel(v21)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        uint64_t v23 = (file_logger *)global_logger();
        int v24 = file_logger::start_stream(v23, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 168, 1);
        std::string v25 = pthread_getspecific(*((void *)v24 + 74));
        if (v25 && *((unsigned char *)v25 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Registering runtime modifiable configuration variable ", 54);
        }
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v51 = *(std::string *)a2;
        }
        uint64_t v34 = file_logger::operator<<<std::string>((uint64_t)v24, (uint64_t)&v51);
        uint64_t v35 = pthread_getspecific(*(void *)(v34 + 592));
        if (v35 && *((unsigned char *)v35 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)" = ", 3);
        }
        uint64_t v36 = file_logger::operator<<<double>(v34);
        __int16 v37 = pthread_getspecific(*(void *)(v36 + 592));
        if (v37 && *((unsigned char *)v37 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)" (double)", 9);
        }
        std::string v38 = pthread_getspecific(*(void *)(v36 + 592));
        if (v38)
        {
          if (*((unsigned char *)v38 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(v38[2] - 24) + 16));
            __int16 v39 = std::locale::use_facet((const std::locale *)&v56, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
            std::locale::~locale((std::locale *)&v56);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v36);
            if (*(_DWORD *)(v36 + 600) == 7)
            {
              __print_back_trace();
              __n128 v48 = __cxa_allocate_exception(8uLL);
              *__n128 v48 = "LOG_FATAL encountered";
              __cxa_throw(v48, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v33 = &v51;
          goto LABEL_65;
        }
      }
    }
    else if (v22 <= 2)
    {
      if (cppipc::must_cancel(v21)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v26 = (file_logger *)global_logger();
      int v27 = file_logger::start_stream(v26, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 171, 1);
      std::string::size_type v28 = pthread_getspecific(*((void *)v27 + 74));
      if (v28 && *((unsigned char *)v28 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)"Registering environment modifiable configuration variable ", 58);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v50 = *(std::string *)a2;
      }
      uint64_t v40 = file_logger::operator<<<std::string>((uint64_t)v27, (uint64_t)&v50);
      uint64_t v41 = pthread_getspecific(*(void *)(v40 + 592));
      if (v41 && *((unsigned char *)v41 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)" = ", 3);
      }
      uint64_t v42 = file_logger::operator<<<double>(v40);
      char v43 = pthread_getspecific(*(void *)(v42 + 592));
      if (v43 && *((unsigned char *)v43 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)" (double)", 9);
      }
      unint64_t v44 = pthread_getspecific(*(void *)(v42 + 592));
      if (v44)
      {
        if (*((unsigned char *)v44 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(v44[2] - 24) + 16));
          uint64_t v45 = std::locale::use_facet((const std::locale *)&v56, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
          std::locale::~locale((std::locale *)&v56);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v42);
          if (*(_DWORD *)(v42 + 600) == 7)
          {
            __print_back_trace();
            unsigned int v49 = __cxa_allocate_exception(8uLL);
            *unsigned int v49 = "LOG_FATAL encountered";
            __cxa_throw(v49, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v33 = &v50;
        goto LABEL_65;
      }
    }
  }
  return a1;
}

void sub_223D52D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  char v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void _GLOBAL__sub_I_fileio_constants_cpp()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  qword_268089E88 = 0;
  unk_268089E90 = 0;
  turi::fileio::S3_ENDPOINT = 0;
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], &turi::fileio::S3_ENDPOINT, &dword_223D44000);
  qword_268089EA0 = 0;
  unk_268089EA8 = 0;
  turi::fileio::S3_REGION = 0;
  __cxa_atexit(v0, &turi::fileio::S3_REGION, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_MAXIMUM_CACHE_CAPACITY");
  uint64_t v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_MAXIMUM_CACHE_CAPACITY__register__instance, __p, &turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE");
  uint64_t v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE__register__instance, __p, &turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_READER_BUFFER_SIZE");
  uint64_t v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_READER_BUFFER_SIZE__register__instance, __p, &turi::fileio::FILEIO_READER_BUFFER_SIZE, 0, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_WRITER_BUFFER_SIZE");
  uint64_t v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_WRITER_BUFFER_SIZE__register__instance, __p, &turi::fileio::FILEIO_WRITER_BUFFER_SIZE, 0, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_S3_ENDPOINT");
  uint64_t v5 = 0;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__S3_ENDPOINT__register__instance, __p, &turi::fileio::S3_ENDPOINT, 1, &v3);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_S3_REGION");
  uint64_t v5 = 0;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__S3_REGION__register__instance, __p, &turi::fileio::S3_REGION, 1, &v3);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_NUM_GPUS");
  uint64_t v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__NUM_GPUS__register__instance, __p, &turi::fileio::NUM_GPUS, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&turi::fileio::CACHE_FILE_LOCATIONS, "CHANGEME");
  __cxa_atexit(MEMORY[0x263F8C0B8], &turi::fileio::CACHE_FILE_LOCATIONS, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::fileio::CACHE_FILE_HDFS_LOCATION, "");
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::fileio::CACHE_FILE_HDFS_LOCATION, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_CACHE_FILE_LOCATIONS");
  uint64_t v3 = &unk_26D75CEC0;
  char v4 = turi::fileio::check_cache_file_location;
  uint64_t v5 = &v3;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__CACHE_FILE_LOCATIONS__register__instance, __p, &turi::fileio::CACHE_FILE_LOCATIONS, 1, &v3);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_DIR, "");
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_DIR, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_FILE, "");
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_FILE, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_ALTERNATIVE_SSL_CERT_FILE");
  uint64_t v5 = 0;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__FILEIO_ALTERNATIVE_SSL_CERT_FILE__register__instance, __p, turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_FILE, 1, &v3);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_ALTERNATIVE_SSL_CERT_DIR");
  uint64_t v5 = 0;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__FILEIO_ALTERNATIVE_SSL_CERT_DIR__register__instance, __p, turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_DIR, 1, &v3);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_INSECURE_SSL_CERTIFICATE_CHECKS");
  uint64_t v5 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_INSECURE_SSL_CERTIFICATE_CHECKS__register__instance, __p, &turi::fileio::FILEIO_INSECURE_SSL_CERTIFICATE_CHECKS, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_MAX_REMOTE_FS_CACHE_ENTRIES");
  uint64_t v3 = &unk_26D75CF70;
  char v4 = turi::fileio::set_max_remote_fs_cache_entries;
  uint64_t v5 = &v3;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_MAX_REMOTE_FS_CACHE_ENTRIES__register__instance, __p, &turi::fileio::FILEIO_MAX_REMOTE_FS_CACHE_ENTRIES, 1, &v3);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D5348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_sframe_constants_cpp()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_DEFAULT_NUM_SEGMENTS");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_0::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_DEFAULT_NUM_SEGMENTS__register__instance, __p, &turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_FILE_HANDLE_POOL_SIZE");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_1::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_FILE_HANDLE_POOL_SIZE__register__instance, __p, &turi::SFRAME_FILE_HANDLE_POOL_SIZE, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_DEFAULT_BLOCK_SIZE");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_2::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_DEFAULT_BLOCK_SIZE__register__instance, __p, &turi::SFRAME_DEFAULT_BLOCK_SIZE, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_MAX_BLOCKS_IN_CACHE");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_3::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_MAX_BLOCKS_IN_CACHE__register__instance, __p, &turi::SFRAME_MAX_BLOCKS_IN_CACHE, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_CSV_PARSER_READ_SIZE");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_4::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_CSV_PARSER_READ_SIZE__register__instance, __p, &turi::SFRAME_CSV_PARSER_READ_SIZE, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_GROUPBY_BUFFER_NUM_ROWS");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_5::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_GROUPBY_BUFFER_NUM_ROWS__register__instance, __p, &turi::SFRAME_GROUPBY_BUFFER_NUM_ROWS, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_JOIN_BUFFER_NUM_CELLS");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_6::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_JOIN_BUFFER_NUM_CELLS__register__instance, __p, &turi::SFRAME_JOIN_BUFFER_NUM_CELLS, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_WRITER_MAX_BUFFERED_CELLS");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_7::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_WRITER_MAX_BUFFERED_CELLS__register__instance, __p, &turi::SFRAME_WRITER_MAX_BUFFERED_CELLS, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_8::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK__register__instance, __p, &turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_IO_READ_LOCK");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_9::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_IO_READ_LOCK__register__instance, __p, &turi::SFRAME_IO_READ_LOCK, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_10::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE__register__instance, __p, &turi::SFRAME_SORT_PIVOT_ESTIMATION_SAMPLE_SIZE, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_SORT_MAX_SEGMENTS");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_11::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_SORT_MAX_SEGMENTS__register__instance, __p, &turi::SFRAME_SORT_MAX_SEGMENTS, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FAST_COMPACT_BLOCKS_IN_SMALL_SEGMENT");
  char v2 = &unk_26D75CF70;
  uint64_t v3 = turi::$_12::__invoke;
  char v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__FAST_COMPACT_BLOCKS_IN_SMALL_SEGMENT__register__instance, __p, &turi::FAST_COMPACT_BLOCKS_IN_SMALL_SEGMENT, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_COMPACTION_THRESHOLD");
  char v4 = 0;
  turi::globals::register_global<long long>::register_global(&turi::__SFRAME_COMPACTION_THRESHOLD__register__instance, __p, &turi::SFRAME_COMPACTION_THRESHOLD, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D53C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<turi::globals::global_value>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<turi::globals::global_value>::destroy[abi:ne180100](v4, i - 80);
  }
}

void std::allocator<turi::globals::global_value>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content((int *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>,std::reverse_iterator<turi::globals::global_value*>,std::reverse_iterator<turi::globals::global_value*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      long long v10 = *(_OWORD *)(v9 - 80);
      *(void *)(v7 - 64) = *(void *)(v9 - 64);
      *(_OWORD *)(v7 - 80) = v10;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 80) = 0;
      boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(v7 - 56, (unsigned int *)(v9 - 56));
      *(unsigned char *)(v7 - 8) = *(unsigned char *)(v9 - 8);
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
      v9 -= 80;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

turi::globals *turi::globals::register_global<std::string>::register_global(turi::globals *a1, std::string::size_type a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  turi::globals::get_global_registry_map(a1);
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2))
  {
    long long v10 = (cppipc *)global_logger();
    if (*((int *)v10 + 169) <= 2)
    {
      if (cppipc::must_cancel(v10)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 204, 1);
      std::string::size_type v13 = pthread_getspecific(*((void *)started + 74));
      if (v13 && *((unsigned char *)v13 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Configuration variable ", 23);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v62 = *(std::string *)a2;
      }
      uint64_t v29 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v62);
      int v30 = pthread_getspecific(*(void *)(v29 + 592));
      if (v30 && *((unsigned char *)v30 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)" already registered", 19);
      }
      long long v10 = (cppipc *)pthread_getspecific(*(void *)(v29 + 592));
      if (v10)
      {
        if (*((unsigned char *)v10 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*((void *)v10 + 2) - 24) + 16));
          BOOL v31 = std::locale::use_facet((const std::locale *)&v66, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
          std::locale::~locale((std::locale *)&v66);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v29);
          if (*(_DWORD *)(v29 + 600) == 7)
          {
            __print_back_trace();
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            *exceptiouint64_t n = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
    }
    turi::globals::get_global_registry_map(v10);
    v66.__r_.__value_.__r.__words[0] = a2;
    std::string::size_type v32 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v66);
    uint64_t v33 = v32[7];
    turi::globals::get_global_registry((turi::globals *)v32);
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    if (boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::get_pointer_visitor const,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(turi::globals::get_global_registry(void)::global_registry+ 80 * v33+ 24), *(_DWORD *)(turi::globals::get_global_registry(void)::global_registry + 80 * v33 + 24) ^ (*(int *)(turi::globals::get_global_registry(void)::global_registry + 80 * v33 + 24) >> 31), (uint64_t)&v66, turi::globals::get_global_registry(void)::global_registry + 80 * v33 + 32) != a3)
    {
      uint64_t v34 = (int *)global_logger();
      if (v34[169] <= 5)
      {
        if (cppipc::must_cancel((cppipc *)v34)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        uint64_t v35 = (file_logger *)global_logger();
        uint64_t v36 = file_logger::start_stream(v35, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 208, 1);
        __int16 v37 = pthread_getspecific(*((void *)v36 + 74));
        if (v37 && *((unsigned char *)v37 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"Different global variable pointer detected", 42);
        }
        std::string v38 = pthread_getspecific(*((void *)v36 + 74));
        if (v38)
        {
          if (*((unsigned char *)v38 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(v38[2] - 24) + 16));
            __int16 v39 = std::locale::use_facet((const std::locale *)&v66, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
            std::locale::~locale((std::locale *)&v66);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v36);
            if (*((_DWORD *)v36 + 150) == 7)
            {
              __print_back_trace();
              uint64_t v40 = __cxa_allocate_exception(8uLL);
              *uint64_t v40 = "LOG_FATAL encountered";
              __cxa_throw(v40, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
      }
    }
    return a1;
  }
  global_registry = turi::globals::get_global_registry(0);
  uint64_t v16 = turi::globals::get_global_registry(void)::global_registry;
  uint64_t v15 = qword_2680815B8;
  turi::globals::get_global_registry_map((turi::globals *)global_registry);
  v66.__r_.__value_.__r.__words[0] = a2;
  int v17 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v66);
  v17[7] = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 4);
  turi::globals::get_global_registry((turi::globals *)v17);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v66 = *(std::string *)a2;
  }
  std::__function::__value_func<BOOL ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v63, a5);
  uint64_t v64 = a3;
  std::__function::__value_func<BOOL ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v65, (uint64_t)v63);
  uint64_t v68 = v64;
  std::__function::__value_func<BOOL ()(std::string)>::__value_func[abi:ne180100]((uint64_t)&v69, (uint64_t)v65);
  int v67 = 2;
  char v70 = a4;
  uint64_t v18 = qword_2680815B8;
  if (qword_2680815B8 >= (unint64_t)qword_2680815C0)
  {
    uint64_t v20 = std::vector<turi::globals::global_value>::__push_back_slow_path<turi::globals::global_value>(&turi::globals::get_global_registry(void)::global_registry, (long long *)&v66);
  }
  else
  {
    long long v19 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
    *(void *)(qword_2680815B8 + 16) = *((void *)&v66.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v18 = v19;
    memset(&v66, 0, sizeof(v66));
    boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(v18 + 24, (unsigned int *)&v67);
    *(unsigned char *)(v18 + 72) = v70;
    uint64_t v20 = v18 + 80;
  }
  qword_2680815B8 = v20;
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content(&v67);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](v65);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](v63);
  char v21 = (cppipc *)global_logger();
  int v22 = *((_DWORD *)v21 + 169);
  if (a4)
  {
    if (v22 <= 2)
    {
      if (cppipc::must_cancel(v21)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v23 = (file_logger *)global_logger();
      int v24 = file_logger::start_stream(v23, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 218, 1);
      std::string v25 = pthread_getspecific(*((void *)v24 + 74));
      if (v25 && *((unsigned char *)v25 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Registering runtime modifiable configuration variable ", 54);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v61 = *(std::string *)a2;
      }
      uint64_t v41 = file_logger::operator<<<std::string>((uint64_t)v24, (uint64_t)&v61);
      uint64_t v42 = pthread_getspecific(*(void *)(v41 + 592));
      if (v42 && *((unsigned char *)v42 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)" = ", 3);
      }
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v60 = *(std::string *)a3;
      }
      uint64_t v45 = file_logger::operator<<<std::string>(v41, (uint64_t)&v60);
      uint64_t v46 = pthread_getspecific(*(void *)(v45 + 592));
      if (v46 && *((unsigned char *)v46 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)" (string)", 9);
      }
      __n128 v47 = pthread_getspecific(*(void *)(v45 + 592));
      if (v47)
      {
        if (*((unsigned char *)v47 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(void *)(v47[2] - 24) + 16));
          __n128 v48 = std::locale::use_facet((const std::locale *)&v66, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
          std::locale::~locale((std::locale *)&v66);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v45);
          if (*(_DWORD *)(v45 + 600) == 7)
          {
            __print_back_trace();
            std::string v56 = __cxa_allocate_exception(8uLL);
            void *v56 = "LOG_FATAL encountered";
            __cxa_throw(v56, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      {
        unsigned int v49 = &v61;
LABEL_85:
        operator delete(v49->__r_.__value_.__l.__data_);
      }
    }
  }
  else if (v22 <= 2)
  {
    if (cppipc::must_cancel(v21)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v26 = (file_logger *)global_logger();
    int v27 = file_logger::start_stream(v26, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 221, 1);
    std::string::size_type v28 = pthread_getspecific(*((void *)v27 + 74));
    if (v28 && *((unsigned char *)v28 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)"Registering environment modifiable configuration variable ", 58);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v59 = *(std::string *)a2;
    }
    uint64_t v43 = file_logger::operator<<<std::string>((uint64_t)v27, (uint64_t)&v59);
    unint64_t v44 = pthread_getspecific(*(void *)(v43 + 592));
    if (v44 && *((unsigned char *)v44 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)" = ", 3);
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    uint64_t v50 = file_logger::operator<<<std::string>(v43, (uint64_t)&__p);
    std::string v51 = pthread_getspecific(*(void *)(v50 + 592));
    if (v51 && *((unsigned char *)v51 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51 + 2, (uint64_t)" (string)", 9);
    }
    std::string v52 = pthread_getspecific(*(void *)(v50 + 592));
    if (v52)
    {
      if (*((unsigned char *)v52 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(v52[2] - 24) + 16));
        uint64_t v53 = std::locale::use_facet((const std::locale *)&v66, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
        std::locale::~locale((std::locale *)&v66);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v50);
        if (*(_DWORD *)(v50 + 600) == 7)
        {
          __print_back_trace();
          int v57 = __cxa_allocate_exception(8uLL);
          *int v57 = "LOG_FATAL encountered";
          __cxa_throw(v57, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v49 = &v59;
      goto LABEL_85;
    }
  }
  return a1;
}

void sub_223D54774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  std::locale::~locale((std::locale *)(v43 - 160));
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

turi::globals *turi::globals::register_global<long long>::register_global(turi::globals *a1, std::string::size_type a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  turi::globals::get_global_registry_map(a1);
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2))
  {
    long long v10 = (int *)global_logger();
    if (v10[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v10)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 182, 1);
      std::string::size_type v13 = pthread_getspecific(*((void *)started + 74));
      if (v13 && *((unsigned char *)v13 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Configuration variable ", 23);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v52 = *(std::string *)a2;
      }
      uint64_t v29 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v52);
      int v30 = pthread_getspecific(*(void *)(v29 + 592));
      if (v30 && *((unsigned char *)v30 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)" already registered", 19);
      }
      BOOL v31 = pthread_getspecific(*(void *)(v29 + 592));
      if (v31)
      {
        if (*((unsigned char *)v31 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(v31[2] - 24) + 16));
          std::string::size_type v32 = std::locale::use_facet((const std::locale *)&v56, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
          std::locale::~locale((std::locale *)&v56);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v29);
          if (*(_DWORD *)(v29 + 600) == 7)
          {
            __print_back_trace();
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            *exceptiouint64_t n = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v33 = &v52;
LABEL_65:
        operator delete(v33->__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    global_registry = turi::globals::get_global_registry(0);
    uint64_t v16 = turi::globals::get_global_registry(void)::global_registry;
    uint64_t v15 = qword_2680815B8;
    turi::globals::get_global_registry_map((turi::globals *)global_registry);
    v56.__r_.__value_.__r.__words[0] = a2;
    int v17 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v56);
    v17[7] = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 4);
    turi::globals::get_global_registry((turi::globals *)v17);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v56 = *(std::string *)a2;
    }
    std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100]((uint64_t)v53, a5);
    uint64_t v54 = a3;
    std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100]((uint64_t)v55, (uint64_t)v53);
    uint64_t v58 = v54;
    std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100]((uint64_t)&v59, (uint64_t)v55);
    int v57 = 1;
    char v60 = a4;
    uint64_t v18 = qword_2680815B8;
    if (qword_2680815B8 >= (unint64_t)qword_2680815C0)
    {
      uint64_t v20 = std::vector<turi::globals::global_value>::__push_back_slow_path<turi::globals::global_value>(&turi::globals::get_global_registry(void)::global_registry, (long long *)&v56);
    }
    else
    {
      long long v19 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
      *(void *)(qword_2680815B8 + 16) = *((void *)&v56.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v18 = v19;
      memset(&v56, 0, sizeof(v56));
      boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(v18 + 24, (unsigned int *)&v57);
      *(unsigned char *)(v18 + 72) = v60;
      uint64_t v20 = v18 + 80;
    }
    qword_2680815B8 = v20;
    boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content(&v57);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v55);
    std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v53);
    char v21 = (cppipc *)global_logger();
    int v22 = *((_DWORD *)v21 + 169);
    if (a4)
    {
      if (v22 <= 2)
      {
        if (cppipc::must_cancel(v21)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        uint64_t v23 = (file_logger *)global_logger();
        int v24 = file_logger::start_stream(v23, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 191, 1);
        std::string v25 = pthread_getspecific(*((void *)v24 + 74));
        if (v25 && *((unsigned char *)v25 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Registering runtime modifiable configuration variable ", 54);
        }
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v51 = *(std::string *)a2;
        }
        uint64_t v34 = file_logger::operator<<<std::string>((uint64_t)v24, (uint64_t)&v51);
        uint64_t v35 = pthread_getspecific(*(void *)(v34 + 592));
        if (v35 && *((unsigned char *)v35 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)" = ", 3);
        }
        uint64_t v36 = file_logger::operator<<<long long>(v34);
        __int16 v37 = pthread_getspecific(*(void *)(v36 + 592));
        if (v37 && *((unsigned char *)v37 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)" (int64_t)", 10);
        }
        std::string v38 = pthread_getspecific(*(void *)(v36 + 592));
        if (v38)
        {
          if (*((unsigned char *)v38 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(v38[2] - 24) + 16));
            __int16 v39 = std::locale::use_facet((const std::locale *)&v56, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
            std::locale::~locale((std::locale *)&v56);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v36);
            if (*(_DWORD *)(v36 + 600) == 7)
            {
              __print_back_trace();
              __n128 v48 = __cxa_allocate_exception(8uLL);
              *__n128 v48 = "LOG_FATAL encountered";
              __cxa_throw(v48, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v33 = &v51;
          goto LABEL_65;
        }
      }
    }
    else if (v22 <= 2)
    {
      if (cppipc::must_cancel(v21)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v26 = (file_logger *)global_logger();
      int v27 = file_logger::start_stream(v26, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 194, 1);
      std::string::size_type v28 = pthread_getspecific(*((void *)v27 + 74));
      if (v28 && *((unsigned char *)v28 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)"Registering environment modifiable configuration variable ", 58);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v50 = *(std::string *)a2;
      }
      uint64_t v40 = file_logger::operator<<<std::string>((uint64_t)v27, (uint64_t)&v50);
      uint64_t v41 = pthread_getspecific(*(void *)(v40 + 592));
      if (v41 && *((unsigned char *)v41 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)" = ", 3);
      }
      uint64_t v42 = file_logger::operator<<<long long>(v40);
      uint64_t v43 = pthread_getspecific(*(void *)(v42 + 592));
      if (v43 && *((unsigned char *)v43 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)" (int64_t)", 10);
      }
      unint64_t v44 = pthread_getspecific(*(void *)(v42 + 592));
      if (v44)
      {
        if (*((unsigned char *)v44 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(v44[2] - 24) + 16));
          uint64_t v45 = std::locale::use_facet((const std::locale *)&v56, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
          std::locale::~locale((std::locale *)&v56);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v42);
          if (*(_DWORD *)(v42 + 600) == 7)
          {
            __print_back_trace();
            unsigned int v49 = __cxa_allocate_exception(8uLL);
            *unsigned int v49 = "LOG_FATAL encountered";
            __cxa_throw(v49, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v33 = &v50;
        goto LABEL_65;
      }
    }
  }
  return a1;
}

void sub_223D54FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content(int *a1)
{
  return boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::destroyer,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v2, (uint64_t)(a1 + 2));
}

void *std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::destroyer,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      uint64_t result = std::__function::__value_func<BOOL ()(double)>::~__value_func[abi:ne180100]((void *)(a4 + 8));
      break;
    case 1:
      uint64_t result = std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100]((void *)(a4 + 8));
      break;
    case 2:
      uint64_t result = std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100]((void *)(a4 + 8));
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return result;
}

uint64_t boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(uint64_t a1, unsigned int *a2)
{
  uint64_t v5 = (void *)(a1 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*a2, *a2 ^ ((int)*a2 >> 31), &v5, (void *)a2 + 1);
  *(_DWORD *)a1 = *a2 ^ ((int)*a2 >> 31);
  return a1;
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>(boost::detail::variant *a1, int a2, void **a3, void *a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = *a3;
      *uint64_t v4 = *a4;
      uint64_t v5 = (uint64_t)(v4 + 1);
      uint64_t result = std::__function::__value_func<BOOL ()(double)>::__value_func[abi:ne180100](v5, (uint64_t)(a4 + 1));
      break;
    case 1:
      uint64_t v7 = *a3;
      *uint64_t v7 = *a4;
      uint64_t v8 = (uint64_t)(v7 + 1);
      uint64_t result = std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100](v8, (uint64_t)(a4 + 1));
      break;
    case 2:
      uint64_t v9 = *a3;
      *uint64_t v9 = *a4;
      uint64_t v10 = (uint64_t)(v9 + 1);
      uint64_t result = std::__function::__value_func<BOOL ()(std::string)>::__value_func[abi:ne180100](v10, (uint64_t)(a4 + 1));
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return result;
}

uint64_t std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__func<BOOL (*)(long long),std::allocator<BOOL (*)(long long)>,BOOL ()(long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D75CF70;
  a2[1] = v2;
  return result;
}

uint64_t *turi::globals::get_global_registry_map(turi::globals *this)
{
  {
    qword_2680815E0 = 0;
    qword_2680815D8 = 0;
    turi::globals::get_global_registry_map(void)::global_registry_map = (uint64_t)&qword_2680815D8;
    __cxa_atexit((void (*)(void *))std::map<std::string,unsigned long>::~map[abi:ne180100], &turi::globals::get_global_registry_map(void)::global_registry_map, &dword_223D44000);
  }
  return &turi::globals::get_global_registry_map(void)::global_registry_map;
}

uint64_t *turi::globals::get_global_registry(turi::globals *this)
{
  {
    turi::globals::get_global_registry(void)::global_registry = 0;
    qword_2680815B8 = 0;
    qword_2680815C0 = 0;
    __cxa_atexit((void (*)(void *))std::vector<turi::globals::global_value>::~vector[abi:ne180100], &turi::globals::get_global_registry(void)::global_registry, &dword_223D44000);
  }
  return &turi::globals::get_global_registry(void)::global_registry;
}

void *std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *global_logger(void)
{
  {
    file_logger::file_logger((file_logger *)&global_logger(void)::l);
    __cxa_atexit((void (*)(void *))file_logger::~file_logger, &global_logger(void)::l, &dword_223D44000);
  }
  return &global_logger(void)::l;
}

void sub_223D55650(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_223D5578C(_Unwind_Exception *a1)
{
  *char v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::__function::__value_func<BOOL ()(std::string)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::__function::__func<BOOL (*)(std::string),std::allocator<BOOL (*)(std::string)>,BOOL ()(std::string)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D75CEC0;
  a2[1] = v2;
  return result;
}

uint64_t std::vector<turi::globals::global_value>::__push_back_slow_path<turi::globals::global_value>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[80 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[80 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant((uint64_t)(v11 + 24), (unsigned int *)a2 + 6);
  v11[72] = *((unsigned char *)a2 + 72);
  v15[2] = v11 + 80;
  std::vector<turi::globals::global_value>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<turi::globals::global_value>::~__split_buffer(v15);
  return v13;
}

void sub_223D55BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::globals::global_value>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::globals::global_value>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>,std::reverse_iterator<turi::globals::global_value*>,std::reverse_iterator<turi::globals::global_value*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

void **std::__split_buffer<turi::globals::global_value>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void file_logger::file_logger(file_logger *this)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  *((void *)this + 52) = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = (char *)this + 8;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24));
  std::ios_base::init(v6, (char *)this + 8);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)this = v7;
  *((void *)this + 52) = v2;
  MEMORY[0x22A614840](v3);
  *((void *)this + 73) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((void *)this + 85) = -1;
  for (uint64_t i = 712; i != 968; i += 32)
    *(void *)((char *)this + i) = 0;
  MEMORY[0x22A614700]((char *)this + 568, "");
  *((unsigned char *)this + 672) = 1;
  *((_DWORD *)this + 169) = 3;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 608), 0);
  pthread_key_create((pthread_key_t *)this + 74, (void (__cdecl *)(void *))streambuffdestructor);
}

void sub_223D55E98(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x22A614E30](v1);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_3()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_4()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_5()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_8()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_9()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_10()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_11()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_12()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_13()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_7_14()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_11()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_11_0()
{
  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_11_1()
{
  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_11_2()
{
  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_11_3()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_11_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_11_5()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_11_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_11_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_11_8()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_11_9()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_11_10()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_8()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_8_0()
{
  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_8_1()
{
  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

void __cxx_global_var_init_8_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_8_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_8_4()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_8_5()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_8_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_8_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_8_8()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_12()
{
  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_12_0()
{
  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_12_1()
{
  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

void __cxx_global_var_init_12_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_12_3()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_12_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_12_5()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_12_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_268068170 = 0;
    unk_268068160 = 0u;
    unk_268068150 = 0u;
    unk_268068140 = 0u;
    unk_268068130 = 0u;
    qword_268068128 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_12_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_12_8()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_21()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_21_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_21_1()
{
  {
    uint64_t v0 = sysconf(58);
    if ((unint64_t)v0 > 0xFFFFFFFE) {
      int v1 = -1;
    }
    else {
      int v1 = v0;
    }
    if (v0 < 1) {
      int v1 = 1;
    }
    boost::interprocess::ipcdetail::num_core_holder<0>::num_cores = v1;
  }
}

void __cxx_global_var_init_21_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_21_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_21_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_21_5()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_21_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_21_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_21_8()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_10()
{
  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

void __cxx_global_var_init_10_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_10_1()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_10_2()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_10_3()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_10_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_10_5()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_10_6()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_10_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_22()
{
  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_22_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_22_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_22_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_22_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_22_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_22_5()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_22_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_22_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_16()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_16_0()
{
  {
    return turi::any::holder<std::vector<turi::flex_type_enum>>::registry_type::registry_type(&turi::any::holder<std::vector<turi::flex_type_enum>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_16_1()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_16_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_16_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_16_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_16_5()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_16_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_16_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_20()
{
  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_20_0()
{
  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

void __cxx_global_var_init_20_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_20_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_20_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_20_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_19()
{
  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

void __cxx_global_var_init_19_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_19_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_19_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_19_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_19_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_18()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_18_0()
{
  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

void __cxx_global_var_init_18_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_18_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_18_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680680D8 = 0;
    unk_2680680C8 = 0u;
    unk_2680680B8 = 0u;
    unk_2680680A8 = 0u;
    unk_268068098 = 0u;
    qword_268068090 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_18_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_14()
{
  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_14_0()
{
  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

void __cxx_global_var_init_14_1()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_14_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_14_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_14_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_13()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_13_0()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_13_1()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_13_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_13_3()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_13_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_util_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_registration_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_registration_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_row_translation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_row_translation_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_column_modes_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_column_modes_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_block_manager_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_block_manager_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_metadata_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_metadata_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_io_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_internal_metadata_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_internal_metadata_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_groupby_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_groupby_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_column_indexer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_column_indexer_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_alias_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_alias_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t *__cxx_global_var_init_15()
{
  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_15_0()
{
  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

void __cxx_global_var_init_15_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_15_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_15_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_9()
{
  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_9_0()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_9_1()
{
  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_9_2()
{
  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

void __cxx_global_var_init_9_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_17()
{
  {
    return turi::any::holder<long long>::registry_type::registry_type(&turi::any::holder<long long>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_17_0()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_17_1()
{
  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_17_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_17_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_31()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_31_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_31_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_31_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_26()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_26_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_26_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_26_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_29()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_29_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_29_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_29_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680680D8 = 0;
    unk_2680680C8 = 0u;
    unk_2680680B8 = 0u;
    unk_2680680A8 = 0u;
    unk_268068098 = 0u;
    qword_268068090 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_27()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_27_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_27_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_27_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_23()
{
  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

void __cxx_global_var_init_23_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::string>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_268067208 = 0;
    unk_2680671F8 = 0u;
    unk_2680671E8 = 0u;
    unk_2680671D8 = 0u;
    unk_2680671C8 = 0u;
    qword_2680671C0 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::string>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_23_1()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_23_2()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void _GLOBAL__sub_I_mps_trainer_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_graph_networks_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_graph_cnnmodule_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_od_backend_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_compute_context_mm()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
  operator new();
}

void sub_223D5C848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__value_func[abi:ne180100]((void *)(v3 - 56));
  MEMORY[0x22A614FA0](v2, 0x1020C408A2B640DLL);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mlc_compute_context_mm()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  operator new();
}

void sub_223D5C9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void *std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

int *turi::neural_net::compute_context::registration::registration(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v13 = a2;
  *a1 = a2;
  uint64_t v8 = (uint64_t)(a1 + 18);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a3);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__value_func[abi:ne180100]((uint64_t)(a1 + 10), a4);
  uint64_t v9 = (turi::neural_net::_anonymous_namespace_ *)std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__value_func[abi:ne180100](v8, a5);
  long long v12 = a1;
  std::__tree<std::__value_type<int,turi::neural_net::compute_context::registration *>,std::__map_value_compare<int,std::__value_type<int,turi::neural_net::compute_context::registration *>,std::less<int>,true>,std::allocator<std::__value_type<int,turi::neural_net::compute_context::registration *>>>::__emplace_multi<int &,turi::neural_net::compute_context::registration *>(registry, &v13, &v12);
  return a1;
}

void sub_223D5CB2C(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D753058;
  a2[1] = v2;
  return result;
}

_DWORD *std::__tree<std::__value_type<int,turi::neural_net::compute_context::registration *>,std::__map_value_compare<int,std::__value_type<int,turi::neural_net::compute_context::registration *>,std::less<int>,true>,std::allocator<std::__value_type<int,turi::neural_net::compute_context::registration *>>>::__emplace_multi<int &,turi::neural_net::compute_context::registration *>(uint64_t **a1, int *a2, void *a3)
{
  uint64_t v6 = operator new(0x30uLL);
  int v7 = *a2;
  v6[8] = *a2;
  *((void *)v6 + 5) = *a3;
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v9;
        if (v7 >= *((_DWORD *)v9 + 8)) {
          break;
        }
        uint64_t v9 = (uint64_t *)*v9;
        uint64_t v10 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = (uint64_t *)v9[1];
    }
    while (v9);
    uint64_t v10 = v8 + 1;
  }
  else
  {
    uint64_t v10 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v10, (uint64_t *)v6);
  return v6;
}

uint64_t turi::neural_net::anonymous namespace'::get_registry(turi::neural_net::_anonymous_namespace_ *this)
{
  {
    operator new();
  }
}

void sub_223D5CD14(_Unwind_Exception *a1)
{
}

void _GLOBAL__sub_I_mps_layers_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_graph_layers_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_cnnmodule_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_networks_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_graph_trainer_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

void _GLOBAL__sub_I_mps_updater_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::neural_net::SAME = [MEMORY[0x263F13360] paddingWithMethod:16];
  turi::neural_net::VALID = [MEMORY[0x263F13360] paddingWithMethod:0];
}

uint64_t *__cxx_global_var_init_24()
{
  {
    return turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry_type::registry_type(&turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_138()
{
  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_137()
{
  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_136()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_135()
{
  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_134()
{
  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_133()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_131()
{
  {
    return turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(&turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_130()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_129()
{
  {
    return turi::any::holder<turi::sframe>::registry_type::registry_type(&turi::any::holder<turi::sframe>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_128()
{
  {
    return turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_127()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_75()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_75_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_75_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_35()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_35_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_35_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_groupby_aggregate_impl_cpp()
{
  v3[3] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0) {
      operator delete((void *)v2[i + 3]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_223D44000);
}

void sub_223D5D88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0) {
      operator delete(*(void **)(v15 + v17 + 24));
    }
    v17 -= 24;
    if (v17 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_unity_sframe_cpp()
{
  v3[3] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0) {
      operator delete((void *)v2[i + 3]);
    }
  }
  uint64_t result = __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_223D44000);
  boost::spirit::lit = 0;
  boost::spirit::biuint64_t n = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::streauint64_t m = 0;
  boost::spirit::wstreauint64_t m = 0;
  boost::spirit::left_aliguint64_t n = 0;
  boost::spirit::right_aliguint64_t n = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::tokeuint64_t n = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_tokeuint64_t n = 0;
  boost::spirit::tokenid_masuint64_t k = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

void sub_223D5DBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0) {
      operator delete(*(void **)(v15 + v17 + 24));
    }
    v17 -= 24;
    if (v17 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_connected_component_sgraph_cpp()
{
  v3[3] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0) {
      operator delete((void *)v2[i + 3]);
    }
  }
  __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::connected_component::COMPONENT_ID_COLUMN, "component_id");
  return __cxa_atexit(MEMORY[0x263F8C0B8], turi::connected_component::COMPONENT_ID_COLUMN, &dword_223D44000);
}

void sub_223D5DD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0) {
      operator delete(*(void **)(v15 + v17 + 24));
    }
    v17 -= 24;
    if (v17 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_image_classification_cpp()
{
  v3[3] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0) {
      operator delete((void *)v2[i + 3]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_223D44000);
}

void sub_223D5DED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0) {
      operator delete(*(void **)(v15 + v17 + 24));
    }
    v17 -= 24;
    if (v17 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_groupby_aggregate_cpp()
{
  v3[3] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0) {
      operator delete((void *)v2[i + 3]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_223D44000);
}

void sub_223D5E03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0) {
      operator delete(*(void **)(v15 + v17 + 24));
    }
    v17 -= 24;
    if (v17 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_groupby_aggregate_cpp_0()
{
  v3[3] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0) {
      operator delete((void *)v2[i + 3]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_223D44000);
}

void sub_223D5E1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0) {
      operator delete(*(void **)(v15 + v17 + 24));
    }
    v17 -= 24;
    if (v17 == -48) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_223D5E25C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_223D5E37C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_6_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_6_1()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

uint64_t *__cxx_global_var_init_6_2()
{
  {
    return turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(&turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry);
  }
  return result;
}

void __cxx_global_var_init_6_3()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_6_4()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_6_5()
{
  {
    boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_exception_>::e);
    __cxa_atexit((void (*)(void *))boost::filesystem::directory_iterator::~directory_iterator, boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_exception_>::e, &dword_223D44000);
  }
}

void __cxx_global_var_init_6_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_6_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_52()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680680D8 = 0;
    unk_2680680C8 = 0u;
    unk_2680680B8 = 0u;
    unk_2680680A8 = 0u;
    unk_268068098 = 0u;
    qword_268068090 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_unity_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  int v0 = pthread_mutex_init(&turi::dag_access_mutex, 0);
  assert_msg(v0 == 0, "Mutex create error %d", v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::dag_access_mutex, &dword_223D44000);
}

void __cxx_global_var_init_37()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_37_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_37_1()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_37_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_37_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_process_unix_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t v0 = pthread_mutex_init(&sigchld_handler_lock, 0);
  assert_msg(v0 == 0, v1, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &sigchld_handler_lock, &dword_223D44000);
}

void __cxx_global_var_init_51()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_51_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_51_1()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<unsigned long>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_268068368 = 0;
    unk_268068358 = 0u;
    unk_268068348 = 0u;
    unk_268068338 = 0u;
    unk_268068328 = 0u;
    qword_268068320 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<unsigned long>>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_unity_server_control_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t v0 = pthread_mutex_init(&turi::_server_start_lock, 0);
  assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::_server_start_lock, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_gl_sarray_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  int v0 = pthread_mutex_init(&turi::reader_shared_ptr_lock, 0);
  assert_msg(v0 == 0, "Mutex create error %d", v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::reader_shared_ptr_lock, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_log_rotate_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  unk_2680816C8 = 0;
  turi::log_base_name = 0uLL;
  int v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], &turi::log_base_name, &dword_223D44000);
  qword_2680816D8 = 0;
  unk_2680816E0 = 0;
  turi::symlink_name = 0;
  __cxa_atexit(v0, &turi::symlink_name, &dword_223D44000);
  __cxa_atexit((void (*)(void *))std::shared_ptr<turi::thread>::~shared_ptr[abi:ne180100], &turi::log_rotate_thread, &dword_223D44000);
  int v1 = pthread_mutex_init(&turi::lock, 0);
  assert_msg(v1 == 0, "Mutex create error %d", v1);
  __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::lock, &dword_223D44000);
  turi::conditional::conditional(&turi::cond);
  return __cxa_atexit((void (*)(void *))turi::conditional::~conditional, &turi::cond, &dword_223D44000);
}

pthread_cond_t *turi::conditional::conditional(pthread_cond_t *this)
{
  if (pthread_cond_init(this, 0)) {
    turi::conditional::conditional(void)::{lambda(void)#1}::operator()();
  }
  return this;
}

uint64_t _GLOBAL__sub_I_backtrace_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t v0 = pthread_mutex_init(&back_trace_file_lock, 0);
  assert_msg(v0 == 0, v1, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &back_trace_file_lock, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_timer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  int v0 = pthread_mutex_init(&turi::rtdsc_ticks_per_sec_mutex, 0);
  assert_msg(v0 == 0, "Mutex create error %d", v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::rtdsc_ticks_per_sec_mutex, &dword_223D44000);
}

void __cxx_global_var_init_86()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_268068170 = 0;
    unk_268068160 = 0u;
    unk_268068150 = 0u;
    unk_268068140 = 0u;
    unk_268068130 = 0u;
    qword_268068128 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_tracepoint_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t v0 = pthread_mutex_init(&turi::printlock, 0);
  assert_msg(v0 == 0, v1, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::printlock, &dword_223D44000);
}

void __cxx_global_var_init_5()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_268067078 = 0;
    unk_268067068 = 0u;
    unk_268067058 = 0u;
    unk_268067048 = 0u;
    unk_268067038 = 0u;
    qword_268067030 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::string>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_268067208 = 0;
    unk_2680671F8 = 0u;
    unk_2680671E8 = 0u;
    unk_2680671D8 = 0u;
    unk_2680671C8 = 0u;
    qword_2680671C0 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::string>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_1()
{
  {
    boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_alloc_>::e);
    __cxa_atexit((void (*)(void *))boost::filesystem::directory_iterator::~directory_iterator, boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_alloc_>::e, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_2()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_268067F50 = 0;
    unk_268067F40 = 0u;
    unk_268067F30 = 0u;
    unk_268067F20 = 0u;
    unk_268067F10 = 0u;
    qword_268067F08 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_3()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_4()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_5()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_6()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_7()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::v2::ml_data_internal::row_data_block>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_268068030 = 0;
    unk_268068020 = 0u;
    unk_268068010 = 0u;
    unk_268068000 = 0u;
    unk_268067FF0 = 0u;
    qword_268067FE8 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::v2::ml_data_internal::row_data_block>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_8()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_9()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_10()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_11()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_12()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_5_13()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t assert_msg(uint64_t result, const char *a2, ...)
{
  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "invalid url cache predix";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = a2;
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v2[0] = (uint64_t *)&v4;
    v2[1] = (uint64_t *)&v3;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
  }
  return result;
}

void assert_msg(uint64_t a1, const char *a2, ...)
{
  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Attempting to seek in a compressed file. Fail!";
  v2[0] = (uint64_t *)&v4;
  v2[1] = (uint64_t *)&v3;
  vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  uint64_t v4 = "Uninitialized tokenizer.";
  v2[0] = (uint64_t *)&v4;
  v2[1] = (uint64_t *)&v3;
  vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
}

uint64_t assert_msg(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  uint64_t v11;

  uint64_t v10 = &a9;
  uint64_t v11 = a2;
  if ((result & 1) == 0)
  {
    v9[0] = &v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

{
  uint64_t *v9[2];
  uint64_t *v10;
  const char *v11;

  uint64_t v10 = &a9;
  uint64_t v11 = "Mutex create error %d";
  if ((result & 1) == 0)
  {
    v9[0] = (uint64_t *)&v11;
    v9[1] = (uint64_t *)&v10;
    vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v9);
  }
  return result;
}

uint64_t *boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>@<X0>(void *a1@<X8>)
{
  memset(v9, 0, sizeof(v9));
  int v10 = -1;
  std::bad_alloc::bad_alloc(&v11);
  uint64_t v8 = &unk_26D7754B0;
  v11.__vftable = (std::bad_alloc_vtbl *)&unk_26D7754D0;
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl((uint64_t)&v4, (uint64_t)&v8);
  v5[1] = (uint64_t)"exception_ptr boost::exception_detail::get_static_exception_object() [Exceptiouint64_t n = boost::exception_de"
                   "tail::bad_alloc_]";
  v5[2] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/e"
                   "xception/detail/exception_ptr.hpp";
  int v6 = 129;
  {
    operator new();
  }
  uint64_t v2 = *(void *)algn_268067B88;
  *a1 = boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(void)::ep;
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  std::bad_alloc::~bad_alloc(&v7);
  uint64_t v4 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v5);
  std::bad_alloc::~bad_alloc(&v11);
  uint64_t v8 = &unk_26D754388;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v9);
}

void sub_223D645BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  MEMORY[0x22A614FA0](v4, 0x10F1C4085500448);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl((uint64_t)va);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>@<X0>(void *a1@<X8>)
{
  memset(v9, 0, sizeof(v9));
  int v10 = -1;
  uint64_t v8 = &unk_26D775670;
  v11.__vftable = (std::bad_exception_vtbl *)&unk_26D775690;
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl((uint64_t)&v4, (uint64_t)&v8);
  v5[1] = (uint64_t)"exception_ptr boost::exception_detail::get_static_exception_object() [Exceptiouint64_t n = boost::exception_de"
                   "tail::bad_exception_]";
  v5[2] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/e"
                   "xception/detail/exception_ptr.hpp";
  int v6 = 129;
  {
    operator new();
  }
  uint64_t v2 = unk_268067BA0;
  *a1 = boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(void)::ep;
  a1[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  std::bad_exception::~bad_exception(&v7);
  uint64_t v4 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v5);
  std::bad_exception::~bad_exception(&v11);
  uint64_t v8 = &unk_26D754388;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v9);
}

void sub_223D647E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  MEMORY[0x22A614FA0](v4, 0x10F1C4085500448);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl((uint64_t)va);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_26D7542E8;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_26D754388;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)a1 = &unk_26D7756F8;
  *(void *)(a1 + 40) = &unk_26D775728;
  *(void *)(a1 + 48) = &unk_26D775768;
  return a1;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  *(void *)(a1 + 48) = &unk_26D7542E8;
  *(void *)a1 = &unk_26D754388;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)a1 = &unk_26D7756F8;
  *(void *)(a1 + 40) = &unk_26D775728;
  *(void *)(a1 + 48) = &unk_26D775768;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    std::bad_exception v7 = v10;
  }
  else
  {
    std::bad_exception v7 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 8), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

void sub_223D64B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_26D7542E8;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_26D754388;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)a1 = &unk_26D775538;
  *(void *)(a1 + 40) = &unk_26D775568;
  *(void *)(a1 + 48) = &unk_26D7755A8;
  return a1;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  *(void *)(a1 + 48) = &unk_26D7542E8;
  *(void *)a1 = &unk_26D754388;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)a1 = &unk_26D775538;
  *(void *)(a1 + 40) = &unk_26D775568;
  *(void *)(a1 + 48) = &unk_26D7755A8;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    std::bad_exception v7 = v10;
  }
  else
  {
    std::bad_exception v7 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 8), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

void sub_223D64E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::shared_ptr<boost::exception_detail::clone_base const>::shared_ptr<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>(void *a1, void *a2)
{
  if (a2) {
    uint64_t v2 = (char *)a2 + *(void *)(*a2 - 24);
  }
  else {
    uint64_t v2 = 0;
  }
  *a1 = v2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>(&v3);
}

void sub_223D64F10(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223D64F94(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(v1);
  }
  __cxa_rethrow();
}

void sub_223D64FAC(_Unwind_Exception *a1)
{
}

void boost::shared_ptr<boost::exception_detail::clone_base const>::shared_ptr<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(void *a1, void *a2)
{
  if (a2) {
    uint64_t v2 = (char *)a2 + *(void *)(*a2 - 24);
  }
  else {
    uint64_t v2 = 0;
  }
  *a1 = v2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(&v3);
}

void sub_223D6503C(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223D650C0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::shared_count::shared_count<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>(v1);
  }
  __cxa_rethrow();
}

void sub_223D650D8(_Unwind_Exception *a1)
{
}

uint64_t *_GLOBAL__sub_I_results_reporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_progress_monitor_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_test_framework_init_observer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_framework_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance();
  return result;
}

uint64_t *boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance()
{
  {
    boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance(void)::the_inst = (uint64_t)&unk_26D774EF0;
    __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance(void)::the_inst, &dword_223D44000);
  }
  return &boost::unit_test::singleton<boost::unit_test::framework_init_observer_t>::instance(void)::the_inst;
}

uint64_t *boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance()
{
  {
    boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance(void)::the_inst = (uint64_t)&unk_26D774BF8;
    __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance(void)::the_inst, &dword_223D44000);
  }
  return &boost::unit_test::singleton<boost::unit_test::progress_monitor_t>::instance(void)::the_inst;
}

void *_GLOBAL__sub_I_unit_test_monitor_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance();
  return result;
}

void *boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance()
{
  {
    boost::execution_monitor::execution_monitor((uint64_t)&boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance(void)::the_inst);
    __cxa_atexit((void (*)(void *))boost::unit_test::unit_test_monitor_t::~unit_test_monitor_t, &boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance(void)::the_inst, &dword_223D44000);
  }
  return &boost::unit_test::singleton<boost::unit_test::unit_test_monitor_t>::instance(void)::the_inst;
}

void sub_223D6545C(_Unwind_Exception *a1)
{
}

uint64_t boost::execution_monitor::execution_monitor(uint64_t this)
{
  *(_WORD *)this = 1;
  *(_DWORD *)(this + 4) = 0;
  *(unsigned char *)(this + 8) = 1;
  *(void *)(this + 12) = 0;
  *(void *)(this + 28) = 0;
  *(void *)(this + 20) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t *_GLOBAL__sub_I_results_collector_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_test_tools_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_test_main_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_unit_test_log_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance();
  return result;
}

uint64_t *boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance()
{
  {
    boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance(void)::the_inst = (uint64_t)&unk_26D7751E0;
    __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance(void)::the_inst, &dword_223D44000);
  }
  return &boost::unit_test::singleton<boost::unit_test::unit_test_log_t>::instance(void)::the_inst;
}

uint64_t *_GLOBAL__sub_I_xml_report_formatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_junit_log_formatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_unit_test_main_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_test_tree_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t *_GLOBAL__sub_I_plain_report_formatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t result = boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance();
  return result;
}

uint64_t *boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance()
{
  {
    boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance(void)::the_inst = (uint64_t)&unk_26D774CD0;
    __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance(void)::the_inst, &dword_223D44000);
  }
  return &boost::unit_test::singleton<boost::unit_test::results_collector_t>::instance(void)::the_inst;
}

void __cxx_global_var_init_79()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_79_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t __cxx_global_var_init_125()
{
  {
    return __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::asio::detail::service_base<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>>::id, &dword_223D44000);
  }
  return result;
}

uint64_t __cxx_global_var_init_124()
{
  {
    return __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::asio::detail::execution_context_service_base<boost::asio::detail::strand_executor_service>::id, &dword_223D44000);
  }
  return result;
}

uint64_t __cxx_global_var_init_123()
{
  {
    return __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::asio::detail::service_base<boost::asio::detail::strand_service>::id, &dword_223D44000);
  }
  return result;
}

uint64_t __cxx_global_var_init_120()
{
  {
    return __cxa_atexit((void (*)(void *))boost::asio::detail::posix_global_impl<boost::asio::system_context>::~posix_global_impl, &boost::asio::detail::posix_global_impl<boost::asio::system_context>::instance_, &dword_223D44000);
  }
  return result;
}

uint64_t __cxx_global_var_init_119()
{
  {
    return __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::asio::detail::execution_context_service_base<boost::asio::detail::kqueue_reactor>::id, &dword_223D44000);
  }
  return result;
}

uint64_t __cxx_global_var_init_118()
{
  {
    return __cxa_atexit((void (*)(void *))turi::neural_net::float_scalar::~float_scalar, &boost::asio::detail::execution_context_service_base<boost::asio::detail::scheduler>::id, &dword_223D44000);
  }
  return result;
}

void __cxx_global_var_init_70()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_70_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t __cxx_global_var_init_68()
{
  {
    boost::spirit::detail::list::node_iterator<boost::reference_wrapper<boost::spirit::utree>>::nil_node = 0u;
    *(_OWORD *)algn_268065330 = 0u;
    return __cxa_atexit((void (*)(void *))boost::spirit::utree::~utree, &boost::spirit::detail::list::node_iterator<boost::reference_wrapper<boost::spirit::utree>>::nil_node, &dword_223D44000);
  }
  return result;
}

void __cxx_global_var_init_68_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_67()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_67_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_50()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_50_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_46()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_46_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<unsigned long>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_268068368 = 0;
    unk_268068358 = 0u;
    unk_268068348 = 0u;
    unk_268068338 = 0u;
    unk_268068328 = 0u;
    qword_268068320 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<unsigned long>>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_45()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_45_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_39()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_39_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_34()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_34_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_28()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_28_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_25()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_25_0()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t *__cxx_global_var_init_132()
{
  {
    return turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(&turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry);
  }
  return result;
}

void __cxx_global_var_init_132_0()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_zmq_msg_vector_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_zlib_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_zero_copy_stream_impl_lite_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_zero_copy_stream_impl_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_zero_copy_stream_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_xml_log_formatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_xgboost_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_xgboost_extension_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_xgboost_exporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_xgboost_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_xgboost_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_wire_format_lite_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_winstances_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_windows_file_codecvt_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_wide_posix_api_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_weight_init_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_web_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_wc_regex_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_w32_regex_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_vega_spec_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_variant_deep_serialize_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_variant_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_utf8_codecvt_facet_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_usinstances_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_user_item_lists_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_updater_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_text_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_sketch_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_sframe_builder_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_server_init_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_server_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_sarray_builder_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_sarray_binary_operations_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_nearest_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_kmeans_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_global_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unity_evaluation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_unique_path_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_union_fstream_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_tss_null_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_transformation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_transform_to_flat_dict_extensions_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_train_test_split_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_topk_indexer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_topic_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_toolkit_function_registry_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_toolkit_class_registry_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_thread_pool_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_thread_clock_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_temp_files_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_table_element_printers_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_table_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_syserr_reporting_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_summary_view_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_subscribe_socket_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_subplan_executor_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_style_transfer_model_definition_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_style_transfer_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_style_transfer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_strutil_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_stringprintf_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_stringpiece_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_string_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_string_escape_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_statusor_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_statistics_tracker_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_static_mutex_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_st_resnet16_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_st_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_st_maml_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sparse_similarity_lookup_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sparse_nn_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sort_and_merge_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sort_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sliced_itemitem_matrix_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_simple_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_similarity_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_side_features_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_shuffle_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_show_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_shmipc_garbage_collect_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sgraph_triple_apply_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sgraph_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sgraph_fast_triple_apply_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sgd_solver_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_saving_impl_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_saving_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_rows_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_reader_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_iterators_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_index_mapping_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_index_file_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_compact_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sframe_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_scatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sarray_v2_type_encoding_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sarray_v2_encoded_block_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sarray_v2_block_writer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sarray_v2_block_manager_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sarray_sorted_buffer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sarray_index_file_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sanitize_url_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sample_transformer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_safe_circular_char_buffer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_rule_mining_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_row_slicing_utilities_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_row_reference_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_rolling_aggregate_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_repeated_field_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_regex_traits_defaults_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_regex_raw_buffer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_regex_debug_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_recsys_model_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ranking_squared_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ranking_logistic_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_random_sframe_generation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_random_forest_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_random_device_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_query_context_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_quantization_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_python_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_pylambda_worker_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_pylambda_function_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_pylambda_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_publish_socket_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_progress_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_process_wrapper_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_process_util_unix_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_process_cpu_clocks_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_process_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_print_zmq_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_precision_recall_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_posix_time_types_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_posix_api_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_popularity_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_png_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_plot_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_planner_node_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_perplexity_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_path_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_path_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_parameter_sampler_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_parallel_csv_parser_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_option_manager_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_option_info_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_optimization_transforms_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_optimization_engine_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_operator_transformations_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_operator_properties_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_one_shot_object_detector_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_once_atomic_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_once_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_yolo_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_serialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_scenenet_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_scenenet_serialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_scenenet_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_scenenet_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_evaluation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_od_darknet_yolo_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_object_factory_impl_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_object_factory_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_object_detector_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_object_detection_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_neural_net_models_exporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_net_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_nearest_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_model_spec_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_model_factory_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_model_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_mlmodel_wrapper_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_mldata_exporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_mlc_od_sn_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_sorting_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_setup_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_missing_values_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_iterator_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ml_data_block_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_metrics_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_meta_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_message_types_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_message_lite_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_message_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_md5_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_mapped_file_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_lsh_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_lsh_family_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_loss_model_profiles_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_logger_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_log_level_setter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_linear_models_exporter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_libjson_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_kmeans_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_json_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_jpeg_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_join_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_itemcf_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_item_frequency_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ipc_object_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ipc_deserializer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_io_buffer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_internal_demo_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_internalJSONNode_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_int128_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_instances_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_indexed_sframe_tools_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_image_util_impl_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_image_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_image_type_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_image_fn_export_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_image_deep_feature_extractor_toolkit_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_image_augmentation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_icu_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_human_action_recognition_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_histogram_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_har_model_definition_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_har_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_har_data_augmenter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_gzip_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_gregorian_types_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_greg_weekday_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_greg_month_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_graph_pylambda_master_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_graph_pylambda_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_gl_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_gl_sframe_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_gl_gframe_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_get_toolkit_function_from_closure_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_get_next_port_number_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_generated_message_util_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_general_fstream_source_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_general_fstream_sink_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_general_fstream_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_gbm_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_function_closure_info_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_fs_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_fs_util_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_fp_tree_header_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_fp_tree_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_fp_results_tree_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_fp_node_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_float_array_serialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_float_array_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_flexible_type_conversion_utilities_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_flexible_type_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_flex_dict_view_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_fixed_size_cache_manager_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_file_handle_pool_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_file_download_cache_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_file_descriptor_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_factorization_models_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_factorization_model_training_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_factorization_model_serialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_factorization_model_options_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_factorization_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_extension_set_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_execution_node_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_execution_monitor_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_execute_task_in_native_thread_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_escape_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_error_code_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ec_sort_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ec_permute_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_drawing_classifier_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_dmlc_simple_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_dir_archive_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_dict_transform_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_decorator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_decision_tree_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_debug_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_dc_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_date_generators_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_data_preparation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_data_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_dark_mode_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_curl_downloader_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_csv_writer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_cregex_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_cpp_regex_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_coreml_export_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_content_interpretation_extensions_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_content_interpretation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_console_cancel_handler_unix_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_compute_context_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_composite_row_type_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_compiler_log_formatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_common_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_comm_server_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_comm_client_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_columnwise_summary_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_column_unique_indexer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_coded_stream_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_codecvt_error_category_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_classifier_evaluations_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_cityhash_tc_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_chrono_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_cgs_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_categorical_heatmap_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_capi_prop_initialization_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_cancel_ops_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_cache_stream_source_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_cache_stream_sink_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_c_regex_traits_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_bzip2_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_brute_force_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_boosted_trees_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_batch_size_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_basic_sgd_squared_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_basic_sgd_logistic_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ball_tree_neighbors_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_atomicops_internals_x86_msvc_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_atomicops_internals_x86_gcc_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_async_reply_socket_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_arenastring_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_any_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_annotation_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_annotate_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_additional_sframe_utilities_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_activity_classifier_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ac_data_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_WordTaggerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_WordTagger_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_WordEmbeddingValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_WordEmbedding_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_VisionFeaturePrintValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_VisionFeaturePrint_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_UpdatableNeuralNetworkValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TuriException_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TuriErrorCode_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TreeEnsembleValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TreeEnsembleCommon_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TreeEnsemble_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TreeEnsemble_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TextClassifierValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TextClassifier_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TaskQueue_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_SoundAnalysisPreprocessingValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_SoundAnalysisPreprocessing_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_SignpostHelper_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Scaler_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ScalarValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_SVMValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_SVM_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_STGCNUtils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_STGCNModelTrainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_STGCNCheckpoint_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_STGCNBackend_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Result_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_QuantizationValidationUtils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_PosixTaskQueue_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_PortableImage_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_PipelineValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Pipeline_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Parameters_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ParameterValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_OneHotEncoderValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_OneHotEncoder_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_OneHotEncoder_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NormalizerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Normalizer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NonMaximumSuppressionValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NonMaximumSuppression_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NeuralNetworkValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NeuralNetworkShapes_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NeuralNetworkLayerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NeuralNetwork_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NeuralNetwork_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_NearestNeighbors_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Model_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_MIL_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_LogisticModel_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_LinkedModelValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_LinkedModel_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_LinearModelValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_LinearModel_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_LayerShapeConstraints_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_KNearestNeighborsClassifierValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONWriter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONWorker_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONStream_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONPreparse_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONNode_Mutex_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONNode_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONMemory_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONIterators_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONDebug_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONChildren_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_JSONAllocator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ItemSimilarityRecommenderValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ItemSimilarityRecommenderCommon_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ItemSimilarityRecommender_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ItemSimilarityRecommender_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_InterfaceValidators_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ImputerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Imputer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_IdentityValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Identity_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_HashOutputStreamBuf_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_GrandCentralDispatchQueue_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_GazetteerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Gazetteer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_GLMRegressor_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_GLMClassifier_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_FeatureVectorizerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_FeatureVectorizer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_FeatureVectorizer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_FeatureTypes_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_DictVectorizerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_DictVectorizer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_DictVectorizer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_DataType_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_DataStructures_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_CustomModelValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_CustomModel_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_Comparison_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_CategoricalMappingValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_CategoricalMapping_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_BayesianProbitRegressor_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_BayesianProbitRegressionValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_AudioFeaturePrintValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_AudioFeaturePrint_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ArrayFeatureExtractorValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_ArrayFeatureExtractor_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t *turi::any::holder<std::vector<turi::flex_type_enum>>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002246CF38BLL & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::vector<turi::flex_type_enum>>::deserialize;
  return a1;
}

uint64_t *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002246CF209 & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>::deserialize;
  return a1;
}

uint64_t *turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002246D023ALL & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::shared_ptr<turi::sarray<turi::flexible_type>>>::deserialize;
  return a1;
}

uint64_t *turi::any::holder<long long>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(*(void *)(MEMORY[0x263F8C290] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<long long>::deserialize;
  return a1;
}

uint64_t *turi::any::holder<turi::sframe>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)((unint64_t)off_26D76C570 & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<turi::sframe>::deserialize;
  return a1;
}

uint64_t *turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002246D0346 & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>::deserialize;
  return a1;
}

uint64_t *turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002246CF356 & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::shared_ptr<turi::group_aggregate_value>>::deserialize;
  return a1;
}

uint64_t *turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002246D04B6 & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>::deserialize;
  return a1;
}

uint64_t *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry_type::registry_type(uint64_t *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v10, (char *)(0x80000002246D0570 & 0x7FFFFFFFFFFFFFFFLL));
  int v2 = (char)v11;
  uint64_t v3 = v10[0];
  unint64_t v4 = (unint64_t)v10[1];
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v10;
  }
  else {
    uint64_t v5 = (uint64_t **)v10[0];
  }
  if ((v11 & 0x80u) == 0) {
    unint64_t v4 = v11;
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(char *)v5;
      uint64_t v5 = (uint64_t **)((char *)v5 + 1);
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v7;
      --v4;
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  if (v2 < 0) {
    operator delete(v3);
  }
  global_registry = turi::any::get_global_registry((turi::any *)v3);
  v10[0] = a1;
  std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)global_registry, (unint64_t *)a1, (uint64_t)&std::piecewise_construct, v10)[5] = (uint64_t)turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::deserialize;
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unsigned __int8 v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *turi::any::get_global_registry(turi::any *this)
{
  {
    qword_268088BE8 = 0;
    qword_268088BE0 = 0;
    turi::any::get_global_registry(void)::global_registry = (uint64_t)&qword_268088BE0;
    __cxa_atexit((void (*)(void *))std::map<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>::~map[abi:ne180100], &turi::any::get_global_registry(void)::global_registry, &dword_223D44000);
  }
  return &turi::any::get_global_registry(void)::global_registry;
}

uint64_t _GLOBAL__sub_I_shmipc_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::shmipc::SERVER_IPC_COUNTER = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_async_request_socket_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  ASYNC_SOCKET_CTR = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_arena_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  _tc_google::protobuf::Arena::lifecycle_id_generator_ = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_status_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  _tc_google::protobuf::util::Status::OK = 0;
  qword_26808D578 = 0;
  unk_26808D580 = 0;
  qword_26808D570 = 0;
  __cxa_atexit((void (*)(void *))_tc_google::protobuf::util::Status::~Status, &_tc_google::protobuf::util::Status::OK, &dword_223D44000);
  _tc_google::protobuf::util::Status::Status((uint64_t)&_tc_google::protobuf::util::Status::CANCELLED, 1, "", 0);
  __cxa_atexit((void (*)(void *))_tc_google::protobuf::util::Status::~Status, &_tc_google::protobuf::util::Status::CANCELLED, &dword_223D44000);
  _tc_google::protobuf::util::Status::Status((uint64_t)&_tc_google::protobuf::util::Status::UNKNOWN, 2, "", 0);
  return __cxa_atexit((void (*)(void *))_tc_google::protobuf::util::Status::~Status, &_tc_google::protobuf::util::Status::UNKNOWN, &dword_223D44000);
}

uint64_t _tc_google::protobuf::util::Status::Status(uint64_t a1, int a2, void *__src, size_t __len)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (a2)
  {
    if (__src)
    {
      std::string::basic_string[abi:ne180100](&__dst, __src, __len);
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)v5);
      }
    }
    else
    {
      long long __dst = 0uLL;
      uint64_t v8 = 0;
    }
    *(_OWORD *)uint64_t v5 = __dst;
    *(void *)(v5 + 16) = v8;
  }
  return a1;
}

void sub_223D6F118(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void _GLOBAL__sub_I_ml_data_row_format_cpp()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_ML_DATA_TARGET_ROW_BYTE_MINIMUM");
  v2[3] = 0;
  turi::globals::register_global<long long>::register_global(&turi::ml_data_internal::__ML_DATA_TARGET_ROW_BYTE_MINIMUM__register__instance, __p, &turi::ml_data_internal::ML_DATA_TARGET_ROW_BYTE_MINIMUM, 1, v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D6F2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_ml_data_row_format_cpp_0()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_ML_DATA_TARGET_ROW_BYTE_MINIMUM");
  v2[3] = 0;
  turi::globals::register_global<long long>::register_global(&turi::v2::ml_data_internal::__ML_DATA_TARGET_ROW_BYTE_MINIMUM__register__instance, __p, &turi::v2::ml_data_internal::ML_DATA_TARGET_ROW_BYTE_MINIMUM, 1, v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D6F3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_structurally_valid_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  return result;
}

uint64_t _GLOBAL__sub_I_random_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  int v0 = (turi::random *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  return turi::random::get_random_source_key(v0);
}

uint64_t _GLOBAL__sub_I_pthread_tools_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  int v0 = (turi *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  return turi::get_tsd_id(v0);
}

uint64_t _GLOBAL__sub_I_fileiter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::re_detail_106800::_fi_sep_alt = boost::re_detail_106800::_fi_sep;
  return result;
}

uint64_t _GLOBAL__sub_I_unfair_lock_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  int v0 = (turi::_anonymous_namespace_ *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

double _GLOBAL__sub_I_superposition_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  RGB_WHITE = -1;
  byte_268088540 = -1;
  double result = 7.29111856e-304;
  RGBA_WHITE = 0xFFFFFF;
  return result;
}

void _GLOBAL__sub_I_style_transfer_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_plot_macos_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_od_scenenet_backbone_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_object_recognizer_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_weight_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_utils_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_style_transfer_vgg_16_block_2_node_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_style_transfer_vgg_16_block_1_node_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_style_transfer_transformer_network_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_style_transfer_residual_node_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_style_transfer_encoding_node_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_style_transfer_decoding_node_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_style_transfer_backend_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_layer_instance_norm_data_loader_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_layer_helper_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mps_image_augmentation_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_utils_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_st_backend_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_od_sn_backend_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_od_backend_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_mlp_backend_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_layer_weights_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_internal_compute_context_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_dc_backend_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_char_backend_factory_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_char_backend_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_mlc_ac_backend_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_image_utils_Apple_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_har_utils_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_apple_config_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_activity_classifier_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_TCObjectDetectorTrainer_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_TCHumanActionRecognitionTrainer_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_TCComputeDeviceWrapper_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_TCComputeDeviceUtil_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_TCActivityClassifierTrainer_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_Image_Apple_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

void _GLOBAL__sub_I_CoreImageImage_mm()
{
  int v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_engine_empty_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  rabit::engine::manager = (uint64_t)&unk_26D779540;
  dword_26808DCA8 = 0;
  return result;
}

void _GLOBAL__sub_I_server_cpp()
{
  void v3[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  int v0 = (boost::system::detail *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::asio::error::system_category = (uint64_t)boost::system::detail::system_category_ncx(v0);
  {
    qword_2680689A8 = (uint64_t)&unk_26D773D00;
    unk_2680689B0 = &boost::asio::error::get_netdb_category(void)::instance;
    boost::asio::error::get_netdb_category(void)::instance = (uint64_t)&unk_26D786D28;
    __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::asio::error::get_netdb_category(void)::instance, &dword_223D44000);
  }
  {
    qword_2680689C8 = (uint64_t)&unk_26D773D00;
    unk_2680689D0 = &boost::asio::error::get_addrinfo_category(void)::instance;
    boost::asio::error::get_addrinfo_category(void)::instance = (uint64_t)&unk_26D786D88;
    __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::asio::error::get_addrinfo_category(void)::instance, &dword_223D44000);
  }
  {
    qword_2680689E8 = (uint64_t)&unk_26D773D00;
    unk_2680689F0 = &boost::asio::error::get_misc_category(void)::instance;
    boost::asio::error::get_misc_category(void)::instance = (uint64_t)&unk_26D786DE8;
    __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::asio::error::get_misc_category(void)::instance, &dword_223D44000);
  }
  boost::spirit::lit = 0;
  boost::spirit::biuint64_t n = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::streauint64_t m = 0;
  boost::spirit::wstreauint64_t m = 0;
  boost::spirit::left_aliguint64_t n = 0;
  boost::spirit::right_aliguint64_t n = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::tokeuint64_t n = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_tokeuint64_t n = 0;
  boost::spirit::tokenid_masuint64_t k = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  turi::visualization::VISUALIZATION_WEB_SERVER_ROOT_DIRECTORY = 0;
  *(void *)algn_26808EC68 = 0;
  qword_26808EC70 = 0;
  __cxa_atexit(MEMORY[0x263F8C0B8], &turi::visualization::VISUALIZATION_WEB_SERVER_ROOT_DIRECTORY, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_VISUALIZATION_WEB_SERVER_ROOT_DIRECTORY");
  v3[3] = 0;
  turi::globals::register_global<std::string>::register_global(&turi::visualization::__VISUALIZATION_WEB_SERVER_ROOT_DIRECTORY__register__instance, __p, &turi::visualization::VISUALIZATION_WEB_SERVER_ROOT_DIRECTORY, 1, v3);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D70B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_117()
{
  {
    boost::asio::detail::posix_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::posix_tss_ptr((pthread_key_t *)&boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
    __cxa_atexit((void (*)(void *))boost::asio::detail::tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::~tss_ptr, &boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_, &dword_223D44000);
  }
}

void __cxx_global_var_init_122()
{
  {
    boost::asio::detail::posix_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::posix_tss_ptr(&boost::asio::detail::call_stack<boost::asio::detail::strand_service::strand_impl,unsigned char>::top_);
    __cxa_atexit((void (*)(void *))boost::asio::detail::tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::~tss_ptr, &boost::asio::detail::call_stack<boost::asio::detail::strand_service::strand_impl,unsigned char>::top_, &dword_223D44000);
  }
}

void __cxx_global_var_init_121()
{
  {
    boost::asio::detail::posix_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::posix_tss_ptr((pthread_key_t *)&boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::top_);
    __cxa_atexit((void (*)(void *))boost::asio::detail::tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::~tss_ptr, &boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::top_, &dword_223D44000);
  }
}

uint64_t *_GLOBAL__sub_I_operations_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  *(void *)algn_268086358 = 0;
  qword_268086368 = (uint64_t)boost::system::detail::system_category_ncx(v0);
  uint64_t result = boost::system::detail::system_category_ncx((boost::system::detail *)qword_268086368);
  qword_268086378 = (uint64_t)result;
  return result;
}

pthread_key_t *boost::asio::detail::posix_tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::posix_tss_ptr(pthread_key_t *a1)
{
  char v2 = (boost::system::detail *)pthread_key_create(a1, 0);
  unsigned int v3 = v2;
  unint64_t v4 = boost::system::detail::system_category_ncx(v2);
  if (v3)
  {
    unint64_t v6 = v4;
    std::runtime_error::runtime_error(&v7, "tss");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_26D75D218;
    uint64_t v8 = v3;
    uint64_t v9 = v6;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    boost::throw_exception<boost::system::system_error>((uint64_t)&v7);
  }
  return a1;
}

void sub_223D70DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

uint64_t *boost::system::detail::system_category_ncx(boost::system::detail *this)
{
  {
    qword_268086638 = (uint64_t)&unk_26D773D00;
    unk_268086640 = &boost::system::detail::system_category_ncx(void)::system_category_instance;
    boost::system::detail::system_category_ncx(void)::system_category_instance = (uint64_t)&unk_26D774710;
    __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::system::detail::system_category_ncx(void)::system_category_instance, &dword_223D44000);
  }
  return &boost::system::detail::system_category_ncx(void)::system_category_instance;
}

uint64_t _GLOBAL__sub_I_unity_global_singleton_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  return __cxa_atexit((void (*)(void *))std::shared_ptr<turi::unity_global>::~shared_ptr[abi:ne180100], &turi::unity_global_ptr, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_regex_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  return __cxa_atexit((void (*)(void *))boost::re_detail_106800::mem_block_cache::~mem_block_cache, &boost::re_detail_106800::block_cache, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_block_cache_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  return __cxa_atexit((void (*)(void *))std::shared_ptr<turi::block_cache>::~shared_ptr[abi:ne180100], &turi::bc, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_TuriCore_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  int v0 = (void (*)(void *))MEMORY[0x263F8C118];
  return __cxa_atexit(v0, &turi::_capi_server_initializer_lock, &dword_223D44000);
}

uint64_t turi::anonymous namespace'::get_priority_tls_key_id(turi::_anonymous_namespace_ *this)
{
  {
  }
}

void sub_223D7111C(_Unwind_Exception *a1)
{
}

uint64_t _GLOBAL__sub_I_lambda_master_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  qword_26808CDC0 = 0;
  unk_26808CDC8 = 0;
  turi::lambda::lambda_master::lambda_worker_binary_and_args = 0;
  return __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &turi::lambda::lambda_master::lambda_worker_binary_and_args, &dword_223D44000);
}

uint64_t turi::get_tsd_id(turi *this)
{
  {
    turi::get_tsd_id(void)::keys = 0;
    pthread_key_create((pthread_key_t *)&turi::get_tsd_id(void)::keys, (void (__cdecl *)(void *))turi::destroy_tls_data);
  }
  return turi::get_tsd_id(void)::keys;
}

void sub_223D71230(_Unwind_Exception *a1)
{
}

uint64_t turi::random::get_random_source_key(turi::random *this)
{
  {
    turi::random::get_random_source_key(void)::key = 0;
    pthread_key_create((pthread_key_t *)&turi::random::get_random_source_key(void)::key, (void (__cdecl *)(void *))turi::random::destroy_tls_data);
  }
  return turi::random::get_random_source_key(void)::key;
}

void sub_223D712BC(_Unwind_Exception *a1)
{
}

uint64_t _GLOBAL__sub_I_python_callbacks_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::python::last_exceptiouint64_t n = 0u;
  unk_268085F98 = 0u;
  xmmword_268085FA8 = 0u;
  return __cxa_atexit((void (*)(void *))std::pair<std::string,std::string>::~pair, &turi::python::last_exception, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_join_impl_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  qword_26808CD88 = 0;
  unk_26808CD90 = 0;
  turi::join_impl::join_hash_table::empty_vt = 0;
  byte_26808CD98 = 0;
  return __cxa_atexit((void (*)(void *))turi::join_impl::hash_join_row_t::~hash_join_row_t, &turi::join_impl::join_hash_table::empty_vt, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_crash_handler_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(BACKTRACE_FNAME, "");
  int v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  return __cxa_atexit(v0, BACKTRACE_FNAME, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_query_engine_lock_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  turi::recursive_mutex::recursive_mutex(&turi::query_eval::global_query_lock);
  return __cxa_atexit((void (*)(void *))turi::recursive_mutex::~recursive_mutex, &turi::query_eval::global_query_lock, &dword_223D44000);
}

pthread_mutex_t *turi::recursive_mutex::recursive_mutex(pthread_mutex_t *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (pthread_mutexattr_init(&v3)) {
    turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#1}::operator()();
  }
  if (pthread_mutexattr_settype(&v3, 2)) {
    turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#2}::operator()();
  }
  if (pthread_mutex_init(this, &v3)) {
    turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#3}::operator()();
  }
  pthread_mutexattr_destroy(&v3);
  return this;
}

uint64_t _GLOBAL__sub_I_startup_teardown_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  __cxa_atexit((void (*)(void *))turi::global_startup::~global_startup, &turi::startup_impl::startup_instance, &dword_223D44000);
  return __cxa_atexit((void (*)(void *))turi::global_teardown::~global_teardown, &turi::teardown_impl::teardown_instance, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_future_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  qword_26808D500 = (uint64_t)&unk_26D773D00;
  unk_26808D508 = &boost::thread_detail::future_error_category_var;
  boost::thread_detail::future_error_category_var = (uint64_t)&unk_26D775450;
  return __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::thread_detail::future_error_category_var, &dword_223D44000);
}

void __cxx_global_var_init_81()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_80()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_76()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_65()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_59()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_48()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_43()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_41()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_170()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_116()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_graph_coloring_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::graph_coloring::COLOR_COLUMN, "color_id");
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::graph_coloring::COLOR_COLUMN, &dword_223D44000);
  qword_268088038 = 0;
  qword_268088030 = 0;
  turi::graph_coloring::MODEL_FIELDS = (uint64_t)&qword_268088030;
  return __cxa_atexit((void (*)(void *))std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~map[abi:ne180100], &turi::graph_coloring::MODEL_FIELDS, &dword_223D44000);
}

void __cxx_global_var_init_93()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_85()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680680D8 = 0;
    unk_2680680C8 = 0u;
    unk_2680680B8 = 0u;
    unk_2680680A8 = 0u;
    unk_268068098 = 0u;
    qword_268068090 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<std::pair<unsigned long,double>>>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_84()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_64()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_63()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_57()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_54()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_47()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_42()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_377()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_36()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_32()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_126()
{
  {
    int v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_102()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

void __cxx_global_var_init_101()
{
  {
    uint64_t v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_2680651A8 = 0;
    unk_268065198 = 0u;
    unk_268065188 = 0u;
    unk_268065178 = 0u;
    unk_268065168 = 0u;
    qword_268065160 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_223D44000);
  }
}

uint64_t _GLOBAL__sub_I_user_item_graph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::recsys::VERTEX_ID_COLUMN, "vertex_id");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::recsys::VERTEX_ID_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::recsys::VERTEX_DATA_COLUMN, "vertex_data");
  return __cxa_atexit(v0, turi::recsys::VERTEX_DATA_COLUMN, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_pagerank_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::pagerank::PAGERANK_COLUMN, "pagerank");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::pagerank::PAGERANK_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::pagerank::DELTA_COLUMN, "delta");
  return __cxa_atexit(v0, turi::pagerank::DELTA_COLUMN, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_heatmap_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(x_name, "x");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], x_name, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(y_name, "y");
  return __cxa_atexit(v0, y_name, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_fp_growth_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::pattern_mining::INDEX_COLUMN, "__INTERNAL__INDEX__");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::pattern_mining::INDEX_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::pattern_mining::INTERNAL_COLUMN_PREFIX, "__INTERNAL__");
  return __cxa_atexit(v0, turi::pattern_mining::INTERNAL_COLUMN_PREFIX, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_boxes_and_whiskers_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&x_name, "x");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], &x_name, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(y_name, "y");
  return __cxa_atexit(v0, y_name, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_sssp_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::sssp::DISTANCE_COLUMN, "distance");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::sssp::DISTANCE_COLUMN, &dword_223D44000);
  turi::sssp::SOURCE_VID = 0;
  dword_26808E8B0 = 0;
  byte_26808E8B4 = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::sssp::SOURCE_VID, &dword_223D44000);
  qword_26808E8C0 = 0;
  unk_26808E8C8 = 0;
  turi::sssp::EDGE_WEIGHT_COLUMN = 0;
  return __cxa_atexit(v0, &turi::sssp::EDGE_WEIGHT_COLUMN, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_portability_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t v0 = (char *)operator new(0x28uLL);
  unk_2680863D8 = xmmword_2246E7860;
  strcpy(v0, "\x01\x02\x03\x04\x05\x06\a\b\t\n\v\f\r\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F<>:\"/\\|");
  v0[39] = 0;
  uint64_t v1 = (void (*)(void *))MEMORY[0x263F8C0B8];
}

uint64_t _GLOBAL__sub_I_kcore_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
}

void _GLOBAL__sub_I_variant_converter_cpp()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_USE_GL_DATATYPE");
  v2[3] = 0;
  turi::globals::register_global<long long>::register_global(&turi::__USE_GL_DATATYPE__register__instance, __p, &turi::USE_GL_DATATYPE, 1, v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D73284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_socket_config_cpp()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FORCE_IPC_TO_TCP_FALLBACK");
  v2[3] = 0;
  turi::globals::register_global<long long>::register_global(&turi::nanosockets::__FORCE_IPC_TO_TCP_FALLBACK__register__instance, __p, &turi::nanosockets::FORCE_IPC_TO_TCP_FALLBACK, 1, v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D73380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_planner_cpp()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_MAX_LAZY_NODE_SIZE");
  v2[3] = 0;
  turi::globals::register_global<long long>::register_global(&turi::query_eval::__SFRAME_MAX_LAZY_NODE_SIZE__register__instance, __p, &turi::query_eval::SFRAME_MAX_LAZY_NODE_SIZE, 1, v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D7347C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_basic_column_statistics_cpp()
{
  v2[4] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD");
  v2[3] = 0;
  turi::globals::register_global<long long>::register_global(&turi::v2::ml_data_internal::__ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD__register__instance, __p, &turi::v2::ml_data_internal::ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD, 1, v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D73578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_label_propagation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::label_propagation::LABEL_COLUMN_PREFIX, "P");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::label_propagation::LABEL_COLUMN_PREFIX, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::label_propagation::PREDICTED_LABEL_COLUMN_NAME, "predicted_label");
  __cxa_atexit(v0, turi::label_propagation::PREDICTED_LABEL_COLUMN_NAME, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::label_propagation::label_field, "");
  __cxa_atexit(v0, turi::label_propagation::label_field, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::label_propagation::weight_field, "");
  return __cxa_atexit(v0, turi::label_propagation::weight_field, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_degree_count_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::degree_count::IN_DEGREE_COLUMN, "in_degree");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::degree_count::IN_DEGREE_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::degree_count::OUT_DEGREE_COLUMN, "out_degree");
  __cxa_atexit(v0, turi::degree_count::OUT_DEGREE_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::degree_count::ALL_DEGREE_COLUMN, "total_degree");
  __cxa_atexit(v0, turi::degree_count::ALL_DEGREE_COLUMN, &dword_223D44000);
  qword_268087FF8 = 0;
  qword_268087FF0 = 0;
  turi::degree_count::MODEL_FIELDS = (uint64_t)&qword_268087FF0;
  return __cxa_atexit((void (*)(void *))std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~map[abi:ne180100], &turi::degree_count::MODEL_FIELDS, &dword_223D44000);
}

void _GLOBAL__sub_I_mlmodel_image_feature_extractor_mm()
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v0 = MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(v51, "resnet-50");
  uint64_t v43 = 0xE0000000E0;
  int v44 = 2048;
  std::string::basic_string[abi:ne180100]<0>(&v45, "flatten0");
  std::string::basic_string[abi:ne180100]<0>(&v47, "data");
  std::string::basic_string[abi:ne180100]<0>(&v49, "https://docs-assets.developer.apple.com/turicreate/models/resnet-50-TuriCreate-6.0.mlmodel");
  std::string::basic_string[abi:ne180100]<0>(v41, "VisionFeaturePrint_Scene");
  int32x2_t v33 = vdup_n_s32(0x12Bu);
  int v34 = 2048;
  std::string::basic_string[abi:ne180100]<0>(&v35, "output");
  std::string::basic_string[abi:ne180100]<0>(&v37, "image_input");
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  std::string::basic_string[abi:ne180100]<0>(v31, "squeezenet_v1.1");
  uint64_t v23 = 0xE3000000E3;
  int v24 = 1000;
  std::string::basic_string[abi:ne180100]<0>(&v25, "pool10");
  std::string::basic_string[abi:ne180100]<0>(&v27, "image");
  std::string::basic_string[abi:ne180100]<0>(&__p, "https://docs-assets.developer.apple.com/coreml/models/SqueezeNet.mlmodel");
  int v22 = (void *)v0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  qword_268088230 = 0;
  qword_268088228 = 0;
  uint64_t v3 = &qword_268088228;
  while (1)
  {
    uint64_t v4 = (char *)&v55 + 112 * v2;
    if (v3 == &qword_268088228)
    {
      uint64_t v5 = &qword_268088228;
LABEL_10:
      if (v1)
      {
        uint64_t v9 = v5 + 1;
        goto LABEL_12;
      }
      goto LABEL_22;
    }
    if (v1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v1;
        uint64_t v1 = *(void *)(v1 + 8);
      }
      while (v1);
    }
    else
    {
      uint64_t v6 = &qword_268088228;
      do
      {
        uint64_t v5 = (uint64_t *)v6[2];
        BOOL v7 = *v5 == (void)v6;
        uint64_t v6 = v5;
      }
      while (v7);
    }
    BOOL v8 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268088230, (const void **)v5 + 4, (const void **)&v55.__r_.__value_.__l.__data_ + 14 * v2);
    uint64_t v1 = qword_268088228;
    if (v8) {
      goto LABEL_10;
    }
    if (qword_268088228)
    {
      uint64_t v9 = &qword_268088228;
      while (1)
      {
        while (1)
        {
          uint64_t v5 = (uint64_t *)v1;
          uint64_t v10 = (const void **)(v1 + 32);
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268088230, (const void **)&v55.__r_.__value_.__l.__data_ + 14 * v2, (const void **)(v1 + 32)))break; {
          uint64_t v1 = *v5;
          }
          uint64_t v9 = v5;
          if (!*v5) {
            goto LABEL_23;
          }
        }
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268088230, v10, (const void **)&v55.__r_.__value_.__l.__data_ + 14 * v2))break; {
        uint64_t v9 = v5 + 1;
        }
        uint64_t v1 = v5[1];
        if (!v1) {
          goto LABEL_23;
        }
      }
LABEL_12:
      if (*v9) {
        goto LABEL_38;
      }
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v5 = &qword_268088228;
    uint64_t v9 = &qword_268088228;
LABEL_23:
    uint64_t v11 = (char *)operator new(0x90uLL);
    uint64_t v12 = (std::string *)v11;
    v53[0] = v11;
    v53[1] = &qword_268088228;
    char v54 = 0;
    if (v4[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v11 + 32), *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      *((_OWORD *)v11 + 2) = *(_OWORD *)v4;
      *((void *)v11 + 6) = *((void *)v4 + 2);
    }
    uint64_t v13 = (char *)&v55 + 112 * v2;
    v12[2].__r_.__value_.__l.__size_ = *((void *)v13 + 3);
    LODWORD(v12[2].__r_.__value_.__r.__words[2]) = *((_DWORD *)v13 + 8);
    char v14 = v13 + 40;
    if (v4[63] < 0)
    {
      std::string::__init_copy_ctor_external(v12 + 3, *(const std::string::value_type **)v14, *((void *)&v55 + 14 * v2 + 6));
    }
    else
    {
      *(_OWORD *)&v12[3].__r_.__value_.__l.__data_ = *(_OWORD *)v14;
      v12[3].__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
    }
    uint64_t v15 = (const std::string::value_type **)((char *)&v55 + 112 * v2 + 64);
    if (v4[87] < 0)
    {
      std::string::__init_copy_ctor_external(v12 + 4, *v15, *((void *)&v55 + 14 * v2 + 9));
    }
    else
    {
      *(_OWORD *)&v12[4].__r_.__value_.__l.__data_ = *(_OWORD *)v15;
      v12[4].__r_.__value_.__r.__words[2] = *((void *)&v55 + 14 * v2 + 10);
    }
    uint64_t v16 = v12 + 5;
    uint64_t v17 = (const std::string::value_type **)((char *)&v55 + 112 * v2 + 88);
    if (v4[111] < 0)
    {
      std::string::__init_copy_ctor_external(v16, *v17, *((void *)&v55 + 14 * v2 + 12));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v17;
      v12[5].__r_.__value_.__r.__words[2] = *((void *)&v55 + 14 * v2 + 13);
    }
    char v54 = 1;
    uint64_t v18 = (uint64_t *)v53[0];
    *(void *)v53[0] = 0;
    v18[1] = 0;
    v18[2] = (uint64_t)v5;
    *uint64_t v9 = (uint64_t)v18;
    {
      uint64_t v18 = (uint64_t *)*v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_268088228, v18);
    ++qword_268088230;
    v53[0] = 0;
LABEL_38:
    if (++v2 == 3) {
      break;
    }
    uint64_t v1 = qword_268088228;
  }
  unint64_t v19 = 336;
  do
  {
    uint64_t v20 = (void **)((char *)&v55.__r_.__value_.__l.__data_ + v19);
    if (v55.__r_.__value_.__s.__data_[v19 - 1] < 0) {
      operator delete(*(v20 - 3));
    }
    if (*((char *)v20 - 25) < 0) {
      operator delete(v51[v19 / 8]);
    }
    char v21 = (void **)((char *)&v55.__r_.__value_.__l.__data_ + v19);
    if (*(&v50 + v19) < 0) {
      operator delete(*(v21 - 9));
    }
    if (*((char *)v21 - 89) < 0) {
      operator delete(*(v20 - 14));
    }
    v19 -= 112;
  }
  while (v19);
  if (v30 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v52 < 0) {
    operator delete(v51[0]);
  }
}

void sub_223D73DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  for (; v78 != &a78; v78 -= 112)
  {
    if (*(v78 - 1) < 0) {
      operator delete(*((void **)v78 - 3));
    }
    if (*(v78 - 25) < 0) {
      operator delete(*((void **)v78 - 6));
    }
    if (*(v78 - 49) < 0) {
      operator delete(*((void **)v78 - 9));
    }
    if (*(v78 - 89) < 0) {
      operator delete(*((void **)v78 - 14));
    }
  }
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::image_deep_feature_extractor::anonymous namespace'::neural_network_model_details const>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = *(void *)a3;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a3 + 8);
  this[1].__r_.__value_.__r.__words[0] = v6;
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 16);
    this[2].__r_.__value_.__l.__size_ = *(void *)(a3 + 32);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v7;
  }
  if (*(char *)(a3 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 40);
    this[3].__r_.__value_.__l.__size_ = *(void *)(a3 + 56);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v8;
  }
  uint64_t v9 = (std::string *)((char *)this + 88);
  if (*(char *)(a3 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 64), *(void *)(a3 + 72));
  }
  else
  {
    long long v10 = *(_OWORD *)(a3 + 64);
    this[4].__r_.__value_.__l.__size_ = *(void *)(a3 + 80);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_223D741B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::string const,turi::image_deep_feature_extractor::anonymous namespace'::neural_network_model_details const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string const,turi::image_deep_feature_extractor::anonymous namespace'::neural_network_model_details const>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
    operator delete(v2);
    }
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_supervised_learning_tests_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_supervised_learning_tests_cpp_0()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D74564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_logistic_regression_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D748FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_logistic_regression_cpp_0()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D74C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_flexible_type_spirit_parser_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::spirit::lit = 0;
  boost::spirit::biuint64_t n = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::streauint64_t m = 0;
  boost::spirit::wstreauint64_t m = 0;
  boost::spirit::left_aliguint64_t n = 0;
  boost::spirit::right_aliguint64_t n = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::tokeuint64_t n = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_tokeuint64_t n = 0;
  boost::spirit::tokenid_masuint64_t k = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  boost::spirit::utree::list_type::list_type((boost::spirit::utree::list_type *)&boost::spirit::empty_list);
  uint64_t result = __cxa_atexit((void (*)(void *))boost::spirit::utree::list_type::~list_type, &boost::spirit::empty_list, &dword_223D44000);
  turi::real = 0;
  return result;
}

boost::spirit::utree::list_type *boost::spirit::utree::list_type::list_type(boost::spirit::utree::list_type *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  boost::spirit::utree::ensure_list_type((uint64_t)this, "list_type()");
  return this;
}

void sub_223D74FFC(_Unwind_Exception *a1)
{
  boost::spirit::utree::~utree(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::utree::ensure_list_type(uint64_t this, char *a2)
{
  char v2 = *(unsigned char *)(this + 31);
  int v3 = v2 >> 1;
  if (v3 != 2)
  {
    if (v3)
    {
      uint64_t v4 = this;
      std::string::basic_string[abi:ne180100]<0>(&v7, a2);
      std::string::append(&v7, "called on non-list and non-invalid utree type");
      if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = &v7;
      }
      else {
        uint64_t v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
      }
      boost::spirit::bad_type_exception::bad_type_exception((uint64_t)v6, (const char *)v5, *(char *)(v4 + 31) >> 1);
      boost::exception_detail::throw_exception_<boost::spirit::bad_type_exception>((uint64_t)v6, (uint64_t)"void boost::spirit::utree::ensure_list_type(const char *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/spirit/home/support/utree/detail/utree_detail2.hpp", 1424);
    }
    *(unsigned char *)(this + 31) = v2 & 1 | 4;
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)this = 0;
  }
  return this;
}

void sub_223D750BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_triangle_counting_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::INT_VID_COLUMN, "__int_vid__");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::triangle_counting::INT_VID_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::NEIGHBOR_ID_COLUMN, "__neighbor_ids__");
  __cxa_atexit(v0, turi::triangle_counting::NEIGHBOR_ID_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::EDGE_DELETE_COLUMN, "__deleted__");
  __cxa_atexit(v0, turi::triangle_counting::EDGE_DELETE_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::EDGE_COUNT_COLUMN, "__count__");
  __cxa_atexit(v0, turi::triangle_counting::EDGE_COUNT_COLUMN, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::triangle_counting::VERTEX_COUNT_COLUMN, "triangle_count");
  return __cxa_atexit(v0, turi::triangle_counting::VERTEX_COUNT_COLUMN, &dword_223D44000);
}

void _GLOBAL__sub_I_globals_cpp()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  qword_268089470 = 0;
  unk_268089478 = 0;
  turi::GLOBALS_MAIN_PROCESS_PATH = 0;
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], &turi::GLOBALS_MAIN_PROCESS_PATH, &dword_223D44000);
  qword_268089488 = 0;
  unk_268089490 = 0;
  turi::GLOBALS_PYTHON_EXECUTABLE = 0;
  __cxa_atexit(v0, &turi::GLOBALS_PYTHON_EXECUTABLE, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_GLOBALS_MAIN_PROCESS_PATH");
  uint64_t v4 = 0;
  turi::globals::register_global<std::string>::register_global((turi::globals *)&turi::__GLOBALS_MAIN_PROCESS_PATH__register__instance, (std::string::size_type)__p, (uint64_t)&turi::GLOBALS_MAIN_PROCESS_PATH, 0, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_GLOBALS_PYTHON_EXECUTABLE");
  uint64_t v4 = 0;
  turi::globals::register_global<std::string>::register_global((turi::globals *)&turi::__GLOBALS_PYTHON_EXECUTABLE__register__instance, (std::string::size_type)__p, (uint64_t)&turi::GLOBALS_PYTHON_EXECUTABLE, 1, (uint64_t)v3);
  std::__function::__value_func<BOOL ()(std::string)>::~__value_func[abi:ne180100](v3);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D75394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_sframe_config_cpp()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_SORT_BUFFER_SIZE");
  char v2 = &unk_26D75CF70;
  int v3 = turi::sframe_config::$_0::__invoke;
  uint64_t v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::sframe_config::__SFRAME_SORT_BUFFER_SIZE__register__instance, __p, &turi::sframe_config::SFRAME_SORT_BUFFER_SIZE, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_SFRAME_READ_BATCH_SIZE");
  char v2 = &unk_26D75CF70;
  int v3 = turi::sframe_config::$_1::__invoke;
  uint64_t v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::sframe_config::__SFRAME_READ_BATCH_SIZE__register__instance, __p, &turi::sframe_config::SFRAME_READ_BATCH_SIZE, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D75544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_lambda_constants_cpp()
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_DEFAULT_NUM_PYLAMBDA_WORKERS");
  char v2 = &unk_26D75CF70;
  int v3 = turi::$_0::__invoke;
  uint64_t v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__DEFAULT_NUM_PYLAMBDA_WORKERS__register__instance, __p, &turi::DEFAULT_NUM_PYLAMBDA_WORKERS, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_DEFAULT_NUM_GRAPH_LAMBDA_WORKERS");
  char v2 = &unk_26D75CF70;
  int v3 = turi::$_1::__invoke;
  uint64_t v4 = &v2;
  turi::globals::register_global<long long>::register_global(&turi::__DEFAULT_NUM_GRAPH_LAMBDA_WORKERS__register__instance, __p, &turi::DEFAULT_NUM_GRAPH_LAMBDA_WORKERS, 1, &v2);
  std::__function::__value_func<BOOL ()(long long)>::~__value_func[abi:ne180100](&v2);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223D756F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mps_lstm_helper_mm()
{
  uint64_t v0 = (void *)MEMORY[0x22A615770]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  char v1 = std::string::basic_string[abi:ne180100]<0>(turi::neural_net::lstm_weight_names_mxnet_format, "i2h_i_weight");
  std::string::basic_string[abi:ne180100]<0>(v1 + 3, "h2h_i_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_268089250, "h2h_i_bias");
  std::string::basic_string[abi:ne180100]<0>(qword_268089268, "i2h_f_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_268089280, "h2h_f_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_268089298, "h2h_f_bias");
  std::string::basic_string[abi:ne180100]<0>(qword_2680892B0, "i2h_c_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_2680892C8, "h2h_c_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_2680892E0, "h2h_c_bias");
  std::string::basic_string[abi:ne180100]<0>(qword_2680892F8, "i2h_o_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_268089310, "h2h_o_weight");
  std::string::basic_string[abi:ne180100]<0>(qword_268089328, "h2h_o_bias");
  __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_223D44000);
}

void sub_223D758CC(_Unwind_Exception *a1)
{
  _GLOBAL__sub_I_mps_lstm_helper_mm_cold_1(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_dataframe_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::spirit::lit = 0;
  boost::spirit::biuint64_t n = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::streauint64_t m = 0;
  boost::spirit::wstreauint64_t m = 0;
  boost::spirit::left_aliguint64_t n = 0;
  boost::spirit::right_aliguint64_t n = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::tokeuint64_t n = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_tokeuint64_t n = 0;
  boost::spirit::tokenid_masuint64_t k = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_vega_data_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::spirit::lit = 0;
  boost::spirit::biuint64_t n = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::streauint64_t m = 0;
  boost::spirit::wstreauint64_t m = 0;
  boost::spirit::left_aliguint64_t n = 0;
  boost::spirit::right_aliguint64_t n = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::tokeuint64_t n = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_tokeuint64_t n = 0;
  boost::spirit::tokenid_masuint64_t k = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_unity_sarray_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::spirit::lit = 0;
  boost::spirit::biuint64_t n = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::streauint64_t m = 0;
  boost::spirit::wstreauint64_t m = 0;
  boost::spirit::left_aliguint64_t n = 0;
  boost::spirit::right_aliguint64_t n = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::tokeuint64_t n = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_tokeuint64_t n = 0;
  boost::spirit::tokenid_masuint64_t k = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_group_aggregate_value_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::spirit::lit = 0;
  boost::spirit::biuint64_t n = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::streauint64_t m = 0;
  boost::spirit::wstreauint64_t m = 0;
  boost::spirit::left_aliguint64_t n = 0;
  boost::spirit::right_aliguint64_t n = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::tokeuint64_t n = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_tokeuint64_t n = 0;
  boost::spirit::tokenid_masuint64_t k = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_csv_line_tokenizer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  uint64_t result = __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::spirit::lit = 0;
  boost::spirit::biuint64_t n = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::streauint64_t m = 0;
  boost::spirit::wstreauint64_t m = 0;
  boost::spirit::left_aliguint64_t n = 0;
  boost::spirit::right_aliguint64_t n = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::tokeuint64_t n = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_tokeuint64_t n = 0;
  boost::spirit::tokenid_masuint64_t k = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_encoder_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::INTEGER, "integer");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::JSON::types::INTEGER, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::FLOAT, "float");
  __cxa_atexit(v0, turi::JSON::types::FLOAT, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::STRING, "string");
  __cxa_atexit(v0, turi::JSON::types::STRING, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::VECTOR, "array");
  __cxa_atexit(v0, turi::JSON::types::VECTOR, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::LIST, "list");
  __cxa_atexit(v0, turi::JSON::types::LIST, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::DICT, "dictionary");
  __cxa_atexit(v0, turi::JSON::types::DICT, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::DATETIME, "datetime");
  __cxa_atexit(v0, turi::JSON::types::DATETIME, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::UNDEFINED, "undefined");
  __cxa_atexit(v0, turi::JSON::types::UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::IMAGE, "image");
  __cxa_atexit(v0, turi::JSON::types::IMAGE, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SARRAY, "SArray");
  __cxa_atexit(v0, turi::JSON::types::SARRAY, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SFRAME, "SFrame");
  __cxa_atexit(v0, turi::JSON::types::SFRAME, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SGRAPH, "SGraph");
  return __cxa_atexit(v0, turi::JSON::types::SGRAPH, &dword_223D44000);
}

uint64_t _GLOBAL__sub_I_decoder_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::INTEGER, "integer");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], turi::JSON::types::INTEGER, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::FLOAT, "float");
  __cxa_atexit(v0, turi::JSON::types::FLOAT, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::STRING, "string");
  __cxa_atexit(v0, turi::JSON::types::STRING, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::VECTOR, "array");
  __cxa_atexit(v0, turi::JSON::types::VECTOR, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::LIST, "list");
  __cxa_atexit(v0, turi::JSON::types::LIST, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::DICT, "dictionary");
  __cxa_atexit(v0, turi::JSON::types::DICT, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::DATETIME, "datetime");
  __cxa_atexit(v0, turi::JSON::types::DATETIME, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::UNDEFINED, "undefined");
  __cxa_atexit(v0, turi::JSON::types::UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::IMAGE, "image");
  __cxa_atexit(v0, turi::JSON::types::IMAGE, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SARRAY, "SArray");
  __cxa_atexit(v0, turi::JSON::types::SARRAY, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SFRAME, "SFrame");
  __cxa_atexit(v0, turi::JSON::types::SFRAME, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(turi::JSON::types::SGRAPH, "SGraph");
  return __cxa_atexit(v0, turi::JSON::types::SGRAPH, &dword_223D44000);
}

void _GLOBAL__sub_I_data_generators_cpp()
{
  v17[5] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(v0, "random_seed");
  memset(&v0[3], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v1, "n_factors");
  memset(&v1[3], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v2, "only_2_factor_terms");
  memset(&v2[3], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v3, "nmf");
  *(void *)((char *)v4 + 5) = 0;
  v4[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v5, "noise_sd");
  char v7 = 0;
  int v6 = 0;
  uint64_t v5[3] = 1;
  std::string::basic_string[abi:ne180100]<0>(v8, "w0_sd");
  char v10 = 0;
  int v9 = 0;
  void v8[3] = 1;
  std::string::basic_string[abi:ne180100]<0>(v11, "w_sd");
  char v13 = 0;
  int v12 = 0;
  v11[3] = 1;
  std::string::basic_string[abi:ne180100]<0>(v14, "V_sd");
  char v16 = 0;
  int v15 = 0;
  v14[3] = 1;
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v17, "y_mode", "squared_error");
}

void sub_223D76A8C(_Unwind_Exception *a1)
{
  for (uint64_t i = 320; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(void *a1, char *a2, char *a3)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::flexible_type::flexible_type((turi::flexible_type *)(v4 + 3), a3);
}

void sub_223D76B28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type::flexible_type(turi::flexible_type *this, char *a2)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  turi::flexible_type::operator=<std::string>((uint64_t)this);
}

void sub_223D76BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  switch(*((unsigned char *)v15 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v17 = *v15;
      if (!*v15) {
        goto LABEL_29;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      int v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v22 = *v15;
      if (!*v15) {
        goto LABEL_29;
      }
      char v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      int v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v20 = *v15;
      if (!*v15) {
        goto LABEL_29;
      }
      std::string __p = v20 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v20 = *v15;
      if (!*v15) {
        goto LABEL_29;
      }
      std::string __p = v20 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_23:
      int v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v24 = *v15;
      if (!*v15) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      int v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      if (!*v15) {
        goto LABEL_29;
      }
      int v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v15);
      unsigned int v21 = 2071181815;
LABEL_27:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_29:
      *int v15 = 0;
LABEL_30:
      *int v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      *((unsigned char *)v15 + 12) = 0;
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_30;
  }
}

void turi::flexible_type::operator=<std::string>(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      if (*((char *)v2 + 31) < 0) {
        operator delete((void *)v2[1]);
      }
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      int v6 = (void *)v5[1];
      if (v6)
      {
        v5[2] = (atomic_ullong)v6;
        operator delete(v6);
      }
      atomic_ullong *volatile v3 = v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      int v14 = (void **)(v7 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      int v14 = (void **)(v7 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
      atomic_ullong *volatile v3 = v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
      atomic_ullong *volatile v3 = v8;
      unsigned int v9 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v11 = (void *)v10[6];
      if (v11)
      {
        v10[7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      int v12 = (void *)v10[3];
      if (v12)
      {
        v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      char v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      atomic_ullong *volatile v3 = v10;
      unsigned int v9 = 2071181815;
LABEL_31:
      uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      *(void *)a1 = 0;
LABEL_34:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 2;
      operator new();
    default:
      goto LABEL_34;
  }
}

{
  atomic_ullong *volatile v2;
  atomic_ullong *volatile v3;
  uint64_t v4;
  atomic_ullong *volatile v5;
  void *v6;
  atomic_ullong *volatile v7;
  atomic_ullong *volatile v8;
  unsigned int v9;
  atomic_ullong *volatile v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void **v14;

  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      if (*((char *)v2 + 31) < 0) {
        operator delete((void *)v2[1]);
      }
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      int v6 = (void *)v5[1];
      if (v6)
      {
        v5[2] = (atomic_ullong)v6;
        operator delete(v6);
      }
      atomic_ullong *volatile v3 = v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      int v14 = (void **)(v7 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      int v14 = (void **)(v7 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
      atomic_ullong *volatile v3 = v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
      atomic_ullong *volatile v3 = v8;
      unsigned int v9 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v11 = (void *)v10[6];
      if (v11)
      {
        v10[7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      int v12 = (void *)v10[3];
      if (v12)
      {
        v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      char v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      atomic_ullong *volatile v3 = v10;
      unsigned int v9 = 2071181815;
LABEL_31:
      uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      *(void *)a1 = 0;
LABEL_34:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 2;
      operator new();
    default:
      goto LABEL_34;
  }
}

void sub_223D77364(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_supervised_learning_base_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D776B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_supervised_learning_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D77A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_optimization_interface_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D77DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_logistic_regression_opt_interface_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D78180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_linear_svm_opt_interface_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D78518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_linear_svm_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D788B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_linear_regression_opt_interface_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D78C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_lbfgs_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D78FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_coreml_extension_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D79378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_automatic_model_creation_cpp()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  uint64_t v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  int v9 = 0;
  char v10 = 1;
  uint64_t v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  char v15 = 0;
  int v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  char v19 = 0;
  int v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  char v23 = 0;
  int v22 = 0;
  uint64_t v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  char v26 = 0;
  int v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (uint64_t i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  char v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (uint64_t j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0) {
      operator delete((void *)v20[j]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_223D44000);
}

void sub_223D79710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0) {
      operator delete(*(void **)(v10 + v12 + 160));
    }
    v12 -= 32;
    if (v12 == -192) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t _GLOBAL__sub_I_unit_test_parameters_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  boost::runtime::help_prefix = (uint64_t)"////";
  *(void *)algn_268086B28 = "";
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_auto_start_dbg, "auto_start_dbg");
  uint64_t v0 = (void (*)(void *))MEMORY[0x263F8C0B8];
  __cxa_atexit(MEMORY[0x263F8C0B8], boost::unit_test::runtime_config::btrt_auto_start_dbg, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_break_exec_path, "break_exec_path");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_break_exec_path, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&boost::unit_test::runtime_config::btrt_build_info, "build_info");
  __cxa_atexit(v0, &boost::unit_test::runtime_config::btrt_build_info, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_catch_sys_errors, "catch_system_errors");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_catch_sys_errors, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&boost::unit_test::runtime_config::btrt_color_output, "color_output");
  __cxa_atexit(v0, &boost::unit_test::runtime_config::btrt_color_output, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_detect_fp_except, "detect_fp_exceptions");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_detect_fp_except, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_detect_mem_leaks, "detect_memory_leaks");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_detect_mem_leaks, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_list_content, "list_content");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_list_content, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_list_labels, "list_labels");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_list_labels, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_log_format, "log_format");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_log_format, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_log_level, "log_level");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_log_level, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_log_sink, "log_sink");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_log_sink, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_combined_logger, "logger");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_combined_logger, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_output_format, "output_format");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_output_format, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_random_seed, "random");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_random_seed, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_report_format, "report_format");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_report_format, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_report_level, "report_level");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_report_level, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_report_mem_leaks, "report_memory_leaks_to");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_report_mem_leaks, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_report_sink, "report_sink");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_report_sink, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_result_code, "result_code");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_result_code, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_run_filters, "run_test");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_run_filters, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_save_test_pattern, "save_pattern");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_save_test_pattern, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_show_progress, "show_progress");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_show_progress, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_use_alt_stack, "use_alt_stack");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_use_alt_stack, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_wait_for_debugger, "wait_for_debugger");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_wait_for_debugger, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_help, "help");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_help, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_usage, "usage");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_usage, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(boost::unit_test::runtime_config::btrt_version, "version");
  __cxa_atexit(v0, boost::unit_test::runtime_config::btrt_version, &dword_223D44000);
  qword_268086B40 = 0;
  qword_268086B38 = 0;
  qword_268086B58 = 0;
  qword_268086B50 = 0;
}

void _GLOBAL__sub_I_word_trimmer_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7A164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087F18 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7A310()
{
}

void sub_223D7A320()
{
}

void sub_223D7A330()
{
}

void sub_223D7A340()
{
}

void sub_223D7A350()
{
}

void _GLOBAL__sub_I_word_counter_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087EF0 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7A948()
{
}

void sub_223D7A958()
{
}

void sub_223D7A968()
{
}

void sub_223D7A978()
{
}

void sub_223D7A988()
{
}

void _GLOBAL__sub_I_tokenizer_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7ADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087E68 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7AF80()
{
}

void sub_223D7AF90()
{
}

void sub_223D7AFA0()
{
}

void sub_223D7AFB0()
{
}

void sub_223D7AFC0()
{
}

void _GLOBAL__sub_I_tfidf_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7B40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087E40 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7B5B8()
{
}

void sub_223D7B5C8()
{
}

void sub_223D7B5D8()
{
}

void sub_223D7B5E8()
{
}

void sub_223D7B5F8()
{
}

void _GLOBAL__sub_I_quadratic_features_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7BA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087DA8 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7BBF0()
{
}

void sub_223D7BC00()
{
}

void sub_223D7BC10()
{
}

void sub_223D7BC20()
{
}

void sub_223D7BC30()
{
}

void _GLOBAL__sub_I_one_hot_encoder_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7C07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087D80 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7C228()
{
}

void sub_223D7C238()
{
}

void sub_223D7C248()
{
}

void sub_223D7C258()
{
}

void sub_223D7C268()
{
}

void _GLOBAL__sub_I_ngram_counter_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7C6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087D58 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7C860()
{
}

void sub_223D7C870()
{
}

void sub_223D7C880()
{
}

void sub_223D7C890()
{
}

void sub_223D7C8A0()
{
}

void _GLOBAL__sub_I_mean_imputer_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7CCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087D30 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7CE98()
{
}

void sub_223D7CEA8()
{
}

void sub_223D7CEB8()
{
}

void sub_223D7CEC8()
{
}

void sub_223D7CED8()
{
}

void _GLOBAL__sub_I_feature_binner_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7D324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087D08 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7D4D0()
{
}

void sub_223D7D4E0()
{
}

void sub_223D7D4F0()
{
}

void sub_223D7D500()
{
}

void sub_223D7D510()
{
}

void _GLOBAL__sub_I_dimension_reduction_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7D95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087CD0 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7DB08()
{
}

void sub_223D7DB18()
{
}

void sub_223D7DB28()
{
}

void sub_223D7DB38()
{
}

void sub_223D7DB48()
{
}

void _GLOBAL__sub_I_count_thresholder_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7DF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087C98 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7E140()
{
}

void sub_223D7E150()
{
}

void sub_223D7E160()
{
}

void sub_223D7E170()
{
}

void sub_223D7E180()
{
}

void _GLOBAL__sub_I_count_featurizer_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7E5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087C70 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7E778()
{
}

void sub_223D7E788()
{
}

void sub_223D7E798()
{
}

void sub_223D7E7A8()
{
}

void sub_223D7E7B8()
{
}

void _GLOBAL__sub_I_categorical_imputer_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7EC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087C00 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7EDB0()
{
}

void sub_223D7EDC0()
{
}

void sub_223D7EDD0()
{
}

void sub_223D7EDE0()
{
}

void sub_223D7EDF0()
{
}

void _GLOBAL__sub_I_bm25_cpp()
{
  v30[19] = *MEMORY[0x263EF8340];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_223D44000);
  std::string::basic_string[abi:ne180100]<0>(&v24, "([+.-]?[0-9]+([.,()-]+[0-9]+)*)|");
  std::string::basic_string[abi:ne180100]<0>(v22, "([^\\w\\s])|");
  if ((v23 & 0x80u) == 0) {
    uint64_t v0 = v22;
  }
  else {
    uint64_t v0 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v1 = v23;
  }
  else {
    std::string::size_type v1 = (std::string::size_type)v22[1];
  }
  atomic_ullong *volatile v2 = std::string::append(&v24, (const std::string::value_type *)v0, v1);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "(\\b[^\\w\\s]+)|");
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v20[1];
  }
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "([\\w]([^\\s]*[\\w])?)|");
  if ((v19 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v9 = v19;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v18[1];
  }
  uint64_t v10 = std::string::append(&v26, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v16, "([^\\w\\s]+\\b)");
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  int v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v29 = v14->__r_.__value_.__r.__words[2];
  long long v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>::basic_regex<std::char_traits<char>,std::allocator<char>>(v30);
}

void sub_223D7F23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  qword_268087BD8 = v77;
  std::vector<std::pair<boost::basic_regex<char,boost::regex_traits<char,boost::cpp_regex_traits<char>>>,std::function<BOOL ()(std::string const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 200));
  uint64_t v80 = 96;
  uint64_t v81 = v78 - 184;
  do
  {
    std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v81 + v80 - 32));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + v80 - 40));
    v80 -= 48;
  }
  while (v80);
  boost::detail::shared_count::~shared_count(v76);
  boost::detail::shared_count::~shared_count(v75);
  if (a15 < 0) {
    operator delete(__p);
  }
  boost::detail::shared_count::~shared_count(v74);
  boost::detail::shared_count::~shared_count(v73);
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_223D7F3E8()
{
}

void sub_223D7F3F8()
{
}

void sub_223D7F408()
{
}

void sub_223D7F418()
{
}

void sub_223D7F428()
{
}

void vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(uint64_t **a1)
{
  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  void *v5;
  void *v6;
  size_t v7;
  const char *v8;
  va_list v9;
  void *v10;
  void *exception;
  void *v12;
  void *v13;
  char v14;
  void v15[33];

  atomic_ullong *volatile v2 = (int *)global_logger();
  if (v2[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/assertions.hpp", "operator()", 321, 1);
    std::string::size_type v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed\n", 13);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Assertion Failure: ", 19);
  size_t v7 = strlen((const char *)**a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, **a1, v7);
  uint64_t v8 = (const char *)**a1;
  va_list v9 = (va_list)*a1[1];
  uint64_t v10 = global_logger();
  file_logger::_log((uint64_t)v10, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, v8, v9);
  __print_back_trace();
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  std::stringbuf::str();
  if (v14 >= 0) {
    uint64_t v12 = &v13;
  }
  else {
    uint64_t v12 = v13;
  }
  *exceptiouint64_t n = v12;
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void sub_223D7F58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D7F7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D7FA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D7FCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D7FF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D801A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D80414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D80680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D808EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D80B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D80DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D81030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8129C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D81508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D81774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D819E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D81C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D81EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D82124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D82390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D825FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D82868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D82AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D82D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D82FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D83218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D83484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D836F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8395C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D83BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D83E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D840A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8430C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D84578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D847E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D84A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D84CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D84F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D85194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D85400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8566C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D858D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D85B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D85DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8601C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D86288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D864F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D86760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D869CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D86C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D86EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D87110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D875E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D87854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D87AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D87D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D87F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D88204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D88470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D886DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D88948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D88BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D88E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D892F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D89564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D897D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D89A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D89CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D89F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8A180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8A3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8A658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8A8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8AB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8AD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8B008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8B274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8B4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8B74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8BC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8BE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8C0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8C368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8C5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8C840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8CAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8CD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8CF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8D1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8D45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8D6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8D934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8DBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8DE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8E078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8E2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8E550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8E7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8EA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8EC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8EF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8F16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8F3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8F644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8F8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8FB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8FD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D8FFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D90260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D904CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D90738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D909A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D90C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D90E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D910E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D91354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D915C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9182C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D91A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D91D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D91F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D921DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D92448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D926B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D92920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D92B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D92DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D93064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D932D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9353C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D937A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D93A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D93C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D93EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D94158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D943C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D94630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9489C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D94B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D94D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D94FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9524C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D954B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D95724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D95990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D95BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D95E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D960D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D96340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D965AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D96818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D96A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D96CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D96F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D971C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D97434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D976A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9790C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D97B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D97DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D98050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D982BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D98528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D98794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D98A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D98C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D98ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D99144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D993B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9961C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D99888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D99AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D99D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D99FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9A238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9A4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9A710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9A97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9ABE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9AE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9B32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9B598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9B804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9BA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9BCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9BF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9C1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9C420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9C68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9C8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9CB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9CDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9D03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9D2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9D514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9D780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9D9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9DC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9DEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9E130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9E39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9E608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9E874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9EAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9ED4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9EFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9F224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9F490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9F6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9F968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9FBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223D9FE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA00AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA0318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA0584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA07F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA0A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA0CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA0F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA11A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA140C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA1678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA18E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA1B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA1DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA2028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA2294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA2500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA276C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA29D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA2C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA2EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA311C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA3388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA35F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA3860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA3ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA3D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA3FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA4210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA447C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA46E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA4954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA4BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void sub_223DA4E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a32);
  _Unwind_Resume(a1);
}

void turi::flexible_type::~flexible_type(atomic_ullong *volatile *this)
{
  switch(*((unsigned char *)this + 12))
  {
    case 2:
      if (atomic_fetch_add(*this, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *this;
        if (*this)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*this, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *this;
        if (*this)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*this, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *this;
        if (*this)
        {
          char v14 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*this, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *this;
        if (*this)
        {
          char v14 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*this, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *this;
        if (*this)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*this, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *this;
        if (*this)
        {
          long long v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          std::string::size_type v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *this = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
}

void sub_223DA5330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::string::size_type v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    atomic_ullong *volatile v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unsigned int v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    long long v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_223DA568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a9, *(void **)(a9 + 8));
  _Unwind_Resume(a1);
}

void sub_223DA58E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::neural_net::shared_float_array::copy(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1;
  std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,float const*&,std::vector<unsigned long>,void>(&v6, a2, &v4);
  long long v5 = v4;
  long long v4 = 0uLL;
  turi::neural_net::shared_float_array::shared_float_array(a3, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_223DA5A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::shared_float_array::~shared_float_array(turi::neural_net::shared_float_array *this)
{
  *(void *)this = &unk_26D752D58;
  std::string::size_type v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26D752D58;
  std::string::size_type v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void sub_223DA5C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::shared_float_array::data(turi::neural_net::shared_float_array *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1))
       + 4 * *((void *)this + 3);
}

uint64_t turi::neural_net::shared_float_array::size(turi::neural_net::shared_float_array *this)
{
  return *((void *)this + 6);
}

void turi::style_transfer::mps_style_transfer::init(uint64_t a1, uint64_t a2, const void ***a3, id *a4)
{
  context = (void *)MEMORY[0x22A615770]();
  std::string::basic_string[abi:ne180100]<0>(&__p, "st_num_styles");
  float array_map_scalar = turi::neural_net::get_array_map_scalar(a2, (const void **)&__p, 1.0);
  if (SHIBYTE(v47) < 0) {
    operator delete(__p);
  }
  v41[0] = 0;
  v41[1] = 0;
  char v40 = (uint64_t *)v41;
  uint64_t v10 = *a3;
  uint64_t v8 = a3 + 1;
  unsigned int v9 = v10;
  if (v10 != (const void **)v8)
  {
    do
    {
      uint64_t v11 = *((unsigned __int8 *)v9 + 55);
      if (*((char *)v9 + 55) < 0)
      {
        uint64_t v12 = (char *)v9[4];
        uint64_t v13 = (uint64_t)v9[5];
      }
      else
      {
        uint64_t v12 = (char *)(v9 + 4);
        uint64_t v13 = *((unsigned __int8 *)v9 + 55);
      }
      if (v13 >= 4)
      {
        char v14 = &v12[v13];
        long long v15 = v12;
        do
        {
          uint64_t v16 = (char *)memchr(v15, 99, v13 - 3);
          if (!v16) {
            break;
          }
          if (*(_DWORD *)v16 == 1986948963)
          {
            if (v16 == v14 || v16 - v12 == -1) {
              break;
            }
            if ((v11 & 0x80) != 0)
            {
              unsigned __int8 v17 = (char *)v9[4];
              uint64_t v11 = (uint64_t)v9[5];
            }
            else
            {
              unsigned __int8 v17 = (char *)(v9 + 4);
            }
            if (v11 >= 4)
            {
              int v18 = &v17[v11];
              unsigned __int8 v19 = v17;
              do
              {
                atomic_ullong *volatile v20 = (char *)memchr(v19, 98, v11 - 3);
                if (!v20) {
                  break;
                }
                if (*(_DWORD *)v20 == 1935763810)
                {
                  if (v20 == v18 || v20 - v17 == -1) {
                    break;
                  }
                  goto LABEL_26;
                }
                unsigned __int8 v19 = v20 + 1;
                uint64_t v11 = v18 - (unsigned char *)v19;
              }
              while (v18 - (unsigned char *)v19 >= 4);
            }
            long long v52 = 0uLL;
            uint64_t v53 = 0;
            std::vector<float>::resize((uint64_t)&v52, (unint64_t)v9[13]);
            turi::neural_net::convert_chw_to_hwc((uint64_t)(v9 + 7), (char *)v52);
            std::string __p = (void *)v9[12];
            if (__p != (void *)4)
            {
              p_p = &__p;
            }
            p_p = 0;
            long long v51 = 0uLL;
            std::vector<unsigned long>::resize((uint64_t)&p_p, 4uLL);
            std::string v24 = v9[11];
            std::string v25 = p_p;
            *(void *)p_p = *v24;
            v25[1] = v24[2];
            v25[2] = v24[3];
            v25[3] = v24[1];
            long long v26 = v52;
            uint64_t v45 = v53;
            long long v52 = 0uLL;
            uint64_t v53 = 0;
            char v42 = v25;
            long long v43 = v51;
            *(_OWORD *)int v44 = v26;
            long long v51 = 0uLL;
            p_p = 0;
            turi::neural_net::shared_float_array::wrap((uint64_t)v44, (uint64_t)&v42, (uint64_t)&__p);
            char v54 = (long long *)(v9 + 4);
            std::string v27 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v40, v9 + 4, (uint64_t)&std::piecewise_construct, &v54);
            long long v28 = v47;
            long long v47 = 0uLL;
            std::string::size_type v29 = (std::__shared_weak_count *)v27[9];
            *((_OWORD *)v27 + 4) = v28;
            if (v29)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
              std::string::size_type v29 = (std::__shared_weak_count *)*((void *)&v47 + 1);
            }
            long long v30 = v49;
            *((_OWORD *)v27 + 5) = v48;
            *((_OWORD *)v27 + 6) = v30;
            std::string __p = &unk_26D752D58;
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
            if (v42)
            {
              *(void *)&long long v43 = v42;
              operator delete(v42);
            }
            if (v44[0])
            {
              v44[1] = v44[0];
              operator delete(v44[0]);
            }
            if (p_p)
            {
              *(void *)&long long v51 = p_p;
              operator delete(p_p);
            }
            if ((void)v52)
            {
              *((void *)&v52 + 1) = v52;
              operator delete((void *)v52);
            }
            goto LABEL_27;
          }
          long long v15 = v16 + 1;
          uint64_t v13 = v14 - (unsigned char *)v15;
        }
        while (v14 - (unsigned char *)v15 >= 4);
      }
LABEL_26:
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>(&v40, v9 + 4, (long long *)v9 + 2);
LABEL_27:
      unsigned __int8 v21 = (const void **)v9[1];
      if (v21)
      {
        do
        {
          int v22 = (const void ***)v21;
          unsigned __int8 v21 = (const void **)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v22 = (const void ***)v9[2];
          BOOL v23 = *v22 == v9;
          unsigned int v9 = (const void **)v22;
        }
        while (!v23);
      }
      unsigned int v9 = (const void **)v22;
    }
    while (v22 != v8);
  }
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v39, (const void ***)&v40);
  BOOL v31 = +[TCMPSStyleTransferHelpers toNSDictionary:v39];
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v39, (void *)v39[1]);
  char v32 = [TCMPSStyleTransfer alloc];
  int32x2_t v33 = [*a4 device];
  uint64_t v34 = [(TCMPSStyleTransfer *)v32 initWithDev:v33 commandQueue:*a4 weights:v31 numStyles:(unint64_t)array_map_scalar];
  uint64_t v35 = *(void ***)(a1 + 8);
  char v36 = *v35;
  *uint64_t v35 = (void *)v34;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v40, v41[0]);
}

void sub_223DA6098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void turi::style_transfer::mps_style_transfer::mps_style_transfer(void *a1)
{
  *a1 = &unk_26D752C50;
  operator new();
}

void sub_223DA622C(_Unwind_Exception *a1)
{
  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void turi::style_transfer::mps_style_transfer::~mps_style_transfer(id **this)
{
  *this = (id *)&unk_26D752C50;
  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](this + 1, 0);
}

{
  uint64_t vars8;

  *this = (id *)&unk_26D752C50;
  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](this + 1, 0);
  JUMPOUT(0x22A614FA0);
}

void turi::style_transfer::mps_style_transfer::export_weights(id **this@<X0>, uint64_t a2@<X8>)
{
  std::string v24 = [*this[1] exportWeights];
  +[TCMPSStyleTransferHelpers fromNSDictionary:](TCMPSStyleTransferHelpers, "fromNSDictionary:");
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = v25;
  if (v25 != (uint64_t *)v26)
  {
    do
    {
      uint64_t v4 = *((unsigned __int8 *)v3 + 55);
      if (*((char *)v3 + 55) < 0)
      {
        long long v5 = (char *)v3[4];
        uint64_t v6 = v3[5];
      }
      else
      {
        long long v5 = (char *)(v3 + 4);
        uint64_t v6 = *((unsigned __int8 *)v3 + 55);
      }
      if (v6 >= 4)
      {
        atomic_ullong *volatile v7 = &v5[v6];
        uint64_t v8 = v5;
        do
        {
          unsigned int v9 = (char *)memchr(v8, 99, v6 - 3);
          if (!v9) {
            break;
          }
          if (*(_DWORD *)v9 == 1986948963)
          {
            if (v9 == v7 || v9 - v5 == -1) {
              break;
            }
            if ((v4 & 0x80) != 0)
            {
              uint64_t v10 = (char *)v3[4];
              uint64_t v4 = v3[5];
            }
            else
            {
              uint64_t v10 = (char *)(v3 + 4);
            }
            if (v4 >= 4)
            {
              uint64_t v11 = &v10[v4];
              uint64_t v12 = v10;
              do
              {
                uint64_t v13 = (char *)memchr(v12, 98, v4 - 3);
                if (!v13) {
                  break;
                }
                if (*(_DWORD *)v13 == 1935763810)
                {
                  if (v13 == v11 || v13 - v10 == -1) {
                    break;
                  }
                  goto LABEL_24;
                }
                uint64_t v12 = v13 + 1;
                uint64_t v4 = v11 - (unsigned char *)v12;
              }
              while (v11 - (unsigned char *)v12 >= 4);
            }
            long long v37 = 0uLL;
            uint64_t v38 = 0;
            std::vector<float>::resize((uint64_t)&v37, v3[13]);
            turi::neural_net::convert_hwc_to_chw(v3 + 7, v37);
            BOOL v31 = (void *)v3[12];
            if (v31 != (void *)4)
            {
              uint64_t v35 = &v31;
            }
            uint64_t v35 = 0;
            long long v36 = 0uLL;
            std::vector<unsigned long>::resize((uint64_t)&v35, 4uLL);
            unsigned __int8 v17 = (void *)v3[11];
            int v18 = v35;
            *(void *)uint64_t v35 = *v17;
            v18[1] = v17[3];
            v18[2] = v17[1];
            v18[3] = v17[2];
            long long v19 = v37;
            uint64_t v30 = v38;
            long long v37 = 0uLL;
            uint64_t v38 = 0;
            std::string __p = v18;
            long long v28 = v36;
            *(_OWORD *)std::string::size_type v29 = v19;
            long long v36 = 0uLL;
            uint64_t v35 = 0;
            turi::neural_net::shared_float_array::wrap((uint64_t)v29, (uint64_t)&__p, (uint64_t)&v31);
            __int16 v39 = (long long *)(v3 + 4);
            atomic_ullong *volatile v20 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v39);
            long long v21 = v32;
            long long v32 = 0uLL;
            int v22 = (std::__shared_weak_count *)v20[9];
            *((_OWORD *)v20 + 4) = v21;
            if (v22)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              int v22 = (std::__shared_weak_count *)*((void *)&v32 + 1);
            }
            long long v23 = v34;
            *((_OWORD *)v20 + 5) = v33;
            *((_OWORD *)v20 + 6) = v23;
            BOOL v31 = &unk_26D752D58;
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            if (__p)
            {
              *(void *)&long long v28 = __p;
              operator delete(__p);
            }
            if (v29[0])
            {
              v29[1] = v29[0];
              operator delete(v29[0]);
            }
            if (v35)
            {
              *(void *)&long long v36 = v35;
              operator delete(v35);
            }
            if ((void)v37)
            {
              *((void *)&v37 + 1) = v37;
              operator delete((void *)v37);
            }
            goto LABEL_25;
          }
          uint64_t v8 = v9 + 1;
          uint64_t v6 = v7 - (unsigned char *)v8;
        }
        while (v7 - (unsigned char *)v8 >= 4);
      }
LABEL_24:
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t **)a2, (const void **)v3 + 4, (long long *)v3 + 2);
LABEL_25:
      char v14 = (uint64_t *)v3[1];
      if (v14)
      {
        do
        {
          long long v15 = v14;
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          long long v15 = (uint64_t *)v3[2];
          BOOL v16 = *v15 == (void)v3;
          uint64_t v3 = v15;
        }
        while (!v16);
      }
      uint64_t v3 = v15;
    }
    while (v15 != (uint64_t *)v26);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v25, v26[0]);
}

void sub_223DA6660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  _Unwind_Resume(a1);
}

void turi::style_transfer::mps_style_transfer::predict(uint64_t a1, const void ***a2)
{
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v5, a2);
  uint64_t v3 = +[TCMPSStyleTransferHelpers toNSDictionary:v5];
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v5, (void *)v5[1]);
  uint64_t v4 = [**(id **)(a1 + 8) predict:v3];
  +[TCMPSStyleTransferHelpers fromNSDictionary:v4];
}

void sub_223DA67C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::mps_style_transfer::set_learning_rate(id **this, float a2)
{
  return objc_msgSend(*this[1], "setLearningRate:");
}

void turi::style_transfer::mps_style_transfer::train(uint64_t a1, const void ***a2)
{
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v5, a2);
  uint64_t v3 = +[TCMPSStyleTransferHelpers toNSDictionary:v5];
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v5, (void *)v5[1]);
  uint64_t v4 = [**(id **)(a1 + 8) train:v3];
  +[TCMPSStyleTransferHelpers fromNSDictionary:v4];
}

void sub_223DA6890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  std::string::size_type v1 = *a1;
  atomic_ullong *volatile v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::flexible_type>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v3 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          if (*((char *)v3 + 31) < 0) {
            operator delete((void *)v3[1]);
          }
          atomic_ullong *volatile v4 = v3;
          uint64_t v5 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          atomic_ullong *volatile v7 = (void *)v6[1];
          if (v7)
          {
            v6[2] = (atomic_ullong)v7;
            operator delete(v7);
          }
          atomic_ullong *volatile v4 = v6;
          uint64_t v5 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          long long v15 = (void **)(v8 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          long long v15 = (void **)(v8 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v4 = v8;
          uint64_t v5 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v9 + 2);
          atomic_ullong *volatile v4 = v9;
          unsigned int v10 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          uint64_t v12 = (void *)v11[6];
          if (v12)
          {
            v11[7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          char v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          atomic_ullong *volatile v4 = v11;
          unsigned int v10 = 2071181815;
LABEL_31:
          uint64_t v5 = v10 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v4, v5);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
}

void std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  std::string::size_type v1 = *a1;
  atomic_ullong *volatile v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::pair<turi::flexible_type,turi::flexible_type>::~pair(v4 - 32);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          atomic_ullong *volatile v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *(void **)(a1 + 16);
        if (v5)
        {
          atomic_ullong *volatile v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(void **)(a1 + 16);
        if (v7)
        {
          atomic_ullong *volatile v27 = v7 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(void **)(a1 + 16);
        if (v7)
        {
          atomic_ullong *volatile v27 = v7 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          atomic_ullong *volatile v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v10 = *(void **)(a1 + 16);
        if (v10)
        {
          atomic_ullong *volatile v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v14 + 31) < 0) {
            operator delete((void *)v14[1]);
          }
          atomic_ullong *volatile v15 = v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          int v18 = (void *)v17[1];
          if (v18)
          {
            v17[2] = (atomic_ullong)v18;
            operator delete(v18);
          }
          atomic_ullong *volatile v15 = v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong *volatile v27 = v19 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong *volatile v27 = v19 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_50:
          atomic_ullong *volatile v15 = v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
          atomic_ullong *volatile v15 = v20;
          unsigned int v21 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          long long v23 = (void *)v22[6];
          if (v23)
          {
            v22[7] = (atomic_ullong)v23;
            operator delete(v23);
          }
          std::string v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = (atomic_ullong)v24;
            operator delete(v24);
          }
          std::string v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          atomic_ullong *volatile v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_63:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_223DA71EC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x22A614E30](v1);
  _Unwind_Resume(a1);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_223DA72B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

file_logger *log_stream_dispatch<true>::exec(cppipc *a1, const char *a2, const char *a3, int a4, char a5)
{
  int v9 = (int)a1;
  if (cppipc::must_cancel(a1)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  unsigned int v10 = (file_logger *)global_logger();
  return file_logger::start_stream(v10, v9, a2, a3, a4, a5);
}

uint64_t file_logger::operator<<<std::string>(uint64_t a1, uint64_t a2)
{
  std::locale v4 = (char *)pthread_getspecific(*(void *)(a1 + 592));
  if (v4 && v4[280])
  {
    uint64_t v5 = v4 + 16;
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  }
  return a1;
}

uint64_t std::ostringstream::str[abi:ne180100]()
{
  return std::stringbuf::str();
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22A614950](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unsigned int v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x22A614960](v13);
  return a1;
}

void sub_223DA74EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x22A614960](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x223DA74CCLL);
}

void sub_223DA7540(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_223DA76C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2646D6740, MEMORY[0x263F8C060]);
}

void sub_223DA77E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void file_logger::stream_flush(file_logger *this)
{
  uint64_t v2 = (int *)pthread_getspecific(*((void *)this + 74));
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = v2[74];
    std::ostream::flush();
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = v12;
    }
    else {
      uint64_t v5 = (void **)v12[0];
    }
    file_logger::_lograw(this, *((_DWORD *)this + 150), (const char *)v5);
    if (*((_DWORD *)this + v4 + 236))
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
      uint64_t v6 = (char *)this + 32 * v4;
      if (*((void *)v6 + 89))
      {
        uint64_t v7 = (uint64_t)(v6 + 688);
        if ((char)v13 < 0)
        {
          uint64_t v9 = *((void *)v3 + 36);
          unsigned int v10 = (void **)v12[0];
          int64_t v8 = (int64_t)v12[1];
        }
        else
        {
          int64_t v8 = v13;
          uint64_t v9 = *((void *)v3 + 36);
          unsigned int v10 = v12;
        }
        std::function<void ()(int,char const*,unsigned long)>::operator()(v7, v4, (uint64_t)v10 + v9, v8 - v9);
      }
      *((void *)v3 + 36) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 608));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    std::string::operator=((std::string *)(v3 + 22), &__p);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)(v3 + 6));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)v13 < 0) {
      operator delete(v12[0]);
    }
  }
}

void sub_223DA7998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(int,char const*,unsigned long)>::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = a2;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22A614FA0);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t turi::neural_net::shared_float_array::shared_float_array(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  unint64_t v10 = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *a2;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 40))(*a2);
  turi::neural_net::shared_float_array::shared_float_array(a1, &v9, 0, v6, v7);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return a1;
}

void sub_223DA7C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,float const*&,std::vector<unsigned long>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<float const*&,std::vector<unsigned long>,std::allocator<turi::neural_net::float_buffer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_223DA7CFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<float const*&,std::vector<unsigned long>,std::allocator<turi::neural_net::float_buffer>,0>(void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D752D08;
  std::allocator<turi::neural_net::float_buffer>::construct[abi:ne180100]<turi::neural_net::float_buffer,float const*&,std::vector<unsigned long>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_223DA7D70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::float_buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::float_buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<turi::neural_net::float_buffer>::construct[abi:ne180100]<turi::neural_net::float_buffer,float const*&,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a3;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v7 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  turi::neural_net::float_buffer::float_buffer(a2, v5, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_223DA7E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::neural_net::shared_float_array::shape(turi::neural_net::shared_float_array *this)
{
  return *((void *)this + 4);
}

uint64_t turi::neural_net::shared_float_array::dim(turi::neural_net::shared_float_array *this)
{
  return *((void *)this + 5);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void anonymous namespace'::convert_weights_coreml_mps(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/style_transfer/mps_style_transfer_backend.mm", 124);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  char v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"w.second.dim()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/style_transfer/mps_style_transfer_backend.mm", "operator()", 104, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unsigned __int8 v13 = v16;
}

void sub_223DA80D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void turi::neural_net::shared_float_array::wrap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,std::vector<float>,std::vector<unsigned long>,void>(a1, a2, &v4);
  long long v5 = v4;
  long long v4 = 0uLL;
  turi::neural_net::shared_float_array::shared_float_array(a3, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_223DA8270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    char v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    atomic_ullong *volatile v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    char v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    atomic_ullong *volatile v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,std::vector<float>,std::vector<unsigned long>,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<std::vector<float>,std::vector<unsigned long>,std::allocator<turi::neural_net::float_buffer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_223DA856C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<std::vector<float>,std::vector<unsigned long>,std::allocator<turi::neural_net::float_buffer>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D752D08;
  std::allocator<turi::neural_net::float_buffer>::construct[abi:ne180100]<turi::neural_net::float_buffer,std::vector<float>,std::vector<unsigned long>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_223DA85E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::neural_net::float_buffer>::construct[abi:ne180100]<turi::neural_net::float_buffer,std::vector<float>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v5 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  turi::neural_net::float_buffer::float_buffer(a2, v6, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_223DA8678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223DA87A4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)&this[1]);
  return this;
}

void sub_223DA8814(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

turi::neural_net::shared_float_array *turi::neural_net::shared_float_array::shared_float_array(turi::neural_net::shared_float_array *this)
{
  turi::neural_net::shared_float_array::default_value(&v3);
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)this, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return this;
}

void sub_223DA887C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D752D58;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::pair<std::string const,turi::neural_net::shared_float_array> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223DA8A48(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v6 = *((void *)a2 + 4);
  std::string::size_type v5 = *((void *)a2 + 5);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D752D58;
  this[1].__r_.__value_.__l.__size_ = v6;
  this[1].__r_.__value_.__r.__words[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = a2[4];
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v7;
  return this;
}

void anonymous namespace'::convert_weights_mps_coreml(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/style_transfer/mps_style_transfer_backend.mm", 124);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"w.second.dim()", 14);
  std::string::size_type v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  std::string::size_type v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  long long v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/style_transfer/mps_style_transfer_backend.mm", "operator()", 132, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
}

void sub_223DA8C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_223DA8DE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const*,turi::neural_net::shared_float_array&>(uint64_t **a1, char **a2, uint64_t a3)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const*,turi::neural_net::shared_float_array&>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  std::string::size_type v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    std::string::size_type v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_223DA8F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const*,turi::neural_net::shared_float_array&>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  size_t v8 = operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const*,turi::neural_net::shared_float_array&,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_223DA8F94(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

__n128 std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const*,turi::neural_net::shared_float_array&,0>(void *a1, char **a2, uint64_t a3)
{
  uint64_t v4 = (__n128 *)std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  unint64_t v6 = *(void *)(a3 + 8);
  unint64_t v5 = *(void *)(a3 + 16);
  v4[1].n128_u64[1] = (unint64_t)&unk_26D752D58;
  v4[2].n128_u64[0] = v6;
  v4[2].n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  __n128 v8 = *(__n128 *)(a3 + 40);
  v4[3] = result;
  v4[4] = v8;
  return result;
}

id **std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](id **result, id *a2)
{
  unint64_t v2 = *result;
  char *result = a2;
  if (v2)
  {

    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t *std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_223DA90B8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          __n128 v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          __n128 v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    __n128 v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t OUTLINED_FUNCTION_0()
{
  return std::stringbuf::str();
}

void sub_223DA974C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_Unwind_Exception *exception_object,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _Unwind_Resume(a1);
}

void sub_223DA9884()
{
}

void sub_223DA988C()
{
}

void sub_223DA9894()
{
}

void sub_223DA98B4()
{
  JUMPOUT(0x223DA984CLL);
}

void sub_223DA98D0()
{
}

void sub_223DA98DC()
{
}

void sub_223DA9958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DA9A64(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_223DA9AAC()
{
  JUMPOUT(0x223DA9AA0);
}

void sub_223DA9AB8()
{
}

void sub_223DA9B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DA9FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_223DAA704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _Unwind_Resume(a1);
}

void sub_223DAA834()
{
}

void sub_223DAA83C()
{
}

void sub_223DAA864()
{
  JUMPOUT(0x223DAA7FCLL);
}

void sub_223DAA870()
{
}

void sub_223DAA934(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_223DAA9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DAAA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DAAF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_223DABC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_object,uint64_t a30,uint64_t a31,void *a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_223DAC050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DAC250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DAC3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DACC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_223DAD8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_Unwind_Exception *exception_object,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _Unwind_Resume(a1);
}

void sub_223DADC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_223DADCD4()
{
}

void sub_223DADCDC()
{
}

void sub_223DADCE4()
{
}

void sub_223DADCEC()
{
}

void sub_223DADCF4()
{
  JUMPOUT(0x223DADCB4);
}

void sub_223DADD00()
{
}

void sub_223DADD08()
{
  JUMPOUT(0x223DADCBCLL);
}

void sub_223DADD14()
{
}

void sub_223DADD1C()
{
  JUMPOUT(0x223DADCC4);
}

void sub_223DADD28()
{
}

void sub_223DADE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DADF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DAE768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_223DB2E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_Unwind_Exception *exception_object,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  _Unwind_Resume(a1);
}

void sub_223DB3074()
{
}

void sub_223DB31AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DB31F4()
{
  JUMPOUT(0x223DB31E4);
}

void sub_223DB3200()
{
}

void sub_223DB3208()
{
  JUMPOUT(0x223DB31E8);
}

void sub_223DB3214()
{
}

void sub_223DB329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223DB3D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_Unwind_Exception *exception_object,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  _Unwind_Resume(a1);
}

void sub_223DB3FA4()
{
}

void sub_223DB40DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DB4124()
{
  JUMPOUT(0x223DB4114);
}

void sub_223DB4130()
{
}

void sub_223DB4138()
{
  JUMPOUT(0x223DB4118);
}

void sub_223DB4144()
{
}

void sub_223DB41EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_cnn_module::mps_cnn_module(uint64_t a1, id *a2)
{
  *(void *)a1 = &unk_26D752DC0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = (void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  objc_storeStrong((id *)(a1 + 16), *a2);
  uint64_t v5 = [*(id *)(a1 + 16) device];
  unint64_t v6 = *v3;
  *uint64_t v3 = (void *)v5;

  if (!*v3) {
    turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_0::operator()();
  }
  if (!*v4) {
    turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_1::operator()();
  }
  return a1;
}

void sub_223DB6884(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"dev_ != nullptr", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", "operator()", 32, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223DB6A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cmd_queue_ != nullptr", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", "operator()", 33, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::neural_net::mps_cnn_module::mps_cnn_module(turi::neural_net::mps_command_queue const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223DB6C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::init(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v17 = MEMORY[0x22A615770]();
  a1[6] = a7;
  a1[7] = a9;
  uint64_t v18 = objc_msgSend(MEMORY[0x263F13278], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4, a6, a5, a4, 1, 3, v17);
  atomic_ullong *volatile v19 = (void *)a1[3];
  a1[3] = v18;

  atomic_ullong *volatile v20 = operator new(0x1CuLL);
  _DWORD *v20 = a3;
  v20[1] = a5;
  v20[2] = a6;
  void v20[3] = a4;
  v20[4] = a8;
  v20[5] = a9;
  v20[6] = a7;
  turi::neural_net::createNetwork(a2);
}

void sub_223DB6E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::mps_cnn_module::SetupUpdater(turi::neural_net::mps_cnn_module *this, turi::neural_net *a2)
{
}

void sub_223DB6F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::mps_cnn_module::load(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x22A615770]();
  turi::neural_net::MPSNetwork::Load(*(void *)(a1 + 32), a2);
}

void turi::neural_net::mps_cnn_module::export_weights(turi::neural_net::MPSNetwork **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)MEMORY[0x22A615770]();
  turi::neural_net::MPSNetwork::Export(this[4], a2);
}

void turi::neural_net::mps_cnn_module::predict(uint64_t a1, uint64_t a2)
{
}

void turi::neural_net::mps_cnn_module::perform_batch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(v3 + 48);
  if (*(unsigned char *)(v3 + 48)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = a3 == 0;
  }
  if (!v5) {
    turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_0::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  uint64_t v9 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "labels");
  uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "weights");
  uint64_t v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = a2 + 8;
  if (a2 + 8 != v9)
  {
    if (v4)
    {
      if (v12 == v10) {
        turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_2::operator()();
      }
      if (v12 == v11) {
        turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_3::operator()();
      }
      unint64_t v13 = turi::neural_net::mps_cnn_module::copy_input(a1, v9 + 56);
      uint64_t v14 = turi::neural_net::mps_cnn_module::copy_labels(a1, v10 + 56, v11 + 56);
    }
    else
    {
      unint64_t v13 = turi::neural_net::mps_cnn_module::copy_input(a1, v9 + 56);
      uint64_t v14 = 0;
    }
    char v15 = [*(id *)(a1 + 16) commandBuffer];
    long long v26 = turi::neural_net::MPSNetwork::Forward(*(void *)(a1 + 32), v13, v15, a3);
    if (v4)
    {
      turi::neural_net::MPSNetwork::Loss(*(void *)(a1 + 32), v26, v14, v15);
      uint64_t v16 = (MPSImageBatch *)objc_claimAutoreleasedReturnValue();
      turi::neural_net::mps_cnn_module::ExtractLossImages(v14, v15);
      objc_claimAutoreleasedReturnValue();
      if (a3)
      {
        turi::neural_net::MPSNetwork::Backward(*(void *)(a1 + 32), v16, v15);
        uint64_t v17 = (MPSImageBatch *)objc_claimAutoreleasedReturnValue();
        MPSImageBatchIncrementReadCount(v17, -1);
        turi::neural_net::MPSNetwork::GpuUpdate(*(void *)(a1 + 32), v15);
      }
      else
      {
        MPSImageBatchIncrementReadCount(v16, -1);
      }
    }
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v18 = v26;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v27 objects:v33 count:16];
    if (v19)
    {
      uint64_t v20 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v28 != v20) {
            objc_enumerationMutation(v18);
          }
          [*(id *)(*((void *)&v27 + 1) + 8 * i) synchronizeOnCommandBuffer:v15];
        }
        uint64_t v19 = [v18 countByEnumeratingWithState:&v27 objects:v33 count:16];
      }
      while (v19);
    }

    uint64_t v22 = *(int *)(*(void *)(a1 + 32) + 40);
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 56);
    std::string v25 = operator new(0x20uLL);
    __p[1] = v25 + 4;
    long long v32 = v25 + 4;
    *std::string v25 = v22;
    v25[1] = 1;
    v25[2] = v23;
    v25[3] = v24;
    __p[0] = v25;
    _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_1::operator()();
}

void sub_223DB76EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::set_learning_rate(turi::neural_net::mps_cnn_module *this, float a2)
{
  int v4 = (void *)MEMORY[0x22A615770]();
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    (*(void (**)(uint64_t, float))(*(void *)v5 + 32))(v5, a2);
  }
}

void turi::neural_net::mps_cnn_module::train(uint64_t a1, uint64_t a2)
{
}

void turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!do_backward || loss_image_required", 35);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_cnnmodule.mm", "operator()", 117, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::neural_net::mps_cnn_module::perform_batch(std::map<std::string,turi::neural_net::shared_float_array> const&,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223DB7B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

id turi::neural_net::mps_cnn_module::copy_input(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a1 + 64);
  objc_sync_enter(v4);
  if ([*(id *)(a1 + 64) count])
  {
    uint64_t v5 = [*(id *)(a1 + 64) lastObject];
    [*(id *)(a1 + 64) removeLastObject];
  }
  else
  {
    uint64_t v5 = 0;
  }
  objc_sync_exit(v4);

  if (!v5)
  {
    unint64_t v6 = *(void **)(a1 + 24);
    uint64_t v7 = *(int *)(*(void *)(a1 + 32) + 40);
    id v8 = *(id *)(a1 + 8);
    id v9 = v6;
    uint64_t v10 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:v7];
    if (v7)
    {
      do
      {
        uint64_t v11 = (void *)[objc_alloc(MEMORY[0x263F13220]) initWithDevice:v8 imageDescriptor:v9];
        [v10 addObject:v11];

        --v7;
      }
      while (v7);
    }
    uint64_t v12 = [v10 copy];

    uint64_t v5 = (void *)v12;
  }
  turi::neural_net::fill_image_batch(a2, v5);
  return v5;
}

void sub_223DB7D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::mps_cnn_module::copy_labels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 32) + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(const float **)(a1 + 56);
  id v9 = *(id *)(a1 + 72);
  objc_sync_enter(v9);
  if ([*(id *)(a1 + 72) count])
  {
    uint64_t v10 = [*(id *)(a1 + 72) lastObject];
    [*(id *)(a1 + 72) removeLastObject];
    turi::neural_net::mps_cnn_module::FillLossLabelsBatch(v10, *(void **)(a1 + 8), a2, a3, v6, (int)v7, v8);
    objc_sync_exit(v9);
  }
  else
  {
    objc_sync_exit(v9);

    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
    if ((int)v6 < 1)
    {
      uint64_t v10 = (void *)MEMORY[0x263EFFA68];
    }
    else
    {
      uint64_t v27 = a1;
      uint64_t v11 = 0;
      uint64_t v7 = (const float *)(int)v7;
      uint64_t v12 = (int)v8;
      uint64_t v26 = 4 * (int)v7;
      unint64_t v13 = (void *)MEMORY[0x263EFFA68];
      unint64_t v14 = 0x263F13000uLL;
      do
      {
        long long v32 = v13;
        turi::neural_net::mps_cnn_module::EncodeLabels((turi::neural_net::mps_cnn_module *)(v29 + v11), v7, v12);
        BOOL v31 = v30 = v6;
        char v15 = *(void **)(v14 + 352);
        v36[0] = v7;
        v36[1] = 1;
        v36[2] = v12;
        uint64_t v16 = [v15 cnnLossDataDescriptorWithData:v31 layout:0 size:v36];
        uint64_t v17 = turi::neural_net::mps_cnn_module::EncodeWeights((turi::neural_net::mps_cnn_module *)(v28 + v11), v7, v12);
        id v18 = *(void **)(v14 + 352);
        uint64_t v19 = v7;
        v35[0] = v7;
        v35[1] = 1;
        uint64_t v20 = v12;
        v35[2] = v12;
        unsigned int v21 = [v18 cnnLossDataDescriptorWithData:v17 layout:0 size:v35];
        id v22 = objc_alloc(MEMORY[0x263F13170]);
        uint64_t v23 = *(void *)(v27 + 8);
        int64x2_t v33 = vdupq_n_s64(1uLL);
        uint64_t v34 = 1;
        uint64_t v24 = (void *)[v22 initWithDevice:v23 lossImageSize:&v33 labelsDescriptor:v16 weightsDescriptor:v21];
        uint64_t v10 = [v32 arrayByAddingObject:v24];

        v11 += v26;
        unint64_t v13 = v10;
        --v6;
        uint64_t v7 = v19;
        uint64_t v12 = v20;
        unint64_t v14 = 0x263F13000;
      }
      while (v30 != 1);
    }
  }
  return v10;
}

void sub_223DB8070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  objc_sync_exit(v16);

  _Unwind_Resume(a1);
}

id turi::neural_net::mps_cnn_module::ExtractLossImages(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(v3, "count"));
  for (unint64_t i = 0; i < [v3 count]; ++i)
  {
    uint64_t v7 = [v3 objectAtIndexedSubscript:i];
    uint64_t v8 = [v7 lossImage];

    [v5 addObject:v8];
    [v8 synchronizeOnCommandBuffer:v4];
  }
  return v5;
}

void sub_223DB81C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZNK4turi10neural_net14mps_cnn_module13perform_batchERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEb_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 status] == 5)
  {
    [v3 error];
    id v4 = [(id)objc_claimAutoreleasedReturnValue() localizedDescription];
    uint64_t v5 = std::runtime_error::runtime_error(&v21, v4);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(v5);
  }
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  objc_sync_exit(v6);

  if (*(void *)(a1 + 48))
  {
    id v7 = *(id *)(a1 + 56);
    objc_sync_enter(v7);
    [*(id *)(a1 + 56) addObject:*(void *)(a1 + 48)];
    objc_sync_exit(v7);
  }
  uint64_t v8 = *(uint64_t **)(a1 + 80);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::string __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(a1 + 112), *(void *)(a1 + 120), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3);
  turi::neural_net::copy_image_batch((uint64_t **)&__p, *(void **)(a1 + 64), (uint64_t)v19);
  std::promise<turi::neural_net::shared_float_array>::set_value(v8, (uint64_t)v19);
  v19[0] = &unk_26D752D58;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  id v9 = *(void **)(a1 + 72);
  if (v9)
  {
    uint64_t v10 = *(uint64_t **)(a1 + 96);
    uint64_t v11 = **(void **)(a1 + 112);
    uint64_t v12 = (char *)operator new(0x20uLL);
    unint64_t v14 = v12 + 32;
    char v15 = v12 + 32;
    *(void *)uint64_t v12 = v11;
    *(int64x2_t *)(v12 + 8) = vdupq_n_s64(1uLL);
    *((void *)v12 + 3) = 1;
    unint64_t v13 = v12;
    turi::neural_net::copy_image_batch((uint64_t **)&v13, v9, (uint64_t)v19);
    std::promise<turi::neural_net::shared_float_array>::set_value(v10, (uint64_t)v19);
    v19[0] = &unk_26D752D58;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v13)
    {
      unint64_t v14 = v13;
      operator delete(v13);
    }
  }
}

void sub_223DB847C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::promise<turi::neural_net::shared_float_array>::set_exception(std::__assoc_sub_state **a1, const std::exception_ptr *a2)
{
  unint64_t v2 = *a1;
  if (!*a1) {
    std::__throw_future_error[abi:ne180100](3u);
  }
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(v2, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_223DB85D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::make_exception_ptr[abi:ne180100]<std::runtime_error>(const std::runtime_error *a1)
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::exception_ptr v3 = std::runtime_error::runtime_error(exception, a1);
  __cxa_throw(v3, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_223DB862C(void *a1)
{
}

void std::promise<turi::neural_net::shared_float_array>::set_value(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!v2) {
    std::__throw_future_error[abi:ne180100](3u);
  }
  std::__assoc_state<turi::neural_net::shared_float_array>::set_value<turi::neural_net::shared_float_array>(v2, a2);
}

void *__copy_helper_block_ea8_80c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE96c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE112c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 104);
  a1[12] = *(void *)(a2 + 96);
  a1[13] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 14, *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
}

void sub_223DB86F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 104);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::exception_ptr v4 = *(std::__shared_weak_count **)(v1 + 88);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_80c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE96c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE112c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[13];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::exception_ptr v4 = (std::__shared_weak_count *)a1[11];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

id turi::neural_net::mps_cnn_module::EncodeLabels(turi::neural_net::mps_cnn_module *this, const float *a2, uint64_t a3)
{
  std::exception_ptr v4 = a2;
  id v6 = [MEMORY[0x263EFF990] dataWithLength:4 * (void)a2 * a3];
  for (uint64_t i = [v6 mutableBytes]; v4; v4 = (const float *)((char *)v4 - 1))
  {
    float v8 = *(float *)this;
    this = (turi::neural_net::mps_cnn_module *)((char *)this + 4);
    *(_DWORD *)(i + 4 * (unint64_t)v8) = 1065353216;
    i += 4 * a3;
  }
  return v6;
}

void sub_223DB8800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::mps_cnn_module::EncodeWeights(turi::neural_net::mps_cnn_module *this, const float *a2, uint64_t a3)
{
  id v6 = [MEMORY[0x263EFF990] dataWithLength:4 * (void)a2 * a3];
  uint64_t v7 = [v6 mutableBytes];
  if (a2)
  {
    float v8 = 0;
    do
    {
      if (a3 >= 1)
      {
        unint64_t v9 = (a3 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        uint64_t v10 = (_DWORD *)v7;
        do
        {
          *v10++ = *((_DWORD *)this + (void)v8);
          --v9;
        }
        while (v9 > 1);
      }
      v7 += 4 * a3;
      float v8 = (const float *)((char *)v8 + 1);
    }
    while (v8 != a2);
  }
  return v6;
}

void sub_223DB88BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::FillLossLabelsBatch(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  id v36 = a1;
  id v31 = a2;
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
  if (a5)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = a7;
    uint64_t v16 = (const float *)a6;
    uint64_t v32 = a5;
    uint64_t v38 = 4 * a7 * a6;
    uint64_t v39 = 4 * a6;
    int64x2_t v33 = vdupq_n_s64(1uLL);
    do
    {
      uint64_t v17 = [v36 objectAtIndexedSubscript:v14];
      turi::neural_net::mps_cnn_module::EncodeLabels((turi::neural_net::mps_cnn_module *)(v35 + v13), v16, v15);
      id v37 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v18 = turi::neural_net::mps_cnn_module::EncodeWeights((turi::neural_net::mps_cnn_module *)(v34 + v13), v16, v15);
      id v19 = objc_alloc(MEMORY[0x263F13220]);
      uint64_t v20 = [v17 labelsImage];
      std::runtime_error v21 = [v20 texture];
      id v22 = (void *)[v19 initWithTexture:v21 featureChannels:v15];

      id v23 = objc_alloc(MEMORY[0x263F13220]);
      uint64_t v24 = [v17 weightsImage];
      std::string v25 = [v24 texture];
      uint64_t v26 = (void *)[v23 initWithTexture:v25 featureChannels:v15];

      id v27 = v37;
      uint64_t v28 = [v27 bytes];
      memset(v42, 0, 24);
      v42[3] = v16;
      int64x2_t v43 = v33;
      objc_msgSend(v22, "writeBytes:dataLayout:bytesPerRow:bytesPerImage:region:featureChannelInfo:imageIndex:", v28, 0, v39, v38, v42, 0, v15, 0);
      id v29 = v18;
      uint64_t v30 = [v29 bytes];
      memset(v40, 0, 24);
      v40[3] = v16;
      int64x2_t v41 = vdupq_n_s64(1uLL);
      objc_msgSend(v26, "writeBytes:dataLayout:bytesPerRow:bytesPerImage:region:featureChannelInfo:imageIndex:", v30, 0, v39, v38, v40, 0, v15, 0);

      ++v14;
      v13 += v39;
    }
    while (v32 != v14);
  }
}

void sub_223DB8B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_cnn_module::~mps_cnn_module(id *this)
{
  *this = &unk_26D752DC0;

  id v2 = this[5];
  this[5] = 0;
  if (v2) {
    (*(void (**)(id))(*(void *)v2 + 48))(v2);
  }
  id v3 = this[4];
  this[4] = 0;
  if (v3) {
    (*(void (**)(id))(*(void *)v3 + 8))(v3);
  }
}

{
  id v2;
  id v3;
  uint64_t vars8;

  *this = &unk_26D752DC0;

  id v2 = this[5];
  this[5] = 0;
  if (v2) {
    (*(void (**)(id))(*(void *)v2 + 48))(v2);
  }
  id v3 = this[4];
  this[4] = 0;
  if (v3) {
    (*(void (**)(id))(*(void *)v3 + 8))(v3);
  }

  JUMPOUT(0x22A614FA0);
}

uint64_t std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    float v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      float v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

void _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x20uLL);
  _ZNSt3__120__shared_ptr_emplaceINS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v0);
}

void sub_223DB8E7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceINS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D752E50;
  operator new();
}

void sub_223DB8F3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::promise<turi::neural_net::shared_float_array>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::promise<turi::neural_net::shared_float_array>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *std::__shared_ptr_emplace<std::promise<turi::neural_net::shared_float_array>>::__on_zero_shared(uint64_t a1)
{
  return std::promise<turi::neural_net::shared_float_array>::~promise((uint64_t *)(a1 + 24));
}

void std::__assoc_state<turi::neural_net::shared_float_array>::~__assoc_state(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;
  uint64_t vars8;

  *(void *)a1 = MEMORY[0x263F8C320] + 16;
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__assoc_state<turi::neural_net::shared_float_array>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136)) {
    (**(void (***)(void))(a1 + 144))();
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);
  return v2(a1);
}

uint64_t *std::promise<turi::neural_net::shared_float_array>::~promise(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((*(unsigned char *)(v2 + 136) & 1) == 0)
    {
      v7.__ptr_ = 0;
      uint64_t v3 = *(void *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v7);
      uint64_t v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        std::exception_ptr v4 = std::future_category();
        MEMORY[0x22A614800](v6, 4, v4);
        std::make_exception_ptr[abi:ne180100]<std::future_error>(v6);
      }
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  return a1;
}

void std::make_exception_ptr[abi:ne180100]<std::future_error>(const std::logic_error *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
  uint64_t v3 = std::logic_error::logic_error(exception, a1);
  v3->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C2E0] + 16);
  v3[1] = a1[1];
  __cxa_throw(v3, MEMORY[0x263F8C1A0], MEMORY[0x263F8C0C0]);
}

void sub_223DB9290(void *a1)
{
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
  uint64_t v3 = std::future_category();
  MEMORY[0x22A614800](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x263F8C1A0], MEMORY[0x263F8C0C0]);
}

void sub_223DB9304(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_state<turi::neural_net::shared_float_array>::set_value<turi::neural_net::shared_float_array>(uint64_t a1, uint64_t a2)
{
  std::exception_ptr v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(void *)(a1 + 144) = &unk_26D752D58;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 184) = v6;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_223DB93DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0) {
    std::__throw_future_error[abi:ne180100](1u);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 1uLL, memory_order_relaxed);
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_223DB9458(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x48uLL);
  __n128 result = std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,std::allocator<turi::neural_net::deferred_float_array>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_223DB94BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>,std::allocator<turi::neural_net::deferred_float_array>,0>(void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D752EE8;
  std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_223DB9530(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = v4;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  turi::neural_net::deferred_float_array::deferred_float_array(a2, &v8, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t result = v8;
  if (v8)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  return result;
}

void sub_223DB9680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, atomic_ullong *a12)
{
  if (__p) {
    operator delete(__p);
  }
  std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long>>(&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>(uint64_t **a1, char *a2, long long *a3)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  char v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    char v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_223DB9728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_223DB979C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>,0>(void *a1, char *a2, long long *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v7 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)(v5 + 3), &v7);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
  return a1;
}

void sub_223DB980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>,0>(v10);
  _Unwind_Resume(a1);
}

void turi::neural_net::create_mps_compute_context(turi::neural_net *this@<X0>, void *a2@<X8>)
{
  int v3 = (void *)MEMORY[0x22A615770](this);
  uint64_t v4 = turi::fileio::NUM_GPUS;
  *a2 = 0;
  if (v4)
  {
    char v5 = +[TCMPSDeviceManager sharedInstance];
    [v5 preferredDevice];
    objc_claimAutoreleasedReturnValue();

    operator new();
  }
}

void sub_223DB9928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9, id *a10)
{
  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](&a9, 0);
  MEMORY[0x22A614FA0](v12, 0xA1C409BE6959DLL);
  std::unique_ptr<turi::style_transfer::mps_style_transfer::impl>::reset[abi:ne180100](&a10, 0);

  *uint64_t v10 = 0;
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_compute_context::mps_compute_context(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = &unk_26D752F38;
  a1[1] = v2;
  operator new();
}

void sub_223DB9A1C(_Unwind_Exception *a1)
{
  turi::neural_net::float_scalar::~float_scalar(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_compute_context::~mps_compute_context(turi::neural_net::mps_compute_context *this)
{
  *(void *)this = &unk_26D752F38;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  uint64_t vars8;

  turi::neural_net::mps_compute_context::~mps_compute_context(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::mps_compute_context::memory_budget(turi::neural_net::mps_compute_context *this)
{
  return 0x40000000;
}

void turi::neural_net::mps_compute_context::print_training_device_info(id **this)
{
  uint64_t v2 = (void *)MEMORY[0x22A615770]();
  int v3 = [*this[1] device];
  id v4 = [v3 name];
  std::string::basic_string[abi:ne180100]<0>(&v17, (char *)[v4 cStringUsingEncoding:4]);

  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    long long v6 = (int *)global_logger();
    if (v6[169] > 4) {
      goto LABEL_22;
    }
    if (!cppipc::must_cancel((cppipc *)v6))
    {
      long long v7 = (file_logger *)global_logger();
      started = file_logger::start_stream(v7, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_compute_context.mm", "print_training_device_info", 130, 1);
      unint64_t v9 = pthread_getspecific(*((void *)started + 74));
      if (v9 && *((unsigned char *)v9 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Using GPU (\"", 12);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v17;
      }
      uint64_t v14 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      uint64_t v15 = pthread_getspecific(*(void *)(v14 + 592));
      if (v15 && *((unsigned char *)v15 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"\") to create model.", 19);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_22;
    }
LABEL_25:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  uint64_t v10 = (int *)global_logger();
  if (v10[169] > 4) {
    goto LABEL_22;
  }
  if (cppipc::must_cancel((cppipc *)v10)) {
    goto LABEL_25;
  }
  uint64_t v11 = (file_logger *)global_logger();
  uint64_t v12 = file_logger::start_stream(v11, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mps_compute_context.mm", "print_training_device_info", 128, 1);
  uint64_t v13 = pthread_getspecific(*((void *)v12 + 74));
  if (v13 && *((unsigned char *)v13 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Using CPU to create model.", 26);
  }
LABEL_22:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_223DB9CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_compute_context::create_image_augmenter()
{
}

void sub_223DB9D78(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C408ACC72CDLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_compute_context::create_object_detector(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, const void ***a9, uint64_t a10)
{
  *(void *)&long long v59 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  char v46 = (std::string **)&v47;
  long long v47 = 0;
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v48 = 0;
  long long v49 = v50;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v37 = v11;
    uint64_t v38 = v10;
  }
  else
  {
    uint64_t v37 = *(void *)(a1 + 8);
    uint64_t v38 = 0;
  }
  int v39 = a2;
  int v40 = a3;
  int v41 = a4;
  int v42 = a5;
  int v43 = a6;
  int v44 = a7;
  int v45 = a8;
  if (&v49 != (uint64_t **)a10) {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>(&v49, *(long long **)a10, (long long *)(a10 + 8));
  }
  std::string::basic_string[abi:ne180100]<0>(&v51, "learning_rate");
  std::string::basic_string[abi:ne180100]<0>(&v53, "od_scale_class");
  std::string::basic_string[abi:ne180100]<0>((void *)&v54 + 1, "od_scale_no_object");
  std::string::basic_string[abi:ne180100]<0>(v55, "od_scale_object");
  std::string::basic_string[abi:ne180100]<0>(v56, "od_scale_wh");
  std::string::basic_string[abi:ne180100]<0>(v57, "od_scale_xy");
  std::string::basic_string[abi:ne180100]<0>(v58, "gradient_clipping");
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  id v36 = 0;
  id v31 = &v34;
  LOBYTE(v32) = 0;
  uint64_t v34 = (std::string *)operator new(0xA8uLL);
  uint64_t v35 = v34;
  id v36 = v34 + 7;
  uint64_t v12 = 0;
  uint64_t v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v51, &v59, v34);
  do
  {
    if (SHIBYTE(v58[v12 + 2]) < 0) {
      operator delete((void *)v58[v12]);
    }
    v12 -= 3;
  }
  while (v12 != -21);
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)&v28, a9);
  uint64_t v14 = v34;
  uint64_t v13 = v35;
  if (v34 == v35)
  {
LABEL_31:
    id v31 = v28;
    uint64_t v32 = v29;
    uint64_t v33 = v30;
    if (v30)
    {
      v29[2] = &v32;
      uint64_t v28 = (std::string **)&v29;
      id v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      id v31 = (std::string **)&v32;
    }
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v46, v47);
    id v27 = v32;
    char v46 = v31;
    long long v47 = v32;
    uint64_t v48 = v33;
    if (v33)
    {
      v32[2] = &v47;
      id v31 = (std::string **)&v32;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      id v27 = 0;
    }
    else
    {
      char v46 = (std::string **)&v47;
    }
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v31, v27);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v28, v29);
    operator new();
  }
  while (1)
  {
    uint64_t v15 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v28, (const void **)&v14->__r_.__value_.__l.__data_);
    uint64_t v16 = v15;
    if (&v29 != v15) {
      break;
    }
LABEL_30:
    if (++v14 == v13) {
      goto LABEL_31;
    }
  }
  uint64_t v17 = (*(uint64_t (**)(void *))(*v15[8] + 16))(v15[8]);
  int v18 = SHIBYTE(v14->__r_.__value_.__r.__words[2]);
  if (v18 < 0)
  {
    float v19 = 8.0;
    if (v14->__r_.__value_.__l.__size_ != 13)
    {
LABEL_26:
      turi::neural_net::shared_float_array::wrap(*(float *)(v17 + 4 * (void)v16[10]) * v19, (uint64_t)&v51);
      long long v24 = v52;
      long long v52 = 0uLL;
      std::string v25 = (std::__shared_weak_count *)v16[9];
      *((_OWORD *)v16 + 4) = v24;
      if (v25)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        std::string v25 = (std::__shared_weak_count *)*((void *)&v52 + 1);
      }
      long long v26 = v54;
      *((_OWORD *)v16 + 5) = v53;
      *((_OWORD *)v16 + 6) = v26;
      long long v51 = &unk_26D752D58;
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      goto LABEL_30;
    }
    uint64_t v20 = (unint64_t *)v14->__r_.__value_.__r.__words[0];
  }
  else
  {
    float v19 = 8.0;
    uint64_t v20 = (unint64_t *)v14;
    if (v18 != 13) {
      goto LABEL_26;
    }
  }
  unint64_t v21 = bswap64(*v20);
  unint64_t v22 = 0x6C6561726E696E67;
  if (v21 == 0x6C6561726E696E67
    && (unint64_t v21 = bswap64(*(unint64_t *)((char *)v20 + 5)), v22 = 0x696E675F72617465, v21 == 0x696E675F72617465))
  {
    int v23 = 0;
  }
  else if (v21 < v22)
  {
    int v23 = -1;
  }
  else
  {
    int v23 = 1;
  }
  if (v23) {
    float v19 = 8.0;
  }
  else {
    float v19 = 0.125;
  }
  goto LABEL_26;
}

void sub_223DBA2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void turi::neural_net::mps_od_backend::parameters::~parameters(turi::neural_net::mps_od_backend::parameters *this)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 48, *((void **)this + 7));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void turi::neural_net::mps_compute_context::create_activity_classifier()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_223DBA7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  for (uint64_t i = 240; i != -80; i -= 80)
    std::pair<std::string const,turi::neural_net::shared_float_array>::~pair(v24 + i);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  id v27 = (std::__shared_weak_count *)v23[2];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  v23[7] = &unk_26D752D58;
  uint64_t v28 = (std::__shared_weak_count *)v23[9];
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

void turi::neural_net::shared_float_array::wrap(float a1@<S0>, uint64_t a2@<X8>)
{
  char v5 = (std::__shared_weak_count *)operator new(0x28uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752FB0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26D753000;
  *(float *)&v5[1].__shared_owners_ = a1;
  long long v6 = v5 + 1;
  long long v7 = v5;
  turi::neural_net::shared_float_array::shared_float_array(a2, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_223DBA9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,turi::neural_net::shared_float_array>::~pair(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D752D58;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t turi::neural_net::mps_compute_context::has_style_transfer(turi::neural_net::mps_compute_context *this)
{
  return 1;
}

void turi::neural_net::mps_compute_context::create_style_transfer()
{
}

void sub_223DBAAE8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_compute_context::create_drawing_classifier(void *a1@<X8>)
{
  *a1 = 0;
}

void turi::neural_net::compute_context::create_multilayer_perceptron_classifier()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  turi::TuriException::TuriException((uint64_t)exception, 0);
}

void sub_223DBAB58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::float_scalar>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::float_scalar>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::float_scalar>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void turi::neural_net::float_scalar::~float_scalar(turi::neural_net::float_scalar *this)
{
}

uint64_t turi::neural_net::float_scalar::data(turi::neural_net::float_scalar *this)
{
  return (uint64_t)this + 8;
}

uint64_t turi::neural_net::float_scalar::shape(turi::neural_net::float_scalar *this)
{
  return 0;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D753058;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<turi::neural_net::compute_context> (*)(void),std::allocator<std::unique_ptr<turi::neural_net::compute_context> (*)(void)>,std::unique_ptr<turi::neural_net::compute_context> ()(void)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::default_delete<turi::neural_net::mps_command_queue>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x22A614FA0);
  }
}

void std::__shared_ptr_pointer<turi::neural_net::mps_command_queue  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_pointer<turi::neural_net::mps_command_queue  *>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<turi::neural_net::mps_command_queue  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  char v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    long long v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,turi::neural_net::shared_float_array &>::operator=[abi:ne180100]<std::string const,turi::neural_net::shared_float_array,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_multi<std::pair<std::string const,turi::neural_net::shared_float_array> const&>(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_223DBB030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,turi::neural_net::shared_float_array &>::operator=[abi:ne180100]<std::string const,turi::neural_net::shared_float_array,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = *(std::__shared_weak_count **)(v4 + 16);
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 24) = v8;
  return a1;
}

void *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_multi<std::pair<std::string const,turi::neural_net::shared_float_array> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  BOOL v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      BOOL v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_223DBB2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 80 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::neural_net::shared_float_array> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 10;
      v6 -= 80;
    }
    while (v6);
  }
  return a1;
}

void sub_223DBB3F0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_223DBC074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_graph_cnn_module::mps_graph_cnn_module(uint64_t a1, id *a2)
{
  *(void *)a1 = &unk_26D753168;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = (id *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v6 = (void *)MEMORY[0x22A615770]();
  objc_storeStrong(v5, *a2);
  uint64_t v7 = [*v5 device];
  long long v8 = *v4;
  *uint64_t v4 = (void *)v7;

  return a1;
}

void sub_223DBC1F0(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v2 + 40);
  if (v6)
  {
    *(void *)(v2 + 48) = v6;
    operator delete(v6);
  }
  turi::neural_net::mps_graph_cnn_module::mps_graph_cnn_module(v3);

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_graph_cnn_module::init(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  MEMORY[0x22A615770]();
  std::string::basic_string[abi:ne180100]<0>(__p, "mode");
  *(_DWORD *)(a1 + 24) = turi::neural_net::get_array_map_scalar(a10, (const void **)__p, 1.0);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = objc_msgSend(MEMORY[0x263F13278], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4);
  int v18 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v17;

  uint64_t v19 = objc_msgSend(MEMORY[0x263F13278], "imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:", 4);
  uint64_t v20 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v19;

  unint64_t v21 = operator new(0x1CuLL);
  __p[0] = v21;
  std::string v25 = v21 + 7;
  *unint64_t v21 = a3;
  v21[1] = a5;
  v21[2] = a6;
  v21[3] = a4;
  v21[4] = a8;
  v21[5] = a9;
  v21[6] = a7;
  __p[1] = v21 + 7;
  turi::neural_net::createNetworkGraph(a2, &v23);
}

void sub_223DBC550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::mps_graph_cnn_module::train(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  MEMORY[0x22A615770]();
  uint64_t v4 = [*(id *)(a1 + 16) commandBuffer];
  uint64_t v5 = [[TCMPSGraphModuleBatch alloc] initWithCommandBuffer:v4];
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
  if (v24 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  uint64_t v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
  if (v24 < 0) {
    operator delete(__p);
  }
  if (a2 + 8 != v6)
  {
    if (a2 + 8 != v7)
    {
      long long v8 = turi::neural_net::mps_graph_cnn_module::copy_input(a1, v6 + 56);
      [(TCMPSGraphModuleBatch *)v5 setInput:v8];

      unint64_t v9 = turi::neural_net::mps_graph_cnn_module::copy_labels(a1, v7 + 56);
      [(TCMPSGraphModuleBatch *)v5 setLossState:v9];

      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = [(TCMPSGraphModuleBatch *)v5 input];
      BOOL v12 = [(TCMPSGraphModuleBatch *)v5 lossState];
      uint64_t v13 = turi::neural_net::MPSGraphNetwork::RunGraph(v10, v4, v11, v12);
      [(TCMPSGraphModuleBatch *)v5 setOutput:v13];

      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v14 = [(TCMPSGraphModuleBatch *)v5 lossState];
      uint64_t v15 = [v14 countByEnumeratingWithState:&v19 objects:v25 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v20;
        do
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (*(void *)v20 != v16) {
              objc_enumerationMutation(v14);
            }
            [*(id *)(*((void *)&v19 + 1) + 8 * i) synchronizeOnCommandBuffer:v4];
          }
          uint64_t v15 = [v14 countByEnumeratingWithState:&v19 objects:v25 count:16];
        }
        while (v15);
      }

      int v18 = [(TCMPSGraphModuleBatch *)v5 lossState];
      [v18 count];

      _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
    }
    turi::neural_net::mps_graph_cnn_module::train(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_1::operator()();
  }
  turi::neural_net::mps_graph_cnn_module::train(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()();
}

void sub_223DBCA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair((uint64_t)&__p);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }

  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }

  _Unwind_Resume(a1);
}

id turi::neural_net::mps_graph_cnn_module::copy_input(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x22A615770]();
  id v5 = *(id *)(a1 + 80);
  objc_sync_enter(v5);
  if ([*(id *)(a1 + 80) count])
  {
    uint64_t v6 = [*(id *)(a1 + 80) lastObject];
    [*(id *)(a1 + 80) removeLastObject];
  }
  else
  {
    uint64_t v6 = 0;
  }
  objc_sync_exit(v5);

  if (!v6)
  {
    uint64_t v6 = turi::neural_net::mps_graph_cnn_module::create_image_batch((turi::neural_net::mps_graph_cnn_module *)a1, *(MPSImageDescriptor **)(a1 + 64));
  }
  turi::neural_net::fill_image_batch(a2, v6);
  return v6;
}

void sub_223DBCD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::mps_graph_cnn_module::copy_labels(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x22A615770]();
  id v5 = (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 64))(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 8), a2);
  return v5;
}

void ___ZN4turi10neural_net20mps_graph_cnn_module5trainERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v3 = a2;
  if ([v3 status] == 5)
  {
    [v3 error];
    uint64_t v4 = [(id)objc_claimAutoreleasedReturnValue() localizedDescription];
    std::runtime_error::runtime_error(&v31, v4);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(&v31);
  }
  std::vector<float>::vector(&v29, *(void *)(a1 + 64));
  id v5 = (float *)v29;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v6 = [*(id *)(a1 + 32) lossState];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v25 objects:v32 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = [*(id *)(*((void *)&v25 + 1) + 8 * i) lossImage];
        *id v5 = turi::neural_net::sumImage(v10, v11) * 0.125;

        ++v5;
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v25 objects:v32 count:16];
    }
    while (v7);
  }

  id v12 = *(id *)(a1 + 40);
  objc_sync_enter(v12);
  uint64_t v13 = *(void **)(a1 + 40);
  uint64_t v14 = [*(id *)(a1 + 32) input];
  [v13 addObject:v14];

  objc_sync_exit(v12);
  uint64_t v15 = *(uint64_t **)(a1 + 48);
  *(_OWORD *)long long v21 = v29;
  uint64_t v22 = v30;
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = operator new(8uLL);
  std::string __p = v17;
  *uint64_t v17 = v16;
  long long v19 = v17 + 1;
  long long v20 = v17 + 1;
  turi::neural_net::shared_float_array::wrap((uint64_t)v21, (uint64_t)&__p, (uint64_t)v23);
  std::promise<turi::neural_net::shared_float_array>::set_value(v15, (uint64_t)v23);
  v23[0] = &unk_26D752D58;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  if ((void)v29)
  {
    *((void *)&v29 + 1) = v29;
    operator delete((void *)v29);
  }
}

void sub_223DBD074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,std::runtime_error a35,std::exception_ptr a36)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a31) {
    operator delete(a31);
  }

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_48c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void turi::neural_net::mps_graph_cnn_module::predict(uint64_t a1, uint64_t a2)
{
  v27[1] = *MEMORY[0x263EF8340];
  MEMORY[0x22A615770]();
  uint64_t v4 = [*(id *)(a1 + 16) commandBuffer];
  id v5 = [[TCMPSGraphModuleBatch alloc] initWithCommandBuffer:v4];
  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
  if (v24 < 0) {
    operator delete(__p);
  }
  if (a2 + 8 != v6)
  {
    uint64_t v7 = turi::neural_net::mps_graph_cnn_module::copy_input(a1, v6 + 56);
    [(TCMPSGraphModuleBatch *)v5 setInput:v7];

    uint64_t v8 = *(void *)(a1 + 32);
    long long v26 = @"input";
    unint64_t v9 = [(TCMPSGraphModuleBatch *)v5 input];
    v27[0] = v9;
    uint64_t v10 = [NSDictionary dictionaryWithObjects:v27 forKeys:&v26 count:1];
    uint64_t v11 = turi::neural_net::MPSGraphNetwork::RunGraph(v8, v4, v10);
    [(TCMPSGraphModuleBatch *)v5 setOutput:v11];

    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v12 = [(TCMPSGraphModuleBatch *)v5 output];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v19 objects:v25 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v20 != v14) {
            objc_enumerationMutation(v12);
          }
          [*(id *)(*((void *)&v19 + 1) + 8 * i) synchronizeOnCommandBuffer:v4];
        }
        uint64_t v13 = [v12 countByEnumeratingWithState:&v19 objects:v25 count:16];
      }
      while (v13);
    }

    uint64_t v16 = *(const void **)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    memset(v18, 0, sizeof(v18));
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v18, v16, v17, (v17 - (uint64_t)v16) >> 3);
    _ZNSt3__115allocate_sharedB8ne180100INS_7promiseIN4turi10neural_net18shared_float_arrayEEENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  turi::neural_net::mps_graph_cnn_module::predict(std::map<std::string,turi::neural_net::shared_float_array> const&)const::$_0::operator()();
}

void sub_223DBD654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,std::__shared_weak_count *a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair((uint64_t)&a47);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }

  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  if (a34) {
    operator delete(a34);
  }

  _Unwind_Resume(a1);
}

void ___ZNK4turi10neural_net20mps_graph_cnn_module7predictERKNSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_18shared_float_arrayENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEE_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 status] == 5)
  {
    [v3 error];
    uint64_t v4 = [(id)objc_claimAutoreleasedReturnValue() localizedDescription];
    id v5 = std::runtime_error::runtime_error(&v8, v4);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(v5);
  }
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
  uint64_t v6 = [*(id *)(a1 + 32) output];
  turi::neural_net::copy_image_batch_float16((uint64_t)__p, v6);
}

void sub_223DBD980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_48c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE64c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 8, *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
}

void sub_223DBDA94(_Unwind_Exception *exception_object)
{
  id v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_48c79_ZTSNSt3__110shared_ptrINS_7promiseIN4turi10neural_net18shared_float_arrayEEEEE64c39_ZTSNSt3__16vectorImNS_9allocatorImEEEE(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  id v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void turi::neural_net::mps_graph_cnn_module::export_weights(turi::neural_net::MPSGraphNetwork **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)MEMORY[0x22A615770]();
  turi::neural_net::MPSGraphNetwork::Export(this[4], a2);
}

void turi::neural_net::mps_graph_cnn_module::set_learning_rate(turi::neural_net::mps_graph_cnn_module *this, float a2)
{
  uint64_t v4 = (void *)MEMORY[0x22A615770]();
  uint64_t v5 = *(void *)(*((void *)this + 4) + 8);
  if (*(void *)(*((void *)this + 4) + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      (*(void (**)(void, float))(**(void **)(v5 + 8 * v6) + 32))(*(void *)(v5 + 8 * v6), a2);
      ++v6;
      uint64_t v5 = *(void *)(*((void *)this + 4) + 8);
    }
    while (v6 < (*(void *)(*((void *)this + 4) + 16) - v5) >> 3);
  }
}

id turi::neural_net::mps_graph_cnn_module::create_image_batch(turi::neural_net::mps_graph_cnn_module *this, MPSImageDescriptor *a2)
{
  id v3 = a2;
  uint64_t v4 = *(int *)(*((void *)this + 4) + 40);
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:v4];
  if (v4)
  {
    do
    {
      unint64_t v6 = (void *)[objc_alloc(MEMORY[0x263F13220]) initWithDevice:*((void *)this + 1) imageDescriptor:v3];
      [v5 addObject:v6];

      --v4;
    }
    while (v4);
  }
  uint64_t v7 = (void *)[v5 copy];

  return v7;
}

void sub_223DBDCB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_graph_cnn_module::~mps_graph_cnn_module(id *this)
{
  turi::neural_net::mps_graph_cnn_module::~mps_graph_cnn_module(this);
  JUMPOUT(0x22A614FA0);
}

{
  id v2;
  id v3;

  *this = &unk_26D753168;

  uint64_t v2 = this[5];
  if (v2)
  {
    this[6] = v2;
    operator delete(v2);
  }
  id v3 = this[4];
  this[4] = 0;
  if (v3) {
    (*(void (**)(id))(*(void *)v3 + 8))(v3);
  }
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    id v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  id v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    long long v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *id v12 = &v9[v17];
  return result;
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_223DBDF34(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,std::allocator<turi::neural_net::deferred_float_array>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_223DBDFE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,std::allocator<turi::neural_net::deferred_float_array>,0>(void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D752EE8;
  std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_223DBE058(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<turi::neural_net::deferred_float_array>::construct[abi:ne180100]<turi::neural_net::deferred_float_array,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a3;
  uint64_t v9 = 0;
  uint64_t v10 = v5;
  *a3 = 0;
  std::string __p = 0;
  uint64_t v8 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  turi::neural_net::deferred_float_array::deferred_float_array(a2, &v10, &__p);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  uint64_t result = v10;
  if (v10)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
  }
  return result;
}

void sub_223DBE114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, atomic_ullong *a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12)
  {
    if (!atomic_fetch_add(a12 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*a12 + 16))(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::ReLUGraphLayer::InitFwd(turi::neural_net::ReLUGraphLayer *this, MPSNNImageNode *a2)
{
  id v3 = a2;
  uint64_t v5 = (_DWORD *)*((void *)this + 11);
  if (*((_DWORD **)this + 12) == v5) {
    double v4 = 0.0;
  }
  else {
    LODWORD(v4) = *v5;
  }
  uint64_t v10 = v3;
  uint64_t v6 = [MEMORY[0x263F13190] nodeWithSource:v3 a:v4];
  uint64_t v7 = (void *)*((void *)this + 20);
  *((void *)this + 20) = v6;

  uint64_t v8 = [*((id *)this + 20) resultImage];
  uint64_t v9 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v8;
}

void sub_223DBE20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ReLUGraphLayer::InitBwd(turi::neural_net::ReLUGraphLayer *this, MPSNNImageNode *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v3 = a2;
  double v4 = (void *)*((void *)this + 20);
  v10[0] = v3;
  uint64_t v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  uint64_t v6 = [v4 gradientFilterWithSources:v5];
  uint64_t v7 = (void *)*((void *)this + 21);
  *((void *)this + 21) = v6;

  uint64_t v8 = [*((id *)this + 21) resultImage];
  uint64_t v9 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v8;
}

void sub_223DBE2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvGraphLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v33 = a2;
  id v32 = a3;
  uint64_t v8 = *(int **)(a1 + 64);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v11 = v8[2];
  uint64_t v12 = v8[3];
  uint64_t v30 = v8[4];
  int v13 = v8[6];
  *(unsigned char *)(a1 + 160) = v8[7] > 0;
  if (*(char *)(a1 + 63) >= 0) {
    size_t v14 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v14 = *(void *)(a1 + 48);
  }
  unint64_t v15 = v39;
  std::string::basic_string[abi:ne180100]((uint64_t)v39, v14 + 7);
  uint64_t v16 = (void *)(a1 + 40);
  if (v40 < 0) {
    unint64_t v15 = (const void **)v39[0];
  }
  if (v14)
  {
    if (*(char *)(a1 + 63) >= 0) {
      size_t v17 = (const void *)(a1 + 40);
    }
    else {
      size_t v17 = *(const void **)(a1 + 40);
    }
    memmove(v15, v17, v14);
  }
  strcpy((char *)v15 + v14, "_weight");
  if (*(char *)(a1 + 63) >= 0) {
    size_t v18 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v18 = *(void *)(a1 + 48);
  }
  long long v19 = v37;
  std::string::basic_string[abi:ne180100]((uint64_t)v37, v18 + 5);
  if (v38 < 0) {
    long long v19 = (const void **)v37[0];
  }
  if (v18)
  {
    if (*(char *)(a1 + 63) >= 0) {
      long long v20 = (const void *)(a1 + 40);
    }
    else {
      long long v20 = *(const void **)(a1 + 40);
    }
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "_bias");
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, v39))
  {
    std::operator+<char>();
    if (v36 < 0) {
      operator delete(__p);
    }
    uint64_t v21 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, v39);
    (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
    operator new[]();
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, v37))
  {
    std::operator+<char>();
    if (v36 < 0) {
      operator delete(__p);
    }
    uint64_t v22 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, v37);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  else
  {
    uint64_t v23 = 0;
  }
  char v24 = [TCMPSConvolutionWeights alloc];
  long long v25 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v24;

  id v26 = *(id *)(a1 + 192);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v16 = (void *)*v16;
  }
  turi::neural_net::get_array_map_optimizer_options(a4, (uint64_t)v34);
  uint64_t v27 = objc_msgSend(v26, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:neuronType:neuronA:neuronB:stride:kernelParamsBinaryName:device:cmd_queue:init_weight_ptr:init_bias_ptr:optimizerOptions:", v9, v10, v11, v12, 0, v30, 0.0, 0.0, v16, v33, v32, 0, v23, v34);
  long long v28 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v27;

  long long v29 = &turi::neural_net::SAME;
  if (v13) {
    long long v29 = &turi::neural_net::VALID;
  }
  objc_storeStrong((id *)(a1 + 184), (id)*v29);
  if (v38 < 0) {
    operator delete((void *)v37[0]);
  }
  if (v40 < 0) {
    operator delete((void *)v39[0]);
  }
}

void sub_223DBE6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  if (v20) {
    MEMORY[0x22A614F80](v20, 0x1000C8052888210);
  }
  if (*(char *)(v21 - 113) < 0) {
    operator delete(*(void **)(v21 - 136));
  }
  if (*(char *)(v21 - 89) < 0) {
    operator delete(*(void **)(v21 - 112));
  }

  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,turi::neural_net::shared_float_array>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

void turi::neural_net::ConvGraphLayer::InitFwd(turi::neural_net::ConvGraphLayer *this, MPSNNImageNode *a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = objc_msgSend(MEMORY[0x263F13128], "nodeWithSource:weights:");
  uint64_t v4 = (void *)*((void *)this + 21);
  *((void *)this + 21) = v3;

  [*((id *)this + 21) setPaddingPolicy:*((void *)this + 23)];
  uint64_t v5 = [*((id *)this + 21) resultImage];
  uint64_t v6 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v5;
}

void sub_223DBE81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvGraphLayer::InitBwd(turi::neural_net::ConvGraphLayer *this, MPSNNImageNode *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  uint64_t v4 = (void *)*((void *)this + 21);
  v10[0] = v3;
  uint64_t v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  uint64_t v6 = [v4 gradientFilterWithSources:v5];
  uint64_t v7 = (void *)*((void *)this + 22);
  *((void *)this + 22) = v6;

  uint64_t v8 = [*((id *)this + 22) resultImage];
  uint64_t v9 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v8;
}

void sub_223DBE8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::ConvGraphLayer::SetLearningRate(id *this, float a2)
{
  return objc_msgSend(this[24], "setLearningRate:");
}

void turi::neural_net::ConvGraphLayer::Export(turi::neural_net::ConvGraphLayer *this@<X0>, uint64_t a2@<X8>)
{
  v45[4] = *MEMORY[0x263EF8340];
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v4 = (int *)*((void *)this + 8);
  unint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  unint64_t v8 = v4[2];
  unint64_t v7 = v4[3];
  [*((id *)this + 24) load];
  if (*((char *)this + 63) >= 0) {
    size_t v9 = *((unsigned __int8 *)this + 63);
  }
  else {
    size_t v9 = *((void *)this + 6);
  }
  uint64_t v10 = v42;
  std::string::basic_string[abi:ne180100]((uint64_t)v42, v9 + 7);
  if (v43 < 0) {
    uint64_t v10 = (const void **)v42[0];
  }
  if (v9)
  {
    if (*((char *)this + 63) >= 0) {
      uint64_t v11 = (char *)this + 40;
    }
    else {
      uint64_t v11 = (char *)*((void *)this + 5);
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "_weight");
  std::vector<float>::vector(&v40, (int)v6 * (uint64_t)(int)v5 * v8 * v7);
  v45[0] = v7;
  v45[1] = v5;
  v45[2] = v6;
  v45[3] = v8;
  turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)&v36, (const float *)[*((id *)this + 24) weights], (int)v6 * (uint64_t)(int)v5 * v8 * v7, v45, 4uLL);
  turi::neural_net::convert_hwc_to_chw((uint64_t *)&v36, v40);
  *(_OWORD *)uint64_t v34 = v40;
  uint64_t v35 = v41;
  long long v40 = 0uLL;
  uint64_t v41 = 0;
  uint64_t v12 = operator new(0x20uLL);
  id v32 = v12 + 4;
  id v33 = v12 + 4;
  *uint64_t v12 = v7;
  v12[1] = v8;
  v12[2] = v5;
  v12[3] = v6;
  std::string __p = v12;
  turi::neural_net::shared_float_array::wrap((uint64_t)v34, (uint64_t)&__p, (uint64_t)&v36);
  v29[0] = v42;
  int v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v42, (uint64_t)&std::piecewise_construct, (long long **)v29);
  long long v14 = v37;
  long long v37 = 0uLL;
  unint64_t v15 = (std::__shared_weak_count *)v13[9];
  *((_OWORD *)v13 + 4) = v14;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    unint64_t v15 = (std::__shared_weak_count *)*((void *)&v37 + 1);
  }
  long long v16 = v39;
  *((_OWORD *)v13 + 5) = v38;
  *((_OWORD *)v13 + 6) = v16;
  char v36 = &unk_26D752D58;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (__p)
  {
    id v32 = __p;
    operator delete(__p);
  }
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  if (*((unsigned char *)this + 160))
  {
    if (*((char *)this + 63) >= 0) {
      size_t v17 = *((unsigned __int8 *)this + 63);
    }
    else {
      size_t v17 = *((void *)this + 6);
    }
    size_t v18 = v29;
    std::string::basic_string[abi:ne180100]((uint64_t)v29, v17 + 5);
    if (v30 < 0) {
      size_t v18 = (void **)v29[0];
    }
    if (v17)
    {
      if (*((char *)this + 63) >= 0) {
        long long v19 = (char *)this + 40;
      }
      else {
        long long v19 = (char *)*((void *)this + 5);
      }
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "_bias");
    uint64_t v20 = [*((id *)this + 24) biasTerms];
    uint64_t v21 = operator new(8uLL);
    id v26 = v21;
    *uint64_t v21 = v7;
    uint64_t v27 = v21 + 1;
    long long v28 = v21 + 1;
    turi::neural_net::shared_float_array::copy(v20, (uint64_t)&v26, (uint64_t)&v36);
    int v44 = v29;
    uint64_t v22 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v29, (uint64_t)&std::piecewise_construct, (long long **)&v44);
    long long v23 = v37;
    long long v37 = 0uLL;
    char v24 = (std::__shared_weak_count *)v22[9];
    *((_OWORD *)v22 + 4) = v23;
    if (v24)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      char v24 = (std::__shared_weak_count *)*((void *)&v37 + 1);
    }
    long long v25 = v39;
    *((_OWORD *)v22 + 5) = v38;
    *((_OWORD *)v22 + 6) = v25;
    char v36 = &unk_26D752D58;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
  if ((void)v40)
  {
    *((void *)&v40 + 1) = v40;
    operator delete((void *)v40);
  }
  if (v43 < 0) {
    operator delete((void *)v42[0]);
  }
}

void sub_223DBECDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a32) {
    operator delete(a32);
  }
  if (*(char *)(v34 - 153) < 0) {
    operator delete(*(void **)(v34 - 176));
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v33, *(void **)(v33 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolGraphLayer::InitFwd(turi::neural_net::MaxPoolGraphLayer *this, MPSNNImageNode *a2)
{
  uint64_t v3 = a2;
  int v4 = *(_DWORD *)(*((void *)this + 8) + 8);
  uint64_t v10 = v3;
  uint64_t v5 = objc_msgSend(MEMORY[0x263F131C8], "nodeWithSource:filterSize:stride:");
  unint64_t v6 = (void *)*((void *)this + 20);
  *((void *)this + 20) = v5;

  if (v4 == 1) {
    [MEMORY[0x263F13360] paddingForTensorflowAveragePooling];
  }
  else {
  unint64_t v7 = [MEMORY[0x263F13360] paddingForTensorflowAveragePoolingValidOnly];
  }
  [*((id *)this + 20) setPaddingPolicy:v7];

  uint64_t v8 = [*((id *)this + 20) resultImage];
  size_t v9 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v8;
}

void sub_223DBEED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolGraphLayer::InitBwd(turi::neural_net::MaxPoolGraphLayer *this, MPSNNImageNode *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  int v4 = (void *)*((void *)this + 20);
  v10[0] = v3;
  uint64_t v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  uint64_t v6 = [v4 gradientFilterWithSources:v5];
  unint64_t v7 = (void *)*((void *)this + 21);
  *((void *)this + 21) = v6;

  uint64_t v8 = [*((id *)this + 21) resultImage];
  size_t v9 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v8;
}

void sub_223DBEFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::BNGraphLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v39 = a2;
  id v38 = a3;
  uint64_t v9 = *(int *)(*(void *)(a1 + 112) + 12);
  if (*(char *)(a1 + 63) >= 0) {
    size_t v10 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v10 = *(void *)(a1 + 48);
  }
  uint64_t v11 = v49;
  std::string::basic_string[abi:ne180100]((uint64_t)v49, v10 + 6);
  uint64_t v12 = (void *)(a1 + 40);
  if (v50 < 0) {
    uint64_t v11 = (const void **)v49[0];
  }
  if (v10)
  {
    if (*(char *)(a1 + 63) >= 0) {
      int v13 = (const void *)(a1 + 40);
    }
    else {
      int v13 = *(const void **)(a1 + 40);
    }
    memmove(v11, v13, v10);
  }
  strcpy((char *)v11 + v10, "_gamma");
  if (*(char *)(a1 + 63) >= 0) {
    size_t v14 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v14 = *(void *)(a1 + 48);
  }
  unint64_t v15 = v47;
  std::string::basic_string[abi:ne180100]((uint64_t)v47, v14 + 5);
  if (v48 < 0) {
    unint64_t v15 = (void **)v47[0];
  }
  if (v14)
  {
    if (*(char *)(a1 + 63) >= 0) {
      long long v16 = (const void *)(a1 + 40);
    }
    else {
      long long v16 = *(const void **)(a1 + 40);
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "_beta");
  if (*(char *)(a1 + 63) >= 0) {
    size_t v17 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v17 = *(void *)(a1 + 48);
  }
  size_t v18 = v45;
  std::string::basic_string[abi:ne180100]((uint64_t)v45, v17 + 12);
  if (v46 < 0) {
    size_t v18 = (void **)v45[0];
  }
  if (v17)
  {
    if (*(char *)(a1 + 63) >= 0) {
      long long v19 = (const void *)(a1 + 40);
    }
    else {
      long long v19 = *(const void **)(a1 + 40);
    }
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, "_running_var");
  if (*(char *)(a1 + 63) >= 0) {
    size_t v20 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v20 = *(void *)(a1 + 48);
  }
  uint64_t v21 = v43;
  std::string::basic_string[abi:ne180100]((uint64_t)v43, v20 + 13);
  if (v44 < 0) {
    uint64_t v21 = (void **)v43[0];
  }
  if (v20)
  {
    if (*(char *)(a1 + 63) >= 0) {
      uint64_t v22 = (const void *)(a1 + 40);
    }
    else {
      uint64_t v22 = *(const void **)(a1 + 40);
    }
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, "_running_mean");
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, v49))
  {
    std::operator+<char>();
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v23 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, v49);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  else
  {
    uint64_t v24 = 0;
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, (const void **)v47))
  {
    std::operator+<char>();
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v25 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, (const void **)v47);
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
  }
  else
  {
    uint64_t v26 = 0;
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, (const void **)v45))
  {
    std::operator+<char>();
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v27 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, (const void **)v45);
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a5, (const void **)v43))
  {
    std::operator+<char>();
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v29 = std::map<std::string,turi::neural_net::shared_float_array>::at(a5, (const void **)v43);
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 16))(v29);
  }
  else
  {
    uint64_t v30 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_norm_epsilon");
  float array_map_scalar = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, 0.00001);
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  id v32 = [TCMPSBatchNormWeights alloc];
  uint64_t v33 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v32;

  id v34 = *(id *)(a1 + 160);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v12 = (void *)*v12;
  }
  turi::neural_net::get_array_map_optimizer_options(a4, (uint64_t)v40);
  *(float *)&double v35 = array_map_scalar;
  uint64_t v36 = objc_msgSend(v34, "initWithChannels:kernelParamsBinaryName:device:cmd_queue:gamma:beta:moving_avg:moving_var:optimizerOptions:batchNormEpsilon:", v9, v12, v39, v38, v24, v26, v35, v30, v28, v40);
  long long v37 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v36;

  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (v50 < 0) {
    operator delete((void *)v49[0]);
  }
}

void sub_223DBF4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }

  _Unwind_Resume(a1);
}

void turi::neural_net::BNGraphLayer::Export(turi::neural_net::BNGraphLayer *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  if (*((char *)this + 63) >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 63);
  }
  else {
    size_t v4 = *((void *)this + 6);
  }
  uint64_t v5 = v63;
  std::string::basic_string[abi:ne180100]((uint64_t)v63, v4 + 6);
  if (v64 < 0) {
    uint64_t v5 = (const void **)v63[0];
  }
  if (v4)
  {
    if (*((char *)this + 63) >= 0) {
      uint64_t v6 = (char *)this + 40;
    }
    else {
      uint64_t v6 = (char *)*((void *)this + 5);
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "_gamma");
  if (*((char *)this + 63) >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 63);
  }
  else {
    size_t v7 = *((void *)this + 6);
  }
  uint64_t v8 = v61;
  std::string::basic_string[abi:ne180100]((uint64_t)v61, v7 + 5);
  if (v62 < 0) {
    uint64_t v8 = (const void **)v61[0];
  }
  if (v7)
  {
    if (*((char *)this + 63) >= 0) {
      uint64_t v9 = (char *)this + 40;
    }
    else {
      uint64_t v9 = (char *)*((void *)this + 5);
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "_beta");
  if (*((char *)this + 63) >= 0) {
    size_t v10 = *((unsigned __int8 *)this + 63);
  }
  else {
    size_t v10 = *((void *)this + 6);
  }
  uint64_t v11 = v59;
  std::string::basic_string[abi:ne180100]((uint64_t)v59, v10 + 12);
  if (v60 < 0) {
    uint64_t v11 = (const void **)v59[0];
  }
  if (v10)
  {
    if (*((char *)this + 63) >= 0) {
      uint64_t v12 = (char *)this + 40;
    }
    else {
      uint64_t v12 = (char *)*((void *)this + 5);
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "_running_var");
  if (*((char *)this + 63) >= 0) {
    size_t v13 = *((unsigned __int8 *)this + 63);
  }
  else {
    size_t v13 = *((void *)this + 6);
  }
  size_t v14 = v57;
  std::string::basic_string[abi:ne180100]((uint64_t)v57, v13 + 13);
  if (v58 < 0) {
    size_t v14 = (void **)v57[0];
  }
  if (v13)
  {
    if (*((char *)this + 63) >= 0) {
      unint64_t v15 = (char *)this + 40;
    }
    else {
      unint64_t v15 = (char *)*((void *)this + 5);
    }
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_running_mean");
  uint64_t v16 = *(int *)(*((void *)this + 14) + 12);
  [*((id *)this + 20) load];
  uint64_t v17 = [*((id *)this + 20) gamma];
  size_t v18 = operator new(8uLL);
  std::string __p = v18;
  *size_t v18 = v16;
  long long v51 = v18 + 1;
  long long v52 = v18 + 1;
  turi::neural_net::shared_float_array::copy(v17, (uint64_t)&__p, (uint64_t)&v53);
  int8x16_t v65 = v63;
  long long v19 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v63, (uint64_t)&std::piecewise_construct, (long long **)&v65);
  long long v20 = v54;
  long long v54 = 0uLL;
  uint64_t v21 = (std::__shared_weak_count *)v19[9];
  *((_OWORD *)v19 + 4) = v20;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v54 + 1);
  }
  long long v22 = v56;
  *((_OWORD *)v19 + 5) = v55;
  *((_OWORD *)v19 + 6) = v22;
  long long v53 = &unk_26D752D58;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (__p)
  {
    long long v51 = __p;
    operator delete(__p);
  }
  uint64_t v23 = [*((id *)this + 20) beta];
  uint64_t v24 = operator new(8uLL);
  long long v47 = v24;
  *uint64_t v24 = v16;
  char v48 = v24 + 1;
  long long v49 = v24 + 1;
  turi::neural_net::shared_float_array::copy(v23, (uint64_t)&v47, (uint64_t)&v53);
  int8x16_t v65 = v61;
  uint64_t v25 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v61, (uint64_t)&std::piecewise_construct, (long long **)&v65);
  long long v26 = v54;
  long long v54 = 0uLL;
  uint64_t v27 = (std::__shared_weak_count *)v25[9];
  *((_OWORD *)v25 + 4) = v26;
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    uint64_t v27 = (std::__shared_weak_count *)*((void *)&v54 + 1);
  }
  long long v28 = v56;
  *((_OWORD *)v25 + 5) = v55;
  *((_OWORD *)v25 + 6) = v28;
  long long v53 = &unk_26D752D58;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v47)
  {
    char v48 = v47;
    operator delete(v47);
  }
  uint64_t v29 = [*((id *)this + 20) variance];
  uint64_t v30 = operator new(8uLL);
  char v44 = v30;
  void *v30 = v16;
  int v45 = v30 + 1;
  char v46 = v30 + 1;
  turi::neural_net::shared_float_array::copy(v29, (uint64_t)&v44, (uint64_t)&v53);
  int8x16_t v65 = v59;
  std::runtime_error v31 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v59, (uint64_t)&std::piecewise_construct, (long long **)&v65);
  long long v32 = v54;
  long long v54 = 0uLL;
  uint64_t v33 = (std::__shared_weak_count *)v31[9];
  *((_OWORD *)v31 + 4) = v32;
  if (v33)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v54 + 1);
  }
  long long v34 = v56;
  *((_OWORD *)v31 + 5) = v55;
  *((_OWORD *)v31 + 6) = v34;
  long long v53 = &unk_26D752D58;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v44)
  {
    int v45 = v44;
    operator delete(v44);
  }
  uint64_t v35 = [*((id *)this + 20) mean];
  uint64_t v36 = operator new(8uLL);
  uint64_t v41 = v36;
  void *v36 = v16;
  uint64_t v42 = v36 + 1;
  char v43 = v36 + 1;
  turi::neural_net::shared_float_array::copy(v35, (uint64_t)&v41, (uint64_t)&v53);
  int8x16_t v65 = (const void **)v57;
  long long v37 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v57, (uint64_t)&std::piecewise_construct, (long long **)&v65);
  long long v38 = v54;
  long long v54 = 0uLL;
  id v39 = (std::__shared_weak_count *)v37[9];
  *((_OWORD *)v37 + 4) = v38;
  if (v39)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    id v39 = (std::__shared_weak_count *)*((void *)&v54 + 1);
  }
  long long v40 = v56;
  *((_OWORD *)v37 + 5) = v55;
  *((_OWORD *)v37 + 6) = v40;
  long long v53 = &unk_26D752D58;
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete((void *)v59[0]);
  }
  if (v62 < 0) {
    operator delete((void *)v61[0]);
  }
  if (v64 < 0) {
    operator delete((void *)v63[0]);
  }
}

void sub_223DBFB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v35 - 113) < 0) {
    operator delete(*(void **)(v35 - 136));
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v34, *(void **)(v34 + 8));
  _Unwind_Resume(a1);
}

void sub_223DBFCAC()
{
}

void sub_223DBFCB4()
{
}

void sub_223DBFCBC()
{
}

void sub_223DBFCC4()
{
}

void turi::neural_net::BNGraphLayer::InitFwd(turi::neural_net::BNGraphLayer *this, MPSNNImageNode *a2)
{
  size_t v7 = a2;
  uint64_t v3 = objc_msgSend(MEMORY[0x263F130F8], "nodeWithSource:dataSource:");
  size_t v4 = (void *)*((void *)this + 21);
  *((void *)this + 21) = v3;

  uint64_t v5 = [*((id *)this + 21) resultImage];
  uint64_t v6 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v5;
}

void sub_223DBFD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::BNGraphLayer::InitBwd(turi::neural_net::BNGraphLayer *this, MPSNNImageNode *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  size_t v4 = (void *)*((void *)this + 21);
  v10[0] = v3;
  uint64_t v5 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:1];
  uint64_t v6 = [v4 gradientFilterWithSources:v5];
  size_t v7 = (void *)*((void *)this + 22);
  *((void *)this + 22) = v6;

  uint64_t v8 = [*((id *)this + 22) resultImage];
  uint64_t v9 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v8;
}

void sub_223DBFE28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::BNGraphLayer::SetLearningRate(id *this, float a2)
{
  return objc_msgSend(this[20], "setLearningRate:");
}

void *turi::neural_net::YoloLossGraphLayer::GetDefaultAnchorBoxes@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, &turi::neural_net::YoloLossGraphLayer::GetDefaultAnchorBoxes(void)::default_anchor_boxes, (uint64_t)&xmmword_2246B8090, 0xFuLL);
}

uint64_t turi::neural_net::YoloLossGraphLayer::YoloLossGraphLayer(uint64_t a1, long long *a2, __n128 *a3, __n128 *a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v10 = a1 + 40;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 168) = 0;
  uint64_t v11 = a1 + 168;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)a1 = &unk_26D753230;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 168), &turi::neural_net::YoloLossGraphLayer::GetDefaultAnchorBoxes(void)::default_anchor_boxes, (uint64_t)&xmmword_2246B8090, 0xFuLL);
  *(_OWORD *)(a1 + 192) = xmmword_2246B8000;
  *(void *)(a1 + 208) = 0x3F33333340000000;
  *(_DWORD *)(a1 + 216) = 1050253722;
  *(unsigned char *)(a1 + 220) = 1;
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)v10);
  }
  long long v12 = *a2;
  *(void *)(v10 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v10 = v12;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 112, a3);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 136, a4);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(v11, (__n128 *)a5);
  long long v13 = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a5 + 37);
  *(_OWORD *)(a1 + 192) = v13;
  return a1;
}

void sub_223DBFFC8(_Unwind_Exception *a1)
{
  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::YoloLossGraphLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v30 = a2;
  id v29 = a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "od_anchors");
  uint64_t v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a4, (const void **)__p);
  uint64_t v8 = v7;
  if (v32 < 0)
  {
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_31;
    }
  }
  else if (!v7)
  {
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_anchors");
  uint64_t v9 = std::map<std::string,turi::neural_net::shared_float_array>::at(a4, (const void **)__p);
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  if (v10) {
    BOOL v12 = (v10 & 1) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    size_t v14 = (char **)(a1 + 168);
    long long v13 = *(char **)(a1 + 168);
    *(void *)(a1 + 176) = v13;
    if (v10 >= 2)
    {
      uint64_t v15 = v11;
      uint64_t v16 = 0;
      unint64_t v17 = v10 >> 1;
      size_t v18 = (void *)(a1 + 184);
      do
      {
        uint64_t v19 = *(void *)(v15 + 8 * v16);
        if ((unint64_t)v13 >= *v18)
        {
          uint64_t v20 = (v13 - *v14) >> 3;
          if ((unint64_t)(v20 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = *v18 - (void)*v14;
          uint64_t v22 = v21 >> 2;
          if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23) {
            uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 184, v23);
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = &v24[8 * v20];
          *(void *)uint64_t v25 = v19;
          long long v13 = v25 + 8;
          uint64_t v27 = *(char **)(a1 + 168);
          long long v26 = *(char **)(a1 + 176);
          if (v26 != v27)
          {
            do
            {
              uint64_t v28 = *((void *)v26 - 1);
              v26 -= 8;
              *((void *)v25 - 1) = v28;
              v25 -= 8;
            }
            while (v26 != v27);
            long long v26 = *v14;
          }
          *(void *)(a1 + 168) = v25;
          *(void *)(a1 + 176) = v13;
          *(void *)(a1 + 184) = &v24[8 * v23];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(void *)long long v13 = v19;
          v13 += 8;
        }
        *(void *)(a1 + 176) = v13;
        ++v16;
      }
      while (v16 != v17);
    }
  }
LABEL_31:
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_xy");
  *(float *)(a1 + 192) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 192));
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_wh");
  *(float *)(a1 + 196) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 196));
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_no_object");
  *(float *)(a1 + 200) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 200));
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_object");
  *(float *)(a1 + 204) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 204));
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_scale_class");
  *(float *)(a1 + 208) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 208));
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_max_iou_for_no_object");
  *(float *)(a1 + 216) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 216));
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_min_iou_for_object");
  *(float *)(a1 + 212) = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, *(float *)(a1 + 212));
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "od_rescore");
  *(unsigned char *)(a1 + 220) = turi::neural_net::get_array_map_BOOL(a4, (const void **)__p, *(unsigned __int8 *)(a1 + 220));
  if (v32 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223DC03B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::YoloLossGraphLayer::InitFwd(turi::neural_net::YoloLossGraphLayer *this, MPSNNImageNode *a2)
{
  uint64_t v20 = a2;
  uint64_t v3 = *((void *)this + 22) - *((void *)this + 21);
  size_t v4 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:");
  uint64_t v5 = [MEMORY[0x263F131E8] cnnLossDescriptorWithXYLossType:1 WHLossType:6 confidenceLossType:3 classesLossType:2 reductionType:1 anchorBoxes:v4 numberOfAnchorBoxes:v3 >> 3];
  int v6 = **((_DWORD **)this + 17);
  [v5 setRescore:*((unsigned __int8 *)this + 220)];
  LODWORD(v7) = *((_DWORD *)this + 48);
  [v5 setScaleXY:v7];
  LODWORD(v8) = *((_DWORD *)this + 49);
  [v5 setScaleWH:v8];
  *(float *)&double v9 = *((float *)this + 50) / (float)v6;
  [v5 setScaleNoObject:v9];
  *(float *)&double v10 = *((float *)this + 51) / (float)v6;
  [v5 setScaleObject:v10];
  LODWORD(v11) = *((_DWORD *)this + 52);
  [v5 setScaleClass:v11];
  LODWORD(v12) = *((_DWORD *)this + 53);
  [v5 setMinIOUForObjectPresence:v12];
  LODWORD(v13) = *((_DWORD *)this + 54);
  [v5 setMaxIOUForObjectAbsence:v13];
  uint64_t v14 = [MEMORY[0x263F131F0] nodeWithSource:v20 lossDescriptor:v5];
  uint64_t v15 = (void *)*((void *)this + 28);
  *((void *)this + 28) = v14;

  uint64_t v16 = [*((id *)this + 28) inputLabels];
  unint64_t v17 = (void *)*((void *)this + 20);
  *((void *)this + 20) = v16;

  uint64_t v18 = [*((id *)this + 28) resultImage];
  uint64_t v19 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v18;
}

void sub_223DC05B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::YoloLossGraphLayer::InitBwd(id *this, MPSNNImageNode *a2)
{
}

id turi::neural_net::YoloLossGraphLayer::CreateLossState(uint64_t a1, void *a2, uint64_t a3)
{
  id v20 = a2;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  int v6 = *(int **)(a1 + 136);
  uint64_t v7 = *v6;
  if ((int)v7 < 1)
  {
    unint64_t v17 = (void *)MEMORY[0x263EFFA68];
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6[2];
    uint64_t v10 = v6[3];
    uint64_t v19 = v6[1];
    uint64_t v11 = 4 * (int)v9 * (uint64_t)(int)v19 * v10;
    double v12 = (void *)MEMORY[0x263EFFA68];
    do
    {
      double v13 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v8, v11, v19);
      v23[0] = v9;
      v23[1] = v19;
      void v23[2] = v10;
      uint64_t v14 = [MEMORY[0x263F13160] cnnLossDataDescriptorWithData:v13 layout:0 size:v23];
      id v15 = objc_alloc(MEMORY[0x263F13170]);
      long long v21 = xmmword_2246B8090;
      uint64_t v22 = 1;
      uint64_t v16 = (void *)[v15 initWithDevice:v20 lossImageSize:&v21 labelsDescriptor:v14 weightsDescriptor:0];
      unint64_t v17 = [v12 arrayByAddingObject:v16];

      v8 += v11;
      double v12 = v17;
      --v7;
    }
    while (v7);
  }

  return v17;
}

void sub_223DC0780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::GraphLayer::Export(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

void turi::neural_net::ReLUGraphLayer::~ReLUGraphLayer(id *this)
{
  turi::neural_net::ReLUGraphLayer::~ReLUGraphLayer(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t vars8;

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
}

void turi::neural_net::ConvGraphLayer::~ConvGraphLayer(id *this)
{
  turi::neural_net::ConvGraphLayer::~ConvGraphLayer(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t vars8;

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
}

void turi::neural_net::BNGraphLayer::~BNGraphLayer(id *this)
{
  turi::neural_net::BNGraphLayer::~BNGraphLayer(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t vars8;

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
}

void turi::neural_net::YoloLossGraphLayer::~YoloLossGraphLayer(id *this)
{
  *this = &unk_26D753230;

  id v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
}

{
  id v2;
  uint64_t vars8;

  *this = &unk_26D753230;

  id v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }

  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)this);
  JUMPOUT(0x22A614FA0);
}

__n128 _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(uint64_t a1, __n128 *a2)
{
  size_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void turi::neural_net::GraphLayer::~GraphLayer(turi::neural_net::GraphLayer *this)
{
  *(void *)this = &unk_26D753468;
  id v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  size_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2646D6748, MEMORY[0x263F8C068]);
}

void sub_223DC0BA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void turi::neural_net::createNetworkGraph(int a1@<W0>, void *a2@<X8>)
{
  *a2 = 0;
  switch(a1)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    default:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Undefined network.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
}

void sub_223DC0E0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

void turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(turi::neural_net::MPSGraphNetwork *this)
{
  *(void *)this = &unk_26D7534B8;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
        uint64_t v3 = *((void *)this + 1);
        uint64_t v2 = *((void *)this + 2);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }

  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
}

{
  uint64_t vars8;

  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(this);
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MPSGraphNetwork::Init(uint64_t a1, void *a2, void *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  id v38 = a2;
  id v11 = a3;
  uint64_t v12 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v12)
  {
    unint64_t v13 = 0;
    do
    {
      (***(void (****)(void, id, id, uint64_t, uint64_t))(v12 + 8 * v13))(*(void *)(v12 + 8 * v13), v38, v11, a5, a6);
      ++v13;
      uint64_t v12 = *(void *)(a1 + 8);
    }
    while (v13 < (*(void *)(a1 + 16) - v12) >> 3);
  }
  uint64_t v14 = (void *)MEMORY[0x263F13380];
  id v15 = +[TCMPSGraphNodeHandle handleWithLabel:@"input"];
  uint64_t v16 = [v14 nodeWithHandle:v15];
  unint64_t v17 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v16;

  id v18 = *(id *)(a1 + 56);
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v20)
  {
    id v22 = v18;
  }
  else
  {
    unint64_t v21 = 0;
    do
    {
      (*(void (**)(void, void *))(**(void **)(v20 + 8 * v21) + 8))(*(void *)(v20 + 8 * v21), v19);
      id v22 = *(id *)(*(void *)(*(void *)(a1 + 8) + 8 * v21) + 16);

      ++v21;
      uint64_t v20 = *(void *)(a1 + 8);
      uint64_t v19 = v22;
    }
    while (v21 < (*(void *)(a1 + 16) - v20) >> 3);
  }
  if (a4 >= 2)
  {
    uint64_t v27 = [objc_alloc(MEMORY[0x263F13378]) initWithDevice:v38 resultImage:*(void *)(*(void *)(*(void *)(a1 + 16) - 8) + 16) resultImageIsNeeded:1];
  }
  else
  {
    unint64_t v23 = *(void (****)(void, id, id, uint64_t, uint64_t))(a1 + 32);
    if (v23)
    {
      (**v23)(v23, v38, v11, a5, a6);
      uint64_t v24 = +[TCMPSGraphNodeHandle handleWithLabel:@"labels"];
      [*(id *)(*(void *)(a1 + 32) + 160) setHandle:v24];

      (*(void (**)(void, id))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), v22);
      id v25 = *(id *)(*(void *)(a1 + 32) + 16);

      (*(void (**)(void, id))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v25);
      long long v26 = (id *)(*(void *)(a1 + 32) + 24);
    }
    else
    {
      uint64_t v28 = (void *)MEMORY[0x263F13380];
      id v29 = +[TCMPSGraphNodeHandle handleWithLabel:@"grad"];
      uint64_t v30 = [v28 nodeWithHandle:v29];
      long long v26 = (id *)(a1 + 64);
      std::runtime_error v31 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v30;

      id v25 = v22;
    }
    id v32 = *v26;

    unint64_t v33 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
    if (v33 && (int)(v33 >> 3) >= 1)
    {
      unint64_t v34 = (v33 >> 3) + 1;
      do
      {
        uint64_t v35 = (v34 - 2);
        uint64_t v36 = *(void *)(*(void *)(a1 + 8) + 8 * v35);
        (*(void (**)(uint64_t, id))(*(void *)v36 + 16))(v36, v32);
        id v22 = *(id *)(*(void *)(*(void *)(a1 + 8) + 8 * v35) + 24);

        --v34;
        id v32 = v22;
      }
      while (v34 > 1);
    }
    else
    {
      id v22 = v32;
    }
    uint64_t v27 = [objc_alloc(MEMORY[0x263F13378]) initWithDevice:v38 resultImage:*(void *)(**(void **)(a1 + 8) + 24) resultImageIsNeeded:a4 == 1];
  }
  long long v37 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v27;
}

void sub_223DC1358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::MPSGraphNetwork::RunGraph(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = 0;
  for (uint64_t i = (void *)MEMORY[0x263EFFA68]; ; uint64_t i = (void *)v16)
  {
    uint64_t v9 = [*(id *)(a1 + 48) sourceImageHandles];
    unint64_t v10 = [v9 count];

    id v11 = *(void **)(a1 + 48);
    if (v7 >= v10) {
      break;
    }
    uint64_t v12 = [v11 sourceImageHandles];
    unint64_t v13 = [v12 objectAtIndexedSubscript:v7];
    uint64_t v14 = [v13 label];
    id v15 = [v6 objectForKey:v14];
    uint64_t v16 = [i arrayByAddingObject:v15];

    ++v7;
  }
  unint64_t v17 = [v11 encodeBatchToCommandBuffer:v5 sourceImages:i sourceStates:0 intermediateImages:0 destinationStates:0];

  return v17;
}

void sub_223DC14E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::MPSGraphNetwork::RunGraph(uint64_t a1, void *a2, void *a3, void *a4)
{
  v16[1] = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  unint64_t v10 = *(void **)(a1 + 48);
  v16[0] = v8;
  id v11 = [MEMORY[0x263EFF8C0] arrayWithObjects:v16 count:1];
  id v15 = v9;
  uint64_t v12 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v15 count:1];
  unint64_t v13 = [v10 encodeBatchToCommandBuffer:v7 sourceImages:v11 sourceStates:v12 intermediateImages:0 destinationStates:0];

  return v13;
}

void sub_223DC1644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::MPSGraphNetwork::Export(turi::neural_net::MPSGraphNetwork *this@<X0>, uint64_t *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  uint64_t v3 = *((void *)this + 1);
  if (*((void *)this + 2) != v3)
  {
    unint64_t v5 = 0;
    do
    {
      (*(void (**)(const void ***__return_ptr))(**(void **)(v3 + 8 * v5) + 40))(&v6);
      std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(a2, v6, &v7);
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v6, v7);
      ++v5;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v5 < (*((void *)this + 2) - v3) >> 3);
  }
}

void sub_223DC1730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v11, *(void **)(v11 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleReLUNetworkGraph::SingleReLUNetworkGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26D7534E8;
  std::string::basic_string[abi:ne180100]<0>(v5, "single_relu_leak");
  turi::neural_net::get_array_map_scalar(a3, v5, 0.0);
  if (v6 < 0) {
    operator delete((void *)v5[0]);
  }
  std::vector<turi::neural_net::GraphLayer *>::resize(v4, 1uLL);
  operator new();
}

void sub_223DC1904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C40F449FE22);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v18);
  _Unwind_Resume(a1);
}

void std::vector<turi::neural_net::GraphLayer *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<turi::neural_net::GraphLayer *>::__append((void **)a1, a2 - v2);
  }
}

void turi::neural_net::SingleReLUNetworkGraph::~SingleReLUNetworkGraph(turi::neural_net::SingleReLUNetworkGraph *this)
{
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(this);
  JUMPOUT(0x22A614FA0);
}

void std::vector<turi::neural_net::GraphLayer *>::__append(void **a1, unint64_t a2)
{
  char v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    id v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    id v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t turi::neural_net::ReLUGraphLayer::ReLUGraphLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)a1 = &unk_26D753288;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (a1 + 88 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 88), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  unint64_t v9 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  if (a1 + 112 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 112), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 136 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 136), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DC1C20(_Unwind_Exception *a1)
{
  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  id v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *id v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      id v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    id v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void turi::neural_net::SingleConvNetworkGraph::SingleConvNetworkGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26D753520;
  std::string::basic_string[abi:ne180100]<0>(v5, "single_conv_kernel_size");
  turi::neural_net::get_array_map_scalar(a3, v5, 3.0);
  if (v6 < 0) {
    operator delete((void *)v5[0]);
  }
  std::vector<turi::neural_net::GraphLayer *>::resize(v4, 1uLL);
  operator new();
}

void sub_223DC1F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C4026654831);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::ConvGraphLayer::ConvGraphLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)a1 = &unk_26D753300;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 32) = 2;
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (a1 + 64 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 64), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  unint64_t v9 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  if (a1 + 112 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 112), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 136 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 136), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DC20C4(_Unwind_Exception *a1)
{
  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleMPNetworkGraph::SingleMPNetworkGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26D753558;
  std::vector<turi::neural_net::GraphLayer *>::resize(a1 + 8, 1uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "single_maxpool_kernel_size");
  turi::neural_net::get_array_map_scalar(a3, (const void **)__p, 2.0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "single_maxpool_stride");
  turi::neural_net::get_array_map_scalar(a3, (const void **)__p, 2.0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_223DC22F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  MEMORY[0x22A614FA0](v26, 0x1093C40F449FE22);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v25);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MaxPoolGraphLayer::MaxPoolGraphLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)a1 = &unk_26D7533D0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 32) = 4;
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (a1 + 64 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 64), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  unint64_t v9 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  if (a1 + 112 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 112), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 136 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 136), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DC249C(_Unwind_Exception *a1)
{
  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleBNNetworkGraph::SingleBNNetworkGraph(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26D753590;
  std::vector<turi::neural_net::GraphLayer *>::resize(a1 + 8, 1uLL);
  operator new();
}

void sub_223DC2634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C4025DAB825);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::BNGraphLayer::BNGraphLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)a1 = &unk_26D753368;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 32) = 3;
  std::string::operator=((std::string *)(a1 + 40), a2);
  if (a1 + 64 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 64), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  if (a1 + 112 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 112), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 136 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 136), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DC27AC(_Unwind_Exception *a1)
{
  turi::neural_net::GraphLayer::~GraphLayer((turi::neural_net::GraphLayer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::ODNetworkGraph::ODNetworkGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26D7535C8;
  std::string::basic_string[abi:ne180100]<0>(&v6, "od_include_network");
  BOOL array_map_BOOL = turi::neural_net::get_array_map_BOOL(a3, (const void **)&v6.__r_.__value_.__l.__data_, 1);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "od_include_loss");
  turi::neural_net::get_array_map_BOOL(a3, (const void **)&v6.__r_.__value_.__l.__data_, 1);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if (array_map_BOOL)
    {
LABEL_5:
      char v5 = operator new(0x24uLL);
      v5[8] = 1024;
      *(_OWORD *)char v5 = xmmword_2246B82B4;
      *((_OWORD *)v5 + 1) = unk_2246B82C4;
      std::to_string(&v6, 0);
      operator new();
    }
  }
  else if (array_map_BOOL)
  {
    goto LABEL_5;
  }
  operator new();
}

void sub_223DC3590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37)
{
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  MEMORY[0x22A614FA0](v39, 0x1093C4026654831);
  operator delete(v38);
  turi::neural_net::MPSGraphNetwork::~MPSGraphNetwork(v37);
  _Unwind_Resume(a1);
}

void sub_223DC3CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_223DC3F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_223DC40F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_223DC4978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_223DC4B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DC4BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DC4C98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DC4D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DC4DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DC4EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DC528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_223DC54A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223DC5538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223DC56FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DC5804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DC59A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ReLULayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  objc_storeStrong((id *)(a1 + 8), a2);
  unint64_t v9 = *(void **)(a1 + 168);
  id v14 = 0;
  uint64_t v10 = [v9 encodeBatchToCommandBuffer:v7 sourceImages:v6 destinationStates:&v14 destinationStateIsTemporary:0];
  id v11 = v14;
  unint64_t v12 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;

  unint64_t v13 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v11;
}

void sub_223DC5B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ReLULayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(a1 + 176) encodeBatchToCommandBuffer:v5 sourceGradients:v8 sourceImages:*(void *)(a1 + 8) gradientStates:*(void *)(a1 + 32)];
  id v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v6;
}

void sub_223DC5C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ReLULayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  id v22 = a2;
  int v11 = **(_DWORD **)(a1 + 96);
  LODWORD(v12) = v11;
  unint64_t v13 = [MEMORY[0x263F13398] cnnNeuronDescriptorWithType:1 a:v12];
  id v14 = objc_alloc(MEMORY[0x263F13188]);
  LODWORD(v15) = v11;
  uint64_t v16 = [v14 initWithDevice:v22 a:v15];
  size_t v17 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v16;

  if (a6 == 2 || a7)
  {
    id v18 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 168) setDestinationImageAllocator:v18];

    if (!a5) {
      goto LABEL_8;
    }
  }
  else if (!a5)
  {
    goto LABEL_8;
  }
  uint64_t v19 = [objc_alloc(MEMORY[0x263F13180]) initWithDevice:v22 neuronDescriptor:v13];
  uint64_t v20 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v19;

  if (a6 == 2)
  {
    unint64_t v21 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 176) setDestinationImageAllocator:v21];
  }
LABEL_8:
}

void sub_223DC5D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  objc_storeStrong((id *)(a1 + 8), a2);
  unint64_t v9 = *(void **)(a1 + 176);
  id v14 = 0;
  uint64_t v10 = [v9 encodeBatchToCommandBuffer:v7 sourceImages:v6 destinationStates:&v14 destinationStateIsTemporary:0];
  id v11 = v14;
  double v12 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;

  unint64_t v13 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v11;
}

void sub_223DC5E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(a1 + 184) encodeBatchToCommandBuffer:v5 sourceGradients:v8 sourceImages:*(void *)(a1 + 8) gradientStates:*(void *)(a1 + 32)];
  id v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v6;
}

void sub_223DC5EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, int a6, int a7)
{
  id v36 = a2;
  id v35 = a3;
  uint64_t v10 = *(int **)(a1 + 72);
  uint64_t v11 = v10[1];
  uint64_t v32 = *v10;
  uint64_t v13 = v10[2];
  uint64_t v12 = v10[3];
  uint64_t v15 = v10[4];
  uint64_t v14 = v10[5];
  int v34 = v10[6];
  *(unsigned char *)(a1 + 168) = v10[7] > 0;
  uint64_t v16 = [TCMPSConvolutionWeights alloc];
  size_t v17 = *(void **)(a1 + 200);
  *(void *)(a1 + 200) = v16;

  id v18 = *(id *)(a1 + 200);
  uint64_t v19 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v19 = (void *)*v19;
  }
  turi::neural_net::get_array_map_optimizer_options(a4, (uint64_t)v37);
  uint64_t v20 = objc_msgSend(v18, "initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:neuronType:strideX:strideY:neuronA:neuronB:kernelParamsBinaryName:device:cmd_queue:init_weight_ptr:init_bias_ptr:optimizerOptions:", v11, v32, v13, v12, 0, v15, 0.0, 0.0, v14, v19, v36, v35, 0, 0, v37);
  unint64_t v21 = *(void **)(a1 + 200);
  *(void *)(a1 + 200) = v20;

  uint64_t v22 = [objc_alloc(MEMORY[0x263F13110]) initWithDevice:v36 weights:*(void *)(a1 + 200)];
  unint64_t v23 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v22;

  uint64_t v24 = turi::neural_net::Layer::SetPaddingType(a1, v34);
  [*(id *)(a1 + 176) setPadding:v24];

  if (a6 == 2 || a7)
  {
    id v25 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 176) setDestinationImageAllocator:v25];
  }
  if (a5)
  {
    uint64_t v26 = [objc_alloc(MEMORY[0x263F13120]) initWithDevice:v36 weights:*(void *)(a1 + 200)];
    uint64_t v27 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = v26;

    if (a6 == 2)
    {
      uint64_t v28 = [[TCMPSImageAllocator alloc] initWithFormat:4];
      [*(id *)(a1 + 184) setDestinationImageAllocator:v28];
    }
    id v29 = turi::neural_net::Layer::SetPaddingType(a1, v34);
    [*(id *)(a1 + 184) setPadding:v29];
  }
}

void sub_223DC6144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::Layer::SetPaddingType(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 != 1)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Undefined padding type");
      __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
    }
    unint64_t v2 = &turi::neural_net::VALID;
  }
  else
  {
    unint64_t v2 = &turi::neural_net::SAME;
  }
  uint64_t v3 = (void *)*v2;
  return v3;
}

void sub_223DC6200(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Load(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void *)(a1 + 48);
  if (*(char *)(a1 + 71) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v5 = *(void *)(a1 + 56);
  }
  uint64_t v6 = v19;
  std::string::basic_string[abi:ne180100]((uint64_t)v19, v5 + 7);
  if (v20 < 0) {
    uint64_t v6 = (void **)v19[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0) {
      id v7 = v4;
    }
    else {
      id v7 = *(const void **)(a1 + 48);
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_weight");
  if (*(char *)(a1 + 71) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v8 = *(void *)(a1 + 56);
  }
  unint64_t v9 = v17;
  std::string::basic_string[abi:ne180100]((uint64_t)v17, v8 + 5);
  if (v18 < 0) {
    unint64_t v9 = (void **)v17[0];
  }
  if (v8)
  {
    if (*(char *)(a1 + 71) >= 0) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = *(const void **)(a1 + 48);
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_bias");
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v19))
  {
    std::operator+<char>();
    if (v16 < 0) {
      operator delete(__p);
    }
    uint64_t v11 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v19);
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
    operator new[]();
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v17))
  {
    std::operator+<char>();
    if (v16 < 0) {
      operator delete(__p);
    }
    uint64_t v12 = *(void **)(a1 + 200);
    uint64_t v13 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v17);
    [v12 loadBias:(*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13)];
  }
  [*(id *)(a1 + 176) reloadWeightsAndBiasesFromDataSource];
  uint64_t v14 = *(void **)(a1 + 184);
  if (v14) {
    [v14 reloadWeightsAndBiasesFromDataSource];
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

void sub_223DC64D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::ConvLayer::Export(turi::neural_net::ConvLayer *this@<X0>, uint64_t a2@<X8>)
{
  v46[4] = *MEMORY[0x263EF8340];
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v4 = (int *)*((void *)this + 9);
  unint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  unint64_t v7 = v4[2];
  unint64_t v8 = v4[3];
  if ([*((id *)this + 25) load])
  {
    if (*((char *)this + 71) >= 0) {
      size_t v9 = *((unsigned __int8 *)this + 71);
    }
    else {
      size_t v9 = *((void *)this + 7);
    }
    uint64_t v10 = v43;
    std::string::basic_string[abi:ne180100]((uint64_t)v43, v9 + 7);
    if (v44 < 0) {
      uint64_t v10 = (const void **)v43[0];
    }
    if (v9)
    {
      if (*((char *)this + 71) >= 0) {
        uint64_t v11 = (char *)this + 48;
      }
      else {
        uint64_t v11 = (char *)*((void *)this + 6);
      }
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "_weight");
    std::vector<float>::vector(&v41, (int)v6 * (uint64_t)(int)v5 * v7 * v8);
    v46[0] = v8;
    v46[1] = v5;
    v46[2] = v6;
    v46[3] = v7;
    turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)&v37, (const float *)[*((id *)this + 25) weights], (int)v6 * (uint64_t)(int)v5 * v7 * v8, v46, 4uLL);
    turi::neural_net::convert_hwc_to_chw((uint64_t *)&v37, v41);
    *(_OWORD *)id v35 = v41;
    uint64_t v36 = v42;
    long long v41 = 0uLL;
    uint64_t v42 = 0;
    uint64_t v12 = operator new(0x20uLL);
    unint64_t v33 = v12 + 4;
    int v34 = v12 + 4;
    *uint64_t v12 = v8;
    v12[1] = v7;
    v12[2] = v5;
    v12[3] = v6;
    std::string __p = v12;
    turi::neural_net::shared_float_array::wrap((uint64_t)v35, (uint64_t)&__p, (uint64_t)&v37);
    v30[0] = v43;
    uint64_t v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v43, (uint64_t)&std::piecewise_construct, (long long **)v30);
    long long v14 = v38;
    long long v38 = 0uLL;
    uint64_t v15 = (std::__shared_weak_count *)v13[9];
    *((_OWORD *)v13 + 4) = v14;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)&v38 + 1);
    }
    long long v16 = v40;
    *((_OWORD *)v13 + 5) = v39;
    *((_OWORD *)v13 + 6) = v16;
    long long v37 = &unk_26D752D58;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (__p)
    {
      unint64_t v33 = __p;
      operator delete(__p);
    }
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
    if (*((char *)this + 71) >= 0) {
      size_t v17 = *((unsigned __int8 *)this + 71);
    }
    else {
      size_t v17 = *((void *)this + 7);
    }
    char v18 = v30;
    std::string::basic_string[abi:ne180100]((uint64_t)v30, v17 + 5);
    if (v31 < 0) {
      char v18 = (void **)v30[0];
    }
    if (v17)
    {
      if (*((char *)this + 71) >= 0) {
        uint64_t v19 = (char *)this + 48;
      }
      else {
        uint64_t v19 = (char *)*((void *)this + 6);
      }
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "_bias");
    uint64_t v20 = [*((id *)this + 25) biasSize];
    uint64_t v21 = [*((id *)this + 25) biasTerms];
    uint64_t v22 = operator new(8uLL);
    uint64_t v27 = v22;
    *uint64_t v22 = v20;
    uint64_t v28 = v22 + 1;
    id v29 = v22 + 1;
    turi::neural_net::shared_float_array::copy(v21, (uint64_t)&v27, (uint64_t)&v37);
    int v45 = v30;
    unint64_t v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v30, (uint64_t)&std::piecewise_construct, (long long **)&v45);
    long long v24 = v38;
    long long v38 = 0uLL;
    id v25 = (std::__shared_weak_count *)v23[9];
    *((_OWORD *)v23 + 4) = v24;
    if (v25)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      id v25 = (std::__shared_weak_count *)*((void *)&v38 + 1);
    }
    long long v26 = v40;
    *((_OWORD *)v23 + 5) = v39;
    *((_OWORD *)v23 + 6) = v26;
    long long v37 = &unk_26D752D58;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v27)
    {
      uint64_t v28 = v27;
      operator delete(v27);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    if ((void)v41)
    {
      *((void *)&v41 + 1) = v41;
      operator delete((void *)v41);
    }
    if (v44 < 0) {
      operator delete((void *)v43[0]);
    }
  }
}

void sub_223DC68F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a32) {
    operator delete(a32);
  }
  if (*(char *)(v34 - 153) < 0) {
    operator delete(*(void **)(v34 - 176));
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v33, *(void **)(v33 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::GpuUpdate(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v3 = [*(id *)(a1 + 32) objectAtIndexedSubscript:0];
  id v4 = (id)[*(id *)(a1 + 200) updateWithCommandBuffer:v9 gradientState:v3];
  unint64_t v5 = *(void **)(a1 + 176);
  unint64_t v6 = [*(id *)(a1 + 200) state];
  [v5 reloadWeightsAndBiasesWithCommandBuffer:v9 state:v6];

  unint64_t v7 = *(void **)(a1 + 184);
  if (v7)
  {
    unint64_t v8 = [*(id *)(a1 + 200) state];
    [v7 reloadWeightsAndBiasesWithCommandBuffer:v9 state:v8];
  }
}

void sub_223DC6AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ConvLayer::Update(id *this, turi::neural_net::MPSUpdater *a2, uint64_t a3)
{
  id v11 = [this[4] objectAtIndexedSubscript:0];
  id v6 = [v11 gradientForWeights];
  uint64_t v7 = [v6 contents];

  id v8 = [v11 gradientForBiases];
  uint64_t v9 = [v8 contents];

  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 8))(a2, [this[25] weights], v7, objc_msgSend(this[25], "weightSize"), a3, 0);
  if (*((unsigned char *)this + 168)) {
    (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, [this[25] biasTerms], v9, objc_msgSend(this[25], "biasSize"), a3, 1);
  }
  [this[22] reloadWeightsAndBiasesFromDataSource];
  id v10 = this[23];
  if (v10) {
    [v10 reloadWeightsAndBiasesFromDataSource];
  }
}

void sub_223DC6C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::Forward(uint64_t a1, void *a2, void *a3, int a4)
{
  id v17 = a2;
  id v8 = a3;
  if (*(unsigned char *)(a1 + 170))
  {
    uint64_t v9 = (*(void (**)(uint64_t, id, void, void))(*(void *)a1 + 64))(a1, v8, *(void *)(a1 + 192), 0);
    id v10 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v9;
  }
  if (*(unsigned char *)(a1 + 169)) {
    BOOL v11 = a4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    [*(id *)(a1 + 192) encodeBatchToCommandBuffer:v8 sourceImages:v17 destinationImages:*(void *)(a1 + 16)];
  }
  else
  {
    if (!*(unsigned char *)(a1 + 168))
    {
      *(unsigned char *)(a1 + 168) = 1;
      uint64_t v12 = *(void **)(a1 + 192);
      uint64_t v13 = [v17 objectAtIndexedSubscript:0];
      long long v14 = [*(id *)(a1 + 16) objectAtIndexedSubscript:0];
      uint64_t v15 = [v12 resultStateForSourceImage:v13 sourceStates:0 destinationImage:v14];
      long long v16 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v15;
    }
    objc_storeStrong((id *)(a1 + 8), a2);
    [*(id *)(a1 + 184) encodeBatchToCommandBuffer:v8 sourceImages:v17 batchNormalizationState:*(void *)(a1 + 216)];
    [*(id *)(a1 + 192) encodeBatchToCommandBuffer:v8 sourceImages:v17 batchNormalizationState:*(void *)(a1 + 216) destinationImages:*(void *)(a1 + 16)];
  }
}

void sub_223DC6E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (*(unsigned char *)(a1 + 170))
  {
    uint64_t v6 = (*(void (**)(uint64_t, id, void, uint64_t))(*(void *)a1 + 64))(a1, v5, *(void *)(a1 + 200), 1);
    uint64_t v7 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v6;
  }
  [*(id *)(a1 + 208) encodeBatchToCommandBuffer:v5 sourceGradients:v8 sourceImages:*(void *)(a1 + 8) batchNormalizationState:*(void *)(a1 + 216)];
  [*(id *)(a1 + 200) encodeBatchToCommandBuffer:v5 sourceGradients:v8 sourceImages:*(void *)(a1 + 8) batchNormalizationState:*(void *)(a1 + 216) destinationGradients:*(void *)(a1 + 24)];
  [*(id *)(a1 + 216) synchronizeOnCommandBuffer:v5];
}

void sub_223DC6F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, int a6, int a7)
{
  id v13 = a2;
  id v34 = a3;
  uint64_t v14 = *(int *)(*(void *)(a1 + 120) + 12);
  *(unsigned char *)(a1 + 169) = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_norm_epsilon");
  float array_map_scalar = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, 0.001);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  long long v16 = [TCMPSBatchNormWeights alloc];
  id v17 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v16;

  id v18 = *(id *)(a1 + 176);
  uint64_t v19 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v19 = (void *)*v19;
  }
  turi::neural_net::get_array_map_optimizer_options(a4, (uint64_t)v35);
  *(float *)&double v20 = array_map_scalar;
  uint64_t v21 = objc_msgSend(v18, "initWithChannels:kernelParamsBinaryName:device:cmd_queue:gamma:beta:moving_avg:moving_var:optimizerOptions:batchNormEpsilon:", v14, v19, v13, v34, 0, 0, v20, 0, 0, v35);
  uint64_t v22 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v21;

  uint64_t v23 = [objc_alloc(MEMORY[0x263F130E8]) initWithDevice:v13 dataSource:*(void *)(a1 + 176)];
  long long v24 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v23;

  *(float *)&double v25 = array_map_scalar;
  [*(id *)(a1 + 192) setEpsilon:v25];
  if (a6 == 2 || a7)
  {
    long long v26 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 192) setDestinationImageAllocator:v26];

    if (!a5) {
      goto LABEL_12;
    }
  }
  else if (!a5)
  {
    goto LABEL_12;
  }
  uint64_t v27 = [objc_alloc(MEMORY[0x263F13100]) initWithDevice:v13];
  uint64_t v28 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v27;

  uint64_t v29 = [objc_alloc(MEMORY[0x263F13108]) initWithDevice:v13];
  uint64_t v30 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = v29;

  uint64_t v31 = [objc_alloc(MEMORY[0x263F130F0]) initWithDevice:v13];
  uint64_t v32 = *(void **)(a1 + 200);
  *(void *)(a1 + 200) = v31;

  if (a6 == 2)
  {
    uint64_t v33 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 200) setDestinationImageAllocator:v33];

    (*(void (**)(uint64_t, id, uint64_t))(*(void *)a1 + 56))(a1, v13, 1);
    *(unsigned char *)(a1 + 170) = 0;
  }
LABEL_12:
}

void sub_223DC71C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::Load(uint64_t a1, uint64_t a2)
{
  id v4 = (const void *)(a1 + 48);
  if (*(char *)(a1 + 71) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v5 = *(void *)(a1 + 56);
  }
  uint64_t v6 = v27;
  std::string::basic_string[abi:ne180100]((uint64_t)v27, v5 + 6);
  if (v28 < 0) {
    uint64_t v6 = (void **)v27[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = *(const void **)(a1 + 48);
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_gamma");
  if (*(char *)(a1 + 71) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v8 = *(void *)(a1 + 56);
  }
  uint64_t v9 = v25;
  std::string::basic_string[abi:ne180100]((uint64_t)v25, v8 + 5);
  if (v26 < 0) {
    uint64_t v9 = (void **)v25[0];
  }
  if (v8)
  {
    if (*(char *)(a1 + 71) >= 0) {
      id v10 = v4;
    }
    else {
      id v10 = *(const void **)(a1 + 48);
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "_beta");
  if (*(char *)(a1 + 71) >= 0) {
    size_t v11 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v11 = *(void *)(a1 + 56);
  }
  uint64_t v12 = v23;
  std::string::basic_string[abi:ne180100]((uint64_t)v23, v11 + 12);
  if (v24 < 0) {
    uint64_t v12 = (void **)v23[0];
  }
  if (v11)
  {
    if (*(char *)(a1 + 71) >= 0) {
      id v13 = v4;
    }
    else {
      id v13 = *(const void **)(a1 + 48);
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "_running_var");
  if (*(char *)(a1 + 71) >= 0) {
    size_t v14 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v14 = *(void *)(a1 + 56);
  }
  uint64_t v15 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 13);
  if (v22 < 0) {
    uint64_t v15 = (void **)__p[0];
  }
  if (v14)
  {
    if (*(char *)(a1 + 71) >= 0) {
      long long v16 = v4;
    }
    else {
      long long v16 = *(const void **)(a1 + 48);
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "_running_mean");
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v27))
  {
    uint64_t v17 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v27);
    [*(id *)(a1 + 176) loadGamma:(*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17)];
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v25))
  {
    uint64_t v18 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v25);
    [*(id *)(a1 + 176) loadBeta:(*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18)];
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p))
  {
    uint64_t v19 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)__p);
    [*(id *)(a1 + 176) loadMovingAvg:(*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19)];
  }
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)v23))
  {
    uint64_t v20 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)v23);
    [*(id *)(a1 + 176) loadMovingVar:(*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20)];
  }
  [*(id *)(a1 + 192) reloadGammaAndBetaFromDataSource];
  [*(id *)(a1 + 192) reloadMeanAndVarianceFromDataSource];
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_223DC75B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::BNLayer::Export(turi::neural_net::BNLayer *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  if (*((char *)this + 71) >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 71);
  }
  else {
    size_t v4 = *((void *)this + 7);
  }
  size_t v5 = v63;
  std::string::basic_string[abi:ne180100]((uint64_t)v63, v4 + 6);
  if (v64 < 0) {
    size_t v5 = (const void **)v63[0];
  }
  if (v4)
  {
    if (*((char *)this + 71) >= 0) {
      uint64_t v6 = (char *)this + 48;
    }
    else {
      uint64_t v6 = (char *)*((void *)this + 6);
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "_gamma");
  if (*((char *)this + 71) >= 0) {
    size_t v7 = *((unsigned __int8 *)this + 71);
  }
  else {
    size_t v7 = *((void *)this + 7);
  }
  size_t v8 = v61;
  std::string::basic_string[abi:ne180100]((uint64_t)v61, v7 + 5);
  if (v62 < 0) {
    size_t v8 = (const void **)v61[0];
  }
  if (v7)
  {
    if (*((char *)this + 71) >= 0) {
      uint64_t v9 = (char *)this + 48;
    }
    else {
      uint64_t v9 = (char *)*((void *)this + 6);
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "_beta");
  if (*((char *)this + 71) >= 0) {
    size_t v10 = *((unsigned __int8 *)this + 71);
  }
  else {
    size_t v10 = *((void *)this + 7);
  }
  size_t v11 = v59;
  std::string::basic_string[abi:ne180100]((uint64_t)v59, v10 + 12);
  if (v60 < 0) {
    size_t v11 = (const void **)v59[0];
  }
  if (v10)
  {
    if (*((char *)this + 71) >= 0) {
      uint64_t v12 = (char *)this + 48;
    }
    else {
      uint64_t v12 = (char *)*((void *)this + 6);
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "_running_var");
  if (*((char *)this + 71) >= 0) {
    size_t v13 = *((unsigned __int8 *)this + 71);
  }
  else {
    size_t v13 = *((void *)this + 7);
  }
  size_t v14 = v57;
  std::string::basic_string[abi:ne180100]((uint64_t)v57, v13 + 13);
  if (v58 < 0) {
    size_t v14 = (void **)v57[0];
  }
  if (v13)
  {
    if (*((char *)this + 71) >= 0) {
      uint64_t v15 = (char *)this + 48;
    }
    else {
      uint64_t v15 = (char *)*((void *)this + 6);
    }
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_running_mean");
  uint64_t v16 = [*((id *)this + 22) numberOfFeatureChannels];
  if ([*((id *)this + 22) load])
  {
    uint64_t v17 = [*((id *)this + 22) gamma];
    uint64_t v18 = operator new(8uLL);
    std::string __p = v18;
    *uint64_t v18 = v16;
    long long v51 = v18 + 1;
    long long v52 = v18 + 1;
    turi::neural_net::shared_float_array::copy(v17, (uint64_t)&__p, (uint64_t)&v53);
    int8x16_t v65 = v63;
    uint64_t v19 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v63, (uint64_t)&std::piecewise_construct, (long long **)&v65);
    long long v20 = v54;
    long long v54 = 0uLL;
    uint64_t v21 = (std::__shared_weak_count *)v19[9];
    *((_OWORD *)v19 + 4) = v20;
    if (v21)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      uint64_t v21 = (std::__shared_weak_count *)*((void *)&v54 + 1);
    }
    long long v22 = v56;
    *((_OWORD *)v19 + 5) = v55;
    *((_OWORD *)v19 + 6) = v22;
    long long v53 = &unk_26D752D58;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (__p)
    {
      long long v51 = __p;
      operator delete(__p);
    }
    uint64_t v23 = [*((id *)this + 22) beta];
    char v24 = operator new(8uLL);
    long long v47 = v24;
    *char v24 = v16;
    char v48 = v24 + 1;
    long long v49 = v24 + 1;
    turi::neural_net::shared_float_array::copy(v23, (uint64_t)&v47, (uint64_t)&v53);
    int8x16_t v65 = v61;
    double v25 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v61, (uint64_t)&std::piecewise_construct, (long long **)&v65);
    long long v26 = v54;
    long long v54 = 0uLL;
    uint64_t v27 = (std::__shared_weak_count *)v25[9];
    *((_OWORD *)v25 + 4) = v26;
    if (v27)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      uint64_t v27 = (std::__shared_weak_count *)*((void *)&v54 + 1);
    }
    long long v28 = v56;
    *((_OWORD *)v25 + 5) = v55;
    *((_OWORD *)v25 + 6) = v28;
    long long v53 = &unk_26D752D58;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v47)
    {
      char v48 = v47;
      operator delete(v47);
    }
    uint64_t v29 = [*((id *)this + 22) variance];
    uint64_t v30 = operator new(8uLL);
    char v44 = v30;
    void *v30 = v16;
    int v45 = v30 + 1;
    char v46 = v30 + 1;
    turi::neural_net::shared_float_array::copy(v29, (uint64_t)&v44, (uint64_t)&v53);
    int8x16_t v65 = v59;
    uint64_t v31 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, v59, (uint64_t)&std::piecewise_construct, (long long **)&v65);
    long long v32 = v54;
    long long v54 = 0uLL;
    uint64_t v33 = (std::__shared_weak_count *)v31[9];
    *((_OWORD *)v31 + 4) = v32;
    if (v33)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      uint64_t v33 = (std::__shared_weak_count *)*((void *)&v54 + 1);
    }
    long long v34 = v56;
    *((_OWORD *)v31 + 5) = v55;
    *((_OWORD *)v31 + 6) = v34;
    long long v53 = &unk_26D752D58;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v44)
    {
      int v45 = v44;
      operator delete(v44);
    }
    uint64_t v35 = [*((id *)this + 22) mean];
    uint64_t v36 = operator new(8uLL);
    long long v41 = v36;
    void *v36 = v16;
    uint64_t v42 = v36 + 1;
    char v43 = v36 + 1;
    turi::neural_net::shared_float_array::copy(v35, (uint64_t)&v41, (uint64_t)&v53);
    int8x16_t v65 = (const void **)v57;
    char v37 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v57, (uint64_t)&std::piecewise_construct, (long long **)&v65);
    long long v38 = v54;
    long long v54 = 0uLL;
    long long v39 = (std::__shared_weak_count *)v37[9];
    *((_OWORD *)v37 + 4) = v38;
    if (v39)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      long long v39 = (std::__shared_weak_count *)*((void *)&v54 + 1);
    }
    long long v40 = v56;
    *((_OWORD *)v37 + 5) = v55;
    *((_OWORD *)v37 + 6) = v40;
    long long v53 = &unk_26D752D58;
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (v41)
    {
      uint64_t v42 = v41;
      operator delete(v41);
    }
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete((void *)v59[0]);
  }
  if (v62 < 0) {
    operator delete((void *)v61[0]);
  }
  if (v64 < 0) {
    operator delete((void *)v63[0]);
  }
}

void sub_223DC7BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v35 - 113) < 0) {
    operator delete(*(void **)(v35 - 136));
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v34, *(void **)(v34 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::BNLayer::Update(id *this, turi::neural_net::MPSUpdater *a2, uint64_t a3)
{
  uint64_t v6 = [this[22] numberOfFeatureChannels];
  id v7 = [this[27] gradientForGamma];
  uint64_t v8 = [v7 contents];

  id v9 = [this[27] gradientForBeta];
  uint64_t v10 = [v9 contents];

  id v11 = [this[27] mean];
  uint64_t v12 = [v11 contents];

  id v13 = [this[27] variance];
  uint64_t v14 = [v13 contents];

  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 8))(a2, [this[22] gamma], v8, v6, a3, 0);
  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, [this[22] beta], v10, v6, a3, 1);
  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, float))(*(void *)a2 + 24))(a2, [this[22] mean], v12, v6, 0.9);
  (*(void (**)(turi::neural_net::MPSUpdater *, uint64_t, uint64_t, uint64_t, float))(*(void *)a2 + 24))(a2, [this[22] variance], v14, v6, 0.9);
  [this[24] reloadGammaAndBetaFromDataSource];
  id v15 = this[24];
  return [v15 reloadMeanAndVarianceFromDataSource];
}

void sub_223DC7F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::BNLayer::GpuUpdate(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (id)objc_msgSend(*(id *)(a1 + 176), "updateGammaAndBetaWithCommandBuffer:batchNormalizationState:");
  size_t v4 = *(void **)(a1 + 192);
  size_t v5 = [*(id *)(a1 + 176) gammaBetaState];
  [v4 reloadGammaAndBetaWithCommandBuffer:v8 gammaAndBetaState:v5];

  uint64_t v6 = *(void **)(a1 + 192);
  id v7 = [*(id *)(a1 + 176) meanVarianceState];
  [v6 reloadMeanAndVarianceWithCommandBuffer:v8 meanAndVarianceState:v7];
}

void sub_223DC803C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolLayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  objc_storeStrong((id *)(a1 + 8), a2);
  id v9 = *(void **)(a1 + 168);
  id v14 = 0;
  uint64_t v10 = [v9 encodeBatchToCommandBuffer:v7 sourceImages:v6 destinationStates:&v14 destinationStateIsTemporary:0];
  id v11 = v14;
  uint64_t v12 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;

  id v13 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v11;
}

void sub_223DC8118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(a1 + 176) encodeBatchToCommandBuffer:v5 sourceGradients:v8 sourceImages:*(void *)(a1 + 8) gradientStates:*(void *)(a1 + 32)];
  id v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v6;
}

void sub_223DC81A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::MaxPoolLayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  id v22 = a2;
  id v11 = *(int **)(a1 + 72);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = v11[3];
  uint64_t v16 = [objc_alloc(MEMORY[0x263F131B8]) initWithDevice:v22 kernelWidth:v13 kernelHeight:v12 strideInPixelsX:v15 strideInPixelsY:v14];
  uint64_t v17 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v16;

  [*(id *)(a1 + 168) setPadding:turi::neural_net::SAME];
  if (a6 == 2 || a7)
  {
    uint64_t v18 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 168) setDestinationImageAllocator:v18];

    if (!a5) {
      goto LABEL_9;
    }
  }
  else if (!a5)
  {
    goto LABEL_9;
  }
  uint64_t v19 = [objc_alloc(MEMORY[0x263F131C0]) initWithDevice:v22 kernelWidth:v13 kernelHeight:v12 strideInPixelsX:v15 strideInPixelsY:v14];
  long long v20 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v19;

  if (a6 == 2)
  {
    uint64_t v21 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 176) setDestinationImageAllocator:v21];
  }
  [*(id *)(a1 + 176) setPadding:turi::neural_net::SAME];
LABEL_9:
}

void sub_223DC8328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::DropOutLayer::Forward(uint64_t a1, void *a2, void *a3, char a4)
{
  id v8 = a2;
  id v9 = a3;
  if (a4)
  {
    uint64_t v10 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;

    objc_storeStrong((id *)(a1 + 8), a2);
    id v11 = *(void **)(a1 + 168);
    id v16 = 0;
    uint64_t v12 = [v11 encodeBatchToCommandBuffer:v9 sourceImages:v8 destinationStates:&v16 destinationStateIsTemporary:0];
    id v13 = v16;
    uint64_t v14 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v12;

    uint64_t v15 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v13;
  }
  else
  {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_223DC8424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::DropOutLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(a1 + 176) encodeBatchToCommandBuffer:v5 sourceGradients:v8 sourceImages:*(void *)(a1 + 8) gradientStates:*(void *)(a1 + 32)];
  id v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v6;
}

void sub_223DC84B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::DropOutLayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  id v11 = a2;
  uint64_t v12 = *(int **)(a1 + 72);
  int v13 = *v12;
  int v14 = v12[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "random_seed");
  uint64_t v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a4, (const void **)__p);
  uint64_t v16 = v15;
  if (v34 < 0)
  {
    operator delete(__p[0]);
    if (v16) {
      goto LABEL_3;
    }
  }
  else if (v15)
  {
LABEL_3:
    std::string::basic_string[abi:ne180100]<0>(__p, "random_seed");
    float array_map_scalar = turi::neural_net::get_array_map_scalar(a4, (const void **)__p, 0.0);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    int v14 = LODWORD(array_map_scalar);
    goto LABEL_9;
  }
  if (v14 == -1)
  {
    unsigned int v18 = time(0);
    srand(v18);
    int v14 = rand();
  }
LABEL_9:
  id v19 = objc_alloc(MEMORY[0x263F13138]);
  int64x2_t v31 = vdupq_n_s64(1uLL);
  uint64_t v32 = 1;
  *(float *)&double v20 = (float)v13 / 100.0;
  uint64_t v21 = [v19 initWithDevice:v11 keepProbability:v14 seed:&v31 maskStrideInPixels:v20];
  id v22 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v21;

  if (a6 == 2 || a7)
  {
    uint64_t v23 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 168) setDestinationImageAllocator:v23];
  }
  id v24 = objc_alloc(MEMORY[0x263F13140]);
  int64x2_t v25 = vdupq_n_s64(1uLL);
  int64x2_t v29 = v25;
  uint64_t v30 = 1;
  *(float *)v25.i32 = (float)v13 / 100.0;
  uint64_t v26 = [v24 initWithDevice:v11 keepProbability:v14 seed:&v29 maskStrideInPixels:*(double *)v25.i64];
  uint64_t v27 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v26;

  if (a6 == 2)
  {
    long long v28 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 176) setDestinationImageAllocator:v28];
  }
}

void sub_223DC86B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::SoftMaxLayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  objc_storeStrong((id *)(a1 + 8), a2);
  id v9 = *(void **)(a1 + 168);
  id v14 = 0;
  uint64_t v10 = [v9 encodeBatchToCommandBuffer:v7 sourceImages:v6 destinationStates:&v14 destinationStateIsTemporary:0];
  id v11 = v14;
  uint64_t v12 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;

  int v13 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v11;
}

void sub_223DC87BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::SoftMaxLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(a1 + 176) encodeBatchToCommandBuffer:v5 sourceGradients:v8 sourceImages:*(void *)(a1 + 16) gradientStates:*(void *)(a1 + 32)];
  id v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v6;
}

void sub_223DC884C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::SoftMaxLayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  id v17 = a2;
  uint64_t v11 = [objc_alloc(MEMORY[0x263F131D0]) initWithDevice:v17];
  uint64_t v12 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v11;

  if (a6 == 2 || a7)
  {
    int v13 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 168) setDestinationImageAllocator:v13];

    if (!a5) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (a5)
  {
LABEL_6:
    uint64_t v14 = [objc_alloc(MEMORY[0x263F131D8]) initWithDevice:v17];
    uint64_t v15 = *(void **)(a1 + 176);
    *(void *)(a1 + 176) = v14;

    uint64_t v16 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 176) setDestinationImageAllocator:v16];
  }
LABEL_7:
}

void sub_223DC8964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::SmceLossLayer::Loss(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [*(id *)(a1 + 168) encodeBatchToCommandBuffer:v8 sourceImages:v11 labels:v7];
  uint64_t v10 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v9;
}

void sub_223DC8A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::SmceLossLayer::Init(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  id v8 = [MEMORY[0x263F13168] cnnLossDescriptorWithType:2 reductionType:2];
  LODWORD(v9) = 1.0;
  [v8 setWeight:v9];
  uint64_t v10 = [objc_alloc(MEMORY[0x263F13158]) initWithDevice:v13 lossDescriptor:v8];
  id v11 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v10;

  if (a6 == 2)
  {
    uint64_t v12 = [[TCMPSImageAllocator alloc] initWithFormat:4];
    [*(id *)(a1 + 168) setDestinationImageAllocator:v12];
  }
}

void sub_223DC8B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Init(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  id v83 = a2;
  id v12 = a3;
  id v13 = *(int **)(a1 + 120);
  *(void *)(a1 + 168) = *v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)&long long v15 = (int)v14;
  *((void *)&v15 + 1) = SHIDWORD(v14);
  *(_OWORD *)(a1 + 176) = v15;
  *(void *)(a1 + 192) = *(int *)(*(void *)(a1 + 144) + 12);
  objc_storeStrong((id *)(a1 + 320), a2);
  objc_storeStrong((id *)(a1 + 312), a3);
  LODWORD(v65) = 3;
  uint64_t v16 = [[MPSCNNWeight alloc] initWithKernelWidth:1 kernelHeight:1 inputFeatureChannels:*(void *)(a1 + 184) outputFeatureChannels:*(void *)(a1 + 192) strideInPixelsX:1 strideInPixelsY:1 neuronType:0.0 neuronA:0.0 neuronB:v65];
  id v17 = [MPSCNNWeight alloc];
  LODWORD(v66) = 5;
  LODWORD(v18) = 1.0;
  LODWORD(v19) = 1.0;
  v82 = [(MPSCNNWeight *)v17 initWithKernelWidth:1 kernelHeight:1 inputFeatureChannels:*(void *)(a1 + 192) outputFeatureChannels:*(void *)(a1 + 192) strideInPixelsX:1 strideInPixelsY:1 neuronType:v18 neuronA:v19 neuronB:v66];
  LODWORD(v67) = 3;
  uint64_t v81 = [[MPSCNNWeight alloc] initWithKernelWidth:1 kernelHeight:1 inputFeatureChannels:*(void *)(a1 + 184) outputFeatureChannels:*(void *)(a1 + 192) strideInPixelsX:1 strideInPixelsY:1 neuronType:0.0 neuronA:0.0 neuronB:v67];
  double v20 = [MPSCNNWeight alloc];
  LODWORD(v68) = 5;
  LODWORD(v21) = 1.0;
  LODWORD(v22) = 1.0;
  uint64_t v80 = [(MPSCNNWeight *)v20 initWithKernelWidth:1 kernelHeight:1 inputFeatureChannels:*(void *)(a1 + 192) outputFeatureChannels:*(void *)(a1 + 192) strideInPixelsX:1 strideInPixelsY:1 neuronType:v21 neuronA:v22 neuronB:v68];
  uint64_t v23 = [MPSCNNWeight alloc];
  LODWORD(v69) = 5;
  LODWORD(v24) = 1.0;
  LODWORD(v25) = 1.0;
  v79 = [(MPSCNNWeight *)v23 initWithKernelWidth:1 kernelHeight:1 inputFeatureChannels:*(void *)(a1 + 184) outputFeatureChannels:*(void *)(a1 + 192) strideInPixelsX:1 strideInPixelsY:1 neuronType:v24 neuronA:v25 neuronB:v69];
  uint64_t v26 = [MPSCNNWeight alloc];
  LODWORD(v70) = 5;
  LODWORD(v27) = 1.0;
  LODWORD(v28) = 1.0;
  uint64_t v78 = [(MPSCNNWeight *)v26 initWithKernelWidth:1 kernelHeight:1 inputFeatureChannels:*(void *)(a1 + 192) outputFeatureChannels:*(void *)(a1 + 192) strideInPixelsX:1 strideInPixelsY:1 neuronType:v27 neuronA:v28 neuronB:v70];
  LODWORD(v71) = 3;
  uint64_t v77 = [[MPSCNNWeight alloc] initWithKernelWidth:1 kernelHeight:1 inputFeatureChannels:*(void *)(a1 + 184) outputFeatureChannels:*(void *)(a1 + 192) strideInPixelsX:1 strideInPixelsY:1 neuronType:0.0 neuronA:0.0 neuronB:v71];
  int v73 = a6;
  char v74 = a7;
  char v76 = v12;
  int64x2_t v29 = [MPSCNNWeight alloc];
  LODWORD(v72) = 5;
  LODWORD(v30) = 1.0;
  LODWORD(v31) = 1.0;
  uint64_t v32 = [(MPSCNNWeight *)v29 initWithKernelWidth:1 kernelHeight:1 inputFeatureChannels:*(void *)(a1 + 192) outputFeatureChannels:*(void *)(a1 + 192) strideInPixelsX:1 strideInPixelsY:1 neuronType:v30 neuronA:v31 neuronB:v72];
  uint64_t v33 = [MEMORY[0x263F13310] createLSTMDescriptorWithInputFeatureChannels:*(void *)(a1 + 184) outputFeatureChannels:*(void *)(a1 + 192)];
  unsigned __int8 v75 = v16;
  [v33 setInputGateInputWeights:v16];
  [v33 setInputGateRecurrentWeights:v82];
  [v33 setForgetGateInputWeights:v81];
  [v33 setForgetGateRecurrentWeights:v80];
  [v33 setOutputGateInputWeights:v77];
  [v33 setOutputGateRecurrentWeights:v32];
  [v33 setCellGateInputWeights:v79];
  [v33 setCellGateRecurrentWeights:v78];
  [v33 setCellToOutputNeuronType:5];
  [v33 setUseFloat32Weights:1];
  uint64_t v34 = [objc_alloc(MEMORY[0x263F133C8]) initWithDevice:v83 rnnDescriptor:v33 trainableWeights:*(void *)(a1 + 240)];
  uint64_t v35 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = v34;

  [*(id *)(a1 + 232) createWeightMatrices:*(void *)(a1 + 264)];
  [*(id *)(a1 + 232) createWeightMatrices:*(void *)(a1 + 272)];
  [*(id *)(a1 + 232) createWeightGradientMatrices:*(void *)(a1 + 248) dataType:268435488];
  uint64_t v36 = objc_msgSend(objc_alloc(MEMORY[0x263EFF980]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 264), "count"));
  char v37 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = v36;

  for (unint64_t i = 0; i < [*(id *)(a1 + 264) count]; ++i)
  {
    long long v39 = [*(id *)(a1 + 264) objectAtIndexedSubscript:i];
    long long v40 = [*(id *)(a1 + 272) objectAtIndexedSubscript:i];
    id v41 = [v39 data];
    uint64_t v42 = (void *)[v41 contents];
    char v43 = [v39 data];
    bzero(v42, [v43 length]);

    id v44 = [v40 data];
    int v45 = (void *)[v44 contents];
    char v46 = [v40 data];
    bzero(v45, [v46 length]);

    id v47 = objc_alloc(MEMORY[0x263F133A0]);
    LODWORD(v48) = 981668463;
    long long v49 = (void *)[v47 initWithDevice:v83 learningRate:v48];
    [*(id *)(a1 + 224) addObject:v49];
  }
  uint64_t v50 = [objc_alloc(MEMORY[0x263F13270]) initWithDevice:v83 dataLayout:0];
  long long v51 = *(void **)(a1 + 208);
  *(void *)(a1 + 208) = v50;

  uint64_t v52 = [objc_alloc(MEMORY[0x263F13330]) initWithDevice:v83 dataLayout:0];
  long long v53 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = v52;

  uint64_t v54 = 4 * *(void *)(a1 + 184);
  uint64_t v55 = [v83 newBufferWithLength:v54 * *(void *)(a1 + 176) * *(void *)(a1 + 168) options:0];
  long long v56 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = v55;

  uint64_t v57 = [v83 newBufferWithLength:*(void *)(a1 + 176) * v54 * *(void *)(a1 + 168) options:0];
  char v58 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v57;

  uint64_t v59 = 4 * *(void *)(a1 + 192);
  uint64_t v60 = [v83 newBufferWithLength:v59 * *(void *)(a1 + 176) * *(void *)(a1 + 168) options:0];
  uint64_t v61 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = v60;

  uint64_t v62 = [v83 newBufferWithLength:*(void *)(a1 + 176) * v59 * *(void *)(a1 + 168) options:0];
  v63 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v62;

  char v64 = v74 ^ 1;
  if (v73 == 2) {
    char v64 = 0;
  }
  *(unsigned char *)(a1 + 200) = v64;
  turi::neural_net::LstmLayer::InitWeightCopyMatrices((turi::neural_net::LstmLayer *)a1);
}

void sub_223DC911C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, id a20)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::InitWeightCopyMatrices(turi::neural_net::LstmLayer *this)
{
  uint64_t v2 = 0;
  id v3 = (char *)this + 328;
  do
  {
    size_t v4 = (uint64_t *)&turi::neural_net::lstm_weight_names_mxnet_format[v2];
    if ((char)turi::neural_net::lstm_weight_names_mxnet_format[v2 + 23] < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v4, v4[1]);
    }
    else {
      std::string __p = *(std::string *)v4;
    }
    unint64_t v5 = turi::neural_net::MxnetNameToMatrixId((const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v6 = turi::neural_net::createWeightMatrix(*((void **)this + 40), v5, *((_DWORD *)this + 46), *((_DWORD *)this + 48));
    uint64_t v10 = &turi::neural_net::lstm_weight_names_mxnet_format[v2];
    id v7 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, &turi::neural_net::lstm_weight_names_mxnet_format[v2], (uint64_t)&std::piecewise_construct, (long long **)&v10);
    id v8 = (void *)*((void *)v7 + 5);
    *((void *)v7 + 5) = v6;

    v2 += 24;
  }
  while (v2 != 288);
}

void sub_223DC9304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id turi::neural_net::LstmLayer::CreateMatrixViews(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [MEMORY[0x263F13340] matrixDescriptorWithRows:*(void *)(a1 + 168) columns:a3 rowBytes:4 * a3 * *(void *)(a1 + 176) dataType:268435488];
  id v7 = (void *)[objc_alloc(MEMORY[0x263F13318]) initWithBuffer:v5 descriptor:v6];
  id v8 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:*(void *)(a1 + 176)];
  if (*(void *)(a1 + 176))
  {
    unint64_t v9 = 0;
    do
    {
      [v8 addObject:v7];
      ++v9;
    }
    while (v9 < *(void *)(a1 + 176));
  }

  return v8;
}

void sub_223DC9404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::CreateMatrixOffsets(turi::neural_net::LstmLayer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<unsigned long>::reserve((void **)a3, *((void *)this + 22));
  if (*((void *)this + 22))
  {
    unint64_t v6 = 0;
    uint64_t v7 = 4 * a2;
    id v8 = (void *)(a3 + 16);
    unint64_t v9 = *(uint64_t **)(a3 + 8);
    do
    {
      uint64_t v10 = v6 * v7;
      if ((unint64_t)v9 >= *v8)
      {
        id v12 = *(uint64_t **)a3;
        uint64_t v13 = ((uint64_t)v9 - *(void *)a3) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v8 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          id v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3 + 16, v16);
          id v12 = *(uint64_t **)a3;
          unint64_t v9 = *(uint64_t **)(a3 + 8);
        }
        else
        {
          id v17 = 0;
        }
        double v18 = (uint64_t *)&v17[8 * v13];
        *double v18 = v10;
        id v11 = v18 + 1;
        while (v9 != v12)
        {
          uint64_t v19 = *--v9;
          *--double v18 = v19;
        }
        *(void *)a3 = v18;
        *(void *)(a3 + 8) = v11;
        *(void *)(a3 + 16) = &v17[8 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *unint64_t v9 = v10;
        id v11 = v9 + 1;
      }
      *(void *)(a3 + 8) = v11;
      ++v6;
      unint64_t v9 = v11;
    }
    while (v6 < *((void *)this + 22));
  }
}

void sub_223DC9574(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::LstmLayer::CopyImageBatchToBuffer(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  batch = a2;
  id v9 = a3;
  id v10 = a5;
  id v11 = [MEMORY[0x263F13340] matrixDescriptorWithRows:*(void *)(a1 + 168) columns:*(void *)(a1 + 176) * a4 rowBytes:4 * *(void *)(a1 + 176) * a4 dataType:268435488];
  id v12 = (void *)[objc_alloc(MEMORY[0x263F13318]) initWithBuffer:v9 descriptor:v11];
  [*(id *)(a1 + 208) encodeBatchToCommandBuffer:v10 sourceImages:batch destinationMatrix:v12];
  MPSImageBatchIncrementReadCount(batch, -1);
}

void sub_223DC967C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::LstmLayer::CopyImageBatchFromBuffer(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  id v9 = [MEMORY[0x263F13340] matrixDescriptorWithRows:*(void *)(a1 + 168) columns:*(void *)(a1 + 176) * a3 rowBytes:4 * *(void *)(a1 + 176) * a3 dataType:268435488];
  id v10 = (void *)[objc_alloc(MEMORY[0x263F13318]) initWithBuffer:v7 descriptor:v9];
  id v11 = [MEMORY[0x263F13278] imageDescriptorWithChannelFormat:4 width:*(void *)(a1 + 176) height:1 featureChannels:a3 numberOfImages:1 usage:3];
  if (*(unsigned char *)(a1 + 200)) {
    [MEMORY[0x263F133D8] defaultAllocator];
  }
  else {
  id v12 = [MEMORY[0x263F13220] defaultAllocator];
  }
  uint64_t v13 = [v12 imageBatchForCommandBuffer:v8 imageDescriptor:v11 kernel:*(void *)(a1 + 216) count:*(void *)(a1 + 168)];
  [*(id *)(a1 + 216) encodeBatchToCommandBuffer:v8 sourceMatrix:v10 destinationImages:v13];

  return v13;
}

void sub_223DC97FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Forward(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  objc_storeStrong((id *)(a1 + 8), a2);
  turi::neural_net::LstmLayer::CopyImageBatchToBuffer(a1, v6, *(void **)(a1 + 280), *(void *)(a1 + 184), v7);
  id v8 = turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 280), *(void *)(a1 + 184));
  id v9 = turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 288), *(void *)(a1 + 192));
  turi::neural_net::LstmLayer::CreateMatrixOffsets((turi::neural_net::LstmLayer *)a1, *(void *)(a1 + 184), (uint64_t)v13);
  turi::neural_net::LstmLayer::CreateMatrixOffsets((turi::neural_net::LstmLayer *)a1, *(void *)(a1 + 192), (uint64_t)__p);
  [*(id *)(a1 + 256) removeAllObjects];
  [*(id *)(a1 + 232) encodeForwardSequenceToCommandBuffer:v7 sourceMatrices:v8 sourceOffsets:v13[0] destinationMatrices:v9 destinationOffsets:__p[0] trainingStates:*(void *)(a1 + 256) recurrentInputState:0 recurrentOutputStates:0 weights:*(void *)(a1 + 240)];
  uint64_t v10 = turi::neural_net::LstmLayer::CopyImageBatchFromBuffer(a1, *(void **)(a1 + 288), *(void *)(a1 + 192), v7);
  id v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_223DC9998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  turi::neural_net::LstmLayer::CopyImageBatchToBuffer(a1, a2, *(void **)(a1 + 296), *(void *)(a1 + 192), v5);
  id v6 = turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 280), *(void *)(a1 + 184));
  id v7 = turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 296), *(void *)(a1 + 192));
  id v8 = turi::neural_net::LstmLayer::CreateMatrixViews(a1, *(void **)(a1 + 304), *(void *)(a1 + 184));
  turi::neural_net::LstmLayer::CreateMatrixOffsets((turi::neural_net::LstmLayer *)a1, *(void *)(a1 + 184), (uint64_t)v12);
  turi::neural_net::LstmLayer::CreateMatrixOffsets((turi::neural_net::LstmLayer *)a1, *(void *)(a1 + 192), (uint64_t)__p);
  objc_msgSend(*(id *)(a1 + 232), "encodeGradientSequenceToCommandBuffer:forwardSources:forwardSourceOffsets:sourceGradients:sourceGradientOffsets:destinationGradients:destinationOffsets:weightGradients:trainingStates:recurrentInputState:recurrentOutputStates:weights:", v5, v6, v12[0], *(void *)(a1 + 248), *(void *)(a1 + 256), 0, 0, *(void *)(a1 + 240));
  uint64_t v9 = turi::neural_net::LstmLayer::CopyImageBatchFromBuffer(a1, *(void **)(a1 + 304), *(void *)(a1 + 184), v5);
  uint64_t v10 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v9;

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_223DC9B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Load(uint64_t a1, uint64_t a2)
{
  size_t v4 = [*(id *)(a1 + 312) commandBuffer];
  for (uint64_t i = 0; i != 288; i += 24)
  {
    if (*(char *)(a1 + 71) >= 0) {
      size_t v6 = *(unsigned __int8 *)(a1 + 71);
    }
    else {
      size_t v6 = *(void *)(a1 + 56);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v28, v6 + 1);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v7 = &v28;
    }
    else {
      id v7 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*(char *)(a1 + 71) >= 0) {
        id v8 = (const void *)(a1 + 48);
      }
      else {
        id v8 = *(const void **)(a1 + 48);
      }
      memmove(v7, v8, v6);
    }
    uint64_t v9 = (std::string *)&turi::neural_net::lstm_weight_names_mxnet_format[i];
    *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
    uint64_t v10 = &turi::neural_net::lstm_weight_names_mxnet_format[i];
    int v11 = (char)turi::neural_net::lstm_weight_names_mxnet_format[i + 23];
    if (v11 >= 0) {
      id v12 = (const std::string::value_type *)&turi::neural_net::lstm_weight_names_mxnet_format[i];
    }
    else {
      id v12 = *(const std::string::value_type **)&turi::neural_net::lstm_weight_names_mxnet_format[i];
    }
    if (v11 >= 0) {
      std::string::size_type v13 = turi::neural_net::lstm_weight_names_mxnet_format[i + 23];
    }
    else {
      std::string::size_type v13 = *(void *)&turi::neural_net::lstm_weight_names_mxnet_format[i + 8];
    }
    unint64_t v14 = std::string::append(&v28, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p))
    {
      uint64_t v16 = std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)__p);
      if ((char)v10[23] < 0) {
        std::string::__init_copy_ctor_external(&v27, v9->__r_.__value_.__l.__data_, *((void *)v10 + 1));
      }
      else {
        std::string v27 = *v9;
      }
      uint64_t v17 = turi::neural_net::MxnetNameToMatrixId((const void **)&v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      double v18 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>((void *)(a1 + 328), &turi::neural_net::lstm_weight_names_mxnet_format[i]);
      if (!v18) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      id v19 = *((id *)v18 + 5);
      std::operator+<char>();
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      id v20 = [v19 data];
      double v21 = (void *)[v20 contents];
      double v22 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
      uint64_t v23 = [v19 data];
      memcpy(v21, v22, [v23 length]);

      double v24 = *(void **)(a1 + 232);
      uint64_t v25 = *(void *)(a1 + 240);
      memset(v26, 0, sizeof(v26));
      [v24 encodeCopyWeightsToCommandBuffer:v4 weights:v25 matrixId:v17 matrix:v19 copyFromWeightsToMatrix:0 matrixOffset:v26];
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
  }
  [v4 commit];
  [v4 waitUntilCompleted];
}

void sub_223DC9E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::LstmLayer::Export(id *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  id v3 = [this[39] commandBuffer];
  uint64_t v4 = 0;
  char v58 = this + 41;
  long long v56 = v3;
  do
  {
    if (*((char *)this + 71) >= 0) {
      size_t v5 = *((unsigned __int8 *)this + 71);
    }
    else {
      size_t v5 = (size_t)this[7];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v65, v5 + 1);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v6 = &v65;
    }
    else {
      size_t v6 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if (*((char *)this + 71) >= 0) {
        id v7 = (char *)(this + 6);
      }
      else {
        id v7 = (char *)this[6];
      }
      memmove(v6, v7, v5);
    }
    id v8 = (std::string *)&turi::neural_net::lstm_weight_names_mxnet_format[v4];
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 95;
    uint64_t v9 = &turi::neural_net::lstm_weight_names_mxnet_format[v4];
    int v10 = (char)turi::neural_net::lstm_weight_names_mxnet_format[v4 + 23];
    if (v10 >= 0) {
      int v11 = (const std::string::value_type *)&turi::neural_net::lstm_weight_names_mxnet_format[v4];
    }
    else {
      int v11 = *(const std::string::value_type **)&turi::neural_net::lstm_weight_names_mxnet_format[v4];
    }
    if (v10 >= 0) {
      std::string::size_type v12 = turi::neural_net::lstm_weight_names_mxnet_format[v4 + 23];
    }
    else {
      std::string::size_type v12 = *(void *)&turi::neural_net::lstm_weight_names_mxnet_format[v4 + 8];
    }
    std::string::size_type v13 = std::string::append(&v65, v11, v12);
    unint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    int v15 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__r.__words[0] = 0;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if ((char)v9[23] < 0) {
      std::string::__init_copy_ctor_external(&v71, v8->__r_.__value_.__l.__data_, *((void *)v9 + 1));
    }
    else {
      std::string v71 = *v8;
    }
    uint64_t v16 = turi::neural_net::MxnetNameToMatrixId((const void **)&v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v58, &turi::neural_net::lstm_weight_names_mxnet_format[v4]);
    if (!v17) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    id v18 = *((id *)v17 + 5);
    id v19 = [v18 data];
    id v20 = (void *)[v19 contents];
    double v21 = [v18 data];
    bzero(v20, [v21 length]);

    id v22 = this[29];
    id v23 = this[30];
    memset(v70, 0, sizeof(v70));
    [v22 encodeCopyWeightsToCommandBuffer:v3 weights:v23 matrixId:v16 matrix:v18 copyFromWeightsToMatrix:1 matrixOffset:v70];
    [v18 synchronizeOnCommandBuffer:v3];

    if (v15 < 0) {
      operator delete(v14);
    }
    v4 += 24;
  }
  while (v4 != 288);
  [v3 commit];
  [v3 waitUntilCompleted];
  double v24 = turi::neural_net::lstm_weight_names_mxnet_format;
  do
  {
    if (*((char *)this + 71) >= 0) {
      size_t v25 = *((unsigned __int8 *)this + 71);
    }
    else {
      size_t v25 = (size_t)this[7];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v65, v25 + 1);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v65;
    }
    else {
      uint64_t v26 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if (*((char *)this + 71) >= 0) {
        std::string v27 = (char *)(this + 6);
      }
      else {
        std::string v27 = (char *)this[6];
      }
      memmove(v26, v27, v25);
    }
    *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 95;
    int v28 = (char)v24[23];
    if (v28 >= 0) {
      int64x2_t v29 = (const std::string::value_type *)v24;
    }
    else {
      int64x2_t v29 = *(const std::string::value_type **)v24;
    }
    if (v28 >= 0) {
      std::string::size_type v30 = v24[23];
    }
    else {
      std::string::size_type v30 = *((void *)v24 + 1);
    }
    double v31 = std::string::append(&v65, v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    std::string::size_type v69 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v68 = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    uint64_t v33 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v58, v24);
    if (!v33) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    id v34 = *((id *)v33 + 5);
    uint64_t v35 = [v34 columns];
    id v36 = [v34 data];
    uint64_t v37 = [v36 contents];

    if ((char)v24[23] < 0)
    {
      long long v39 = *(unsigned __int8 **)v24;
      uint64_t v38 = *((void *)v24 + 1);
    }
    else
    {
      uint64_t v38 = v24[23];
      long long v39 = v24;
    }
    if (v38 >= 4)
    {
      long long v40 = (char *)&v39[v38];
      id v41 = v39;
      do
      {
        uint64_t v42 = (char *)memchr(v41, 98, v38 - 3);
        if (!v42) {
          break;
        }
        if (*(_DWORD *)v42 == 1935763810)
        {
          if (v42 == v40 || v42 - (char *)v39 == -1) {
            break;
          }
          v63 = 0;
          char v64 = 0;
          uint64_t v62 = 0;
          char v43 = operator new(8uLL);
          uint64_t v62 = v43;
          *char v43 = v35;
          v63 = v43 + 1;
          char v64 = v43 + 1;
          id v44 = v56;
          turi::neural_net::shared_float_array::copy(v37, (uint64_t)&v62, (uint64_t)&v65);
          v72[0] = (long long *)v68;
          int v45 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v68, (uint64_t)&std::piecewise_construct, v72);
          long long v46 = *(_OWORD *)&v65.__r_.__value_.__r.__words[1];
          *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
          id v47 = (std::__shared_weak_count *)v45[9];
          *((_OWORD *)v45 + 4) = v46;
          if (v47)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            id v47 = (std::__shared_weak_count *)v65.__r_.__value_.__r.__words[2];
          }
          long long v48 = v67;
          *((_OWORD *)v45 + 5) = v66;
          *((_OWORD *)v45 + 6) = v48;
          v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D752D58;
          if (v47) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          }
          long long v49 = v62;
          if (v62)
          {
            v63 = v62;
            goto LABEL_74;
          }
          goto LABEL_75;
        }
        id v41 = (unsigned __int8 *)(v42 + 1);
        uint64_t v38 = v40 - (char *)v41;
      }
      while (v40 - (char *)v41 >= 4);
    }
    uint64_t v50 = [v34 rows];
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    std::string __p = 0;
    id v44 = v56;
    long long v51 = operator new(0x10uLL);
    uint64_t v60 = v51 + 2;
    uint64_t v61 = v51 + 2;
    *long long v51 = v50;
    v51[1] = v35;
    std::string __p = v51;
    turi::neural_net::shared_float_array::copy(v37, (uint64_t)&__p, (uint64_t)&v65);
    v72[0] = (long long *)v68;
    uint64_t v52 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v68, (uint64_t)&std::piecewise_construct, v72);
    long long v53 = *(_OWORD *)&v65.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
    uint64_t v54 = (std::__shared_weak_count *)v52[9];
    *((_OWORD *)v52 + 4) = v53;
    if (v54)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      uint64_t v54 = (std::__shared_weak_count *)v65.__r_.__value_.__r.__words[2];
    }
    long long v55 = v67;
    *((_OWORD *)v52 + 5) = v66;
    *((_OWORD *)v52 + 6) = v55;
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D752D58;
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
    long long v49 = __p;
    if (__p)
    {
      uint64_t v60 = __p;
LABEL_74:
      operator delete(v49);
    }
LABEL_75:

    if (SHIBYTE(v69) < 0) {
      operator delete(v68[0]);
    }
    v24 += 24;
  }
  while (v24 != (unsigned __int8 *)&turi::capi_server_initialized);
}

void sub_223DCA454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void turi::neural_net::LstmLayer::GpuUpdate(id *a1, void *a2)
{
  id v18 = a2;
  double v24 = a1;
  for (unint64_t i = 0; i < objc_msgSend(a1[30], "count", v18); ++i)
  {
    uint64_t v3 = [a1[28] objectAtIndexedSubscript:i];
    uint64_t v4 = [a1[31] objectAtIndexedSubscript:i];
    uint64_t v6 = turi::neural_net::MPSMatrixToVector(v4, v5);
    id v7 = [a1[30] objectAtIndexedSubscript:i];
    uint64_t v9 = turi::neural_net::MPSMatrixToVector(v7, v8);
    id v22 = [a1[33] objectAtIndexedSubscript:i];
    id v23 = v7;
    int v11 = turi::neural_net::MPSMatrixToVector(v22, v10);
    [a1[34] objectAtIndexedSubscript:i];
    id v20 = v4;
    double v21 = (void *)v3;
    id v19 = (turi::neural_net *)objc_claimAutoreleasedReturnValue();
    std::string::size_type v13 = turi::neural_net::MPSMatrixToVector(v19, v12);
    unint64_t v14 = [v24[30] objectAtIndexedSubscript:i];
    int v15 = (void *)v6;
    uint64_t v17 = turi::neural_net::MPSMatrixToVector(v14, v16);
    [v21 encodeToCommandBuffer:v18 inputGradientVector:v15 inputValuesVector:v9 inputMomentumVector:v11 inputVelocityVector:v13 resultValuesVector:v17];

    a1 = v24;
  }
}

void sub_223DCA79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_223DCA810()
{
}

void sub_223DCA818()
{
}

void sub_223DCA820()
{
}

void sub_223DCA828()
{
}

void sub_223DCA830()
{
}

void sub_223DCA838()
{
}

void sub_223DCA840()
{
}

void turi::neural_net::Layer::AllocImage(uint64_t a1, void *a2, int a3)
{
  id v22 = a2;
  size_t v5 = *(int **)(a1 + 120);
  int v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  uint64_t v9 = *(int *)(*(void *)(a1 + 144) + 12);
  int v10 = [MEMORY[0x263F13278] imageDescriptorWithChannelFormat:4 width:v8 height:v7 featureChannels:v5[3] numberOfImages:1 usage:3];
  int v11 = [MEMORY[0x263F13278] imageDescriptorWithChannelFormat:4 width:v8 height:v7 featureChannels:v9 numberOfImages:1 usage:3];
  std::string::size_type v12 = *(void **)(a1 + 16);
  uint64_t v13 = MEMORY[0x263EFFA68];
  *(void *)(a1 + 16) = MEMORY[0x263EFFA68];

  unint64_t v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;

  if (v6 >= 1)
  {
    int v15 = v6;
    do
    {
      uint64_t v16 = (void *)[objc_alloc(MEMORY[0x263F13220]) initWithDevice:v22 imageDescriptor:v10];
      uint64_t v17 = [*(id *)(a1 + 16) arrayByAddingObject:v16];
      id v18 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v17;

      --v15;
    }
    while (v15);
    if (a3)
    {
      do
      {
        id v19 = (void *)[objc_alloc(MEMORY[0x263F13220]) initWithDevice:v22 imageDescriptor:v11];
        uint64_t v20 = [*(id *)(a1 + 24) arrayByAddingObject:v19];
        double v21 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v20;

        --v6;
      }
      while (v6);
    }
  }
}

void sub_223DCA9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::Layer::AllocTempImageBatch(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = *(int **)(a1 + 120);
  int v10 = v9;
  if (a4) {
    int v10 = *(int **)(a1 + 144);
  }
  uint64_t v11 = *v9;
  std::string::size_type v12 = [MEMORY[0x263F13278] imageDescriptorWithChannelFormat:4 width:v9[2] height:v9[1] featureChannels:v10[3] numberOfImages:1 usage:3];
  uint64_t v13 = [MEMORY[0x263F133D8] defaultAllocator];
  unint64_t v14 = [v13 imageBatchForCommandBuffer:v7 imageDescriptor:v12 kernel:v8 count:v11];

  return v14;
}

void sub_223DCAAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::ReLULayer::~ReLULayer(id *this)
{
  turi::neural_net::DropOutLayer::~DropOutLayer(this);
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::ConvLayer::~ConvLayer(id *this)
{
  turi::neural_net::ConvLayer::~ConvLayer(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t vars8;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

void turi::neural_net::BNLayer::~BNLayer(id *this)
{
  turi::neural_net::BNLayer::~BNLayer(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t vars8;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

void turi::neural_net::DropOutLayer::~DropOutLayer(id *this)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

{
  uint64_t vars8;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::SmceLossLayer::~SmceLossLayer(id *this)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

{
  uint64_t vars8;

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::LstmLayer::~LstmLayer(id *this)
{
  turi::neural_net::LstmLayer::~LstmLayer(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t vars8;

  *this = &unk_26D7539B0;
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::~__hash_table((uint64_t)(this + 41));

  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)this);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

void turi::neural_net::Layer::~Layer(turi::neural_net::Layer *this)
{
  *(void *)this = &unk_26D753A30;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 13) = v4;
    operator delete(v4);
  }
  size_t v5 = (void *)*((void *)this + 9);
  if (v5)
  {
    *((void *)this + 10) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MPSMatrix * {__strong}>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MPSMatrix * {__strong}>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      id v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    BOOL v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_223DCBA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_223DCBAF4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      long long v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *long long v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            long long v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          long long v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MPSMatrix * {__strong}>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

id turi::neural_net::createWeightMatrix(void *a1, unint64_t a2, int a3, int a4)
{
  id v7 = a1;
  if (((1 << a2) & 0x22220) != 0) {
    int v8 = 1;
  }
  else {
    int v8 = a4;
  }
  if (((1 << a2) & 0x11244444) != 0) {
    int v9 = 1;
  }
  else {
    int v9 = v8;
  }
  if (((1 << a2) & 0x2488889) != 0) {
    int v10 = a3;
  }
  else {
    int v10 = a4;
  }
  if (((1 << a2) & 0x2488889) != 0) {
    int v11 = a4;
  }
  else {
    int v11 = v9;
  }
  BOOL v12 = a2 > 0x1C;
  if (a2 <= 0x1C) {
    int v13 = v10;
  }
  else {
    int v13 = a4;
  }
  if (v12) {
    int v14 = a4;
  }
  else {
    int v14 = v11;
  }
  id v15 = v7;
  unint64_t v16 = (void *)MEMORY[0x22A615770]();
  [MEMORY[0x263F13340] rowBytesForColumns:v13 dataType:268435488];
  uint64_t v17 = 4 * v13;
  float v18 = [MEMORY[0x263F13340] matrixDescriptorWithRows:v14 columns:v13 rowBytes:v17 dataType:268435488];
  id v19 = (id) [v15 newBufferWithLength:v17 * v14 options:0];
  bzero((void *)[v19 contents], objc_msgSend(v19, "length"));
  unint64_t v20 = (void *)[objc_alloc(MEMORY[0x263F13318]) initWithBuffer:v19 descriptor:v18];

  return v20;
}

void sub_223DCBF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MxnetNameToMatrixId(const void **a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "i2h_i_weight");
    v4[3] = (const void *)3;
    std::string::basic_string[abi:ne180100]<0>(v5, "h2h_i_weight");
    uint64_t v5[3] = 4;
    std::string::basic_string[abi:ne180100]<0>(v6, "h2h_i_bias");
    v6[3] = 6;
    std::string::basic_string[abi:ne180100]<0>(v7, "i2h_f_weight");
    v7[3] = 7;
    std::string::basic_string[abi:ne180100]<0>(v8, "h2h_f_weight");
    void v8[3] = 8;
    std::string::basic_string[abi:ne180100]<0>(v9, "h2h_f_bias");
    void v9[3] = 10;
    std::string::basic_string[abi:ne180100]<0>(v10, "i2h_c_weight");
    v10[3] = 11;
    std::string::basic_string[abi:ne180100]<0>(v11, "h2h_c_weight");
    v11[3] = 12;
    std::string::basic_string[abi:ne180100]<0>(v12, "h2h_c_bias");
    v12[3] = 14;
    std::string::basic_string[abi:ne180100]<0>(v13, "i2h_o_weight");
    void v13[3] = 15;
    std::string::basic_string[abi:ne180100]<0>(v14, "h2h_o_weight");
    v14[3] = 16;
    std::string::basic_string[abi:ne180100]<0>(v15, "h2h_o_bias");
    v15[3] = 18;
    std::map<std::string,MPSRNNMatrixId>::map[abi:ne180100]((uint64_t)&turi::neural_net::MxnetNameToMatrixId(std::string)::MXnetNamesToMatId, v4, 12);
    uint64_t v3 = 48;
    do
    {
      if (*((char *)&v4[v3 - 1] - 1) < 0) {
        operator delete((void *)v4[v3 - 4]);
      }
      v3 -= 4;
    }
    while (v3 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,MPSRNNMatrixId>::~map[abi:ne180100], &turi::neural_net::MxnetNameToMatrixId(std::string)::MXnetNamesToMatId, &dword_223D44000);
  }
  return *(void *)(std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::neural_net::MxnetNameToMatrixId(std::string)::MXnetNamesToMatId, a1)+ 56);
}

void sub_223DCC1C8(_Unwind_Exception *a1)
{
  uint64_t v3 = 384;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0) {
      operator delete(*(void **)(v1 + v3 - 32));
    }
    v3 -= 32;
    if (!v3)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::map<std::string,MPSRNNMatrixId>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

id turi::neural_net::MPSMatrixToVector(turi::neural_net *this, MPSMatrix *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = [(turi::neural_net *)v2 dataType];
  uint64_t v4 = [(turi::neural_net *)v2 rows];
  unint64_t v5 = [(turi::neural_net *)v2 rowBytes];
  uint64_t v6 = [MEMORY[0x263F133F0] vectorDescriptorWithLength:v5 / ((v3 >> 3) & 0xF) * v4 dataType:v3];
  id v7 = objc_alloc(MEMORY[0x263F133E8]);
  int v8 = [(turi::neural_net *)v2 data];
  int v9 = (void *)[v7 initWithBuffer:v8 descriptor:v6];

  return v9;
}

void sub_223DCC34C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,MPSRNNMatrixId>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MPSRNNMatrixId> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_223DCC3E8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MPSRNNMatrixId> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__construct_node<std::pair<std::string const,MPSRNNMatrixId> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__construct_node<std::pair<std::string const,MPSRNNMatrixId> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  id v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_223DCC510(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void __cxx_global_array_dtor()
{
  uint64_t v0 = 0x24u;
  do
  {
    if (SHIBYTE(turi::neural_net::lstm_weight_names_mxnet_format[v0 - 1]) < 0) {
      operator delete((void *)turi::neural_net::lstm_weight_names_mxnet_format[v0 - 3]);
    }
    v0 -= 3;
  }
  while (v0 * 8);
}

void turi::neural_net::createNetwork(int a1)
{
  switch(a1)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      operator new();
    case 8:
      operator new();
    case 9:
      operator new();
    case 10:
      operator new();
    default:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Undefined network.");
      __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
}

void sub_223DCC8A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::MPSNetwork::~MPSNetwork(turi::neural_net::MPSNetwork *this)
{
  *(void *)this = &unk_26D753A98;
  uint64_t v4 = (char *)this + 8;
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(void))(*(void *)v6 + 80))(v2[v5]);
        uint64_t v2 = (void *)*((void *)this + 1);
        uint64_t v3 = (void *)*((void *)this + 2);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7)
  {
    (*(void (**)(void))(*(void *)v7 + 80))(*((void *)this + 4));
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  turi::neural_net::MPSNetwork::~MPSNetwork(this);
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MPSNetwork::Init(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v13 = a2;
  id v7 = a3;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16) - v8;
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = v9 >> 3;
    do
    {
      (*(void (**)(void, id, id, uint64_t, void, void, BOOL))(**(void **)(v8 + 8 * v10) + 16))(*(void *)(v8 + 8 * v10), v13, v7, a4, *(unsigned __int8 *)(a1 + 48), *(unsigned int *)(a1 + 44), v10 == v11 - 1);
      ++v10;
      uint64_t v8 = *(void *)(a1 + 8);
      unint64_t v11 = (*(void *)(a1 + 16) - v8) >> 3;
    }
    while (v10 < v11);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12) {
    (*(void (**)(uint64_t, id, id, uint64_t, uint64_t, void, uint64_t))(*(void *)v12 + 16))(v12, v13, v7, a4, 1, *(unsigned int *)(a1 + 44), 1);
  }
}

void sub_223DCCB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

MPSImageBatch *turi::neural_net::MPSNetwork::Forward(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (MPSImageBatch *)v7;
  unint64_t v10 = v9;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = v9;
  if (*(void *)(a1 + 16) != v11)
  {
    unint64_t v13 = 0;
    int v14 = v9;
    do
    {
      if (a4)
      {
        if (*(_DWORD *)(*(void *)(v11 + 8 * v13) + 40) == 3) {
          NSInteger v15 = 3;
        }
        else {
          NSInteger v15 = 1;
        }
        MPSImageBatchIncrementReadCount(v14, v15);
        uint64_t v11 = *(void *)(a1 + 8);
      }
      (***(void (****)(void, MPSImageBatch *, id, uint64_t))(v11 + 8 * v13))(*(void *)(v11 + 8 * v13), v14, v8, a4);
      uint64_t v12 = (MPSImageBatch *)*(id *)(*(void *)(*(void *)(a1 + 8) + 8 * v13) + 16);

      ++v13;
      uint64_t v11 = *(void *)(a1 + 8);
      int v14 = v12;
    }
    while (v13 < (*(void *)(a1 + 16) - v11) >> 3);
  }

  return v12;
}

void sub_223DCCC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

MPSImageBatch *turi::neural_net::MPSNetwork::Backward(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (MPSImageBatch *)v5;
  id v8 = v7;
  uint64_t v9 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  unint64_t v10 = v7;
  if ((int)v9 - 1 >= 0)
  {
    uint64_t v11 = 8 * (v9 - 1);
    uint64_t v12 = v7;
    do
    {
      unint64_t v13 = *(_DWORD **)(*(void *)(a1 + 8) + v11);
      if (v13[10] == 3)
      {
        MPSImageBatchIncrementReadCount(v12, 1);
        unint64_t v13 = *(_DWORD **)(*(void *)(a1 + 8) + v11);
      }
      (*(void (**)(_DWORD *, MPSImageBatch *, id))(*(void *)v13 + 8))(v13, v12, v6);
      unint64_t v10 = (MPSImageBatch *)*(id *)(*(void *)(*(void *)(a1 + 8) + v11) + 24);

      LODWORD(v9) = v9 - 1;
      v11 -= 8;
      uint64_t v12 = v10;
    }
    while ((int)v9 > 0);
  }

  return v10;
}

void sub_223DCCDBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MPSNetwork::Load(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (*(void *)(result + 16) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 24))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 8);
    }
    while (v5 < (*(void *)(v4 + 16) - v2) >> 3);
  }
  return result;
}

void turi::neural_net::MPSNetwork::Export(turi::neural_net::MPSNetwork *this@<X0>, uint64_t *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  uint64_t v3 = *((void *)this + 1);
  if (*((void *)this + 2) != v3)
  {
    unint64_t v5 = 0;
    do
    {
      (*(void (**)(const void ***__return_ptr))(**(void **)(v3 + 8 * v5) + 32))(&v6);
      std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>(a2, v6, &v7);
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v6, v7);
      ++v5;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v5 < (*((void *)this + 2) - v3) >> 3);
  }
}

void sub_223DCCF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v11, *(void **)(v11 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::MPSNetwork::GpuUpdate(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v3)
  {
    unint64_t v4 = 0;
    do
    {
      (*(void (**)(void, id))(**(void **)(v3 + 8 * v4) + 48))(*(void *)(v3 + 8 * v4), v5);
      ++v4;
      uint64_t v3 = *(void *)(a1 + 8);
    }
    while (v4 < (*(void *)(a1 + 16) - v3) >> 3);
  }
}

void sub_223DCCFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::MPSNetwork::Loss(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v10)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Calling network Loss without defining a loss layer");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  (*(void (**)(uint64_t, id, id, id))(*(void *)v10 + 88))(v10, v7, v8, v9);
  id v11 = *(id *)(*(void *)(a1 + 32) + 24);

  return v11;
}

void sub_223DCD0D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v4);

  _Unwind_Resume(a1);
}

void turi::neural_net::SingleReLUNetwork::SingleReLUNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753AC8;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DCD264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MPSNetwork::MPSNetwork(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D753A98;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "mode");
  float array_map_scalar = turi::neural_net::get_array_map_scalar(a2, (const void **)__p, 0.0);
  *(_DWORD *)(a1 + 44) = array_map_scalar;
  *(unsigned char *)(a1 + 48) = (array_map_scalar & 0xFFFFFFFD) == 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_223DCD3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  float v18 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 16) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::SingleReLUNetwork::~SingleReLUNetwork(turi::neural_net::SingleReLUNetwork *this)
{
  turi::neural_net::MPSNetwork::~MPSNetwork(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::ReLULayer::ReLULayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_26D753600;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 96 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  id v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (a1 + 120 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 144 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DCD4FC(_Unwind_Exception *a1)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleConvNetwork::SingleConvNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753B00;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DCD6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C409E45F289);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::ConvLayer::ConvLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_26D753690;
  *(unsigned char *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 40) = 2;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  id v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (a1 + 120 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 144 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DCD824(_Unwind_Exception *a1)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleBNNetwork::SingleBNNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753B38;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DCD9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C4009BD9334);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::BNLayer::BNLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_26D753710;
  *(_WORD *)(a1 + 168) = 256;
  *(unsigned char *)(a1 + 170) = 1;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 40) = 3;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  id v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v10 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0;

  if (a1 + 120 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 144 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DCDB58(_Unwind_Exception *a1)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleMPNetwork::SingleMPNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753B70;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DCDD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::MaxPoolLayer::MaxPoolLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_26D753790;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 40) = 4;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  id v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (a1 + 120 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 144 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DCDE80(_Unwind_Exception *a1)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::Single1DConvNetwork::Single1DConvNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753BA8;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DCE030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C409E45F289);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

void turi::neural_net::ODNetwork::ODNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3) = &unk_26D753BE0;
  uint64_t v3 = operator new(0x24uLL);
  v3[8] = 1024;
  *(_OWORD *)uint64_t v3 = xmmword_2246B85CC;
  *((_OWORD *)v3 + 1) = unk_2246B85DC;
  std::to_string(&v4, 0);
  operator new();
}

void sub_223DCEB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  MEMORY[0x22A614FA0](v32, 0x1093C409E45F289);
  operator delete(__p);
  turi::neural_net::MPSNetwork::~MPSNetwork(v31);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleDropOutNetwork::SingleDropOutNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753C18;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DCEFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::DropOutLayer::DropOutLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_26D753810;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 40) = 5;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  id v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (a1 + 120 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 144 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DCF140(_Unwind_Exception *a1)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::ActivityClassifierNetwork::ActivityClassifierNetwork(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3) = &unk_26D753C50;
  uint64_t v5 = *a2;
  LODWORD(a2) = *(_DWORD *)(*a2 + 8);
  int v6 = *(_DWORD *)(v5 + 20);
  std::string::basic_string[abi:ne180100]<0>(__p, "ac_pred_window");
  turi::neural_net::get_array_map_scalar(a3, (const void **)__p, (float)((int)a2 / v6));
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ac_seq_len");
  turi::neural_net::get_array_map_scalar(a3, (const void **)__p, (float)v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_223DD0310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  MEMORY[0x22A614FA0](v26, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v25);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::LstmLayer::LstmLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v10 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)a1 = &unk_26D7539B0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = objc_opt_new();
  *(void *)(a1 + 248) = objc_opt_new();
  *(void *)(a1 + 256) = objc_opt_new();
  *(void *)(a1 + 264) = objc_opt_new();
  *(void *)(a1 + 272) = objc_opt_new();
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_DWORD *)(a1 + 40) = 8;
  std::string::operator=(v10, a2);
  if (a1 + 72 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  id v11 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (a1 + 120 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 144 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DD08C8(_Unwind_Exception *a1)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SoftMaxLayer::SoftMaxLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_26D753890;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 40) = 6;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  id v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (a1 + 120 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 144 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DD0A68(_Unwind_Exception *a1)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::SmceLossLayer::SmceLossLayer(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)a1 = &unk_26D753910;
  *(_DWORD *)(a1 + 40) = 7;
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (a1 + 72 != a3) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  id v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (a1 + 120 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  if (a1 + 144 != a5) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  }
  return a1;
}

void sub_223DD0B6C(_Unwind_Exception *a1)
{
  turi::neural_net::Layer::~Layer((turi::neural_net::Layer *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleFcNetwork::SingleFcNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753C88;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DD0CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C409E45F289);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleSoftMaxNetwork::SingleSoftMaxNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753CC0;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DD0EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x1093C4050D042D5);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

void turi::neural_net::SingleLstmNetwork::SingleLstmNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)turi::neural_net::MPSNetwork::MPSNetwork(a1, a3);
  *uint64_t v3 = &unk_26D753CF8;
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)(v3 + 1), 1uLL);
  operator new();
}

void sub_223DD10CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*(void **)(v20 - 72));
  }
  MEMORY[0x22A614FA0](v19, 0x10B3C40E1FA6E55);
  turi::neural_net::MPSNetwork::~MPSNetwork(v18);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_od_backend::ensure_training_module(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

void sub_223DD140C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B1C40669011DBLL);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_od_backend::ensure_prediction_module(uint64_t this)
{
  if (!*(void *)(this + 112))
  {
    uint64_t v1 = this;
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)&v18, (const void ***)(this + 56));
    turi::neural_net::shared_float_array::wrap(2.0, (uint64_t)&v14);
    std::string::basic_string[abi:ne180100]<0>(&__p, "mode");
    p_p = &__p;
    uint64_t v2 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v18, (const void **)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    long long v3 = v15;
    long long v15 = 0uLL;
    std::string v4 = (std::__shared_weak_count *)v2[9];
    *((_OWORD *)v2 + 4) = v3;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    long long v5 = v17;
    *((_OWORD *)v2 + 5) = v16;
    *((_OWORD *)v2 + 6) = v5;
    if (SHIBYTE(v13) < 0) {
      operator delete(__p);
    }
    int v14 = (long long *)&unk_26D752D58;
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
    turi::neural_net::shared_float_array::wrap(0.0, (uint64_t)&v14);
    std::string::basic_string[abi:ne180100]<0>(&__p, "od_include_loss");
    p_p = &__p;
    int v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v18, (const void **)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    long long v7 = v15;
    long long v15 = 0uLL;
    char v8 = (std::__shared_weak_count *)v6[9];
    *((_OWORD *)v6 + 4) = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    long long v9 = v17;
    *((_OWORD *)v6 + 5) = v16;
    *((_OWORD *)v6 + 6) = v9;
    if (SHIBYTE(v13) < 0) {
      operator delete(__p);
    }
    int v14 = (long long *)&unk_26D752D58;
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
    long long v15 = 0uLL;
    int v14 = &v15;
    uint64_t v10 = *(void *)(v1 + 104);
    if (v10)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v10 + 16))(&__p);
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v14, (void *)v15);
      id v11 = (void *)v13;
      int v14 = (long long *)__p;
      long long v15 = v13;
      if (*((void *)&v13 + 1))
      {
        *(void *)(v13 + 16) = &v15;
        std::string __p = &v13;
        long long v13 = 0uLL;
        id v11 = 0;
      }
      else
      {
        int v14 = &v15;
      }
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&__p, v11);
    }
    else if (&v14 != (long long **)(v1 + 80))
    {
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>((uint64_t **)&v14, *(long long **)(v1 + 80), (long long *)(v1 + 88));
    }
    operator new();
  }
  return this;
}

void sub_223DD1700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a18, a19);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v20 - 72, *(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_od_backend::mps_od_backend(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D753D30;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 24) = v3;
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  std::string v4 = (uint64_t *)(a1 + 56);
  long long v5 = (void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = a1 + 64;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *(void *)(a2 + 48) = v5;
    *long long v5 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *std::string v4 = v7;
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 72);
  long long v9 = (void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = a1 + 88;
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *(void *)(a2 + 72) = v9;
    *long long v9 = 0;
    *(void *)(a2 + 88) = 0;
  }
  else
  {
    *(void *)(a1 + 80) = v11;
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "mode");
  uint64_t v13 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)__p);
  float v14 = *(float *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v14 == 0.0) {
    turi::neural_net::mps_od_backend::ensure_training_module(a1);
  }
  else {
    turi::neural_net::mps_od_backend::ensure_prediction_module(a1);
  }
  return a1;
}

void sub_223DD190C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v19 = *(void *)(v16 + 112);
  *(void *)(v16 + 112) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *v17;
  *char v17 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  turi::neural_net::mps_od_backend::parameters::~parameters(v15);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_od_backend::set_learning_rate(turi::neural_net::mps_od_backend *this, float a2)
{
  turi::neural_net::mps_od_backend::ensure_training_module((uint64_t)this);
  std::string v4 = *(uint64_t (**)(__n128))(**((void **)this + 13) + 32);
  v5.n128_f32[0] = a2;
  return v4(v5);
}

uint64_t turi::neural_net::mps_od_backend::train(turi::neural_net::mps_od_backend *this)
{
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  turi::neural_net::mps_od_backend::ensure_training_module((uint64_t)this);
  long long v3 = *(uint64_t (**)(void))(**((void **)this + 13) + 40);
  return v3();
}

uint64_t turi::neural_net::mps_od_backend::predict(uint64_t a1)
{
  turi::neural_net::mps_od_backend::ensure_prediction_module(a1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 112) + 24);
  return v2();
}

uint64_t *turi::neural_net::mps_od_backend::export_weights@<X0>(turi::neural_net::mps_od_backend *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 13);
  if (v3) {
    return (uint64_t *)(*(uint64_t (**)(void))(*(void *)v3 + 16))();
  }
  else {
    return std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a2, (const void ***)this + 10);
  }
}

void turi::neural_net::mps_od_backend::~mps_od_backend(turi::neural_net::mps_od_backend *this)
{
  *(void *)this = &unk_26D753D30;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::string v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_26D753D30;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::string v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string&&>((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223DD1E00(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string&&>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)(a1 + 24));
  return a1;
}

void sub_223DD1E58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float turi::neural_net::SGDUpdater::Init(uint64_t a1, uint64_t a2, float **a3)
{
  float result = **a3;
  *(float *)(a1 + 8) = result;
  return result;
}

float turi::neural_net::SGDUpdater::Update(turi::neural_net::SGDUpdater *this, float *a2, float *a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = a4;
    do
    {
      float v5 = *a3++;
      float result = *a2 - (float)(*((float *)this + 2) * v5);
      *a2++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

void turi::neural_net::MomUpdater::Init(uint64_t a1, uint64_t *a2)
{
  long long v3 = (void *)(a1 + 16);
  std::vector<std::vector<std::vector<float>>>::resize((uint64_t *)(a1 + 16), (a2[1] - *a2) >> 3);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if ((*(_DWORD *)(*(void *)(v5 + 8 * v7) + 40) & 0xFFFFFFFE) == 2)
      {
        std::vector<std::vector<float>>::resize((uint64_t *)(*v3 + v6), 2uLL);
        uint64_t v5 = *a2;
        uint64_t v4 = a2[1];
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < (v4 - v5) >> 3);
  }
}

void std::vector<std::vector<std::vector<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  long long v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        long long v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

float turi::neural_net::MomUpdater::Update(turi::neural_net::MomUpdater *this, float *a2, float *a3, int a4, int a5, int a6, float result)
{
  uint64_t v13 = (void *)(*(void *)(*((void *)this + 2) + 24 * a5) + 24 * a6);
  if (v13[1] == *v13)
  {
    std::vector<float>::resize((uint64_t)v13, a4);
    if (a4 < 1) {
      return result;
    }
    bzero(*(void **)(*(void *)(*((void *)this + 2) + 24 * a5) + 24 * a6), 4 * a4);
  }
  else if (a4 < 1)
  {
    return result;
  }
  float v14 = *(float **)(*(void *)(*((void *)this + 2) + 24 * a5) + 24 * a6);
  uint64_t v15 = a4;
  do
  {
    float v16 = *a3++;
    float v17 = v16;
    float v18 = *((float *)this + 11);
    if (v16 > v18) {
      float v17 = *((float *)this + 11);
    }
    float v19 = -v18;
    if (v17 < v19) {
      float v17 = v19;
    }
    float v20 = (float)(*((float *)this + 12) * *v14) - (float)(*((float *)this + 10) * v17);
    *v14++ = v20;
    float result = *a2 + (float)(v20 - (float)(*((float *)this + 13) * *a2));
    *a2++ = result;
    --v15;
  }
  while (v15);
  return result;
}

void turi::neural_net::createUpdater(turi::neural_net *this)
{
  if (this != 2)
  {
    if (this != 1)
    {
      if (!this) {
        operator new();
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Undefined updater id.");
      __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
    }
    operator new();
  }
  operator new();
}

void sub_223DD2304(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::AdamUpdater::Init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)(a1 + 16);
  std::vector<std::vector<std::vector<float>>>::resize((uint64_t *)(a1 + 16), (a2[1] - *a2) >> 3);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if ((*(_DWORD *)(*(void *)(v5 + 8 * v7) + 40) & 0xFFFFFFFE) == 2)
      {
        std::vector<std::vector<float>>::resize((uint64_t *)(*v3 + v6), 4uLL);
        uint64_t v5 = *a2;
        uint64_t v4 = a2[1];
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < (v4 - v5) >> 3);
  }
}

void turi::neural_net::AdamUpdater::Update(turi::neural_net::AdamUpdater *this, float *a2, float *a3, int a4, int a5, int a6)
{
  uint64_t v10 = 0;
  uint64_t v28 = 4 * a4;
  unint64_t v29 = a4;
  uint64_t v12 = a6;
  char v13 = 1;
  uint64_t v14 = a4;
  do
  {
    while (1)
    {
      char v15 = v13;
      uint64_t v16 = v10 + v12;
      float v17 = (void *)(*(void *)(*((void *)this + 2) + 24 * a5) + 24 * (v10 + v12));
      if (v17[1] != *v17) {
        break;
      }
      std::vector<float>::resize((uint64_t)v17, v29);
      if (a4 <= 0)
      {
        char v13 = 0;
        uint64_t v10 = 2;
        if ((v15 & 1) == 0) {
          return;
        }
      }
      else
      {
        bzero(*(void **)(*(void *)(*((void *)this + 2) + 24 * a5) + 24 * v16), v28);
        char v13 = 0;
        uint64_t v10 = 2;
        if ((v15 & 1) == 0) {
          goto LABEL_11;
        }
      }
    }
    char v13 = 0;
    uint64_t v10 = 2;
  }
  while ((v15 & 1) != 0);
  if (a4 < 1) {
    return;
  }
LABEL_11:
  uint64_t v18 = *(void *)(*((void *)this + 2) + 24 * a5) + 24 * (int)v12;
  float v19 = *((float *)this + 14);
  float v20 = 1.0 - powf(*((float *)this + 11), v19);
  float v21 = powf(*((float *)this + 12), v19);
  size_t v22 = *(float **)v18;
  uint64_t v23 = *(float **)(v18 + 48);
  float v24 = (float)-(float)(*((float *)this + 10) * sqrtf(1.0 - v21)) / v20;
  do
  {
    *size_t v22 = (float)((float)(1.0 - *((float *)this + 11)) * *a3) + (float)(*((float *)this + 11) * *v22);
    float v25 = *a3++;
    float v26 = (float)(v25 * (float)((float)(1.0 - *((float *)this + 12)) * v25)) + (float)(*((float *)this + 12) * *v23);
    *v23++ = v26;
    float v27 = *v22++;
    *a2 = *a2 + (float)(v24 * (float)(v27 / (float)(*((float *)this + 13) + sqrtf(v26))));
    ++a2;
    --v14;
  }
  while (v14);
}

float turi::neural_net::AdamUpdater::NewIteration(turi::neural_net::AdamUpdater *this)
{
  float result = *((float *)this + 14) + 1.0;
  *((float *)this + 14) = result;
  return result;
}

void turi::neural_net::MPSUpdater::MovingAvg(turi::neural_net::MPSUpdater *this, float *a2, float *a3, int a4, float a5)
{
  if (a4 >= 1)
  {
    uint64_t v5 = a4;
    do
    {
      float v6 = *a3++;
      *a2 = (float)((float)(1.0 - a5) * v6) + (float)(a5 * *a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
}

uint64_t turi::neural_net::SGDUpdater::SetLearningRate(uint64_t this, float a2)
{
  *(float *)(this + 8) = a2;
  return this;
}

void turi::neural_net::SGDUpdater::~SGDUpdater(turi::neural_net::SGDUpdater *this)
{
  *(void *)this = &unk_26D753D88;
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26D753D88;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C4037ACD87BLL);
}

void turi::neural_net::MomUpdater::~MomUpdater(turi::neural_net::MomUpdater *this)
{
  *(void *)this = &unk_26D753D88;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C40C9E8D6FDLL);
}

void turi::neural_net::AdamUpdater::~AdamUpdater(turi::neural_net::AdamUpdater *this)
{
  *(void *)this = &unk_26D753D88;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C40CB05DBA4);
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        float v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      float v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<std::vector<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    char v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    float v17 = &v16[v14];
    std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(&v15);
  }
}

void sub_223DD29D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    char v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    float v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_223DD2DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void sub_223DD3170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_223DD3364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_223DD350C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DD3678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DD3C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_223DD3DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DD3EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DD3FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_223DD4768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_223DD4A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223DD4C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_223DD4FC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

BOOL CoreML::Specification::isEquivalent(CoreML::Specification *this, const CoreML::Specification::FeatureDescription *a2, const CoreML::Specification::FeatureDescription *a3)
{
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 2);
  uint64_t v4 = (unsigned __int8 **)*((void *)a2 + 2);
  uint64_t v5 = v3[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v3[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v4[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unint64_t v11 = (unsigned __int8 *)*((void *)a2 + 2);
  }
  else {
    unint64_t v11 = *v4;
  }
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v3, v11, *((void *)v3 + 1))) {
      goto LABEL_17;
    }
    return 0;
  }
  if (v3[23])
  {
    while (*v3 == *v11)
    {
      ++v3;
      ++v11;
      if (!--v5) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  if (*((void *)this + 4)) {
    long long v13 = (uint64_t *)*((void *)this + 4);
  }
  else {
    long long v13 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  if (*((void *)a2 + 4)) {
    long long v14 = (uint64_t *)*((void *)a2 + 4);
  }
  else {
    long long v14 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  return CoreML::Specification::operator==((uint64_t)v13, (uint64_t)v14);
}

BOOL CoreML::Specification::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 36);
  if (v3 != *(_DWORD *)(a2 + 36)) {
    return 0;
  }
  switch(v3)
  {
    case 4:
      uint64_t v4 = *(void *)(a1 + 24);
      uint64_t v5 = *(void *)(a2 + 24);
      if (*(void *)(v4 + 16) != *(void *)(v5 + 16) || *(void *)(v4 + 24) != *(void *)(v5 + 24)) {
        return 0;
      }
      return *(_DWORD *)(v4 + 32) == *(_DWORD *)(v5 + 32);
    case 5:
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = *(void *)(a2 + 24);
      uint64_t v9 = *(unsigned int *)(v7 + 36);
      if (v9 != *(_DWORD *)(v8 + 36)) {
        return 0;
      }
      int v10 = *(_DWORD *)(v7 + 60);
      if (v10)
      {
        if (v10 == 31)
        {
          unint64_t v11 = (int *)(*(void *)(v7 + 40) + 24);
        }
        else
        {
          if (v10 != 21) {
            goto LABEL_20;
          }
          unint64_t v11 = (int *)(*(void *)(*(void *)(*(void *)(v7 + 40) + 32) + 8) + 16);
        }
      }
      else
      {
        unint64_t v11 = (int *)(v7 + 16);
      }
      uint64_t v9 = *v11;
LABEL_20:
      int v15 = *(_DWORD *)(v8 + 60);
      if (v15)
      {
        if (v15 == 31)
        {
          uint64_t v16 = (int *)(*(void *)(v8 + 40) + 24);
        }
        else
        {
          if (v15 != 21) {
            goto LABEL_27;
          }
          uint64_t v16 = (int *)(*(void *)(*(void *)(*(void *)(v8 + 40) + 32) + 8) + 16);
        }
      }
      else
      {
        uint64_t v16 = (int *)(v8 + 16);
      }
      uint64_t v2 = *v16;
LABEL_27:
      if (v9 != v2) {
        return 0;
      }
      if (v15 | v10 || (uint64_t v17 = *(unsigned int *)(v7 + 16), (int)v17 < 1))
      {
LABEL_29:
        BOOL result = 1;
      }
      else
      {
        uint64_t v18 = *(void *)(v7 + 24);
        uint64_t v19 = v17 - 1;
        float v20 = (uint64_t *)(*(void *)(v8 + 24) + 8);
        float v21 = (uint64_t *)(v18 + 8);
        do
        {
          uint64_t v23 = *v21++;
          uint64_t v22 = v23;
          uint64_t v25 = *v20++;
          uint64_t v24 = v25;
          BOOL v27 = v19-- != 0;
          BOOL result = v22 == v24;
        }
        while (v22 == v24 && v27);
      }
      break;
    case 6:
      int v12 = *(_DWORD *)(*(void *)(a2 + 24) + 28);
      int v13 = *(_DWORD *)(*(void *)(a1 + 24) + 28);
      return v13 == v12;
    case 7:
      int v12 = *(_DWORD *)(*(void *)(a2 + 24) + 36);
      int v13 = *(_DWORD *)(*(void *)(a1 + 24) + 36);
      return v13 == v12;
    default:
      goto LABEL_29;
  }
  return result;
}

void CoreML::Recommender::_ItemSimilarityRecommenderData::~_ItemSimilarityRecommenderData(CoreML::Recommender::_ItemSimilarityRecommenderData *this)
{
  int v3 = (void **)((char *)this + 224);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy((uint64_t)this, *((void **)this + 1));
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::begin@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(result + 16);
  unint64_t v3 = v2[3];
  unint64_t v4 = v2[1];
  if (v4 <= v3)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = v2[4];
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 8 * v3);
      if (v6) {
        break;
      }
      if (v4 == ++v3)
      {
        uint64_t v6 = 0;
        unint64_t v3 = v2[1];
        goto LABEL_9;
      }
    }
    if (v6 == *(void *)(v5 + 8 * (v3 ^ 1))) {
      uint64_t v6 = *(void *)(*(void *)v6 + 32);
    }
  }
LABEL_9:
  *a2 = v6;
  a2[1] = v2;
  a2[2] = v3;
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a1, a2);
  unint64_t v9 = result;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(void *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v14, (unsigned __int8 *)v11, a2);
        if (result) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 32);
        if (!v11) {
          goto LABEL_10;
        }
      }
      *a4 = v11;
      goto LABEL_12;
    }
    unint64_t v9 = result & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v12 = *(void *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    int v13 = (const void **)a2;
    uint64_t result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, &v13);
    if (v12 + 8 != result)
    {
      if (a3) {
        *a3 = result;
      }
      *a4 = *(void *)(result + 32);
LABEL_12:
      a4[1] = a1;
      a4[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_13:
  a4[3] = v9;
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(uint64_t a1, unsigned char *a2)
{
  if ((char)a2[23] >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = *(unsigned char **)a2;
  }
  char v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v4 = 5 * v4 + v3;
      int v6 = *v5++;
      char v3 = v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v4 = 0;
  }
  return (*(void *)(a1 + 8) - 1) & (*(void *)(a1 + 16) + v4);
}

uint64_t std::__tree<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, const void ***a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 24;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, *(const void ***)(v3 + 32), *a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, *a2, *(const void ***)(v6 + 32))) {
    return v2;
  }
  return v6;
}

void *_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 32);
  if (v2) {
    goto LABEL_2;
  }
  if (_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::revalidate_if_necessary((uint64_t)a1, (uint64_t *)&v11))
  {
    unint64_t v3 = a1[2] + 1;
LABEL_13:
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(a1, v3);
    return a1;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(*(void *)(a1[1] + 32) + 8 * v4);
  uint64_t v6 = (uint64_t)v11;
  BOOL v7 = (void *)v11[1];
  if (v7)
  {
    do
    {
      uint64_t v8 = v7;
      BOOL v7 = (void *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      uint64_t v8 = *(void **)(v6 + 16);
      BOOL v9 = *v8 == v6;
      uint64_t v6 = (uint64_t)v8;
    }
    while (!v9);
  }
  uint64_t v11 = v8;
  if (v8 == (void *)(v5 + 8))
  {
    unint64_t v3 = v4 + 2;
    goto LABEL_13;
  }
  uint64_t v2 = v8[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

BOOL _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 **)a1;
  uint64_t v6 = *(void *)(a1 + 16) & (*(void *)(v4 + 8) - 1);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v4 + 32);
  uint64_t v8 = *(void *)(v7 + 8 * v6);
  if ((unsigned __int8 *)v8 == v5) {
    return 1;
  }
  if (v8 && v8 != *(void *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      uint64_t v8 = *(void *)(v8 + 32);
      if (!v8) {
        break;
      }
      if ((unsigned __int8 *)v8 == v5) {
        return 1;
      }
    }
  }
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v4, v5, a2, &v13);
  uint64_t v9 = v14;
  *(void *)(a1 + 16) = v14;
  uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v11 = *(void *)(v10 + 8 * v9);
  return !v11 || v11 != *(void *)(v10 + 8 * (v9 ^ 1));
}

void *_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(void *result, unint64_t a2)
{
  uint64_t *result = 0;
  uint64_t v2 = result[1];
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3 <= a2)
  {
LABEL_6:
    result[2] = a2;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 32);
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 8 * a2);
      if (v5) {
        break;
      }
      if (v3 == ++a2)
      {
        a2 = v3;
        goto LABEL_6;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8 * (a2 ^ 1));
    result[2] = a2;
    if (v5 == v6) {
      uint64_t *result = *(void *)(*(void *)v5 + 32);
    }
    else {
      uint64_t *result = v5;
    }
  }
  return result;
}

void *_tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper@<X0>(void *result@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = (result[1] - 1) & (result[2] + *a2);
  uint64_t v6 = result[4];
  uint64_t v7 = *(void **)(v6 + 8 * v5);
  if (v7)
  {
    uint64_t v8 = result;
    if (v7 != *(void **)(v6 + 8 * (v5 ^ 1)))
    {
      while (*v7 != *a2)
      {
        uint64_t v7 = (void *)v7[2];
        if (!v7) {
          goto LABEL_10;
        }
      }
      *a4 = v7;
      goto LABEL_12;
    }
    v5 &= ~1uLL;
    uint64_t v10 = *(void *)(v6 + 8 * v5);
    uint64_t v11 = a2;
    uint64_t result = (void *)std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::find<long long *>(v10, &v11);
    if ((void *)(v10 + 8) != result)
    {
      if (a3) {
        *a3 = result;
      }
      *a4 = result[4];
LABEL_12:
      a4[1] = v8;
      a4[2] = v5;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_13:
  a4[3] = v5;
  return result;
}

uint64_t std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::find<long long *>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  uint64_t v5 = **a2;
  uint64_t v6 = v2;
  do
  {
    uint64_t v7 = **(void **)(v3 + 32);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v3;
    }
    else {
      uint64_t v9 = (uint64_t *)(v3 + 8);
    }
    if (!v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < **(void **)(v6 + 32)) {
    return v2;
  }
  return v6;
}

void *_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 16);
  if (v2) {
    goto LABEL_2;
  }
  if (_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::revalidate_if_necessary((uint64_t)a1, &v11))
  {
    unint64_t v3 = a1[2] + 1;
LABEL_13:
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(a1, v3);
    return a1;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(*(void *)(a1[1] + 32) + 8 * v4);
  uint64_t v6 = v11;
  uint64_t v7 = (void *)v11[1];
  if (v7)
  {
    do
    {
      BOOL v8 = v7;
      uint64_t v7 = (void *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      BOOL v8 = (void *)v6[2];
      BOOL v9 = *v8 == (void)v6;
      uint64_t v6 = v8;
    }
    while (!v9);
  }
  uint64_t v11 = v8;
  if (v8 == (void *)(v5 + 8))
  {
    unint64_t v3 = v4 + 2;
    goto LABEL_13;
  }
  uint64_t v2 = v8[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

BOOL _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::revalidate_if_necessary(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)a1;
  uint64_t v6 = *(void *)(a1 + 16) & (v4[1] - 1);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = v4[4];
  BOOL v8 = *(uint64_t **)(v7 + 8 * v6);
  if (v8 == v5) {
    return 1;
  }
  if (v8 && v8 != *(uint64_t **)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      BOOL v8 = (uint64_t *)v8[2];
      if (!v8) {
        break;
      }
      if (v8 == v5) {
        return 1;
      }
    }
  }
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(v4, v5, a2, &v13);
  uint64_t v9 = v14;
  *(void *)(a1 + 16) = v14;
  uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v11 = *(void *)(v10 + 8 * v9);
  return !v11 || v11 != *(void *)(v10 + 8 * (v9 ^ 1));
}

void turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool(uint64_t a1)
{
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((void *)(a1 + 96));
  uint64_t v2 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  turi::mutex::~mutex((pthread_mutex_t *)a1);
}

uint64_t std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 256;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    int v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void turi::mutex::~mutex(pthread_mutex_t *this)
{
  if (pthread_mutex_destroy(this))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Mutex destroy error ", 20);
    uint64_t v1 = (void *)std::ostream::operator<<();
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    abort();
  }
}

void turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>(a2, a1);
}

void sub_223DDA5C0(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_converter<std::vector<std::string>>::set(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<12>::set<std::vector<std::string>>(a2, a1);
}

void sub_223DDA6BC(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_converter<std::string>::set(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  turi::flexible_type::operator=<std::string>(a1);
}

void sub_223DDA7B8(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::toolkit_class_specification::~toolkit_class_specification(turi::toolkit_class_specification *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void *std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void *turi::flexible_type_impl::ndarray<double>::~ndarray(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void turi::ml_model_base::~ml_model_base(char **this)
{
  *this = (char *)&unk_26D753F98;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)(this + 37), this[38]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)(this + 34), this[35]);
  uint64_t v2 = (void **)(this + 31);
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 28), this[29]);
  turi::model_base::~model_base((turi::model_base *)this);
}

void turi::ml_model_base::perform_registration(turi::ml_model_base *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  turi::model_base::perform_registration(this);
}

void sub_223DDADE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a38);
  *(void *)(v38 - 96) = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 96));
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26D754098;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_223DDB058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = &v9;
  char v13 = 0;
  uint64_t v9 = (std::string *)operator new(0x18uLL);
  uint64_t v10 = v9;
  uint64_t v11 = v9 + 1;
  uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)__p, v17, v9);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(a2, a3, (uint64_t)&v9, (uint64_t)v17);
  unint64_t v12 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v17);
  *(void *)(a4 + 24) = 0;
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_26D7543B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v14);
  *(void *)(a4 + 24) = v7;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v14);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
}

void sub_223DDB1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v24 - 88));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,turi::flexible_type const&,std::string const&>@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26D7544B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_223DDB304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

void *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseEbJEJEEENSt3__18functionIFN5boost7variantINS5_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSC_INS_10model_baseEEENSC_INS_17unity_sframe_baseEEENSC_INS_17unity_sarray_baseEEENS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS5_18recursive_variant_ENS3_4lessISS_EENSQ_INS3_4pairIKSS_ST_EEEEEENS3_6vectorIST_NSQ_IST_EEEENS5_17recursive_wrapperINS_21function_closure_infoEEEEEEPSG_NSM_ISS_S17_SV_NSQ_INSW_ISX_S17_EEEEEEEEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26D7545B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_223DDB408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

void *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_13flexible_typeENS3_4lessISA_EENS8_INS3_4pairIKSA_SB_EEEEEEJEJEEENS3_8functionIFN5boost7variantINSK_6detail7variant14recursive_flagISB_EEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSQ_INS_10model_baseEEENSQ_INS_17unity_sframe_baseEEENSQ_INS_17unity_sarray_baseEEENS4_ISA_NSK_18recursive_variant_ESD_NS8_INSE_ISF_S10_EEEEEENS3_6vectorIS10_NS8_IS10_EEEENSK_17recursive_wrapperINS_21function_closure_infoEEEEEEPSU_NS4_ISA_S1A_SD_NS8_INSE_ISF_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26D7546B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_223DDB50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

void *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN5boost7variantINSB_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSI_INS_10model_baseEEENSI_INS_17unity_sframe_baseEEENSI_INS_17unity_sarray_baseEEENS4_ISA_NSB_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SS_EEEEEENS3_6vectorISS_NS8_ISS_EEEENSB_17recursive_wrapperINS_21function_closure_infoEEEEEESU_NS8_INSV_ISW_S16_EEEEEEJEJEEENS3_8functionIFS16_PSM_S19_EEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26D7547B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_223DDB610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26D7548B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_223DDB714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  char v13 = (char *)operator new(0x30uLL);
  *(void *)char v13 = &unk_26D754008;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223DDB924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  uint64_t i = (std::string *)__position.__i_;
  std::vector<std::string>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v8 = value;
  if (end >= value)
  {
    begiuint64_t n = this->__begin_;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)begin) >> 3);
    unint64_t v15 = 2 * v14;
    if (2 * v14 <= v12) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v15;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v16) {
      uint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    __v.__first_ = v17;
    __v.__begin_ = v17 + v13;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v17[v16];
    std::__split_buffer<std::string>::push_back(&__v, __x);
    uint64_t i = std::vector<std::string>::__swap_out_circular_buffer(this, &__v, i);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else if (__position.__i_ == end)
  {
    long long v18 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    __position.__i_->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__position.__i_->__r_.__value_.__l.__data_ = v18;
    __x->__r_.__value_.__l.__size_ = 0;
    __x->__r_.__value_.__r.__words[2] = 0;
    __x->__r_.__value_.__r.__words[0] = 0;
    this->__end_ = (std::vector<std::string>::pointer)&__position.__i_[1];
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i->__r_.__value_.__l.__data_);
    }
    long long v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    i->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&i->__r_.__value_.__l.__data_ = v10;
    *((unsigned char *)&__x->__r_.__value_.__s + 23) = 0;
    __x->__r_.__value_.__s.__data_[0] = 0;
  }
  return (std::vector<std::string>::iterator)i;
}

void sub_223DDBAE8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void turi::toolkit_function_specification::~toolkit_function_specification(turi::toolkit_function_specification *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end = this->__end_;
  uint64_t v7 = (char *)__from_s + (char *)end - (char *)__to;
  std::vector<std::string>::pointer v8 = end;
  if (v7 < (char *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::string>::pointer v8 = this->__end_;
    do
    {
      long long v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::push_back(std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::value_type *__x)
{
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    begiuint64_t n = (long long *)this->__begin_;
    if ((std::__split_buffer<std::string>::pointer)begin <= this->__first_)
    {
      if (end == this->__first_) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * (((char *)end - (char *)this->__first_) >> 3);
      }
      unint64_t v11 = v10 >> 2;
      value = this->__end_cap_.__value_;
      v26.__end_cap_.__value_ = this->__end_cap_.__value_;
      unint64_t v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)value, v10);
      unint64_t v15 = &v13[v11];
      std::__split_buffer<std::string>::pointer v16 = this->__begin_;
      int64_t v17 = (char *)this->__end_ - (char *)v16;
      if (v17)
      {
        uint64_t v18 = v17 / 24;
        uint64_t v19 = &v15[v18];
        uint64_t v20 = 24 * v18;
        uint64_t v21 = &v13[v11];
        do
        {
          long long v22 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          v21->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
          ++v21;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          ++v16;
          v20 -= 24;
        }
        while (v20);
        int64x2_t v23 = *(int64x2_t *)&this->__begin_;
      }
      else
      {
        int64x2_t v23 = vdupq_n_s64((unint64_t)v16);
        uint64_t v19 = &v13[v11];
      }
      v26.__first_ = this->__first_;
      this->__first_ = v13;
      this->__begin_ = v15;
      *(int64x2_t *)&v26.__begin_ = v23;
      uint64_t v24 = this->__end_cap_.__value_;
      this->__end_ = v19;
      this->__end_cap_.__value_ = &v13[v14];
      v26.__end_cap_.__value_ = v24;
      std::__split_buffer<std::string>::~__split_buffer(&v26);
      std::__split_buffer<std::string>::pointer end = this->__end_;
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)this->__first_) >> 3);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v26, begin, (long long *)end, (uint64_t)begin - 24 * (v7 >> 1));
      std::__split_buffer<std::string>::pointer end = v9;
      this->__begin_ = (std::__split_buffer<std::string>::pointer)((char *)this->__begin_ + 8 * v8);
      this->__end_ = v9;
    }
  }
  long long v25 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v25;
  __x->__r_.__value_.__l.__size_ = 0;
  __x->__r_.__value_.__r.__words[2] = 0;
  __x->__r_.__value_.__r.__words[0] = 0;
  ++this->__end_;
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  begiuint64_t n = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__p, (long long *)this->__end_, (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)unint64_t v5 = 0;
      unint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      long long v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        long long v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_223DDC188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_223DDC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D754008;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D754008;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D754008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223DDC3F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE7__cloneEPNS0_6__baseIS1R_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D754008;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE18destroy_deallocateEv(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EEclEOS1O_OS1G_(uint64_t a1, uint64_t *a2, void *a3)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMS1C_FT1_DpT2_ESE_EUlPS5_S1G_E_NSA_IS1P_EEFS1B_S1O_S1G_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a3 + 1;
  uint64_t v5 = a3[1];
  uint64_t v6 = (uint64_t *)*a3;
  uint64_t v7 = v5;
  if (a3[2])
  {
    *(void *)(v5 + 16) = &v7;
    *a3 = v4;
    *uint64_t v4 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v6 = &v7;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v3, (uint64_t)&v6);
}

void sub_223DDC590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::ml_model_base,std::vector<std::string>>(std::vector<std::string> (turi::ml_model_base::*)(),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[2] = *MEMORY[0x263EF8340];
  char v14 = 1;
  std::string __p = 0;
  uint64_t v16 = 0;
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v17 = 0;
  uint64_t v18 = v19;
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  memset(&v11, 0, sizeof(v11));
  if (&v11 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v11, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v11.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v11.__end_;
  }
  char v10 = &v13;
  uint64_t v7 = &v13;
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v9 = v12;
  v6.__begin_ = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  memset(&v6, 0, sizeof(v6));
  _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE4callIZZNS0_32generate_member_function_wrapperILm0ENS_13ml_model_baseESB_JEEENS2_8functionIFN5boost7variantINSH_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSO_INS_10model_baseEEENSO_INS_17unity_sframe_baseEEENSO_INS_17unity_sarray_baseEEENS2_3mapIS9_NSH_18recursive_variant_ENS2_4lessIS9_EENS7_INS2_4pairIKS9_SZ_EEEEEENS3_ISZ_NS7_ISZ_EEEENSH_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NSY_IS9_S1C_S11_NS7_INS12_IS13_S1C_EEEEEEEEEMS1D_FT1_DpT2_ESB_ENKUlPSF_S1H_E_clES1P_S1H_EUlvE_EEvT_(&v6, a1, &v13);
  turi::flexible_type_converter<std::vector<std::string>>::set(&v6, (uint64_t)v20);
}

void sub_223DDC750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE4callIZZNS0_32generate_member_function_wrapperILm0ENS_13ml_model_baseESB_JEEENS2_8functionIFN5boost7variantINSH_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSO_INS_10model_baseEEENSO_INS_17unity_sframe_baseEEENSO_INS_17unity_sarray_baseEEENS2_3mapIS9_NSH_18recursive_variant_ENS2_4lessIS9_EENS7_INS2_4pairIKS9_SZ_EEEEEENS3_ISZ_NS7_ISZ_EEEENSH_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NSY_IS9_S1C_S11_NS7_INS12_IS13_S1C_EEEEEEEEEMS1D_FT1_DpT2_ESB_ENKUlPSF_S1H_E_clES1P_S1H_EUlvE_EEvT_(std::vector<std::string> *a1, uint64_t a2, void *a3)
{
  void (*v5)(long long *__return_ptr, void *);
  void *v6;
  long long v7;
  std::string *v8;
  void **v9;

  uint64_t v5 = *(void (**)(long long *__return_ptr, void *))a2;
  uint64_t v4 = *(void *)(a2 + 8);
  std::vector<std::string> v6 = (void *)(*a3 + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(long long *__return_ptr, void *))(*v6 + v5);
  }
  v5(&v7, v6);
  std::vector<std::string>::__vdeallocate(a1);
  *(_OWORD *)&a1->__begin_ = v7;
  a1->__end_cap_.__value_ = v8;
  std::string v8 = 0;
  uint64_t v7 = 0uLL;
  uint64_t v9 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void turi::toolkit_function_response_type::~toolkit_function_response_type(turi::toolkit_function_response_type *this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  begiuint64_t n = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  long long v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_223DDC9D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223DDC9DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *((void *)a2 + 1));
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)a2 + 14);
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>(uint64_t a1)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(unsigned int *a1)
{
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::destroyer,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), (uint64_t)&v1, (void ***)a1 + 1);
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::destroyer,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, void ***a4)
{
  switch(a2)
  {
    case 0:
      boost::detail::variant::destroyer::internal_visit<turi::flexible_type>(a3, (uint64_t)a4);
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      uint64_t v4 = (std::__shared_weak_count *)a4[1];
      if (v4)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      break;
    case 2:
      boost::detail::variant::destroyer::internal_visit<turi::dataframe_t>(a3, (uint64_t)a4);
      break;
    case 6:
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::~recursive_wrapper(a4);
      break;
    case 7:
      boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::~recursive_wrapper(a4);
      break;
    case 8:
      boost::recursive_wrapper<turi::function_closure_info>::~recursive_wrapper((uint64_t *)a4);
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

void boost::detail::variant::destroyer::internal_visit<turi::flexible_type>(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v3 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          if (*((char *)v3 + 31) < 0) {
            operator delete((void *)v3[1]);
          }
          atomic_ullong *volatile v4 = v3;
          uint64_t v5 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          uint64_t v7 = (void *)v6[1];
          if (v7)
          {
            std::logic_error v6[2] = (atomic_ullong)v7;
            operator delete(v7);
          }
          atomic_ullong *volatile v4 = v6;
          uint64_t v5 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          long long v15 = (void **)(v8 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          long long v15 = (void **)(v8 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v4 = v8;
          uint64_t v5 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v9 + 2);
          atomic_ullong *volatile v4 = v9;
          unsigned int v10 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          uint64_t v12 = (void *)v11[6];
          if (v12)
          {
            v11[7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          char v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          atomic_ullong *volatile v4 = v11;
          unsigned int v10 = 2071181815;
LABEL_31:
          uint64_t v5 = v10 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v4, v5);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
}

void boost::detail::variant::destroyer::internal_visit<turi::dataframe_t>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(a2 + 48, *(void **)(a2 + 56));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a2 + 24, *(char **)(a2 + 32));
  atomic_ullong *volatile v3 = (void **)a2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<turi::flexible_type>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<turi::flexible_type>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void *boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::~recursive_wrapper(void *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(*a1, *(void *)(v2 + 8));
    MEMORY[0x22A614FA0](v2, 0x1020C4062D53EE8);
  }
  return a1;
}

void ***boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::~recursive_wrapper(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    atomic_ullong *volatile v4 = *a1;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x22A614FA0](v2, 0x20C40960023A9);
  }
  return a1;
}

void std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    atomic_ullong *volatile v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 80;
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *boost::recursive_wrapper<turi::function_closure_info>::~recursive_wrapper(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    atomic_ullong *volatile v4 = (void **)(v2 + 24);
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x22A614FA0](v2, 0x1032C402D514303);
  }
  return a1;
}

void std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__clear[abi:ne180100]((uint64_t *)v2);
    atomic_ullong *volatile v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    atomic_ullong *volatile v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void boost::detail::variant::forced_return<void>(boost::detail::variant *a1)
{
  boost::detail::variant::forced_return_no_return(a1);
}

void boost::detail::variant::forced_return_no_return(boost::detail::variant *this)
{
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, a2[1]);
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  atomic_ullong *volatile v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_ED1Ev(void *a1)
{
  *a1 = &unk_26D754098;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_ED0Ev(void *a1)
{
  *a1 = &unk_26D754098;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26D754098;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223DDD578(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D754098;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_EclEOS1C_OS1F_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1A_S1D_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSA_ISC_EEEEJEJEEENS_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSN_INS2_10model_baseEEENSN_INS2_17unity_sframe_baseEEENSN_INS2_17unity_sarray_baseEEENS_3mapISC_NSG_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SY_EEEEEENS6_ISY_NSA_ISY_EEEENSG_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSR_NSX_ISC_S1B_S10_NSA_INS11_IS12_S1B_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1C_S1F_E_NSA_IS1Q_EES1G_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1A_S1D_E_;
}

void _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  atomic_ullong *volatile v4 = *a2;
  uint64_t v5 = (void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *(char ***)a3;
  atomic_ullong *volatile v8 = (char *)v6;
  if (*(void *)(a3 + 16))
  {
    *(void *)(v6 + 16) = &v8;
    *(void *)a3 = v5;
    *uint64_t v5 = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  _ZZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_ENKUlS1A_S1D_E_clES1A_S1D_(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223DDD744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void _ZZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEJEJEEENS3_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSL_INS_10model_baseEEENSL_INS_17unity_sframe_baseEEENSL_INS_17unity_sarray_baseEEENS3_3mapISA_NSE_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SW_EEEEEENS4_ISW_NS8_ISW_EEEENSE_17recursive_wrapperINS_21function_closure_infoEEEEEEPSP_NSV_ISA_S19_SY_NS8_INSZ_IS10_S19_EEEEEEEEEMT_FT0_DpT1_EDpT2_ENKUlS1A_S1D_E_clES1A_S1D_(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  v11[9] = *MEMORY[0x263EF8340];
  if (lpsrc) {
  else
  }
    uint64_t v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v8, a3);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(a2, (uint64_t)v7);
  atomic_ullong *volatile v9 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)v10, v10 ^ (v10 >> 31), &v9, (uint64_t)v11);
  *(_DWORD *)a4 = v10 ^ (v10 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v10);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v8, (char *)v8[1]);
}

void sub_223DDD880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t *boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t *result, int a2, std::string **a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v6 = *a3;
      v6->__r_.__value_.__r.__words[0] = 0;
      LODWORD(v6->__r_.__value_.__r.__words[1]) = 0;
      v6->__r_.__value_.__s.__data_[12] = 0;
      if (v6 != (std::string *)a4)
      {
        std::string::size_type v7 = *(void *)a4;
        *(std::string::size_type *)((char *)v6->__r_.__value_.__r.__words + 5) = *(void *)(a4 + 5);
        v6->__r_.__value_.__r.__words[0] = v7;
        LODWORD(v7) = *(unsigned __int8 *)(a4 + 12);
        v6->__r_.__value_.__s.__data_[12] = v7;
        BOOL v8 = v7 > 9;
        int v9 = (1 << v7) & 0x33C;
        if (!v8 && v9 != 0) {
          atomic_fetch_add((atomic_ullong *volatile)v6->__r_.__value_.__l.__data_, 1uLL);
        }
      }
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      uint64_t v4 = *a3;
      std::string::size_type v5 = *(void *)(a4 + 8);
      v4->__r_.__value_.__r.__words[0] = *(void *)a4;
      v4->__r_.__value_.__l.__size_ = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      break;
    case 2:
      uint64_t result = boost::detail::variant::copy_into::internal_visit<turi::dataframe_t>(a3, a4);
      break;
    case 6:
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
    case 7:
      boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
    case 8:
      boost::recursive_wrapper<turi::function_closure_info>::recursive_wrapper();
    default:
      boost::detail::variant::forced_return<void>((boost::detail::variant *)result);
  }
  return result;
}

uint64_t *boost::detail::variant::copy_into::internal_visit<turi::dataframe_t>(std::string **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)&v3[1], (const void ***)(a2 + 24));
  return std::map<std::string,std::vector<turi::flexible_type>>::map[abi:ne180100]((uint64_t *)&v3[2], (const void ***)(a2 + 48));
}

void sub_223DDDB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v11, *(char **)(v10 + 32));
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::flex_type_enum>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_223DDDB7C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::flex_type_enum>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    std::string::size_type v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      std::string::size_type v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = (const void ***)v7;
          std::string::size_type v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::map<std::string,std::vector<turi::flexible_type>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<turi::flexible_type>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_223DDDC60(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<turi::flexible_type>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    std::string::size_type v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<turi::flexible_type>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      std::string::size_type v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = (const void ***)v7;
          std::string::size_type v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<turi::flexible_type>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  std::string::size_type v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    std::string::size_type v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223DDDDF0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(this[1].__r_.__value_.__r.__words, *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4);
  return this;
}

{
  long long v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  return this;
}

void sub_223DDDE74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223DDDEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::flexible_type>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v12 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  for (char i = 0; a2 != a3; v13 = v4)
  {
    *(void *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 12) = 0;
    if (a2 != (uint64_t *)v4)
    {
      uint64_t v5 = *a2;
      *(void *)(v4 + 5) = *(uint64_t *)((char *)a2 + 5);
      *(void *)uint64_t v4 = v5;
      LODWORD(v5) = *((unsigned __int8 *)a2 + 12);
      *(unsigned char *)(v4 + 12) = v5;
      BOOL v6 = v5 >= 9;
      BOOL v8 = v5 == 9;
      int v7 = (1 << v5) & 0x33C;
      BOOL v8 = !v8 && v6 || v7 == 0;
      if (!v8)
      {
        atomic_fetch_add(*(atomic_ullong *volatile *)v4, 1uLL);
        uint64_t v4 = v13;
      }
    }
    a2 += 2;
    v4 += 16;
  }
  char i = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<turi::flexible_type>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_223DDE160(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper()
{
}

{
  operator new();
}

void sub_223DDE1FC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void *std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__init_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223DDE288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v10 = a4 + v7 + 8;
      uint64_t v8 = a2 + v7 + 8;
      boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)(a2 + v7), *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31), &v10, v8, 0, 0);
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31);
      v7 += 80;
    }
    while (v8 + 72 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_223DDE398(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 80;
    do
    {
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v4 + v2));
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void boost::recursive_wrapper<turi::function_closure_info>::recursive_wrapper()
{
}

void sub_223DDE460(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1032C402D514303);
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223DDE504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      v4[1] = a2[1];
      uint64_t v5 = a2[2];
      void v4[2] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 3;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 24;
  }
}

uint64_t *std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_223DDE678(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          char v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  BOOL v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x88uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223DDE808(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  BOOL v6 = &this[1].__r_.__value_.__s.__data_[8];
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*((unsigned int *)a2 + 6), *((_DWORD *)a2 + 6) ^ (*((int *)a2 + 6) >> 31), &v6, a2 + 2, 0, 0);
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6) ^ (*((int *)a2 + 6) >> 31);
  return this;
}

void sub_223DDE8A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  char v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D754128;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223DDEBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D754128;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D754128;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D754128;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223DDED88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D754128;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  char v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    *uint64_t v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223DDEF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  char v18 = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = a2;
  std::string __p = 0;
  memset(&v12, 0, sizeof(v12));
  uint64_t v13 = a3;
  if (&v12 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v12.__begin_;
    std::vector<std::string>::pointer end = (long long *)v12.__end_;
  }
  uint64_t v11 = &v14;
  char v8 = &v14;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v10 = v13;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v8);
  long long v25 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v26 = 0;
  int v27 = 0;
  char v28 = 0;
  LODWORD(v25) = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((unsigned int *)&v25, (long long *)a1, &v14);
  uint64_t v24 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)v25, v25 ^ ((int)v25 >> 31), &v24, (uint64_t)&v26);
  *(_DWORD *)a4 = v25 ^ ((int)v25 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v25);
  long long v25 = (std::string *)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(v19);
  }
}

void sub_223DDF0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  *(void *)(v28 - 136) = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 136));
  if (a26 < 0) {
    operator delete(__p);
  }
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a27);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(unsigned int *a1, long long *a2, void *a3)
{
  v7[9] = *MEMORY[0x263EF8340];
  long long v5 = *a2;
  uint64_t v4 = (int *)std::__mem_fn<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string)>::operator()[abi:ne180100]<turi::ml_model_base*&,std::string&>((uint64_t)&v5, a3, (uint64_t)(a3 + 1));
  *(void *)&long long v5 = v7;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*v4, *v4 ^ (*v4 >> 31), (std::string **)&v5, (uint64_t)(v4 + 2));
  int v6 = *v4 ^ (*v4 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v6);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v6);
}

void sub_223DDF20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

__n128 turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v7.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::string,void>::get((int *)(v3 + 56), &v7);
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 8;
    if (*(char *)(v4 + 31) < 0) {
      operator delete(*(void **)v5);
    }
    __n128 result = *(__n128 *)&v7.__r_.__value_.__l.__data_;
    *(void *)(v5 + 16) = *((void *)&v7.__r_.__value_.__l + 2);
    *(__n128 *)uint64_t v5 = result;
  }
  return result;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const std::string *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

std::string *turi::variant_converter<std::string,void>::get@<X0>(int *a1@<X1>, std::string *a2@<X8>)
{
  v20[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v20, 0, 13);
  uint64_t v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((atomic_ullong **)v3 != v20)
  {
    uint64_t v4 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v20 + 5) = *(atomic_ullong **)(v3 + 5);
    v20[0] = v4;
    BYTE4(v20[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v20[1]) <= 9u && ((1 << SBYTE4(v20[1])) & 0x33C) != 0) {
      atomic_fetch_add(v20[0], 1uLL);
    }
  }
  __n128 result = turi::flexible_type_converter<std::string>::get((char *)v20, a2);
  switch(BYTE4(v20[1]))
  {
    case 2:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v7 = v20[0];
        if (v20[0])
        {
          if (*((char *)v20[0] + 31) < 0) {
            operator delete(*((void **)v20[0] + 1));
          }
          char v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v20[0];
        if (v20[0])
        {
          uint64_t v17 = (void *)v20[0][1];
          if (v17)
          {
            v20[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          char v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v19);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v19);
LABEL_33:
          char v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v18 = v20[0];
        if (v20[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v20[0] + 2);
          char v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v20[0];
        if (v20[0])
        {
          std::vector<std::string> v12 = (void *)v20[0][6];
          if (v12)
          {
            v20[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          char v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          __n128 result = (std::string *)MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_223DDF58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      uint64_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      uint64_t v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      uint64_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64x2_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int64x2_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      uint64_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      uint64_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      uint64_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

uint64_t turi::variant_get_ref<turi::flexible_type>(int *a1)
{
  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  uint64_t v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    uint64_t v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_223DDF8EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_223DDF910(_Unwind_Exception *a1)
{
}

void *turi::get_variant_which_name@<X0>(turi *this@<X0>, void *a2@<X8>)
{
  if (this > 8) {
    char v2 = "";
  }
  else {
    char v2 = off_2646D6988[(int)this];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

std::string *turi::flexible_type_converter<std::string>::get@<X0>(char *a1@<X1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return turi::flexible_type_internals::ft_converter<1>::get<std::string>(a2, a1);
}

void sub_223DDF984(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::throw_exception<boost::bad_get>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
  memset(&v1[2], 0, 24);
  int v2 = -1;
  v1[0] = &unk_26D754318;
  v1[1] = &unk_26D754340;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone_impl((uint64_t)exception, (uint64_t)v1);
}

void sub_223DDFAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9, void *a10)
{
  a10 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v11);
  std::exception::~exception(&a9);
  if (v12) {
    __cxa_free_exception(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      return a4;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      a4 = 0;
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return a4;
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 8) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_26D7542E8;
  *(void *)a1 = &unk_26D754360;
  *(void *)(a1 + 8) = &unk_26D754388;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = &unk_26D754248;
  *(void *)(a1 + 8) = &unk_26D754280;
  *(void *)(a1 + 48) = &unk_26D7542B8;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 16), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 48) = &unk_26D7542E8;
  *(void *)a1 = &unk_26D754360;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = &unk_26D754388;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)a1 = &unk_26D754248;
  *(void *)(a1 + 8) = &unk_26D754280;
  *(void *)(a1 + 48) = &unk_26D7542B8;
  return a1;
}

void sub_223DDFD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

const char *boost::bad_get::what(boost::bad_get *this)
{
  return "boost::bad_get: failed value get using boost::get";
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone()
{
}

void sub_223DDFEB4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40F6FF0CB6);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone_impl((uint64_t)exception, a1);
}

void sub_223DDFF20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::exception *)(a1 - 1);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 1) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  std::exception::~exception((std::exception *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_get>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::bad_get>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::bad_get>::~error_info_injector(uint64_t a1)
{
}

void boost::bad_get::~bad_get(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22A614FA0);
}

void sub_223DE0220(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void *turi::full_type_name<turi::flexible_type>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  int v19 = 0;
  char v20 = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v18, a1);
  if ((unint64_t)v20 > 9) {
    uint64_t v3 = "undefined";
  }
  else {
    uint64_t v3 = off_2646D69D0[v20];
  }
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, v3);
  switch(v20)
  {
    case 2:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v5 = v18;
        if (v18)
        {
          if (*((char *)v18 + 31) < 0) {
            operator delete((void *)v18[1]);
          }
          uint64_t v6 = v5;
          uint64_t v7 = 0x1012C404EF22A49;
          goto LABEL_35;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v8 = v18;
        if (v18)
        {
          uint64_t v9 = (void *)v18[1];
          if (v9)
          {
            uint64_t v18[2] = (atomic_ullong)v9;
            operator delete(v9);
          }
          uint64_t v6 = v8;
          uint64_t v7 = 0x1080C409938AC02;
          goto LABEL_35;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v18;
        if (v18)
        {
          uint64_t v17 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
          goto LABEL_21;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v18;
        if (v18)
        {
          uint64_t v17 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_21:
          uint64_t v6 = v10;
          uint64_t v7 = 0x1020C405E66F15BLL;
          goto LABEL_35;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v18;
        if (v18)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v18 + 2);
          uint64_t v6 = v16;
          unsigned int v15 = -235920773;
          goto LABEL_34;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v18;
        if (v18)
        {
          int v12 = (void *)v18[6];
          if (v12)
          {
            v18[7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v6 = v11;
          unsigned int v15 = 2071181815;
LABEL_34:
          uint64_t v7 = v15 | 0x1030C4000000000;
LABEL_35:
          uint64_t result = (void *)MEMORY[0x22A614FA0](v6, v7);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_223DE048C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    v22[5] = v2;
    v22[6] = v3;
    uint64_t v5 = result;
    switch(*(unsigned char *)(result + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          if (*((char *)v6 + 31) < 0) {
            operator delete((void *)v6[1]);
          }
          atomic_ullong *volatile v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            v9[2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          atomic_ullong *volatile v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          v22[0] = (void **)(v11 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v22);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          v22[0] = (void **)(v11 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v22);
LABEL_19:
          atomic_ullong *volatile v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v12 + 2);
          atomic_ullong *volatile v7 = v12;
          unsigned int v13 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)result;
          if (*(void *)result)
          {
            unsigned int v15 = (void *)v14[6];
            if (v15)
            {
              v14[7] = (atomic_ullong)v15;
              operator delete(v15);
            }
            uint64_t v16 = (void *)v14[3];
            if (v16)
            {
              void v14[4] = (atomic_ullong)v16;
              operator delete(v16);
            }
            uint64_t v17 = (std::__shared_weak_count *)v14[2];
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            atomic_ullong *volatile v7 = v14;
            unsigned int v13 = 2071181815;
LABEL_32:
            uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_33:
            uint64_t result = MEMORY[0x22A614FA0](v7, v8);
          }
LABEL_34:
          *(void *)uint64_t v5 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v18 = *a2;
    *(void *)(v5 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)uint64_t v5 = v18;
    LODWORD(v18) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(v5 + 12) = v18;
    BOOL v19 = v18 > 9;
    int v20 = (1 << v18) & 0x33C;
    if (!v19 && v20 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v5, 1uLL);
    }
  }
  return result;
}

std::string *turi::flexible_type_internals::ft_converter<1>::get<std::string>(std::string *a1, char *a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  if (a2[12] != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "Expecting ");
    uint64_t v5 = std::string::append(&v16, "string");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    atomic_ullong *volatile v7 = std::string::append(&v17, ". But we got a ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = a2[12];
    if (v9 > 9) {
      uint64_t v10 = "undefined";
    }
    else {
      uint64_t v10 = off_2646D69D0[v9];
    }
    atomic_ullong *volatile v11 = std::string::append(&v18, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
    v19[0] = v11->__r_.__value_.__l.__size_;
    *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    uint64_t v15 = v19[0];
    *exceptiouint64_t n = v12;
    exception[1] = v15;
    *(void *)((char *)exception + 15) = *(void *)((char *)v19 + 7);
    *((unsigned char *)exception + 23) = v13;
  }
  uint64_t v3 = (const std::string *)(*(void *)a2 + 8);
  return std::string::operator=(a1, v3);
}

void sub_223DE0944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__mem_fn<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string)>::operator()[abi:ne180100]<turi::ml_model_base*&,std::string&>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(void *, std::string *))a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(*a2 + (v3 >> 1));
  if (v3) {
    uint64_t v4 = *(uint64_t (**)(void *, std::string *))(*v5 + v4);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v6 = v4(v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_223DE0A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(unsigned int *a1, unsigned int *a2)
{
  uint64_t v3 = (boost::detail::variant *)*a1;
  uint64_t v4 = (boost::detail::variant *)*a2;
  if (v3 == v4)
  {
    uint64_t v5 = (uint64_t *)(a2 + 2);
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_storage,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v3, v3 ^ ((int)v3 >> 31), &v5, (std::vector<std::string> *)(a1 + 2));
  }
  else
  {
    uint64_t v5 = (uint64_t *)a1;
    unsigned int v6 = v4 ^ ((int)v4 >> 31);
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v6, (uint64_t)&v5, (uint64_t)(a2 + 2));
  }
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_storage,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t **a3, std::vector<std::string> *a4)
{
  switch(a2)
  {
    case 0:
      boost::detail::variant::move_storage::internal_visit<turi::flexible_type>(a3, (uint64_t)a4);
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      uint64_t v4 = *a3;
      long long v5 = *(_OWORD *)*a3;
      *uint64_t v4 = 0;
      v4[1] = 0;
      std::vector<std::string>::pointer end = (std::__shared_weak_count *)a4->__end_;
      *(_OWORD *)&a4->__begin_ = v5;
      if (end)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](end);
      }
      break;
    case 2:
      boost::detail::variant::move_storage::internal_visit<turi::dataframe_t>((std::vector<std::string> **)a3, a4);
      break;
    case 6:
    case 7:
    case 8:
      atomic_ullong *volatile v7 = (std::string *)**a3;
      **a3 = (uint64_t)a4->__begin_;
      a4->__begin_ = v7;
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

uint64_t **boost::detail::variant::move_storage::internal_visit<turi::flexible_type>(uint64_t **result, uint64_t a2)
{
  int v2 = *result;
  if (*result != (uint64_t *)a2)
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          long long v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          std::string v17 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          std::string v17 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a2;
          if (*(void *)a2)
          {
            char v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            atomic_ullong *volatile v14 = (void *)v12[3];
            if (v14)
            {
              void v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            uint64_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            uint64_t result = (uint64_t **)MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a2 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *v2;
    *(void *)(a2 + 5) = *(uint64_t *)((char *)v2 + 5);
    *(void *)a2 = v16;
    *(unsigned char *)(a2 + 12) = *((unsigned char *)v2 + 12);
    *((unsigned char *)v2 + 12) = 0;
  }
  return result;
}

void boost::detail::variant::move_storage::internal_visit<turi::dataframe_t>(std::vector<std::string> **a1, std::vector<std::string> *this)
{
  uint64_t v3 = *a1;
  std::vector<std::string>::__vdeallocate(this);
  *this = *v3;
  v3->__begin_ = 0;
  v3->__end_ = 0;
  v3->__end_cap_.__value_ = 0;
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__move_assign((uint64_t)&this[1], &v3[1].__begin_);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__move_assign((uint64_t)&this[2], &v3[2].__begin_);
}

void std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__move_assign(uint64_t a1, void *a2)
{
  atomic_ullong *volatile v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  atomic_ullong *volatile v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *atomic_ullong *volatile v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *atomic_ullong *volatile v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__move_assign(uint64_t a1, void *a2)
{
  atomic_ullong *volatile v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  atomic_ullong *volatile v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *atomic_ullong *volatile v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *atomic_ullong *volatile v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a3);
      uint64_t v6 = *(unsigned int **)a3;
      *((void *)v6 + 1) = 0;
      void v6[4] = 0;
      *((unsigned char *)v6 + 20) = 0;
      uint64_t v7 = *(void *)a4;
      *(void *)((char *)v6 + std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)this + 13) = *(void *)(a4 + 5);
      *((void *)v6 + 1) = v7;
      *((unsigned char *)v6 + 20) = *(unsigned char *)(a4 + 12);
      *(unsigned char *)(a4 + 12) = 0;
      goto LABEL_3;
    case 1:
    case 3:
    case 4:
    case 5:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a3);
      *(_OWORD *)(*(void *)a3 + 8) = *(_OWORD *)a4;
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
LABEL_3:
      **(_DWORD **)a3 = *(_DWORD *)(a3 + 8);
      break;
    case 2:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<turi::dataframe_t,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(a3, a4);
      break;
    case 6:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>((unsigned int **)a3);
    case 7:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>((unsigned int **)a3);
    case 8:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<turi::function_closure_info>>((unsigned int **)a3);
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<turi::dataframe_t,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, uint64_t a2)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  atomic_ullong *volatile v4 = *(unsigned int **)a1;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *(_OWORD *)(v4 + 2) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v4 + 4) = *(void *)(a2 + 24);
  atomic_ullong *volatile v5 = (void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  *((void *)v4 + 5) = v6;
  uint64_t v7 = v4 + 10;
  uint64_t v8 = *(void *)(a2 + 40);
  *((void *)v4 + 6) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *(void *)(a2 + 24) = v5;
    *atomic_ullong *volatile v5 = 0;
    *(void *)(a2 + 40) = 0;
  }
  else
  {
    *((void *)v4 + 4) = v7;
  }
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  atomic_ullong *volatile v9 = (void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 56);
  *((void *)v4 + 8) = v10;
  unsigned int v11 = v4 + 16;
  uint64_t v12 = *(void *)(a2 + 64);
  *((void *)v4 + std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100]((void *)this + 9) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *(void *)(a2 + 48) = v9;
    *atomic_ullong *volatile v9 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *((void *)v4 + 7) = v11;
  }
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(unsigned int **a1)
{
}

void sub_223DE122C(void *a1)
{
  __cxa_begin_catch(a1);
  **uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_223DE1240(_Unwind_Exception *a1)
{
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(unsigned int **a1)
{
}

void sub_223DE1350(void *a1)
{
  __cxa_begin_catch(a1);
  **uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_223DE1364(_Unwind_Exception *a1)
{
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assigner::assign_impl<boost::recursive_wrapper<turi::function_closure_info>>(unsigned int **a1)
{
}

void sub_223DE140C(void *a1)
{
  __cxa_begin_catch(a1);
  **uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_223DE1420(_Unwind_Exception *a1)
{
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D7543B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D7543B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  void *v2 = &unk_26D7543B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223DE1530(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7543B8;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::ml_model_base,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,std::string,char const*>(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const& (turi::ml_model_base::*)(std::string),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  char v13 = (char *)operator new(0x30uLL);
  *(void *)char v13 = &unk_26D754438;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  std::string v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::string v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223DE17E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D754438;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D754438;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)int v2 = &unk_26D754438;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223DE196C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D754438;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  atomic_ullong *volatile v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    *atomic_ullong *volatile v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223DE1B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::runtime_error v27[2] = *(void ***)MEMORY[0x263EF8340];
  char v18 = 1;
  BOOL v19 = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = a2;
  std::string __p = 0;
  memset(&v12, 0, sizeof(v12));
  uint64_t v13 = a3;
  if (&v12 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v12.__begin_;
    std::vector<std::string>::pointer end = (long long *)v12.__end_;
  }
  uint64_t v11 = &v14;
  uint64_t v8 = &v14;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v10 = v13;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v8);
  v27[0] = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
  uint64_t v24 = 0;
  int v25 = 0;
  char v26 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::flexible_type>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v24, a1, &v14);
  memset(v27, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v27, &v24);
  *(void ***)(a4 + std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)this + 13) = *(void ***)((char *)v27 + 5);
  *(void ***)(a4 + 8) = v27[0];
  *(unsigned char *)(a4 + 20) = BYTE4(v27[1]);
  *(_DWORD *)a4 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::flexible_type>::~result_of_function_wrapper((uint64_t)&v24);
  v27[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(v19);
  }
}

void sub_223DE1CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  *(void *)(v27 - 72) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 72));
  if (a25 < 0) {
    operator delete(__p);
  }
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a26);
  _Unwind_Resume(a1);
}

uint64_t turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::flexible_type>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<1ul,turi::ml_model_base,turi::flexible_type const&,std::string const&>(turi::flexible_type const& (turi::ml_model_base::*)(std::string const&)const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(uint64_t (**)(void *, void *))a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (void *)(*a3 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, void *))(*v6 + v4);
  }
  uint64_t result = v4(v6, a3 + 1);
  uint64_t v8 = *(atomic_ullong **)result;
  int v9 = *(_DWORD *)(result + 8);
  unsigned int v10 = *(unsigned __int8 *)(result + 12);
  if (v10 <= 9 && ((1 << v10) & 0x33C) != 0) {
    atomic_fetch_add(v8, 1uLL);
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v12 + 31) < 0) {
            operator delete((void *)v12[1]);
          }
          atomic_ullong *volatile v13 = v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_39;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (atomic_ullong)v16;
            operator delete(v16);
          }
          atomic_ullong *volatile v13 = v15;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_39;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v24 = (void **)(v17 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
          goto LABEL_25;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v24 = (void **)(v17 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_25:
          atomic_ullong *volatile v13 = v17;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v18 + 2);
          atomic_ullong *volatile v13 = v18;
          unsigned int v19 = -235920773;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v21 = (void *)v20[6];
          if (v21)
          {
            v20[7] = (atomic_ullong)v21;
            operator delete(v21);
          }
          uint64_t v22 = (void *)v20[3];
          if (v22)
          {
            v20[4] = (atomic_ullong)v22;
            operator delete(v22);
          }
          int64x2_t v23 = (std::__shared_weak_count *)v20[2];
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          atomic_ullong *volatile v13 = v20;
          unsigned int v19 = 2071181815;
LABEL_38:
          uint64_t v14 = v19 | 0x1030C4000000000;
LABEL_39:
          uint64_t result = MEMORY[0x22A614FA0](v13, v14);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 12) = v10;
  return result;
}

uint64_t turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::flexible_type>::~result_of_function_wrapper(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong *volatile v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong *volatile v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          atomic_ullong *volatile v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          atomic_ullong *volatile v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_ED1Ev(void *a1)
{
  *a1 = &unk_26D7544B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_ED0Ev(void *a1)
{
  *a1 = &unk_26D7544B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  atomic_ullong *volatile v2 = operator new(0x28uLL);
  void *v2 = &unk_26D7544B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223DE22E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E7__cloneEPNS0_6__baseIS1H_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7544B8;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_EclEOS1D_OS1G_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS2_13flexible_typeEJRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJEEENS_8functionIFN5boost7variantINSI_6detail7variant14recursive_flagIS6_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSO_INS2_10model_baseEEENSO_INS2_17unity_sframe_baseEEENSO_INS2_17unity_sarray_baseEEENS_3mapISE_NSI_18recursive_variant_ENS_4lessISE_EENSC_INS_4pairISF_SZ_EEEEEENS_6vectorISZ_NSC_ISZ_EEEENSI_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSS_NSY_ISE_S1C_S11_NSC_INS12_ISF_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSC_IS1R_EES1H_E11target_typeEv()
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  atomic_ullong *volatile v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  atomic_ullong *volatile v13 = (char *)operator new(0x30uLL);
  *(void *)atomic_ullong *volatile v13 = &unk_26D754538;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  atomic_ullong *volatile v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  atomic_ullong *volatile v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223DE2594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D754538;
  atomic_ullong *volatile v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D754538;
  atomic_ullong *volatile v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE7__cloneEv(uint64_t a1)
{
  atomic_ullong *volatile v2 = (char *)operator new(0x30uLL);
  *(void *)atomic_ullong *volatile v2 = &unk_26D754538;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223DE2720(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE7__cloneEPNS0_6__baseIS1R_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D754538;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE18destroy_deallocateEv(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EEclEOS1O_OS1E_(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseEbJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMS1A_KFT1_DpT2_ENS13_ISU_NSS_ISU_EEEEEUlPS5_S1E_E_NSS_IS1P_EEFS19_S1O_S1E_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  atomic_ullong *volatile v5 = a3 + 1;
  uint64_t v6 = a3[1];
  atomic_ullong *volatile v7 = (char **)*a3;
  atomic_ullong *volatile v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    *atomic_ullong *volatile v5 = 0;
    a3[2] = 0;
  }
  else
  {
    atomic_ullong *volatile v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223DE28B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,BOOL>(BOOL (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  char v17 = 1;
  std::string __p = 0;
  uint64_t v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = v22;
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v14.__begin_;
    std::vector<std::string>::pointer end = (long long *)v14.__end_;
  }
  atomic_ullong *volatile v13 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  *(void *)uint64_t v24 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  atomic_ullong *volatile v8 = *(uint64_t (**)(void *))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string::size_type v10 = (void *)(v16 + (v9 >> 1));
  if (v9) {
    atomic_ullong *volatile v8 = *(uint64_t (**)(void *))(*v10 + v8);
  }
  v23[0] = v8(v10);
  turi::flexible_type_converter<BOOL>::set(v23, (uint64_t)v24);
  *(void *)(a4 + std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)this + 13) = *(void *)&v24[5];
  *(void *)(a4 + 8) = *(void *)v24;
  *(unsigned char *)(a4 + 20) = v24[12];
  *(_DWORD *)a4 = 0;
  *(void *)uint64_t v24 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
}

void sub_223DE2A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  *(void *)(v14 - 80) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 80));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<BOOL>::set(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_resolver<3>::set<BOOL const&>(a2, a1);
}

void sub_223DE2AF0(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_resolver<3>::set<BOOL const&>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v17 = 0;
  int v16 = 0;
  uint64_t v15 = (atomic_ullong *)*a2;
  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>(a1, &v15);
  switch(v17)
  {
    case 2:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v2 = v15;
        if (v15)
        {
          if (*((char *)v15 + 31) < 0) {
            operator delete((void *)v15[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = v15;
        if (v15)
        {
          uint64_t v6 = (void *)v15[1];
          if (v6)
          {
            v15[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = v15;
        if (v15)
        {
          uint64_t v14 = (void **)(v15 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = v15;
        if (v15)
        {
          uint64_t v14 = (void **)(v15 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = v15;
        if (v15)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v15 + 2);
          atomic_ullong *volatile v3 = v13;
          unsigned int v12 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = v15;
        if (v15)
        {
          uint64_t v9 = (void *)v15[6];
          if (v9)
          {
            v15[7] = (atomic_ullong)v9;
            operator delete(v9);
          }
          std::string::size_type v10 = (void *)v8[3];
          if (v10)
          {
            void v8[4] = (atomic_ullong)v10;
            operator delete(v10);
          }
          std::string v11 = (std::__shared_weak_count *)v8[2];
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          atomic_ullong *volatile v3 = v8;
          unsigned int v12 = 2071181815;
LABEL_31:
          uint64_t v4 = v12 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      return;
  }
}

void sub_223DE2DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  switch(a2[12])
  {
    case 0:
      uint64_t v3 = *(void *)a2;
      goto LABEL_25;
    case 1:
      uint64_t v3 = (uint64_t)*(double *)a2;
      goto LABEL_25;
    case 2:
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      atomic_ullong *volatile v7 = (char *)v6;
      if (*(char *)(v5 + 31) < 0) {
        atomic_ullong *volatile v7 = *v6;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      uint64_t v3 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v31[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v8 = *(void *)(v5 + 16);
      }
      else {
        uint64_t v8 = *(unsigned __int8 *)(v5 + 31);
      }
      if (__idx != v8)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v28 = std::string::append(&v34, " cannot be interpreted as an integer");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v31[0] = (void *)v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v4 = *(void *)a2;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v9 = *(void *)a2;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v9 + 8), *(uint64_t **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      goto LABEL_24;
    case 5:
      uint64_t v10 = *(void *)a2;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      goto LABEL_24;
    case 6:
      uint64_t v3 = (uint64_t)(*(void *)a2 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v11 = *(void *)a2;
      unsigned int v12 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(v12 + 2, 1u, memory_order_relaxed);
      }
      long long v13 = *(_OWORD *)(v11 + 24);
      long long v14 = *(_OWORD *)(v11 + 56);
      long long v32 = *(_OWORD *)(v11 + 40);
      long long v33 = v14;
      *(_OWORD *)uint64_t v31 = v13;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v32 + 1))
      {
        *(void *)&long long v33 = *((void *)&v32 + 1);
        operator delete(*((void **)&v32 + 1));
      }
      if (v31[0])
      {
        v31[1] = v31[0];
        operator delete(v31[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v3 = 0;
LABEL_25:
      switch(*(unsigned char *)(a1 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_57;
            }
            if (*((char *)v15 + 31) < 0) {
              operator delete((void *)v15[1]);
            }
            atomic_ullong *volatile v16 = v15;
            uint64_t v17 = 0x1012C404EF22A49;
            goto LABEL_56;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v24 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_57;
            }
            uint64_t v25 = (void *)v24[1];
            if (v25)
            {
              v24[2] = (atomic_ullong)v25;
              operator delete(v25);
            }
            atomic_ullong *volatile v16 = v24;
            uint64_t v17 = 0x1080C409938AC02;
            goto LABEL_56;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_57;
            }
            __p[0] = v18 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_51;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_57;
            }
            __p[0] = v18 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_51:
            atomic_ullong *volatile v16 = v18;
            uint64_t v17 = 0x1020C405E66F15BLL;
            goto LABEL_56;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)a1;
            if (!*(void *)a1) {
              goto LABEL_57;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v26 + 2);
            atomic_ullong *volatile v16 = v26;
            unsigned int v23 = -235920773;
            goto LABEL_55;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a1;
            if (*(void *)a1)
            {
              uint64_t v20 = (void *)v19[6];
              if (v20)
              {
                v19[7] = (atomic_ullong)v20;
                operator delete(v20);
              }
              uint64_t v21 = (void *)v19[3];
              if (v21)
              {
                v19[4] = (atomic_ullong)v21;
                operator delete(v21);
              }
              uint64_t v22 = (std::__shared_weak_count *)v19[2];
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              atomic_ullong *volatile v16 = v19;
              unsigned int v23 = 2071181815;
LABEL_55:
              uint64_t v17 = v23 | 0x1030C4000000000;
LABEL_56:
              MEMORY[0x22A614FA0](v16, v17);
            }
LABEL_57:
            *(void *)a1 = 0;
          }
          break;
        default:
          break;
      }
      *(void *)a1 = v3;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 0;
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_223DE332C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void *turi::flexible_type_impl::ndarray<double>::ndarray(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
  a1[8] = *(void *)(a2 + 64);
  return a1;
}

void sub_223DE34D4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)v6[1];
    while (a2 != a3)
    {
      uint64_t v7 = std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)result, a2);
      a2 += 4;
      uint64_t result = (void *)(v7 + 32);
    }
    v6[1] = result;
  }
  return result;
}

void sub_223DE3574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100](uint64_t result, uint64_t *a2)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = 0;
  if (a2 == (uint64_t *)result)
  {
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(unsigned char *)(result + 28) = 0;
  }
  else
  {
    uint64_t v2 = *a2;
    *(void *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)uint64_t result = v2;
    LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(result + 12) = v2;
    BOOL v3 = v2 > 9;
    int v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
    }
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(unsigned char *)(result + 28) = 0;
    uint64_t v6 = a2[2];
    *(void *)(result + 21) = *(uint64_t *)((char *)a2 + 21);
    *(void *)(result + 16) = v6;
    LODWORD(v6) = *((unsigned __int8 *)a2 + 28);
    *(unsigned char *)(result + 28) = v6;
    switch((int)v6)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)(result + 16), 1uLL);
        break;
      default:
        return result;
    }
  }
  return result;
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_ED1Ev(void *a1)
{
  *a1 = &unk_26D7545B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_ED0Ev(void *a1)
{
  *a1 = &unk_26D7545B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26D7545B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223DE37E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E7__cloneEPNS0_6__baseIS1E_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7545B8;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_EclEOS1A_OS1D_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseEbJEJEEENSt3__18functionIFN5boost7variantINS5_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSC_INS_10model_baseEEENSC_INS_17unity_sframe_baseEEENSC_INS_17unity_sarray_baseEEENS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS5_18recursive_variant_ENS3_4lessISS_EENSQ_INS3_4pairIKSS_ST_EEEEEENS3_6vectorIST_NSQ_IST_EEEENS5_17recursive_wrapperINS_21function_closure_infoEEEEEEPSG_NSM_ISS_S17_SV_NSQ_INSW_ISX_S17_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS18_S1B_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEbJEJEEENS_8functionIFN5boost7variantINS7_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSE_INS2_10model_baseEEENSE_INS2_17unity_sframe_baseEEENSE_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_18recursive_variant_ENS_4lessISU_EENSS_INS_4pairIKSU_SV_EEEEEENS_6vectorISV_NSS_ISV_EEEENS7_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSI_NSO_ISU_S19_SX_NSS_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_NSS_IS1O_EES1E_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseEbJEJEEENSt3__18functionIFN5boost7variantINS5_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSC_INS_10model_baseEEENSC_INS_17unity_sframe_baseEEENSC_INS_17unity_sarray_baseEEENS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS5_18recursive_variant_ENS3_4lessISS_EENSQ_INS3_4pairIKSS_ST_EEEEEENS3_6vectorIST_NSQ_IST_EEEENS5_17recursive_wrapperINS_21function_closure_infoEEEEEEPSG_NSM_ISS_S17_SV_NSQ_INSW_ISX_S17_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS18_S1B_E_;
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  atomic_ullong *volatile v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  long long v13 = (char *)operator new(0x30uLL);
  *(void *)long long v13 = &unk_26D754638;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  atomic_ullong *volatile v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  atomic_ullong *volatile v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223DE3A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D754638;
  BOOL v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D754638;
  BOOL v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D754638;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223DE3C24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE7__cloneEPNS0_6__baseIS1U_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D754638;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE18destroy_deallocateEv(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EEclEOS1R_OS1H_(uint64_t a1, uint64_t *a2, void *a3)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_ISC_NSA_ISC_EEEEEUlPS5_S1H_E_NSA_IS1S_EEFS1C_S1R_S1H_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  int v4 = a3 + 1;
  uint64_t v5 = a3[1];
  uint64_t v6 = (uint64_t *)*a3;
  uint64_t v7 = v5;
  if (a3[2])
  {
    *(void *)(v5 + 16) = &v7;
    *a3 = v4;
    *int v4 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v6 = &v7;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v3, (uint64_t)&v6);
}

void sub_223DE3DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v20[2] = *MEMORY[0x263EF8340];
  char v14 = 1;
  std::string __p = 0;
  uint64_t v16 = 0;
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v17 = 0;
  atomic_ullong *volatile v18 = v19;
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  memset(&v11, 0, sizeof(v11));
  if (&v11 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v11, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v11.__begin_;
    std::vector<std::string>::pointer end = (long long *)v11.__end_;
  }
  std::string::size_type v10 = &v13;
  v7[2] = &v13;
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v9 = v12;
  uint64_t v6 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = (std::string *)v7;
  _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_13flexible_typeENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_13ml_model_baseESH_JEEENS2_8functionIFN5boost7variantINSN_6detail7variant14recursive_flagISA_EEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENST_INS_10model_baseEEENST_INS_17unity_sframe_baseEEENST_INS_17unity_sarray_baseEEENS3_IS9_NSN_18recursive_variant_ESC_NS7_INSD_ISE_S13_EEEEEENS2_6vectorIS13_NS7_IS13_EEEENSN_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NS3_IS9_S1D_SC_NS7_INSD_ISE_S1D_EEEEEEEEEMS1E_KFT1_DpT2_ENS17_IS9_NS7_IS9_EEEEENKUlPSL_S1I_E_clES1S_S1I_EUlvE_EEvT_((uint64_t)&v6, a1, &v13);
  turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::set(&v6, (uint64_t)v20);
}

void sub_223DE3F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va1);
  _Unwind_Resume(a1);
}

void _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_13flexible_typeENS2_4lessIS9_EENS7_INS2_4pairIKS9_SA_EEEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_13ml_model_baseESH_JEEENS2_8functionIFN5boost7variantINSN_6detail7variant14recursive_flagISA_EEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENST_INS_10model_baseEEENST_INS_17unity_sframe_baseEEENST_INS_17unity_sarray_baseEEENS3_IS9_NSN_18recursive_variant_ESC_NS7_INSD_ISE_S13_EEEEEENS2_6vectorIS13_NS7_IS13_EEEENSN_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NS3_IS9_S1D_SC_NS7_INSD_ISE_S1D_EEEEEEEEEMS1E_KFT1_DpT2_ENS17_IS9_NS7_IS9_EEEEENKUlPSL_S1I_E_clES1S_S1I_EUlvE_EEvT_(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(void **__return_ptr, void *);
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  uint64_t v5 = *(void (**)(void **__return_ptr, void *))a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = (void *)(*a3 + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void **__return_ptr, void *))(*v6 + v5);
  }
  v5(&v10, v6);
  uint64_t v7 = a1 + 8;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, *(void **)(a1 + 8));
  uint64_t v8 = v11;
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v8;
  uint64_t v9 = v12;
  *(void *)(a1 + 16) = v12;
  if (v9)
  {
    v8[2] = v7;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    *(void *)a1 = v7;
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v10, v8);
}

void turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::set(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,turi::flexible_type>>(a2, a1);
}

void sub_223DE40AC(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,turi::flexible_type>>(uint64_t a1, void *a2)
{
  v21[6] = *(void ***)MEMORY[0x263EF8340];
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v16, a2[2]);
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v18 = 0;
    int v19 = 0;
    char v20 = 0;
    turi::flexible_type::operator=<std::string>((uint64_t)&v18);
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      if (*((char *)v4 + 31) < 0) {
        operator delete((void *)v4[1]);
      }
      atomic_ullong *volatile v5 = v4;
      uint64_t v6 = 0x1012C404EF22A49;
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      uint64_t v14 = (void *)v13[1];
      if (v14)
      {
        void v13[2] = (atomic_ullong)v14;
        operator delete(v14);
      }
      atomic_ullong *volatile v5 = v13;
      uint64_t v6 = 0x1080C409938AC02;
      goto LABEL_34;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      v21[0] = (void **)(v7 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
      goto LABEL_29;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      v21[0] = (void **)(v7 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_29:
      atomic_ullong *volatile v5 = v7;
      uint64_t v6 = 0x1020C405E66F15BLL;
      goto LABEL_34;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v15 + 2);
      atomic_ullong *volatile v5 = v15;
      unsigned int v12 = -235920773;
      goto LABEL_33;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      uint64_t v9 = (void *)v8[6];
      if (v9)
      {
        v8[7] = (atomic_ullong)v9;
        operator delete(v9);
      }
      uint64_t v10 = (void *)v8[3];
      if (v10)
      {
        void v8[4] = (atomic_ullong)v10;
        operator delete(v10);
      }
      uint64_t v11 = (std::__shared_weak_count *)v8[2];
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      atomic_ullong *volatile v5 = v8;
      unsigned int v12 = 2071181815;
LABEL_33:
      uint64_t v6 = v12 | 0x1030C4000000000;
LABEL_34:
      MEMORY[0x22A614FA0](v5, v6);
LABEL_35:
      *(void *)a1 = 0;
LABEL_36:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 5;
      operator new();
    default:
      goto LABEL_36;
  }
}

void sub_223DE4C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  MEMORY[0x22A614FA0](v16, 0x1012C404EF22A49);
  a16 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_223DE50B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 32) = 0;
      *(_DWORD *)(v6 - 24) = 0;
      *(unsigned char *)(v6 - 20) = 0;
      uint64_t v8 = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 27) = *(void *)(v2 + v5 - 27);
      *(void *)(v6 - 32) = v8;
      *(unsigned char *)(v6 - 20) = *(unsigned char *)(v2 + v5 - 20);
      *(unsigned char *)(v7 - 20) = 0;
      *(void *)(v6 - 16) = 0;
      *(_DWORD *)(v6 - 8) = 0;
      *(unsigned char *)(v6 - 4) = 0;
      uint64_t v9 = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 11) = *(void *)(v2 + v5 - 11);
      *(void *)(v6 - 16) = v9;
      *(unsigned char *)(v6 - 4) = *(unsigned char *)(v2 + v5 - 4);
      *(unsigned char *)(v7 - 4) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  char *result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::pair<turi::flexible_type,turi::flexible_type>::~pair(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v7, v9);
  uint64_t v11 = &v10[32 * v4];
  v17[0] = v10;
  v17[1] = v11;
  void v17[3] = &v10[32 * v12];
  *(void *)uint64_t v11 = 0;
  *((_DWORD *)v11 + 2) = 0;
  v11[12] = 0;
  uint64_t v13 = *a2;
  *(void *)(v11 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)uint64_t v11 = v13;
  v11[12] = *((unsigned char *)a2 + 12);
  *((unsigned char *)a2 + 12) = 0;
  *((void *)v11 + 2) = 0;
  *((_DWORD *)v11 + 6) = 0;
  v11[28] = 0;
  uint64_t v14 = a2[2];
  *(void *)(v11 + 21) = *(uint64_t *)((char *)a2 + 21);
  *((void *)v11 + 2) = v14;
  v11[28] = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 28) = 0;
  long long v17[2] = v11 + 32;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_223DE52D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223DE58C0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = std::pair<turi::flexible_type,turi::flexible_type>::~pair(v3 - 32);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_ED1Ev(void *a1)
{
  *a1 = &unk_26D7546B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_ED0Ev(void *a1)
{
  *a1 = &unk_26D7546B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26D7546B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223DE5AD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E7__cloneEPNS0_6__baseIS1H_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7546B8;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_EclEOS1D_OS1G_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_13flexible_typeENS3_4lessISA_EENS8_INS3_4pairIKSA_SB_EEEEEEJEJEEENS3_8functionIFN5boost7variantINSK_6detail7variant14recursive_flagISB_EEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSQ_INS_10model_baseEEENSQ_INS_17unity_sframe_baseEEENSQ_INS_17unity_sarray_baseEEENS4_ISA_NSK_18recursive_variant_ESD_NS8_INSE_ISF_S10_EEEEEENS3_6vectorIS10_NS8_IS10_EEEENSK_17recursive_wrapperINS_21function_closure_infoEEEEEEPSU_NS4_ISA_S1A_SD_NS8_INSE_ISF_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEJEJEEENS_8functionIFN5boost7variantINSM_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSS_INS2_10model_baseEEENSS_INS2_17unity_sframe_baseEEENSS_INS2_17unity_sarray_baseEEENS6_ISC_NSM_18recursive_variant_ESF_NSA_INSG_ISH_S12_EEEEEENS_6vectorIS12_NSA_IS12_EEEENSM_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSW_NS6_ISC_S1C_SF_NSA_INSG_ISH_S1C_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1D_S1G_E_NSA_IS1R_EES1H_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseENSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_13flexible_typeENS3_4lessISA_EENS8_INS3_4pairIKSA_SB_EEEEEEJEJEEENS3_8functionIFN5boost7variantINSK_6detail7variant14recursive_flagISB_EEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSQ_INS_10model_baseEEENSQ_INS_17unity_sframe_baseEEENSQ_INS_17unity_sarray_baseEEENS4_ISA_NSK_18recursive_variant_ESD_NS8_INSE_ISF_S10_EEEEEENS3_6vectorIS10_NS8_IS10_EEEENSK_17recursive_wrapperINS_21function_closure_infoEEEEEEPSU_NS4_ISA_S1A_SD_NS8_INSE_ISF_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_;
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  atomic_ullong *volatile v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D754738;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223DE5D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D754738;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D754738;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D754738;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223DE5F14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE7__cloneEPNS0_6__baseIS1T_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D754738;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE18destroy_deallocateEv(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EEclEOS1Q_OS1B_(uint64_t a1, uint64_t *a2, void *a3)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEEENS_8functionIFS18_PT0_S1B_EEEMS1F_KFT1_DpT2_ENS12_ISC_NSA_ISC_EEEEEUlPS5_S1B_E_NSA_IS1R_EEFS18_S1Q_S1B_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a3 + 1;
  uint64_t v5 = a3[1];
  uint64_t v6 = (uint64_t *)*a3;
  uint64_t v7 = v5;
  if (a3[2])
  {
    *(void *)(v5 + 16) = &v7;
    *a3 = v4;
    *uint64_t v4 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v6 = &v7;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v3, (uint64_t)&v6);
}

void sub_223DE60AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::ml_model_base,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const& (turi::ml_model_base::*)()const,std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v14 = 1;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v17 = 0;
  uint64_t v18 = v19;
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  memset(&v11, 0, sizeof(v11));
  if (&v11 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v11, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v11.__begin_;
    std::vector<std::string>::pointer end = (long long *)v11.__end_;
  }
  std::string::size_type v10 = &v13;
  v7[2] = &v13;
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v9 = v12;
  uint64_t v6 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = (std::string *)v7;
  _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN5boost7variantINSA_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSH_INS_10model_baseEEENSH_INS_17unity_sframe_baseEEENSH_INS_17unity_sarray_baseEEENS3_IS9_NSA_18recursive_variant_ENS2_4lessIS9_EENS7_INS2_4pairIKS9_SR_EEEEEENS2_6vectorISR_NS7_ISR_EEEENSA_17recursive_wrapperINS_21function_closure_infoEEEEEEST_NS7_INSU_ISV_S15_EEEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_13ml_model_baseERKS18_JEEENS2_8functionIFS15_PT0_S18_EEEMS1G_KFT1_DpT2_ENSZ_IS9_NS7_IS9_EEEEENKUlPS1C_S18_E_clES1R_S18_EUlvE_EEvT_((uint64_t)&v6, a1, &v13);
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
}

void sub_223DE6220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v2 - 104));
  _Unwind_Resume(a1);
}

void _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN5boost7variantINSA_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSH_INS_10model_baseEEENSH_INS_17unity_sframe_baseEEENSH_INS_17unity_sarray_baseEEENS3_IS9_NSA_18recursive_variant_ENS2_4lessIS9_EENS7_INS2_4pairIKS9_SR_EEEEEENS2_6vectorISR_NS7_ISR_EEEENSA_17recursive_wrapperINS_21function_closure_infoEEEEEEST_NS7_INSU_ISV_S15_EEEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_13ml_model_baseERKS18_JEEENS2_8functionIFS15_PT0_S18_EEEMS1G_KFT1_DpT2_ENSZ_IS9_NS7_IS9_EEEEENKUlPS1C_S18_E_clES1R_S18_EUlvE_EEvT_(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (void *)(*a3 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *))(*v6 + v4);
  }
  uint64_t v7 = (const void ***)v4(v6);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&v11, v7);
  uint64_t v8 = a1 + 8;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  uint64_t v9 = v12;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  uint64_t v10 = v13;
  *(void *)(a1 + 16) = v13;
  if (v10)
  {
    *(void *)(v9 + 16) = v8;
    std::vector<std::string> v11 = &v12;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    *(void *)a1 = v8;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v11, (char *)v9);
}

void sub_223DE6384(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_ED1Ev(void *a1)
{
  *a1 = &unk_26D7547B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_ED0Ev(void *a1)
{
  *a1 = &unk_26D7547B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26D7547B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223DE64A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7547B8;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_EclEOS1F_OS1B_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN5boost7variantINSB_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSI_INS_10model_baseEEENSI_INS_17unity_sframe_baseEEENSI_INS_17unity_sarray_baseEEENS4_ISA_NSB_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SS_EEEEEENS3_6vectorISS_NS8_ISS_EEEENSB_17recursive_wrapperINS_21function_closure_infoEEEEEESU_NS8_INSV_ISW_S16_EEEEEEJEJEEENS3_8functionIFS16_PSM_S19_EEEMT_KFT0_DpT1_EDpT2_EUlS1D_S19_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseERKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN5boost7variantINSD_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSK_INS2_10model_baseEEENSK_INS2_17unity_sframe_baseEEENSK_INS2_17unity_sarray_baseEEENS6_ISC_NSD_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SU_EEEEEENS_6vectorISU_NSA_ISU_EEEENSD_17recursive_wrapperINS2_21function_closure_infoEEEEEESW_NSA_INSX_ISY_S18_EEEEEEJEJEEENS_8functionIFS18_PSO_S1B_EEEMT_KFT0_DpT1_EDpT2_EUlS1F_S1B_E_NSA_IS1Q_EES1G_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13ml_model_baseERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN5boost7variantINSB_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS3_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSI_INS_10model_baseEEENSI_INS_17unity_sframe_baseEEENSI_INS_17unity_sarray_baseEEENS4_ISA_NSB_18recursive_variant_ENS3_4lessISA_EENS8_INS3_4pairIKSA_SS_EEEEEENS3_6vectorISS_NS8_ISS_EEEENSB_17recursive_wrapperINS_21function_closure_infoEEEEEESU_NS8_INSV_ISW_S16_EEEEEEJEJEEENS3_8functionIFS16_PSM_S19_EEEMT_KFT0_DpT1_EDpT2_EUlS1D_S19_E_;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  atomic_ullong *volatile v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D754838;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223DE6754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D754838;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D754838;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D754838;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223DE68E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D754838;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    *uint64_t v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223DE6A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::ml_model_base,void,std::map<std::string,turi::flexible_type> const&>(void (turi::ml_model_base::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::ml_model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v26[2] = *(void ***)MEMORY[0x263EF8340];
  char v20 = 1;
  std::string __p = 0;
  uint64_t v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v23 = 0;
  atomic_ullong *volatile v24 = v25;
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v17 = a2;
  uint64_t v18 = v19;
  memset(&v15, 0, sizeof(v15));
  uint64_t v16 = a3;
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    std::vector<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v15.__begin_;
    std::vector<std::string>::pointer end = (long long *)v15.__end_;
  }
  char v14 = &v17;
  uint64_t v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v11);
  v26[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  uint64_t v8 = *(void (**)(void *, void ***))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string::size_type v10 = (void *)(v17 + (v9 >> 1));
  if (v9) {
    uint64_t v8 = *(void (**)(void *, void ***))(*v10 + v8);
  }
  v8(v10, &v18);
  memset(v26, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v26, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)this + 13) = *(void ***)((char *)v26 + 5);
  *(void ***)(a4 + 8) = v26[0];
  *(unsigned char *)(a4 + 20) = BYTE4(v26[1]);
  *(_DWORD *)a4 = 0;
  v26[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v18, v19[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
}

void sub_223DE6C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, ...)
{
  va_start(va, a15);
  *(void *)(v17 - 88) = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 88));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v15, a14);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::map<std::string,turi::flexible_type>>>::operator()<1>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      uint64_t v9 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v9);
    uint64_t v4 = *a1 + 16;
    uint64_t v5 = (uint64_t *)(*a1 + 8);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(void **)v4);
    *(void *)(v4 - 8) = v9;
    uint64_t v6 = v10;
    *(void *)uint64_t v4 = v10;
    uint64_t v7 = v11;
    *(void *)(v4 + 8) = v11;
    if (v7)
    {
      uint64_t v8 = 0;
      std::logic_error v6[2] = v4;
      uint64_t v9 = &v10;
      std::string::size_type v10 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      *uint64_t v5 = v4;
      uint64_t v8 = v10;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v9, v8);
  }
}

uint64_t turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  v21[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v21, 0, 13);
  uint64_t v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((atomic_ullong **)v3 != v21)
  {
    uint64_t v5 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v21 + 5) = *(atomic_ullong **)(v3 + 5);
    v21[0] = v5;
    BYTE4(v21[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v21[1]) <= 9u && ((1 << SBYTE4(v21[1])) & 0x33C) != 0) {
      atomic_fetch_add(v21[0], 1uLL);
    }
  }
  uint64_t result = turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::get((turi::flexible_type_internals *)v21, v4, a2);
  switch(BYTE4(v21[1]))
  {
    case 2:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v21[0];
        if (v21[0])
        {
          if (*((char *)v21[0] + 31) < 0) {
            operator delete(*((void **)v21[0] + 1));
          }
          uint64_t v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = v21[0];
        if (v21[0])
        {
          uint64_t v18 = (void *)v21[0][1];
          if (v18)
          {
            v21[0][2] = (atomic_ullong)v18;
            operator delete(v18);
          }
          uint64_t v9 = v17;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v21[0];
        if (v21[0])
        {
          v20[0] = (void **)(v21[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v20);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v21[0];
        if (v21[0])
        {
          v20[0] = (void **)(v21[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v20);
LABEL_33:
          uint64_t v9 = v11;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v19 = v21[0];
        if (v21[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v21[0] + 2);
          uint64_t v9 = v19;
          unsigned int v16 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v12 = v21[0];
        if (v21[0])
        {
          uint64_t v13 = (void *)v21[0][6];
          if (v13)
          {
            v21[0][7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          char v14 = (void *)v12[3];
          if (v14)
          {
            void v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          uint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v9 = v12;
          unsigned int v16 = 2071181815;
LABEL_37:
          uint64_t v10 = v16 | 0x1030C4000000000;
LABEL_38:
          uint64_t result = MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_223DE7038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      uint64_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      atomic_ullong *volatile v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      uint64_t v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      uint64_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      uint64_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      uint64_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      atomic_ullong *volatile v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      uint64_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

uint64_t turi::flexible_type_converter<std::map<std::string,turi::flexible_type>>::get@<X0>(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  return turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>((uint64_t **)a3, a1, a2);
}

void sub_223DE7350(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(uint64_t **a1, turi::flexible_type_internals *this, const char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  memset(v14, 0, sizeof(v14));
  int v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 4)
  {
    uint64_t v9 = *(void *)this;
    uint64_t v10 = *(void *)(*(void *)this + 8);
    if (*(void *)(*(void *)this + 16) != v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>((std::string *)v14, (turi::flexible_type_internals *)(v10 + v11), a3);
        std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string,turi::flexible_type>>(a1, (const void **)v14, (uint64_t)v14);
        ++v12;
        uint64_t v10 = *(void *)(v9 + 8);
        v11 += 16;
      }
      while (v12 < (*(void *)(v9 + 16) - v10) >> 4);
    }
  }
  else
  {
    if (v4 != 5) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"flex_dict / list of 2-element flex_lists/flex_vec", a3);
    }
    uint64_t v5 = *(void *)this;
    uint64_t v6 = *(void *)(*(void *)this + 8);
    if (*(void *)(*(void *)this + 16) != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<1>::get<std::string>((std::string *)v14, (char *)(v6 + v7));
        turi::flexible_type_internals::ft_converter<1>::get((uint64_t)&v14[24], (uint64_t *)(*(void *)(v5 + 8) + v7 + 16));
        std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string,turi::flexible_type>>(a1, (const void **)v14, (uint64_t)v14);
        ++v8;
        uint64_t v6 = *(void *)(v5 + 8);
        v7 += 32;
      }
      while (v8 < (*(void *)(v5 + 16) - v6) >> 5);
    }
  }
  return std::pair<std::string,turi::flexible_type>::~pair((uint64_t)v14);
}

void sub_223DE74C0()
{
}

void sub_223DE74CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::string,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 548, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<9>::get<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223DE75E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_internals::ft_converter<1>::get(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    v22[5] = v2;
    v22[6] = v3;
    uint64_t v5 = result;
    switch(*(unsigned char *)(result + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          if (*((char *)v6 + 31) < 0) {
            operator delete((void *)v6[1]);
          }
          atomic_ullong *volatile v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            v9[2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          atomic_ullong *volatile v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          v22[0] = (void **)(v11 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v22);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          v22[0] = (void **)(v11 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v22);
LABEL_19:
          atomic_ullong *volatile v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)result;
          if (!*(void *)result) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v12 + 2);
          atomic_ullong *volatile v7 = v12;
          unsigned int v13 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)result;
          if (*(void *)result)
          {
            uint64_t v15 = (void *)v14[6];
            if (v15)
            {
              v14[7] = (atomic_ullong)v15;
              operator delete(v15);
            }
            unsigned int v16 = (void *)v14[3];
            if (v16)
            {
              void v14[4] = (atomic_ullong)v16;
              operator delete(v16);
            }
            uint64_t v17 = (std::__shared_weak_count *)v14[2];
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            atomic_ullong *volatile v7 = v14;
            unsigned int v13 = 2071181815;
LABEL_32:
            uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_33:
            uint64_t result = MEMORY[0x22A614FA0](v7, v8);
          }
LABEL_34:
          *(void *)uint64_t v5 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v18 = *a2;
    *(void *)(v5 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)uint64_t v5 = v18;
    LODWORD(v18) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(v5 + 12) = v18;
    BOOL v19 = v18 > 9;
    int v20 = (1 << v18) & 0x33C;
    if (!v19 && v20 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v5, 1uLL);
    }
  }
  return result;
}

char *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string,turi::flexible_type>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  atomic_ullong *volatile v6 = (char *)*v5;
  if (!*v5)
  {
    atomic_ullong *volatile v7 = (uint64_t **)v5;
    atomic_ullong *volatile v6 = (char *)operator new(0x48uLL);
    v11[1] = a1 + 1;
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(v6 + 61) = *(void *)(a3 + 29);
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *((void *)v6 + 6) = v8;
    *((void *)v6 + 7) = v9;
    v6[68] = *(unsigned char *)(a3 + 36);
    *(unsigned char *)(a3 + 36) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v6;
}

uint64_t turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::string *a1, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12) != 4) {
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec", a3);
  }
  uint64_t v3 = *(void *)this;
  if (*(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8) != 32) {
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec (list size != 2)", a3);
  }
  turi::flexible_type_internals::ft_converter<1>::get<std::string>(a1, *(char **)(*(void *)this + 8));
  uint64_t v5 = (uint64_t *)(*(void *)(v3 + 8) + 16);
  return turi::flexible_type_internals::ft_converter<1>::get((uint64_t)&a1[1], v5);
}

void sub_223DE7AC0()
{
}

void turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 591, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223DE7BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 597, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<10>::get<std::string,turi::flexible_type>(std::pair<std::string,turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223DE7DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,turi::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 36))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 24);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *(void **)(a1 + 24);
        if (v5)
        {
          atomic_ullong *volatile v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 24);
        if (v7)
        {
          uint64_t v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 24);
        if (v7)
        {
          uint64_t v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 24);
        if (v10)
        {
          atomic_ullong *volatile v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          char v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_ED1Ev(void *a1)
{
  *a1 = &unk_26D7548B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_ED0Ev(void *a1)
{
  *a1 = &unk_26D7548B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26D7548B8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223DE81F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E7__cloneEPNS0_6__baseIS1J_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D7548B8;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_EclEOS1F_OS1I_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ZNSt3__128__invoke_void_return_wrapperIN5boost7variantINS1_6detail7variant14recursive_flagIN4turi13flexible_typeEEEJNS_10shared_ptrINS6_17unity_sgraph_baseEEENS6_11dataframe_tENS9_INS6_10model_baseEEENS9_INS6_17unity_sframe_baseEEENS9_INS6_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_18recursive_variant_ENS_4lessISP_EENSN_INS_4pairIKSP_SQ_EEEEEENS_6vectorISQ_NSN_ISQ_EEEENS1_17recursive_wrapperINS6_21function_closure_infoEEEEEELb0EE6__callB8ne180100IJRZNS6_26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS6_13ml_model_baseENSY_ISP_NSN_ISP_EEEEJEJEEENS_8functionIFS14_PSD_NSJ_ISP_S14_SS_NSN_INST_ISU_S14_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1D_S1G_E_S1D_S1G_EEES14_DpOT_(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13ml_model_baseEvJRKNS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_13flexible_typeENS_4lessISC_EENSA_INS_4pairIKSC_SD_EEEEEEEJEEENS_8functionIFN5boost7variantINSO_6detail7variant14recursive_flagISD_EEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSU_INS2_10model_baseEEENSU_INS2_17unity_sframe_baseEEENSU_INS2_17unity_sarray_baseEEENS6_ISC_NSO_18recursive_variant_ESF_NSA_INSG_ISH_S14_EEEEEENS_6vectorIS14_NSA_IS14_EEEENSO_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSY_NS6_ISC_S1E_SF_NSA_INSG_ISH_S1E_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1F_S1I_E_NSA_IS1T_EES1J_E11target_typeEv()
{
}

turi::neural_net::model_spec *std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](turi::neural_net::model_spec **a1, turi::neural_net::model_spec *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::neural_net::model_spec::~model_spec(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(v4 - 128));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::option_handling::option_info::~option_info(turi::option_handling::option_info *this)
{
  uint64_t v38 = (void **)((char *)this + 104);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v38);
  switch(*((unsigned char *)this + 100))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 11), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *((void *)this + 11);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 11), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = (void *)*((void *)this + 11);
        if (v5)
        {
          atomic_ullong *volatile v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 11), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 11);
        if (v7)
        {
          uint64_t v38 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v38);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 11), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 11);
        if (v7)
        {
          uint64_t v38 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v38);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 11), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *((void *)this + 11);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 11), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = (void *)*((void *)this + 11);
        if (v10)
        {
          atomic_ullong *volatile v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          char v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((unsigned char *)this + 100) = 0;
  switch(*((unsigned char *)this + 84))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 9), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *((void *)this + 9);
        if (v14)
        {
          if (*(char *)(v14 + 31) < 0) {
            operator delete(*(void **)(v14 + 8));
          }
          uint64_t v15 = (void *)v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 9), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = (void *)*((void *)this + 9);
        if (v17)
        {
          uint64_t v18 = (void *)v17[1];
          if (v18)
          {
            long long v17[2] = v18;
            operator delete(v18);
          }
          uint64_t v15 = v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 9), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *((void *)this + 9);
        if (v19)
        {
          uint64_t v38 = (void **)(v19 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v38);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 9), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *((void *)this + 9);
        if (v19)
        {
          uint64_t v38 = (void **)(v19 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v38);
LABEL_50:
          uint64_t v15 = (void *)v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 9), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = *((void *)this + 9);
        if (v20)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
          uint64_t v15 = (void *)v20;
          unsigned int v21 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 9), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v22 = (void *)*((void *)this + 9);
        if (v22)
        {
          uint64_t v23 = (void *)v22[6];
          if (v23)
          {
            v22[7] = v23;
            operator delete(v23);
          }
          atomic_ullong *volatile v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = v24;
            operator delete(v24);
          }
          unsigned int v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          uint64_t v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_63:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((unsigned char *)this + 84) = 0;
  switch(*((unsigned char *)this + 60))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 6), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v26 = *((void *)this + 6);
        if (v26)
        {
          if (*(char *)(v26 + 31) < 0) {
            operator delete(*(void **)(v26 + 8));
          }
          uint64_t v27 = (void *)v26;
          uint64_t v28 = 0x1012C404EF22A49;
          goto LABEL_96;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 6), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v29 = (void *)*((void *)this + 6);
        if (v29)
        {
          uint64_t v30 = (void *)v29[1];
          if (v30)
          {
            v29[2] = v30;
            operator delete(v30);
          }
          uint64_t v27 = v29;
          uint64_t v28 = 0x1080C409938AC02;
          goto LABEL_96;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 6), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v31 = *((void *)this + 6);
        if (v31)
        {
          uint64_t v38 = (void **)(v31 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v38);
          goto LABEL_82;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 6), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v31 = *((void *)this + 6);
        if (v31)
        {
          uint64_t v38 = (void **)(v31 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v38);
LABEL_82:
          uint64_t v27 = (void *)v31;
          uint64_t v28 = 0x1020C405E66F15BLL;
          goto LABEL_96;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 6), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v32 = *((void *)this + 6);
        if (v32)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v32 + 16));
          uint64_t v27 = (void *)v32;
          unsigned int v33 = -235920773;
          goto LABEL_95;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 6), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v34 = (void *)*((void *)this + 6);
        if (v34)
        {
          uint64_t v35 = (void *)v34[6];
          if (v35)
          {
            v34[7] = v35;
            operator delete(v35);
          }
          uint64_t v36 = (void *)v34[3];
          if (v36)
          {
            v34[4] = v36;
            operator delete(v36);
          }
          uint64_t v37 = (std::__shared_weak_count *)v34[2];
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
          uint64_t v27 = v34;
          unsigned int v33 = 2071181815;
LABEL_95:
          uint64_t v28 = v33 | 0x1030C4000000000;
LABEL_96:
          MEMORY[0x22A614FA0](v27, v28);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((unsigned char *)this + 60) = 0;
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::map<std::string,turi::flexible_type>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::flexible_type>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_223DE8A40(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::flexible_type>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    atomic_ullong *volatile v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>(v5, v6, (const void **)v4 + 4, (std::string *)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>(uint64_t a1, char *a2, int *a3)
{
  atomic_ullong *volatile v6 = std::string::basic_string[abi:ne180100]<0>((void *)a1, a2) + 4;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a3, *a3 ^ (*a3 >> 31), &v6, (uint64_t)(a3 + 2));
  *(_DWORD *)(a1 + 24) = *a3 ^ (*a3 >> 31);
  return a1;
}

void sub_223DE8B48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

boost::detail::variant *boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *result, int a2, void **a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = *a3;
      *uint64_t v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      *((unsigned char *)v4 + 12) = 0;
      uint64_t v5 = *(void *)a4;
      *(void *)((char *)v4 + 5) = *(void *)(a4 + 5);
      *uint64_t v4 = v5;
      *((unsigned char *)v4 + 12) = *(unsigned char *)(a4 + 12);
      *(unsigned char *)(a4 + 12) = 0;
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      *(_OWORD *)*a3 = *(_OWORD *)a4;
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      break;
    case 2:
      uint64_t result = (boost::detail::variant *)boost::detail::variant::move_into::internal_visit<turi::dataframe_t>(a3, a4);
      break;
    case 6:
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
    case 7:
      operator new();
    case 8:
      operator new();
    default:
      boost::detail::variant::forced_return<void>(result);
  }
  return result;
}

void **boost::detail::variant::move_into::internal_visit<turi::dataframe_t>(void **result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  v2[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v2[3] = *(void *)(a2 + 24);
  uint64_t v3 = (void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 32);
  v2[4] = v4;
  uint64_t v5 = v2 + 4;
  uint64_t v6 = *(void *)(a2 + 40);
  void v2[5] = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *(void *)(a2 + 24) = v3;
    *uint64_t v3 = 0;
    *(void *)(a2 + 40) = 0;
  }
  else
  {
    v2[3] = v5;
  }
  v2[6] = *(void *)(a2 + 48);
  uint64_t v7 = (void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 56);
  v2[7] = v8;
  BOOL v9 = v2 + 7;
  uint64_t v10 = *(void *)(a2 + 64);
  v2[8] = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 48) = v7;
    *uint64_t v7 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    v2[6] = v9;
  }
  return result;
}

uint64_t std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 104 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 13;
      v6 -= 104;
    }
    while (v6);
  }
  return a1;
}

void sub_223DE8E28(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_223DE8EBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],std::string,0>(void *a1, char *a2)
{
  v2[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::flexible_type::flexible_type<std::string>((uint64_t)v2);
}

void sub_223DE8F64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type::flexible_type<std::string>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  turi::flexible_type::operator=<std::string>(a1);
}

{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  turi::flexible_type::operator=<std::string>(a1);
}

void sub_223DE8FB4(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

unint64_t turi::variant_converter<unsigned long,void>::get(uint64_t a1, int *a2)
{
  v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  uint64_t v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((atomic_ullong **)v2 != v22)
  {
    uint64_t v4 = *(atomic_ullong **)v2;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(v2 + 5);
    v22[0] = v4;
    BYTE4(v22[1]) = *(unsigned char *)(v2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  v20[0] = 0;
  turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(v20, (turi::flexible_type_internals *)v22, v3);
  unint64_t v6 = v20[0];
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v7 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          uint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v22[0];
        if (v22[0])
        {
          uint64_t v17 = (void *)v22[0][1];
          if (v17)
          {
            v22[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_33:
          uint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v18 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          uint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v11 = v22[0];
        if (v22[0])
        {
          char v12 = (void *)v22[0][6];
          if (v12)
          {
            v22[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_223DE9368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      unsigned int v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      uint64_t v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      unsigned int v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      unsigned int v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      unsigned int v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      atomic_ullong *volatile v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      unsigned int v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

unint64_t *turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unint64_t *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12))
  {
    if (*((unsigned char *)this + 12) != 1) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer", a3);
    }
    if (*(double *)this != (double)(unint64_t)*(double *)this) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / convertable float", a3);
    }
    unint64_t v3 = (unint64_t)*(double *)this;
  }
  else
  {
    unint64_t v3 = *(void *)this;
  }
  turi::neural_net::model_spec *result = v3;
  return result;
}

void sub_223DE96D0()
{
}

void turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 248, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223DE97D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 255, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(unsigned long &,turi::flexible_type const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223DE99D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[18],char const(&)[1],0>(void *a1, char *a2, char *a3)
{
  void v4[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::flexible_type::flexible_type((turi::flexible_type *)v4, a3);
}

void sub_223DE9B64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::read_arg<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void v10[2] = *(long long **)MEMORY[0x263EF8340];
  if (*(_DWORD *)a1 == *(int *)a1 >> 31
    && (uint64_t v4 = (unsigned char *)turi::variant_get_ref<turi::flexible_type>((int *)a1), v4[12] == 5))
  {
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = a2 + 8;
    long long v5 = *(uint64_t **)(*(void *)v4 + 8);
    for (uint64_t i = *(uint64_t **)(*(void *)v4 + 16); v5 != i; v5 += 4)
    {
      memset(v10, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v10, v5 + 2);
      *(long long **)&void v9[5] = *(long long **)((char *)v10 + 5);
      *(long long **)uint64_t v9 = v10[0];
      v9[12] = BYTE4(v10[1]);
      unsigned int v8 = 0;
      v10[0] = (long long *)(*v5 + 8);
      char v7 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v10[0], (uint64_t)&std::piecewise_construct, v10);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v7 + 14, &v8);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v8);
    }
  }
  else
  {
    turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get(a1, (uint64_t *)a2);
  }
}

void sub_223DE9CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  char v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x88uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223DE9DE8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
  this[1].__r_.__value_.__s.__data_[20] = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  return this;
}

uint64_t *turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v6 = &v5;
  has_fallback_type = (const void ***)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)a1, *(_DWORD *)a1 ^ (*(int *)a1 >> 31), (uint64_t)&v6, a1 + 1);
  if (!has_fallback_type)
  {
    unint64_t v6 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](a2, has_fallback_type);
}

void sub_223DE9EEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void sub_223DE9F10(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = 0;
  if (a2 >= 6)
  {
    switch(a2)
    {
      case 6u:
        uint64_t result = *a4;
        break;
      case 7u:
      case 8u:
        return result;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void turi::full_type_name<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
}

void sub_223DEA058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

turi::table_printer *std::unique_ptr<turi::table_printer>::reset[abi:ne180100](turi::table_printer **a1, turi::table_printer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::table_printer::~table_printer(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2 + 24, *(void **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
  {
    long long v3 = *(void **)a2;
    operator delete(v3);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  char v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    char v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 7) = 0;
    *((_DWORD *)v7 + 16) = 0;
    *((unsigned char *)v7 + 68) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>(uint64_t a1, void *a2)
{
  v21[4] = *(void ***)MEMORY[0x263EF8340];
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::reserve((uint64_t *)&v16, a2[2]);
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v18 = 0;
    int v19 = 0;
    char v20 = 0;
    turi::flexible_type::operator=<std::string>((uint64_t)&v18);
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      if (*((char *)v4 + 31) < 0) {
        operator delete((void *)v4[1]);
      }
      atomic_ullong *volatile v5 = v4;
      uint64_t v6 = 0x1012C404EF22A49;
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      uint64_t v14 = (void *)v13[1];
      if (v14)
      {
        void v13[2] = (atomic_ullong)v14;
        operator delete(v14);
      }
      atomic_ullong *volatile v5 = v13;
      uint64_t v6 = 0x1080C409938AC02;
      goto LABEL_34;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      v21[0] = (void **)(v7 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
      goto LABEL_29;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      v21[0] = (void **)(v7 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_29:
      atomic_ullong *volatile v5 = v7;
      uint64_t v6 = 0x1020C405E66F15BLL;
      goto LABEL_34;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v15 + 2);
      atomic_ullong *volatile v5 = v15;
      unsigned int v12 = -235920773;
      goto LABEL_33;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_36;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_35;
      }
      uint64_t v9 = (void *)v8[6];
      if (v9)
      {
        v8[7] = (atomic_ullong)v9;
        operator delete(v9);
      }
      uint64_t v10 = (void *)v8[3];
      if (v10)
      {
        void v8[4] = (atomic_ullong)v10;
        operator delete(v10);
      }
      uint64_t v11 = (std::__shared_weak_count *)v8[2];
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      atomic_ullong *volatile v5 = v8;
      unsigned int v12 = 2071181815;
LABEL_33:
      uint64_t v6 = v12 | 0x1030C4000000000;
LABEL_34:
      MEMORY[0x22A614FA0](v5, v6);
LABEL_35:
      *(void *)a1 = 0;
LABEL_36:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 5;
      operator new();
    default:
      goto LABEL_36;
  }
}

void sub_223DEAD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  MEMORY[0x22A614FA0](v18, 0x1012C404EF22A49);
  a18 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<12>::set<std::vector<std::string>>(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  std::vector<turi::flexible_type>::vector(v19, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  if (v19[1] != v19[0])
  {
    atomic_ullong *volatile v4 = (long long *)*a2;
    if (*(char *)(*a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v5 = *v4;
      __p.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    uint64_t v20 = 0;
    int v21 = 0;
    char v22 = 0;
    turi::flexible_type::operator=<std::string>((uint64_t)&v20);
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_39;
      }
      atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_38;
      }
      if (*((char *)v6 + 31) < 0) {
        operator delete((void *)v6[1]);
      }
      atomic_ullong *volatile v7 = v6;
      uint64_t v8 = 0x1012C404EF22A49;
      goto LABEL_37;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_39;
      }
      atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_38;
      }
      long long v16 = (void *)v15[1];
      if (v16)
      {
        v15[2] = (atomic_ullong)v16;
        operator delete(v16);
      }
      atomic_ullong *volatile v7 = v15;
      uint64_t v8 = 0x1080C409938AC02;
      goto LABEL_37;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_39;
      }
      atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_38;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v9 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_32;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_39;
      }
      atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_38;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v9 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_32:
      atomic_ullong *volatile v7 = v9;
      uint64_t v8 = 0x1020C405E66F15BLL;
      goto LABEL_37;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_39;
      }
      atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_38;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v17 + 2);
      atomic_ullong *volatile v7 = v17;
      unsigned int v14 = -235920773;
      goto LABEL_36;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_39;
      }
      atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_38;
      }
      uint64_t v11 = (void *)v10[6];
      if (v11)
      {
        v10[7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      unsigned int v12 = (void *)v10[3];
      if (v12)
      {
        void v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      atomic_ullong *volatile v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      atomic_ullong *volatile v7 = v10;
      unsigned int v14 = 2071181815;
LABEL_36:
      uint64_t v8 = v14 | 0x1030C4000000000;
LABEL_37:
      MEMORY[0x22A614FA0](v7, v8);
LABEL_38:
      *(void *)a1 = 0;
LABEL_39:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 4;
      operator new();
    default:
      goto LABEL_39;
  }
}

void sub_223DEBCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,int a23,char a24)
{
  MEMORY[0x22A614FA0](v24, 0x1012C404EF22A49);
  std::string __p = &a16;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *std::vector<turi::flexible_type>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 12) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_223DEBF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<turi::flexible_type>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<turi::toolkit_class_specification>::__push_back_slow_path<turi::toolkit_class_specification const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  unsigned int v14 = a1 + 2;
  if (v6) {
    atomic_ullong *volatile v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>((uint64_t)(a1 + 2), v6);
  }
  else {
    atomic_ullong *volatile v7 = 0;
  }
  atomic_ullong *volatile v10 = v7;
  uint64_t v11 = (std::string *)&v7[56 * v3];
  atomic_ullong *volatile v13 = &v7[56 * v6];
  std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>(a1 + 16, v11, a2);
  unsigned int v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<turi::toolkit_class_specification>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<turi::toolkit_class_specification>::~__split_buffer(&v10);
  return v8;
}

void sub_223DEC0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::toolkit_class_specification>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t result = std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a3 + 24);
  this[2].__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  return result;
}

void sub_223DEC140(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<turi::toolkit_class_specification>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>,std::reverse_iterator<turi::toolkit_class_specification*>,std::reverse_iterator<turi::toolkit_class_specification*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>,std::reverse_iterator<turi::toolkit_class_specification*>,std::reverse_iterator<turi::toolkit_class_specification*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  void v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 3;
    do
    {
      long long v9 = *((_OWORD *)v8 - 2);
      *(void *)(v7 - 40) = *(v8 - 2);
      *(_OWORD *)(v7 - 56) = v9;
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      *(v8 - 4) = 0;
      *(void *)(v7 - 32) = *(v8 - 1);
      uint64_t v10 = *v8;
      *(void *)(v7 - 24) = *v8;
      uint64_t v11 = v7 - 24;
      uint64_t v12 = v8[1];
      *(void *)(v7 - 16) = v12;
      if (v12)
      {
        *(void *)(v10 + 16) = v11;
        *(v8 - 1) = v8;
        *uint64_t v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(void *)(v7 - 32) = v11;
      }
      *(void *)(v7 - 8) = v8[2];
      uint64_t v7 = *((void *)&v19 + 1) - 56;
      *((void *)&v19 + 1) -= 56;
      atomic_ullong *volatile v13 = v8 - 4;
      v8 -= 7;
    }
    while (v13 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,std::reverse_iterator<turi::toolkit_class_specification*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::toolkit_class_specification>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::toolkit_class_specification>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100](v4, i - 56);
  }
}

atomic_ullong *volatile *OUTLINED_FUNCTION_0_1(atomic_ullong *volatile *result)
{
  return result;
}

void OUTLINED_FUNCTION_1()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_2()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_3()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_4()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_5()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_6()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_7()
{
  *(void *)uint64_t v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

void OUTLINED_FUNCTION_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
}

void OUTLINED_FUNCTION_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
}

void OUTLINED_FUNCTION_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
}

void OUTLINED_FUNCTION_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
}

void tc_datetime_create_empty(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DEC5FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEC628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void fill_error_from_exception(std::exception_ptr *a1)
{
  if (a1->__ptr_)
  {
    v1.__ptr_ = std::exception_ptr::exception_ptr(&v2, a1);
    std::rethrow_exception(v1);
    __break(1u);
  }
}

void sub_223DEC68C(void *a1, std::string *a2, void *__p, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, long long __pa, std::string::size_type a14)
{
  int v15 = (int)a2;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v14 - 24));
  if (v15 == 4)
  {
    char v17 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&a10, "Error: ");
    long long v18 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v17 + 16))(v17);
    long long v19 = std::string::append((std::string *)&a10, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    a14 = v19->__r_.__value_.__r.__words[2];
    __pa = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    set_error(a9);
  }
  if (v15 == 3)
  {
    __cxa_begin_catch(a1);
    std::operator+<char>();
    set_error(a9);
  }
  int v21 = (const std::string::value_type *)__cxa_begin_catch(a1);
  if (v15 == 2)
  {
    char v22 = v21;
    std::string::basic_string[abi:ne180100]<0>(&a10, "Error: ");
    uint64_t v23 = std::string::append((std::string *)&a10, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    a14 = v23->__r_.__value_.__r.__words[2];
    __pa = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    set_error(a9);
  }
  std::string::basic_string[abi:ne180100]<0>(&__pa, "Unknown internal error occurred.");
  set_error(a9);
}

void sub_223DEC7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_datetime_create_from_posix_timestamp(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DEC924(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEC950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_datetime_create_from_posix_highres_timestamp(turi *a1, double a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  int v3 = (int)((a2 - (double)(uint64_t)floor(a2)) * 1000000.0);
  if (v3 >= 999999) {
    unsigned int v4 = 999999;
  }
  else {
    unsigned int v4 = v3;
  }
  if (v4 < 0xF4240) {
    operator new();
  }
  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
}

void sub_223DECA34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void sub_223DECA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_datetime_create_from_string(turi *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    if (a2) {
      MEMORY[0x22A614700](&v10, a2);
    }
    *(_OWORD *)std::string __p = v10;
    uint64_t v8 = v11;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    turi::flexible_type_impl::date_time_string_reader::date_time_string_reader(v9, __p);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v6, (char *)a1);
    turi::flexible_type_impl::date_time_string_reader::read((uint64_t)v9, &v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "\"Datetime string\" is null.");
  set_error(a3);
}

void sub_223DECCB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DECC98);
}

void sub_223DECD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void set_error(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 8))(v2, a1);
  }
  operator new();
}

void turi::flexible_type_impl::date_time_string_reader::~date_time_string_reader(turi::flexible_type_impl::date_time_string_reader *this)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *((void *)this + 3) = *MEMORY[0x263F8C2C0];
  *(void *)((char *)this + *(void *)(v3 - 24) + 24) = *(void *)(v2 + 24);
  *((void *)this + 5) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x22A614E30]((char *)this + 144);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void tc_datetime_set_time_zone_offset(turi *a1, int a2, int a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a4);
  }
  int v8 = a3 + 4 * a2;
  if (v8 != 64 && (v8 - 49) <= 0xFFFFFF9E) {
    turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
  }
  if (v8 >= 0) {
    char v9 = 25;
  }
  else {
    char v9 = -25;
  }
  *((unsigned char *)a1 + 15) = v9 + v8;
}

void sub_223DECFE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DECFC0);
}

void sub_223DED02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_datetime_get_time_zone_offset_minutes(char *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a2);
  }
  uint64_t v4 = a1[15];
  uint64_t v5 = -25;
  if ((int)v4 < 0) {
    uint64_t v5 = 25;
  }
  return 15 * (v5 + v4);
}

void sub_223DED0D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DED0C4);
}

void sub_223DED124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_datetime_set_microsecond(turi *a1, unsigned int a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a3);
  }
  if (a2 >= 0xF4240) {
    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
  }
  *((_DWORD *)a1 + 4) = a2;
}

void sub_223DED1DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DED1BCLL);
}

void sub_223DED228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_datetime_get_microsecond(int *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a2);
  }
  return a1[4];
}

void sub_223DED2BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DED2A8);
}

void sub_223DED308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_datetime_set_timestamp(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a3);
  }
  *(void *)(a1 + 8) = a2 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 15) << 56);
}

void sub_223DED3AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DED398);
}

void sub_223DED3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_datetime_get_timestamp(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a2);
  }
  return (uint64_t)(*((void *)a1 + 1) << 8) >> 8;
}

void sub_223DED490(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DED47CLL);
}

void sub_223DED4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_datetime_set_highres_timestamp(uint64_t a1, uint64_t *a2, double a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a2);
  }
  int v6 = (int)((a3 - (double)(uint64_t)floor(a3)) * 1000000.0);
  *(void *)(a1 + 8) = vcvtmd_s64_f64(a3) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 15) << 56);
  if (v6 >= 999999) {
    unsigned int v7 = 999999;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v7 >= 0xF4240) {
    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
  }
  *(_DWORD *)(a1 + 16) = v7;
}

void sub_223DED5D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DED5B4);
}

void sub_223DED620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

double tc_datetime_get_highres_timestamp(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"Datetime\" is null.");
    set_error(a2);
  }
  return (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8);
}

void sub_223DED6D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DED6C0);
}

void sub_223DED720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_datetime_less_than(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Datetime\" is null.");
    set_error(a3);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Datetime\" is null.");
    set_error(a3);
  }
  uint64_t v6 = (uint64_t)(*(void *)(a1 + 8) << 8) >> 8;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6 < v7 << 8 >> 8) {
    return 1;
  }
  if (v6 == v7 << 8 >> 8) {
    return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
  }
  return 0;
}

void sub_223DED870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_datetime_equal(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Datetime\" is null.");
    set_error(a3);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Datetime\" is null.");
    set_error(a3);
  }
  return ((*(void *)(a2 + 8) ^ *(void *)(a1 + 8)) & 0xFFFFFFFFFFFFFFLL) == 0
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

void sub_223DED954(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DED93CLL);
}

void sub_223DED9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_flex_dict_create(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DEDA24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEDA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t tc_flex_dict_add_element(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex dict\" is null.");
    set_error(a4);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"key flexible_type\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"value flexible_type\" is null.");
    set_error(a4);
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)__p, (uint64_t *)(a2 + 8), a3 + 8);
  unint64_t v10 = a1[2];
  if (v10 >= a1[3])
  {
    uint64_t v13 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>(a1 + 1, (uint64_t *)__p);
  }
  else
  {
    *(void *)unint64_t v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    *(unsigned char *)(v10 + 12) = 0;
    uint64_t v11 = *(void *)__p;
    *(void *)(v10 + 5) = *(void *)&__p[5];
    *(void *)unint64_t v10 = v11;
    *(unsigned char *)(v10 + 12) = __p[12];
    __p[12] = 0;
    *(void *)(v10 + 16) = 0;
    *(_DWORD *)(v10 + 24) = 0;
    *(unsigned char *)(v10 + 28) = 0;
    uint64_t v12 = *(void *)v16;
    *(void *)(v10 + 21) = *(void *)&v16[5];
    *(void *)(v10 + 16) = v12;
    *(unsigned char *)(v10 + 28) = v16[12];
    v16[12] = 0;
    uint64_t v13 = v10 + 32;
  }
  a1[2] = v13;
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)__p);
  return (v9 - v8) >> 5;
}

void sub_223DEDC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DEDBB0);
  }
  _Unwind_Resume(exception_object);
}

void tc_flex_dict_extract_entry(turi *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex dict\" is null.");
    set_error(a5);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"key dest flexible_type\" is null.");
    set_error(a5);
  }
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"value dest flexible_type\" is null.");
    set_error(a5);
  }
  uint64_t v10 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v10) >> 5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Index out of range.");
    set_error(a5);
  }
  uint64_t v11 = v10 + 32 * a2;
  uint64_t v12 = (atomic_ullong *volatile *)(a3 + 8);
  if (v11 != a3 + 8)
  {
    switch(*(unsigned char *)(a3 + 20))
    {
      case 2:
        if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *v12;
          if (!*v12) {
            goto LABEL_39;
          }
          if (*((char *)v13 + 31) < 0) {
            operator delete((void *)v13[1]);
          }
          uint64_t v14 = v13;
          uint64_t v15 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v18 = *v12;
          if (!*v12) {
            goto LABEL_39;
          }
          long long v19 = (void *)v18[1];
          if (v19)
          {
            uint64_t v18[2] = (atomic_ullong)v19;
            operator delete(v19);
          }
          uint64_t v14 = v18;
          uint64_t v15 = 0x1080C409938AC02;
          goto LABEL_38;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v16 = *v12;
          if (!*v12) {
            goto LABEL_39;
          }
          __p[0] = v16 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_33;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v16 = *v12;
          if (!*v12) {
            goto LABEL_39;
          }
          __p[0] = v16 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_33:
          uint64_t v14 = v16;
          uint64_t v15 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v20 = *v12;
          if (!*v12) {
            goto LABEL_39;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
          uint64_t v14 = v20;
          unsigned int v17 = -235920773;
          goto LABEL_37;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          if (*v12)
          {
            uint64_t v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
            unsigned int v17 = 2071181815;
LABEL_37:
            uint64_t v15 = v17 | 0x1030C4000000000;
LABEL_38:
            MEMORY[0x22A614FA0](v14, v15);
          }
LABEL_39:
          *uint64_t v12 = 0;
        }
        break;
      default:
        break;
    }
    int v21 = *(atomic_ullong **)v11;
    *(void *)(a3 + std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)this + 13) = *(void *)(v11 + 5);
    *uint64_t v12 = v21;
    LODWORD(v21) = *(unsigned __int8 *)(v11 + 12);
    *(unsigned char *)(a3 + 20) = (_BYTE)v21;
    BOOL v22 = v21 > 9;
    int v23 = (1 << (char)v21) & 0x33C;
    if (!v22 && v23 != 0) {
      atomic_fetch_add(*v12, 1uLL);
    }
  }
  uint64_t v25 = v11 + 16;
  uint64_t v26 = (atomic_ullong *volatile *)(a4 + 8);
  if (v25 != a4 + 8)
  {
    switch(*(unsigned char *)(a4 + 20))
    {
      case 2:
        if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v27 = *v26;
          if (!*v26) {
            goto LABEL_72;
          }
          if (*((char *)v27 + 31) < 0) {
            operator delete((void *)v27[1]);
          }
          uint64_t v28 = v27;
          uint64_t v29 = 0x1012C404EF22A49;
          goto LABEL_71;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v32 = *v26;
          if (!*v26) {
            goto LABEL_72;
          }
          unsigned int v33 = (void *)v32[1];
          if (v33)
          {
            v32[2] = (atomic_ullong)v33;
            operator delete(v33);
          }
          uint64_t v28 = v32;
          uint64_t v29 = 0x1080C409938AC02;
          goto LABEL_71;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v30 = *v26;
          if (!*v26) {
            goto LABEL_72;
          }
          __p[0] = v30 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_66;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v30 = *v26;
          if (!*v26) {
            goto LABEL_72;
          }
          __p[0] = v30 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_66:
          uint64_t v28 = v30;
          uint64_t v29 = 0x1020C405E66F15BLL;
          goto LABEL_71;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v34 = *v26;
          if (!*v26) {
            goto LABEL_72;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v34 + 2);
          uint64_t v28 = v34;
          unsigned int v31 = -235920773;
          goto LABEL_70;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v26, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          if (*v26)
          {
            uint64_t v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v26);
            unsigned int v31 = 2071181815;
LABEL_70:
            uint64_t v29 = v31 | 0x1030C4000000000;
LABEL_71:
            MEMORY[0x22A614FA0](v28, v29);
          }
LABEL_72:
          *uint64_t v26 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v35 = *(atomic_ullong **)v25;
    *(void *)(a4 + std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)this + 13) = *(void *)(v25 + 5);
    *uint64_t v26 = v35;
    LODWORD(v35) = *(unsigned __int8 *)(v25 + 12);
    *(unsigned char *)(a4 + 20) = (_BYTE)v35;
    switch((int)v35)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*v26, 1uLL);
        break;
      default:
        return;
    }
  }
}

void sub_223DEE1A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEDE2CLL);
}

void sub_223DEE208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_flex_enum_list_create(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DEE2E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEE310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_flex_enum_list_create_with_capacity(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DEE3A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEE3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::vector<turi::flex_type_enum>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

unsigned char *tc_flex_enum_list_add_element(turi *a1, char a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flex_enum_list instance null.");
    set_error(a3);
  }
  unint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = (unsigned char *)*((void *)a1 + 2);
  unint64_t v8 = *((void *)a1 + 3);
  uint64_t v9 = &v7[-v6];
  if ((unint64_t)v7 >= v8)
  {
    unint64_t v11 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v8 - v6;
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v11;
    }
    if (v13) {
      uint64_t v14 = operator new(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (char *)v14 + v13;
    v9[(void)v14] = a2;
    uint64_t v10 = (uint64_t)&v9[(void)v14 + 1];
    if (v7 == (unsigned char *)v6)
    {
      uint64_t v14 = &v9[(void)v14];
    }
    else
    {
      atomic_ullong *volatile v16 = &v7[~v6];
      do
      {
        char v17 = *--v7;
        (v16--)[(void)v14] = v17;
      }
      while (v7 != (unsigned char *)v6);
    }
    *((void *)a1 + 1) = v14;
    *((void *)a1 + 2) = v10;
    *((void *)a1 + 3) = v15;
    if (v6) {
      operator delete((void *)v6);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v10 = (uint64_t)(v7 + 1);
  }
  *((void *)a1 + 2) = v10;
  return v9;
}

void sub_223DEE5FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEE53CLL);
}

void sub_223DEE64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_flex_enum_list_extract_element(turi *a1, unint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tc_flex_enum_list instance null.");
    set_error(a3);
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (*((void *)a1 + 2) - v6 <= a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tc_flex_enum_list index out of bounds.");
    set_error(a3);
  }
  return *(char *)(v6 + a2);
}

void sub_223DEE71C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEE704);
}

void sub_223DEE770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_flex_image_create_from_path(turi *__s, char *a2)
{
  std::logic_error v6[2] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(__s);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, (char *)__s);
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  turi::image_util::load_image((uint64_t)v6);
}

void sub_223DEEA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DEEA68);
  }
  _Unwind_Resume(exception_object);
}

void tc_flex_image_create_from_data(turi *a1, int a2, int a3, int a4, int a5, char *__s)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (v23 < 0)
  {
    if (__p[1] != (void *)3) {
      goto LABEL_57;
    }
    if (*(_WORD *)__p[0] == 28778 && *((unsigned char *)__p[0] + 2) == 103) {
      goto LABEL_56;
    }
    if (*(_WORD *)__p[0] == 20554 && *((unsigned char *)__p[0] + 2) == 71) {
      goto LABEL_56;
    }
    if (*(_WORD *)__p[0] == 28272 && *((unsigned char *)__p[0] + 2) == 103) {
      goto LABEL_56;
    }
    if (*(_WORD *)__p[0] == 20048 && *((unsigned char *)__p[0] + 2) == 71) {
      goto LABEL_56;
    }
    atomic_ullong *volatile v16 = (void **)__p[0];
    if (*(_WORD *)__p[0] == 16722 && *((unsigned char *)__p[0] + 2) == 87) {
      goto LABEL_56;
    }
    if (v23 < 0)
    {
LABEL_51:
      int v18 = *(unsigned __int16 *)v16;
      int v19 = *((unsigned __int8 *)v16 + 2);
      if (v18 != 24946 || v19 != 119)
      {
LABEL_57:
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "format string must be one of \"jpg\", \"png\", or \"raw\".");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
      }
LABEL_56:
      operator new();
    }
    if (v23 != 3) {
      goto LABEL_57;
    }
  }
  else
  {
    if (v23 != 3) {
      goto LABEL_57;
    }
    if (LOWORD(__p[0]) == 28778 && BYTE2(__p[0]) == 103) {
      goto LABEL_56;
    }
    if (LOWORD(__p[0]) == 20554 && BYTE2(__p[0]) == 71) {
      goto LABEL_56;
    }
    if (LOWORD(__p[0]) == 28272 && BYTE2(__p[0]) == 103) {
      goto LABEL_56;
    }
    if (LOWORD(__p[0]) == 20048 && BYTE2(__p[0]) == 71) {
      goto LABEL_56;
    }
    if (LOWORD(__p[0]) == 16722 && BYTE2(__p[0]) == 87) {
      goto LABEL_56;
    }
  }
  atomic_ullong *volatile v16 = __p;
  goto LABEL_51;
}

void sub_223DEEF48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DEEFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_flex_image_width(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
    set_error(a2);
  }
  return *((void *)a1 + 4);
}

void sub_223DEF040(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEF02CLL);
}

void sub_223DEF08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_flex_image_height(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
    set_error(a2);
  }
  return *((void *)a1 + 3);
}

void sub_223DEF120(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEF10CLL);
}

void sub_223DEF16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_flex_image_num_channels(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
    set_error(a2);
  }
  return *((void *)a1 + 5);
}

void sub_223DEF200(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEF1ECLL);
}

void sub_223DEF24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_flex_image_data_size(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
    set_error(a2);
  }
  return *((void *)a1 + 6);
}

void sub_223DEF2E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEF2CCLL);
}

void sub_223DEF32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_flex_image_data(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
    set_error(a2);
  }
  return *((void *)a1 + 1);
}

void sub_223DEF3C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEF3ACLL);
}

void sub_223DEF40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

char *tc_flex_image_format(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"image\" is null.");
    set_error(a2);
  }
  unint64_t v4 = *((void *)a1 + 8);
  if (v4 >= 4) {
    tc_flex_image_format::$_0::operator()();
  }
  return off_2646D6A20[v4];
}

void sub_223DEF4BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEF4A0);
}

void sub_223DEF50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_flex_list_create(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DEF588(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEF5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_flex_list_create_with_capacity(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DEF650(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEF680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void **std::vector<turi::flexible_type>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<turi::flexible_type>::~__split_buffer(v7);
  }
  return result;
}

void sub_223DEF71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t tc_flex_list_add_element(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tc_flex_list instance null.");
    set_error(a3);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tc_flexible_type instance null.");
    set_error(a3);
  }
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  unint64_t v8 = (atomic_ullong *volatile *)(a2 + 8);
  if (v7 >= a1[3])
  {
    uint64_t v11 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a1 + 1, v8);
  }
  else
  {
    *(void *)unint64_t v7 = 0;
    *(_DWORD *)(v7 + 8) = 0;
    *(unsigned char *)(v7 + 12) = 0;
    if ((atomic_ullong *volatile *)v7 != v8)
    {
      atomic_ullong *volatile v9 = *v8;
      *(void *)(v7 + 5) = *(void *)(a2 + 13);
      *(void *)unint64_t v7 = v9;
      unsigned int v10 = *(unsigned __int8 *)(a2 + 20);
      *(unsigned char *)(v7 + 12) = v10;
      if (v10 <= 9 && ((1 << v10) & 0x33C) != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)v7, 1uLL);
      }
    }
    uint64_t v11 = v7 + 16;
  }
  uint64_t result = (uint64_t)(v7 - v6) >> 4;
  a1[2] = v11;
  return result;
}

void sub_223DEF864(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DEF8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_flex_list_extract_element(turi *a1, uint64_t a2, turi *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    tc_ft_create_empty(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "tc_flex_list instance null.");
  set_error((uint64_t *)a3);
}

void sub_223DEFB98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DEFA04);
}

void sub_223DEFBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_ft_create_empty(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  new_tc_flexible_type<turi::flexible_type &>();
}

void sub_223DEFC90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEFCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void new_tc_flexible_type<turi::flexible_type &>()
{
}

void tc_ft_create_copy(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  new_tc_flexible_type<turi::flexible_type const&>();
}

void sub_223DEFFA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DEFFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void new_tc_flexible_type<turi::flexible_type const&>()
{
}

void tc_ft_create_from_cstring(turi *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DF0340(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)va);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)va);
    __cxa_end_catch();
    JUMPOUT(0x223DF030CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_ft_create_from_string(turi *__src, size_t __len)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(__src);
  }
  std::string::basic_string[abi:ne180100](__p, __src, __len);
  operator new();
}

void sub_223DF0498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DF0464);
  }
  _Unwind_Resume(exception_object);
}

void tc_ft_create_from_double(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DF0598(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DF05C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_ft_create_from_int64(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DF0644(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DF0670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_ft_create_from_double_array(turi *a1, unint64_t a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, a1, (uint64_t)a1 + 8 * a2, a2);
  operator new();
}

void sub_223DF0A2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12)
{
}

void sub_223DF0AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_ft_create_from_flex_list(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flex list\" is null.");
  set_error(a2);
}

void sub_223DF0EA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x22A614FA0](v16, 0x1020C405E66F15BLL);
  unint64_t add = atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL);
  if (v15 && add == 1)
  {
    std::string __p = v15 + 1;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF0D1CLL);
}

void sub_223DF0F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_ft_create_from_datetime(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_datetime\" is null.");
  set_error(a2);
}

void sub_223DF103C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF1028);
}

void sub_223DF1088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_ft_create_from_flex_dict(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flex_dict\" is null.");
  set_error(a2);
}

void sub_223DF1424(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x22A614FA0](v16, 0x1020C405E66F15BLL);
  unint64_t add = atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL);
  if (v15 && add == 1)
  {
    std::string __p = v15 + 1;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF12A0);
}

void sub_223DF14D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_ft_create_from_image(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flex_image\" is null.");
  set_error(a2);
}

void sub_223DF18A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    tc_ft_create_from_image_cold_1((uint64_t)v15);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF1600);
}

void sub_223DF1924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_ft_create_from_ndarray(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
  set_error(a2);
}

void sub_223DF1D28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x22A614FA0](v16, 0x1030C407B73B9F7);
  unint64_t add = atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL);
  if (v15 && add == 1)
  {
    int v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v15);
    MEMORY[0x22A614FA0](v19, 0x1030C407B73B9F7);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF1BA4);
}

void sub_223DF1DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_ft_double(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2);
  }
  switch(*(unsigned char *)(a1 + 20))
  {
    case 0:
    case 1:
    case 6:
    case 7:
      return;
    case 2:
      uint64_t v5 = *(void *)(a1 + 8);
      size_t __idx = 0;
      uint64_t v6 = (char *)(v5 + 8);
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v6 = *(char **)(v5 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v6);
      std::stod((const std::string *)__p, &__idx);
      if (SBYTE7(v18) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v5 + 31) < 0) {
        uint64_t v7 = *(void *)(v5 + 16);
      }
      else {
        uint64_t v7 = *(unsigned __int8 *)(v5 + 31);
      }
      if (__idx != v7)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v15 = std::string::append(&v21, " cannot be interpreted as a float");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        *(void *)&long long v18 = *((void *)&v15->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      return;
    case 3:
      uint64_t v4 = *(void *)(a1 + 8);
      __p[1] = 0;
      *(void *)&long long v18 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v8 = *(void *)(a1 + 8);
      __p[1] = 0;
      *(void *)&long long v18 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v8 + 8), *(uint64_t **)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v21.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      break;
    case 5:
      uint64_t v9 = *(void *)(a1 + 8);
      __p[1] = 0;
      *(void *)&long long v18 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v9 + 8), *(uint64_t **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v21.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      break;
    case 8:
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(atomic_uint **)(v10 + 16);
      __p[0] = *(void **)(v10 + 8);
      __p[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit(v11 + 2, 1u, memory_order_relaxed);
      }
      long long v12 = *(_OWORD *)(v10 + 24);
      long long v13 = *(_OWORD *)(v10 + 56);
      long long v19 = *(_OWORD *)(v10 + 40);
      long long v20 = v13;
      long long v18 = v12;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)(a1 + 8) + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v19 + 1))
      {
        *(void *)&long long v20 = *((void *)&v19 + 1);
        operator delete(*((void **)&v19 + 1));
      }
      if ((void)v18)
      {
        *((void *)&v18 + 1) = v18;
        operator delete((void *)v18);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_223DF216C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v18 - 57) < 0)
  {
    operator delete(*(void **)(v18 - 80));
    if ((v17 & 1) == 0)
    {
LABEL_8:
      __cxa_begin_catch(a1);
      std::current_exception();
      fill_error_from_exception(&a10);
      std::exception_ptr::~exception_ptr(&a10);
      __cxa_end_catch();
      JUMPOUT(0x223DF1ED8);
    }
  }
  else if (!v17)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v16);
  goto LABEL_8;
}

void sub_223DF227C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t tc_ft_int64(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2);
  }
  uint64_t v4 = 0;
  switch(*(unsigned char *)(a1 + 20))
  {
    case 0:
      uint64_t v4 = *(void *)(a1 + 8);
      goto LABEL_29;
    case 1:
      uint64_t v4 = (uint64_t)*(double *)(a1 + 8);
      goto LABEL_29;
    case 2:
      uint64_t v6 = *(void *)(a1 + 8);
      size_t __idx = 0;
      uint64_t v7 = (char *)(v6 + 8);
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v7 = *(char **)(v6 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      uint64_t v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v20) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v8 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v8 = *(unsigned __int8 *)(v6 + 31);
      }
      if (__idx != v8)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        int v17 = std::string::append(&v23, " cannot be interpreted as an integer");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        *(void *)&long long v20 = *((void *)&v17->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_29;
    case 3:
      uint64_t v5 = *(void *)(a1 + 8);
      __p[1] = 0;
      *(void *)&long long v20 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      uint64_t v9 = *(void *)(a1 + 8);
      __p[1] = 0;
      *(void *)&long long v20 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v9 + 8), *(uint64_t **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      goto LABEL_28;
    case 5:
      uint64_t v10 = *(void *)(a1 + 8);
      __p[1] = 0;
      *(void *)&long long v20 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      goto LABEL_28;
    case 6:
      uint64_t v4 = (uint64_t)(*(void *)(a1 + 8) << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      uint64_t v11 = *(void *)(a1 + 8);
      long long v12 = *(atomic_uint **)(v11 + 16);
      __p[0] = *(void **)(v11 + 8);
      __p[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(v12 + 2, 1u, memory_order_relaxed);
      }
      long long v13 = *(_OWORD *)(v11 + 24);
      long long v14 = *(_OWORD *)(v11 + 56);
      long long v21 = *(_OWORD *)(v11 + 40);
      long long v22 = v14;
      long long v20 = v13;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)(a1 + 8) + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v21 + 1))
      {
        *(void *)&long long v22 = *((void *)&v21 + 1);
        operator delete(*((void **)&v21 + 1));
      }
      if ((void)v20)
      {
        *((void *)&v20 + 1) = v20;
        operator delete((void *)v20);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_28:
      uint64_t v4 = 0;
LABEL_29:
      uint64_t result = v4;
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
  return result;
}

void sub_223DF25C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v18 - 41) < 0)
  {
    operator delete(*(void **)(v18 - 64));
    if ((v17 & 1) == 0)
    {
LABEL_8:
      __cxa_begin_catch(a1);
      std::current_exception();
      fill_error_from_exception(&a10);
      std::exception_ptr::~exception_ptr(&a10);
      __cxa_end_catch();
      JUMPOUT(0x223DF2510);
    }
  }
  else if (!v17)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v16);
  goto LABEL_8;
}

void sub_223DF26D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t tc_ft_string_length(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type is null");
    set_error(a2);
  }
  if (*(unsigned char *)(a1 + 20) != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a string.");
    set_error(a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(v4 + 31) < 0) {
    return *(void *)(v4 + 16);
  }
  else {
    return *(unsigned __int8 *)(v4 + 31);
  }
}

void sub_223DF27D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF27B4);
}

void sub_223DF2824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_ft_string_data(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2);
  }
  if (*(unsigned char *)(a1 + 20) != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a string.");
    set_error(a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = v4 + 8;
  if (*(char *)(v4 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_223DF28F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF28E0);
}

void sub_223DF2948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_ft_array_length(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type is null");
    set_error(a2);
  }
  if (*(unsigned char *)(a1 + 20) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not an array.");
    set_error(a2);
  }
  return (uint64_t)(*(void *)(*(void *)(a1 + 8) + 16) - *(void *)(*(void *)(a1 + 8) + 8)) >> 3;
}

void sub_223DF2A14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF2A00);
}

void sub_223DF2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_ft_array_data(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2);
  }
  if (*(unsigned char *)(a1 + 20) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not an array.");
    set_error(a2);
  }
  return *(void *)(*(void *)(a1 + 8) + 8);
}

void sub_223DF2B2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF2B18);
}

void sub_223DF2B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_ft_flex_list(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (*((unsigned char *)a1 + 20) == 4) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a list.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223DF2CCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DF2CB0);
}

void sub_223DF2D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_ft_flex_dict(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (*((unsigned char *)a1 + 20) == 5) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a dict.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223DF2E6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DF2E50);
}

void sub_223DF2EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_ft_flex_image(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (*((unsigned char *)a1 + 20) == 8) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not an image.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223DF3018(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DF2FFCLL);
}

void sub_223DF306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_ft_datetime(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (*((unsigned char *)a1 + 20) == 6) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a datetime object.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223DF3160(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF314CLL);
}

void sub_223DF31B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_ft_ndarray(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (*((unsigned char *)a1 + 20) == 9) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v4, "Flexible type not an ndarray object.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v4, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223DF3300(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF32E4);
}

void sub_223DF3374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_ft_to_string(unsigned char *a1, uint64_t *a2)
{
  v12[19] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2);
  }
  uint64_t v4 = (turi::flexible_type_impl *)(a1 + 8);
  switch(a1[20])
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_14;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_14:
      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v7 = *(void **)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      __p[2] = v7;
      __p[3] = (void *)(MEMORY[0x263F8C318] + 16);
      if (v11 < 0) {
        operator delete(__p[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v12);
      break;
    case 2:
      uint64_t v5 = *(void *)v4;
      if (*(char *)(*(void *)v4 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
      }
      else
      {
        long long v6 = *(_OWORD *)(v5 + 8);
        v9.__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
        *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v6;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v4 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v4 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v4 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v4, &v9);
      break;
    case 7:
      memset(&v9, 0, sizeof(v9));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v4 + 8));
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  operator new();
}

void sub_223DF3724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DF3470);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_ft_to_type(uint64_t a1, char a2, uint64_t *a3, double a4)
{
  v108[2] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a3);
  }
  uint64_t v7 = 0;
  memset(v108, 0, 13);
  BYTE4(v108[1]) = a2;
  switch(a2)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      uint64_t v7 = 0x1900000000000000;
      v108[0] = 0x1900000000000000;
      LODWORD(v108[1]) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      break;
  }
  uint64_t v8 = (double *)(a1 + 8);
  if ((void *)(a1 + 8) != v108)
  {
    switch(*(unsigned char *)(a1 + 20))
    {
      case 0:
        switch(BYTE4(v108[1]))
        {
          case 0:
            double v9 = *v8;
            goto LABEL_44;
          case 1:
            double v39 = (double)*(uint64_t *)v8;
            goto LABEL_171;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v36 = v108[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            uint64_t v37 = (void **)(v36 + 8);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
            if (*(char *)(v36 + 31) < 0) {
              operator delete(*v37);
            }
            long long v38 = v106;
            *(void *)(v36 + 24) = v107;
            *(_OWORD *)uint64_t v37 = v38;
            goto LABEL_222;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 6:
            v108[0] = *(void *)v8 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v108[1]) = 0;
            goto LABEL_222;
          case 7:
            goto LABEL_221;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          default:
            goto LABEL_285;
        }
      case 1:
        switch(BYTE4(v108[1]))
        {
          case 0:
            *(void *)&double v9 = (uint64_t)*v8;
            goto LABEL_44;
          case 1:
            double v39 = *v8;
            goto LABEL_171;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v40 = v108[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::ostream::operator<<();
            std::stringbuf::str();
            uint64_t v41 = v40 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
            if (*(char *)(v40 + 31) < 0) {
              operator delete(*(void **)v41);
            }
            long long v42 = v106;
            uint64_t v43 = v107;
            goto LABEL_227;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 6:
            int v44 = (int)((*v8 - (double)(uint64_t)floor(*v8)) * 1000000.0);
            if (v44 >= 999999) {
              int v44 = 999999;
            }
            if (v44 >= 0xF4240) {
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            }
            v108[0] = vcvtmd_s64_f64(*v8) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
            LODWORD(v108[1]) = v44;
            goto LABEL_222;
          case 7:
            goto LABEL_221;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          default:
            goto LABEL_285;
        }
      case 2:
        switch(BYTE4(v108[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_221;
          case 2:
            double v14 = *v8;
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v11 = v108[0];
            if (*(char *)(*(void *)&v14 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(*(void *)&v14 + 8), *(void *)(*(void *)&v14 + 16));
            }
            else
            {
              long long v15 = *(_OWORD *)(*(void *)&v14 + 8);
              *(void *)&long long v97 = *(void *)(*(void *)&v14 + 24);
              *(_OWORD *)std::string __p = v15;
            }
            goto LABEL_224;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          default:
            goto LABEL_285;
        }
      case 3:
        double v16 = *v8;
        int v17 = (char **)(*(void *)&v16 + 8);
        switch(BYTE4(v108[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_221;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v11 = v108[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v106, (void *)(*(void *)&v16 + 8));
            goto LABEL_224;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            if (v108[0] == *(void *)&v16) {
              goto LABEL_222;
            }
            long long v20 = (char *)(v108[0] + 8);
            atomic_ullong *volatile v30 = (uint64_t *)(*(void *)&v16 + 16);
            break;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(v108[0] + 8), *(void **)(*(void *)&v16 + 8), *(void **)(*(void *)&v16 + 16), (uint64_t)(*(void *)(*(void *)&v16 + 16) - *(void *)(*(void *)&v16 + 8)) >> 3);
            goto LABEL_222;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v33 = v108[0];
            long long v106 = 0uLL;
            uint64_t v107 = 0;
            v103 = 0;
            v104 = 0;
            uint64_t v105 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>(*(void *)&v16 + 8, &v100);
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, &v100, (uint64_t)&v106, (uint64_t)&v103, 0);
            if (v101) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v101);
            }
            if (v103)
            {
              v104 = v103;
              operator delete(v103);
            }
            if ((void)v106)
            {
              *((void *)&v106 + 1) = v106;
              operator delete((void *)v106);
            }
            goto LABEL_160;
          default:
            goto LABEL_285;
        }
        goto LABEL_76;
      case 4:
        double v10 = *v8;
        switch(BYTE4(v108[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_221;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v11 = v108[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v106, (uint64_t *)(*(void *)&v10 + 8));
            goto LABEL_224;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)__p, (void *)(v108[0] + 8), (void *)(*(void *)&v10 + 8));
            goto LABEL_222;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            if (v108[0] != *(void *)&v10) {
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v108[0] + 8, *(uint64_t **)(*(void *)&v10 + 8), *(uint64_t **)(*(void *)&v10 + 16), (uint64_t)(*(void *)(*(void *)&v10 + 16) - *(void *)(*(void *)&v10 + 8)) >> 4);
            }
            goto LABEL_222;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v25 = v108[0];
            uint64_t v107 = 0;
            long long v106 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v106, *(uint64_t **)(*(void *)&v10 + 8), *(uint64_t **)(*(void *)&v10 + 16), (uint64_t)(*(void *)(*(void *)&v10 + 16) - *(void *)(*(void *)&v10 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v106, __p);
            long long v26 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            atomic_ullong *volatile v27 = *(std::__shared_weak_count **)(v25 + 16);
            *(_OWORD *)(v25 + 8) = v26;
            if (v27) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v27);
            }
            uint64_t v28 = *(void **)(v25 + 24);
            if (v28)
            {
              *(void *)(v25 + 32) = v28;
              operator delete(v28);
              *(void *)(v25 + 24) = 0;
              *(void *)(v25 + 32) = 0;
              *(void *)(v25 + 40) = 0;
            }
            uint64_t v29 = *(void **)(v25 + 48);
            *(_OWORD *)(v25 + 24) = v97;
            *(void *)(v25 + 40) = *(void *)v98;
            long long v97 = 0uLL;
            *(void *)v98 = 0;
            if (v29)
            {
              *(void *)(v25 + 56) = v29;
              operator delete(v29);
              *(void *)(v25 + 48) = 0;
              *(void *)(v25 + 56) = 0;
              *(void *)(v25 + 64) = 0;
            }
            *(_OWORD *)(v25 + 48) = *(_OWORD *)&v98[8];
            *(void *)(v25 + 64) = *(void *)&v98[24];
            memset(&v98[8], 0, 24);
            *(void *)(v25 + 72) = v99;
            turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
            v103 = (void **)&v106;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v103);
            goto LABEL_222;
          default:
            goto LABEL_285;
        }
      case 5:
        double v18 = *v8;
        switch(BYTE4(v108[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_221;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v11 = v108[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v106, (void *)(*(void *)&v18 + 8));
            goto LABEL_224;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            if (v108[0] != *(void *)&v18) {
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v108[0] + 8), *(uint64_t **)(*(void *)&v18 + 8), *(uint64_t **)(*(void *)&v18 + 16), (uint64_t)(*(void *)(*(void *)&v18 + 16) - *(void *)(*(void *)&v18 + 8)) >> 5);
            }
            goto LABEL_222;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          default:
            goto LABEL_285;
        }
      case 6:
        switch(BYTE4(v108[1]))
        {
          case 0:
            *(void *)&double v9 = (uint64_t)(*(void *)v8 << 8) >> 8;
            goto LABEL_44;
          case 1:
            double v39 = (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8);
LABEL_171:
            *(double *)v108 = v39;
            goto LABEL_222;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v11 = v108[0];
            int v54 = *(_DWORD *)(a1 + 16);
            *(void *)&long long v106 = *(void *)(a1 + 8);
            DWORD2(v106) = v54;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v106, (std::string *)__p);
            goto LABEL_224;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 6:
            int v55 = *(_DWORD *)(a1 + 16);
            v108[0] = *(void *)(a1 + 8);
            LODWORD(v108[1]) = v55;
            goto LABEL_222;
          case 7:
            goto LABEL_221;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          default:
            goto LABEL_285;
        }
      case 7:
        switch(BYTE4(v108[1]))
        {
          case 0:
          case 6:
            goto LABEL_221;
          case 1:
            double v9 = NAN;
LABEL_44:
            *(double *)v108 = v9;
            goto LABEL_222;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v32 = v108[0] + 8;
            if (*(char *)(v108[0] + 31) < 0) {
              operator delete(*(void **)v32);
            }
            *(void *)uint64_t v32 = 0;
            *(void *)(v32 + 8) = 0;
            *(void *)(v32 + 16) = 0;
            goto LABEL_222;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 7:
            goto LABEL_222;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          default:
            goto LABEL_285;
        }
      case 8:
        long long v19 = (uint64_t *)(*(void *)v8 + 8);
        switch(BYTE4(v108[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_221;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v11 = v108[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_224;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            atomic_ullong *volatile v34 = (void *)v108[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v19, (double **)__p, *(unint64_t *)&a4);
            uint64_t v35 = (void *)v34[1];
            if (v35)
            {
              v34[2] = v35;
              operator delete(v35);
              v34[1] = 0;
              v34[2] = 0;
              v34[3] = 0;
            }
            *(_OWORD *)(v34 + 1) = *(_OWORD *)__p;
            v34[3] = v97;
            goto LABEL_222;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v33 = v108[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v19, __p, *(unint64_t *)&a4);
LABEL_160:
            long long v50 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            long long v51 = *(std::__shared_weak_count **)(v33 + 16);
            *(_OWORD *)(v33 + 8) = v50;
            if (v51) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v51);
            }
            uint64_t v52 = *(void **)(v33 + 24);
            if (v52)
            {
              *(void *)(v33 + 32) = v52;
              operator delete(v52);
              *(void *)(v33 + 24) = 0;
              *(void *)(v33 + 32) = 0;
              *(void *)(v33 + 40) = 0;
            }
            long long v53 = *(void **)(v33 + 48);
            *(_OWORD *)(v33 + 24) = v97;
            *(void *)(v33 + 40) = *(void *)v98;
            long long v97 = 0uLL;
            *(void *)v98 = 0;
            if (v53)
            {
              *(void *)(v33 + 56) = v53;
              operator delete(v53);
              *(void *)(v33 + 48) = 0;
              *(void *)(v33 + 56) = 0;
              *(void *)(v33 + 64) = 0;
            }
            *(_OWORD *)(v33 + 48) = *(_OWORD *)&v98[8];
            *(void *)(v33 + 64) = *(void *)&v98[24];
            memset(&v98[8], 0, 24);
            *(void *)(v33 + 72) = v99;
            goto LABEL_281;
          default:
            goto LABEL_285;
        }
      case 9:
        double v12 = *v8;
        long long v13 = (char ***)(*(void *)&v12 + 8);
        switch(BYTE4(v108[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_221;
          case 2:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v11 = v108[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v106, (void *)(*(void *)&v12 + 8));
LABEL_224:
            uint64_t v41 = v11 + 8;
            if (*(char *)(v11 + 31) < 0) {
              operator delete(*(void **)v41);
            }
            long long v42 = *(_OWORD *)__p;
            uint64_t v43 = v97;
LABEL_227:
            *(void *)(v41 + 16) = v43;
            *(_OWORD *)uint64_t v41 = v42;
            goto LABEL_222;
          case 3:
            if (*(void *)v7 != 1) {
              operator new();
            }
            long long v20 = (char *)(v108[0] + 8);
            if (*(void *)(*(void *)&v12 + 72)) {
              goto LABEL_234;
            }
            long long v22 = *(uint64_t **)(*(void *)&v12 + 24);
            long long v21 = *(uint64_t **)(*(void *)&v12 + 32);
            std::string v23 = *(void **)(*(void *)&v12 + 8);
            if (v21 == v22 || v23 == 0)
            {
              uint64_t v56 = 0;
            }
            else
            {
              uint64_t v56 = 1;
              do
              {
                uint64_t v57 = *v22++;
                v56 *= v57;
              }
              while (v22 != v21);
            }
            if (v56 == (uint64_t)(v23[1] - *v23) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index((void *)(*(void *)&v12 + 8)) == ((*v13)[1] - **v13) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full((void *)(*(void *)&v12 + 8))) {
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              }
              int v17 = *v13;
              if (v20 != (char *)v17)
              {
                atomic_ullong *volatile v30 = (uint64_t *)(v17 + 1);
LABEL_76:
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v20, *v17, *v30, (*v30 - (uint64_t)*v17) >> 3);
              }
            }
            else
            {
LABEL_234:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid((void *)(*(void *)&v12 + 8))) {
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              }
              if (turi::flexible_type_impl::ndarray<double>::is_full((void *)(*(void *)&v12 + 8)))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)&v12 + 8);
              }
              else
              {
                long long v106 = 0uLL;
                uint64_t v107 = 0;
                v103 = 0;
                v104 = 0;
                uint64_t v105 = 0;
                v100 = 0;
                v101 = 0;
                uint64_t v102 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, (uint64_t)&v106, (uint64_t)&v103, (uint64_t)&v100, 0);
                if (v100)
                {
                  v101 = v100;
                  operator delete(v100);
                }
                if (v103)
                {
                  v104 = v103;
                  operator delete(v103);
                }
                if ((void)v106)
                {
                  *((void *)&v106 + 1) = v106;
                  operator delete((void *)v106);
                }
                uint64_t v99 = 0;
                if (__p != (void **)(*(void *)&v12 + 8)) {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v97, *(char **)(*(void *)&v12 + 24), *(void *)(*(void *)&v12 + 32), (uint64_t)(*(void *)(*(void *)&v12 + 32) - *(void *)(*(void *)&v12 + 24)) >> 3);
                }
                uint64_t v59 = *(uint64_t **)(*(void *)&v12 + 24);
                char v58 = *(uint64_t **)(*(void *)&v12 + 32);
                if (v58 == v59 || !*v13)
                {
                  unint64_t v60 = 0;
                }
                else
                {
                  unint64_t v60 = 1;
                  do
                  {
                    uint64_t v61 = *v59++;
                    v60 *= v61;
                  }
                  while (v59 != v58);
                }
                std::vector<double>::resize((uint64_t)__p[0], v60);
                std::vector<unsigned long>::resize((uint64_t)&v98[8], (uint64_t)(*(void *)(*(void *)&v12 + 32) - *(void *)(*(void *)&v12 + 24)) >> 3);
                if (*((void *)&v97 + 1) != (void)v97 && *((void *)__p[0] + 1) != *(void *)__p[0])
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v106, (uint64_t)(*(void *)(*(void *)&v12 + 56) - *(void *)(*(void *)&v12 + 48)) >> 3);
                  uint64_t v62 = *(void *)(*(void *)&v12 + 48);
                  uint64_t v63 = *(void *)(*(void *)&v12 + 56);
                  char v64 = (unint64_t *)v106;
                  uint64_t v65 = v63 - v62;
                  if (v63 != v62)
                  {
                    uint64_t v66 = 0;
                    unint64_t v67 = v65 >> 3;
                    if (v67 <= 1) {
                      unint64_t v67 = 1;
                    }
                    uint64_t v68 = (void *)(v106 + 8);
                    do
                    {
                      *(v68 - 1) = *(void *)(v62 + 8 * v66);
                      *uint64_t v68 = v66++;
                      v68 += 2;
                    }
                    while (v67 != v66);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v106 + 1), *((unint64_t **)&v106 + 1), (uint64_t)v64, v64);
                  uint64_t v69 = v106;
                  uint64_t v70 = *(void *)&v98[8];
                  *(void *)(*(void *)&v98[8] + 8 * *(void *)(v106 + 8)) = 1;
                  uint64_t v71 = *(void *)(*(void *)&v12 + 56) - *(void *)(*(void *)&v12 + 48);
                  if ((unint64_t)v71 >= 9)
                  {
                    unint64_t v72 = v71 >> 3;
                    uint64_t v73 = v97;
                    if (v72 <= 2) {
                      unint64_t v72 = 2;
                    }
                    char v74 = (uint64_t *)(v69 + 24);
                    unint64_t v75 = v72 - 1;
                    do
                    {
                      uint64_t v76 = *(void *)(v73 + 8 * *(v74 - 2)) * *(void *)(v70 + 8 * *(v74 - 2));
                      uint64_t v77 = *v74;
                      v74 += 2;
                      *(void *)(v70 + 8 * v77) = v76;
                      --v75;
                    }
                    while (v75);
                  }
                  unint64_t v78 = (uint64_t)(*(void *)(*(void *)&v12 + 32) - *(void *)(*(void *)&v12 + 24)) >> 3;
                  v100 = 0;
                  std::vector<unsigned long>::vector(&v103, v78, &v100);
                  do
                  {
                    v79 = v103;
                    if (v104 == v103)
                    {
                      uint64_t v88 = 0;
                      uint64_t v89 = *(void *)(**(void **)(*(void *)&v12 + 8) + 8 * *(void *)(*(void *)&v12 + 72));
                      v90 = __p[0];
                    }
                    else
                    {
                      uint64_t v80 = 0;
                      unint64_t v81 = v104 - v103;
                      v82 = *(uint64_t **)(*(void *)&v12 + 48);
                      if (v81 <= 1) {
                        unint64_t v81 = 1;
                      }
                      id v83 = v103;
                      unint64_t v84 = v81;
                      do
                      {
                        uint64_t v86 = (uint64_t)*v83++;
                        uint64_t v85 = v86;
                        uint64_t v87 = *v82++;
                        v80 += v87 * v85;
                        --v84;
                      }
                      while (v84);
                      uint64_t v88 = 0;
                      uint64_t v89 = *(void *)(**(void **)(*(void *)&v12 + 8)
                                      + 8 * (*(void *)(*(void *)&v12 + 72) + v80));
                      v90 = __p[0];
                      v91 = *(uint64_t **)&v98[8];
                      do
                      {
                        uint64_t v93 = (uint64_t)*v79++;
                        uint64_t v92 = v93;
                        uint64_t v94 = *v91++;
                        v88 += v94 * v92;
                        --v81;
                      }
                      while (v81);
                    }
                    *(void *)(*v90 + 8 * v88) = v89;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(void *)&v12 + 8, (uint64_t *)&v103));
                  if (v103)
                  {
                    v104 = v103;
                    operator delete(v103);
                  }
                  if ((void)v106)
                  {
                    *((void *)&v106 + 1) = v106;
                    operator delete((void *)v106);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)__p);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(__p)) {
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              }
              if (v20 != __p[0]) {
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v20, *(char **)__p[0], *((void *)__p[0] + 1), (uint64_t)(*((void *)__p[0] + 1) - *(void *)__p[0]) >> 3);
              }
LABEL_281:
              turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
            }
            break;
          case 4:
            if (*(void *)v7 != 1) {
              operator new();
            }
            goto LABEL_221;
          case 5:
            if (*(void *)v7 != 1) {
              operator new();
            }
LABEL_221:
            turi::flexible_type_fail(0);
            goto LABEL_222;
          case 8:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v45 = v108[0];
            turi::flexible_type_impl::get_img_visitor::operator()(*(void *)&v12 + 8, (turi::image_type *)__p);
            long long v46 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            long long v47 = *(_OWORD *)(v45 + 8);
            *(_OWORD *)(v45 + 8) = v46;
            long long v106 = v47;
            boost::detail::shared_count::~shared_count((atomic_uint **)&v106 + 1);
            long long v48 = v97;
            long long v49 = *(_OWORD *)v98;
            *(_OWORD *)(v45 + 56) = *(_OWORD *)&v98[16];
            *(_OWORD *)(v45 + 40) = v49;
            *(_OWORD *)(v45 + 24) = v48;
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            goto LABEL_222;
          case 9:
            if (*(void *)v7 != 1) {
              operator new();
            }
            uint64_t v31 = v108[0];
            std::shared_ptr<std::vector<double>>::operator=[abi:ne180100]((void *)(v108[0] + 8), (uint64_t *)(*(void *)&v12 + 8));
            if (v31 != *(void *)&v12)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v31 + 24), *(char **)(*(void *)&v12 + 24), *(void *)(*(void *)&v12 + 32), (uint64_t)(*(void *)(*(void *)&v12 + 32) - *(void *)(*(void *)&v12 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v31 + 48), *(char **)(*(void *)&v12 + 48), *(void *)(*(void *)&v12 + 56), (uint64_t)(*(void *)(*(void *)&v12 + 56) - *(void *)(*(void *)&v12 + 48)) >> 3);
            }
            *(void *)(v31 + 72) = *(void *)(*(void *)&v12 + 72);
            goto LABEL_222;
          default:
            goto LABEL_285;
        }
        break;
      default:
LABEL_285:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
LABEL_222:
  new_tc_flexible_type<turi::flexible_type &>();
}

void sub_223DF5B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
  {
    double v18 = *(void **)(v16 - 144);
    if (v18)
    {
      *(void *)(v16 - 136) = v18;
      operator delete(v18);
    }
    turi::flexible_type_impl::ndarray<double>::~ndarray(&__p);
    switch(*(unsigned char *)(v16 - 92))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v16 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_32;
        }
        uint64_t v19 = *(void *)(v16 - 104);
        if (!v19) {
          goto LABEL_32;
        }
        if (*(char *)(v19 + 31) < 0) {
          operator delete(*(void **)(v19 + 8));
        }
        long long v20 = (void *)v19;
        uint64_t v21 = 0x1012C404EF22A49;
        goto LABEL_31;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v16 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_32;
        }
        uint64_t v25 = *(void **)(v16 - 104);
        if (!v25) {
          goto LABEL_32;
        }
        long long v26 = (void *)v25[1];
        if (v26)
        {
          v25[2] = v26;
          operator delete(v26);
        }
        long long v20 = v25;
        uint64_t v21 = 0x1080C409938AC02;
        goto LABEL_31;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v16 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_32;
        }
        long long v22 = *(void **)(v16 - 104);
        if (!v22) {
          goto LABEL_32;
        }
        *(void *)(v16 - 112) = v22 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 112));
        goto LABEL_26;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v16 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_32;
        }
        long long v22 = *(void **)(v16 - 104);
        if (!v22) {
          goto LABEL_32;
        }
        *(void *)(v16 - 112) = v22 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 112));
LABEL_26:
        long long v20 = v22;
        uint64_t v21 = 0x1020C405E66F15BLL;
        goto LABEL_31;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v16 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(v16 - 104);
        if (!v27) {
          goto LABEL_32;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v27 + 16));
        long long v20 = (void *)v27;
        unsigned int v24 = -235920773;
        goto LABEL_30;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v16 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_32;
        }
        std::string v23 = *(void **)(v16 - 104);
        if (!v23) {
          goto LABEL_32;
        }
        long long v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v23);
        unsigned int v24 = 2071181815;
LABEL_30:
        uint64_t v21 = v24 | 0x1030C4000000000;
LABEL_31:
        MEMORY[0x22A614FA0](v20, v21);
LABEL_32:
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception(&a10);
        std::exception_ptr::~exception_ptr(&a10);
        __cxa_end_catch();
        JUMPOUT(0x223DF38E8);
      default:
        goto LABEL_32;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_223DF5F98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_function_call(turi *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v23[9] = *(std::__shared_weak_count **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = v20;
  if (a2 && &v19 != (uint64_t **)(a2 + 8)) {
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>(&v19, *(long long **)(a2 + 8), (long long *)(a2 + 16));
  }
  turi::get_unity_global_singleton((uint64_t)a3, a4, a5, a6, a7, a8, &v22);
  uint64_t v11 = v22;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, uint64_t **))(*(void *)v11 + 88))(&v17, v11, __p, &v19);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v23[0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23[0]);
  }
  if ((_BYTE)v17)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "return_value");
    uint64_t v21 = v13;
    double v12 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v18, (const void **)v13, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21);
    uint64_t v21 = (void **)v23;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*((unsigned int *)v12 + 14), *((_DWORD *)v12 + 14) ^ (*((int *)v12 + 14) >> 31), &v21, (uint64_t)(v12 + 4));
    LODWORD(v22) = *((_DWORD *)v12 + 14) ^ (*((int *)v12 + 14) >> 31);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    operator new();
  }
  set_error(a3);
}

void sub_223DF63FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,char *a30)
{
  if (a2)
  {
    turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a22);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a29, a30);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DF63C8);
  }
  _Unwind_Resume(exception_object);
}

void turi::_tc_initialize(turi *this)
{
  void v5[4] = *MEMORY[0x263EF8340];
  std::mutex::lock(&turi::_capi_server_initializer_lock);
  if (!turi::capi_server_initialized)
  {
    turi::_get_server_options(v1);
    turi::capi_server_initializer(&v3);
    turi::start_server();
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    turi::capi_server_initialized = 1;
    unint64_t v2 = global_logger();
    v5[0] = &unk_26D754CE0;
    uint64_t v5[3] = v5;
    file_logger::add_observer((uint64_t)v2, 4, (uint64_t)v5);
    std::__function::__value_func<void ()(int,char const*,unsigned long)>::~__value_func[abi:ne180100](v5);
  }
  std::mutex::unlock(&turi::_capi_server_initializer_lock);
}

void sub_223DF65E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(int,char const*,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::mutex::unlock(&turi::_capi_server_initializer_lock);
  _Unwind_Resume(a1);
}

uint64_t turi::_get_server_options(turi *this)
{
  {
    __cxa_atexit((void (*)(void *))std::unique_ptr<turi::unity_server_options>::~unique_ptr[abi:ne180100], &turi::_get_server_options(void)::_server_options, &dword_223D44000);
  }
  uint64_t result = turi::_get_server_options(void)::_server_options;
  if (!turi::_get_server_options(void)::_server_options) {
    operator new();
  }
  return result;
}

uint64_t file_logger::add_observer(uint64_t a1, int a2, uint64_t a3)
{
  long long v6 = (pthread_mutex_t *)(a1 + 608);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 608));
  std::function<void ()(int,char const*,unsigned long)>::operator=((void *)(a1 + 32 * a2 + 688), a3);
  *(_DWORD *)(a1 + 4 * a2 + 944) = *(void *)(a3 + 24) != 0;
  return pthread_mutex_unlock(v6);
}

void tc_init_set_log_location(uint64_t a1, uint64_t *a2)
{
  std::mutex::lock(&turi::_capi_server_initializer_lock);
  if (turi::capi_server_initialized)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "CAPI server is already initialized; call setup functions before all other functions.");
    set_error(a2);
  }
  uint64_t server_options = turi::_get_server_options(v4);
  MEMORY[0x22A614700](server_options, a1);
  std::mutex::unlock(&turi::_capi_server_initializer_lock);
}

void sub_223DF6818(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(&turi::_capi_server_initializer_lock);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF6808);
}

void sub_223DF6878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void *tc_init_set_log_callback_function(int a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = global_logger();
  v6[0] = &unk_26D754D70;
  v6[1] = a2;
  void v6[3] = v6;
  file_logger::add_observer((uint64_t)v4, a1, (uint64_t)v6);
  return std::__function::__value_func<void ()(int,char const*,unsigned long)>::~__value_func[abi:ne180100](v6);
}

void sub_223DF6934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    std::__function::__value_func<void ()(int,char const*,unsigned long)>::~__value_func[abi:ne180100](&a10);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DF6904);
  }
  _Unwind_Resume(exception_object);
}

void tc_init_set_config_parameter(char *__s, uint64_t a2, uint64_t *a3)
{
  v30[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  memset(v30, 0, 13);
  if ((atomic_ullong **)(a2 + 8) != v30)
  {
    *(atomic_ullong **)((char *)v30 + 5) = *(atomic_ullong **)(a2 + 13);
    v30[0] = *(atomic_ullong **)(a2 + 8);
    BYTE4(v30[1]) = *(unsigned char *)(a2 + 20);
    if (BYTE4(v30[1]) <= 9u && ((1 << SBYTE4(v30[1])) & 0x33C) != 0) {
      atomic_fetch_add(v30[0], 1uLL);
    }
  }
  int v7 = turi::globals::set_global((uint64_t)__p, (uint64_t)v30);
  switch(BYTE4(v30[1]))
  {
    case 2:
      if (atomic_fetch_add(v30[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v30[0];
        if (v30[0])
        {
          if (*((char *)v30[0] + 31) < 0) {
            operator delete(*((void **)v30[0] + 1));
          }
          double v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v30[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = v30[0];
        if (v30[0])
        {
          double v18 = (void *)v30[0][1];
          if (v18)
          {
            v30[0][2] = (atomic_ullong)v18;
            operator delete(v18);
          }
          double v9 = v17;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v30[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v30[0];
        if (v30[0])
        {
          v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v30[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v30[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v30[0];
        if (v30[0])
        {
          v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v30[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
LABEL_33:
          double v9 = v11;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v30[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = v30[0];
        if (v30[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v30[0] + 2);
          double v9 = v19;
          unsigned int v16 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v30[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v12 = v30[0];
        if (v30[0])
        {
          long long v13 = (void *)v30[0][6];
          if (v13)
          {
            v30[0][7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          char v14 = (void *)v12[3];
          if (v14)
          {
            void v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          long long v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          double v9 = v12;
          unsigned int v16 = 2071181815;
LABEL_37:
          uint64_t v10 = v16 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  memset(v30, 0, 13);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  switch(v7)
  {
    case 2:
      std::string::basic_string[abi:ne180100]<0>(&v27, "CAPI server is already initialized; call setup functions before all other functions.");
      set_error(a3);
    case 1:
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v26, "Unknown config parameter ");
      unsigned int v24 = std::string::append(&v26, __s);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v27);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
    case 3:
      long long v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v26, "Invalid value for config parameter ");
      uint64_t v21 = std::string::append(&v26, __s);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(v20, &v27);
      v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v20, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
}

void sub_223DF6DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
    {
LABEL_9:
      __cxa_begin_catch(exception_object);
      std::current_exception();
      fill_error_from_exception((std::exception_ptr *)&a9);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
      __cxa_end_catch();
      JUMPOUT(0x223DF6D10);
    }
  }
  else if (!v29)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v28);
  goto LABEL_9;
}

void tc_model_new(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!turi::capi_server_initialized)
  {
    turi::_tc_initialize(a1);
    if (!turi::capi_server_initialized) {
      turi::_tc_initialize(v9);
    }
  }
  turi::get_unity_global_singleton(a3, a4, a5, a6, a7, a8, &v13);
  uint64_t v10 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a1);
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v10 + 64))(&v15, v10, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  operator new();
}

void sub_223DF7084(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void sub_223DF70F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_model_load(turi *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"url\" is null.");
    set_error(a2);
  }
  turi::get_unity_global_singleton(a3, a4, a5, a6, a7, a8, &v41);
  uint64_t v10 = v41;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v10 + 104))(&v40, v10, &__p);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "archive_version");
  turi::safe_varmap_get<turi::flexible_type>((uint64_t)&v40, (const void **)v38, (uint64_t)&v60);
  uint64_t v11 = 0;
  switch(v62)
  {
    case 0:
      uint64_t v11 = *(void *)&v60;
      goto LABEL_66;
    case 1:
      uint64_t v11 = (uint64_t)v60;
      goto LABEL_66;
    case 2:
      double v12 = v60;
      size_t __idx = 0;
      uint64_t v13 = (char *)(*(void *)&v60 + 8);
      if (*(char *)(*(void *)&v60 + 31) < 0) {
        uint64_t v13 = *(char **)(*(void *)&v60 + 8);
      }
      char v14 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v58, v13);
      uint64_t v11 = std::stoll(v14, &__idx, 10);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (*(char *)(*(void *)&v12 + 31) < 0) {
        uint64_t v15 = *(void *)(*(void *)&v12 + 16);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(*(void *)&v12 + 31);
      }
      if (__idx != v15)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v33 = std::string::append(&v57, " cannot be interpreted as an integer");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v58);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_33;
    case 3:
      int v55 = 0;
      uint64_t v56 = 0;
      int v54 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v54, *(const void **)(*(void *)&v60 + 8), *(void *)(*(void *)&v60 + 16), (uint64_t)(*(void *)(*(void *)&v60 + 16) - *(void *)(*(void *)&v60 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v54)
      {
        int v55 = v54;
        operator delete(v54);
      }
      goto LABEL_32;
    case 4:
      memset(v47, 0, sizeof(v47));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v47, *(uint64_t **)(*(void *)&v60 + 8), *(uint64_t **)(*(void *)&v60 + 16), (uint64_t)(*(void *)(*(void *)&v60 + 16) - *(void *)(*(void *)&v60 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      goto LABEL_32;
    case 5:
      memset(v46, 0, sizeof(v46));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v46, *(uint64_t **)(*(void *)&v60 + 8), *(uint64_t **)(*(void *)&v60 + 16), (uint64_t)(*(void *)(*(void *)&v60 + 16) - *(void *)(*(void *)&v60 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      goto LABEL_32;
    case 6:
      uint64_t v11 = (uint64_t)(*(void *)&v60 << 8) >> 8;
      goto LABEL_66;
    case 7:
      goto LABEL_66;
    case 8:
      double v16 = v60;
      uint64_t v17 = *(atomic_uint **)(*(void *)&v60 + 16);
      atomic_ullong v41 = *(void *)(*(void *)&v60 + 8);
      long long v42 = (std::__shared_weak_count *)v17;
      if (v17) {
        atomic_fetch_add_explicit(v17 + 2, 1u, memory_order_relaxed);
      }
      long long v18 = *(_OWORD *)(*(void *)&v16 + 24);
      long long v19 = *(_OWORD *)(*(void *)&v16 + 56);
      long long v44 = *(_OWORD *)(*(void *)&v16 + 40);
      long long v45 = v19;
      long long v43 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&v42);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)&v60 + 8);
      turi::flexible_type_fail(0);
      if (v52)
      {
        long long v53 = v52;
        operator delete(v52);
      }
      if (v50)
      {
        long long v51 = v50;
        operator delete(v50);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
LABEL_32:
      uint64_t v11 = 0;
LABEL_33:
      switch(v62)
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          double v20 = v60;
          if (v60 == 0.0) {
            goto LABEL_65;
          }
          if (*(char *)(*(void *)&v60 + 31) < 0) {
            operator delete(*(void **)(*(void *)&v60 + 8));
          }
          double v21 = v20;
          uint64_t v22 = 0x1012C404EF22A49;
          goto LABEL_64;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          double v29 = v60;
          if (v60 == 0.0) {
            goto LABEL_65;
          }
          atomic_ullong *volatile v30 = *(void **)(*(void *)&v60 + 8);
          if (v30)
          {
            *(void *)(*(void *)&v60 + 16) = v30;
            operator delete(v30);
          }
          double v21 = v29;
          uint64_t v22 = 0x1080C409938AC02;
          goto LABEL_64;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          double v23 = v60;
          if (v60 == 0.0) {
            goto LABEL_65;
          }
          std::string __p = (void *)(*(void *)&v60 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_59;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          double v23 = v60;
          if (v60 == 0.0) {
            goto LABEL_65;
          }
          std::string __p = (void *)(*(void *)&v60 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_59:
          double v21 = v23;
          uint64_t v22 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          double v31 = v60;
          if (v60 == 0.0) {
            goto LABEL_65;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v60 + 16));
          double v21 = v31;
          unsigned int v28 = -235920773;
          goto LABEL_63;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v60, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          double v24 = v60;
          if (v60 == 0.0) {
            goto LABEL_65;
          }
          long long v25 = *(void **)(*(void *)&v60 + 48);
          if (v25)
          {
            *(void *)(*(void *)&v60 + 56) = v25;
            operator delete(v25);
          }
          std::string v26 = *(void **)(*(void *)&v24 + 24);
          if (v26)
          {
            *(void *)(*(void *)&v24 + 32) = v26;
            operator delete(v26);
          }
          std::string v27 = *(std::__shared_weak_count **)(*(void *)&v24 + 16);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          double v21 = v24;
          unsigned int v28 = 2071181815;
LABEL_63:
          uint64_t v22 = v28 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](*(void *)&v21, v22);
LABEL_65:
          double v60 = 0.0;
          break;
        default:
          break;
      }
LABEL_66:
      double v60 = 0.0;
      int v61 = 0;
      char v62 = 0;
      if (v39 < 0)
      {
        operator delete(v38[0]);
        if (v11)
        {
LABEL_68:
          if (v11 == 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v36, "model");
            turi::safe_varmap_get<std::shared_ptr<turi::model_base>>((uint64_t)&v40, v36, &__p);
            operator new();
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown model archive version");
          set_error(a2);
        }
      }
      else if (v11)
      {
        goto LABEL_68;
      }
      std::string::basic_string[abi:ne180100]<0>(v37, "model_base");
      turi::safe_varmap_get<std::shared_ptr<turi::model_base>>((uint64_t)&v40, (const void **)v37, &__p);
      operator new();
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
}

void sub_223DF77D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (*(char *)(v53 - 89) < 0) {
    operator delete(*(void **)(v53 - 112));
  }
  if (*(char *)(v53 - 113) < 0)
  {
    operator delete(*(void **)(v53 - 136));
    if ((v52 & 1) == 0)
    {
LABEL_9:
      switch(*(unsigned char *)(v53 - 60))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v53 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v55 = *(void *)(v53 - 72);
          if (!v55) {
            goto LABEL_35;
          }
          if (*(char *)(v55 + 31) < 0) {
            operator delete(*(void **)(v55 + 8));
          }
          uint64_t v56 = (void *)v55;
          uint64_t v57 = 0x1012C404EF22A49;
          goto LABEL_34;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v53 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          int v61 = *(void **)(v53 - 72);
          if (!v61) {
            goto LABEL_35;
          }
          char v62 = (void *)v61[1];
          if (v62)
          {
            v61[2] = v62;
            operator delete(v62);
          }
          uint64_t v56 = v61;
          uint64_t v57 = 0x1080C409938AC02;
          goto LABEL_34;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v53 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          std::string v58 = *(void **)(v53 - 72);
          if (!v58) {
            goto LABEL_35;
          }
          *(void *)(v53 - 136) = v58 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 136));
          goto LABEL_29;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v53 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          std::string v58 = *(void **)(v53 - 72);
          if (!v58) {
            goto LABEL_35;
          }
          *(void *)(v53 - 136) = v58 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 136));
LABEL_29:
          uint64_t v56 = v58;
          uint64_t v57 = 0x1020C405E66F15BLL;
          goto LABEL_34;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v53 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v63 = *(void *)(v53 - 72);
          if (!v63) {
            goto LABEL_35;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v63 + 16));
          uint64_t v56 = (void *)v63;
          unsigned int v60 = -235920773;
          goto LABEL_33;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v53 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v59 = *(void **)(v53 - 72);
          if (!v59) {
            goto LABEL_35;
          }
          uint64_t v56 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v59);
          unsigned int v60 = 2071181815;
LABEL_33:
          uint64_t v57 = v60 | 0x1030C4000000000;
LABEL_34:
          MEMORY[0x22A614FA0](v56, v57);
LABEL_35:
          *(void *)(v53 - 72) = 0;
          *(_DWORD *)(v53 - 64) = 0;
          *(unsigned char *)(v53 - 60) = 0;
          if (a28 < 0) {
            operator delete(__p);
          }
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a29, a30);
          __cxa_begin_catch(exception_object);
          std::current_exception();
          fill_error_from_exception(&a10);
          std::exception_ptr::~exception_ptr(&a10);
          __cxa_end_catch();
          JUMPOUT(0x223DF7248);
        default:
          goto LABEL_35;
      }
    }
  }
  else if (!v52)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v51);
  goto LABEL_9;
}

uint64_t turi::safe_varmap_get<turi::flexible_type>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2)) {
    turi::safe_varmap_get<turi::flexible_type>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,std::string)::{lambda(void)#1}::operator()();
  }
  long long v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
  return turi::variant_converter<turi::flexible_type,void>::get(v6, a3);
}

void *turi::safe_varmap_get<std::shared_ptr<turi::model_base>>@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2)) {
    turi::safe_varmap_get<turi::flexible_type>(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,std::string)::{lambda(void)#1}::operator()();
  }
  long long v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
  uint64_t result = (void *)turi::variant_get_ref<std::shared_ptr<turi::model_base>>(v6);
  uint64_t v8 = result[1];
  *a3 = *result;
  a3[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void tc_model_load_from_data(turi *__src, size_t __len, uint64_t *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(__src);
  }
  if (__src)
  {
    std::string::basic_string[abi:ne180100](&__dst, __src, __len);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t *)__p, &__dst, 24);
    turi::get_unity_global_singleton(v6, v7, v8, v9, v10, v11, (uint64_t *)&v15);
    turi::unity_global::load_model_from_data(v15, (std::locale::__imp *)__p, (uint64_t)v12);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"data\" is null.");
  set_error(a3);
}

void sub_223DF84F4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (*(char *)(v68 - 89) < 0) {
    operator delete(*(void **)(v68 - 112));
  }
  if (*(char *)(v68 - 113) < 0)
  {
    operator delete(*(void **)(v68 - 136));
    if ((v67 & 1) == 0)
    {
LABEL_9:
      switch(*(unsigned char *)(v68 - 60))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v68 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v70 = *(void *)(v68 - 72);
          if (!v70) {
            goto LABEL_35;
          }
          if (*(char *)(v70 + 31) < 0) {
            operator delete(*(void **)(v70 + 8));
          }
          uint64_t v71 = (void *)v70;
          uint64_t v72 = 0x1012C404EF22A49;
          goto LABEL_34;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v68 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v76 = *(void **)(v68 - 72);
          if (!v76) {
            goto LABEL_35;
          }
          uint64_t v77 = (void *)v76[1];
          if (v77)
          {
            v76[2] = v77;
            operator delete(v77);
          }
          uint64_t v71 = v76;
          uint64_t v72 = 0x1080C409938AC02;
          goto LABEL_34;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v68 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v73 = *(void **)(v68 - 72);
          if (!v73) {
            goto LABEL_35;
          }
          *(void *)(v68 - 136) = v73 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 136));
          goto LABEL_29;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v68 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v73 = *(void **)(v68 - 72);
          if (!v73) {
            goto LABEL_35;
          }
          *(void *)(v68 - 136) = v73 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 136));
LABEL_29:
          uint64_t v71 = v73;
          uint64_t v72 = 0x1020C405E66F15BLL;
          goto LABEL_34;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v68 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          uint64_t v78 = *(void *)(v68 - 72);
          if (!v78) {
            goto LABEL_35;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v78 + 16));
          uint64_t v71 = (void *)v78;
          unsigned int v75 = -235920773;
          goto LABEL_33;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v68 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_35;
          }
          char v74 = *(void **)(v68 - 72);
          if (!v74) {
            goto LABEL_35;
          }
          uint64_t v71 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v74);
          unsigned int v75 = 2071181815;
LABEL_33:
          uint64_t v72 = v75 | 0x1030C4000000000;
LABEL_34:
          MEMORY[0x22A614FA0](v71, v72);
LABEL_35:
          *(void *)(v68 - 72) = 0;
          *(_DWORD *)(v68 - 64) = 0;
          *(unsigned char *)(v68 - 60) = 0;
          if (a22 < 0) {
            operator delete(__p);
          }
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a23, (char *)a24);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
          if (a66 < 0) {
            operator delete(a61);
          }
          __cxa_begin_catch(a1);
          std::current_exception();
          fill_error_from_exception(&a10);
          std::exception_ptr::~exception_ptr(&a10);
          __cxa_end_catch();
          JUMPOUT(0x223DF7E4CLL);
        default:
          goto LABEL_35;
      }
    }
  }
  else if (!v67)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v66);
  goto LABEL_9;
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  uint64_t v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  uint64_t v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = v11;
  a1[1] = 0;
  uint64_t v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  std::stringbuf::basic_stringbuf[abi:ne180100](v9, a2, a3);
  return a1;
}

void sub_223DF8C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](a1 + 128);
  return a1;
}

void tc_model_save(turi *a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "\"model\" is null.");
    set_error(a3);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "\"url\" is null.");
    set_error(a3);
  }
  turi::get_unity_global_singleton((uint64_t)a3, a4, a5, a6, a7, a8, &v17);
  uint64_t v11 = v17;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 2);
  uint64_t v15 = *((void *)a1 + 1);
  uint64_t v16 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v20[0] = 0;
  v20[1] = 0;
  long long v19 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  (*(void (**)(uint64_t, uint64_t *, char ***, void **))(*(void *)v11 + 112))(v11, &v15, &v19, __p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v19, v20[0]);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_223DF8ED0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DF8EBCLL);
}

void sub_223DF8F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_model_save_to_data(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
    turi::get_unity_global_singleton(v4, v5, v6, v7, v8, v9, (uint64_t *)&__p);
    uint64_t v10 = __p;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)a1 + 2);
    uint64_t v17 = *((void *)a1 + 1);
    long long v18 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::unity_global::save_model_to_data((uint64_t)v10, &v17, (std::string::size_type)&v20);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      p_p = (turi *)&__p;
    }
    else {
      p_p = (turi *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      size_t v13 = v16;
    }
    else {
      size_t v13 = (size_t)v15;
    }
    tc_ft_create_from_string(p_p, v13);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "\"model\" is null.");
  set_error(a2);
}

void sub_223DF91BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DF919CLL);
}

void sub_223DF9258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 2std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_223DF9524(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](v1);
  _Unwind_Resume(a1);
}

uint64_t *tc_model_name(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  {
    tc_model_name::last_name = 0;
    *(void *)algn_268081088 = 0;
    unk_268081090 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &tc_model_name::last_name, &dword_223D44000);
  }
  uint64_t v2 = (*(uint64_t (**)(void *))(**((void **)a1 + 1) + 16))(*((void **)a1 + 1));
  MEMORY[0x22A614700](&tc_model_name::last_name, v2);
  if (byte_268081097 >= 0) {
    return &tc_model_name::last_name;
  }
  else {
    return (uint64_t *)tc_model_name::last_name;
  }
}

void sub_223DF9630(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DF9660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_model_call_method(turi *a1, char *__s, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  uint64_t v6 = (unsigned char *)*((void *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v7, (const void ***)(a3 + 8));
  turi::model_base::call_function(v6, (const void **)__p, (uint64_t)v7);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v7, (char *)v7[1]);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_223DF97E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DF97ACLL);
  }
  _Unwind_Resume(a1);
}

void tc_ndarray_create_empty(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DF9930(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  MEMORY[0x22A614FA0](v10, 0x1030C40620C5048);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DF9918);
}

void sub_223DF9984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_ndarray_create_from_data(unint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a2) {
    operator new();
  }
  std::string v27 = 0;
  unsigned int v28 = 0;
  uint64_t v29 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v27, a2, &a2[a1], a1);
  unint64_t v26 = 1;
  uint64_t v8 = (uint64_t *)v27;
  if (v27 != v28)
  {
    unint64_t v9 = 1;
    do
    {
      uint64_t v10 = *v8++;
      v9 *= v10;
      unint64_t v26 = v9;
    }
    while (v8 != v28);
  }
  std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long &,void>(&v26, v25);
  uint64_t v30 = 0;
  std::vector<unsigned long>::vector(&v24, a1, &v30);
  if (a3)
  {
    uint64_t v11 = **(void ***)v25;
    uint64_t v12 = 0;
    if (a1)
    {
      size_t v13 = (uint64_t *)v24;
      char v14 = (char *)v24 - 8;
      while (1)
      {
        uint64_t v15 = 0;
        unsigned __int8 v16 = v13;
        uint64_t v17 = a3;
        unint64_t v18 = a1;
        do
        {
          uint64_t v20 = *v17++;
          uint64_t v19 = v20;
          uint64_t v21 = *v16++;
          v15 += v21 * v19;
          --v18;
        }
        while (v18);
        v11[v12] = *(void *)&a4[8 * v15];
        unint64_t v22 = a1;
        while (1)
        {
          unint64_t v23 = *(void *)&v14[8 * v22] + 1;
          *(void *)&v14[8 * v22] = v23;
          if (v23 < a2[v22 - 1]) {
            break;
          }
          *(void *)&v14[8 * v22--] = 0;
          if (!v22) {
            goto LABEL_20;
          }
        }
        ++v12;
      }
    }
    *uint64_t v11 = *(void *)a4;
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(*(char **)v25, a4, (uint64_t)&a4[8 * v26], v26);
  }
LABEL_20:
  operator new();
}

void sub_223DF9C24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  MEMORY[0x22A614FA0](v20, 0x1030C40620C5048);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF9C08);
}

void sub_223DF9CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_ndarray_num_dimensions(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
    set_error(a2);
  }
  return (uint64_t)(*((void *)a1 + 4) - *((void *)a1 + 3)) >> 3;
}

void sub_223DF9D94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF9D80);
}

void sub_223DF9DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_ndarray_shape(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
    set_error(a2);
  }
  return *((void *)a1 + 3);
}

void sub_223DF9E74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF9E60);
}

void sub_223DF9EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_ndarray_strides(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
    set_error(a2);
  }
  return *((void *)a1 + 6);
}

void sub_223DF9F54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DF9F40);
}

void sub_223DF9FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_ndarray_data(uint64_t **a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
    set_error(a2);
  }
  if (*a1[1] == a1[1][1]) {
    return 0;
  }
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  if (v4 == v5) {
    return 0;
  }
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = *v5++;
    v6 *= v7;
  }
  while (v5 != v4);
  if (!v6) {
    return 0;
  }
  else {
    return turi::flexible_type_impl::ndarray<double>::at(a1 + 1, 0);
  }
}

void sub_223DFA070(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFA05CLL);
}

void sub_223DFA0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t turi::flexible_type_impl::ndarray<double>::at(uint64_t **a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)a1[8] + a2;
  uint64_t v3 = **a1;
  if (v2 >= ((*a1)[1] - v3) >> 3) {
    turi::flexible_type_impl::ndarray<double>::at(unsigned long)const::{lambda(void)#1}::operator()();
  }
  return v3 + 8 * v2;
}

uint64_t tc_ndarray_writable_data(uint64_t *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_ndarray\" is null.");
    set_error(a2);
  }
  if (*(void *)a1[1] == *(void *)(a1[1] + 8)) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)a1[3];
  uint64_t v4 = (uint64_t *)a1[4];
  if (v4 == v5) {
    return 0;
  }
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = *v5++;
    v6 *= v7;
  }
  while (v5 != v4);
  if (!v6) {
    return 0;
  }
  turi::flexible_type_impl::ndarray<double>::ensure_unique(a1 + 1);
  return turi::flexible_type_impl::ndarray<double>::at(a1 + 1, 0);
}

void sub_223DFA200(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFA1E8);
}

void sub_223DFA24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void turi::flexible_type_impl::ndarray<double>::ensure_unique(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    if (*(uint64_t *)(v1 + 8) >= 1)
    {
      std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double>&,void>(*a1, &v5);
      long long v3 = v5;
      long long v5 = 0uLL;
      uint64_t v4 = (std::__shared_weak_count *)a1[1];
      *(_OWORD *)a1 = v3;
      if (v4)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        if (*((void *)&v5 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
        }
      }
    }
  }
}

uint64_t turi::flexible_type_impl::ndarray<double>::at(uint64_t *a1, uint64_t a2)
{
  turi::flexible_type_impl::ndarray<double>::ensure_unique(a1);
  unint64_t v4 = a1[8] + a2;
  uint64_t v5 = *(void *)*a1;
  if (v4 >= (*(void *)(*a1 + 8) - v5) >> 3) {
    turi::flexible_type_impl::ndarray<double>::at(unsigned long)::{lambda(void)#1}::operator()();
  }
  return v5 + 8 * v4;
}

void tc_parameters_create_empty(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DFA3B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223DFA3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_parameters_add(uint64_t **a1, char *__s, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_variant\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v11 = __p;
  uint64_t v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (uint64_t *)(a3 + 8));
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223DFA4E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFA4CCLL);
}

void sub_223DFA540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_entry_exists(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (turi *)((char *)a1 + 16) != (turi *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_223DFA614(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFA5F8);
}

void sub_223DFA668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_parameters_retrieve(turi *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFA788(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFA768);
}

void sub_223DFA7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_parameters_add_int64(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v8 = a3;
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "\"tc_parameters\" is null.");
    set_error(a4);
  }
  turi::flexible_type_converter<long long>::set(&v8, (uint64_t)__p);
  *(void *)&v13[5] = *(void *)&__p[5];
  *(void *)size_t v13 = *(void *)__p;
  v13[12] = __p[12];
  LODWORD(v12) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  char v9 = __p;
  uint64_t v7 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v9);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v7 + 14, (unsigned int *)&v12);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v12);
}

void sub_223DFA928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DFA8F8);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_double(uint64_t **a1, char *a2, uint64_t *a3, double a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  double v8 = a4;
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  turi::flexible_type_converter<double>::set(&v8, (uint64_t)__p);
  *(void *)&v13[5] = *(void *)&__p[5];
  *(void *)size_t v13 = *(void *)__p;
  v13[12] = __p[12];
  LODWORD(v12) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  char v9 = __p;
  uint64_t v7 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v9);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v7 + 14, (unsigned int *)&v12);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v12);
}

void sub_223DFAB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DFAAE0);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_cstring(turi *a1, int a2, char *__s, uint64_t *a4)
{
  v9[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (__s)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, __s);
      turi::flexible_type_converter<std::string>::set((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "\"cstring\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "\"tc_parameters\" is null.");
  set_error(a4);
}

void sub_223DFAD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DFAD04);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_string(turi *a1, int a2, void *__src, size_t __len, uint64_t *a5)
{
  void v11[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (__src)
    {
      std::string::basic_string[abi:ne180100](&__dst, __src, __len);
      turi::flexible_type_converter<std::string>::set((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v11, "\"string\" is null.");
    set_error(a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "\"tc_parameters\" is null.");
  set_error(a5);
}

void sub_223DFAF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DFAF54);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_double_array(turi *a1, uint64_t a2, const void *a3, unint64_t a4, uint64_t *a5)
{
  void v11[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a3)
    {
      memset(v9, 0, sizeof(v9));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v9, a3, (uint64_t)a3 + 8 * a4, a4);
      turi::flexible_type_converter<std::vector<double>>::set((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v11, "\"data\" is null.");
    set_error(a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "\"tc_parameters\" is null.");
  set_error(a5);
}

void sub_223DFB1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a26 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223DFB1B4);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_flex_list(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v8[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a3) {
      turi::flexible_type_converter<std::vector<turi::flexible_type>>::set((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "\"tc_flex_list\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "\"tc_parameters\" is null.");
  set_error(a4);
}

void sub_223DFB414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DFB3E4);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_flex_dict(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v8[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a3) {
      turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::set((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "\"tc_flex_dict\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "\"tc_parameters\" is null.");
  set_error(a4);
}

void sub_223DFB628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DFB5F8);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_datetime(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "\"tc_parameters\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "\"tc_datetime\" is null.");
    set_error(a4);
  }
  turi::flexible_type_converter<turi::flex_date_time>::set((uint64_t *)(a3 + 8), (uint64_t)__p);
  *(void *)&v13[5] = *(void *)&__p[5];
  *(void *)size_t v13 = *(void *)__p;
  v13[12] = __p[12];
  LODWORD(v12) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  char v9 = __p;
  double v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, &v9);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (unsigned int *)&v12);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v12);
}

void sub_223DFB83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DFB80CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_image(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  __p[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a3)
    {
      *(void *)((char *)v7 + 5) = 0x800000000000000;
      v7[0] = 0;
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_flex_image\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a4);
}

void sub_223DFBFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, int a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2)
  {
    MEMORY[0x22A614FA0](v27, 0x1012C404EF22A49);
    switch(a21)
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v36 = a19;
          if (a19)
          {
            if (*(char *)(a19 + 31) < 0) {
              operator delete(*(void **)(a19 + 8));
            }
            MEMORY[0x22A614FA0](v36, 0x1012C404EF22A49);
          }
        }
        goto LABEL_29;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_29;
        }
        uint64_t v29 = a19;
        if (!a19) {
          goto LABEL_23;
        }
        uint64_t v30 = *(void **)(a19 + 8);
        if (v30)
        {
          *(void *)(a19 + 16) = v30;
          operator delete(v30);
        }
        double v31 = (void *)v29;
        uint64_t v32 = 0x1080C409938AC02;
        goto LABEL_22;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_29;
        }
        uint64_t v33 = a19;
        if (!a19) {
          goto LABEL_23;
        }
        a13 = (void *)(a19 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
        goto LABEL_14;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_29;
        }
        uint64_t v33 = a19;
        if (!a19) {
          goto LABEL_23;
        }
        a13 = (void *)(a19 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
LABEL_14:
        double v31 = (void *)v33;
        uint64_t v32 = 0x1020C405E66F15BLL;
        goto LABEL_22;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_29;
        }
        uint64_t v34 = a19;
        if (!a19) {
          goto LABEL_23;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(a19 + 16));
        double v31 = (void *)v34;
        unsigned int v35 = -235920773;
        goto LABEL_21;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)a19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_29;
        }
        if (!a19) {
          goto LABEL_23;
        }
        double v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a19);
        unsigned int v35 = 2071181815;
LABEL_21:
        uint64_t v32 = v35 | 0x1030C4000000000;
LABEL_22:
        MEMORY[0x22A614FA0](v31, v32);
LABEL_23:
        a19 = 0;
LABEL_29:
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception(&a10);
        std::exception_ptr::~exception_ptr(&a10);
        __cxa_end_catch();
        JUMPOUT(0x223DFBFB0);
      default:
        goto LABEL_29;
    }
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_flexible_type(uint64_t **a1, char *__s, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_flexible_type\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  char v11 = __p;
  double v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<turi::flexible_type>(v8 + 14, a3 + 8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223DFC58C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFC574);
}

void sub_223DFC5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_parameters_add_sarray(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  v15[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "\"tc_parameters\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "\"tc_sarray\" is null.");
    set_error(a4);
  }
  turi::gl_sarray::get_proxy(a3 + 8, &v12);
  std::string __p = v12;
  char v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::set((uint64_t *)&__p, (uint64_t)v15);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  p_p = &__p;
  double v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (unsigned int *)v15);
  if (v11 < 0) {
    operator delete(__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v15);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_223DFC774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a26 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DFC744);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_sframe(uint64_t **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  v15[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "\"tc_parameters\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "\"tc_sframe\" is null.");
    set_error(a4);
  }
  turi::gl_sframe::get_proxy(a3 + 8, &v12);
  std::string __p = v12;
  char v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&__p, (uint64_t)v15);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  p_p = &__p;
  double v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v8 + 14, (unsigned int *)v15);
  if (v11 < 0) {
    operator delete(__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v15);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_223DFC9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (a26 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DFC99CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_parameters(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void v7[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a3) {
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "\"tc_parameters\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "\"tc_parameters\" is null.");
  set_error(a4);
}

void sub_223DFCBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DFCBC0);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_add_model(uint64_t **a1, char *__s, uint64_t a3, uint64_t *a4)
{
  v13[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "\"tc_parameters\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "\"tc_model\" is null.");
    set_error(a4);
  }
  double v8 = *(atomic_ullong **)(a3 + 16);
  v13[1] = *(void **)(a3 + 8);
  void v13[2] = v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
  }
  LODWORD(v13[0]) = 3;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v12 = __p;
  char v9 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v12);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v9 + 14, (unsigned int *)v13);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v13);
}

void sub_223DFCDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DFCDC8);
  }
  _Unwind_Resume(exception_object);
}

BOOL tc_parameters_is_int64(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 0;
}

void sub_223DFCF84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFCFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void sub_223DFD074(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_223DFD098(_Unwind_Exception *a1)
{
}

BOOL tc_parameters_is_double(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 1;
}

void sub_223DFD17C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFD1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_cstring(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 2;
}

void sub_223DFD2BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFD314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_string(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 2;
}

void sub_223DFD3FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFD454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_double_array(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 3;
}

void sub_223DFD53C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFD594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_flex_list(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 4;
}

void sub_223DFD67C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFD6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_flex_dict(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 5;
}

void sub_223DFD7BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFD814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_datetime(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 6;
}

void sub_223DFD8FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFD954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_image(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *v6 == *v6 >> 31 && *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v6) + 12) == 8;
}

void sub_223DFDA3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223DFDA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_flexible_type(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  BOOL v7 = *v6 == *v6 >> 31;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_223DFDB68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFDB4CLL);
}

void sub_223DFDBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_sarray(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  BOOL v7 = (*v6 ^ (*v6 >> 31)) == 5;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_223DFDC94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFDC78);
}

void sub_223DFDCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_sframe(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  BOOL v7 = (*v6 ^ (*v6 >> 31)) == 4;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_223DFDDC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFDDA4);
}

void sub_223DFDE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_parameters(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  BOOL v7 = (*v6 ^ (*v6 >> 31)) == 6;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_223DFDEEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFDED0);
}

void sub_223DFDF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_parameters_is_model(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  BOOL v7 = (*v6 ^ (*v6 >> 31)) == 3;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

void sub_223DFE018(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFDFFCLL);
}

void sub_223DFE06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_parameters_retrieve_int64(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *(void *)turi::variant_get_ref<turi::flexible_type>(v6);
}

void sub_223DFE140(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFE128);
}

void sub_223DFE198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

double tc_parameters_retrieve_double(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return *(double *)turi::variant_get_ref<turi::flexible_type>(v6);
}

void sub_223DFE26C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFE254);
}

void sub_223DFE2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_parameters_retrieve_string(turi *a1, char *__s, uint64_t *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p);
    if (v8 < 0) {
      operator delete(__p);
    }
    turi::variant_get_ref<turi::flexible_type>(v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFE41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223DFE3E4);
  }
  _Unwind_Resume(exception_object);
}

void tc_parameters_retrieve_array(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    turi::variant_get_ref<turi::flexible_type>(v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFE86C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x22A614FA0](v16, 0x1080C409938AC02);
  unint64_t add = atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL);
  if (v15 && add == 1)
  {
    uint64_t v19 = (void *)v15[1];
    if (v19)
    {
      v15[2] = (atomic_ullong)v19;
      operator delete(v19);
    }
    MEMORY[0x22A614FA0](v15, 0x1080C409938AC02);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFE6E8);
}

void sub_223DFE92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_parameters_retrieve_flex_list(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    turi::variant_get_ref<turi::flexible_type>(v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFEAA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DFEA88);
}

void sub_223DFEAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_parameters_retrieve_flex_dict(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    turi::variant_get_ref<turi::flexible_type>(v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFEC54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DFEC38);
}

void sub_223DFECAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_parameters_retrieve_datetime(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    turi::variant_get_ref<turi::flexible_type>(v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFEDB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFED9CLL);
}

void sub_223DFEE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_parameters_retrieve_image(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p);
    if (v8 < 0) {
      operator delete(__p);
    }
    turi::variant_get_ref<turi::flexible_type>(v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFEF70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DFEF54);
}

void sub_223DFEFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_parameters_retrieve_flexible_type(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    turi::variant_get_ref<turi::flexible_type>(v6);
    new_tc_flexible_type<turi::flexible_type const&>();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFF09C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFF084);
}

void sub_223DFF0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_parameters_retrieve_sarray(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(v6);
    new_tc_sarray<std::shared_ptr<turi::unity_sarray_base> const&>();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFF1C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFF1B0);
}

void sub_223DFF220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void new_tc_sarray<std::shared_ptr<turi::unity_sarray_base> const&>()
{
}

void sub_223DFF2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(int *a1)
{
  long long v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    long long v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  long long v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    long long v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_223DFF3B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sarray_base>>(v10);
}

void sub_223DFF3DC(_Unwind_Exception *a1)
{
}

void tc_parameters_retrieve_sframe(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(v6);
    new_tc_sframe<std::shared_ptr<turi::unity_sframe_base> const&>();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFF4AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFF494);
}

void sub_223DFF504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void new_tc_sframe<std::shared_ptr<turi::unity_sframe_base> const&>()
{
}

void sub_223DFF5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(int *a1)
{
  long long v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    long long v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  long long v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    long long v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_223DFF6DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sframe_base>>(v10);
}

void sub_223DFF700(_Unwind_Exception *a1)
{
}

void tc_parameters_retrieve_parameters(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    BOOL v6 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)&__p);
    if (v8 < 0) {
      operator delete(__p);
    }
    turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFF86C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFF83CLL);
}

void sub_223DFF8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t *a1)
{
  long long v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)a1, *(_DWORD *)a1 ^ (*(int *)a1 >> 31), (uint64_t)&v3, a1 + 1);
  if (!result)
  {
    long long v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

{
  uint64_t result;
  char v2;
  char *v3;

  long long v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*(unsigned int *)a1, *(_DWORD *)a1 ^ (*(int *)a1 >> 31), (uint64_t)&v3, a1 + 1);
  if (!result)
  {
    long long v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_223DFF95C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void sub_223DFF980(_Unwind_Exception *a1)
{
}

void tc_parameters_retrieve_model(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    BOOL v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)a1 + 8, (const void **)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    turi::variant_get_ref<std::shared_ptr<turi::model_base>>(v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_parameters\" is null.");
  set_error(a3);
}

void sub_223DFFA8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223DFFA74);
}

void sub_223DFFAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t turi::variant_get_ref<std::shared_ptr<turi::model_base>>(int *a1)
{
  long long v3 = &v2;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::model_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v3, (uint64_t)(a1 + 2));
  if (!result)
  {
    long long v3 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_223DFFB7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::model_base>>(v10);
}

void sub_223DFFBA0(_Unwind_Exception *a1)
{
}

void tc_sarray_create_empty(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223DFFC38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  MEMORY[0x22A614FA0](v10, 0xA0C40E11D95CDLL);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DFFC20);
}

void sub_223DFFC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_create_from_sequence(turi *a1, turi::gl_sarray *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a2 >= a1) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = a2;
  }
  if (a1 <= a2) {
    unint64_t v5 = (unint64_t)a2;
  }
  else {
    unint64_t v5 = (unint64_t)a1;
  }
  turi::gl_sarray::from_sequence(v4, v5, a2 < a1, (uint64_t)v6);
  operator new();
}

void sub_223DFFD78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_223DFFDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_create_from_const(uint64_t a1, const turi::flexible_type *a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::from_const((turi::gl_sarray *)(a1 + 8), a2, (turi::gl_sarray *)v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"flexible_type\" is null.");
  set_error(a3);
}

void sub_223DFFF08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223DFFEECLL);
}

void sub_223DFFF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_create_copy(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)v4, (const turi::gl_sarray *)(a1 + 8));
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E000A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E0008CLL);
}

void sub_223E00138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_create_from_list(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    turi::gl_sarray::gl_sarray(v4, (char *)a1 + 8, 7);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "flex_list instance null.");
  set_error(a2);
}

void sub_223E0024C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E00230);
}

void sub_223E002DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_load(turi *__s)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(__s);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)__s);
  turi::gl_sarray::gl_sarray(v3, __p);
  operator new();
}

void sub_223E003D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_223E00460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_save(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "\"sarray\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, "binary");
  turi::gl_sarray::save((uint64_t)a1 + 8, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_223E00534(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E00520);
}

void sub_223E005A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_save_as_text(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "\"sarray\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, "text");
  turi::gl_sarray::save((uint64_t)a1 + 8, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_223E00674(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E00660);
}

void sub_223E006E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_extract_element(turi *a1, unint64_t a2, uint64_t *a3)
{
  v8[2] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    BOOL v6 = (turi *)((char *)a1 + 8);
    if (turi::gl_sarray::size(v6) > a2)
    {
      turi::gl_sarray::operator[]((void **)v6, a2, (uint64_t)v8);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "index out of range.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E00828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E007F4);
  }
  _Unwind_Resume(exception_object);
}

void tc_sarray_apply_mask(turi *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::operator[]((uint64_t)a1 + 8, a2 + 8, (uint64_t)v6);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"mask\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"SArray 1\" is null.");
  set_error(a3);
}

void sub_223E00B00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E00AE4);
}

void sub_223E00B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t tc_sarray_all_nonzero(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2);
  }
  return turi::gl_sarray::all((turi::gl_sarray *)(a1 + 8));
}

void sub_223E00C34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E00C20);
}

void sub_223E00C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_sarray_any_nonzero(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2);
  }
  return turi::gl_sarray::any((turi::gl_sarray *)(a1 + 8));
}

void sub_223E00D18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E00D04);
}

void sub_223E00D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_materialize(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2);
  }
  turi::gl_sarray::materialize((turi::gl_sarray *)(a1 + 8));
}

void sub_223E00DF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E00DE8);
}

void sub_223E00E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_head(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::head((turi::gl_sarray *)(a1 + 8), (uint64_t)v5);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E00F5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E00F40);
}

void sub_223E00FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_tail(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::tail((turi::gl_sarray *)(a1 + 8), (uint64_t)v5);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E01104(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E010E8);
}

void sub_223E01194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_count_words(turi *a1, uint64_t a2, uint64_t *a3)
{
  __p[12] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    turi::flexible_type::flexible_type((turi::flexible_type *)__p, "\r");
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E015A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E01560);
  }
  _Unwind_Resume(exception_object);
}

void tc_sarray_count_words_with_delimiters(turi *a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a3)
    {
      memset(v8, 0, sizeof(v8));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v8, *(uint64_t **)(a3 + 8), *(uint64_t **)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4);
      turi::gl_sarray::count_words((uint64_t)a1 + 8, a2 != 0);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex_list\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a4);
}

void sub_223E01A24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E01A08);
}

void sub_223E01AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_count_word_ngrams(turi *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "word");
    turi::gl_sarray::count_ngrams((uint64_t)a1 + 8, a2, (uint64_t *)__p, a3, 1u, (uint64_t)v9);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "\"sarray\" is null.");
  set_error(a4);
}

void sub_223E01C20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E01C04);
}

void sub_223E01CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_count_character_ngrams(turi *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "character");
    turi::gl_sarray::count_ngrams((uint64_t)a1 + 8, a2, (uint64_t *)__p, a3, a4, (uint64_t)v11);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, "\"sarray\" is null.");
  set_error(a5);
}

void sub_223E01E1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E01DFCLL);
}

void sub_223E01EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_dict_trim_by_keys(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    turi::gl_sarray::dict_trim_by_keys((uint64_t)a1 + 8, (uint64_t)v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a4);
}

void sub_223E01FE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E01FCCLL);
}

void sub_223E02078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_dict_trim_by_value_range(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a2)
  {
    if (a3)
    {
      if (a1)
      {
        turi::gl_sarray::dict_trim_by_values((uint64_t)a1 + 8, (uint64_t)v8);
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
      set_error(a4);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flexible_type\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"flexible_type\" is null.");
  set_error(a4);
}

void sub_223E021E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E021C4);
}

void sub_223E02284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_max(uint64_t a1, uint64_t *a2)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::max((turi::gl_sarray *)(a1 + 8));
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E02390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E0235CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_sarray_min(uint64_t a1, uint64_t *a2)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::min((turi::gl_sarray *)(a1 + 8));
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E02630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E025FCLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_sarray_mean(uint64_t a1, uint64_t *a2)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::mean((turi::gl_sarray *)(a1 + 8));
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E028D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E0289CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_sarray_std(uint64_t a1, uint64_t *a2)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::std((turi::gl_sarray *)(a1 + 8));
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E02B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E02B3CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sarray_nnz(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2);
  }
  return turi::gl_sarray::nnz((turi::gl_sarray *)(a1 + 8));
}

void sub_223E02D9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E02D88);
}

void sub_223E02DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_sarray_num_missing(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2);
  }
  return turi::gl_sarray::num_missing((turi::gl_sarray *)(a1 + 8));
}

void sub_223E02E80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E02E6CLL);
}